[2024-12-02 17:37:35.878609] start transfer model NCF
{'recall_num': 50, 'recall_alg': 'random', 'epochs': 1, 'device': 'cuda:5', 'batch_size': 64, 'task_index': 1, 'num_task': 10, 'lr': 0.001}
test users have been loaded, len = 568
test users = ['13606' '13652' '13666' '13703' '13718' '13721' '13726' '13749' '13753'
 '13757' '13805' '13814' '13818' '13838' '13892' '13899' '13942' '13944'
 '13952' '13955' '13964' '13983' '14071' '14088' '14141' '14166' '14217'
 '14246' '14280' '14305' '14370' '14374' '14442' '14462' '14473' '14512'
 '14519' '14544' '14549' '14573' '14577' '14589' '14633' '14674' '14678'
 '14687' '14713' '14768' '14852' '14908' '14949' '14962' '14977' '15043'
 '15072' '15094' '15108' '15134' '15138' '15165' '15194' '15208' '15242'
 '15265' '15299' '15312' '15339' '15418' '15428' '15439' '15440' '15452'
 '15486' '15492' '15497' '15548' '15571' '15616' '15688' '15701' '15703'
 '15772' '15796' '15803' '15812' '15824' '15825' '15838' '15855' '15868'
 '15880' '15918' '15962' '16016' '16040' '16050' '16073' '16092' '16117'
 '16128' '16132' '16158' '16161' '16162' '16167' '16189' '16231' '16270'
 '16280' '16351' '16370' '16398' '16404' '16462' '16498' '16551' '16558'
 '16575' '16589' '16606' '16670' '16676' '16687' '16724' '16734' '16745'
 '16771' '16785' '16865' '16881' '16883' '16920' '16936' '16938' '16943'
 '16965' '16972' '16975' '17014' '17022' '17029' '17030' '17035' '17040'
 '17062' '17078' '17106' '17115' '17136' '17163' '17176' '17179' '17242'
 '17301' '17304' '17318' '17319' '17333' '17348' '17357' '17362' '17437'
 '17444' '17454' '17475' '17479' '17488' '17503' '17508' '17510' '17516'
 '17540' '17561' '17571' '17623' '17635' '17640' '17683' '17738' '17763'
 '17764' '17784' '17838' '17871' '17888' '17996' '18010' '18013' '18029'
 '18059' '18069' '18080' '18104' '18105' '18115' '18122' '18142' '18145'
 '18149' '18205' '18232' '18250' '18280' '18288' '18354' '18363' '18415'
 '18470' '18496' '18515' '18543' '18574' '18599' '18611' '18627' '18628'
 '18687' '18706' '18711' '18712' '18723' '18756' '18765' '18784' '18808'
 '18907' '18955' '18968' '18977' '18979' '19104' '19148' '19305' '19310'
 '19344' '19416' '19461' '19503' '19506' '19522' '19560' '19573' '19574'
 '19575' '19635' '19639' '19644' '19650' '19658' '19711' '19722' '19818'
 '19829' '19846' '19865' '19874' '19906' '19939' '19963' '19971' '19995'
 '20011' '20054' '20066' '20076' '20103' '20119' '20132' '20134' '20152'
 '20241' '20261' '20273' '20313' '20322' '20364' '20388' '20436' '20453'
 '20475' '20506' '20530' '20588' '20596' '20639' '20661' '20824' '20845'
 '20892' '20899' '20907' '20912' '20948' '21007' '21011' '21044' '21060'
 '21075' '21078' '21080' '21119' '21130' '21132' '21163' '21185' '21186'
 '21200' '21212' '21220' '21280' '21284' '21301' '21302' '21313' '21346'
 '21391' '21398' '21408' '21422' '21423' '21517' '21538' '21591' '21601'
 '21617' '21627' '21662' '21682' '21729' '21792' '21815' '21816' '21817'
 '21818' '21840' '21901' '21997' '22025' '22123' '22145' '22205' '22213'
 '22264' '22292' '22313' '22320' '22352' '22356' '22357' '22379' '22411'
 '22427' '22435' '22500' '22501' '22512' '22525' '22552' '22592' '22646'
 '22658' '22674' '22695' '22697' '22729' '22754' '22759' '22849' '22882'
 '22888' '22899' '22901' '22902' '22934' '22961' '22999' '23006' '23023'
 '23061' '23103' '23130' '23149' '23176' '23181' '23184' '23190' '23235'
 '23238' '23285' '23286' '23311' '23314' '23333' '23345' '23352' '23357'
 '23361' '23403' '23421' '23435' '23463' '23495' '23498' '23501' '23523'
 '23577' '23599' '23613' '23638' '23666' '23700' '23705' '23714' '23754'
 '23837' '23851' '23866' '23890' '23921' '23983' '24020' '24071' '24112'
 '24116' '24123' '24135' '24200' '24213' '24219' '24245' '24272' '24279'
 '24285' '24295' '24345' '24392' '24404' '24425' '24434' '24444' '24475'
 '24514' '24531' '24559' '24569' '24578' '24604' '24608' '24618' '24645'
 '24661' '24678' '24681' '24688' '24691' '24692' '24694' '24716' '24722'
 '24780' '24797' '24800' '24903' '24921' '24942' '24945' '24952' '24964'
 '25002' '25012' '25019' '25050' '25091' '25092' '25101' '25102' '25104'
 '25110' '25134' '25152' '25176' '25180' '25230' '25273' '25304' '25327'
 '25405' '25411' '25429' '25434' '25466' '25474' '25475' '25501' '25541'
 '25591' '25639' '25659' '25660' '25676' '25737' '25797' '25825' '25856'
 '25859' '25880' '25978' '26004' '26062' '26087' '26106' '26138' '26162'
 '26164' '26172' '26188' '26193' '26208' '26214' '26222' '26226' '26238'
 '26239' '26270' '26372' '26413' '26475' '26489' '26491' '26516' '26581'
 '26582' '26640' '26648' '26651' '26692' '26708' '26748' '26763' '26779'
 '26799' '26821' '26831' '26835' '26863' '26867' '26871' '26881' '26932'
 '26944' '26954' '26978' '27007' '27073' '27074' '27083' '27102' '27118'
 '27119' '27134' '27138' '27149' '27189' '27207' '27210' '27271' '27278'
 '27305']
[2024-12-02 17:37:35.891348] start test on test users
[2024-12-02 17:37:35.891393] start test user 13606 0/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:37:37.435825] start test user 13606 0/568 recall augumented users by random, augumented_users = [111702, 102311, 36933, 48077, 76881, 29425, 27018, 82395, 106096, 85078, 62234, 47890, 119893, 87634, 67412, 78953, 1599, 127903, 90305, 133751, 89339, 54872, 125119, 52789, 15038, 17391, 33283, 116172, 31393, 61051, 43379, 20947, 14938, 112825, 87057, 2403, 50488, 8327, 79345, 132346, 91318, 135674, 35548, 6773, 45099, 109938, 92935, 126501, 106042, 1784]
[2024-12-02 17:37:37.495894] user = 13606 Cloud 0/568
[2024-12-02 17:37:42.405308] user = 13606 Local 0/568
[2024-12-02 17:37:42.866565] user = 13606 Local+ 0/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:37:45.538841] user = 13606 MPDA- 0/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7532069157836029
Training on augumented user 111702 0/50 current_auc = 0.7532069157836029
User 111702 AUC after training: 0.7529280535415505
User 111702 does not improve AUC. Reverting changes.
Training on augumented user 102311 1/50 current_auc = 0.7532069157836029
User 102311 AUC after training: 0.7530210076222346
User 102311 does not improve AUC. Reverting changes.
Training on augumented user 36933 2/50 current_auc = 0.7532069157836029
User 36933 AUC after training: 0.7518126045733406
User 36933 does not improve AUC. Reverting changes.
Training on augumented user 48077 3/50 current_auc = 0.7532069157836029
User 48077 AUC after training: 0.7527421453801821
User 48077 does not improve AUC. Reverting changes.
Training on augumented user 76881 4/50 current_auc = 0.7532069157836029
User 76881 AUC after training: 0.7523703290574456
User 76881 does not improve AUC. Reverting changes.
Training on augumented user 29425 5/50 current_auc = 0.7532069157836029
User 29425 AUC after training: 0.7528350994608664
User 29425 does not improve AUC. Reverting changes.
Training on augumented user 27018 6/50 current_auc = 0.7532069157836029
User 27018 AUC after training: 0.7530210076222347
User 27018 does not improve AUC. Reverting changes.
Training on augumented user 82395 7/50 current_auc = 0.7532069157836029
User 82395 AUC after training: 0.7531139617029188
User 82395 does not improve AUC. Reverting changes.
Training on augumented user 106096 8/50 current_auc = 0.7532069157836029
User 106096 AUC after training: 0.7508830637664993
User 106096 does not improve AUC. Reverting changes.
Training on augumented user 85078 9/50 current_auc = 0.7532069157836029
User 85078 AUC after training: 0.7534857780256553
User 85078 improves AUC. Keeping the model.
Training on augumented user 62234 10/50 current_auc = 0.7534857780256553
User 62234 AUC after training: 0.7536716861870236
User 62234 improves AUC. Keeping the model.
Training on augumented user 47890 11/50 current_auc = 0.7536716861870236
User 47890 AUC after training: 0.7527421453801822
User 47890 does not improve AUC. Reverting changes.
Training on augumented user 119893 12/50 current_auc = 0.7536716861870236
User 119893 AUC after training: 0.7534857780256553
User 119893 does not improve AUC. Reverting changes.
Training on augumented user 87634 13/50 current_auc = 0.7536716861870236
User 87634 AUC after training: 0.753299869864287
User 87634 does not improve AUC. Reverting changes.
Training on augumented user 67412 14/50 current_auc = 0.7536716861870236
User 67412 AUC after training: 0.7529280535415505
User 67412 does not improve AUC. Reverting changes.
Training on augumented user 78953 15/50 current_auc = 0.7536716861870236
User 78953 AUC after training: 0.7537646402677077
User 78953 improves AUC. Keeping the model.
Training on augumented user 1599 16/50 current_auc = 0.7537646402677077
User 1599 AUC after training: 0.753950548429076
User 1599 improves AUC. Keeping the model.
Training on augumented user 127903 17/50 current_auc = 0.753950548429076
User 127903 AUC after training: 0.7521844208960774
User 127903 does not improve AUC. Reverting changes.
Training on augumented user 90305 18/50 current_auc = 0.753950548429076
User 90305 AUC after training: 0.7541364565904444
User 90305 improves AUC. Keeping the model.
Training on augumented user 133751 19/50 current_auc = 0.7541364565904444
User 133751 AUC after training: 0.7546941810745491
User 133751 improves AUC. Keeping the model.
Training on augumented user 89339 20/50 current_auc = 0.7546941810745491
User 89339 AUC after training: 0.75515895147797
User 89339 improves AUC. Keeping the model.
Training on augumented user 54872 21/50 current_auc = 0.75515895147797
User 54872 AUC after training: 0.7552519055586541
User 54872 improves AUC. Keeping the model.
Training on augumented user 125119 22/50 current_auc = 0.7552519055586541
User 125119 AUC after training: 0.7550659973972859
User 125119 does not improve AUC. Reverting changes.
Training on augumented user 52789 23/50 current_auc = 0.7552519055586541
User 52789 AUC after training: 0.7544153188324967
User 52789 does not improve AUC. Reverting changes.
Training on augumented user 15038 24/50 current_auc = 0.7552519055586541
User 15038 AUC after training: 0.7548800892359174
User 15038 does not improve AUC. Reverting changes.
Training on augumented user 17391 25/50 current_auc = 0.7552519055586541
User 17391 AUC after training: 0.7548800892359174
User 17391 does not improve AUC. Reverting changes.
Training on augumented user 33283 26/50 current_auc = 0.7552519055586541
User 33283 AUC after training: 0.7546941810745492
User 33283 does not improve AUC. Reverting changes.
Training on augumented user 116172 27/50 current_auc = 0.7552519055586541
User 116172 AUC after training: 0.7552519055586541
User 116172 does not improve AUC. Reverting changes.
Training on augumented user 31393 28/50 current_auc = 0.7552519055586541
User 31393 AUC after training: 0.753206915783603
User 31393 does not improve AUC. Reverting changes.
Training on augumented user 61051 29/50 current_auc = 0.7552519055586541
User 61051 AUC after training: 0.7518126045733408
User 61051 does not improve AUC. Reverting changes.
Training on augumented user 43379 30/50 current_auc = 0.7552519055586541
User 43379 AUC after training: 0.754601226993865
User 43379 does not improve AUC. Reverting changes.
Training on augumented user 20947 31/50 current_auc = 0.7552519055586541
User 20947 AUC after training: 0.754601226993865
User 20947 does not improve AUC. Reverting changes.
Training on augumented user 14938 32/50 current_auc = 0.7552519055586541
User 14938 AUC after training: 0.7554378137200223
User 14938 improves AUC. Keeping the model.
Training on augumented user 112825 33/50 current_auc = 0.7554378137200223
User 112825 AUC after training: 0.7544153188324967
User 112825 does not improve AUC. Reverting changes.
Training on augumented user 87057 34/50 current_auc = 0.7554378137200223
User 87057 AUC after training: 0.7554378137200223
User 87057 does not improve AUC. Reverting changes.
Training on augumented user 2403 35/50 current_auc = 0.7554378137200223
User 2403 AUC after training: 0.7553448596393382
User 2403 does not improve AUC. Reverting changes.
Training on augumented user 50488 36/50 current_auc = 0.7554378137200223
User 50488 AUC after training: 0.7568321249302844
User 50488 improves AUC. Keeping the model.
Training on augumented user 8327 37/50 current_auc = 0.7568321249302844
User 8327 AUC after training: 0.7562744004461796
User 8327 does not improve AUC. Reverting changes.
Training on augumented user 79345 38/50 current_auc = 0.7568321249302844
User 79345 AUC after training: 0.7563673545268638
User 79345 does not improve AUC. Reverting changes.
Training on augumented user 132346 39/50 current_auc = 0.7568321249302844
User 132346 AUC after training: 0.7569250790109686
User 132346 improves AUC. Keeping the model.
Training on augumented user 91318 40/50 current_auc = 0.7569250790109686
User 91318 AUC after training: 0.7562744004461796
User 91318 does not improve AUC. Reverting changes.
Training on augumented user 135674 41/50 current_auc = 0.7569250790109686
User 135674 AUC after training: 0.7569250790109686
User 135674 does not improve AUC. Reverting changes.
Training on augumented user 35548 42/50 current_auc = 0.7569250790109686
User 35548 AUC after training: 0.757203941253021
User 35548 improves AUC. Keeping the model.
Training on augumented user 6773 43/50 current_auc = 0.757203941253021
User 6773 AUC after training: 0.7582264361405465
User 6773 improves AUC. Keeping the model.
Training on augumented user 45099 44/50 current_auc = 0.7582264361405465
User 45099 AUC after training: 0.7581334820598624
User 45099 does not improve AUC. Reverting changes.
Training on augumented user 109938 45/50 current_auc = 0.7582264361405465
User 109938 AUC after training: 0.7567391708496003
User 109938 does not improve AUC. Reverting changes.
Training on augumented user 92935 46/50 current_auc = 0.7582264361405465
User 92935 AUC after training: 0.7577616657371259
User 92935 does not improve AUC. Reverting changes.
Training on augumented user 126501 47/50 current_auc = 0.7582264361405465
User 126501 AUC after training: 0.7583193902212307
User 126501 improves AUC. Keeping the model.
Training on augumented user 106042 48/50 current_auc = 0.7583193902212307
User 106042 AUC after training: 0.7581334820598624
User 106042 does not improve AUC. Reverting changes.
Training on augumented user 1784 49/50 current_auc = 0.7583193902212307
User 1784 AUC after training: 0.7582264361405466
User 1784 does not improve AUC. Reverting changes.
[2024-12-02 17:38:22.842151] start test user 13652 1/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:23.392459] start test user 13652 1/568 recall augumented users by random, augumented_users = [21311, 109260, 60703, 136913, 32976, 133934, 70756, 55687, 64783, 29406, 127178, 93192, 8665, 5767, 7441, 120870, 1879, 101098, 5196, 87436, 51922, 126672, 92288, 135, 24261, 113011, 66122, 92340, 26675, 84277, 92801, 42926, 78609, 92007, 111495, 113566, 65677, 64844, 80456, 50046, 8397, 1411, 36380, 19271, 43279, 45060, 134874, 2595, 91897, 11379]
[2024-12-02 17:38:23.432388] user = 13652 Cloud 1/568
[2024-12-02 17:38:23.462420] user = 13652 Local 1/568
[2024-12-02 17:38:23.518619] user = 13652 Local+ 1/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:26.227599] user = 13652 MPDA- 1/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4152046783625731
Training on augumented user 21311 0/50 current_auc = 0.4152046783625731
User 21311 AUC after training: 0.4108187134502924
User 21311 does not improve AUC. Reverting changes.
Training on augumented user 109260 1/50 current_auc = 0.4152046783625731
User 109260 AUC after training: 0.4137426900584795
User 109260 does not improve AUC. Reverting changes.
Training on augumented user 60703 2/50 current_auc = 0.4152046783625731
User 60703 AUC after training: 0.4093567251461988
User 60703 does not improve AUC. Reverting changes.
Training on augumented user 136913 3/50 current_auc = 0.4152046783625731
User 136913 AUC after training: 0.4137426900584795
User 136913 does not improve AUC. Reverting changes.
Training on augumented user 32976 4/50 current_auc = 0.4152046783625731
User 32976 AUC after training: 0.41228070175438597
User 32976 does not improve AUC. Reverting changes.
Training on augumented user 133934 5/50 current_auc = 0.4152046783625731
User 133934 AUC after training: 0.4108187134502924
User 133934 does not improve AUC. Reverting changes.
Training on augumented user 70756 6/50 current_auc = 0.4152046783625731
User 70756 AUC after training: 0.41520467836257313
User 70756 improves AUC. Keeping the model.
Training on augumented user 55687 7/50 current_auc = 0.41520467836257313
User 55687 AUC after training: 0.41228070175438597
User 55687 does not improve AUC. Reverting changes.
Training on augumented user 64783 8/50 current_auc = 0.41520467836257313
User 64783 AUC after training: 0.4108187134502924
User 64783 does not improve AUC. Reverting changes.
Training on augumented user 29406 9/50 current_auc = 0.41520467836257313
User 29406 AUC after training: 0.41520467836257313
User 29406 does not improve AUC. Reverting changes.
Training on augumented user 127178 10/50 current_auc = 0.41520467836257313
User 127178 AUC after training: 0.4152046783625731
User 127178 does not improve AUC. Reverting changes.
Training on augumented user 93192 11/50 current_auc = 0.41520467836257313
User 93192 AUC after training: 0.4166666666666667
User 93192 improves AUC. Keeping the model.
Training on augumented user 8665 12/50 current_auc = 0.4166666666666667
User 8665 AUC after training: 0.41228070175438597
User 8665 does not improve AUC. Reverting changes.
Training on augumented user 5767 13/50 current_auc = 0.4166666666666667
User 5767 AUC after training: 0.4166666666666667
User 5767 does not improve AUC. Reverting changes.
Training on augumented user 7441 14/50 current_auc = 0.4166666666666667
User 7441 AUC after training: 0.41228070175438597
User 7441 does not improve AUC. Reverting changes.
Training on augumented user 120870 15/50 current_auc = 0.4166666666666667
User 120870 AUC after training: 0.4166666666666667
User 120870 does not improve AUC. Reverting changes.
Training on augumented user 1879 16/50 current_auc = 0.4166666666666667
User 1879 AUC after training: 0.4166666666666667
User 1879 does not improve AUC. Reverting changes.
Training on augumented user 101098 17/50 current_auc = 0.4166666666666667
User 101098 AUC after training: 0.4166666666666667
User 101098 does not improve AUC. Reverting changes.
Training on augumented user 5196 18/50 current_auc = 0.4166666666666667
User 5196 AUC after training: 0.41520467836257313
User 5196 does not improve AUC. Reverting changes.
Training on augumented user 87436 19/50 current_auc = 0.4166666666666667
User 87436 AUC after training: 0.41520467836257313
User 87436 does not improve AUC. Reverting changes.
Training on augumented user 51922 20/50 current_auc = 0.4166666666666667
User 51922 AUC after training: 0.41520467836257313
User 51922 does not improve AUC. Reverting changes.
Training on augumented user 126672 21/50 current_auc = 0.4166666666666667
User 126672 AUC after training: 0.4093567251461988
User 126672 does not improve AUC. Reverting changes.
Training on augumented user 92288 22/50 current_auc = 0.4166666666666667
User 92288 AUC after training: 0.4152046783625731
User 92288 does not improve AUC. Reverting changes.
Training on augumented user 135 23/50 current_auc = 0.4166666666666667
User 135 AUC after training: 0.4166666666666667
User 135 does not improve AUC. Reverting changes.
Training on augumented user 24261 24/50 current_auc = 0.4166666666666667
User 24261 AUC after training: 0.41812865497076024
User 24261 improves AUC. Keeping the model.
Training on augumented user 113011 25/50 current_auc = 0.41812865497076024
User 113011 AUC after training: 0.4108187134502924
User 113011 does not improve AUC. Reverting changes.
Training on augumented user 66122 26/50 current_auc = 0.41812865497076024
User 66122 AUC after training: 0.4152046783625731
User 66122 does not improve AUC. Reverting changes.
Training on augumented user 92340 27/50 current_auc = 0.41812865497076024
User 92340 AUC after training: 0.4166666666666667
User 92340 does not improve AUC. Reverting changes.
Training on augumented user 26675 28/50 current_auc = 0.41812865497076024
User 26675 AUC after training: 0.41520467836257313
User 26675 does not improve AUC. Reverting changes.
Training on augumented user 84277 29/50 current_auc = 0.41812865497076024
User 84277 AUC after training: 0.4137426900584795
User 84277 does not improve AUC. Reverting changes.
Training on augumented user 92801 30/50 current_auc = 0.41812865497076024
User 92801 AUC after training: 0.4137426900584795
User 92801 does not improve AUC. Reverting changes.
Training on augumented user 42926 31/50 current_auc = 0.41812865497076024
User 42926 AUC after training: 0.41520467836257313
User 42926 does not improve AUC. Reverting changes.
Training on augumented user 78609 32/50 current_auc = 0.41812865497076024
User 78609 AUC after training: 0.4152046783625731
User 78609 does not improve AUC. Reverting changes.
Training on augumented user 92007 33/50 current_auc = 0.41812865497076024
User 92007 AUC after training: 0.41520467836257313
User 92007 does not improve AUC. Reverting changes.
Training on augumented user 111495 34/50 current_auc = 0.41812865497076024
User 111495 AUC after training: 0.41666666666666663
User 111495 does not improve AUC. Reverting changes.
Training on augumented user 113566 35/50 current_auc = 0.41812865497076024
User 113566 AUC after training: 0.4152046783625731
User 113566 does not improve AUC. Reverting changes.
Training on augumented user 65677 36/50 current_auc = 0.41812865497076024
User 65677 AUC after training: 0.41812865497076024
User 65677 does not improve AUC. Reverting changes.
Training on augumented user 64844 37/50 current_auc = 0.41812865497076024
User 64844 AUC after training: 0.4152046783625731
User 64844 does not improve AUC. Reverting changes.
Training on augumented user 80456 38/50 current_auc = 0.41812865497076024
User 80456 AUC after training: 0.41812865497076024
User 80456 does not improve AUC. Reverting changes.
Training on augumented user 50046 39/50 current_auc = 0.41812865497076024
User 50046 AUC after training: 0.4166666666666667
User 50046 does not improve AUC. Reverting changes.
Training on augumented user 8397 40/50 current_auc = 0.41812865497076024
User 8397 AUC after training: 0.4152046783625731
User 8397 does not improve AUC. Reverting changes.
Training on augumented user 1411 41/50 current_auc = 0.41812865497076024
User 1411 AUC after training: 0.40789473684210525
User 1411 does not improve AUC. Reverting changes.
Training on augumented user 36380 42/50 current_auc = 0.41812865497076024
User 36380 AUC after training: 0.41812865497076024
User 36380 does not improve AUC. Reverting changes.
Training on augumented user 19271 43/50 current_auc = 0.41812865497076024
User 19271 AUC after training: 0.4166666666666667
User 19271 does not improve AUC. Reverting changes.
Training on augumented user 43279 44/50 current_auc = 0.41812865497076024
User 43279 AUC after training: 0.4152046783625731
User 43279 does not improve AUC. Reverting changes.
Training on augumented user 45060 45/50 current_auc = 0.41812865497076024
User 45060 AUC after training: 0.4064327485380117
User 45060 does not improve AUC. Reverting changes.
Training on augumented user 134874 46/50 current_auc = 0.41812865497076024
User 134874 AUC after training: 0.4166666666666667
User 134874 does not improve AUC. Reverting changes.
Training on augumented user 2595 47/50 current_auc = 0.41812865497076024
User 2595 AUC after training: 0.41081871345029236
User 2595 does not improve AUC. Reverting changes.
Training on augumented user 91897 48/50 current_auc = 0.41812865497076024
User 91897 AUC after training: 0.4093567251461988
User 91897 does not improve AUC. Reverting changes.
Training on augumented user 11379 49/50 current_auc = 0.41812865497076024
User 11379 AUC after training: 0.41666666666666663
User 11379 does not improve AUC. Reverting changes.
[2024-12-02 17:38:55.129484] start test user 13666 2/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:55.829674] start test user 13666 2/568 recall augumented users by random, augumented_users = [58373, 37249, 43231, 9016, 95234, 77662, 10736, 128362, 69956, 52490, 106928, 133337, 51107, 63760, 11215, 106283, 5480, 136858, 36370, 75016, 120765, 128622, 119364, 39681, 98079, 104778, 53415, 136274, 124931, 107567, 86008, 83730, 121996, 110557, 20693, 11159, 134228, 77060, 83749, 119538, 33749, 101147, 80295, 120047, 81739, 49476, 6519, 104204, 119785, 9450]
[2024-12-02 17:38:55.847217] user = 13666 Cloud 2/568
[2024-12-02 17:38:55.878838] user = 13666 Local 2/568
[2024-12-02 17:38:56.054781] user = 13666 Local+ 2/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:58.642811] user = 13666 MPDA- 2/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7009404388714734
Training on augumented user 58373 0/50 current_auc = 0.7009404388714734
User 58373 AUC after training: 0.700626959247649
User 58373 does not improve AUC. Reverting changes.
Training on augumented user 37249 1/50 current_auc = 0.7009404388714734
User 37249 AUC after training: 0.701371473354232
User 37249 improves AUC. Keeping the model.
Training on augumented user 43231 2/50 current_auc = 0.701371473354232
User 43231 AUC after training: 0.7014106583072099
User 43231 improves AUC. Keeping the model.
Training on augumented user 9016 3/50 current_auc = 0.7014106583072099
User 9016 AUC after training: 0.7014106583072099
User 9016 does not improve AUC. Reverting changes.
Training on augumented user 95234 4/50 current_auc = 0.7014106583072099
User 95234 AUC after training: 0.7011755485893417
User 95234 does not improve AUC. Reverting changes.
Training on augumented user 77662 5/50 current_auc = 0.7014106583072099
User 77662 AUC after training: 0.7012931034482759
User 77662 does not improve AUC. Reverting changes.
Training on augumented user 10736 6/50 current_auc = 0.7014106583072099
User 10736 AUC after training: 0.7013714733542319
User 10736 does not improve AUC. Reverting changes.
Training on augumented user 128362 7/50 current_auc = 0.7014106583072099
User 128362 AUC after training: 0.7013322884012538
User 128362 does not improve AUC. Reverting changes.
Training on augumented user 69956 8/50 current_auc = 0.7014106583072099
User 69956 AUC after training: 0.7016849529780564
User 69956 improves AUC. Keeping the model.
Training on augumented user 52490 9/50 current_auc = 0.7016849529780564
User 52490 AUC after training: 0.7011363636363636
User 52490 does not improve AUC. Reverting changes.
Training on augumented user 106928 10/50 current_auc = 0.7016849529780564
User 106928 AUC after training: 0.7014106583072099
User 106928 does not improve AUC. Reverting changes.
Training on augumented user 133337 11/50 current_auc = 0.7016849529780564
User 133337 AUC after training: 0.701371473354232
User 133337 does not improve AUC. Reverting changes.
Training on augumented user 51107 12/50 current_auc = 0.7016849529780564
User 51107 AUC after training: 0.7009404388714733
User 51107 does not improve AUC. Reverting changes.
Training on augumented user 63760 13/50 current_auc = 0.7016849529780564
User 63760 AUC after training: 0.7015282131661441
User 63760 does not improve AUC. Reverting changes.
Training on augumented user 11215 14/50 current_auc = 0.7016849529780564
User 11215 AUC after training: 0.7016065830721003
User 11215 does not improve AUC. Reverting changes.
Training on augumented user 106283 15/50 current_auc = 0.7016849529780564
User 106283 AUC after training: 0.7016065830721003
User 106283 does not improve AUC. Reverting changes.
Training on augumented user 5480 16/50 current_auc = 0.7016849529780564
User 5480 AUC after training: 0.7012539184952978
User 5480 does not improve AUC. Reverting changes.
Training on augumented user 136858 17/50 current_auc = 0.7016849529780564
User 136858 AUC after training: 0.7015282131661442
User 136858 does not improve AUC. Reverting changes.
Training on augumented user 36370 18/50 current_auc = 0.7016849529780564
User 36370 AUC after training: 0.7012539184952977
User 36370 does not improve AUC. Reverting changes.
Training on augumented user 75016 19/50 current_auc = 0.7016849529780564
User 75016 AUC after training: 0.7012147335423197
User 75016 does not improve AUC. Reverting changes.
Training on augumented user 120765 20/50 current_auc = 0.7016849529780564
User 120765 AUC after training: 0.7002742946708463
User 120765 does not improve AUC. Reverting changes.
Training on augumented user 128622 21/50 current_auc = 0.7016849529780564
User 128622 AUC after training: 0.7020376175548589
User 128622 improves AUC. Keeping the model.
Training on augumented user 119364 22/50 current_auc = 0.7020376175548589
User 119364 AUC after training: 0.7019592476489028
User 119364 does not improve AUC. Reverting changes.
Training on augumented user 39681 23/50 current_auc = 0.7020376175548589
User 39681 AUC after training: 0.7019592476489028
User 39681 does not improve AUC. Reverting changes.
Training on augumented user 98079 24/50 current_auc = 0.7020376175548589
User 98079 AUC after training: 0.7018612852664576
User 98079 does not improve AUC. Reverting changes.
Training on augumented user 104778 25/50 current_auc = 0.7020376175548589
User 104778 AUC after training: 0.702115987460815
User 104778 improves AUC. Keeping the model.
Training on augumented user 53415 26/50 current_auc = 0.702115987460815
User 53415 AUC after training: 0.7023119122257053
User 53415 improves AUC. Keeping the model.
Training on augumented user 136274 27/50 current_auc = 0.7023119122257053
User 136274 AUC after training: 0.7019984326018808
User 136274 does not improve AUC. Reverting changes.
Training on augumented user 124931 28/50 current_auc = 0.7023119122257053
User 124931 AUC after training: 0.7017241379310345
User 124931 does not improve AUC. Reverting changes.
Training on augumented user 107567 29/50 current_auc = 0.7023119122257053
User 107567 AUC after training: 0.7021943573667712
User 107567 does not improve AUC. Reverting changes.
Training on augumented user 86008 30/50 current_auc = 0.7023119122257053
User 86008 AUC after training: 0.7016457680250784
User 86008 does not improve AUC. Reverting changes.
Training on augumented user 83730 31/50 current_auc = 0.7023119122257053
User 83730 AUC after training: 0.7022335423197492
User 83730 does not improve AUC. Reverting changes.
Training on augumented user 121996 32/50 current_auc = 0.7023119122257053
User 121996 AUC after training: 0.7018416927899687
User 121996 does not improve AUC. Reverting changes.
Training on augumented user 110557 33/50 current_auc = 0.7023119122257053
User 110557 AUC after training: 0.7017633228840124
User 110557 does not improve AUC. Reverting changes.
Training on augumented user 20693 34/50 current_auc = 0.7023119122257053
User 20693 AUC after training: 0.7018416927899687
User 20693 does not improve AUC. Reverting changes.
Training on augumented user 11159 35/50 current_auc = 0.7023119122257053
User 11159 AUC after training: 0.7018808777429467
User 11159 does not improve AUC. Reverting changes.
Training on augumented user 134228 36/50 current_auc = 0.7023119122257053
User 134228 AUC after training: 0.7018416927899687
User 134228 does not improve AUC. Reverting changes.
Training on augumented user 77060 37/50 current_auc = 0.7023119122257053
User 77060 AUC after training: 0.7015282131661442
User 77060 does not improve AUC. Reverting changes.
Training on augumented user 83749 38/50 current_auc = 0.7023119122257053
User 83749 AUC after training: 0.7018025078369906
User 83749 does not improve AUC. Reverting changes.
Training on augumented user 119538 39/50 current_auc = 0.7023119122257053
User 119538 AUC after training: 0.7019592476489027
User 119538 does not improve AUC. Reverting changes.
Training on augumented user 33749 40/50 current_auc = 0.7023119122257053
User 33749 AUC after training: 0.7018025078369906
User 33749 does not improve AUC. Reverting changes.
Training on augumented user 101147 41/50 current_auc = 0.7023119122257053
User 101147 AUC after training: 0.7014106583072099
User 101147 does not improve AUC. Reverting changes.
Training on augumented user 80295 42/50 current_auc = 0.7023119122257053
User 80295 AUC after training: 0.7019984326018809
User 80295 does not improve AUC. Reverting changes.
Training on augumented user 120047 43/50 current_auc = 0.7023119122257053
User 120047 AUC after training: 0.7012147335423198
User 120047 does not improve AUC. Reverting changes.
Training on augumented user 81739 44/50 current_auc = 0.7023119122257053
User 81739 AUC after training: 0.7024686520376177
User 81739 improves AUC. Keeping the model.
Training on augumented user 49476 45/50 current_auc = 0.7024686520376177
User 49476 AUC after training: 0.7024882445141066
User 49476 improves AUC. Keeping the model.
Training on augumented user 6519 46/50 current_auc = 0.7024882445141066
User 6519 AUC after training: 0.7025470219435737
User 6519 improves AUC. Keeping the model.
Training on augumented user 104204 47/50 current_auc = 0.7025470219435737
User 104204 AUC after training: 0.7025470219435737
User 104204 does not improve AUC. Reverting changes.
Training on augumented user 119785 48/50 current_auc = 0.7025470219435737
User 119785 AUC after training: 0.7024294670846394
User 119785 does not improve AUC. Reverting changes.
Training on augumented user 9450 49/50 current_auc = 0.7025470219435737
User 9450 AUC after training: 0.7022335423197492
User 9450 does not improve AUC. Reverting changes.
[2024-12-02 17:39:34.867858] start test user 13703 3/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:35.598414] start test user 13703 3/568 recall augumented users by random, augumented_users = [32959, 125345, 54685, 29052, 62904, 96775, 46131, 121845, 67445, 67337, 124515, 64355, 105989, 135386, 99475, 58260, 102067, 2226, 116782, 73190, 132052, 108571, 90312, 46273, 127991, 119109, 124773, 116075, 43663, 96957, 124854, 76631, 45913, 72050, 85654, 4248, 136688, 100611, 98366, 52864, 21357, 89224, 25945, 91781, 50284, 26457, 54978, 55304, 81770, 122354]
[2024-12-02 17:39:35.619694] user = 13703 Cloud 3/568
[2024-12-02 17:39:35.635543] user = 13703 Local 3/568
[2024-12-02 17:39:35.674072] user = 13703 Local+ 3/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:38.888395] user = 13703 MPDA- 3/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5833333333333334
Training on augumented user 32959 0/50 current_auc = 0.5833333333333334
User 32959 AUC after training: 0.5833333333333334
User 32959 does not improve AUC. Reverting changes.
Training on augumented user 125345 1/50 current_auc = 0.5833333333333334
User 125345 AUC after training: 0.5833333333333334
User 125345 does not improve AUC. Reverting changes.
Training on augumented user 54685 2/50 current_auc = 0.5833333333333334
User 54685 AUC after training: 0.5833333333333334
User 54685 does not improve AUC. Reverting changes.
Training on augumented user 29052 3/50 current_auc = 0.5833333333333334
User 29052 AUC after training: 0.6666666666666666
User 29052 improves AUC. Keeping the model.
Training on augumented user 62904 4/50 current_auc = 0.6666666666666666
User 62904 AUC after training: 0.6666666666666666
User 62904 does not improve AUC. Reverting changes.
Training on augumented user 96775 5/50 current_auc = 0.6666666666666666
User 96775 AUC after training: 0.6666666666666666
User 96775 does not improve AUC. Reverting changes.
Training on augumented user 46131 6/50 current_auc = 0.6666666666666666
User 46131 AUC after training: 0.6666666666666666
User 46131 does not improve AUC. Reverting changes.
Training on augumented user 121845 7/50 current_auc = 0.6666666666666666
User 121845 AUC after training: 0.75
User 121845 improves AUC. Keeping the model.
Training on augumented user 67445 8/50 current_auc = 0.75
User 67445 AUC after training: 0.75
User 67445 does not improve AUC. Reverting changes.
Training on augumented user 67337 9/50 current_auc = 0.75
User 67337 AUC after training: 0.75
User 67337 does not improve AUC. Reverting changes.
Training on augumented user 124515 10/50 current_auc = 0.75
User 124515 AUC after training: 0.75
User 124515 does not improve AUC. Reverting changes.
Training on augumented user 64355 11/50 current_auc = 0.75
User 64355 AUC after training: 0.75
User 64355 does not improve AUC. Reverting changes.
Training on augumented user 105989 12/50 current_auc = 0.75
User 105989 AUC after training: 0.6666666666666667
User 105989 does not improve AUC. Reverting changes.
Training on augumented user 135386 13/50 current_auc = 0.75
User 135386 AUC after training: 0.75
User 135386 does not improve AUC. Reverting changes.
Training on augumented user 99475 14/50 current_auc = 0.75
User 99475 AUC after training: 0.75
User 99475 does not improve AUC. Reverting changes.
Training on augumented user 58260 15/50 current_auc = 0.75
User 58260 AUC after training: 0.75
User 58260 does not improve AUC. Reverting changes.
Training on augumented user 102067 16/50 current_auc = 0.75
User 102067 AUC after training: 0.6666666666666667
User 102067 does not improve AUC. Reverting changes.
Training on augumented user 2226 17/50 current_auc = 0.75
User 2226 AUC after training: 0.75
User 2226 does not improve AUC. Reverting changes.
Training on augumented user 116782 18/50 current_auc = 0.75
User 116782 AUC after training: 0.75
User 116782 does not improve AUC. Reverting changes.
Training on augumented user 73190 19/50 current_auc = 0.75
User 73190 AUC after training: 0.75
User 73190 does not improve AUC. Reverting changes.
Training on augumented user 132052 20/50 current_auc = 0.75
User 132052 AUC after training: 0.6666666666666666
User 132052 does not improve AUC. Reverting changes.
Training on augumented user 108571 21/50 current_auc = 0.75
User 108571 AUC after training: 0.75
User 108571 does not improve AUC. Reverting changes.
Training on augumented user 90312 22/50 current_auc = 0.75
User 90312 AUC after training: 0.6666666666666666
User 90312 does not improve AUC. Reverting changes.
Training on augumented user 46273 23/50 current_auc = 0.75
User 46273 AUC after training: 0.75
User 46273 does not improve AUC. Reverting changes.
Training on augumented user 127991 24/50 current_auc = 0.75
User 127991 AUC after training: 0.6666666666666667
User 127991 does not improve AUC. Reverting changes.
Training on augumented user 119109 25/50 current_auc = 0.75
User 119109 AUC after training: 0.75
User 119109 does not improve AUC. Reverting changes.
Training on augumented user 124773 26/50 current_auc = 0.75
User 124773 AUC after training: 0.75
User 124773 does not improve AUC. Reverting changes.
Training on augumented user 116075 27/50 current_auc = 0.75
User 116075 AUC after training: 0.75
User 116075 does not improve AUC. Reverting changes.
Training on augumented user 43663 28/50 current_auc = 0.75
User 43663 AUC after training: 0.75
User 43663 does not improve AUC. Reverting changes.
Training on augumented user 96957 29/50 current_auc = 0.75
User 96957 AUC after training: 0.75
User 96957 does not improve AUC. Reverting changes.
Training on augumented user 124854 30/50 current_auc = 0.75
User 124854 AUC after training: 0.75
User 124854 does not improve AUC. Reverting changes.
Training on augumented user 76631 31/50 current_auc = 0.75
User 76631 AUC after training: 0.75
User 76631 does not improve AUC. Reverting changes.
Training on augumented user 45913 32/50 current_auc = 0.75
User 45913 AUC after training: 0.75
User 45913 does not improve AUC. Reverting changes.
Training on augumented user 72050 33/50 current_auc = 0.75
User 72050 AUC after training: 0.75
User 72050 does not improve AUC. Reverting changes.
Training on augumented user 85654 34/50 current_auc = 0.75
User 85654 AUC after training: 0.6666666666666667
User 85654 does not improve AUC. Reverting changes.
Training on augumented user 4248 35/50 current_auc = 0.75
User 4248 AUC after training: 0.75
User 4248 does not improve AUC. Reverting changes.
Training on augumented user 136688 36/50 current_auc = 0.75
User 136688 AUC after training: 0.75
User 136688 does not improve AUC. Reverting changes.
Training on augumented user 100611 37/50 current_auc = 0.75
User 100611 AUC after training: 0.75
User 100611 does not improve AUC. Reverting changes.
Training on augumented user 98366 38/50 current_auc = 0.75
User 98366 AUC after training: 0.6666666666666666
User 98366 does not improve AUC. Reverting changes.
Training on augumented user 52864 39/50 current_auc = 0.75
User 52864 AUC after training: 0.75
User 52864 does not improve AUC. Reverting changes.
Training on augumented user 21357 40/50 current_auc = 0.75
User 21357 AUC after training: 0.75
User 21357 does not improve AUC. Reverting changes.
Training on augumented user 89224 41/50 current_auc = 0.75
User 89224 AUC after training: 0.75
User 89224 does not improve AUC. Reverting changes.
Training on augumented user 25945 42/50 current_auc = 0.75
User 25945 AUC after training: 0.75
User 25945 does not improve AUC. Reverting changes.
Training on augumented user 91781 43/50 current_auc = 0.75
User 91781 AUC after training: 0.75
User 91781 does not improve AUC. Reverting changes.
Training on augumented user 50284 44/50 current_auc = 0.75
User 50284 AUC after training: 0.75
User 50284 does not improve AUC. Reverting changes.
Training on augumented user 26457 45/50 current_auc = 0.75
User 26457 AUC after training: 0.6666666666666667
User 26457 does not improve AUC. Reverting changes.
Training on augumented user 54978 46/50 current_auc = 0.75
User 54978 AUC after training: 0.75
User 54978 does not improve AUC. Reverting changes.
Training on augumented user 55304 47/50 current_auc = 0.75
User 55304 AUC after training: 0.6666666666666666
User 55304 does not improve AUC. Reverting changes.
Training on augumented user 81770 48/50 current_auc = 0.75
User 81770 AUC after training: 0.75
User 81770 does not improve AUC. Reverting changes.
Training on augumented user 122354 49/50 current_auc = 0.75
User 122354 AUC after training: 0.6666666666666666
User 122354 does not improve AUC. Reverting changes.
[2024-12-02 17:40:11.436548] start test user 13718 4/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:12.053313] start test user 13718 4/568 recall augumented users by random, augumented_users = [26798, 24643, 55711, 46682, 93528, 31609, 71644, 101402, 396, 110295, 36892, 5789, 12000, 134849, 133429, 17347, 15508, 102491, 63205, 96561, 54281, 69789, 127653, 122644, 21753, 98984, 9194, 111954, 36066, 88199, 112223, 62904, 127189, 41875, 135649, 133490, 51488, 108765, 24065, 102177, 30654, 40988, 112316, 36884, 30748, 117693, 43400, 10598, 129928, 37778]
[2024-12-02 17:40:12.082416] user = 13718 Cloud 4/568
[2024-12-02 17:40:12.118067] user = 13718 Local 4/568
[2024-12-02 17:40:12.280163] user = 13718 Local+ 4/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:14.779006] user = 13718 MPDA- 4/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7237600922722031
Training on augumented user 26798 0/50 current_auc = 0.7237600922722031
User 26798 AUC after training: 0.7235678585159554
User 26798 does not improve AUC. Reverting changes.
Training on augumented user 24643 1/50 current_auc = 0.7237600922722031
User 24643 AUC after training: 0.7239523260284506
User 24643 improves AUC. Keeping the model.
Training on augumented user 55711 2/50 current_auc = 0.7239523260284506
User 55711 AUC after training: 0.724240676662822
User 55711 improves AUC. Keeping the model.
Training on augumented user 46682 3/50 current_auc = 0.724240676662822
User 46682 AUC after training: 0.7241445597846983
User 46682 does not improve AUC. Reverting changes.
Training on augumented user 93528 4/50 current_auc = 0.724240676662822
User 93528 AUC after training: 0.7228950403690888
User 93528 does not improve AUC. Reverting changes.
Training on augumented user 31609 5/50 current_auc = 0.724240676662822
User 31609 AUC after training: 0.7241445597846982
User 31609 does not improve AUC. Reverting changes.
Training on augumented user 71644 6/50 current_auc = 0.724240676662822
User 71644 AUC after training: 0.7240484429065744
User 71644 does not improve AUC. Reverting changes.
Training on augumented user 101402 7/50 current_auc = 0.724240676662822
User 101402 AUC after training: 0.7244329104190697
User 101402 improves AUC. Keeping the model.
Training on augumented user 396 8/50 current_auc = 0.7244329104190697
User 396 AUC after training: 0.7239523260284506
User 396 does not improve AUC. Reverting changes.
Training on augumented user 110295 9/50 current_auc = 0.7244329104190697
User 110295 AUC after training: 0.7240484429065743
User 110295 does not improve AUC. Reverting changes.
Training on augumented user 36892 10/50 current_auc = 0.7244329104190697
User 36892 AUC after training: 0.724240676662822
User 36892 does not improve AUC. Reverting changes.
Training on augumented user 5789 11/50 current_auc = 0.7244329104190697
User 5789 AUC after training: 0.7241445597846982
User 5789 does not improve AUC. Reverting changes.
Training on augumented user 12000 12/50 current_auc = 0.7244329104190697
User 12000 AUC after training: 0.7241445597846982
User 12000 does not improve AUC. Reverting changes.
Training on augumented user 134849 13/50 current_auc = 0.7244329104190697
User 134849 AUC after training: 0.724240676662822
User 134849 does not improve AUC. Reverting changes.
Training on augumented user 133429 14/50 current_auc = 0.7244329104190697
User 133429 AUC after training: 0.724240676662822
User 133429 does not improve AUC. Reverting changes.
Training on augumented user 17347 15/50 current_auc = 0.7244329104190697
User 17347 AUC after training: 0.7243367935409458
User 17347 does not improve AUC. Reverting changes.
Training on augumented user 15508 16/50 current_auc = 0.7244329104190697
User 15508 AUC after training: 0.7244329104190697
User 15508 does not improve AUC. Reverting changes.
Training on augumented user 102491 17/50 current_auc = 0.7244329104190697
User 102491 AUC after training: 0.7244329104190697
User 102491 does not improve AUC. Reverting changes.
Training on augumented user 63205 18/50 current_auc = 0.7244329104190697
User 63205 AUC after training: 0.7243367935409458
User 63205 does not improve AUC. Reverting changes.
Training on augumented user 96561 19/50 current_auc = 0.7244329104190697
User 96561 AUC after training: 0.7240484429065743
User 96561 does not improve AUC. Reverting changes.
Training on augumented user 54281 20/50 current_auc = 0.7244329104190697
User 54281 AUC after training: 0.7244329104190695
User 54281 does not improve AUC. Reverting changes.
Training on augumented user 69789 21/50 current_auc = 0.7244329104190697
User 69789 AUC after training: 0.724240676662822
User 69789 does not improve AUC. Reverting changes.
Training on augumented user 127653 22/50 current_auc = 0.7244329104190697
User 127653 AUC after training: 0.7245290272971934
User 127653 improves AUC. Keeping the model.
Training on augumented user 122644 23/50 current_auc = 0.7245290272971934
User 122644 AUC after training: 0.7245290272971934
User 122644 does not improve AUC. Reverting changes.
Training on augumented user 21753 24/50 current_auc = 0.7245290272971934
User 21753 AUC after training: 0.7246251441753172
User 21753 improves AUC. Keeping the model.
Training on augumented user 98984 25/50 current_auc = 0.7246251441753172
User 98984 AUC after training: 0.7245290272971934
User 98984 does not improve AUC. Reverting changes.
Training on augumented user 9194 26/50 current_auc = 0.7246251441753172
User 9194 AUC after training: 0.7241445597846982
User 9194 does not improve AUC. Reverting changes.
Training on augumented user 111954 27/50 current_auc = 0.7246251441753172
User 111954 AUC after training: 0.7241445597846983
User 111954 does not improve AUC. Reverting changes.
Training on augumented user 36066 28/50 current_auc = 0.7246251441753172
User 36066 AUC after training: 0.7243367935409458
User 36066 does not improve AUC. Reverting changes.
Training on augumented user 88199 29/50 current_auc = 0.7246251441753172
User 88199 AUC after training: 0.7244329104190695
User 88199 does not improve AUC. Reverting changes.
Training on augumented user 112223 30/50 current_auc = 0.7246251441753172
User 112223 AUC after training: 0.7246251441753172
User 112223 does not improve AUC. Reverting changes.
Training on augumented user 62904 31/50 current_auc = 0.7246251441753172
User 62904 AUC after training: 0.7230872741253364
User 62904 does not improve AUC. Reverting changes.
Training on augumented user 127189 32/50 current_auc = 0.7246251441753172
User 127189 AUC after training: 0.7246251441753172
User 127189 does not improve AUC. Reverting changes.
Training on augumented user 41875 33/50 current_auc = 0.7246251441753172
User 41875 AUC after training: 0.7246251441753172
User 41875 does not improve AUC. Reverting changes.
Training on augumented user 135649 34/50 current_auc = 0.7246251441753172
User 135649 AUC after training: 0.7242406766628221
User 135649 does not improve AUC. Reverting changes.
Training on augumented user 133490 35/50 current_auc = 0.7246251441753172
User 133490 AUC after training: 0.7240484429065744
User 133490 does not improve AUC. Reverting changes.
Training on augumented user 51488 36/50 current_auc = 0.7246251441753172
User 51488 AUC after training: 0.7243367935409458
User 51488 does not improve AUC. Reverting changes.
Training on augumented user 108765 37/50 current_auc = 0.7246251441753172
User 108765 AUC after training: 0.7241445597846982
User 108765 does not improve AUC. Reverting changes.
Training on augumented user 24065 38/50 current_auc = 0.7246251441753172
User 24065 AUC after training: 0.7246251441753172
User 24065 does not improve AUC. Reverting changes.
Training on augumented user 102177 39/50 current_auc = 0.7246251441753172
User 102177 AUC after training: 0.724240676662822
User 102177 does not improve AUC. Reverting changes.
Training on augumented user 30654 40/50 current_auc = 0.7246251441753172
User 30654 AUC after training: 0.7245290272971934
User 30654 does not improve AUC. Reverting changes.
Training on augumented user 40988 41/50 current_auc = 0.7246251441753172
User 40988 AUC after training: 0.7244329104190697
User 40988 does not improve AUC. Reverting changes.
Training on augumented user 112316 42/50 current_auc = 0.7246251441753172
User 112316 AUC after training: 0.7241445597846983
User 112316 does not improve AUC. Reverting changes.
Training on augumented user 36884 43/50 current_auc = 0.7246251441753172
User 36884 AUC after training: 0.7239523260284506
User 36884 does not improve AUC. Reverting changes.
Training on augumented user 30748 44/50 current_auc = 0.7246251441753172
User 30748 AUC after training: 0.7245290272971935
User 30748 does not improve AUC. Reverting changes.
Training on augumented user 117693 45/50 current_auc = 0.7246251441753172
User 117693 AUC after training: 0.7244329104190695
User 117693 does not improve AUC. Reverting changes.
Training on augumented user 43400 46/50 current_auc = 0.7246251441753172
User 43400 AUC after training: 0.7245290272971934
User 43400 does not improve AUC. Reverting changes.
Training on augumented user 10598 47/50 current_auc = 0.7246251441753172
User 10598 AUC after training: 0.7240484429065743
User 10598 does not improve AUC. Reverting changes.
Training on augumented user 129928 48/50 current_auc = 0.7246251441753172
User 129928 AUC after training: 0.7244329104190695
User 129928 does not improve AUC. Reverting changes.
Training on augumented user 37778 49/50 current_auc = 0.7246251441753172
User 37778 AUC after training: 0.7243367935409458
User 37778 does not improve AUC. Reverting changes.
[2024-12-02 17:40:43.744442] start test user 13721 5/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:44.351803] start test user 13721 5/568 recall augumented users by random, augumented_users = [15137, 132037, 133112, 38213, 105815, 12254, 95638, 62412, 22552, 1208, 52540, 121098, 18266, 70667, 69992, 123905, 96998, 82865, 16890, 129382, 84874, 66238, 4409, 49975, 25932, 122655, 39903, 105632, 47950, 45271, 129573, 117525, 113796, 28983, 66137, 67766, 69926, 9826, 4558, 13211, 48273, 134887, 18986, 99227, 138186, 76449, 30900, 110172, 51323, 4016]
[2024-12-02 17:40:44.366437] user = 13721 Cloud 5/568
[2024-12-02 17:40:44.389293] user = 13721 Local 5/568
[2024-12-02 17:40:44.445388] user = 13721 Local+ 5/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:46.624280] user = 13721 MPDA- 5/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7005385487528346
Training on augumented user 15137 0/50 current_auc = 0.7005385487528346
User 15137 AUC after training: 0.7008219954648527
User 15137 improves AUC. Keeping the model.
Training on augumented user 132037 1/50 current_auc = 0.7008219954648527
User 132037 AUC after training: 0.7003968253968254
User 132037 does not improve AUC. Reverting changes.
Training on augumented user 133112 2/50 current_auc = 0.7008219954648527
User 133112 AUC after training: 0.7006802721088434
User 133112 does not improve AUC. Reverting changes.
Training on augumented user 38213 3/50 current_auc = 0.7008219954648527
User 38213 AUC after training: 0.7012471655328799
User 38213 improves AUC. Keeping the model.
Training on augumented user 105815 4/50 current_auc = 0.7012471655328799
User 105815 AUC after training: 0.7012471655328799
User 105815 does not improve AUC. Reverting changes.
Training on augumented user 12254 5/50 current_auc = 0.7012471655328799
User 12254 AUC after training: 0.7011054421768708
User 12254 does not improve AUC. Reverting changes.
Training on augumented user 95638 6/50 current_auc = 0.7012471655328799
User 95638 AUC after training: 0.7012471655328797
User 95638 does not improve AUC. Reverting changes.
Training on augumented user 62412 7/50 current_auc = 0.7012471655328799
User 62412 AUC after training: 0.7009637188208617
User 62412 does not improve AUC. Reverting changes.
Training on augumented user 22552 8/50 current_auc = 0.7012471655328799
User 22552 AUC after training: 0.7005385487528345
User 22552 does not improve AUC. Reverting changes.
Training on augumented user 1208 9/50 current_auc = 0.7012471655328799
User 1208 AUC after training: 0.7013888888888888
User 1208 improves AUC. Keeping the model.
Training on augumented user 52540 10/50 current_auc = 0.7013888888888888
User 52540 AUC after training: 0.7016723356009071
User 52540 improves AUC. Keeping the model.
Training on augumented user 121098 11/50 current_auc = 0.7016723356009071
User 121098 AUC after training: 0.7015306122448979
User 121098 does not improve AUC. Reverting changes.
Training on augumented user 18266 12/50 current_auc = 0.7016723356009071
User 18266 AUC after training: 0.701530612244898
User 18266 does not improve AUC. Reverting changes.
Training on augumented user 70667 13/50 current_auc = 0.7016723356009071
User 70667 AUC after training: 0.7012471655328798
User 70667 does not improve AUC. Reverting changes.
Training on augumented user 69992 14/50 current_auc = 0.7016723356009071
User 69992 AUC after training: 0.701388888888889
User 69992 does not improve AUC. Reverting changes.
Training on augumented user 123905 15/50 current_auc = 0.7016723356009071
User 123905 AUC after training: 0.7012471655328799
User 123905 does not improve AUC. Reverting changes.
Training on augumented user 96998 16/50 current_auc = 0.7016723356009071
User 96998 AUC after training: 0.7011054421768709
User 96998 does not improve AUC. Reverting changes.
Training on augumented user 82865 17/50 current_auc = 0.7016723356009071
User 82865 AUC after training: 0.7011054421768708
User 82865 does not improve AUC. Reverting changes.
Training on augumented user 16890 18/50 current_auc = 0.7016723356009071
User 16890 AUC after training: 0.7018140589569162
User 16890 improves AUC. Keeping the model.
Training on augumented user 129382 19/50 current_auc = 0.7018140589569162
User 129382 AUC after training: 0.701530612244898
User 129382 does not improve AUC. Reverting changes.
Training on augumented user 84874 20/50 current_auc = 0.7018140589569162
User 84874 AUC after training: 0.7023809523809524
User 84874 improves AUC. Keeping the model.
Training on augumented user 66238 21/50 current_auc = 0.7023809523809524
User 66238 AUC after training: 0.7019557823129252
User 66238 does not improve AUC. Reverting changes.
Training on augumented user 4409 22/50 current_auc = 0.7023809523809524
User 4409 AUC after training: 0.701530612244898
User 4409 does not improve AUC. Reverting changes.
Training on augumented user 49975 23/50 current_auc = 0.7023809523809524
User 49975 AUC after training: 0.7019557823129252
User 49975 does not improve AUC. Reverting changes.
Training on augumented user 25932 24/50 current_auc = 0.7023809523809524
User 25932 AUC after training: 0.7020975056689343
User 25932 does not improve AUC. Reverting changes.
Training on augumented user 122655 25/50 current_auc = 0.7023809523809524
User 122655 AUC after training: 0.7020975056689343
User 122655 does not improve AUC. Reverting changes.
Training on augumented user 39903 26/50 current_auc = 0.7023809523809524
User 39903 AUC after training: 0.701672335600907
User 39903 does not improve AUC. Reverting changes.
Training on augumented user 105632 27/50 current_auc = 0.7023809523809524
User 105632 AUC after training: 0.701672335600907
User 105632 does not improve AUC. Reverting changes.
Training on augumented user 47950 28/50 current_auc = 0.7023809523809524
User 47950 AUC after training: 0.701530612244898
User 47950 does not improve AUC. Reverting changes.
Training on augumented user 45271 29/50 current_auc = 0.7023809523809524
User 45271 AUC after training: 0.7011054421768709
User 45271 does not improve AUC. Reverting changes.
Training on augumented user 129573 30/50 current_auc = 0.7023809523809524
User 129573 AUC after training: 0.7022392290249433
User 129573 does not improve AUC. Reverting changes.
Training on augumented user 117525 31/50 current_auc = 0.7023809523809524
User 117525 AUC after training: 0.7019557823129251
User 117525 does not improve AUC. Reverting changes.
Training on augumented user 113796 32/50 current_auc = 0.7023809523809524
User 113796 AUC after training: 0.7018140589569161
User 113796 does not improve AUC. Reverting changes.
Training on augumented user 28983 33/50 current_auc = 0.7023809523809524
User 28983 AUC after training: 0.7018140589569161
User 28983 does not improve AUC. Reverting changes.
Training on augumented user 66137 34/50 current_auc = 0.7023809523809524
User 66137 AUC after training: 0.7018140589569161
User 66137 does not improve AUC. Reverting changes.
Training on augumented user 67766 35/50 current_auc = 0.7023809523809524
User 67766 AUC after training: 0.7011054421768708
User 67766 does not improve AUC. Reverting changes.
Training on augumented user 69926 36/50 current_auc = 0.7023809523809524
User 69926 AUC after training: 0.7025226757369614
User 69926 improves AUC. Keeping the model.
Training on augumented user 9826 37/50 current_auc = 0.7025226757369614
User 9826 AUC after training: 0.7030895691609977
User 9826 improves AUC. Keeping the model.
Training on augumented user 4558 38/50 current_auc = 0.7030895691609977
User 4558 AUC after training: 0.7017431972789114
User 4558 does not improve AUC. Reverting changes.
Training on augumented user 13211 39/50 current_auc = 0.7030895691609977
User 13211 AUC after training: 0.7019557823129252
User 13211 does not improve AUC. Reverting changes.
Training on augumented user 48273 40/50 current_auc = 0.7030895691609977
User 48273 AUC after training: 0.7028061224489797
User 48273 does not improve AUC. Reverting changes.
Training on augumented user 134887 41/50 current_auc = 0.7030895691609977
User 134887 AUC after training: 0.7033730158730159
User 134887 improves AUC. Keeping the model.
Training on augumented user 18986 42/50 current_auc = 0.7033730158730159
User 18986 AUC after training: 0.7023809523809523
User 18986 does not improve AUC. Reverting changes.
Training on augumented user 99227 43/50 current_auc = 0.7033730158730159
User 99227 AUC after training: 0.7029478458049887
User 99227 does not improve AUC. Reverting changes.
Training on augumented user 138186 44/50 current_auc = 0.7033730158730159
User 138186 AUC after training: 0.7032312925170068
User 138186 does not improve AUC. Reverting changes.
Training on augumented user 76449 45/50 current_auc = 0.7033730158730159
User 76449 AUC after training: 0.7025226757369614
User 76449 does not improve AUC. Reverting changes.
Training on augumented user 30900 46/50 current_auc = 0.7033730158730159
User 30900 AUC after training: 0.7011054421768708
User 30900 does not improve AUC. Reverting changes.
Training on augumented user 110172 47/50 current_auc = 0.7033730158730159
User 110172 AUC after training: 0.7028061224489797
User 110172 does not improve AUC. Reverting changes.
Training on augumented user 51323 48/50 current_auc = 0.7033730158730159
User 51323 AUC after training: 0.7033730158730158
User 51323 does not improve AUC. Reverting changes.
Training on augumented user 4016 49/50 current_auc = 0.7033730158730159
User 4016 AUC after training: 0.7030895691609976
User 4016 does not improve AUC. Reverting changes.
[2024-12-02 17:41:18.831774] start test user 13726 6/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:19.305200] start test user 13726 6/568 recall augumented users by random, augumented_users = [48914, 32167, 48831, 72228, 42911, 50541, 27849, 12520, 100568, 65296, 86787, 57921, 91191, 108127, 40240, 123977, 42440, 117986, 117294, 29562, 111900, 110371, 4949, 52766, 88243, 100128, 59345, 36945, 87300, 88270, 92679, 122122, 77306, 123051, 74407, 98281, 32412, 79885, 77059, 118788, 1621, 105572, 70067, 103985, 101617, 47352, 108337, 52671, 6307, 2364]
[2024-12-02 17:41:19.320635] user = 13726 Cloud 6/568
[2024-12-02 17:41:19.330103] user = 13726 Local 6/568
[2024-12-02 17:41:19.387283] user = 13726 Local+ 6/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:22.164328] user = 13726 MPDA- 6/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4484126984126984
Training on augumented user 48914 0/50 current_auc = 0.4484126984126984
User 48914 AUC after training: 0.4484126984126984
User 48914 does not improve AUC. Reverting changes.
Training on augumented user 32167 1/50 current_auc = 0.4484126984126984
User 32167 AUC after training: 0.4444444444444445
User 32167 does not improve AUC. Reverting changes.
Training on augumented user 48831 2/50 current_auc = 0.4484126984126984
User 48831 AUC after training: 0.4523809523809524
User 48831 improves AUC. Keeping the model.
Training on augumented user 72228 3/50 current_auc = 0.4523809523809524
User 72228 AUC after training: 0.4523809523809524
User 72228 does not improve AUC. Reverting changes.
Training on augumented user 42911 4/50 current_auc = 0.4523809523809524
User 42911 AUC after training: 0.4523809523809524
User 42911 does not improve AUC. Reverting changes.
Training on augumented user 50541 5/50 current_auc = 0.4523809523809524
User 50541 AUC after training: 0.44841269841269843
User 50541 does not improve AUC. Reverting changes.
Training on augumented user 27849 6/50 current_auc = 0.4523809523809524
User 27849 AUC after training: 0.4523809523809524
User 27849 does not improve AUC. Reverting changes.
Training on augumented user 12520 7/50 current_auc = 0.4523809523809524
User 12520 AUC after training: 0.4484126984126984
User 12520 does not improve AUC. Reverting changes.
Training on augumented user 100568 8/50 current_auc = 0.4523809523809524
User 100568 AUC after training: 0.44841269841269843
User 100568 does not improve AUC. Reverting changes.
Training on augumented user 65296 9/50 current_auc = 0.4523809523809524
User 65296 AUC after training: 0.44841269841269843
User 65296 does not improve AUC. Reverting changes.
Training on augumented user 86787 10/50 current_auc = 0.4523809523809524
User 86787 AUC after training: 0.4523809523809524
User 86787 does not improve AUC. Reverting changes.
Training on augumented user 57921 11/50 current_auc = 0.4523809523809524
User 57921 AUC after training: 0.4404761904761905
User 57921 does not improve AUC. Reverting changes.
Training on augumented user 91191 12/50 current_auc = 0.4523809523809524
User 91191 AUC after training: 0.45634920634920634
User 91191 improves AUC. Keeping the model.
Training on augumented user 108127 13/50 current_auc = 0.45634920634920634
User 108127 AUC after training: 0.44841269841269843
User 108127 does not improve AUC. Reverting changes.
Training on augumented user 40240 14/50 current_auc = 0.45634920634920634
User 40240 AUC after training: 0.44841269841269843
User 40240 does not improve AUC. Reverting changes.
Training on augumented user 123977 15/50 current_auc = 0.45634920634920634
User 123977 AUC after training: 0.45634920634920634
User 123977 does not improve AUC. Reverting changes.
Training on augumented user 42440 16/50 current_auc = 0.45634920634920634
User 42440 AUC after training: 0.4444444444444445
User 42440 does not improve AUC. Reverting changes.
Training on augumented user 117986 17/50 current_auc = 0.45634920634920634
User 117986 AUC after training: 0.45634920634920634
User 117986 does not improve AUC. Reverting changes.
Training on augumented user 117294 18/50 current_auc = 0.45634920634920634
User 117294 AUC after training: 0.45634920634920634
User 117294 does not improve AUC. Reverting changes.
Training on augumented user 29562 19/50 current_auc = 0.45634920634920634
User 29562 AUC after training: 0.45634920634920634
User 29562 does not improve AUC. Reverting changes.
Training on augumented user 111900 20/50 current_auc = 0.45634920634920634
User 111900 AUC after training: 0.45634920634920634
User 111900 does not improve AUC. Reverting changes.
Training on augumented user 110371 21/50 current_auc = 0.45634920634920634
User 110371 AUC after training: 0.45634920634920634
User 110371 does not improve AUC. Reverting changes.
Training on augumented user 4949 22/50 current_auc = 0.45634920634920634
User 4949 AUC after training: 0.45634920634920634
User 4949 does not improve AUC. Reverting changes.
Training on augumented user 52766 23/50 current_auc = 0.45634920634920634
User 52766 AUC after training: 0.45634920634920634
User 52766 does not improve AUC. Reverting changes.
Training on augumented user 88243 24/50 current_auc = 0.45634920634920634
User 88243 AUC after training: 0.4523809523809524
User 88243 does not improve AUC. Reverting changes.
Training on augumented user 100128 25/50 current_auc = 0.45634920634920634
User 100128 AUC after training: 0.45634920634920634
User 100128 does not improve AUC. Reverting changes.
Training on augumented user 59345 26/50 current_auc = 0.45634920634920634
User 59345 AUC after training: 0.45634920634920634
User 59345 does not improve AUC. Reverting changes.
Training on augumented user 36945 27/50 current_auc = 0.45634920634920634
User 36945 AUC after training: 0.45634920634920634
User 36945 does not improve AUC. Reverting changes.
Training on augumented user 87300 28/50 current_auc = 0.45634920634920634
User 87300 AUC after training: 0.45634920634920634
User 87300 does not improve AUC. Reverting changes.
Training on augumented user 88270 29/50 current_auc = 0.45634920634920634
User 88270 AUC after training: 0.44841269841269843
User 88270 does not improve AUC. Reverting changes.
Training on augumented user 92679 30/50 current_auc = 0.45634920634920634
User 92679 AUC after training: 0.45634920634920634
User 92679 does not improve AUC. Reverting changes.
Training on augumented user 122122 31/50 current_auc = 0.45634920634920634
User 122122 AUC after training: 0.45634920634920634
User 122122 does not improve AUC. Reverting changes.
Training on augumented user 77306 32/50 current_auc = 0.45634920634920634
User 77306 AUC after training: 0.45634920634920634
User 77306 does not improve AUC. Reverting changes.
Training on augumented user 123051 33/50 current_auc = 0.45634920634920634
User 123051 AUC after training: 0.45634920634920634
User 123051 does not improve AUC. Reverting changes.
Training on augumented user 74407 34/50 current_auc = 0.45634920634920634
User 74407 AUC after training: 0.4523809523809524
User 74407 does not improve AUC. Reverting changes.
Training on augumented user 98281 35/50 current_auc = 0.45634920634920634
User 98281 AUC after training: 0.44841269841269843
User 98281 does not improve AUC. Reverting changes.
Training on augumented user 32412 36/50 current_auc = 0.45634920634920634
User 32412 AUC after training: 0.45634920634920634
User 32412 does not improve AUC. Reverting changes.
Training on augumented user 79885 37/50 current_auc = 0.45634920634920634
User 79885 AUC after training: 0.45634920634920634
User 79885 does not improve AUC. Reverting changes.
Training on augumented user 77059 38/50 current_auc = 0.45634920634920634
User 77059 AUC after training: 0.45634920634920634
User 77059 does not improve AUC. Reverting changes.
Training on augumented user 118788 39/50 current_auc = 0.45634920634920634
User 118788 AUC after training: 0.45634920634920634
User 118788 does not improve AUC. Reverting changes.
Training on augumented user 1621 40/50 current_auc = 0.45634920634920634
User 1621 AUC after training: 0.45634920634920634
User 1621 does not improve AUC. Reverting changes.
Training on augumented user 105572 41/50 current_auc = 0.45634920634920634
User 105572 AUC after training: 0.45634920634920634
User 105572 does not improve AUC. Reverting changes.
Training on augumented user 70067 42/50 current_auc = 0.45634920634920634
User 70067 AUC after training: 0.45634920634920634
User 70067 does not improve AUC. Reverting changes.
Training on augumented user 103985 43/50 current_auc = 0.45634920634920634
User 103985 AUC after training: 0.45634920634920634
User 103985 does not improve AUC. Reverting changes.
Training on augumented user 101617 44/50 current_auc = 0.45634920634920634
User 101617 AUC after training: 0.4523809523809524
User 101617 does not improve AUC. Reverting changes.
Training on augumented user 47352 45/50 current_auc = 0.45634920634920634
User 47352 AUC after training: 0.45634920634920634
User 47352 does not improve AUC. Reverting changes.
Training on augumented user 108337 46/50 current_auc = 0.45634920634920634
User 108337 AUC after training: 0.45634920634920634
User 108337 does not improve AUC. Reverting changes.
Training on augumented user 52671 47/50 current_auc = 0.45634920634920634
User 52671 AUC after training: 0.45634920634920634
User 52671 does not improve AUC. Reverting changes.
Training on augumented user 6307 48/50 current_auc = 0.45634920634920634
User 6307 AUC after training: 0.45634920634920634
User 6307 does not improve AUC. Reverting changes.
Training on augumented user 2364 49/50 current_auc = 0.45634920634920634
User 2364 AUC after training: 0.45634920634920634
User 2364 does not improve AUC. Reverting changes.
[2024-12-02 17:41:50.844568] start test user 13749 7/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:51.425461] start test user 13749 7/568 recall augumented users by random, augumented_users = [102114, 65568, 106402, 41397, 70465, 79200, 56954, 137610, 118235, 133856, 102828, 80701, 17037, 31685, 11838, 118525, 126731, 43301, 7765, 45859, 104483, 48188, 36367, 131154, 44436, 18013, 9135, 84961, 30323, 23905, 93723, 106824, 79604, 136706, 12263, 31166, 63020, 53798, 113773, 45163, 2278, 34106, 41535, 117294, 93724, 94675, 69959, 52380, 15560, 56935]
[2024-12-02 17:41:51.440586] user = 13749 Cloud 7/568
[2024-12-02 17:41:51.451061] user = 13749 Local 7/568
[2024-12-02 17:41:51.472971] user = 13749 Local+ 7/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:54.007516] user = 13749 MPDA- 7/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8611111111111112
Training on augumented user 102114 0/50 current_auc = 0.8611111111111112
User 102114 AUC after training: 0.8611111111111112
User 102114 does not improve AUC. Reverting changes.
Training on augumented user 65568 1/50 current_auc = 0.8611111111111112
User 65568 AUC after training: 0.8611111111111112
User 65568 does not improve AUC. Reverting changes.
Training on augumented user 106402 2/50 current_auc = 0.8611111111111112
User 106402 AUC after training: 0.8611111111111112
User 106402 does not improve AUC. Reverting changes.
Training on augumented user 41397 3/50 current_auc = 0.8611111111111112
User 41397 AUC after training: 0.8611111111111112
User 41397 does not improve AUC. Reverting changes.
Training on augumented user 70465 4/50 current_auc = 0.8611111111111112
User 70465 AUC after training: 0.8611111111111112
User 70465 does not improve AUC. Reverting changes.
Training on augumented user 79200 5/50 current_auc = 0.8611111111111112
User 79200 AUC after training: 0.8611111111111112
User 79200 does not improve AUC. Reverting changes.
Training on augumented user 56954 6/50 current_auc = 0.8611111111111112
User 56954 AUC after training: 0.8611111111111112
User 56954 does not improve AUC. Reverting changes.
Training on augumented user 137610 7/50 current_auc = 0.8611111111111112
User 137610 AUC after training: 0.8611111111111112
User 137610 does not improve AUC. Reverting changes.
Training on augumented user 118235 8/50 current_auc = 0.8611111111111112
User 118235 AUC after training: 0.8611111111111112
User 118235 does not improve AUC. Reverting changes.
Training on augumented user 133856 9/50 current_auc = 0.8611111111111112
User 133856 AUC after training: 0.8611111111111112
User 133856 does not improve AUC. Reverting changes.
Training on augumented user 102828 10/50 current_auc = 0.8611111111111112
User 102828 AUC after training: 0.8611111111111112
User 102828 does not improve AUC. Reverting changes.
Training on augumented user 80701 11/50 current_auc = 0.8611111111111112
User 80701 AUC after training: 0.8611111111111112
User 80701 does not improve AUC. Reverting changes.
Training on augumented user 17037 12/50 current_auc = 0.8611111111111112
User 17037 AUC after training: 0.8611111111111112
User 17037 does not improve AUC. Reverting changes.
Training on augumented user 31685 13/50 current_auc = 0.8611111111111112
User 31685 AUC after training: 0.8611111111111112
User 31685 does not improve AUC. Reverting changes.
Training on augumented user 11838 14/50 current_auc = 0.8611111111111112
User 11838 AUC after training: 0.8611111111111112
User 11838 does not improve AUC. Reverting changes.
Training on augumented user 118525 15/50 current_auc = 0.8611111111111112
User 118525 AUC after training: 0.8611111111111112
User 118525 does not improve AUC. Reverting changes.
Training on augumented user 126731 16/50 current_auc = 0.8611111111111112
User 126731 AUC after training: 0.8611111111111112
User 126731 does not improve AUC. Reverting changes.
Training on augumented user 43301 17/50 current_auc = 0.8611111111111112
User 43301 AUC after training: 0.8611111111111112
User 43301 does not improve AUC. Reverting changes.
Training on augumented user 7765 18/50 current_auc = 0.8611111111111112
User 7765 AUC after training: 0.8611111111111112
User 7765 does not improve AUC. Reverting changes.
Training on augumented user 45859 19/50 current_auc = 0.8611111111111112
User 45859 AUC after training: 0.8611111111111112
User 45859 does not improve AUC. Reverting changes.
Training on augumented user 104483 20/50 current_auc = 0.8611111111111112
User 104483 AUC after training: 0.8611111111111112
User 104483 does not improve AUC. Reverting changes.
Training on augumented user 48188 21/50 current_auc = 0.8611111111111112
User 48188 AUC after training: 0.8611111111111112
User 48188 does not improve AUC. Reverting changes.
Training on augumented user 36367 22/50 current_auc = 0.8611111111111112
User 36367 AUC after training: 0.8611111111111112
User 36367 does not improve AUC. Reverting changes.
Training on augumented user 131154 23/50 current_auc = 0.8611111111111112
User 131154 AUC after training: 0.8611111111111112
User 131154 does not improve AUC. Reverting changes.
Training on augumented user 44436 24/50 current_auc = 0.8611111111111112
User 44436 AUC after training: 0.8611111111111112
User 44436 does not improve AUC. Reverting changes.
Training on augumented user 18013 25/50 current_auc = 0.8611111111111112
User 18013 AUC after training: 0.8611111111111112
User 18013 does not improve AUC. Reverting changes.
Training on augumented user 9135 26/50 current_auc = 0.8611111111111112
User 9135 AUC after training: 0.8611111111111112
User 9135 does not improve AUC. Reverting changes.
Training on augumented user 84961 27/50 current_auc = 0.8611111111111112
User 84961 AUC after training: 0.8611111111111112
User 84961 does not improve AUC. Reverting changes.
Training on augumented user 30323 28/50 current_auc = 0.8611111111111112
User 30323 AUC after training: 0.8611111111111112
User 30323 does not improve AUC. Reverting changes.
Training on augumented user 23905 29/50 current_auc = 0.8611111111111112
User 23905 AUC after training: 0.8611111111111112
User 23905 does not improve AUC. Reverting changes.
Training on augumented user 93723 30/50 current_auc = 0.8611111111111112
User 93723 AUC after training: 0.8611111111111112
User 93723 does not improve AUC. Reverting changes.
Training on augumented user 106824 31/50 current_auc = 0.8611111111111112
User 106824 AUC after training: 0.8611111111111112
User 106824 does not improve AUC. Reverting changes.
Training on augumented user 79604 32/50 current_auc = 0.8611111111111112
User 79604 AUC after training: 0.8611111111111112
User 79604 does not improve AUC. Reverting changes.
Training on augumented user 136706 33/50 current_auc = 0.8611111111111112
User 136706 AUC after training: 0.8611111111111112
User 136706 does not improve AUC. Reverting changes.
Training on augumented user 12263 34/50 current_auc = 0.8611111111111112
User 12263 AUC after training: 0.8611111111111112
User 12263 does not improve AUC. Reverting changes.
Training on augumented user 31166 35/50 current_auc = 0.8611111111111112
User 31166 AUC after training: 0.8611111111111112
User 31166 does not improve AUC. Reverting changes.
Training on augumented user 63020 36/50 current_auc = 0.8611111111111112
User 63020 AUC after training: 0.8611111111111112
User 63020 does not improve AUC. Reverting changes.
Training on augumented user 53798 37/50 current_auc = 0.8611111111111112
User 53798 AUC after training: 0.8611111111111112
User 53798 does not improve AUC. Reverting changes.
Training on augumented user 113773 38/50 current_auc = 0.8611111111111112
User 113773 AUC after training: 0.8611111111111112
User 113773 does not improve AUC. Reverting changes.
Training on augumented user 45163 39/50 current_auc = 0.8611111111111112
User 45163 AUC after training: 0.8611111111111112
User 45163 does not improve AUC. Reverting changes.
Training on augumented user 2278 40/50 current_auc = 0.8611111111111112
User 2278 AUC after training: 0.8611111111111112
User 2278 does not improve AUC. Reverting changes.
Training on augumented user 34106 41/50 current_auc = 0.8611111111111112
User 34106 AUC after training: 0.8611111111111112
User 34106 does not improve AUC. Reverting changes.
Training on augumented user 41535 42/50 current_auc = 0.8611111111111112
User 41535 AUC after training: 0.8611111111111112
User 41535 does not improve AUC. Reverting changes.
Training on augumented user 117294 43/50 current_auc = 0.8611111111111112
User 117294 AUC after training: 0.8611111111111112
User 117294 does not improve AUC. Reverting changes.
Training on augumented user 93724 44/50 current_auc = 0.8611111111111112
User 93724 AUC after training: 0.8611111111111112
User 93724 does not improve AUC. Reverting changes.
Training on augumented user 94675 45/50 current_auc = 0.8611111111111112
User 94675 AUC after training: 0.8611111111111112
User 94675 does not improve AUC. Reverting changes.
Training on augumented user 69959 46/50 current_auc = 0.8611111111111112
User 69959 AUC after training: 0.8611111111111112
User 69959 does not improve AUC. Reverting changes.
Training on augumented user 52380 47/50 current_auc = 0.8611111111111112
User 52380 AUC after training: 0.8611111111111112
User 52380 does not improve AUC. Reverting changes.
Training on augumented user 15560 48/50 current_auc = 0.8611111111111112
User 15560 AUC after training: 0.8611111111111112
User 15560 does not improve AUC. Reverting changes.
Training on augumented user 56935 49/50 current_auc = 0.8611111111111112
User 56935 AUC after training: 0.8611111111111112
User 56935 does not improve AUC. Reverting changes.
[2024-12-02 17:42:24.465419] start test user 13753 8/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:25.034324] start test user 13753 8/568 recall augumented users by random, augumented_users = [125230, 68094, 123442, 78430, 132143, 38401, 47285, 19099, 84896, 22999, 39229, 72218, 59220, 111648, 116183, 103073, 108707, 66589, 60957, 83715, 73364, 126700, 83283, 15499, 62966, 109239, 132438, 3986, 47374, 133023, 122321, 63027, 80834, 12051, 515, 31005, 105603, 40681, 87980, 111721, 3253, 97448, 126996, 15013, 131964, 119063, 44659, 102270, 105790, 107339]
[2024-12-02 17:42:25.053114] user = 13753 Cloud 8/568
[2024-12-02 17:42:25.081817] user = 13753 Local 8/568
[2024-12-02 17:42:25.310102] user = 13753 Local+ 8/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:28.410405] user = 13753 MPDA- 8/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6203742203742203
Training on augumented user 125230 0/50 current_auc = 0.6203742203742203
User 125230 AUC after training: 0.6174636174636174
User 125230 does not improve AUC. Reverting changes.
Training on augumented user 68094 1/50 current_auc = 0.6203742203742203
User 68094 AUC after training: 0.6212058212058212
User 68094 improves AUC. Keeping the model.
Training on augumented user 123442 2/50 current_auc = 0.6212058212058212
User 123442 AUC after training: 0.6207900207900208
User 123442 does not improve AUC. Reverting changes.
Training on augumented user 78430 3/50 current_auc = 0.6212058212058212
User 78430 AUC after training: 0.6195426195426196
User 78430 does not improve AUC. Reverting changes.
Training on augumented user 132143 4/50 current_auc = 0.6212058212058212
User 132143 AUC after training: 0.6195426195426196
User 132143 does not improve AUC. Reverting changes.
Training on augumented user 38401 5/50 current_auc = 0.6212058212058212
User 38401 AUC after training: 0.6203742203742203
User 38401 does not improve AUC. Reverting changes.
Training on augumented user 47285 6/50 current_auc = 0.6212058212058212
User 47285 AUC after training: 0.6203742203742203
User 47285 does not improve AUC. Reverting changes.
Training on augumented user 19099 7/50 current_auc = 0.6212058212058212
User 19099 AUC after training: 0.6199584199584199
User 19099 does not improve AUC. Reverting changes.
Training on augumented user 84896 8/50 current_auc = 0.6212058212058212
User 84896 AUC after training: 0.6195426195426196
User 84896 does not improve AUC. Reverting changes.
Training on augumented user 22999 9/50 current_auc = 0.6212058212058212
User 22999 AUC after training: 0.6195426195426196
User 22999 does not improve AUC. Reverting changes.
Training on augumented user 39229 10/50 current_auc = 0.6212058212058212
User 39229 AUC after training: 0.6195426195426196
User 39229 does not improve AUC. Reverting changes.
Training on augumented user 72218 11/50 current_auc = 0.6212058212058212
User 72218 AUC after training: 0.6199584199584199
User 72218 does not improve AUC. Reverting changes.
Training on augumented user 59220 12/50 current_auc = 0.6212058212058212
User 59220 AUC after training: 0.6191268191268191
User 59220 does not improve AUC. Reverting changes.
Training on augumented user 111648 13/50 current_auc = 0.6212058212058212
User 111648 AUC after training: 0.6195426195426196
User 111648 does not improve AUC. Reverting changes.
Training on augumented user 116183 14/50 current_auc = 0.6212058212058212
User 116183 AUC after training: 0.6212058212058212
User 116183 does not improve AUC. Reverting changes.
Training on augumented user 103073 15/50 current_auc = 0.6212058212058212
User 103073 AUC after training: 0.6199584199584199
User 103073 does not improve AUC. Reverting changes.
Training on augumented user 108707 16/50 current_auc = 0.6212058212058212
User 108707 AUC after training: 0.6199584199584199
User 108707 does not improve AUC. Reverting changes.
Training on augumented user 66589 17/50 current_auc = 0.6212058212058212
User 66589 AUC after training: 0.6207900207900208
User 66589 does not improve AUC. Reverting changes.
Training on augumented user 60957 18/50 current_auc = 0.6212058212058212
User 60957 AUC after training: 0.6203742203742203
User 60957 does not improve AUC. Reverting changes.
Training on augumented user 83715 19/50 current_auc = 0.6212058212058212
User 83715 AUC after training: 0.6212058212058212
User 83715 does not improve AUC. Reverting changes.
Training on augumented user 73364 20/50 current_auc = 0.6212058212058212
User 73364 AUC after training: 0.6187110187110186
User 73364 does not improve AUC. Reverting changes.
Training on augumented user 126700 21/50 current_auc = 0.6212058212058212
User 126700 AUC after training: 0.6195426195426196
User 126700 does not improve AUC. Reverting changes.
Training on augumented user 83283 22/50 current_auc = 0.6212058212058212
User 83283 AUC after training: 0.6212058212058212
User 83283 does not improve AUC. Reverting changes.
Training on augumented user 15499 23/50 current_auc = 0.6212058212058212
User 15499 AUC after training: 0.6212058212058212
User 15499 does not improve AUC. Reverting changes.
Training on augumented user 62966 24/50 current_auc = 0.6212058212058212
User 62966 AUC after training: 0.6216216216216216
User 62966 improves AUC. Keeping the model.
Training on augumented user 109239 25/50 current_auc = 0.6216216216216216
User 109239 AUC after training: 0.6212058212058212
User 109239 does not improve AUC. Reverting changes.
Training on augumented user 132438 26/50 current_auc = 0.6216216216216216
User 132438 AUC after training: 0.6199584199584199
User 132438 does not improve AUC. Reverting changes.
Training on augumented user 3986 27/50 current_auc = 0.6216216216216216
User 3986 AUC after training: 0.6191268191268191
User 3986 does not improve AUC. Reverting changes.
Training on augumented user 47374 28/50 current_auc = 0.6216216216216216
User 47374 AUC after training: 0.622037422037422
User 47374 improves AUC. Keeping the model.
Training on augumented user 133023 29/50 current_auc = 0.622037422037422
User 133023 AUC after training: 0.6228690228690229
User 133023 improves AUC. Keeping the model.
Training on augumented user 122321 30/50 current_auc = 0.6228690228690229
User 122321 AUC after training: 0.622037422037422
User 122321 does not improve AUC. Reverting changes.
Training on augumented user 63027 31/50 current_auc = 0.6228690228690229
User 63027 AUC after training: 0.6212058212058212
User 63027 does not improve AUC. Reverting changes.
Training on augumented user 80834 32/50 current_auc = 0.6228690228690229
User 80834 AUC after training: 0.6216216216216216
User 80834 does not improve AUC. Reverting changes.
Training on augumented user 12051 33/50 current_auc = 0.6228690228690229
User 12051 AUC after training: 0.6187110187110186
User 12051 does not improve AUC. Reverting changes.
Training on augumented user 515 34/50 current_auc = 0.6228690228690229
User 515 AUC after training: 0.622037422037422
User 515 does not improve AUC. Reverting changes.
Training on augumented user 31005 35/50 current_auc = 0.6228690228690229
User 31005 AUC after training: 0.6207900207900208
User 31005 does not improve AUC. Reverting changes.
Training on augumented user 105603 36/50 current_auc = 0.6228690228690229
User 105603 AUC after training: 0.622037422037422
User 105603 does not improve AUC. Reverting changes.
Training on augumented user 40681 37/50 current_auc = 0.6228690228690229
User 40681 AUC after training: 0.6191268191268191
User 40681 does not improve AUC. Reverting changes.
Training on augumented user 87980 38/50 current_auc = 0.6228690228690229
User 87980 AUC after training: 0.6228690228690229
User 87980 does not improve AUC. Reverting changes.
Training on augumented user 111721 39/50 current_auc = 0.6228690228690229
User 111721 AUC after training: 0.6216216216216216
User 111721 does not improve AUC. Reverting changes.
Training on augumented user 3253 40/50 current_auc = 0.6228690228690229
User 3253 AUC after training: 0.6199584199584199
User 3253 does not improve AUC. Reverting changes.
Training on augumented user 97448 41/50 current_auc = 0.6228690228690229
User 97448 AUC after training: 0.6191268191268191
User 97448 does not improve AUC. Reverting changes.
Training on augumented user 126996 42/50 current_auc = 0.6228690228690229
User 126996 AUC after training: 0.6203742203742203
User 126996 does not improve AUC. Reverting changes.
Training on augumented user 15013 43/50 current_auc = 0.6228690228690229
User 15013 AUC after training: 0.6203742203742203
User 15013 does not improve AUC. Reverting changes.
Training on augumented user 131964 44/50 current_auc = 0.6228690228690229
User 131964 AUC after training: 0.6207900207900209
User 131964 does not improve AUC. Reverting changes.
Training on augumented user 119063 45/50 current_auc = 0.6228690228690229
User 119063 AUC after training: 0.6216216216216216
User 119063 does not improve AUC. Reverting changes.
Training on augumented user 44659 46/50 current_auc = 0.6228690228690229
User 44659 AUC after training: 0.6216216216216216
User 44659 does not improve AUC. Reverting changes.
Training on augumented user 102270 47/50 current_auc = 0.6228690228690229
User 102270 AUC after training: 0.6216216216216216
User 102270 does not improve AUC. Reverting changes.
Training on augumented user 105790 48/50 current_auc = 0.6228690228690229
User 105790 AUC after training: 0.622037422037422
User 105790 does not improve AUC. Reverting changes.
Training on augumented user 107339 49/50 current_auc = 0.6228690228690229
User 107339 AUC after training: 0.6216216216216216
User 107339 does not improve AUC. Reverting changes.
[2024-12-02 17:43:01.175462] start test user 13757 9/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:01.781006] start test user 13757 9/568 recall augumented users by random, augumented_users = [84381, 11561, 71322, 51915, 103667, 40634, 95280, 104976, 107722, 84363, 135766, 135549, 83634, 94182, 70799, 16299, 75458, 83364, 28428, 108975, 19812, 68237, 102868, 120251, 30122, 88938, 70702, 29221, 60419, 13902, 22485, 134220, 96925, 26177, 11212, 48768, 95442, 88925, 59686, 77895, 110752, 80354, 106894, 117661, 10809, 117027, 65811, 4866, 9872, 103904]
[2024-12-02 17:43:01.807068] user = 13757 Cloud 9/568
[2024-12-02 17:43:01.822308] user = 13757 Local 9/568
[2024-12-02 17:43:01.935509] user = 13757 Local+ 9/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:04.313197] user = 13757 MPDA- 9/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7251984126984127
Training on augumented user 84381 0/50 current_auc = 0.7251984126984127
User 84381 AUC after training: 0.7242063492063492
User 84381 does not improve AUC. Reverting changes.
Training on augumented user 11561 1/50 current_auc = 0.7251984126984127
User 11561 AUC after training: 0.7271825396825397
User 11561 improves AUC. Keeping the model.
Training on augumented user 71322 2/50 current_auc = 0.7271825396825397
User 71322 AUC after training: 0.7251984126984127
User 71322 does not improve AUC. Reverting changes.
Training on augumented user 51915 3/50 current_auc = 0.7271825396825397
User 51915 AUC after training: 0.7271825396825397
User 51915 does not improve AUC. Reverting changes.
Training on augumented user 103667 4/50 current_auc = 0.7271825396825397
User 103667 AUC after training: 0.7271825396825397
User 103667 does not improve AUC. Reverting changes.
Training on augumented user 40634 5/50 current_auc = 0.7271825396825397
User 40634 AUC after training: 0.7271825396825397
User 40634 does not improve AUC. Reverting changes.
Training on augumented user 95280 6/50 current_auc = 0.7271825396825397
User 95280 AUC after training: 0.7281746031746031
User 95280 improves AUC. Keeping the model.
Training on augumented user 104976 7/50 current_auc = 0.7281746031746031
User 104976 AUC after training: 0.7281746031746031
User 104976 does not improve AUC. Reverting changes.
Training on augumented user 107722 8/50 current_auc = 0.7281746031746031
User 107722 AUC after training: 0.7271825396825397
User 107722 does not improve AUC. Reverting changes.
Training on augumented user 84363 9/50 current_auc = 0.7281746031746031
User 84363 AUC after training: 0.7281746031746031
User 84363 does not improve AUC. Reverting changes.
Training on augumented user 135766 10/50 current_auc = 0.7281746031746031
User 135766 AUC after training: 0.7251984126984127
User 135766 does not improve AUC. Reverting changes.
Training on augumented user 135549 11/50 current_auc = 0.7281746031746031
User 135549 AUC after training: 0.7271825396825397
User 135549 does not improve AUC. Reverting changes.
Training on augumented user 83634 12/50 current_auc = 0.7281746031746031
User 83634 AUC after training: 0.7271825396825397
User 83634 does not improve AUC. Reverting changes.
Training on augumented user 94182 13/50 current_auc = 0.7281746031746031
User 94182 AUC after training: 0.7281746031746031
User 94182 does not improve AUC. Reverting changes.
Training on augumented user 70799 14/50 current_auc = 0.7281746031746031
User 70799 AUC after training: 0.7251984126984127
User 70799 does not improve AUC. Reverting changes.
Training on augumented user 16299 15/50 current_auc = 0.7281746031746031
User 16299 AUC after training: 0.7281746031746031
User 16299 does not improve AUC. Reverting changes.
Training on augumented user 75458 16/50 current_auc = 0.7281746031746031
User 75458 AUC after training: 0.7281746031746031
User 75458 does not improve AUC. Reverting changes.
Training on augumented user 83364 17/50 current_auc = 0.7281746031746031
User 83364 AUC after training: 0.7232142857142857
User 83364 does not improve AUC. Reverting changes.
Training on augumented user 28428 18/50 current_auc = 0.7281746031746031
User 28428 AUC after training: 0.7271825396825397
User 28428 does not improve AUC. Reverting changes.
Training on augumented user 108975 19/50 current_auc = 0.7281746031746031
User 108975 AUC after training: 0.7291666666666666
User 108975 improves AUC. Keeping the model.
Training on augumented user 19812 20/50 current_auc = 0.7291666666666666
User 19812 AUC after training: 0.7301587301587301
User 19812 improves AUC. Keeping the model.
Training on augumented user 68237 21/50 current_auc = 0.7301587301587301
User 68237 AUC after training: 0.7301587301587301
User 68237 does not improve AUC. Reverting changes.
Training on augumented user 102868 22/50 current_auc = 0.7301587301587301
User 102868 AUC after training: 0.7291666666666666
User 102868 does not improve AUC. Reverting changes.
Training on augumented user 120251 23/50 current_auc = 0.7301587301587301
User 120251 AUC after training: 0.7291666666666666
User 120251 does not improve AUC. Reverting changes.
Training on augumented user 30122 24/50 current_auc = 0.7301587301587301
User 30122 AUC after training: 0.7291666666666666
User 30122 does not improve AUC. Reverting changes.
Training on augumented user 88938 25/50 current_auc = 0.7301587301587301
User 88938 AUC after training: 0.7291666666666666
User 88938 does not improve AUC. Reverting changes.
Training on augumented user 70702 26/50 current_auc = 0.7301587301587301
User 70702 AUC after training: 0.7291666666666666
User 70702 does not improve AUC. Reverting changes.
Training on augumented user 29221 27/50 current_auc = 0.7301587301587301
User 29221 AUC after training: 0.7301587301587301
User 29221 does not improve AUC. Reverting changes.
Training on augumented user 60419 28/50 current_auc = 0.7301587301587301
User 60419 AUC after training: 0.7291666666666666
User 60419 does not improve AUC. Reverting changes.
Training on augumented user 13902 29/50 current_auc = 0.7301587301587301
User 13902 AUC after training: 0.7301587301587301
User 13902 does not improve AUC. Reverting changes.
Training on augumented user 22485 30/50 current_auc = 0.7301587301587301
User 22485 AUC after training: 0.7281746031746031
User 22485 does not improve AUC. Reverting changes.
Training on augumented user 134220 31/50 current_auc = 0.7301587301587301
User 134220 AUC after training: 0.7281746031746031
User 134220 does not improve AUC. Reverting changes.
Training on augumented user 96925 32/50 current_auc = 0.7301587301587301
User 96925 AUC after training: 0.7301587301587301
User 96925 does not improve AUC. Reverting changes.
Training on augumented user 26177 33/50 current_auc = 0.7301587301587301
User 26177 AUC after training: 0.7291666666666666
User 26177 does not improve AUC. Reverting changes.
Training on augumented user 11212 34/50 current_auc = 0.7301587301587301
User 11212 AUC after training: 0.7301587301587301
User 11212 does not improve AUC. Reverting changes.
Training on augumented user 48768 35/50 current_auc = 0.7301587301587301
User 48768 AUC after training: 0.7301587301587301
User 48768 does not improve AUC. Reverting changes.
Training on augumented user 95442 36/50 current_auc = 0.7301587301587301
User 95442 AUC after training: 0.7351190476190477
User 95442 improves AUC. Keeping the model.
Training on augumented user 88925 37/50 current_auc = 0.7351190476190477
User 88925 AUC after training: 0.7311507936507937
User 88925 does not improve AUC. Reverting changes.
Training on augumented user 59686 38/50 current_auc = 0.7351190476190477
User 59686 AUC after training: 0.7341269841269842
User 59686 does not improve AUC. Reverting changes.
Training on augumented user 77895 39/50 current_auc = 0.7351190476190477
User 77895 AUC after training: 0.7351190476190477
User 77895 does not improve AUC. Reverting changes.
Training on augumented user 110752 40/50 current_auc = 0.7351190476190477
User 110752 AUC after training: 0.7311507936507936
User 110752 does not improve AUC. Reverting changes.
Training on augumented user 80354 41/50 current_auc = 0.7351190476190477
User 80354 AUC after training: 0.7351190476190476
User 80354 does not improve AUC. Reverting changes.
Training on augumented user 106894 42/50 current_auc = 0.7351190476190477
User 106894 AUC after training: 0.7291666666666666
User 106894 does not improve AUC. Reverting changes.
Training on augumented user 117661 43/50 current_auc = 0.7351190476190477
User 117661 AUC after training: 0.7331349206349206
User 117661 does not improve AUC. Reverting changes.
Training on augumented user 10809 44/50 current_auc = 0.7351190476190477
User 10809 AUC after training: 0.7301587301587301
User 10809 does not improve AUC. Reverting changes.
Training on augumented user 117027 45/50 current_auc = 0.7351190476190477
User 117027 AUC after training: 0.7331349206349207
User 117027 does not improve AUC. Reverting changes.
Training on augumented user 65811 46/50 current_auc = 0.7351190476190477
User 65811 AUC after training: 0.7331349206349207
User 65811 does not improve AUC. Reverting changes.
Training on augumented user 4866 47/50 current_auc = 0.7351190476190477
User 4866 AUC after training: 0.7321428571428571
User 4866 does not improve AUC. Reverting changes.
Training on augumented user 9872 48/50 current_auc = 0.7351190476190477
User 9872 AUC after training: 0.7321428571428572
User 9872 does not improve AUC. Reverting changes.
Training on augumented user 103904 49/50 current_auc = 0.7351190476190477
User 103904 AUC after training: 0.7341269841269842
User 103904 does not improve AUC. Reverting changes.
[2024-12-02 17:43:32.361210] start test user 13805 10/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:32.789674] start test user 13805 10/568 recall augumented users by random, augumented_users = [98782, 39932, 99818, 83593, 82472, 105241, 61215, 69857, 66028, 1699, 70574, 81727, 19313, 31401, 39164, 102159, 112665, 110416, 15325, 76205, 20427, 91386, 23231, 124680, 130784, 70595, 105101, 115879, 112842, 102059, 108295, 77430, 97581, 111256, 22527, 35404, 41151, 126754, 124239, 44083, 122716, 7211, 41324, 134973, 106654, 15733, 51879, 40426, 94109, 48635]
[2024-12-02 17:43:32.804814] user = 13805 Cloud 10/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:43:32.811552] user = 13805 Local 10/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:43:32.844741] user = 13805 Local+ 10/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:43:35.378825] user = 13805 MPDA- 10/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 98782 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98782 AUC after training: 0.5
User 98782 does not improve AUC. Reverting changes.
Training on augumented user 39932 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39932 AUC after training: 0.5
User 39932 does not improve AUC. Reverting changes.
Training on augumented user 99818 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99818 AUC after training: 0.5
User 99818 does not improve AUC. Reverting changes.
Training on augumented user 83593 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83593 AUC after training: 0.5
User 83593 does not improve AUC. Reverting changes.
Training on augumented user 82472 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82472 AUC after training: 0.5
User 82472 does not improve AUC. Reverting changes.
Training on augumented user 105241 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105241 AUC after training: 0.5
User 105241 does not improve AUC. Reverting changes.
Training on augumented user 61215 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61215 AUC after training: 0.5
User 61215 does not improve AUC. Reverting changes.
Training on augumented user 69857 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69857 AUC after training: 0.5
User 69857 does not improve AUC. Reverting changes.
Training on augumented user 66028 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66028 AUC after training: 0.5
User 66028 does not improve AUC. Reverting changes.
Training on augumented user 1699 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1699 AUC after training: 0.5
User 1699 does not improve AUC. Reverting changes.
Training on augumented user 70574 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70574 AUC after training: 0.5
User 70574 does not improve AUC. Reverting changes.
Training on augumented user 81727 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81727 AUC after training: 0.5
User 81727 does not improve AUC. Reverting changes.
Training on augumented user 19313 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19313 AUC after training: 0.5
User 19313 does not improve AUC. Reverting changes.
Training on augumented user 31401 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31401 AUC after training: 0.5
User 31401 does not improve AUC. Reverting changes.
Training on augumented user 39164 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39164 AUC after training: 0.5
User 39164 does not improve AUC. Reverting changes.
Training on augumented user 102159 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102159 AUC after training: 0.5
User 102159 does not improve AUC. Reverting changes.
Training on augumented user 112665 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112665 AUC after training: 0.5
User 112665 does not improve AUC. Reverting changes.
Training on augumented user 110416 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110416 AUC after training: 0.5
User 110416 does not improve AUC. Reverting changes.
Training on augumented user 15325 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15325 AUC after training: 0.5
User 15325 does not improve AUC. Reverting changes.
Training on augumented user 76205 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76205 AUC after training: 0.5
User 76205 does not improve AUC. Reverting changes.
Training on augumented user 20427 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20427 AUC after training: 0.5
User 20427 does not improve AUC. Reverting changes.
Training on augumented user 91386 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91386 AUC after training: 0.5
User 91386 does not improve AUC. Reverting changes.
Training on augumented user 23231 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23231 AUC after training: 0.5
User 23231 does not improve AUC. Reverting changes.
Training on augumented user 124680 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124680 AUC after training: 0.5
User 124680 does not improve AUC. Reverting changes.
Training on augumented user 130784 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130784 AUC after training: 0.5
User 130784 does not improve AUC. Reverting changes.
Training on augumented user 70595 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70595 AUC after training: 0.5
User 70595 does not improve AUC. Reverting changes.
Training on augumented user 105101 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105101 AUC after training: 0.5
User 105101 does not improve AUC. Reverting changes.
Training on augumented user 115879 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115879 AUC after training: 0.5
User 115879 does not improve AUC. Reverting changes.
Training on augumented user 112842 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112842 AUC after training: 0.5
User 112842 does not improve AUC. Reverting changes.
Training on augumented user 102059 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102059 AUC after training: 0.5
User 102059 does not improve AUC. Reverting changes.
Training on augumented user 108295 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108295 AUC after training: 0.5
User 108295 does not improve AUC. Reverting changes.
Training on augumented user 77430 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77430 AUC after training: 0.5
User 77430 does not improve AUC. Reverting changes.
Training on augumented user 97581 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97581 AUC after training: 0.5
User 97581 does not improve AUC. Reverting changes.
Training on augumented user 111256 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111256 AUC after training: 0.5
User 111256 does not improve AUC. Reverting changes.
Training on augumented user 22527 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22527 AUC after training: 0.5
User 22527 does not improve AUC. Reverting changes.
Training on augumented user 35404 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35404 AUC after training: 0.5
User 35404 does not improve AUC. Reverting changes.
Training on augumented user 41151 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41151 AUC after training: 0.5
User 41151 does not improve AUC. Reverting changes.
Training on augumented user 126754 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126754 AUC after training: 0.5
User 126754 does not improve AUC. Reverting changes.
Training on augumented user 124239 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124239 AUC after training: 0.5
User 124239 does not improve AUC. Reverting changes.
Training on augumented user 44083 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44083 AUC after training: 0.5
User 44083 does not improve AUC. Reverting changes.
Training on augumented user 122716 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122716 AUC after training: 0.5
User 122716 does not improve AUC. Reverting changes.
Training on augumented user 7211 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7211 AUC after training: 0.5
User 7211 does not improve AUC. Reverting changes.
Training on augumented user 41324 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41324 AUC after training: 0.5
User 41324 does not improve AUC. Reverting changes.
Training on augumented user 134973 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134973 AUC after training: 0.5
User 134973 does not improve AUC. Reverting changes.
Training on augumented user 106654 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106654 AUC after training: 0.5
User 106654 does not improve AUC. Reverting changes.
Training on augumented user 15733 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15733 AUC after training: 0.5
User 15733 does not improve AUC. Reverting changes.
Training on augumented user 51879 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51879 AUC after training: 0.5
User 51879 does not improve AUC. Reverting changes.
Training on augumented user 40426 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40426 AUC after training: 0.5
User 40426 does not improve AUC. Reverting changes.
Training on augumented user 94109 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94109 AUC after training: 0.5
User 94109 does not improve AUC. Reverting changes.
Training on augumented user 48635 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48635 AUC after training: 0.5
User 48635 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:44:05.104509] start test user 13814 11/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:05.619730] start test user 13814 11/568 recall augumented users by random, augumented_users = [122626, 35043, 36065, 39188, 99990, 7152, 16264, 101246, 79519, 42131, 92297, 7149, 49935, 74533, 71654, 15895, 78995, 94635, 30790, 99233, 51020, 134553, 50877, 4799, 106385, 91846, 62891, 113157, 95861, 68392, 58254, 123399, 76538, 18246, 106978, 89846, 115164, 59881, 57511, 133957, 123523, 117975, 104105, 5649, 30144, 579, 138311, 38558, 42855, 15137]
[2024-12-02 17:44:05.637011] user = 13814 Cloud 11/568
[2024-12-02 17:44:05.649804] user = 13814 Local 11/568
[2024-12-02 17:44:05.679649] user = 13814 Local+ 11/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:07.517991] user = 13814 MPDA- 11/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5328282828282828
Training on augumented user 122626 0/50 current_auc = 0.5328282828282828
User 122626 AUC after training: 0.5328282828282828
User 122626 does not improve AUC. Reverting changes.
Training on augumented user 35043 1/50 current_auc = 0.5328282828282828
User 35043 AUC after training: 0.5328282828282828
User 35043 does not improve AUC. Reverting changes.
Training on augumented user 36065 2/50 current_auc = 0.5328282828282828
User 36065 AUC after training: 0.5328282828282828
User 36065 does not improve AUC. Reverting changes.
Training on augumented user 39188 3/50 current_auc = 0.5328282828282828
User 39188 AUC after training: 0.5328282828282828
User 39188 does not improve AUC. Reverting changes.
Training on augumented user 99990 4/50 current_auc = 0.5328282828282828
User 99990 AUC after training: 0.5328282828282828
User 99990 does not improve AUC. Reverting changes.
Training on augumented user 7152 5/50 current_auc = 0.5328282828282828
User 7152 AUC after training: 0.5328282828282828
User 7152 does not improve AUC. Reverting changes.
Training on augumented user 16264 6/50 current_auc = 0.5328282828282828
User 16264 AUC after training: 0.5328282828282828
User 16264 does not improve AUC. Reverting changes.
Training on augumented user 101246 7/50 current_auc = 0.5328282828282828
User 101246 AUC after training: 0.5328282828282828
User 101246 does not improve AUC. Reverting changes.
Training on augumented user 79519 8/50 current_auc = 0.5328282828282828
User 79519 AUC after training: 0.5303030303030303
User 79519 does not improve AUC. Reverting changes.
Training on augumented user 42131 9/50 current_auc = 0.5328282828282828
User 42131 AUC after training: 0.5303030303030303
User 42131 does not improve AUC. Reverting changes.
Training on augumented user 92297 10/50 current_auc = 0.5328282828282828
User 92297 AUC after training: 0.5328282828282828
User 92297 does not improve AUC. Reverting changes.
Training on augumented user 7149 11/50 current_auc = 0.5328282828282828
User 7149 AUC after training: 0.5328282828282828
User 7149 does not improve AUC. Reverting changes.
Training on augumented user 49935 12/50 current_auc = 0.5328282828282828
User 49935 AUC after training: 0.5328282828282828
User 49935 does not improve AUC. Reverting changes.
Training on augumented user 74533 13/50 current_auc = 0.5328282828282828
User 74533 AUC after training: 0.5328282828282828
User 74533 does not improve AUC. Reverting changes.
Training on augumented user 71654 14/50 current_auc = 0.5328282828282828
User 71654 AUC after training: 0.5303030303030303
User 71654 does not improve AUC. Reverting changes.
Training on augumented user 15895 15/50 current_auc = 0.5328282828282828
User 15895 AUC after training: 0.5328282828282828
User 15895 does not improve AUC. Reverting changes.
Training on augumented user 78995 16/50 current_auc = 0.5328282828282828
User 78995 AUC after training: 0.5303030303030303
User 78995 does not improve AUC. Reverting changes.
Training on augumented user 94635 17/50 current_auc = 0.5328282828282828
User 94635 AUC after training: 0.5277777777777778
User 94635 does not improve AUC. Reverting changes.
Training on augumented user 30790 18/50 current_auc = 0.5328282828282828
User 30790 AUC after training: 0.5303030303030303
User 30790 does not improve AUC. Reverting changes.
Training on augumented user 99233 19/50 current_auc = 0.5328282828282828
User 99233 AUC after training: 0.5328282828282828
User 99233 does not improve AUC. Reverting changes.
Training on augumented user 51020 20/50 current_auc = 0.5328282828282828
User 51020 AUC after training: 0.5328282828282828
User 51020 does not improve AUC. Reverting changes.
Training on augumented user 134553 21/50 current_auc = 0.5328282828282828
User 134553 AUC after training: 0.5328282828282828
User 134553 does not improve AUC. Reverting changes.
Training on augumented user 50877 22/50 current_auc = 0.5328282828282828
User 50877 AUC after training: 0.5328282828282828
User 50877 does not improve AUC. Reverting changes.
Training on augumented user 4799 23/50 current_auc = 0.5328282828282828
User 4799 AUC after training: 0.5277777777777778
User 4799 does not improve AUC. Reverting changes.
Training on augumented user 106385 24/50 current_auc = 0.5328282828282828
User 106385 AUC after training: 0.5328282828282828
User 106385 does not improve AUC. Reverting changes.
Training on augumented user 91846 25/50 current_auc = 0.5328282828282828
User 91846 AUC after training: 0.5303030303030303
User 91846 does not improve AUC. Reverting changes.
Training on augumented user 62891 26/50 current_auc = 0.5328282828282828
User 62891 AUC after training: 0.5303030303030303
User 62891 does not improve AUC. Reverting changes.
Training on augumented user 113157 27/50 current_auc = 0.5328282828282828
User 113157 AUC after training: 0.5328282828282828
User 113157 does not improve AUC. Reverting changes.
Training on augumented user 95861 28/50 current_auc = 0.5328282828282828
User 95861 AUC after training: 0.5328282828282828
User 95861 does not improve AUC. Reverting changes.
Training on augumented user 68392 29/50 current_auc = 0.5328282828282828
User 68392 AUC after training: 0.5328282828282828
User 68392 does not improve AUC. Reverting changes.
Training on augumented user 58254 30/50 current_auc = 0.5328282828282828
User 58254 AUC after training: 0.5328282828282828
User 58254 does not improve AUC. Reverting changes.
Training on augumented user 123399 31/50 current_auc = 0.5328282828282828
User 123399 AUC after training: 0.5303030303030303
User 123399 does not improve AUC. Reverting changes.
Training on augumented user 76538 32/50 current_auc = 0.5328282828282828
User 76538 AUC after training: 0.5303030303030303
User 76538 does not improve AUC. Reverting changes.
Training on augumented user 18246 33/50 current_auc = 0.5328282828282828
User 18246 AUC after training: 0.5328282828282828
User 18246 does not improve AUC. Reverting changes.
Training on augumented user 106978 34/50 current_auc = 0.5328282828282828
User 106978 AUC after training: 0.5328282828282828
User 106978 does not improve AUC. Reverting changes.
Training on augumented user 89846 35/50 current_auc = 0.5328282828282828
User 89846 AUC after training: 0.5303030303030303
User 89846 does not improve AUC. Reverting changes.
Training on augumented user 115164 36/50 current_auc = 0.5328282828282828
User 115164 AUC after training: 0.5303030303030303
User 115164 does not improve AUC. Reverting changes.
Training on augumented user 59881 37/50 current_auc = 0.5328282828282828
User 59881 AUC after training: 0.5328282828282828
User 59881 does not improve AUC. Reverting changes.
Training on augumented user 57511 38/50 current_auc = 0.5328282828282828
User 57511 AUC after training: 0.5328282828282828
User 57511 does not improve AUC. Reverting changes.
Training on augumented user 133957 39/50 current_auc = 0.5328282828282828
User 133957 AUC after training: 0.5328282828282828
User 133957 does not improve AUC. Reverting changes.
Training on augumented user 123523 40/50 current_auc = 0.5328282828282828
User 123523 AUC after training: 0.5328282828282828
User 123523 does not improve AUC. Reverting changes.
Training on augumented user 117975 41/50 current_auc = 0.5328282828282828
User 117975 AUC after training: 0.5328282828282828
User 117975 does not improve AUC. Reverting changes.
Training on augumented user 104105 42/50 current_auc = 0.5328282828282828
User 104105 AUC after training: 0.5328282828282828
User 104105 does not improve AUC. Reverting changes.
Training on augumented user 5649 43/50 current_auc = 0.5328282828282828
User 5649 AUC after training: 0.5328282828282828
User 5649 does not improve AUC. Reverting changes.
Training on augumented user 30144 44/50 current_auc = 0.5328282828282828
User 30144 AUC after training: 0.5303030303030303
User 30144 does not improve AUC. Reverting changes.
Training on augumented user 579 45/50 current_auc = 0.5328282828282828
User 579 AUC after training: 0.5303030303030303
User 579 does not improve AUC. Reverting changes.
Training on augumented user 138311 46/50 current_auc = 0.5328282828282828
User 138311 AUC after training: 0.5328282828282828
User 138311 does not improve AUC. Reverting changes.
Training on augumented user 38558 47/50 current_auc = 0.5328282828282828
User 38558 AUC after training: 0.5303030303030303
User 38558 does not improve AUC. Reverting changes.
Training on augumented user 42855 48/50 current_auc = 0.5328282828282828
User 42855 AUC after training: 0.5328282828282828
User 42855 does not improve AUC. Reverting changes.
Training on augumented user 15137 49/50 current_auc = 0.5328282828282828
User 15137 AUC after training: 0.5328282828282828
User 15137 does not improve AUC. Reverting changes.
[2024-12-02 17:44:35.989709] start test user 13818 12/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:36.414912] start test user 13818 12/568 recall augumented users by random, augumented_users = [60553, 11572, 31986, 55920, 5458, 9264, 136569, 117949, 20383, 115241, 3602, 8978, 40604, 95885, 128394, 22641, 129164, 83056, 127355, 6728, 28276, 122009, 24607, 93335, 68178, 104388, 45966, 48856, 33076, 11312, 55766, 28922, 52405, 27070, 24350, 99360, 3274, 22113, 59206, 114119, 35397, 118798, 60491, 107868, 84404, 40159, 88829, 117294, 59200, 75339]
[2024-12-02 17:44:36.429633] user = 13818 Cloud 12/568
[2024-12-02 17:44:36.438930] user = 13818 Local 12/568
[2024-12-02 17:44:36.485072] user = 13818 Local+ 12/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:38.679917] user = 13818 MPDA- 12/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7333333333333334
Training on augumented user 60553 0/50 current_auc = 0.7333333333333334
User 60553 AUC after training: 0.7333333333333334
User 60553 does not improve AUC. Reverting changes.
Training on augumented user 11572 1/50 current_auc = 0.7333333333333334
User 11572 AUC after training: 0.7333333333333334
User 11572 does not improve AUC. Reverting changes.
Training on augumented user 31986 2/50 current_auc = 0.7333333333333334
User 31986 AUC after training: 0.7333333333333334
User 31986 does not improve AUC. Reverting changes.
Training on augumented user 55920 3/50 current_auc = 0.7333333333333334
User 55920 AUC after training: 0.7333333333333334
User 55920 does not improve AUC. Reverting changes.
Training on augumented user 5458 4/50 current_auc = 0.7333333333333334
User 5458 AUC after training: 0.7333333333333334
User 5458 does not improve AUC. Reverting changes.
Training on augumented user 9264 5/50 current_auc = 0.7333333333333334
User 9264 AUC after training: 0.7333333333333334
User 9264 does not improve AUC. Reverting changes.
Training on augumented user 136569 6/50 current_auc = 0.7333333333333334
User 136569 AUC after training: 0.7333333333333334
User 136569 does not improve AUC. Reverting changes.
Training on augumented user 117949 7/50 current_auc = 0.7333333333333334
User 117949 AUC after training: 0.7333333333333334
User 117949 does not improve AUC. Reverting changes.
Training on augumented user 20383 8/50 current_auc = 0.7333333333333334
User 20383 AUC after training: 0.7333333333333334
User 20383 does not improve AUC. Reverting changes.
Training on augumented user 115241 9/50 current_auc = 0.7333333333333334
User 115241 AUC after training: 0.7333333333333334
User 115241 does not improve AUC. Reverting changes.
Training on augumented user 3602 10/50 current_auc = 0.7333333333333334
User 3602 AUC after training: 0.7333333333333334
User 3602 does not improve AUC. Reverting changes.
Training on augumented user 8978 11/50 current_auc = 0.7333333333333334
User 8978 AUC after training: 0.7333333333333334
User 8978 does not improve AUC. Reverting changes.
Training on augumented user 40604 12/50 current_auc = 0.7333333333333334
User 40604 AUC after training: 0.7333333333333334
User 40604 does not improve AUC. Reverting changes.
Training on augumented user 95885 13/50 current_auc = 0.7333333333333334
User 95885 AUC after training: 0.7333333333333334
User 95885 does not improve AUC. Reverting changes.
Training on augumented user 128394 14/50 current_auc = 0.7333333333333334
User 128394 AUC after training: 0.7333333333333334
User 128394 does not improve AUC. Reverting changes.
Training on augumented user 22641 15/50 current_auc = 0.7333333333333334
User 22641 AUC after training: 0.7333333333333334
User 22641 does not improve AUC. Reverting changes.
Training on augumented user 129164 16/50 current_auc = 0.7333333333333334
User 129164 AUC after training: 0.7333333333333334
User 129164 does not improve AUC. Reverting changes.
Training on augumented user 83056 17/50 current_auc = 0.7333333333333334
User 83056 AUC after training: 0.7333333333333334
User 83056 does not improve AUC. Reverting changes.
Training on augumented user 127355 18/50 current_auc = 0.7333333333333334
User 127355 AUC after training: 0.7333333333333334
User 127355 does not improve AUC. Reverting changes.
Training on augumented user 6728 19/50 current_auc = 0.7333333333333334
User 6728 AUC after training: 0.7333333333333334
User 6728 does not improve AUC. Reverting changes.
Training on augumented user 28276 20/50 current_auc = 0.7333333333333334
User 28276 AUC after training: 0.7333333333333334
User 28276 does not improve AUC. Reverting changes.
Training on augumented user 122009 21/50 current_auc = 0.7333333333333334
User 122009 AUC after training: 0.7333333333333334
User 122009 does not improve AUC. Reverting changes.
Training on augumented user 24607 22/50 current_auc = 0.7333333333333334
User 24607 AUC after training: 0.7333333333333334
User 24607 does not improve AUC. Reverting changes.
Training on augumented user 93335 23/50 current_auc = 0.7333333333333334
User 93335 AUC after training: 0.7333333333333334
User 93335 does not improve AUC. Reverting changes.
Training on augumented user 68178 24/50 current_auc = 0.7333333333333334
User 68178 AUC after training: 0.7333333333333334
User 68178 does not improve AUC. Reverting changes.
Training on augumented user 104388 25/50 current_auc = 0.7333333333333334
User 104388 AUC after training: 0.7333333333333334
User 104388 does not improve AUC. Reverting changes.
Training on augumented user 45966 26/50 current_auc = 0.7333333333333334
User 45966 AUC after training: 0.7333333333333334
User 45966 does not improve AUC. Reverting changes.
Training on augumented user 48856 27/50 current_auc = 0.7333333333333334
User 48856 AUC after training: 0.7333333333333334
User 48856 does not improve AUC. Reverting changes.
Training on augumented user 33076 28/50 current_auc = 0.7333333333333334
User 33076 AUC after training: 0.7333333333333334
User 33076 does not improve AUC. Reverting changes.
Training on augumented user 11312 29/50 current_auc = 0.7333333333333334
User 11312 AUC after training: 0.7333333333333334
User 11312 does not improve AUC. Reverting changes.
Training on augumented user 55766 30/50 current_auc = 0.7333333333333334
User 55766 AUC after training: 0.7333333333333334
User 55766 does not improve AUC. Reverting changes.
Training on augumented user 28922 31/50 current_auc = 0.7333333333333334
User 28922 AUC after training: 0.7333333333333334
User 28922 does not improve AUC. Reverting changes.
Training on augumented user 52405 32/50 current_auc = 0.7333333333333334
User 52405 AUC after training: 0.7333333333333334
User 52405 does not improve AUC. Reverting changes.
Training on augumented user 27070 33/50 current_auc = 0.7333333333333334
User 27070 AUC after training: 0.7333333333333334
User 27070 does not improve AUC. Reverting changes.
Training on augumented user 24350 34/50 current_auc = 0.7333333333333334
User 24350 AUC after training: 0.7333333333333334
User 24350 does not improve AUC. Reverting changes.
Training on augumented user 99360 35/50 current_auc = 0.7333333333333334
User 99360 AUC after training: 0.7333333333333334
User 99360 does not improve AUC. Reverting changes.
Training on augumented user 3274 36/50 current_auc = 0.7333333333333334
User 3274 AUC after training: 0.7333333333333334
User 3274 does not improve AUC. Reverting changes.
Training on augumented user 22113 37/50 current_auc = 0.7333333333333334
User 22113 AUC after training: 0.7333333333333334
User 22113 does not improve AUC. Reverting changes.
Training on augumented user 59206 38/50 current_auc = 0.7333333333333334
User 59206 AUC after training: 0.7333333333333334
User 59206 does not improve AUC. Reverting changes.
Training on augumented user 114119 39/50 current_auc = 0.7333333333333334
User 114119 AUC after training: 0.7333333333333334
User 114119 does not improve AUC. Reverting changes.
Training on augumented user 35397 40/50 current_auc = 0.7333333333333334
User 35397 AUC after training: 0.7333333333333334
User 35397 does not improve AUC. Reverting changes.
Training on augumented user 118798 41/50 current_auc = 0.7333333333333334
User 118798 AUC after training: 0.7333333333333334
User 118798 does not improve AUC. Reverting changes.
Training on augumented user 60491 42/50 current_auc = 0.7333333333333334
User 60491 AUC after training: 0.7333333333333334
User 60491 does not improve AUC. Reverting changes.
Training on augumented user 107868 43/50 current_auc = 0.7333333333333334
User 107868 AUC after training: 0.7333333333333334
User 107868 does not improve AUC. Reverting changes.
Training on augumented user 84404 44/50 current_auc = 0.7333333333333334
User 84404 AUC after training: 0.7333333333333334
User 84404 does not improve AUC. Reverting changes.
Training on augumented user 40159 45/50 current_auc = 0.7333333333333334
User 40159 AUC after training: 0.7333333333333334
User 40159 does not improve AUC. Reverting changes.
Training on augumented user 88829 46/50 current_auc = 0.7333333333333334
User 88829 AUC after training: 0.7333333333333334
User 88829 does not improve AUC. Reverting changes.
Training on augumented user 117294 47/50 current_auc = 0.7333333333333334
User 117294 AUC after training: 0.7333333333333334
User 117294 does not improve AUC. Reverting changes.
Training on augumented user 59200 48/50 current_auc = 0.7333333333333334
User 59200 AUC after training: 0.7333333333333334
User 59200 does not improve AUC. Reverting changes.
Training on augumented user 75339 49/50 current_auc = 0.7333333333333334
User 75339 AUC after training: 0.7333333333333334
User 75339 does not improve AUC. Reverting changes.
[2024-12-02 17:45:11.417284] start test user 13838 13/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:12.129008] start test user 13838 13/568 recall augumented users by random, augumented_users = [119275, 132975, 48755, 67711, 51007, 22501, 72380, 21435, 30436, 64393, 2297, 11090, 3376, 97078, 115666, 45886, 68430, 103464, 2048, 122653, 57000, 37951, 22330, 75447, 48294, 81816, 124012, 44582, 57840, 57595, 21502, 62139, 51907, 81648, 54712, 131652, 14894, 63727, 125721, 121095, 54150, 128576, 33150, 106312, 112037, 102369, 50342, 117420, 75333, 23292]
[2024-12-02 17:45:12.180205] user = 13838 Cloud 13/568
[2024-12-02 17:45:12.198074] user = 13838 Local 13/568
[2024-12-02 17:45:12.272444] user = 13838 Local+ 13/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:15.872134] user = 13838 MPDA- 13/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 119275 0/50 current_auc = 0.0
User 119275 AUC after training: 0.0
User 119275 does not improve AUC. Reverting changes.
Training on augumented user 132975 1/50 current_auc = 0.0
User 132975 AUC after training: 0.0
User 132975 does not improve AUC. Reverting changes.
Training on augumented user 48755 2/50 current_auc = 0.0
User 48755 AUC after training: 0.0
User 48755 does not improve AUC. Reverting changes.
Training on augumented user 67711 3/50 current_auc = 0.0
User 67711 AUC after training: 0.0
User 67711 does not improve AUC. Reverting changes.
Training on augumented user 51007 4/50 current_auc = 0.0
User 51007 AUC after training: 0.0
User 51007 does not improve AUC. Reverting changes.
Training on augumented user 22501 5/50 current_auc = 0.0
User 22501 AUC after training: 0.0
User 22501 does not improve AUC. Reverting changes.
Training on augumented user 72380 6/50 current_auc = 0.0
User 72380 AUC after training: 0.0
User 72380 does not improve AUC. Reverting changes.
Training on augumented user 21435 7/50 current_auc = 0.0
User 21435 AUC after training: 0.0
User 21435 does not improve AUC. Reverting changes.
Training on augumented user 30436 8/50 current_auc = 0.0
User 30436 AUC after training: 0.0
User 30436 does not improve AUC. Reverting changes.
Training on augumented user 64393 9/50 current_auc = 0.0
User 64393 AUC after training: 0.0
User 64393 does not improve AUC. Reverting changes.
Training on augumented user 2297 10/50 current_auc = 0.0
User 2297 AUC after training: 0.0
User 2297 does not improve AUC. Reverting changes.
Training on augumented user 11090 11/50 current_auc = 0.0
User 11090 AUC after training: 0.0
User 11090 does not improve AUC. Reverting changes.
Training on augumented user 3376 12/50 current_auc = 0.0
User 3376 AUC after training: 0.0
User 3376 does not improve AUC. Reverting changes.
Training on augumented user 97078 13/50 current_auc = 0.0
User 97078 AUC after training: 0.0
User 97078 does not improve AUC. Reverting changes.
Training on augumented user 115666 14/50 current_auc = 0.0
User 115666 AUC after training: 0.0
User 115666 does not improve AUC. Reverting changes.
Training on augumented user 45886 15/50 current_auc = 0.0
User 45886 AUC after training: 0.0
User 45886 does not improve AUC. Reverting changes.
Training on augumented user 68430 16/50 current_auc = 0.0
User 68430 AUC after training: 0.0
User 68430 does not improve AUC. Reverting changes.
Training on augumented user 103464 17/50 current_auc = 0.0
User 103464 AUC after training: 0.0
User 103464 does not improve AUC. Reverting changes.
Training on augumented user 2048 18/50 current_auc = 0.0
User 2048 AUC after training: 0.0
User 2048 does not improve AUC. Reverting changes.
Training on augumented user 122653 19/50 current_auc = 0.0
User 122653 AUC after training: 0.0
User 122653 does not improve AUC. Reverting changes.
Training on augumented user 57000 20/50 current_auc = 0.0
User 57000 AUC after training: 0.0
User 57000 does not improve AUC. Reverting changes.
Training on augumented user 37951 21/50 current_auc = 0.0
User 37951 AUC after training: 0.0
User 37951 does not improve AUC. Reverting changes.
Training on augumented user 22330 22/50 current_auc = 0.0
User 22330 AUC after training: 0.0
User 22330 does not improve AUC. Reverting changes.
Training on augumented user 75447 23/50 current_auc = 0.0
User 75447 AUC after training: 0.0
User 75447 does not improve AUC. Reverting changes.
Training on augumented user 48294 24/50 current_auc = 0.0
User 48294 AUC after training: 0.0
User 48294 does not improve AUC. Reverting changes.
Training on augumented user 81816 25/50 current_auc = 0.0
User 81816 AUC after training: 0.0
User 81816 does not improve AUC. Reverting changes.
Training on augumented user 124012 26/50 current_auc = 0.0
User 124012 AUC after training: 0.0
User 124012 does not improve AUC. Reverting changes.
Training on augumented user 44582 27/50 current_auc = 0.0
User 44582 AUC after training: 0.0
User 44582 does not improve AUC. Reverting changes.
Training on augumented user 57840 28/50 current_auc = 0.0
User 57840 AUC after training: 0.0
User 57840 does not improve AUC. Reverting changes.
Training on augumented user 57595 29/50 current_auc = 0.0
User 57595 AUC after training: 0.0
User 57595 does not improve AUC. Reverting changes.
Training on augumented user 21502 30/50 current_auc = 0.0
User 21502 AUC after training: 0.0
User 21502 does not improve AUC. Reverting changes.
Training on augumented user 62139 31/50 current_auc = 0.0
User 62139 AUC after training: 0.0
User 62139 does not improve AUC. Reverting changes.
Training on augumented user 51907 32/50 current_auc = 0.0
User 51907 AUC after training: 0.0
User 51907 does not improve AUC. Reverting changes.
Training on augumented user 81648 33/50 current_auc = 0.0
User 81648 AUC after training: 0.0
User 81648 does not improve AUC. Reverting changes.
Training on augumented user 54712 34/50 current_auc = 0.0
User 54712 AUC after training: 0.0
User 54712 does not improve AUC. Reverting changes.
Training on augumented user 131652 35/50 current_auc = 0.0
User 131652 AUC after training: 0.0
User 131652 does not improve AUC. Reverting changes.
Training on augumented user 14894 36/50 current_auc = 0.0
User 14894 AUC after training: 0.0
User 14894 does not improve AUC. Reverting changes.
Training on augumented user 63727 37/50 current_auc = 0.0
User 63727 AUC after training: 0.0
User 63727 does not improve AUC. Reverting changes.
Training on augumented user 125721 38/50 current_auc = 0.0
User 125721 AUC after training: 0.0
User 125721 does not improve AUC. Reverting changes.
Training on augumented user 121095 39/50 current_auc = 0.0
User 121095 AUC after training: 0.0
User 121095 does not improve AUC. Reverting changes.
Training on augumented user 54150 40/50 current_auc = 0.0
User 54150 AUC after training: 0.0
User 54150 does not improve AUC. Reverting changes.
Training on augumented user 128576 41/50 current_auc = 0.0
User 128576 AUC after training: 0.0
User 128576 does not improve AUC. Reverting changes.
Training on augumented user 33150 42/50 current_auc = 0.0
User 33150 AUC after training: 0.0
User 33150 does not improve AUC. Reverting changes.
Training on augumented user 106312 43/50 current_auc = 0.0
User 106312 AUC after training: 0.0
User 106312 does not improve AUC. Reverting changes.
Training on augumented user 112037 44/50 current_auc = 0.0
User 112037 AUC after training: 0.0
User 112037 does not improve AUC. Reverting changes.
Training on augumented user 102369 45/50 current_auc = 0.0
User 102369 AUC after training: 0.0
User 102369 does not improve AUC. Reverting changes.
Training on augumented user 50342 46/50 current_auc = 0.0
User 50342 AUC after training: 0.0
User 50342 does not improve AUC. Reverting changes.
Training on augumented user 117420 47/50 current_auc = 0.0
User 117420 AUC after training: 0.0
User 117420 does not improve AUC. Reverting changes.
Training on augumented user 75333 48/50 current_auc = 0.0
User 75333 AUC after training: 0.0
User 75333 does not improve AUC. Reverting changes.
Training on augumented user 23292 49/50 current_auc = 0.0
User 23292 AUC after training: 0.0
User 23292 does not improve AUC. Reverting changes.
[2024-12-02 17:45:49.024777] start test user 13892 14/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:49.489469] start test user 13892 14/568 recall augumented users by random, augumented_users = [82832, 55487, 62680, 7928, 52330, 122556, 9939, 193, 22522, 116899, 36986, 14666, 92088, 79281, 110875, 25694, 48861, 30892, 48760, 86133, 14485, 130742, 11916, 111140, 11525, 57969, 64399, 61130, 57548, 117474, 2757, 91690, 91187, 55084, 15421, 102422, 97988, 7635, 50289, 133327, 114077, 74587, 109399, 137972, 12017, 52888, 12420, 16767, 103218, 78307]
[2024-12-02 17:45:49.504975] user = 13892 Cloud 14/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:45:49.511516] user = 13892 Local 14/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:45:49.646636] user = 13892 Local+ 14/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:45:51.887669] user = 13892 MPDA- 14/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 82832 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82832 AUC after training: 0.5
User 82832 does not improve AUC. Reverting changes.
Training on augumented user 55487 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55487 AUC after training: 0.5
User 55487 does not improve AUC. Reverting changes.
Training on augumented user 62680 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62680 AUC after training: 0.5
User 62680 does not improve AUC. Reverting changes.
Training on augumented user 7928 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7928 AUC after training: 0.5
User 7928 does not improve AUC. Reverting changes.
Training on augumented user 52330 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52330 AUC after training: 0.5
User 52330 does not improve AUC. Reverting changes.
Training on augumented user 122556 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122556 AUC after training: 0.5
User 122556 does not improve AUC. Reverting changes.
Training on augumented user 9939 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9939 AUC after training: 0.5
User 9939 does not improve AUC. Reverting changes.
Training on augumented user 193 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 193 AUC after training: 0.5
User 193 does not improve AUC. Reverting changes.
Training on augumented user 22522 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22522 AUC after training: 0.5
User 22522 does not improve AUC. Reverting changes.
Training on augumented user 116899 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116899 AUC after training: 0.5
User 116899 does not improve AUC. Reverting changes.
Training on augumented user 36986 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36986 AUC after training: 0.5
User 36986 does not improve AUC. Reverting changes.
Training on augumented user 14666 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14666 AUC after training: 0.5
User 14666 does not improve AUC. Reverting changes.
Training on augumented user 92088 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92088 AUC after training: 0.5
User 92088 does not improve AUC. Reverting changes.
Training on augumented user 79281 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79281 AUC after training: 0.5
User 79281 does not improve AUC. Reverting changes.
Training on augumented user 110875 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110875 AUC after training: 0.5
User 110875 does not improve AUC. Reverting changes.
Training on augumented user 25694 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25694 AUC after training: 0.5
User 25694 does not improve AUC. Reverting changes.
Training on augumented user 48861 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48861 AUC after training: 0.5
User 48861 does not improve AUC. Reverting changes.
Training on augumented user 30892 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30892 AUC after training: 0.5
User 30892 does not improve AUC. Reverting changes.
Training on augumented user 48760 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48760 AUC after training: 0.5
User 48760 does not improve AUC. Reverting changes.
Training on augumented user 86133 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86133 AUC after training: 0.5
User 86133 does not improve AUC. Reverting changes.
Training on augumented user 14485 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14485 AUC after training: 0.5
User 14485 does not improve AUC. Reverting changes.
Training on augumented user 130742 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130742 AUC after training: 0.5
User 130742 does not improve AUC. Reverting changes.
Training on augumented user 11916 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11916 AUC after training: 0.5
User 11916 does not improve AUC. Reverting changes.
Training on augumented user 111140 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111140 AUC after training: 0.5
User 111140 does not improve AUC. Reverting changes.
Training on augumented user 11525 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11525 AUC after training: 0.5
User 11525 does not improve AUC. Reverting changes.
Training on augumented user 57969 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57969 AUC after training: 0.5
User 57969 does not improve AUC. Reverting changes.
Training on augumented user 64399 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64399 AUC after training: 0.5
User 64399 does not improve AUC. Reverting changes.
Training on augumented user 61130 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61130 AUC after training: 0.5
User 61130 does not improve AUC. Reverting changes.
Training on augumented user 57548 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57548 AUC after training: 0.5
User 57548 does not improve AUC. Reverting changes.
Training on augumented user 117474 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117474 AUC after training: 0.5
User 117474 does not improve AUC. Reverting changes.
Training on augumented user 2757 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2757 AUC after training: 0.5
User 2757 does not improve AUC. Reverting changes.
Training on augumented user 91690 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91690 AUC after training: 0.5
User 91690 does not improve AUC. Reverting changes.
Training on augumented user 91187 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91187 AUC after training: 0.5
User 91187 does not improve AUC. Reverting changes.
Training on augumented user 55084 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55084 AUC after training: 0.5
User 55084 does not improve AUC. Reverting changes.
Training on augumented user 15421 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15421 AUC after training: 0.5
User 15421 does not improve AUC. Reverting changes.
Training on augumented user 102422 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102422 AUC after training: 0.5
User 102422 does not improve AUC. Reverting changes.
Training on augumented user 97988 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97988 AUC after training: 0.5
User 97988 does not improve AUC. Reverting changes.
Training on augumented user 7635 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7635 AUC after training: 0.5
User 7635 does not improve AUC. Reverting changes.
Training on augumented user 50289 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50289 AUC after training: 0.5
User 50289 does not improve AUC. Reverting changes.
Training on augumented user 133327 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133327 AUC after training: 0.5
User 133327 does not improve AUC. Reverting changes.
Training on augumented user 114077 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114077 AUC after training: 0.5
User 114077 does not improve AUC. Reverting changes.
Training on augumented user 74587 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74587 AUC after training: 0.5
User 74587 does not improve AUC. Reverting changes.
Training on augumented user 109399 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109399 AUC after training: 0.5
User 109399 does not improve AUC. Reverting changes.
Training on augumented user 137972 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137972 AUC after training: 0.5
User 137972 does not improve AUC. Reverting changes.
Training on augumented user 12017 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12017 AUC after training: 0.5
User 12017 does not improve AUC. Reverting changes.
Training on augumented user 52888 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52888 AUC after training: 0.5
User 52888 does not improve AUC. Reverting changes.
Training on augumented user 12420 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12420 AUC after training: 0.5
User 12420 does not improve AUC. Reverting changes.
Training on augumented user 16767 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16767 AUC after training: 0.5
User 16767 does not improve AUC. Reverting changes.
Training on augumented user 103218 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103218 AUC after training: 0.5
User 103218 does not improve AUC. Reverting changes.
Training on augumented user 78307 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78307 AUC after training: 0.5
User 78307 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:46:21.924595] start test user 13899 15/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:22.309626] start test user 13899 15/568 recall augumented users by random, augumented_users = [18348, 40511, 24071, 94458, 25827, 65808, 96464, 21787, 66818, 12236, 101796, 44974, 27488, 78712, 78189, 129637, 136701, 14731, 75561, 35351, 60796, 52848, 87141, 116514, 19784, 84002, 27596, 49137, 126560, 80117, 56233, 105173, 49253, 41903, 106538, 23196, 77141, 91885, 17144, 45952, 66586, 62254, 27463, 91999, 76337, 90506, 93890, 108117, 88223, 17098]
[2024-12-02 17:46:22.326139] user = 13899 Cloud 15/568
[2024-12-02 17:46:22.349477] user = 13899 Local 15/568
[2024-12-02 17:46:22.449918] user = 13899 Local+ 15/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:25.508382] user = 13899 MPDA- 15/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5029277813923227
Training on augumented user 18348 0/50 current_auc = 0.5029277813923227
User 18348 AUC after training: 0.5029277813923227
User 18348 does not improve AUC. Reverting changes.
Training on augumented user 40511 1/50 current_auc = 0.5029277813923227
User 40511 AUC after training: 0.5058555627846455
User 40511 improves AUC. Keeping the model.
Training on augumented user 24071 2/50 current_auc = 0.5058555627846455
User 24071 AUC after training: 0.503903708523097
User 24071 does not improve AUC. Reverting changes.
Training on augumented user 94458 3/50 current_auc = 0.5058555627846455
User 94458 AUC after training: 0.5045543266102798
User 94458 does not improve AUC. Reverting changes.
Training on augumented user 25827 4/50 current_auc = 0.5058555627846455
User 25827 AUC after training: 0.5035783994795056
User 25827 does not improve AUC. Reverting changes.
Training on augumented user 65808 5/50 current_auc = 0.5058555627846455
User 65808 AUC after training: 0.5065061808718283
User 65808 improves AUC. Keeping the model.
Training on augumented user 96464 6/50 current_auc = 0.5065061808718283
User 96464 AUC after training: 0.5058555627846455
User 96464 does not improve AUC. Reverting changes.
Training on augumented user 21787 7/50 current_auc = 0.5065061808718283
User 21787 AUC after training: 0.5052049446974627
User 21787 does not improve AUC. Reverting changes.
Training on augumented user 66818 8/50 current_auc = 0.5065061808718283
User 66818 AUC after training: 0.5065061808718283
User 66818 does not improve AUC. Reverting changes.
Training on augumented user 12236 9/50 current_auc = 0.5065061808718283
User 12236 AUC after training: 0.5058555627846455
User 12236 does not improve AUC. Reverting changes.
Training on augumented user 101796 10/50 current_auc = 0.5065061808718283
User 101796 AUC after training: 0.505530253741054
User 101796 does not improve AUC. Reverting changes.
Training on augumented user 44974 11/50 current_auc = 0.5065061808718283
User 44974 AUC after training: 0.5078074170461939
User 44974 improves AUC. Keeping the model.
Training on augumented user 27488 12/50 current_auc = 0.5078074170461939
User 27488 AUC after training: 0.5065061808718282
User 27488 does not improve AUC. Reverting changes.
Training on augumented user 78712 13/50 current_auc = 0.5078074170461939
User 78712 AUC after training: 0.5071567989590111
User 78712 does not improve AUC. Reverting changes.
Training on augumented user 78189 14/50 current_auc = 0.5078074170461939
User 78189 AUC after training: 0.5058555627846455
User 78189 does not improve AUC. Reverting changes.
Training on augumented user 129637 15/50 current_auc = 0.5078074170461939
User 129637 AUC after training: 0.5074821080026025
User 129637 does not improve AUC. Reverting changes.
Training on augumented user 136701 16/50 current_auc = 0.5078074170461939
User 136701 AUC after training: 0.503903708523097
User 136701 does not improve AUC. Reverting changes.
Training on augumented user 14731 17/50 current_auc = 0.5078074170461939
User 14731 AUC after training: 0.5081327260897852
User 14731 improves AUC. Keeping the model.
Training on augumented user 75561 18/50 current_auc = 0.5081327260897852
User 75561 AUC after training: 0.5074821080026025
User 75561 does not improve AUC. Reverting changes.
Training on augumented user 35351 19/50 current_auc = 0.5081327260897852
User 35351 AUC after training: 0.5081327260897852
User 35351 does not improve AUC. Reverting changes.
Training on augumented user 60796 20/50 current_auc = 0.5081327260897852
User 60796 AUC after training: 0.5081327260897852
User 60796 does not improve AUC. Reverting changes.
Training on augumented user 52848 21/50 current_auc = 0.5081327260897852
User 52848 AUC after training: 0.5074821080026025
User 52848 does not improve AUC. Reverting changes.
Training on augumented user 87141 22/50 current_auc = 0.5081327260897852
User 87141 AUC after training: 0.5061808718282368
User 87141 does not improve AUC. Reverting changes.
Training on augumented user 116514 23/50 current_auc = 0.5081327260897852
User 116514 AUC after training: 0.5081327260897852
User 116514 does not improve AUC. Reverting changes.
Training on augumented user 19784 24/50 current_auc = 0.5081327260897852
User 19784 AUC after training: 0.5068314899154196
User 19784 does not improve AUC. Reverting changes.
Training on augumented user 84002 25/50 current_auc = 0.5081327260897852
User 84002 AUC after training: 0.5074821080026024
User 84002 does not improve AUC. Reverting changes.
Training on augumented user 27596 26/50 current_auc = 0.5081327260897852
User 27596 AUC after training: 0.5065061808718283
User 27596 does not improve AUC. Reverting changes.
Training on augumented user 49137 27/50 current_auc = 0.5081327260897852
User 49137 AUC after training: 0.5078074170461939
User 49137 does not improve AUC. Reverting changes.
Training on augumented user 126560 28/50 current_auc = 0.5081327260897852
User 126560 AUC after training: 0.5071567989590111
User 126560 does not improve AUC. Reverting changes.
Training on augumented user 80117 29/50 current_auc = 0.5081327260897852
User 80117 AUC after training: 0.5068314899154196
User 80117 does not improve AUC. Reverting changes.
Training on augumented user 56233 30/50 current_auc = 0.5081327260897852
User 56233 AUC after training: 0.5068314899154197
User 56233 does not improve AUC. Reverting changes.
Training on augumented user 105173 31/50 current_auc = 0.5081327260897852
User 105173 AUC after training: 0.5074821080026025
User 105173 does not improve AUC. Reverting changes.
Training on augumented user 49253 32/50 current_auc = 0.5081327260897852
User 49253 AUC after training: 0.5074821080026024
User 49253 does not improve AUC. Reverting changes.
Training on augumented user 41903 33/50 current_auc = 0.5081327260897852
User 41903 AUC after training: 0.5074821080026024
User 41903 does not improve AUC. Reverting changes.
Training on augumented user 106538 34/50 current_auc = 0.5081327260897852
User 106538 AUC after training: 0.5078074170461939
User 106538 does not improve AUC. Reverting changes.
Training on augumented user 23196 35/50 current_auc = 0.5081327260897852
User 23196 AUC after training: 0.5074821080026025
User 23196 does not improve AUC. Reverting changes.
Training on augumented user 77141 36/50 current_auc = 0.5081327260897852
User 77141 AUC after training: 0.5081327260897852
User 77141 does not improve AUC. Reverting changes.
Training on augumented user 91885 37/50 current_auc = 0.5081327260897852
User 91885 AUC after training: 0.5058555627846455
User 91885 does not improve AUC. Reverting changes.
Training on augumented user 17144 38/50 current_auc = 0.5081327260897852
User 17144 AUC after training: 0.5071567989590111
User 17144 does not improve AUC. Reverting changes.
Training on augumented user 45952 39/50 current_auc = 0.5081327260897852
User 45952 AUC after training: 0.5068314899154196
User 45952 does not improve AUC. Reverting changes.
Training on augumented user 66586 40/50 current_auc = 0.5081327260897852
User 66586 AUC after training: 0.5074821080026025
User 66586 does not improve AUC. Reverting changes.
Training on augumented user 62254 41/50 current_auc = 0.5081327260897852
User 62254 AUC after training: 0.5074821080026025
User 62254 does not improve AUC. Reverting changes.
Training on augumented user 27463 42/50 current_auc = 0.5081327260897852
User 27463 AUC after training: 0.5048796356538712
User 27463 does not improve AUC. Reverting changes.
Training on augumented user 91999 43/50 current_auc = 0.5081327260897852
User 91999 AUC after training: 0.5074821080026025
User 91999 does not improve AUC. Reverting changes.
Training on augumented user 76337 44/50 current_auc = 0.5081327260897852
User 76337 AUC after training: 0.5071567989590111
User 76337 does not improve AUC. Reverting changes.
Training on augumented user 90506 45/50 current_auc = 0.5081327260897852
User 90506 AUC after training: 0.5081327260897853
User 90506 improves AUC. Keeping the model.
Training on augumented user 93890 46/50 current_auc = 0.5081327260897853
User 93890 AUC after training: 0.5074821080026025
User 93890 does not improve AUC. Reverting changes.
Training on augumented user 108117 47/50 current_auc = 0.5081327260897853
User 108117 AUC after training: 0.505530253741054
User 108117 does not improve AUC. Reverting changes.
Training on augumented user 88223 48/50 current_auc = 0.5081327260897853
User 88223 AUC after training: 0.5045543266102798
User 88223 does not improve AUC. Reverting changes.
Training on augumented user 17098 49/50 current_auc = 0.5081327260897853
User 17098 AUC after training: 0.5065061808718283
User 17098 does not improve AUC. Reverting changes.
[2024-12-02 17:46:54.511442] start test user 13942 16/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:55.216160] start test user 13942 16/568 recall augumented users by random, augumented_users = [6688, 89143, 133935, 109694, 107949, 126313, 84478, 110831, 8802, 95662, 106485, 10040, 44506, 75910, 308, 59453, 102811, 63102, 5399, 1332, 67299, 43560, 105833, 122060, 86816, 93080, 83593, 61007, 43786, 105010, 47030, 74616, 81804, 86495, 97177, 114238, 73631, 120735, 35387, 103344, 76292, 5470, 124339, 59816, 126017, 73574, 134345, 28233, 115360, 65498]
[2024-12-02 17:46:55.277667] user = 13942 Cloud 16/568
[2024-12-02 17:46:55.370893] user = 13942 Local 16/568
[2024-12-02 17:46:55.568890] user = 13942 Local+ 16/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:58.335503] user = 13942 MPDA- 16/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5794738725841088
Training on augumented user 6688 0/50 current_auc = 0.5794738725841088
User 6688 AUC after training: 0.5791696492483893
User 6688 does not improve AUC. Reverting changes.
Training on augumented user 89143 1/50 current_auc = 0.5794738725841088
User 89143 AUC after training: 0.5793128131710809
User 89143 does not improve AUC. Reverting changes.
Training on augumented user 133935 2/50 current_auc = 0.5794738725841088
User 133935 AUC after training: 0.5794917680744452
User 133935 improves AUC. Keeping the model.
Training on augumented user 109694 3/50 current_auc = 0.5794917680744452
User 109694 AUC after training: 0.5798138869005012
User 109694 improves AUC. Keeping the model.
Training on augumented user 107949 4/50 current_auc = 0.5798138869005012
User 107949 AUC after training: 0.5799033643521834
User 107949 improves AUC. Keeping the model.
Training on augumented user 126313 5/50 current_auc = 0.5799033643521834
User 126313 AUC after training: 0.5796170365068003
User 126313 does not improve AUC. Reverting changes.
Training on augumented user 84478 6/50 current_auc = 0.5799033643521834
User 84478 AUC after training: 0.5797065139584825
User 84478 does not improve AUC. Reverting changes.
Training on augumented user 110831 7/50 current_auc = 0.5799033643521834
User 110831 AUC after training: 0.5796528274874733
User 110831 does not improve AUC. Reverting changes.
Training on augumented user 8802 8/50 current_auc = 0.5799033643521834
User 8802 AUC after training: 0.579563350035791
User 8802 does not improve AUC. Reverting changes.
Training on augumented user 95662 9/50 current_auc = 0.5799033643521834
User 95662 AUC after training: 0.5795991410164638
User 95662 does not improve AUC. Reverting changes.
Training on augumented user 106485 10/50 current_auc = 0.5799033643521834
User 106485 AUC after training: 0.5794380816034359
User 106485 does not improve AUC. Reverting changes.
Training on augumented user 10040 11/50 current_auc = 0.5799033643521834
User 10040 AUC after training: 0.579402290622763
User 10040 does not improve AUC. Reverting changes.
Training on augumented user 44506 12/50 current_auc = 0.5799033643521834
User 44506 AUC after training: 0.5794559770937724
User 44506 does not improve AUC. Reverting changes.
Training on augumented user 75910 13/50 current_auc = 0.5799033643521834
User 75910 AUC after training: 0.5794917680744452
User 75910 does not improve AUC. Reverting changes.
Training on augumented user 308 14/50 current_auc = 0.5799033643521834
User 308 AUC after training: 0.5795812455261274
User 308 does not improve AUC. Reverting changes.
Training on augumented user 59453 15/50 current_auc = 0.5799033643521834
User 59453 AUC after training: 0.5792054402290623
User 59453 does not improve AUC. Reverting changes.
Training on augumented user 102811 16/50 current_auc = 0.5799033643521834
User 102811 AUC after training: 0.5795812455261274
User 102811 does not improve AUC. Reverting changes.
Training on augumented user 63102 17/50 current_auc = 0.5799033643521834
User 63102 AUC after training: 0.5800107372942018
User 63102 improves AUC. Keeping the model.
Training on augumented user 5399 18/50 current_auc = 0.5800107372942018
User 5399 AUC after training: 0.5798317823908374
User 5399 does not improve AUC. Reverting changes.
Training on augumented user 1332 19/50 current_auc = 0.5800107372942018
User 1332 AUC after training: 0.5800465282748747
User 1332 improves AUC. Keeping the model.
Training on augumented user 67299 20/50 current_auc = 0.5800465282748747
User 67299 AUC after training: 0.580100214745884
User 67299 improves AUC. Keeping the model.
Training on augumented user 43560 21/50 current_auc = 0.580100214745884
User 43560 AUC after training: 0.5800465282748747
User 43560 does not improve AUC. Reverting changes.
Training on augumented user 105833 22/50 current_auc = 0.580100214745884
User 105833 AUC after training: 0.5799570508231925
User 105833 does not improve AUC. Reverting changes.
Training on augumented user 122060 23/50 current_auc = 0.580100214745884
User 122060 AUC after training: 0.5798496778811739
User 122060 does not improve AUC. Reverting changes.
Training on augumented user 86816 24/50 current_auc = 0.580100214745884
User 86816 AUC after training: 0.5802970651395848
User 86816 improves AUC. Keeping the model.
Training on augumented user 93080 25/50 current_auc = 0.5802970651395848
User 93080 AUC after training: 0.5802075876879027
User 93080 does not improve AUC. Reverting changes.
Training on augumented user 83593 26/50 current_auc = 0.5802970651395848
User 83593 AUC after training: 0.5797423049391554
User 83593 does not improve AUC. Reverting changes.
Training on augumented user 61007 27/50 current_auc = 0.5802970651395848
User 61007 AUC after training: 0.5804402290622763
User 61007 improves AUC. Keeping the model.
Training on augumented user 43786 28/50 current_auc = 0.5804402290622763
User 43786 AUC after training: 0.5799570508231925
User 43786 does not improve AUC. Reverting changes.
Training on augumented user 105010 29/50 current_auc = 0.5804402290622763
User 105010 AUC after training: 0.5801717967072298
User 105010 does not improve AUC. Reverting changes.
Training on augumented user 47030 30/50 current_auc = 0.5804402290622763
User 47030 AUC after training: 0.5806012884753041
User 47030 improves AUC. Keeping the model.
Training on augumented user 74616 31/50 current_auc = 0.5806012884753041
User 74616 AUC after training: 0.5790622763063707
User 74616 does not improve AUC. Reverting changes.
Training on augumented user 81804 32/50 current_auc = 0.5806012884753041
User 81804 AUC after training: 0.5801717967072297
User 81804 does not improve AUC. Reverting changes.
Training on augumented user 86495 33/50 current_auc = 0.5806012884753041
User 86495 AUC after training: 0.5805654974946313
User 86495 does not improve AUC. Reverting changes.
Training on augumented user 97177 34/50 current_auc = 0.5806012884753041
User 97177 AUC after training: 0.5805476020042948
User 97177 does not improve AUC. Reverting changes.
Training on augumented user 114238 35/50 current_auc = 0.5806012884753041
User 114238 AUC after training: 0.5803507516105941
User 114238 does not improve AUC. Reverting changes.
Training on augumented user 73631 36/50 current_auc = 0.5806012884753041
User 73631 AUC after training: 0.58092340730136
User 73631 improves AUC. Keeping the model.
Training on augumented user 120735 37/50 current_auc = 0.58092340730136
User 120735 AUC after training: 0.5806370794559771
User 120735 does not improve AUC. Reverting changes.
Training on augumented user 35387 38/50 current_auc = 0.58092340730136
User 35387 AUC after training: 0.5807086614173229
User 35387 does not improve AUC. Reverting changes.
Training on augumented user 103344 39/50 current_auc = 0.58092340730136
User 103344 AUC after training: 0.5812455261274159
User 103344 improves AUC. Keeping the model.
Training on augumented user 76292 40/50 current_auc = 0.5812455261274159
User 76292 AUC after training: 0.5798138869005011
User 76292 does not improve AUC. Reverting changes.
Training on augumented user 5470 41/50 current_auc = 0.5812455261274159
User 5470 AUC after training: 0.5809413027916964
User 5470 does not improve AUC. Reverting changes.
Training on augumented user 124339 42/50 current_auc = 0.5812455261274159
User 124339 AUC after training: 0.5805654974946314
User 124339 does not improve AUC. Reverting changes.
Training on augumented user 59816 43/50 current_auc = 0.5812455261274159
User 59816 AUC after training: 0.5810576234788833
User 59816 does not improve AUC. Reverting changes.
Training on augumented user 126017 44/50 current_auc = 0.5812455261274159
User 126017 AUC after training: 0.5808339298496779
User 126017 does not improve AUC. Reverting changes.
Training on augumented user 73574 45/50 current_auc = 0.5812455261274159
User 73574 AUC after training: 0.58092340730136
User 73574 does not improve AUC. Reverting changes.
Training on augumented user 134345 46/50 current_auc = 0.5812455261274159
User 134345 AUC after training: 0.5810307802433787
User 134345 does not improve AUC. Reverting changes.
Training on augumented user 28233 47/50 current_auc = 0.5812455261274159
User 28233 AUC after training: 0.5811292054402291
User 28233 does not improve AUC. Reverting changes.
Training on augumented user 115360 48/50 current_auc = 0.5812455261274159
User 115360 AUC after training: 0.5804402290622763
User 115360 does not improve AUC. Reverting changes.
Training on augumented user 65498 49/50 current_auc = 0.5812455261274159
User 65498 AUC after training: 0.5809949892627059
User 65498 does not improve AUC. Reverting changes.
[2024-12-02 17:47:32.051978] start test user 13944 17/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:32.778947] start test user 13944 17/568 recall augumented users by random, augumented_users = [53282, 61701, 68372, 34738, 123131, 17008, 39818, 61409, 45543, 69348, 38443, 87482, 19506, 46769, 16780, 74694, 40579, 7825, 137563, 89437, 128755, 70538, 6639, 98515, 17802, 63214, 59608, 110104, 15512, 547, 35533, 51445, 64084, 89389, 127521, 90627, 2787, 114459, 9115, 84437, 76964, 110917, 56957, 63450, 132672, 13302, 58540, 131357, 63546, 105081]
[2024-12-02 17:47:32.806641] user = 13944 Cloud 17/568
[2024-12-02 17:47:32.829973] user = 13944 Local 17/568
[2024-12-02 17:47:33.045363] user = 13944 Local+ 17/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:36.235955] user = 13944 MPDA- 17/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.463768115942029
Training on augumented user 53282 0/50 current_auc = 0.463768115942029
User 53282 AUC after training: 0.463768115942029
User 53282 does not improve AUC. Reverting changes.
Training on augumented user 61701 1/50 current_auc = 0.463768115942029
User 61701 AUC after training: 0.463768115942029
User 61701 does not improve AUC. Reverting changes.
Training on augumented user 68372 2/50 current_auc = 0.463768115942029
User 68372 AUC after training: 0.463768115942029
User 68372 does not improve AUC. Reverting changes.
Training on augumented user 34738 3/50 current_auc = 0.463768115942029
User 34738 AUC after training: 0.463768115942029
User 34738 does not improve AUC. Reverting changes.
Training on augumented user 123131 4/50 current_auc = 0.463768115942029
User 123131 AUC after training: 0.463768115942029
User 123131 does not improve AUC. Reverting changes.
Training on augumented user 17008 5/50 current_auc = 0.463768115942029
User 17008 AUC after training: 0.4565217391304348
User 17008 does not improve AUC. Reverting changes.
Training on augumented user 39818 6/50 current_auc = 0.463768115942029
User 39818 AUC after training: 0.463768115942029
User 39818 does not improve AUC. Reverting changes.
Training on augumented user 61409 7/50 current_auc = 0.463768115942029
User 61409 AUC after training: 0.463768115942029
User 61409 does not improve AUC. Reverting changes.
Training on augumented user 45543 8/50 current_auc = 0.463768115942029
User 45543 AUC after training: 0.463768115942029
User 45543 does not improve AUC. Reverting changes.
Training on augumented user 69348 9/50 current_auc = 0.463768115942029
User 69348 AUC after training: 0.463768115942029
User 69348 does not improve AUC. Reverting changes.
Training on augumented user 38443 10/50 current_auc = 0.463768115942029
User 38443 AUC after training: 0.4565217391304348
User 38443 does not improve AUC. Reverting changes.
Training on augumented user 87482 11/50 current_auc = 0.463768115942029
User 87482 AUC after training: 0.463768115942029
User 87482 does not improve AUC. Reverting changes.
Training on augumented user 19506 12/50 current_auc = 0.463768115942029
User 19506 AUC after training: 0.463768115942029
User 19506 does not improve AUC. Reverting changes.
Training on augumented user 46769 13/50 current_auc = 0.463768115942029
User 46769 AUC after training: 0.463768115942029
User 46769 does not improve AUC. Reverting changes.
Training on augumented user 16780 14/50 current_auc = 0.463768115942029
User 16780 AUC after training: 0.4565217391304348
User 16780 does not improve AUC. Reverting changes.
Training on augumented user 74694 15/50 current_auc = 0.463768115942029
User 74694 AUC after training: 0.463768115942029
User 74694 does not improve AUC. Reverting changes.
Training on augumented user 40579 16/50 current_auc = 0.463768115942029
User 40579 AUC after training: 0.463768115942029
User 40579 does not improve AUC. Reverting changes.
Training on augumented user 7825 17/50 current_auc = 0.463768115942029
User 7825 AUC after training: 0.463768115942029
User 7825 does not improve AUC. Reverting changes.
Training on augumented user 137563 18/50 current_auc = 0.463768115942029
User 137563 AUC after training: 0.463768115942029
User 137563 does not improve AUC. Reverting changes.
Training on augumented user 89437 19/50 current_auc = 0.463768115942029
User 89437 AUC after training: 0.463768115942029
User 89437 does not improve AUC. Reverting changes.
Training on augumented user 128755 20/50 current_auc = 0.463768115942029
User 128755 AUC after training: 0.4565217391304348
User 128755 does not improve AUC. Reverting changes.
Training on augumented user 70538 21/50 current_auc = 0.463768115942029
User 70538 AUC after training: 0.463768115942029
User 70538 does not improve AUC. Reverting changes.
Training on augumented user 6639 22/50 current_auc = 0.463768115942029
User 6639 AUC after training: 0.463768115942029
User 6639 does not improve AUC. Reverting changes.
Training on augumented user 98515 23/50 current_auc = 0.463768115942029
User 98515 AUC after training: 0.463768115942029
User 98515 does not improve AUC. Reverting changes.
Training on augumented user 17802 24/50 current_auc = 0.463768115942029
User 17802 AUC after training: 0.4565217391304348
User 17802 does not improve AUC. Reverting changes.
Training on augumented user 63214 25/50 current_auc = 0.463768115942029
User 63214 AUC after training: 0.463768115942029
User 63214 does not improve AUC. Reverting changes.
Training on augumented user 59608 26/50 current_auc = 0.463768115942029
User 59608 AUC after training: 0.463768115942029
User 59608 does not improve AUC. Reverting changes.
Training on augumented user 110104 27/50 current_auc = 0.463768115942029
User 110104 AUC after training: 0.463768115942029
User 110104 does not improve AUC. Reverting changes.
Training on augumented user 15512 28/50 current_auc = 0.463768115942029
User 15512 AUC after training: 0.463768115942029
User 15512 does not improve AUC. Reverting changes.
Training on augumented user 547 29/50 current_auc = 0.463768115942029
User 547 AUC after training: 0.463768115942029
User 547 does not improve AUC. Reverting changes.
Training on augumented user 35533 30/50 current_auc = 0.463768115942029
User 35533 AUC after training: 0.463768115942029
User 35533 does not improve AUC. Reverting changes.
Training on augumented user 51445 31/50 current_auc = 0.463768115942029
User 51445 AUC after training: 0.463768115942029
User 51445 does not improve AUC. Reverting changes.
Training on augumented user 64084 32/50 current_auc = 0.463768115942029
User 64084 AUC after training: 0.4565217391304348
User 64084 does not improve AUC. Reverting changes.
Training on augumented user 89389 33/50 current_auc = 0.463768115942029
User 89389 AUC after training: 0.463768115942029
User 89389 does not improve AUC. Reverting changes.
Training on augumented user 127521 34/50 current_auc = 0.463768115942029
User 127521 AUC after training: 0.463768115942029
User 127521 does not improve AUC. Reverting changes.
Training on augumented user 90627 35/50 current_auc = 0.463768115942029
User 90627 AUC after training: 0.4565217391304348
User 90627 does not improve AUC. Reverting changes.
Training on augumented user 2787 36/50 current_auc = 0.463768115942029
User 2787 AUC after training: 0.463768115942029
User 2787 does not improve AUC. Reverting changes.
Training on augumented user 114459 37/50 current_auc = 0.463768115942029
User 114459 AUC after training: 0.4565217391304348
User 114459 does not improve AUC. Reverting changes.
Training on augumented user 9115 38/50 current_auc = 0.463768115942029
User 9115 AUC after training: 0.463768115942029
User 9115 does not improve AUC. Reverting changes.
Training on augumented user 84437 39/50 current_auc = 0.463768115942029
User 84437 AUC after training: 0.463768115942029
User 84437 does not improve AUC. Reverting changes.
Training on augumented user 76964 40/50 current_auc = 0.463768115942029
User 76964 AUC after training: 0.463768115942029
User 76964 does not improve AUC. Reverting changes.
Training on augumented user 110917 41/50 current_auc = 0.463768115942029
User 110917 AUC after training: 0.463768115942029
User 110917 does not improve AUC. Reverting changes.
Training on augumented user 56957 42/50 current_auc = 0.463768115942029
User 56957 AUC after training: 0.463768115942029
User 56957 does not improve AUC. Reverting changes.
Training on augumented user 63450 43/50 current_auc = 0.463768115942029
User 63450 AUC after training: 0.463768115942029
User 63450 does not improve AUC. Reverting changes.
Training on augumented user 132672 44/50 current_auc = 0.463768115942029
User 132672 AUC after training: 0.463768115942029
User 132672 does not improve AUC. Reverting changes.
Training on augumented user 13302 45/50 current_auc = 0.463768115942029
User 13302 AUC after training: 0.4565217391304348
User 13302 does not improve AUC. Reverting changes.
Training on augumented user 58540 46/50 current_auc = 0.463768115942029
User 58540 AUC after training: 0.463768115942029
User 58540 does not improve AUC. Reverting changes.
Training on augumented user 131357 47/50 current_auc = 0.463768115942029
User 131357 AUC after training: 0.463768115942029
User 131357 does not improve AUC. Reverting changes.
Training on augumented user 63546 48/50 current_auc = 0.463768115942029
User 63546 AUC after training: 0.463768115942029
User 63546 does not improve AUC. Reverting changes.
Training on augumented user 105081 49/50 current_auc = 0.463768115942029
User 105081 AUC after training: 0.463768115942029
User 105081 does not improve AUC. Reverting changes.
[2024-12-02 17:48:07.557124] start test user 13952 18/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:08.075075] start test user 13952 18/568 recall augumented users by random, augumented_users = [69667, 100636, 64640, 27476, 23942, 72883, 1807, 135440, 80424, 90455, 47073, 38562, 45917, 62086, 124579, 90330, 112680, 32193, 14665, 72471, 120438, 91058, 20748, 121892, 9191, 43144, 61591, 55678, 125216, 99879, 25846, 64288, 77809, 90446, 105267, 55112, 75746, 128819, 79263, 121332, 25794, 5071, 127776, 21188, 78180, 18971, 19523, 82547, 103648, 22427]
[2024-12-02 17:48:08.092237] user = 13952 Cloud 18/568
[2024-12-02 17:48:08.107320] user = 13952 Local 18/568
[2024-12-02 17:48:08.210679] user = 13952 Local+ 18/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:11.043654] user = 13952 MPDA- 18/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6561691113028473
Training on augumented user 69667 0/50 current_auc = 0.6561691113028473
User 69667 AUC after training: 0.6557377049180328
User 69667 does not improve AUC. Reverting changes.
Training on augumented user 100636 1/50 current_auc = 0.6561691113028473
User 100636 AUC after training: 0.6566005176876618
User 100636 improves AUC. Keeping the model.
Training on augumented user 64640 2/50 current_auc = 0.6566005176876618
User 64640 AUC after training: 0.6553062985332183
User 64640 does not improve AUC. Reverting changes.
Training on augumented user 27476 3/50 current_auc = 0.6566005176876618
User 27476 AUC after training: 0.6566005176876618
User 27476 does not improve AUC. Reverting changes.
Training on augumented user 23942 4/50 current_auc = 0.6566005176876618
User 23942 AUC after training: 0.6561691113028473
User 23942 does not improve AUC. Reverting changes.
Training on augumented user 72883 5/50 current_auc = 0.6566005176876618
User 72883 AUC after training: 0.6566005176876618
User 72883 does not improve AUC. Reverting changes.
Training on augumented user 1807 6/50 current_auc = 0.6566005176876618
User 1807 AUC after training: 0.6548748921484038
User 1807 does not improve AUC. Reverting changes.
Training on augumented user 135440 7/50 current_auc = 0.6566005176876618
User 135440 AUC after training: 0.6561691113028473
User 135440 does not improve AUC. Reverting changes.
Training on augumented user 80424 8/50 current_auc = 0.6566005176876618
User 80424 AUC after training: 0.6570319240724762
User 80424 improves AUC. Keeping the model.
Training on augumented user 90455 9/50 current_auc = 0.6570319240724762
User 90455 AUC after training: 0.6557377049180327
User 90455 does not improve AUC. Reverting changes.
Training on augumented user 47073 10/50 current_auc = 0.6570319240724762
User 47073 AUC after training: 0.6574633304572908
User 47073 improves AUC. Keeping the model.
Training on augumented user 38562 11/50 current_auc = 0.6574633304572908
User 38562 AUC after training: 0.6566005176876618
User 38562 does not improve AUC. Reverting changes.
Training on augumented user 45917 12/50 current_auc = 0.6574633304572908
User 45917 AUC after training: 0.6540120793787748
User 45917 does not improve AUC. Reverting changes.
Training on augumented user 62086 13/50 current_auc = 0.6574633304572908
User 62086 AUC after training: 0.6578947368421053
User 62086 improves AUC. Keeping the model.
Training on augumented user 124579 14/50 current_auc = 0.6578947368421053
User 124579 AUC after training: 0.6587575496117343
User 124579 improves AUC. Keeping the model.
Training on augumented user 90330 15/50 current_auc = 0.6587575496117343
User 90330 AUC after training: 0.6578947368421053
User 90330 does not improve AUC. Reverting changes.
Training on augumented user 112680 16/50 current_auc = 0.6587575496117343
User 112680 AUC after training: 0.6583261432269197
User 112680 does not improve AUC. Reverting changes.
Training on augumented user 32193 17/50 current_auc = 0.6587575496117343
User 32193 AUC after training: 0.6591889559965488
User 32193 improves AUC. Keeping the model.
Training on augumented user 14665 18/50 current_auc = 0.6591889559965488
User 14665 AUC after training: 0.6570319240724763
User 14665 does not improve AUC. Reverting changes.
Training on augumented user 72471 19/50 current_auc = 0.6591889559965488
User 72471 AUC after training: 0.6591889559965488
User 72471 does not improve AUC. Reverting changes.
Training on augumented user 120438 20/50 current_auc = 0.6591889559965488
User 120438 AUC after training: 0.6583261432269198
User 120438 does not improve AUC. Reverting changes.
Training on augumented user 91058 21/50 current_auc = 0.6591889559965488
User 91058 AUC after training: 0.6604831751509923
User 91058 improves AUC. Keeping the model.
Training on augumented user 20748 22/50 current_auc = 0.6604831751509923
User 20748 AUC after training: 0.6600517687661778
User 20748 does not improve AUC. Reverting changes.
Training on augumented user 121892 23/50 current_auc = 0.6604831751509923
User 121892 AUC after training: 0.6587575496117343
User 121892 does not improve AUC. Reverting changes.
Training on augumented user 9191 24/50 current_auc = 0.6604831751509923
User 9191 AUC after training: 0.6604831751509923
User 9191 does not improve AUC. Reverting changes.
Training on augumented user 43144 25/50 current_auc = 0.6604831751509923
User 43144 AUC after training: 0.6591889559965488
User 43144 does not improve AUC. Reverting changes.
Training on augumented user 61591 26/50 current_auc = 0.6604831751509923
User 61591 AUC after training: 0.6600517687661778
User 61591 does not improve AUC. Reverting changes.
Training on augumented user 55678 27/50 current_auc = 0.6604831751509923
User 55678 AUC after training: 0.6596203623813632
User 55678 does not improve AUC. Reverting changes.
Training on augumented user 125216 28/50 current_auc = 0.6604831751509923
User 125216 AUC after training: 0.6596203623813633
User 125216 does not improve AUC. Reverting changes.
Training on augumented user 99879 29/50 current_auc = 0.6604831751509923
User 99879 AUC after training: 0.6587575496117343
User 99879 does not improve AUC. Reverting changes.
Training on augumented user 25846 30/50 current_auc = 0.6604831751509923
User 25846 AUC after training: 0.6617773943054357
User 25846 improves AUC. Keeping the model.
Training on augumented user 64288 31/50 current_auc = 0.6617773943054357
User 64288 AUC after training: 0.6591889559965488
User 64288 does not improve AUC. Reverting changes.
Training on augumented user 77809 32/50 current_auc = 0.6617773943054357
User 77809 AUC after training: 0.6591889559965487
User 77809 does not improve AUC. Reverting changes.
Training on augumented user 90446 33/50 current_auc = 0.6617773943054357
User 90446 AUC after training: 0.6609145815358067
User 90446 does not improve AUC. Reverting changes.
Training on augumented user 105267 34/50 current_auc = 0.6617773943054357
User 105267 AUC after training: 0.6604831751509922
User 105267 does not improve AUC. Reverting changes.
Training on augumented user 55112 35/50 current_auc = 0.6617773943054357
User 55112 AUC after training: 0.6591889559965488
User 55112 does not improve AUC. Reverting changes.
Training on augumented user 75746 36/50 current_auc = 0.6617773943054357
User 75746 AUC after training: 0.6600517687661777
User 75746 does not improve AUC. Reverting changes.
Training on augumented user 128819 37/50 current_auc = 0.6617773943054357
User 128819 AUC after training: 0.6613459879206213
User 128819 does not improve AUC. Reverting changes.
Training on augumented user 79263 38/50 current_auc = 0.6617773943054357
User 79263 AUC after training: 0.6596203623813632
User 79263 does not improve AUC. Reverting changes.
Training on augumented user 121332 39/50 current_auc = 0.6617773943054357
User 121332 AUC after training: 0.6604831751509922
User 121332 does not improve AUC. Reverting changes.
Training on augumented user 25794 40/50 current_auc = 0.6617773943054357
User 25794 AUC after training: 0.6600517687661778
User 25794 does not improve AUC. Reverting changes.
Training on augumented user 5071 41/50 current_auc = 0.6617773943054357
User 5071 AUC after training: 0.6596203623813632
User 5071 does not improve AUC. Reverting changes.
Training on augumented user 127776 42/50 current_auc = 0.6617773943054357
User 127776 AUC after training: 0.6583261432269197
User 127776 does not improve AUC. Reverting changes.
Training on augumented user 21188 43/50 current_auc = 0.6617773943054357
User 21188 AUC after training: 0.6604831751509922
User 21188 does not improve AUC. Reverting changes.
Training on augumented user 78180 44/50 current_auc = 0.6617773943054357
User 78180 AUC after training: 0.6600517687661778
User 78180 does not improve AUC. Reverting changes.
Training on augumented user 18971 45/50 current_auc = 0.6617773943054357
User 18971 AUC after training: 0.6587575496117343
User 18971 does not improve AUC. Reverting changes.
Training on augumented user 19523 46/50 current_auc = 0.6617773943054357
User 19523 AUC after training: 0.6604831751509922
User 19523 does not improve AUC. Reverting changes.
Training on augumented user 82547 47/50 current_auc = 0.6617773943054357
User 82547 AUC after training: 0.6600517687661778
User 82547 does not improve AUC. Reverting changes.
Training on augumented user 103648 48/50 current_auc = 0.6617773943054357
User 103648 AUC after training: 0.6587575496117343
User 103648 does not improve AUC. Reverting changes.
Training on augumented user 22427 49/50 current_auc = 0.6617773943054357
User 22427 AUC after training: 0.6574633304572908
User 22427 does not improve AUC. Reverting changes.
[2024-12-02 17:48:44.378244] start test user 13955 19/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:45.190946] start test user 13955 19/568 recall augumented users by random, augumented_users = [38303, 28850, 48667, 93389, 84034, 137105, 28856, 16177, 121832, 19162, 72683, 107663, 75884, 49404, 54334, 105610, 69423, 112803, 59591, 1119, 17200, 23175, 78321, 124251, 100715, 106358, 71796, 79800, 9054, 7726, 85175, 14472, 129719, 72027, 47965, 54995, 110209, 86916, 8711, 109759, 14177, 130052, 111705, 57849, 120621, 32643, 33074, 132232, 122627, 84494]
[2024-12-02 17:48:45.219948] user = 13955 Cloud 19/568
[2024-12-02 17:48:45.269116] user = 13955 Local 19/568
[2024-12-02 17:48:45.507819] user = 13955 Local+ 19/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:48.477141] user = 13955 MPDA- 19/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5841597009501065
Training on augumented user 38303 0/50 current_auc = 0.5841597009501065
User 38303 AUC after training: 0.5844971704480557
User 38303 improves AUC. Keeping the model.
Training on augumented user 28850 1/50 current_auc = 0.5844971704480557
User 28850 AUC after training: 0.5836924354914075
User 28850 does not improve AUC. Reverting changes.
Training on augumented user 48667 2/50 current_auc = 0.5844971704480557
User 48667 AUC after training: 0.5857432116712528
User 48667 improves AUC. Keeping the model.
Training on augumented user 93389 3/50 current_auc = 0.5857432116712528
User 93389 AUC after training: 0.5856393749026529
User 93389 does not improve AUC. Reverting changes.
Training on augumented user 84034 4/50 current_auc = 0.5857432116712528
User 84034 AUC after training: 0.584393333679456
User 84034 does not improve AUC. Reverting changes.
Training on augumented user 137105 5/50 current_auc = 0.5857432116712528
User 137105 AUC after training: 0.5868334977415502
User 137105 improves AUC. Keeping the model.
Training on augumented user 28856 6/50 current_auc = 0.5868334977415502
User 28856 AUC after training: 0.5850163542910545
User 28856 does not improve AUC. Reverting changes.
Training on augumented user 16177 7/50 current_auc = 0.5868334977415502
User 16177 AUC after training: 0.5862623955142516
User 16177 does not improve AUC. Reverting changes.
Training on augumented user 121832 8/50 current_auc = 0.5868334977415502
User 121832 AUC after training: 0.5864700690514512
User 121832 does not improve AUC. Reverting changes.
Training on augumented user 19162 9/50 current_auc = 0.5868334977415502
User 19162 AUC after training: 0.5849384767146046
User 19162 does not improve AUC. Reverting changes.
Training on augumented user 72683 10/50 current_auc = 0.5868334977415502
User 72683 AUC after training: 0.5853538237890038
User 72683 does not improve AUC. Reverting changes.
Training on augumented user 107663 11/50 current_auc = 0.5868334977415502
User 107663 AUC after training: 0.5867037017808006
User 107663 does not improve AUC. Reverting changes.
Training on augumented user 75884 12/50 current_auc = 0.5868334977415502
User 75884 AUC after training: 0.5866517833965008
User 75884 does not improve AUC. Reverting changes.
Training on augumented user 49404 13/50 current_auc = 0.5868334977415502
User 49404 AUC after training: 0.5843154561030061
User 49404 does not improve AUC. Reverting changes.
Training on augumented user 54334 14/50 current_auc = 0.5868334977415502
User 54334 AUC after training: 0.5858989668241524
User 54334 does not improve AUC. Reverting changes.
Training on augumented user 105610 15/50 current_auc = 0.5868334977415502
User 105610 AUC after training: 0.5863402730907015
User 105610 does not improve AUC. Reverting changes.
Training on augumented user 69423 16/50 current_auc = 0.5868334977415502
User 69423 AUC after training: 0.5862104771299517
User 69423 does not improve AUC. Reverting changes.
Training on augumented user 112803 17/50 current_auc = 0.5868334977415502
User 112803 AUC after training: 0.5857432116712528
User 112803 does not improve AUC. Reverting changes.
Training on augumented user 59591 18/50 current_auc = 0.5868334977415502
User 59591 AUC after training: 0.5871450080473496
User 59591 improves AUC. Keeping the model.
Training on augumented user 1119 19/50 current_auc = 0.5871450080473496
User 1119 AUC after training: 0.5847048439852551
User 1119 does not improve AUC. Reverting changes.
Training on augumented user 17200 20/50 current_auc = 0.5871450080473496
User 17200 AUC after training: 0.5866517833965008
User 17200 does not improve AUC. Reverting changes.
Training on augumented user 23175 21/50 current_auc = 0.5871450080473496
User 23175 AUC after training: 0.5858989668241524
User 23175 does not improve AUC. Reverting changes.
Training on augumented user 78321 22/50 current_auc = 0.5871450080473496
User 78321 AUC after training: 0.5860547219770521
User 78321 does not improve AUC. Reverting changes.
Training on augumented user 124251 23/50 current_auc = 0.5871450080473496
User 124251 AUC after training: 0.5870930896630496
User 124251 does not improve AUC. Reverting changes.
Training on augumented user 100715 24/50 current_auc = 0.5871450080473496
User 100715 AUC after training: 0.5867037017808006
User 100715 does not improve AUC. Reverting changes.
Training on augumented user 106358 25/50 current_auc = 0.5871450080473496
User 106358 AUC after training: 0.5858989668241525
User 106358 does not improve AUC. Reverting changes.
Training on augumented user 71796 26/50 current_auc = 0.5871450080473496
User 71796 AUC after training: 0.5857951300555527
User 71796 does not improve AUC. Reverting changes.
Training on augumented user 79800 27/50 current_auc = 0.5871450080473496
User 79800 AUC after training: 0.5856912932869529
User 79800 does not improve AUC. Reverting changes.
Training on augumented user 9054 28/50 current_auc = 0.5871450080473496
User 9054 AUC after training: 0.5860287627849021
User 9054 does not improve AUC. Reverting changes.
Training on augumented user 7726 29/50 current_auc = 0.5871450080473496
User 7726 AUC after training: 0.5861845179378018
User 7726 does not improve AUC. Reverting changes.
Training on augumented user 85175 30/50 current_auc = 0.5871450080473496
User 85175 AUC after training: 0.5833030476091584
User 85175 does not improve AUC. Reverting changes.
Training on augumented user 14472 31/50 current_auc = 0.5871450080473496
User 14472 AUC after training: 0.5863662322828515
User 14472 does not improve AUC. Reverting changes.
Training on augumented user 129719 32/50 current_auc = 0.5871450080473496
User 129719 AUC after training: 0.5870930896630497
User 129719 does not improve AUC. Reverting changes.
Training on augumented user 72027 33/50 current_auc = 0.5871450080473496
User 72027 AUC after training: 0.586054721977052
User 72027 does not improve AUC. Reverting changes.
Training on augumented user 47965 34/50 current_auc = 0.5871450080473496
User 47965 AUC after training: 0.5866777425886507
User 47965 does not improve AUC. Reverting changes.
Training on augumented user 54995 35/50 current_auc = 0.5871450080473496
User 54995 AUC after training: 0.583926068220757
User 54995 does not improve AUC. Reverting changes.
Training on augumented user 110209 36/50 current_auc = 0.5871450080473496
User 110209 AUC after training: 0.5857432116712529
User 110209 does not improve AUC. Reverting changes.
Training on augumented user 86916 37/50 current_auc = 0.5871450080473496
User 86916 AUC after training: 0.5874565183531488
User 86916 improves AUC. Keeping the model.
Training on augumented user 8711 38/50 current_auc = 0.5874565183531488
User 8711 AUC after training: 0.5873007632002492
User 8711 does not improve AUC. Reverting changes.
Training on augumented user 109759 39/50 current_auc = 0.5874565183531488
User 109759 AUC after training: 0.5864700690514512
User 109759 does not improve AUC. Reverting changes.
Training on augumented user 14177 40/50 current_auc = 0.5874565183531488
User 14177 AUC after training: 0.5867815793572504
User 14177 does not improve AUC. Reverting changes.
Training on augumented user 130052 41/50 current_auc = 0.5874565183531488
User 130052 AUC after training: 0.5860547219770521
User 130052 does not improve AUC. Reverting changes.
Training on augumented user 111705 42/50 current_auc = 0.5874565183531488
User 111705 AUC after training: 0.5867815793572504
User 111705 does not improve AUC. Reverting changes.
Training on augumented user 57849 43/50 current_auc = 0.5874565183531488
User 57849 AUC after training: 0.5851721094439541
User 57849 does not improve AUC. Reverting changes.
Training on augumented user 120621 44/50 current_auc = 0.5874565183531488
User 120621 AUC after training: 0.5858989668241524
User 120621 does not improve AUC. Reverting changes.
Training on augumented user 32643 45/50 current_auc = 0.5874565183531488
User 32643 AUC after training: 0.5869373345101501
User 32643 does not improve AUC. Reverting changes.
Training on augumented user 33074 46/50 current_auc = 0.5874565183531488
User 33074 AUC after training: 0.5838222314521573
User 33074 does not improve AUC. Reverting changes.
Training on augumented user 132232 47/50 current_auc = 0.5874565183531488
User 132232 AUC after training: 0.5821089247702612
User 132232 does not improve AUC. Reverting changes.
Training on augumented user 122627 48/50 current_auc = 0.5874565183531488
User 122627 AUC after training: 0.5860028035927523
User 122627 does not improve AUC. Reverting changes.
Training on augumented user 84494 49/50 current_auc = 0.5874565183531488
User 84494 AUC after training: 0.58698925289445
User 84494 does not improve AUC. Reverting changes.
[2024-12-02 17:49:18.944868] start test user 13964 20/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:19.547127] start test user 13964 20/568 recall augumented users by random, augumented_users = [7627, 32799, 46092, 63657, 100970, 84727, 48834, 74962, 97219, 96154, 81757, 96329, 59043, 115353, 122755, 123164, 6714, 58157, 121526, 2806, 110759, 53678, 52465, 1806, 8298, 11687, 11176, 121420, 81089, 30613, 34799, 14395, 35393, 112994, 123051, 49707, 69889, 47926, 16319, 71615, 58529, 57236, 129358, 107753, 112980, 69778, 121240, 44723, 74852, 101010]
[2024-12-02 17:49:19.565809] user = 13964 Cloud 20/568
[2024-12-02 17:49:19.578159] user = 13964 Local 20/568
[2024-12-02 17:49:19.875412] user = 13964 Local+ 20/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:22.324823] user = 13964 MPDA- 20/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.68046875
Training on augumented user 7627 0/50 current_auc = 0.68046875
User 7627 AUC after training: 0.68203125
User 7627 improves AUC. Keeping the model.
Training on augumented user 32799 1/50 current_auc = 0.68203125
User 32799 AUC after training: 0.68203125
User 32799 does not improve AUC. Reverting changes.
Training on augumented user 46092 2/50 current_auc = 0.68203125
User 46092 AUC after training: 0.68046875
User 46092 does not improve AUC. Reverting changes.
Training on augumented user 63657 3/50 current_auc = 0.68203125
User 63657 AUC after training: 0.68203125
User 63657 does not improve AUC. Reverting changes.
Training on augumented user 100970 4/50 current_auc = 0.68203125
User 100970 AUC after training: 0.68046875
User 100970 does not improve AUC. Reverting changes.
Training on augumented user 84727 5/50 current_auc = 0.68203125
User 84727 AUC after training: 0.68203125
User 84727 does not improve AUC. Reverting changes.
Training on augumented user 48834 6/50 current_auc = 0.68203125
User 48834 AUC after training: 0.67890625
User 48834 does not improve AUC. Reverting changes.
Training on augumented user 74962 7/50 current_auc = 0.68203125
User 74962 AUC after training: 0.68828125
User 74962 improves AUC. Keeping the model.
Training on augumented user 97219 8/50 current_auc = 0.68828125
User 97219 AUC after training: 0.68671875
User 97219 does not improve AUC. Reverting changes.
Training on augumented user 96154 9/50 current_auc = 0.68828125
User 96154 AUC after training: 0.6804687500000001
User 96154 does not improve AUC. Reverting changes.
Training on augumented user 81757 10/50 current_auc = 0.68828125
User 81757 AUC after training: 0.6898437500000001
User 81757 improves AUC. Keeping the model.
Training on augumented user 96329 11/50 current_auc = 0.6898437500000001
User 96329 AUC after training: 0.6898437500000001
User 96329 does not improve AUC. Reverting changes.
Training on augumented user 59043 12/50 current_auc = 0.6898437500000001
User 59043 AUC after training: 0.6953125
User 59043 improves AUC. Keeping the model.
Training on augumented user 115353 13/50 current_auc = 0.6953125
User 115353 AUC after training: 0.69375
User 115353 does not improve AUC. Reverting changes.
Training on augumented user 122755 14/50 current_auc = 0.6953125
User 122755 AUC after training: 0.6929687499999999
User 122755 does not improve AUC. Reverting changes.
Training on augumented user 123164 15/50 current_auc = 0.6953125
User 123164 AUC after training: 0.6929687499999999
User 123164 does not improve AUC. Reverting changes.
Training on augumented user 6714 16/50 current_auc = 0.6953125
User 6714 AUC after training: 0.6953125
User 6714 does not improve AUC. Reverting changes.
Training on augumented user 58157 17/50 current_auc = 0.6953125
User 58157 AUC after training: 0.69765625
User 58157 improves AUC. Keeping the model.
Training on augumented user 121526 18/50 current_auc = 0.69765625
User 121526 AUC after training: 0.6929687499999999
User 121526 does not improve AUC. Reverting changes.
Training on augumented user 2806 19/50 current_auc = 0.69765625
User 2806 AUC after training: 0.69453125
User 2806 does not improve AUC. Reverting changes.
Training on augumented user 110759 20/50 current_auc = 0.69765625
User 110759 AUC after training: 0.69609375
User 110759 does not improve AUC. Reverting changes.
Training on augumented user 53678 21/50 current_auc = 0.69765625
User 53678 AUC after training: 0.69765625
User 53678 does not improve AUC. Reverting changes.
Training on augumented user 52465 22/50 current_auc = 0.69765625
User 52465 AUC after training: 0.69765625
User 52465 does not improve AUC. Reverting changes.
Training on augumented user 1806 23/50 current_auc = 0.69765625
User 1806 AUC after training: 0.69609375
User 1806 does not improve AUC. Reverting changes.
Training on augumented user 8298 24/50 current_auc = 0.69765625
User 8298 AUC after training: 0.69765625
User 8298 does not improve AUC. Reverting changes.
Training on augumented user 11687 25/50 current_auc = 0.69765625
User 11687 AUC after training: 0.69453125
User 11687 does not improve AUC. Reverting changes.
Training on augumented user 11176 26/50 current_auc = 0.69765625
User 11176 AUC after training: 0.69453125
User 11176 does not improve AUC. Reverting changes.
Training on augumented user 121420 27/50 current_auc = 0.69765625
User 121420 AUC after training: 0.69609375
User 121420 does not improve AUC. Reverting changes.
Training on augumented user 81089 28/50 current_auc = 0.69765625
User 81089 AUC after training: 0.69453125
User 81089 does not improve AUC. Reverting changes.
Training on augumented user 30613 29/50 current_auc = 0.69765625
User 30613 AUC after training: 0.69609375
User 30613 does not improve AUC. Reverting changes.
Training on augumented user 34799 30/50 current_auc = 0.69765625
User 34799 AUC after training: 0.6929687499999999
User 34799 does not improve AUC. Reverting changes.
Training on augumented user 14395 31/50 current_auc = 0.69765625
User 14395 AUC after training: 0.69765625
User 14395 does not improve AUC. Reverting changes.
Training on augumented user 35393 32/50 current_auc = 0.69765625
User 35393 AUC after training: 0.6929687499999999
User 35393 does not improve AUC. Reverting changes.
Training on augumented user 112994 33/50 current_auc = 0.69765625
User 112994 AUC after training: 0.69765625
User 112994 does not improve AUC. Reverting changes.
Training on augumented user 123051 34/50 current_auc = 0.69765625
User 123051 AUC after training: 0.6953125
User 123051 does not improve AUC. Reverting changes.
Training on augumented user 49707 35/50 current_auc = 0.69765625
User 49707 AUC after training: 0.69921875
User 49707 improves AUC. Keeping the model.
Training on augumented user 69889 36/50 current_auc = 0.69921875
User 69889 AUC after training: 0.6984375
User 69889 does not improve AUC. Reverting changes.
Training on augumented user 47926 37/50 current_auc = 0.69921875
User 47926 AUC after training: 0.69921875
User 47926 does not improve AUC. Reverting changes.
Training on augumented user 16319 38/50 current_auc = 0.69921875
User 16319 AUC after training: 0.69921875
User 16319 does not improve AUC. Reverting changes.
Training on augumented user 71615 39/50 current_auc = 0.69921875
User 71615 AUC after training: 0.69921875
User 71615 does not improve AUC. Reverting changes.
Training on augumented user 58529 40/50 current_auc = 0.69921875
User 58529 AUC after training: 0.6984375
User 58529 does not improve AUC. Reverting changes.
Training on augumented user 57236 41/50 current_auc = 0.69921875
User 57236 AUC after training: 0.69921875
User 57236 does not improve AUC. Reverting changes.
Training on augumented user 129358 42/50 current_auc = 0.69921875
User 129358 AUC after training: 0.6953125
User 129358 does not improve AUC. Reverting changes.
Training on augumented user 107753 43/50 current_auc = 0.69921875
User 107753 AUC after training: 0.6984375
User 107753 does not improve AUC. Reverting changes.
Training on augumented user 112980 44/50 current_auc = 0.69921875
User 112980 AUC after training: 0.69375
User 112980 does not improve AUC. Reverting changes.
Training on augumented user 69778 45/50 current_auc = 0.69921875
User 69778 AUC after training: 0.6984375
User 69778 does not improve AUC. Reverting changes.
Training on augumented user 121240 46/50 current_auc = 0.69921875
User 121240 AUC after training: 0.6984375
User 121240 does not improve AUC. Reverting changes.
Training on augumented user 44723 47/50 current_auc = 0.69921875
User 44723 AUC after training: 0.69609375
User 44723 does not improve AUC. Reverting changes.
Training on augumented user 74852 48/50 current_auc = 0.69921875
User 74852 AUC after training: 0.69921875
User 74852 does not improve AUC. Reverting changes.
Training on augumented user 101010 49/50 current_auc = 0.69921875
User 101010 AUC after training: 0.69609375
User 101010 does not improve AUC. Reverting changes.
[2024-12-02 17:49:51.453872] start test user 13983 21/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:52.127908] start test user 13983 21/568 recall augumented users by random, augumented_users = [74194, 116106, 111502, 112939, 122870, 68130, 115762, 73057, 107891, 43818, 102983, 97523, 114767, 25863, 86811, 10352, 56915, 17258, 37498, 33638, 89424, 43761, 69824, 107043, 96013, 80955, 123916, 24622, 48940, 14788, 112487, 9168, 136921, 56816, 95144, 45673, 106933, 45850, 60383, 44317, 103732, 15909, 6869, 124804, 64701, 13536, 99237, 39319, 54689, 95851]
[2024-12-02 17:49:52.144356] user = 13983 Cloud 21/568
[2024-12-02 17:49:52.185827] user = 13983 Local 21/568
[2024-12-02 17:49:52.233609] user = 13983 Local+ 21/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:54.576131] user = 13983 MPDA- 21/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7159432048681542
Training on augumented user 74194 0/50 current_auc = 0.7159432048681542
User 74194 AUC after training: 0.7159837728194726
User 74194 improves AUC. Keeping the model.
Training on augumented user 116106 1/50 current_auc = 0.7159837728194726
User 116106 AUC after training: 0.7157809330628803
User 116106 does not improve AUC. Reverting changes.
Training on augumented user 111502 2/50 current_auc = 0.7159837728194726
User 111502 AUC after training: 0.7157809330628803
User 111502 does not improve AUC. Reverting changes.
Training on augumented user 112939 3/50 current_auc = 0.7159837728194726
User 112939 AUC after training: 0.715496957403651
User 112939 does not improve AUC. Reverting changes.
Training on augumented user 122870 4/50 current_auc = 0.7159837728194726
User 122870 AUC after training: 0.716024340770791
User 122870 improves AUC. Keeping the model.
Training on augumented user 68130 5/50 current_auc = 0.716024340770791
User 68130 AUC after training: 0.7162271805273833
User 68130 improves AUC. Keeping the model.
Training on augumented user 115762 6/50 current_auc = 0.7162271805273833
User 115762 AUC after training: 0.7161460446247464
User 115762 does not improve AUC. Reverting changes.
Training on augumented user 73057 7/50 current_auc = 0.7162271805273833
User 73057 AUC after training: 0.7157809330628803
User 73057 does not improve AUC. Reverting changes.
Training on augumented user 107891 8/50 current_auc = 0.7162271805273833
User 107891 AUC after training: 0.7165111561866127
User 107891 improves AUC. Keeping the model.
Training on augumented user 43818 9/50 current_auc = 0.7165111561866127
User 43818 AUC after training: 0.716551724137931
User 43818 improves AUC. Keeping the model.
Training on augumented user 102983 10/50 current_auc = 0.716551724137931
User 102983 AUC after training: 0.7164300202839756
User 102983 does not improve AUC. Reverting changes.
Training on augumented user 97523 11/50 current_auc = 0.716551724137931
User 97523 AUC after training: 0.7165111561866127
User 97523 does not improve AUC. Reverting changes.
Training on augumented user 114767 12/50 current_auc = 0.716551724137931
User 114767 AUC after training: 0.7158620689655173
User 114767 does not improve AUC. Reverting changes.
Training on augumented user 25863 13/50 current_auc = 0.716551724137931
User 25863 AUC after training: 0.7164705882352941
User 25863 does not improve AUC. Reverting changes.
Training on augumented user 86811 14/50 current_auc = 0.716551724137931
User 86811 AUC after training: 0.7150912778904664
User 86811 does not improve AUC. Reverting changes.
Training on augumented user 10352 15/50 current_auc = 0.716551724137931
User 10352 AUC after training: 0.7162677484787018
User 10352 does not improve AUC. Reverting changes.
Training on augumented user 56915 16/50 current_auc = 0.716551724137931
User 56915 AUC after training: 0.7159432048681541
User 56915 does not improve AUC. Reverting changes.
Training on augumented user 17258 17/50 current_auc = 0.716551724137931
User 17258 AUC after training: 0.7165111561866125
User 17258 does not improve AUC. Reverting changes.
Training on augumented user 37498 18/50 current_auc = 0.716551724137931
User 37498 AUC after training: 0.7163083164300202
User 37498 does not improve AUC. Reverting changes.
Training on augumented user 33638 19/50 current_auc = 0.716551724137931
User 33638 AUC after training: 0.7162271805273833
User 33638 does not improve AUC. Reverting changes.
Training on augumented user 89424 20/50 current_auc = 0.716551724137931
User 89424 AUC after training: 0.7163083164300202
User 89424 does not improve AUC. Reverting changes.
Training on augumented user 43761 21/50 current_auc = 0.716551724137931
User 43761 AUC after training: 0.7159432048681541
User 43761 does not improve AUC. Reverting changes.
Training on augumented user 69824 22/50 current_auc = 0.716551724137931
User 69824 AUC after training: 0.7164300202839755
User 69824 does not improve AUC. Reverting changes.
Training on augumented user 107043 23/50 current_auc = 0.716551724137931
User 107043 AUC after training: 0.7162271805273833
User 107043 does not improve AUC. Reverting changes.
Training on augumented user 96013 24/50 current_auc = 0.716551724137931
User 96013 AUC after training: 0.7158215010141987
User 96013 does not improve AUC. Reverting changes.
Training on augumented user 80955 25/50 current_auc = 0.716551724137931
User 80955 AUC after training: 0.7162271805273834
User 80955 does not improve AUC. Reverting changes.
Training on augumented user 123916 26/50 current_auc = 0.716551724137931
User 123916 AUC after training: 0.716105476673428
User 123916 does not improve AUC. Reverting changes.
Training on augumented user 24622 27/50 current_auc = 0.716551724137931
User 24622 AUC after training: 0.7159026369168358
User 24622 does not improve AUC. Reverting changes.
Training on augumented user 48940 28/50 current_auc = 0.716551724137931
User 48940 AUC after training: 0.7162271805273834
User 48940 does not improve AUC. Reverting changes.
Training on augumented user 14788 29/50 current_auc = 0.716551724137931
User 14788 AUC after training: 0.7162271805273833
User 14788 does not improve AUC. Reverting changes.
Training on augumented user 112487 30/50 current_auc = 0.716551724137931
User 112487 AUC after training: 0.7161866125760649
User 112487 does not improve AUC. Reverting changes.
Training on augumented user 9168 31/50 current_auc = 0.716551724137931
User 9168 AUC after training: 0.7162271805273834
User 9168 does not improve AUC. Reverting changes.
Training on augumented user 136921 32/50 current_auc = 0.716551724137931
User 136921 AUC after training: 0.7162271805273833
User 136921 does not improve AUC. Reverting changes.
Training on augumented user 56816 33/50 current_auc = 0.716551724137931
User 56816 AUC after training: 0.716186612576065
User 56816 does not improve AUC. Reverting changes.
Training on augumented user 95144 34/50 current_auc = 0.716551724137931
User 95144 AUC after training: 0.7163488843813386
User 95144 does not improve AUC. Reverting changes.
Training on augumented user 45673 35/50 current_auc = 0.716551724137931
User 45673 AUC after training: 0.7163894523326572
User 45673 does not improve AUC. Reverting changes.
Training on augumented user 106933 36/50 current_auc = 0.716551724137931
User 106933 AUC after training: 0.7162271805273834
User 106933 does not improve AUC. Reverting changes.
Training on augumented user 45850 37/50 current_auc = 0.716551724137931
User 45850 AUC after training: 0.7163083164300202
User 45850 does not improve AUC. Reverting changes.
Training on augumented user 60383 38/50 current_auc = 0.716551724137931
User 60383 AUC after training: 0.7161866125760649
User 60383 does not improve AUC. Reverting changes.
Training on augumented user 44317 39/50 current_auc = 0.716551724137931
User 44317 AUC after training: 0.7163894523326572
User 44317 does not improve AUC. Reverting changes.
Training on augumented user 103732 40/50 current_auc = 0.716551724137931
User 103732 AUC after training: 0.7158620689655172
User 103732 does not improve AUC. Reverting changes.
Training on augumented user 15909 41/50 current_auc = 0.716551724137931
User 15909 AUC after training: 0.7164300202839756
User 15909 does not improve AUC. Reverting changes.
Training on augumented user 6869 42/50 current_auc = 0.716551724137931
User 6869 AUC after training: 0.7161460446247464
User 6869 does not improve AUC. Reverting changes.
Training on augumented user 124804 43/50 current_auc = 0.716551724137931
User 124804 AUC after training: 0.7161460446247464
User 124804 does not improve AUC. Reverting changes.
Training on augumented user 64701 44/50 current_auc = 0.716551724137931
User 64701 AUC after training: 0.7159837728194726
User 64701 does not improve AUC. Reverting changes.
Training on augumented user 13536 45/50 current_auc = 0.716551724137931
User 13536 AUC after training: 0.716186612576065
User 13536 does not improve AUC. Reverting changes.
Training on augumented user 99237 46/50 current_auc = 0.716551724137931
User 99237 AUC after training: 0.7163083164300202
User 99237 does not improve AUC. Reverting changes.
Training on augumented user 39319 47/50 current_auc = 0.716551724137931
User 39319 AUC after training: 0.7163083164300202
User 39319 does not improve AUC. Reverting changes.
Training on augumented user 54689 48/50 current_auc = 0.716551724137931
User 54689 AUC after training: 0.7163894523326572
User 54689 does not improve AUC. Reverting changes.
Training on augumented user 95851 49/50 current_auc = 0.716551724137931
User 95851 AUC after training: 0.7161054766734279
User 95851 does not improve AUC. Reverting changes.
[2024-12-02 17:50:29.589452] start test user 14071 22/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:30.066031] start test user 14071 22/568 recall augumented users by random, augumented_users = [86459, 41860, 10053, 132736, 16035, 94947, 87982, 122010, 71810, 127310, 105869, 19634, 124732, 45933, 15837, 126977, 12546, 43877, 119422, 41776, 124353, 62404, 24761, 72403, 56005, 8530, 79862, 74577, 78158, 31743, 68381, 59134, 92064, 7800, 120730, 50208, 31657, 66119, 7214, 62859, 122769, 67711, 108964, 80118, 127978, 49007, 50005, 46832, 14524, 13941]
[2024-12-02 17:50:30.082865] user = 14071 Cloud 22/568
[2024-12-02 17:50:30.110426] user = 14071 Local 22/568
[2024-12-02 17:50:30.243052] user = 14071 Local+ 22/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:32.782858] user = 14071 MPDA- 22/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7724887556221889
Training on augumented user 86459 0/50 current_auc = 0.7724887556221889
User 86459 AUC after training: 0.772863568215892
User 86459 improves AUC. Keeping the model.
Training on augumented user 41860 1/50 current_auc = 0.772863568215892
User 41860 AUC after training: 0.7724887556221889
User 41860 does not improve AUC. Reverting changes.
Training on augumented user 10053 2/50 current_auc = 0.772863568215892
User 10053 AUC after training: 0.7721139430284858
User 10053 does not improve AUC. Reverting changes.
Training on augumented user 132736 3/50 current_auc = 0.772863568215892
User 132736 AUC after training: 0.772863568215892
User 132736 does not improve AUC. Reverting changes.
Training on augumented user 16035 4/50 current_auc = 0.772863568215892
User 16035 AUC after training: 0.7717391304347826
User 16035 does not improve AUC. Reverting changes.
Training on augumented user 94947 5/50 current_auc = 0.772863568215892
User 94947 AUC after training: 0.7709895052473763
User 94947 does not improve AUC. Reverting changes.
Training on augumented user 87982 6/50 current_auc = 0.772863568215892
User 87982 AUC after training: 0.7724887556221889
User 87982 does not improve AUC. Reverting changes.
Training on augumented user 122010 7/50 current_auc = 0.772863568215892
User 122010 AUC after training: 0.772863568215892
User 122010 does not improve AUC. Reverting changes.
Training on augumented user 71810 8/50 current_auc = 0.772863568215892
User 71810 AUC after training: 0.772863568215892
User 71810 does not improve AUC. Reverting changes.
Training on augumented user 127310 9/50 current_auc = 0.772863568215892
User 127310 AUC after training: 0.7724887556221889
User 127310 does not improve AUC. Reverting changes.
Training on augumented user 105869 10/50 current_auc = 0.772863568215892
User 105869 AUC after training: 0.7724887556221889
User 105869 does not improve AUC. Reverting changes.
Training on augumented user 19634 11/50 current_auc = 0.772863568215892
User 19634 AUC after training: 0.7717391304347826
User 19634 does not improve AUC. Reverting changes.
Training on augumented user 124732 12/50 current_auc = 0.772863568215892
User 124732 AUC after training: 0.7717391304347827
User 124732 does not improve AUC. Reverting changes.
Training on augumented user 45933 13/50 current_auc = 0.772863568215892
User 45933 AUC after training: 0.772863568215892
User 45933 does not improve AUC. Reverting changes.
Training on augumented user 15837 14/50 current_auc = 0.772863568215892
User 15837 AUC after training: 0.7732383808095952
User 15837 improves AUC. Keeping the model.
Training on augumented user 126977 15/50 current_auc = 0.7732383808095952
User 126977 AUC after training: 0.7721139430284858
User 126977 does not improve AUC. Reverting changes.
Training on augumented user 12546 16/50 current_auc = 0.7732383808095952
User 12546 AUC after training: 0.7728635682158921
User 12546 does not improve AUC. Reverting changes.
Training on augumented user 43877 17/50 current_auc = 0.7732383808095952
User 43877 AUC after training: 0.7732383808095953
User 43877 improves AUC. Keeping the model.
Training on augumented user 119422 18/50 current_auc = 0.7732383808095953
User 119422 AUC after training: 0.7721139430284858
User 119422 does not improve AUC. Reverting changes.
Training on augumented user 41776 19/50 current_auc = 0.7732383808095953
User 41776 AUC after training: 0.7724887556221889
User 41776 does not improve AUC. Reverting changes.
Training on augumented user 124353 20/50 current_auc = 0.7732383808095953
User 124353 AUC after training: 0.772863568215892
User 124353 does not improve AUC. Reverting changes.
Training on augumented user 62404 21/50 current_auc = 0.7732383808095953
User 62404 AUC after training: 0.7721139430284858
User 62404 does not improve AUC. Reverting changes.
Training on augumented user 24761 22/50 current_auc = 0.7732383808095953
User 24761 AUC after training: 0.772863568215892
User 24761 does not improve AUC. Reverting changes.
Training on augumented user 72403 23/50 current_auc = 0.7732383808095953
User 72403 AUC after training: 0.7721139430284858
User 72403 does not improve AUC. Reverting changes.
Training on augumented user 56005 24/50 current_auc = 0.7732383808095953
User 56005 AUC after training: 0.7739880059970015
User 56005 improves AUC. Keeping the model.
Training on augumented user 8530 25/50 current_auc = 0.7739880059970015
User 8530 AUC after training: 0.7724887556221889
User 8530 does not improve AUC. Reverting changes.
Training on augumented user 79862 26/50 current_auc = 0.7739880059970015
User 79862 AUC after training: 0.7739880059970015
User 79862 does not improve AUC. Reverting changes.
Training on augumented user 74577 27/50 current_auc = 0.7739880059970015
User 74577 AUC after training: 0.7736131934032984
User 74577 does not improve AUC. Reverting changes.
Training on augumented user 78158 28/50 current_auc = 0.7739880059970015
User 78158 AUC after training: 0.7736131934032984
User 78158 does not improve AUC. Reverting changes.
Training on augumented user 31743 29/50 current_auc = 0.7739880059970015
User 31743 AUC after training: 0.7743628185907047
User 31743 improves AUC. Keeping the model.
Training on augumented user 68381 30/50 current_auc = 0.7743628185907047
User 68381 AUC after training: 0.7736131934032984
User 68381 does not improve AUC. Reverting changes.
Training on augumented user 59134 31/50 current_auc = 0.7743628185907047
User 59134 AUC after training: 0.7732383808095953
User 59134 does not improve AUC. Reverting changes.
Training on augumented user 92064 32/50 current_auc = 0.7743628185907047
User 92064 AUC after training: 0.7739880059970015
User 92064 does not improve AUC. Reverting changes.
Training on augumented user 7800 33/50 current_auc = 0.7743628185907047
User 7800 AUC after training: 0.7732383808095952
User 7800 does not improve AUC. Reverting changes.
Training on augumented user 120730 34/50 current_auc = 0.7743628185907047
User 120730 AUC after training: 0.772863568215892
User 120730 does not improve AUC. Reverting changes.
Training on augumented user 50208 35/50 current_auc = 0.7743628185907047
User 50208 AUC after training: 0.7736131934032984
User 50208 does not improve AUC. Reverting changes.
Training on augumented user 31657 36/50 current_auc = 0.7743628185907047
User 31657 AUC after training: 0.7739880059970015
User 31657 does not improve AUC. Reverting changes.
Training on augumented user 66119 37/50 current_auc = 0.7743628185907047
User 66119 AUC after training: 0.7736131934032984
User 66119 does not improve AUC. Reverting changes.
Training on augumented user 7214 38/50 current_auc = 0.7743628185907047
User 7214 AUC after training: 0.7736131934032984
User 7214 does not improve AUC. Reverting changes.
Training on augumented user 62859 39/50 current_auc = 0.7743628185907047
User 62859 AUC after training: 0.7732383808095952
User 62859 does not improve AUC. Reverting changes.
Training on augumented user 122769 40/50 current_auc = 0.7743628185907047
User 122769 AUC after training: 0.7728635682158921
User 122769 does not improve AUC. Reverting changes.
Training on augumented user 67711 41/50 current_auc = 0.7743628185907047
User 67711 AUC after training: 0.7739880059970015
User 67711 does not improve AUC. Reverting changes.
Training on augumented user 108964 42/50 current_auc = 0.7743628185907047
User 108964 AUC after training: 0.7736131934032984
User 108964 does not improve AUC. Reverting changes.
Training on augumented user 80118 43/50 current_auc = 0.7743628185907047
User 80118 AUC after training: 0.7728635682158921
User 80118 does not improve AUC. Reverting changes.
Training on augumented user 127978 44/50 current_auc = 0.7743628185907047
User 127978 AUC after training: 0.7739880059970015
User 127978 does not improve AUC. Reverting changes.
Training on augumented user 49007 45/50 current_auc = 0.7743628185907047
User 49007 AUC after training: 0.7747376311844079
User 49007 improves AUC. Keeping the model.
Training on augumented user 50005 46/50 current_auc = 0.7747376311844079
User 50005 AUC after training: 0.7743628185907047
User 50005 does not improve AUC. Reverting changes.
Training on augumented user 46832 47/50 current_auc = 0.7747376311844079
User 46832 AUC after training: 0.7743628185907047
User 46832 does not improve AUC. Reverting changes.
Training on augumented user 14524 48/50 current_auc = 0.7747376311844079
User 14524 AUC after training: 0.7747376311844079
User 14524 does not improve AUC. Reverting changes.
Training on augumented user 13941 49/50 current_auc = 0.7747376311844079
User 13941 AUC after training: 0.7743628185907047
User 13941 does not improve AUC. Reverting changes.
[2024-12-02 17:51:08.429157] start test user 14088 23/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:09.190204] start test user 14088 23/568 recall augumented users by random, augumented_users = [81394, 84709, 106093, 62340, 28114, 72053, 87352, 138104, 136553, 119863, 61160, 87008, 124538, 20797, 101491, 60423, 115143, 29829, 121490, 52744, 115233, 79689, 35570, 26041, 86170, 114969, 8869, 60764, 9398, 31197, 127640, 32023, 69936, 49656, 16485, 126765, 132109, 108221, 49681, 7556, 126173, 100705, 128255, 120, 100539, 106245, 130690, 73053, 94232, 57851]
[2024-12-02 17:51:09.225056] user = 14088 Cloud 23/568
[2024-12-02 17:51:09.239595] user = 14088 Local 23/568
[2024-12-02 17:51:09.311636] user = 14088 Local+ 23/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:11.403771] user = 14088 MPDA- 23/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.661698956780924
Training on augumented user 81394 0/50 current_auc = 0.661698956780924
User 81394 AUC after training: 0.6636860407352211
User 81394 improves AUC. Keeping the model.
Training on augumented user 84709 1/50 current_auc = 0.6636860407352211
User 84709 AUC after training: 0.6636860407352212
User 84709 improves AUC. Keeping the model.
Training on augumented user 106093 2/50 current_auc = 0.6636860407352212
User 106093 AUC after training: 0.6626924987580726
User 106093 does not improve AUC. Reverting changes.
Training on augumented user 62340 3/50 current_auc = 0.6636860407352212
User 62340 AUC after training: 0.6592151018380528
User 62340 does not improve AUC. Reverting changes.
Training on augumented user 28114 4/50 current_auc = 0.6636860407352212
User 28114 AUC after training: 0.6621957277694983
User 28114 does not improve AUC. Reverting changes.
Training on augumented user 72053 5/50 current_auc = 0.6636860407352212
User 72053 AUC after training: 0.6636860407352211
User 72053 does not improve AUC. Reverting changes.
Training on augumented user 87352 6/50 current_auc = 0.6636860407352212
User 87352 AUC after training: 0.6626924987580726
User 87352 does not improve AUC. Reverting changes.
Training on augumented user 138104 7/50 current_auc = 0.6636860407352212
User 138104 AUC after training: 0.6612021857923497
User 138104 does not improve AUC. Reverting changes.
Training on augumented user 136553 8/50 current_auc = 0.6636860407352212
User 136553 AUC after training: 0.6592151018380528
User 136553 does not improve AUC. Reverting changes.
Training on augumented user 119863 9/50 current_auc = 0.6636860407352212
User 119863 AUC after training: 0.6607054148037754
User 119863 does not improve AUC. Reverting changes.
Training on augumented user 61160 10/50 current_auc = 0.6636860407352212
User 61160 AUC after training: 0.6621957277694982
User 61160 does not improve AUC. Reverting changes.
Training on augumented user 87008 11/50 current_auc = 0.6636860407352212
User 87008 AUC after training: 0.6602086438152012
User 87008 does not improve AUC. Reverting changes.
Training on augumented user 124538 12/50 current_auc = 0.6636860407352212
User 124538 AUC after training: 0.6626924987580725
User 124538 does not improve AUC. Reverting changes.
Training on augumented user 20797 13/50 current_auc = 0.6636860407352212
User 20797 AUC after training: 0.6631892697466468
User 20797 does not improve AUC. Reverting changes.
Training on augumented user 101491 14/50 current_auc = 0.6636860407352212
User 101491 AUC after training: 0.6626924987580726
User 101491 does not improve AUC. Reverting changes.
Training on augumented user 60423 15/50 current_auc = 0.6636860407352212
User 60423 AUC after training: 0.6612021857923497
User 60423 does not improve AUC. Reverting changes.
Training on augumented user 115143 16/50 current_auc = 0.6636860407352212
User 115143 AUC after training: 0.6621957277694983
User 115143 does not improve AUC. Reverting changes.
Training on augumented user 29829 17/50 current_auc = 0.6636860407352212
User 29829 AUC after training: 0.6626924987580726
User 29829 does not improve AUC. Reverting changes.
Training on augumented user 121490 18/50 current_auc = 0.6636860407352212
User 121490 AUC after training: 0.6621957277694983
User 121490 does not improve AUC. Reverting changes.
Training on augumented user 52744 19/50 current_auc = 0.6636860407352212
User 52744 AUC after training: 0.6612021857923497
User 52744 does not improve AUC. Reverting changes.
Training on augumented user 115233 20/50 current_auc = 0.6636860407352212
User 115233 AUC after training: 0.6631892697466468
User 115233 does not improve AUC. Reverting changes.
Training on augumented user 79689 21/50 current_auc = 0.6636860407352212
User 79689 AUC after training: 0.6612021857923498
User 79689 does not improve AUC. Reverting changes.
Training on augumented user 35570 22/50 current_auc = 0.6636860407352212
User 35570 AUC after training: 0.6631892697466469
User 35570 does not improve AUC. Reverting changes.
Training on augumented user 26041 23/50 current_auc = 0.6636860407352212
User 26041 AUC after training: 0.6582215598609041
User 26041 does not improve AUC. Reverting changes.
Training on augumented user 86170 24/50 current_auc = 0.6636860407352212
User 86170 AUC after training: 0.6646795827123696
User 86170 improves AUC. Keeping the model.
Training on augumented user 114969 25/50 current_auc = 0.6646795827123696
User 114969 AUC after training: 0.6651763537009439
User 114969 improves AUC. Keeping the model.
Training on augumented user 8869 26/50 current_auc = 0.6651763537009439
User 8869 AUC after training: 0.6661698956780924
User 8869 improves AUC. Keeping the model.
Training on augumented user 60764 27/50 current_auc = 0.6661698956780924
User 60764 AUC after training: 0.6646795827123697
User 60764 does not improve AUC. Reverting changes.
Training on augumented user 9398 28/50 current_auc = 0.6661698956780924
User 9398 AUC after training: 0.6666666666666667
User 9398 improves AUC. Keeping the model.
Training on augumented user 31197 29/50 current_auc = 0.6666666666666667
User 31197 AUC after training: 0.6636860407352211
User 31197 does not improve AUC. Reverting changes.
Training on augumented user 127640 30/50 current_auc = 0.6666666666666667
User 127640 AUC after training: 0.6666666666666667
User 127640 does not improve AUC. Reverting changes.
Training on augumented user 32023 31/50 current_auc = 0.6666666666666667
User 32023 AUC after training: 0.668902136115251
User 32023 improves AUC. Keeping the model.
Training on augumented user 69936 32/50 current_auc = 0.668902136115251
User 69936 AUC after training: 0.668902136115251
User 69936 does not improve AUC. Reverting changes.
Training on augumented user 49656 33/50 current_auc = 0.668902136115251
User 49656 AUC after training: 0.6674118231495281
User 49656 does not improve AUC. Reverting changes.
Training on augumented user 16485 34/50 current_auc = 0.668902136115251
User 16485 AUC after training: 0.6669150521609537
User 16485 does not improve AUC. Reverting changes.
Training on augumented user 126765 35/50 current_auc = 0.668902136115251
User 126765 AUC after training: 0.6666666666666667
User 126765 does not improve AUC. Reverting changes.
Training on augumented user 132109 36/50 current_auc = 0.668902136115251
User 132109 AUC after training: 0.6698956780923995
User 132109 improves AUC. Keeping the model.
Training on augumented user 108221 37/50 current_auc = 0.6698956780923995
User 108221 AUC after training: 0.6684053651266766
User 108221 does not improve AUC. Reverting changes.
Training on augumented user 49681 38/50 current_auc = 0.6698956780923995
User 49681 AUC after training: 0.6693989071038252
User 49681 does not improve AUC. Reverting changes.
Training on augumented user 7556 39/50 current_auc = 0.6698956780923995
User 7556 AUC after training: 0.667163437655241
User 7556 does not improve AUC. Reverting changes.
Training on augumented user 126173 40/50 current_auc = 0.6698956780923995
User 126173 AUC after training: 0.6684053651266766
User 126173 does not improve AUC. Reverting changes.
Training on augumented user 100705 41/50 current_auc = 0.6698956780923995
User 100705 AUC after training: 0.6684053651266766
User 100705 does not improve AUC. Reverting changes.
Training on augumented user 128255 42/50 current_auc = 0.6698956780923995
User 128255 AUC after training: 0.6698956780923995
User 128255 does not improve AUC. Reverting changes.
Training on augumented user 120 43/50 current_auc = 0.6698956780923995
User 120 AUC after training: 0.6693989071038251
User 120 does not improve AUC. Reverting changes.
Training on augumented user 100539 44/50 current_auc = 0.6698956780923995
User 100539 AUC after training: 0.6679085941381023
User 100539 does not improve AUC. Reverting changes.
Training on augumented user 106245 45/50 current_auc = 0.6698956780923995
User 106245 AUC after training: 0.668902136115251
User 106245 does not improve AUC. Reverting changes.
Training on augumented user 130690 46/50 current_auc = 0.6698956780923995
User 130690 AUC after training: 0.6661698956780924
User 130690 does not improve AUC. Reverting changes.
Training on augumented user 73053 47/50 current_auc = 0.6698956780923995
User 73053 AUC after training: 0.6666666666666667
User 73053 does not improve AUC. Reverting changes.
Training on augumented user 94232 48/50 current_auc = 0.6698956780923995
User 94232 AUC after training: 0.669150521609538
User 94232 does not improve AUC. Reverting changes.
Training on augumented user 57851 49/50 current_auc = 0.6698956780923995
User 57851 AUC after training: 0.6684053651266767
User 57851 does not improve AUC. Reverting changes.
[2024-12-02 17:51:39.258854] start test user 14141 24/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:39.836665] start test user 14141 24/568 recall augumented users by random, augumented_users = [103249, 49719, 40693, 64911, 111958, 110697, 96204, 39150, 85531, 99590, 55021, 4490, 78716, 16415, 120031, 92356, 29791, 77858, 123382, 49313, 124277, 37423, 105361, 94311, 20910, 39809, 17086, 66973, 69751, 37145, 128230, 91171, 45596, 860, 127346, 100250, 58827, 62356, 30760, 33728, 73800, 59990, 86193, 79239, 44, 108275, 78785, 85615, 8338, 84108]
[2024-12-02 17:51:39.853633] user = 14141 Cloud 24/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:51:39.866220] user = 14141 Local 24/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:51:39.969001] user = 14141 Local+ 24/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:51:42.579136] user = 14141 MPDA- 24/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 103249 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103249 AUC after training: 0.5
User 103249 does not improve AUC. Reverting changes.
Training on augumented user 49719 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49719 AUC after training: 0.5
User 49719 does not improve AUC. Reverting changes.
Training on augumented user 40693 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40693 AUC after training: 0.5
User 40693 does not improve AUC. Reverting changes.
Training on augumented user 64911 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64911 AUC after training: 0.5
User 64911 does not improve AUC. Reverting changes.
Training on augumented user 111958 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111958 AUC after training: 0.5
User 111958 does not improve AUC. Reverting changes.
Training on augumented user 110697 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110697 AUC after training: 0.5
User 110697 does not improve AUC. Reverting changes.
Training on augumented user 96204 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96204 AUC after training: 0.5
User 96204 does not improve AUC. Reverting changes.
Training on augumented user 39150 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39150 AUC after training: 0.5
User 39150 does not improve AUC. Reverting changes.
Training on augumented user 85531 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85531 AUC after training: 0.5
User 85531 does not improve AUC. Reverting changes.
Training on augumented user 99590 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99590 AUC after training: 0.5
User 99590 does not improve AUC. Reverting changes.
Training on augumented user 55021 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55021 AUC after training: 0.5
User 55021 does not improve AUC. Reverting changes.
Training on augumented user 4490 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4490 AUC after training: 0.5
User 4490 does not improve AUC. Reverting changes.
Training on augumented user 78716 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78716 AUC after training: 0.5
User 78716 does not improve AUC. Reverting changes.
Training on augumented user 16415 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16415 AUC after training: 0.5
User 16415 does not improve AUC. Reverting changes.
Training on augumented user 120031 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120031 AUC after training: 0.5
User 120031 does not improve AUC. Reverting changes.
Training on augumented user 92356 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92356 AUC after training: 0.5
User 92356 does not improve AUC. Reverting changes.
Training on augumented user 29791 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29791 AUC after training: 0.5
User 29791 does not improve AUC. Reverting changes.
Training on augumented user 77858 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77858 AUC after training: 0.5
User 77858 does not improve AUC. Reverting changes.
Training on augumented user 123382 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123382 AUC after training: 0.5
User 123382 does not improve AUC. Reverting changes.
Training on augumented user 49313 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49313 AUC after training: 0.5
User 49313 does not improve AUC. Reverting changes.
Training on augumented user 124277 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124277 AUC after training: 0.5
User 124277 does not improve AUC. Reverting changes.
Training on augumented user 37423 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37423 AUC after training: 0.5
User 37423 does not improve AUC. Reverting changes.
Training on augumented user 105361 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105361 AUC after training: 0.5
User 105361 does not improve AUC. Reverting changes.
Training on augumented user 94311 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94311 AUC after training: 0.5
User 94311 does not improve AUC. Reverting changes.
Training on augumented user 20910 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20910 AUC after training: 0.5
User 20910 does not improve AUC. Reverting changes.
Training on augumented user 39809 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39809 AUC after training: 0.5
User 39809 does not improve AUC. Reverting changes.
Training on augumented user 17086 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17086 AUC after training: 0.5
User 17086 does not improve AUC. Reverting changes.
Training on augumented user 66973 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66973 AUC after training: 0.5
User 66973 does not improve AUC. Reverting changes.
Training on augumented user 69751 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69751 AUC after training: 0.5
User 69751 does not improve AUC. Reverting changes.
Training on augumented user 37145 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37145 AUC after training: 0.5
User 37145 does not improve AUC. Reverting changes.
Training on augumented user 128230 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128230 AUC after training: 0.5
User 128230 does not improve AUC. Reverting changes.
Training on augumented user 91171 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91171 AUC after training: 0.5
User 91171 does not improve AUC. Reverting changes.
Training on augumented user 45596 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45596 AUC after training: 0.5
User 45596 does not improve AUC. Reverting changes.
Training on augumented user 860 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 860 AUC after training: 0.5
User 860 does not improve AUC. Reverting changes.
Training on augumented user 127346 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127346 AUC after training: 0.5
User 127346 does not improve AUC. Reverting changes.
Training on augumented user 100250 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100250 AUC after training: 0.5
User 100250 does not improve AUC. Reverting changes.
Training on augumented user 58827 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58827 AUC after training: 0.5
User 58827 does not improve AUC. Reverting changes.
Training on augumented user 62356 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62356 AUC after training: 0.5
User 62356 does not improve AUC. Reverting changes.
Training on augumented user 30760 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30760 AUC after training: 0.5
User 30760 does not improve AUC. Reverting changes.
Training on augumented user 33728 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33728 AUC after training: 0.5
User 33728 does not improve AUC. Reverting changes.
Training on augumented user 73800 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73800 AUC after training: 0.5
User 73800 does not improve AUC. Reverting changes.
Training on augumented user 59990 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59990 AUC after training: 0.5
User 59990 does not improve AUC. Reverting changes.
Training on augumented user 86193 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86193 AUC after training: 0.5
User 86193 does not improve AUC. Reverting changes.
Training on augumented user 79239 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79239 AUC after training: 0.5
User 79239 does not improve AUC. Reverting changes.
Training on augumented user 44 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44 AUC after training: 0.5
User 44 does not improve AUC. Reverting changes.
Training on augumented user 108275 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108275 AUC after training: 0.5
User 108275 does not improve AUC. Reverting changes.
Training on augumented user 78785 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78785 AUC after training: 0.5
User 78785 does not improve AUC. Reverting changes.
Training on augumented user 85615 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85615 AUC after training: 0.5
User 85615 does not improve AUC. Reverting changes.
Training on augumented user 8338 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8338 AUC after training: 0.5
User 8338 does not improve AUC. Reverting changes.
Training on augumented user 84108 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84108 AUC after training: 0.5
User 84108 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:52:12.034634] start test user 14166 25/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:12.526040] start test user 14166 25/568 recall augumented users by random, augumented_users = [45477, 445, 33159, 74242, 80229, 98619, 52431, 62616, 36020, 368, 133156, 60088, 47979, 102500, 82942, 113358, 71055, 49096, 113833, 95055, 44827, 58625, 24093, 94809, 14835, 45303, 13693, 131851, 48524, 125292, 70396, 70333, 11116, 52837, 108413, 54635, 28239, 62396, 121810, 108906, 85986, 50424, 108083, 59042, 49806, 92497, 67568, 2804, 41736, 5937]
[2024-12-02 17:52:12.548293] user = 14166 Cloud 25/568
[2024-12-02 17:52:12.558236] user = 14166 Local 25/568
[2024-12-02 17:52:12.596756] user = 14166 Local+ 25/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:15.216262] user = 14166 MPDA- 25/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9
Training on augumented user 45477 0/50 current_auc = 0.9
User 45477 AUC after training: 0.9
User 45477 does not improve AUC. Reverting changes.
Training on augumented user 445 1/50 current_auc = 0.9
User 445 AUC after training: 0.9
User 445 does not improve AUC. Reverting changes.
Training on augumented user 33159 2/50 current_auc = 0.9
User 33159 AUC after training: 0.9
User 33159 does not improve AUC. Reverting changes.
Training on augumented user 74242 3/50 current_auc = 0.9
User 74242 AUC after training: 0.9
User 74242 does not improve AUC. Reverting changes.
Training on augumented user 80229 4/50 current_auc = 0.9
User 80229 AUC after training: 0.9
User 80229 does not improve AUC. Reverting changes.
Training on augumented user 98619 5/50 current_auc = 0.9
User 98619 AUC after training: 0.9
User 98619 does not improve AUC. Reverting changes.
Training on augumented user 52431 6/50 current_auc = 0.9
User 52431 AUC after training: 0.9
User 52431 does not improve AUC. Reverting changes.
Training on augumented user 62616 7/50 current_auc = 0.9
User 62616 AUC after training: 0.9
User 62616 does not improve AUC. Reverting changes.
Training on augumented user 36020 8/50 current_auc = 0.9
User 36020 AUC after training: 0.9
User 36020 does not improve AUC. Reverting changes.
Training on augumented user 368 9/50 current_auc = 0.9
User 368 AUC after training: 0.9
User 368 does not improve AUC. Reverting changes.
Training on augumented user 133156 10/50 current_auc = 0.9
User 133156 AUC after training: 0.9
User 133156 does not improve AUC. Reverting changes.
Training on augumented user 60088 11/50 current_auc = 0.9
User 60088 AUC after training: 0.9
User 60088 does not improve AUC. Reverting changes.
Training on augumented user 47979 12/50 current_auc = 0.9
User 47979 AUC after training: 0.9
User 47979 does not improve AUC. Reverting changes.
Training on augumented user 102500 13/50 current_auc = 0.9
User 102500 AUC after training: 0.9
User 102500 does not improve AUC. Reverting changes.
Training on augumented user 82942 14/50 current_auc = 0.9
User 82942 AUC after training: 0.9
User 82942 does not improve AUC. Reverting changes.
Training on augumented user 113358 15/50 current_auc = 0.9
User 113358 AUC after training: 0.9
User 113358 does not improve AUC. Reverting changes.
Training on augumented user 71055 16/50 current_auc = 0.9
User 71055 AUC after training: 0.9
User 71055 does not improve AUC. Reverting changes.
Training on augumented user 49096 17/50 current_auc = 0.9
User 49096 AUC after training: 0.9
User 49096 does not improve AUC. Reverting changes.
Training on augumented user 113833 18/50 current_auc = 0.9
User 113833 AUC after training: 0.9
User 113833 does not improve AUC. Reverting changes.
Training on augumented user 95055 19/50 current_auc = 0.9
User 95055 AUC after training: 0.9
User 95055 does not improve AUC. Reverting changes.
Training on augumented user 44827 20/50 current_auc = 0.9
User 44827 AUC after training: 0.9
User 44827 does not improve AUC. Reverting changes.
Training on augumented user 58625 21/50 current_auc = 0.9
User 58625 AUC after training: 0.9
User 58625 does not improve AUC. Reverting changes.
Training on augumented user 24093 22/50 current_auc = 0.9
User 24093 AUC after training: 0.9
User 24093 does not improve AUC. Reverting changes.
Training on augumented user 94809 23/50 current_auc = 0.9
User 94809 AUC after training: 0.9
User 94809 does not improve AUC. Reverting changes.
Training on augumented user 14835 24/50 current_auc = 0.9
User 14835 AUC after training: 0.9
User 14835 does not improve AUC. Reverting changes.
Training on augumented user 45303 25/50 current_auc = 0.9
User 45303 AUC after training: 0.9
User 45303 does not improve AUC. Reverting changes.
Training on augumented user 13693 26/50 current_auc = 0.9
User 13693 AUC after training: 0.9
User 13693 does not improve AUC. Reverting changes.
Training on augumented user 131851 27/50 current_auc = 0.9
User 131851 AUC after training: 0.9
User 131851 does not improve AUC. Reverting changes.
Training on augumented user 48524 28/50 current_auc = 0.9
User 48524 AUC after training: 0.9
User 48524 does not improve AUC. Reverting changes.
Training on augumented user 125292 29/50 current_auc = 0.9
User 125292 AUC after training: 0.9
User 125292 does not improve AUC. Reverting changes.
Training on augumented user 70396 30/50 current_auc = 0.9
User 70396 AUC after training: 0.9
User 70396 does not improve AUC. Reverting changes.
Training on augumented user 70333 31/50 current_auc = 0.9
User 70333 AUC after training: 0.9
User 70333 does not improve AUC. Reverting changes.
Training on augumented user 11116 32/50 current_auc = 0.9
User 11116 AUC after training: 0.9
User 11116 does not improve AUC. Reverting changes.
Training on augumented user 52837 33/50 current_auc = 0.9
User 52837 AUC after training: 0.9
User 52837 does not improve AUC. Reverting changes.
Training on augumented user 108413 34/50 current_auc = 0.9
User 108413 AUC after training: 0.9
User 108413 does not improve AUC. Reverting changes.
Training on augumented user 54635 35/50 current_auc = 0.9
User 54635 AUC after training: 0.9
User 54635 does not improve AUC. Reverting changes.
Training on augumented user 28239 36/50 current_auc = 0.9
User 28239 AUC after training: 0.9
User 28239 does not improve AUC. Reverting changes.
Training on augumented user 62396 37/50 current_auc = 0.9
User 62396 AUC after training: 0.9
User 62396 does not improve AUC. Reverting changes.
Training on augumented user 121810 38/50 current_auc = 0.9
User 121810 AUC after training: 0.9
User 121810 does not improve AUC. Reverting changes.
Training on augumented user 108906 39/50 current_auc = 0.9
User 108906 AUC after training: 0.9
User 108906 does not improve AUC. Reverting changes.
Training on augumented user 85986 40/50 current_auc = 0.9
User 85986 AUC after training: 0.9
User 85986 does not improve AUC. Reverting changes.
Training on augumented user 50424 41/50 current_auc = 0.9
User 50424 AUC after training: 0.9
User 50424 does not improve AUC. Reverting changes.
Training on augumented user 108083 42/50 current_auc = 0.9
User 108083 AUC after training: 0.9
User 108083 does not improve AUC. Reverting changes.
Training on augumented user 59042 43/50 current_auc = 0.9
User 59042 AUC after training: 0.9
User 59042 does not improve AUC. Reverting changes.
Training on augumented user 49806 44/50 current_auc = 0.9
User 49806 AUC after training: 0.9
User 49806 does not improve AUC. Reverting changes.
Training on augumented user 92497 45/50 current_auc = 0.9
User 92497 AUC after training: 0.9
User 92497 does not improve AUC. Reverting changes.
Training on augumented user 67568 46/50 current_auc = 0.9
User 67568 AUC after training: 0.9
User 67568 does not improve AUC. Reverting changes.
Training on augumented user 2804 47/50 current_auc = 0.9
User 2804 AUC after training: 0.9
User 2804 does not improve AUC. Reverting changes.
Training on augumented user 41736 48/50 current_auc = 0.9
User 41736 AUC after training: 0.9
User 41736 does not improve AUC. Reverting changes.
Training on augumented user 5937 49/50 current_auc = 0.9
User 5937 AUC after training: 0.9
User 5937 does not improve AUC. Reverting changes.
[2024-12-02 17:52:44.674167] start test user 14217 26/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:45.516369] start test user 14217 26/568 recall augumented users by random, augumented_users = [28679, 15545, 41624, 89138, 75549, 8315, 100346, 92261, 53492, 122741, 32385, 131400, 138478, 86599, 32128, 30698, 63136, 53995, 28634, 63610, 61155, 136944, 71596, 21077, 60443, 111981, 99593, 126233, 82764, 114794, 86243, 10446, 91059, 81031, 32795, 29493, 116480, 111299, 89269, 54754, 90731, 43223, 69248, 10572, 136891, 74880, 42933, 116737, 100802, 2048]
[2024-12-02 17:52:45.531688] user = 14217 Cloud 26/568
[2024-12-02 17:52:45.542448] user = 14217 Local 26/568
[2024-12-02 17:52:45.573241] user = 14217 Local+ 26/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:48.717902] user = 14217 MPDA- 26/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8603174603174604
Training on augumented user 28679 0/50 current_auc = 0.8603174603174604
User 28679 AUC after training: 0.8603174603174604
User 28679 does not improve AUC. Reverting changes.
Training on augumented user 15545 1/50 current_auc = 0.8603174603174604
User 15545 AUC after training: 0.8603174603174604
User 15545 does not improve AUC. Reverting changes.
Training on augumented user 41624 2/50 current_auc = 0.8603174603174604
User 41624 AUC after training: 0.8603174603174604
User 41624 does not improve AUC. Reverting changes.
Training on augumented user 89138 3/50 current_auc = 0.8603174603174604
User 89138 AUC after training: 0.8603174603174604
User 89138 does not improve AUC. Reverting changes.
Training on augumented user 75549 4/50 current_auc = 0.8603174603174604
User 75549 AUC after training: 0.8603174603174604
User 75549 does not improve AUC. Reverting changes.
Training on augumented user 8315 5/50 current_auc = 0.8603174603174604
User 8315 AUC after training: 0.8603174603174604
User 8315 does not improve AUC. Reverting changes.
Training on augumented user 100346 6/50 current_auc = 0.8603174603174604
User 100346 AUC after training: 0.8603174603174604
User 100346 does not improve AUC. Reverting changes.
Training on augumented user 92261 7/50 current_auc = 0.8603174603174604
User 92261 AUC after training: 0.8603174603174604
User 92261 does not improve AUC. Reverting changes.
Training on augumented user 53492 8/50 current_auc = 0.8603174603174604
User 53492 AUC after training: 0.8603174603174604
User 53492 does not improve AUC. Reverting changes.
Training on augumented user 122741 9/50 current_auc = 0.8603174603174604
User 122741 AUC after training: 0.8603174603174604
User 122741 does not improve AUC. Reverting changes.
Training on augumented user 32385 10/50 current_auc = 0.8603174603174604
User 32385 AUC after training: 0.8603174603174604
User 32385 does not improve AUC. Reverting changes.
Training on augumented user 131400 11/50 current_auc = 0.8603174603174604
User 131400 AUC after training: 0.8603174603174604
User 131400 does not improve AUC. Reverting changes.
Training on augumented user 138478 12/50 current_auc = 0.8603174603174604
User 138478 AUC after training: 0.8603174603174604
User 138478 does not improve AUC. Reverting changes.
Training on augumented user 86599 13/50 current_auc = 0.8603174603174604
User 86599 AUC after training: 0.8603174603174604
User 86599 does not improve AUC. Reverting changes.
Training on augumented user 32128 14/50 current_auc = 0.8603174603174604
User 32128 AUC after training: 0.8603174603174604
User 32128 does not improve AUC. Reverting changes.
Training on augumented user 30698 15/50 current_auc = 0.8603174603174604
User 30698 AUC after training: 0.8603174603174604
User 30698 does not improve AUC. Reverting changes.
Training on augumented user 63136 16/50 current_auc = 0.8603174603174604
User 63136 AUC after training: 0.8603174603174604
User 63136 does not improve AUC. Reverting changes.
Training on augumented user 53995 17/50 current_auc = 0.8603174603174604
User 53995 AUC after training: 0.8603174603174604
User 53995 does not improve AUC. Reverting changes.
Training on augumented user 28634 18/50 current_auc = 0.8603174603174604
User 28634 AUC after training: 0.8603174603174604
User 28634 does not improve AUC. Reverting changes.
Training on augumented user 63610 19/50 current_auc = 0.8603174603174604
User 63610 AUC after training: 0.8603174603174604
User 63610 does not improve AUC. Reverting changes.
Training on augumented user 61155 20/50 current_auc = 0.8603174603174604
User 61155 AUC after training: 0.8603174603174604
User 61155 does not improve AUC. Reverting changes.
Training on augumented user 136944 21/50 current_auc = 0.8603174603174604
User 136944 AUC after training: 0.8603174603174604
User 136944 does not improve AUC. Reverting changes.
Training on augumented user 71596 22/50 current_auc = 0.8603174603174604
User 71596 AUC after training: 0.8603174603174604
User 71596 does not improve AUC. Reverting changes.
Training on augumented user 21077 23/50 current_auc = 0.8603174603174604
User 21077 AUC after training: 0.8603174603174604
User 21077 does not improve AUC. Reverting changes.
Training on augumented user 60443 24/50 current_auc = 0.8603174603174604
User 60443 AUC after training: 0.8603174603174604
User 60443 does not improve AUC. Reverting changes.
Training on augumented user 111981 25/50 current_auc = 0.8603174603174604
User 111981 AUC after training: 0.8603174603174604
User 111981 does not improve AUC. Reverting changes.
Training on augumented user 99593 26/50 current_auc = 0.8603174603174604
User 99593 AUC after training: 0.8603174603174604
User 99593 does not improve AUC. Reverting changes.
Training on augumented user 126233 27/50 current_auc = 0.8603174603174604
User 126233 AUC after training: 0.8603174603174604
User 126233 does not improve AUC. Reverting changes.
Training on augumented user 82764 28/50 current_auc = 0.8603174603174604
User 82764 AUC after training: 0.8634920634920635
User 82764 improves AUC. Keeping the model.
Training on augumented user 114794 29/50 current_auc = 0.8634920634920635
User 114794 AUC after training: 0.8634920634920635
User 114794 does not improve AUC. Reverting changes.
Training on augumented user 86243 30/50 current_auc = 0.8634920634920635
User 86243 AUC after training: 0.8634920634920635
User 86243 does not improve AUC. Reverting changes.
Training on augumented user 10446 31/50 current_auc = 0.8634920634920635
User 10446 AUC after training: 0.8634920634920635
User 10446 does not improve AUC. Reverting changes.
Training on augumented user 91059 32/50 current_auc = 0.8634920634920635
User 91059 AUC after training: 0.8634920634920635
User 91059 does not improve AUC. Reverting changes.
Training on augumented user 81031 33/50 current_auc = 0.8634920634920635
User 81031 AUC after training: 0.8634920634920635
User 81031 does not improve AUC. Reverting changes.
Training on augumented user 32795 34/50 current_auc = 0.8634920634920635
User 32795 AUC after training: 0.8634920634920635
User 32795 does not improve AUC. Reverting changes.
Training on augumented user 29493 35/50 current_auc = 0.8634920634920635
User 29493 AUC after training: 0.8634920634920635
User 29493 does not improve AUC. Reverting changes.
Training on augumented user 116480 36/50 current_auc = 0.8634920634920635
User 116480 AUC after training: 0.8634920634920635
User 116480 does not improve AUC. Reverting changes.
Training on augumented user 111299 37/50 current_auc = 0.8634920634920635
User 111299 AUC after training: 0.8634920634920635
User 111299 does not improve AUC. Reverting changes.
Training on augumented user 89269 38/50 current_auc = 0.8634920634920635
User 89269 AUC after training: 0.8634920634920635
User 89269 does not improve AUC. Reverting changes.
Training on augumented user 54754 39/50 current_auc = 0.8634920634920635
User 54754 AUC after training: 0.8634920634920635
User 54754 does not improve AUC. Reverting changes.
Training on augumented user 90731 40/50 current_auc = 0.8634920634920635
User 90731 AUC after training: 0.8634920634920635
User 90731 does not improve AUC. Reverting changes.
Training on augumented user 43223 41/50 current_auc = 0.8634920634920635
User 43223 AUC after training: 0.8634920634920635
User 43223 does not improve AUC. Reverting changes.
Training on augumented user 69248 42/50 current_auc = 0.8634920634920635
User 69248 AUC after training: 0.8634920634920635
User 69248 does not improve AUC. Reverting changes.
Training on augumented user 10572 43/50 current_auc = 0.8634920634920635
User 10572 AUC after training: 0.8634920634920635
User 10572 does not improve AUC. Reverting changes.
Training on augumented user 136891 44/50 current_auc = 0.8634920634920635
User 136891 AUC after training: 0.8634920634920635
User 136891 does not improve AUC. Reverting changes.
Training on augumented user 74880 45/50 current_auc = 0.8634920634920635
User 74880 AUC after training: 0.8634920634920635
User 74880 does not improve AUC. Reverting changes.
Training on augumented user 42933 46/50 current_auc = 0.8634920634920635
User 42933 AUC after training: 0.8698412698412699
User 42933 improves AUC. Keeping the model.
Training on augumented user 116737 47/50 current_auc = 0.8698412698412699
User 116737 AUC after training: 0.8698412698412699
User 116737 does not improve AUC. Reverting changes.
Training on augumented user 100802 48/50 current_auc = 0.8698412698412699
User 100802 AUC after training: 0.8698412698412699
User 100802 does not improve AUC. Reverting changes.
Training on augumented user 2048 49/50 current_auc = 0.8698412698412699
User 2048 AUC after training: 0.8698412698412699
User 2048 does not improve AUC. Reverting changes.
[2024-12-02 17:53:21.694739] start test user 14246 27/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:22.279114] start test user 14246 27/568 recall augumented users by random, augumented_users = [24975, 63430, 106881, 27292, 63449, 66490, 62471, 35873, 41227, 15841, 9665, 92073, 125144, 75723, 78598, 72430, 86758, 43850, 19229, 1441, 15643, 116596, 66943, 73046, 82809, 39543, 69153, 44498, 122320, 40212, 90078, 97355, 64044, 124402, 5184, 60161, 77002, 66565, 5864, 45349, 50298, 91263, 96267, 111001, 54974, 118421, 87148, 103037, 39421, 105397]
[2024-12-02 17:53:22.301422] user = 14246 Cloud 27/568
[2024-12-02 17:53:22.337669] user = 14246 Local 27/568
[2024-12-02 17:53:22.407898] user = 14246 Local+ 27/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:24.782415] user = 14246 MPDA- 27/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5757918552036199
Training on augumented user 24975 0/50 current_auc = 0.5757918552036199
User 24975 AUC after training: 0.5769230769230769
User 24975 improves AUC. Keeping the model.
Training on augumented user 63430 1/50 current_auc = 0.5769230769230769
User 63430 AUC after training: 0.5723981900452488
User 63430 does not improve AUC. Reverting changes.
Training on augumented user 106881 2/50 current_auc = 0.5769230769230769
User 106881 AUC after training: 0.5723981900452488
User 106881 does not improve AUC. Reverting changes.
Training on augumented user 27292 3/50 current_auc = 0.5769230769230769
User 27292 AUC after training: 0.5757918552036199
User 27292 does not improve AUC. Reverting changes.
Training on augumented user 63449 4/50 current_auc = 0.5769230769230769
User 63449 AUC after training: 0.5769230769230769
User 63449 does not improve AUC. Reverting changes.
Training on augumented user 66490 5/50 current_auc = 0.5769230769230769
User 66490 AUC after training: 0.5780542986425339
User 66490 improves AUC. Keeping the model.
Training on augumented user 62471 6/50 current_auc = 0.5780542986425339
User 62471 AUC after training: 0.5769230769230769
User 62471 does not improve AUC. Reverting changes.
Training on augumented user 35873 7/50 current_auc = 0.5780542986425339
User 35873 AUC after training: 0.5769230769230769
User 35873 does not improve AUC. Reverting changes.
Training on augumented user 41227 8/50 current_auc = 0.5780542986425339
User 41227 AUC after training: 0.5746606334841629
User 41227 does not improve AUC. Reverting changes.
Training on augumented user 15841 9/50 current_auc = 0.5780542986425339
User 15841 AUC after training: 0.5780542986425339
User 15841 does not improve AUC. Reverting changes.
Training on augumented user 9665 10/50 current_auc = 0.5780542986425339
User 9665 AUC after training: 0.576923076923077
User 9665 does not improve AUC. Reverting changes.
Training on augumented user 92073 11/50 current_auc = 0.5780542986425339
User 92073 AUC after training: 0.5746606334841629
User 92073 does not improve AUC. Reverting changes.
Training on augumented user 125144 12/50 current_auc = 0.5780542986425339
User 125144 AUC after training: 0.5746606334841629
User 125144 does not improve AUC. Reverting changes.
Training on augumented user 75723 13/50 current_auc = 0.5780542986425339
User 75723 AUC after training: 0.57579185520362
User 75723 does not improve AUC. Reverting changes.
Training on augumented user 78598 14/50 current_auc = 0.5780542986425339
User 78598 AUC after training: 0.5735294117647058
User 78598 does not improve AUC. Reverting changes.
Training on augumented user 72430 15/50 current_auc = 0.5780542986425339
User 72430 AUC after training: 0.5746606334841629
User 72430 does not improve AUC. Reverting changes.
Training on augumented user 86758 16/50 current_auc = 0.5780542986425339
User 86758 AUC after training: 0.5746606334841629
User 86758 does not improve AUC. Reverting changes.
Training on augumented user 43850 17/50 current_auc = 0.5780542986425339
User 43850 AUC after training: 0.5769230769230769
User 43850 does not improve AUC. Reverting changes.
Training on augumented user 19229 18/50 current_auc = 0.5780542986425339
User 19229 AUC after training: 0.5769230769230769
User 19229 does not improve AUC. Reverting changes.
Training on augumented user 1441 19/50 current_auc = 0.5780542986425339
User 1441 AUC after training: 0.5746606334841629
User 1441 does not improve AUC. Reverting changes.
Training on augumented user 15643 20/50 current_auc = 0.5780542986425339
User 15643 AUC after training: 0.5803167420814479
User 15643 improves AUC. Keeping the model.
Training on augumented user 116596 21/50 current_auc = 0.5803167420814479
User 116596 AUC after training: 0.5769230769230769
User 116596 does not improve AUC. Reverting changes.
Training on augumented user 66943 22/50 current_auc = 0.5803167420814479
User 66943 AUC after training: 0.5780542986425339
User 66943 does not improve AUC. Reverting changes.
Training on augumented user 73046 23/50 current_auc = 0.5803167420814479
User 73046 AUC after training: 0.580316742081448
User 73046 improves AUC. Keeping the model.
Training on augumented user 82809 24/50 current_auc = 0.580316742081448
User 82809 AUC after training: 0.576923076923077
User 82809 does not improve AUC. Reverting changes.
Training on augumented user 39543 25/50 current_auc = 0.580316742081448
User 39543 AUC after training: 0.580316742081448
User 39543 does not improve AUC. Reverting changes.
Training on augumented user 69153 26/50 current_auc = 0.580316742081448
User 69153 AUC after training: 0.5757918552036199
User 69153 does not improve AUC. Reverting changes.
Training on augumented user 44498 27/50 current_auc = 0.580316742081448
User 44498 AUC after training: 0.579185520361991
User 44498 does not improve AUC. Reverting changes.
Training on augumented user 122320 28/50 current_auc = 0.580316742081448
User 122320 AUC after training: 0.5780542986425339
User 122320 does not improve AUC. Reverting changes.
Training on augumented user 40212 29/50 current_auc = 0.580316742081448
User 40212 AUC after training: 0.5780542986425339
User 40212 does not improve AUC. Reverting changes.
Training on augumented user 90078 30/50 current_auc = 0.580316742081448
User 90078 AUC after training: 0.5757918552036199
User 90078 does not improve AUC. Reverting changes.
Training on augumented user 97355 31/50 current_auc = 0.580316742081448
User 97355 AUC after training: 0.5746606334841629
User 97355 does not improve AUC. Reverting changes.
Training on augumented user 64044 32/50 current_auc = 0.580316742081448
User 64044 AUC after training: 0.5769230769230769
User 64044 does not improve AUC. Reverting changes.
Training on augumented user 124402 33/50 current_auc = 0.580316742081448
User 124402 AUC after training: 0.579185520361991
User 124402 does not improve AUC. Reverting changes.
Training on augumented user 5184 34/50 current_auc = 0.580316742081448
User 5184 AUC after training: 0.580316742081448
User 5184 does not improve AUC. Reverting changes.
Training on augumented user 60161 35/50 current_auc = 0.580316742081448
User 60161 AUC after training: 0.576923076923077
User 60161 does not improve AUC. Reverting changes.
Training on augumented user 77002 36/50 current_auc = 0.580316742081448
User 77002 AUC after training: 0.5769230769230769
User 77002 does not improve AUC. Reverting changes.
Training on augumented user 66565 37/50 current_auc = 0.580316742081448
User 66565 AUC after training: 0.5791855203619909
User 66565 does not improve AUC. Reverting changes.
Training on augumented user 5864 38/50 current_auc = 0.580316742081448
User 5864 AUC after training: 0.578054298642534
User 5864 does not improve AUC. Reverting changes.
Training on augumented user 45349 39/50 current_auc = 0.580316742081448
User 45349 AUC after training: 0.576923076923077
User 45349 does not improve AUC. Reverting changes.
Training on augumented user 50298 40/50 current_auc = 0.580316742081448
User 50298 AUC after training: 0.580316742081448
User 50298 does not improve AUC. Reverting changes.
Training on augumented user 91263 41/50 current_auc = 0.580316742081448
User 91263 AUC after training: 0.578054298642534
User 91263 does not improve AUC. Reverting changes.
Training on augumented user 96267 42/50 current_auc = 0.580316742081448
User 96267 AUC after training: 0.579185520361991
User 96267 does not improve AUC. Reverting changes.
Training on augumented user 111001 43/50 current_auc = 0.580316742081448
User 111001 AUC after training: 0.57579185520362
User 111001 does not improve AUC. Reverting changes.
Training on augumented user 54974 44/50 current_auc = 0.580316742081448
User 54974 AUC after training: 0.5757918552036199
User 54974 does not improve AUC. Reverting changes.
Training on augumented user 118421 45/50 current_auc = 0.580316742081448
User 118421 AUC after training: 0.5791855203619909
User 118421 does not improve AUC. Reverting changes.
Training on augumented user 87148 46/50 current_auc = 0.580316742081448
User 87148 AUC after training: 0.5780542986425339
User 87148 does not improve AUC. Reverting changes.
Training on augumented user 103037 47/50 current_auc = 0.580316742081448
User 103037 AUC after training: 0.5791855203619909
User 103037 does not improve AUC. Reverting changes.
Training on augumented user 39421 48/50 current_auc = 0.580316742081448
User 39421 AUC after training: 0.5769230769230769
User 39421 does not improve AUC. Reverting changes.
Training on augumented user 105397 49/50 current_auc = 0.580316742081448
User 105397 AUC after training: 0.578054298642534
User 105397 does not improve AUC. Reverting changes.
[2024-12-02 17:53:57.292731] start test user 14280 28/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:57.941753] start test user 14280 28/568 recall augumented users by random, augumented_users = [123234, 60420, 114780, 33497, 62775, 88061, 134981, 61745, 123216, 116647, 40822, 71781, 114009, 99411, 50575, 49994, 101034, 9812, 24860, 51148, 78959, 55004, 130325, 72520, 393, 135296, 58624, 29737, 53474, 90819, 82620, 8411, 100562, 130816, 124426, 1004, 85999, 87787, 91248, 86805, 113555, 44826, 5924, 32516, 39320, 45955, 121433, 19661, 15859, 66477]
[2024-12-02 17:53:57.961150] user = 14280 Cloud 28/568
[2024-12-02 17:53:57.991717] user = 14280 Local 28/568
[2024-12-02 17:53:58.192911] user = 14280 Local+ 28/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:01.010656] user = 14280 MPDA- 28/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6517112509834775
Training on augumented user 123234 0/50 current_auc = 0.6517112509834775
User 123234 AUC after training: 0.6518686073957514
User 123234 improves AUC. Keeping the model.
Training on augumented user 60420 1/50 current_auc = 0.6518686073957514
User 60420 AUC after training: 0.6514358772619985
User 60420 does not improve AUC. Reverting changes.
Training on augumented user 114780 2/50 current_auc = 0.6518686073957514
User 114780 AUC after training: 0.6517899291896145
User 114780 does not improve AUC. Reverting changes.
Training on augumented user 33497 3/50 current_auc = 0.6518686073957514
User 33497 AUC after training: 0.6517899291896145
User 33497 does not improve AUC. Reverting changes.
Training on augumented user 62775 4/50 current_auc = 0.6518686073957514
User 62775 AUC after training: 0.6516522423288749
User 62775 does not improve AUC. Reverting changes.
Training on augumented user 88061 5/50 current_auc = 0.6518686073957514
User 88061 AUC after training: 0.65139653815893
User 88061 does not improve AUC. Reverting changes.
Training on augumented user 134981 6/50 current_auc = 0.6518686073957514
User 134981 AUC after training: 0.6518686073957514
User 134981 does not improve AUC. Reverting changes.
Training on augumented user 61745 7/50 current_auc = 0.6518686073957514
User 61745 AUC after training: 0.65139653815893
User 61745 does not improve AUC. Reverting changes.
Training on augumented user 123216 8/50 current_auc = 0.6518686073957514
User 123216 AUC after training: 0.6518686073957514
User 123216 does not improve AUC. Reverting changes.
Training on augumented user 116647 9/50 current_auc = 0.6518686073957514
User 116647 AUC after training: 0.6512588512981904
User 116647 does not improve AUC. Reverting changes.
Training on augumented user 40822 10/50 current_auc = 0.6518686073957514
User 40822 AUC after training: 0.6515932336742722
User 40822 does not improve AUC. Reverting changes.
Training on augumented user 71781 11/50 current_auc = 0.6518686073957514
User 71781 AUC after training: 0.6504130605822187
User 71781 does not improve AUC. Reverting changes.
Training on augumented user 114009 12/50 current_auc = 0.6518686073957514
User 114009 AUC after training: 0.6513768686073957
User 114009 does not improve AUC. Reverting changes.
Training on augumented user 99411 13/50 current_auc = 0.6518686073957514
User 99411 AUC after training: 0.6517505900865461
User 99411 does not improve AUC. Reverting changes.
Training on augumented user 50575 14/50 current_auc = 0.6518686073957514
User 50575 AUC after training: 0.6511014948859166
User 50575 does not improve AUC. Reverting changes.
Training on augumented user 49994 15/50 current_auc = 0.6518686073957514
User 49994 AUC after training: 0.6512785208497246
User 49994 does not improve AUC. Reverting changes.
Training on augumented user 101034 16/50 current_auc = 0.6518686073957514
User 101034 AUC after training: 0.6514752163650668
User 101034 does not improve AUC. Reverting changes.
Training on augumented user 9812 17/50 current_auc = 0.6518686073957514
User 9812 AUC after training: 0.6516719118804091
User 9812 does not improve AUC. Reverting changes.
Training on augumented user 24860 18/50 current_auc = 0.6518686073957514
User 24860 AUC after training: 0.6508457907159717
User 24860 does not improve AUC. Reverting changes.
Training on augumented user 51148 19/50 current_auc = 0.6518686073957514
User 51148 AUC after training: 0.651573564122738
User 51148 does not improve AUC. Reverting changes.
Training on augumented user 78959 20/50 current_auc = 0.6518686073957514
User 78959 AUC after training: 0.6515932336742722
User 78959 does not improve AUC. Reverting changes.
Training on augumented user 55004 21/50 current_auc = 0.6518686073957514
User 55004 AUC after training: 0.6505704169944925
User 55004 does not improve AUC. Reverting changes.
Training on augumented user 130325 22/50 current_auc = 0.6518686073957514
User 130325 AUC after training: 0.6518686073957514
User 130325 does not improve AUC. Reverting changes.
Training on augumented user 72520 23/50 current_auc = 0.6518686073957514
User 72520 AUC after training: 0.6514752163650669
User 72520 does not improve AUC. Reverting changes.
Training on augumented user 393 24/50 current_auc = 0.6518686073957514
User 393 AUC after training: 0.6517505900865461
User 393 does not improve AUC. Reverting changes.
Training on augumented user 135296 25/50 current_auc = 0.6518686073957514
User 135296 AUC after training: 0.6518686073957514
User 135296 does not improve AUC. Reverting changes.
Training on augumented user 58624 26/50 current_auc = 0.6518686073957514
User 58624 AUC after training: 0.6519866247049567
User 58624 improves AUC. Keeping the model.
Training on augumented user 29737 27/50 current_auc = 0.6519866247049567
User 29737 AUC after training: 0.65228166797797
User 29737 improves AUC. Keeping the model.
Training on augumented user 53474 28/50 current_auc = 0.65228166797797
User 53474 AUC after training: 0.6523800157356412
User 53474 improves AUC. Keeping the model.
Training on augumented user 90819 29/50 current_auc = 0.6523800157356412
User 90819 AUC after training: 0.6522226593233673
User 90819 does not improve AUC. Reverting changes.
Training on augumented user 82620 30/50 current_auc = 0.6523800157356412
User 82620 AUC after training: 0.6521833202202989
User 82620 does not improve AUC. Reverting changes.
Training on augumented user 8411 31/50 current_auc = 0.6523800157356412
User 8411 AUC after training: 0.6520259638080251
User 8411 does not improve AUC. Reverting changes.
Training on augumented user 100562 32/50 current_auc = 0.6523800157356412
User 100562 AUC after training: 0.6523996852871753
User 100562 improves AUC. Keeping the model.
Training on augumented user 130816 33/50 current_auc = 0.6523996852871753
User 130816 AUC after training: 0.6520062942564908
User 130816 does not improve AUC. Reverting changes.
Training on augumented user 124426 34/50 current_auc = 0.6523996852871753
User 124426 AUC after training: 0.6515932336742722
User 124426 does not improve AUC. Reverting changes.
Training on augumented user 1004 35/50 current_auc = 0.6523996852871753
User 1004 AUC after training: 0.6522423288749017
User 1004 does not improve AUC. Reverting changes.
Training on augumented user 85999 36/50 current_auc = 0.6523996852871753
User 85999 AUC after training: 0.6523210070810386
User 85999 does not improve AUC. Reverting changes.
Training on augumented user 87787 37/50 current_auc = 0.6523996852871753
User 87787 AUC after training: 0.6525177025963808
User 87787 improves AUC. Keeping the model.
Training on augumented user 91248 38/50 current_auc = 0.6525177025963808
User 91248 AUC after training: 0.6525177025963808
User 91248 does not improve AUC. Reverting changes.
Training on augumented user 86805 39/50 current_auc = 0.6525177025963808
User 86805 AUC after training: 0.6522029897718332
User 86805 does not improve AUC. Reverting changes.
Training on augumented user 113555 40/50 current_auc = 0.6525177025963808
User 113555 AUC after training: 0.6525177025963808
User 113555 does not improve AUC. Reverting changes.
Training on augumented user 44826 41/50 current_auc = 0.6525177025963808
User 44826 AUC after training: 0.6523210070810385
User 44826 does not improve AUC. Reverting changes.
Training on augumented user 5924 42/50 current_auc = 0.6525177025963808
User 5924 AUC after training: 0.6516522423288749
User 5924 does not improve AUC. Reverting changes.
Training on augumented user 32516 43/50 current_auc = 0.6525177025963808
User 32516 AUC after training: 0.6519276160503541
User 32516 does not improve AUC. Reverting changes.
Training on augumented user 39320 44/50 current_auc = 0.6525177025963808
User 39320 AUC after training: 0.6521243115656963
User 39320 does not improve AUC. Reverting changes.
Training on augumented user 45955 45/50 current_auc = 0.6525177025963808
User 45955 AUC after training: 0.6522816679779702
User 45955 does not improve AUC. Reverting changes.
Training on augumented user 121433 46/50 current_auc = 0.6525177025963808
User 121433 AUC after training: 0.651829268292683
User 121433 does not improve AUC. Reverting changes.
Training on augumented user 19661 47/50 current_auc = 0.6525177025963808
User 19661 AUC after training: 0.6518095987411487
User 19661 does not improve AUC. Reverting changes.
Training on augumented user 15859 48/50 current_auc = 0.6525177025963808
User 15859 AUC after training: 0.6523996852871754
User 15859 does not improve AUC. Reverting changes.
Training on augumented user 66477 49/50 current_auc = 0.6525177025963808
User 66477 AUC after training: 0.6525177025963809
User 66477 improves AUC. Keeping the model.
[2024-12-02 17:54:29.927166] start test user 14305 29/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:30.554218] start test user 14305 29/568 recall augumented users by random, augumented_users = [84057, 54399, 68095, 45313, 4845, 11845, 66475, 74980, 47629, 56529, 92514, 85046, 95307, 17042, 100466, 78790, 111796, 65738, 122739, 117391, 99723, 110295, 1793, 43562, 12028, 14267, 44997, 90962, 115025, 39148, 10106, 21234, 87432, 18005, 120943, 22170, 115107, 135804, 91303, 20772, 90172, 40772, 22767, 101567, 13970, 50196, 19801, 74278, 33753, 68579]
[2024-12-02 17:54:30.569372] user = 14305 Cloud 29/568
[2024-12-02 17:54:30.595454] user = 14305 Local 29/568
[2024-12-02 17:54:30.632058] user = 14305 Local+ 29/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:32.357927] user = 14305 MPDA- 29/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7609670987038883
Training on augumented user 84057 0/50 current_auc = 0.7609670987038883
User 84057 AUC after training: 0.7602193419740777
User 84057 does not improve AUC. Reverting changes.
Training on augumented user 54399 1/50 current_auc = 0.7609670987038883
User 54399 AUC after training: 0.7609670987038883
User 54399 does not improve AUC. Reverting changes.
Training on augumented user 68095 2/50 current_auc = 0.7609670987038883
User 68095 AUC after training: 0.7604685942173479
User 68095 does not improve AUC. Reverting changes.
Training on augumented user 45313 3/50 current_auc = 0.7609670987038883
User 45313 AUC after training: 0.7612163509471584
User 45313 improves AUC. Keeping the model.
Training on augumented user 4845 4/50 current_auc = 0.7612163509471584
User 4845 AUC after training: 0.7594715852442672
User 4845 does not improve AUC. Reverting changes.
Training on augumented user 11845 5/50 current_auc = 0.7612163509471584
User 11845 AUC after training: 0.7607178464606181
User 11845 does not improve AUC. Reverting changes.
Training on augumented user 66475 6/50 current_auc = 0.7612163509471584
User 66475 AUC after training: 0.7604685942173479
User 66475 does not improve AUC. Reverting changes.
Training on augumented user 74980 7/50 current_auc = 0.7612163509471584
User 74980 AUC after training: 0.7614656031904287
User 74980 improves AUC. Keeping the model.
Training on augumented user 47629 8/50 current_auc = 0.7614656031904287
User 47629 AUC after training: 0.7609670987038882
User 47629 does not improve AUC. Reverting changes.
Training on augumented user 56529 9/50 current_auc = 0.7614656031904287
User 56529 AUC after training: 0.7607178464606181
User 56529 does not improve AUC. Reverting changes.
Training on augumented user 92514 10/50 current_auc = 0.7614656031904287
User 92514 AUC after training: 0.761964107676969
User 92514 improves AUC. Keeping the model.
Training on augumented user 85046 11/50 current_auc = 0.761964107676969
User 85046 AUC after training: 0.7612163509471584
User 85046 does not improve AUC. Reverting changes.
Training on augumented user 95307 12/50 current_auc = 0.761964107676969
User 95307 AUC after training: 0.7617148554336989
User 95307 does not improve AUC. Reverting changes.
Training on augumented user 17042 13/50 current_auc = 0.761964107676969
User 17042 AUC after training: 0.7602193419740777
User 17042 does not improve AUC. Reverting changes.
Training on augumented user 100466 14/50 current_auc = 0.761964107676969
User 100466 AUC after training: 0.7619641076769691
User 100466 improves AUC. Keeping the model.
Training on augumented user 78790 15/50 current_auc = 0.7619641076769691
User 78790 AUC after training: 0.7619641076769691
User 78790 does not improve AUC. Reverting changes.
Training on augumented user 111796 16/50 current_auc = 0.7619641076769691
User 111796 AUC after training: 0.7612163509471584
User 111796 does not improve AUC. Reverting changes.
Training on augumented user 65738 17/50 current_auc = 0.7619641076769691
User 65738 AUC after training: 0.7619641076769691
User 65738 does not improve AUC. Reverting changes.
Training on augumented user 122739 18/50 current_auc = 0.7619641076769691
User 122739 AUC after training: 0.7622133599202393
User 122739 improves AUC. Keeping the model.
Training on augumented user 117391 19/50 current_auc = 0.7622133599202393
User 117391 AUC after training: 0.7629611166500497
User 117391 improves AUC. Keeping the model.
Training on augumented user 99723 20/50 current_auc = 0.7629611166500497
User 99723 AUC after training: 0.7624626121635093
User 99723 does not improve AUC. Reverting changes.
Training on augumented user 110295 21/50 current_auc = 0.7629611166500497
User 110295 AUC after training: 0.7629611166500498
User 110295 improves AUC. Keeping the model.
Training on augumented user 1793 22/50 current_auc = 0.7629611166500498
User 1793 AUC after training: 0.7617148554336989
User 1793 does not improve AUC. Reverting changes.
Training on augumented user 43562 23/50 current_auc = 0.7629611166500498
User 43562 AUC after training: 0.7627118644067796
User 43562 does not improve AUC. Reverting changes.
Training on augumented user 12028 24/50 current_auc = 0.7629611166500498
User 12028 AUC after training: 0.7624626121635094
User 12028 does not improve AUC. Reverting changes.
Training on augumented user 14267 25/50 current_auc = 0.7629611166500498
User 14267 AUC after training: 0.7634596211365902
User 14267 improves AUC. Keeping the model.
Training on augumented user 44997 26/50 current_auc = 0.7634596211365902
User 44997 AUC after training: 0.7632103688933201
User 44997 does not improve AUC. Reverting changes.
Training on augumented user 90962 27/50 current_auc = 0.7634596211365902
User 90962 AUC after training: 0.761964107676969
User 90962 does not improve AUC. Reverting changes.
Training on augumented user 115025 28/50 current_auc = 0.7634596211365902
User 115025 AUC after training: 0.7627118644067796
User 115025 does not improve AUC. Reverting changes.
Training on augumented user 39148 29/50 current_auc = 0.7634596211365902
User 39148 AUC after training: 0.761964107676969
User 39148 does not improve AUC. Reverting changes.
Training on augumented user 10106 30/50 current_auc = 0.7634596211365902
User 10106 AUC after training: 0.7624626121635094
User 10106 does not improve AUC. Reverting changes.
Training on augumented user 21234 31/50 current_auc = 0.7634596211365902
User 21234 AUC after training: 0.7629611166500497
User 21234 does not improve AUC. Reverting changes.
Training on augumented user 87432 32/50 current_auc = 0.7634596211365902
User 87432 AUC after training: 0.7624626121635094
User 87432 does not improve AUC. Reverting changes.
Training on augumented user 18005 33/50 current_auc = 0.7634596211365902
User 18005 AUC after training: 0.7627118644067796
User 18005 does not improve AUC. Reverting changes.
Training on augumented user 120943 34/50 current_auc = 0.7634596211365902
User 120943 AUC after training: 0.7629611166500498
User 120943 does not improve AUC. Reverting changes.
Training on augumented user 22170 35/50 current_auc = 0.7634596211365902
User 22170 AUC after training: 0.76321036889332
User 22170 does not improve AUC. Reverting changes.
Training on augumented user 115107 36/50 current_auc = 0.7634596211365902
User 115107 AUC after training: 0.7629611166500498
User 115107 does not improve AUC. Reverting changes.
Training on augumented user 135804 37/50 current_auc = 0.7634596211365902
User 135804 AUC after training: 0.7634596211365902
User 135804 does not improve AUC. Reverting changes.
Training on augumented user 91303 38/50 current_auc = 0.7634596211365902
User 91303 AUC after training: 0.7629611166500498
User 91303 does not improve AUC. Reverting changes.
Training on augumented user 20772 39/50 current_auc = 0.7634596211365902
User 20772 AUC after training: 0.7627118644067796
User 20772 does not improve AUC. Reverting changes.
Training on augumented user 90172 40/50 current_auc = 0.7634596211365902
User 90172 AUC after training: 0.76321036889332
User 90172 does not improve AUC. Reverting changes.
Training on augumented user 40772 41/50 current_auc = 0.7634596211365902
User 40772 AUC after training: 0.7629611166500498
User 40772 does not improve AUC. Reverting changes.
Training on augumented user 22767 42/50 current_auc = 0.7634596211365902
User 22767 AUC after training: 0.7634596211365902
User 22767 does not improve AUC. Reverting changes.
Training on augumented user 101567 43/50 current_auc = 0.7634596211365902
User 101567 AUC after training: 0.7619641076769691
User 101567 does not improve AUC. Reverting changes.
Training on augumented user 13970 44/50 current_auc = 0.7634596211365902
User 13970 AUC after training: 0.7614656031904287
User 13970 does not improve AUC. Reverting changes.
Training on augumented user 50196 45/50 current_auc = 0.7634596211365902
User 50196 AUC after training: 0.7624626121635094
User 50196 does not improve AUC. Reverting changes.
Training on augumented user 19801 46/50 current_auc = 0.7634596211365902
User 19801 AUC after training: 0.76321036889332
User 19801 does not improve AUC. Reverting changes.
Training on augumented user 74278 47/50 current_auc = 0.7634596211365902
User 74278 AUC after training: 0.7607178464606181
User 74278 does not improve AUC. Reverting changes.
Training on augumented user 33753 48/50 current_auc = 0.7634596211365902
User 33753 AUC after training: 0.7622133599202392
User 33753 does not improve AUC. Reverting changes.
Training on augumented user 68579 49/50 current_auc = 0.7634596211365902
User 68579 AUC after training: 0.7627118644067796
User 68579 does not improve AUC. Reverting changes.
[2024-12-02 17:55:05.110157] start test user 14370 30/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:05.841405] start test user 14370 30/568 recall augumented users by random, augumented_users = [131633, 117499, 58259, 12499, 118287, 21219, 124851, 2920, 137955, 113546, 12551, 685, 38869, 131553, 108056, 12358, 28103, 82650, 75289, 102699, 55595, 128093, 62505, 80087, 7672, 93275, 116858, 81450, 49006, 24868, 121771, 96282, 20815, 5348, 36219, 77078, 52556, 87828, 86931, 78873, 111791, 81667, 129368, 84584, 69956, 86900, 60036, 80591, 101529, 138430]
[2024-12-02 17:55:05.858005] user = 14370 Cloud 30/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:55:05.866098] user = 14370 Local 30/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:55:05.891321] user = 14370 Local+ 30/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:55:08.427295] user = 14370 MPDA- 30/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 131633 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131633 AUC after training: 0.5
User 131633 does not improve AUC. Reverting changes.
Training on augumented user 117499 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117499 AUC after training: 0.5
User 117499 does not improve AUC. Reverting changes.
Training on augumented user 58259 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58259 AUC after training: 0.5
User 58259 does not improve AUC. Reverting changes.
Training on augumented user 12499 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12499 AUC after training: 0.5
User 12499 does not improve AUC. Reverting changes.
Training on augumented user 118287 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118287 AUC after training: 0.5
User 118287 does not improve AUC. Reverting changes.
Training on augumented user 21219 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21219 AUC after training: 0.5
User 21219 does not improve AUC. Reverting changes.
Training on augumented user 124851 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124851 AUC after training: 0.5
User 124851 does not improve AUC. Reverting changes.
Training on augumented user 2920 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2920 AUC after training: 0.5
User 2920 does not improve AUC. Reverting changes.
Training on augumented user 137955 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137955 AUC after training: 0.5
User 137955 does not improve AUC. Reverting changes.
Training on augumented user 113546 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113546 AUC after training: 0.5
User 113546 does not improve AUC. Reverting changes.
Training on augumented user 12551 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12551 AUC after training: 0.5
User 12551 does not improve AUC. Reverting changes.
Training on augumented user 685 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 685 AUC after training: 0.5
User 685 does not improve AUC. Reverting changes.
Training on augumented user 38869 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38869 AUC after training: 0.5
User 38869 does not improve AUC. Reverting changes.
Training on augumented user 131553 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131553 AUC after training: 0.5
User 131553 does not improve AUC. Reverting changes.
Training on augumented user 108056 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108056 AUC after training: 0.5
User 108056 does not improve AUC. Reverting changes.
Training on augumented user 12358 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12358 AUC after training: 0.5
User 12358 does not improve AUC. Reverting changes.
Training on augumented user 28103 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28103 AUC after training: 0.5
User 28103 does not improve AUC. Reverting changes.
Training on augumented user 82650 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82650 AUC after training: 0.5
User 82650 does not improve AUC. Reverting changes.
Training on augumented user 75289 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75289 AUC after training: 0.5
User 75289 does not improve AUC. Reverting changes.
Training on augumented user 102699 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102699 AUC after training: 0.5
User 102699 does not improve AUC. Reverting changes.
Training on augumented user 55595 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55595 AUC after training: 0.5
User 55595 does not improve AUC. Reverting changes.
Training on augumented user 128093 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128093 AUC after training: 0.5
User 128093 does not improve AUC. Reverting changes.
Training on augumented user 62505 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62505 AUC after training: 0.5
User 62505 does not improve AUC. Reverting changes.
Training on augumented user 80087 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80087 AUC after training: 0.5
User 80087 does not improve AUC. Reverting changes.
Training on augumented user 7672 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7672 AUC after training: 0.5
User 7672 does not improve AUC. Reverting changes.
Training on augumented user 93275 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93275 AUC after training: 0.5
User 93275 does not improve AUC. Reverting changes.
Training on augumented user 116858 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116858 AUC after training: 0.5
User 116858 does not improve AUC. Reverting changes.
Training on augumented user 81450 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81450 AUC after training: 0.5
User 81450 does not improve AUC. Reverting changes.
Training on augumented user 49006 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49006 AUC after training: 0.5
User 49006 does not improve AUC. Reverting changes.
Training on augumented user 24868 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24868 AUC after training: 0.5
User 24868 does not improve AUC. Reverting changes.
Training on augumented user 121771 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121771 AUC after training: 0.5
User 121771 does not improve AUC. Reverting changes.
Training on augumented user 96282 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96282 AUC after training: 0.5
User 96282 does not improve AUC. Reverting changes.
Training on augumented user 20815 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20815 AUC after training: 0.5
User 20815 does not improve AUC. Reverting changes.
Training on augumented user 5348 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5348 AUC after training: 0.5
User 5348 does not improve AUC. Reverting changes.
Training on augumented user 36219 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36219 AUC after training: 0.5
User 36219 does not improve AUC. Reverting changes.
Training on augumented user 77078 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77078 AUC after training: 0.5
User 77078 does not improve AUC. Reverting changes.
Training on augumented user 52556 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52556 AUC after training: 0.5
User 52556 does not improve AUC. Reverting changes.
Training on augumented user 87828 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87828 AUC after training: 0.5
User 87828 does not improve AUC. Reverting changes.
Training on augumented user 86931 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86931 AUC after training: 0.5
User 86931 does not improve AUC. Reverting changes.
Training on augumented user 78873 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78873 AUC after training: 0.5
User 78873 does not improve AUC. Reverting changes.
Training on augumented user 111791 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111791 AUC after training: 0.5
User 111791 does not improve AUC. Reverting changes.
Training on augumented user 81667 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81667 AUC after training: 0.5
User 81667 does not improve AUC. Reverting changes.
Training on augumented user 129368 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129368 AUC after training: 0.5
User 129368 does not improve AUC. Reverting changes.
Training on augumented user 84584 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84584 AUC after training: 0.5
User 84584 does not improve AUC. Reverting changes.
Training on augumented user 69956 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69956 AUC after training: 0.5
User 69956 does not improve AUC. Reverting changes.
Training on augumented user 86900 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86900 AUC after training: 0.5
User 86900 does not improve AUC. Reverting changes.
Training on augumented user 60036 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60036 AUC after training: 0.5
User 60036 does not improve AUC. Reverting changes.
Training on augumented user 80591 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80591 AUC after training: 0.5
User 80591 does not improve AUC. Reverting changes.
Training on augumented user 101529 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101529 AUC after training: 0.5
User 101529 does not improve AUC. Reverting changes.
Training on augumented user 138430 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138430 AUC after training: 0.5
User 138430 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:55:37.185157] start test user 14374 31/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:37.642511] start test user 14374 31/568 recall augumented users by random, augumented_users = [87929, 15628, 91418, 116533, 28280, 112589, 84838, 39917, 61839, 52801, 149, 12845, 5136, 77415, 94333, 110451, 55273, 70033, 25174, 63543, 37979, 97564, 96147, 64947, 98891, 98306, 31220, 16751, 80782, 110114, 79128, 136519, 45837, 37550, 130770, 97405, 108824, 85085, 41086, 16793, 134941, 21560, 18875, 32527, 27886, 81881, 108517, 133849, 79091, 95760]
[2024-12-02 17:55:37.658409] user = 14374 Cloud 31/568
[2024-12-02 17:55:37.690497] user = 14374 Local 31/568
[2024-12-02 17:55:37.755397] user = 14374 Local+ 31/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:40.341788] user = 14374 MPDA- 31/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6364829396325459
Training on augumented user 87929 0/50 current_auc = 0.6364829396325459
User 87929 AUC after training: 0.6366343630123158
User 87929 improves AUC. Keeping the model.
Training on augumented user 15628 1/50 current_auc = 0.6366343630123158
User 15628 AUC after training: 0.6376438522107813
User 15628 improves AUC. Keeping the model.
Training on augumented user 91418 2/50 current_auc = 0.6376438522107813
User 91418 AUC after training: 0.6375933777508581
User 91418 does not improve AUC. Reverting changes.
Training on augumented user 116533 3/50 current_auc = 0.6376438522107813
User 116533 AUC after training: 0.6374924288310115
User 116533 does not improve AUC. Reverting changes.
Training on augumented user 28280 4/50 current_auc = 0.6376438522107813
User 28280 AUC after training: 0.6383000201897839
User 28280 improves AUC. Keeping the model.
Training on augumented user 112589 5/50 current_auc = 0.6383000201897839
User 112589 AUC after training: 0.6387542903290935
User 112589 improves AUC. Keeping the model.
Training on augumented user 84838 6/50 current_auc = 0.6387542903290935
User 84838 AUC after training: 0.6385523924894003
User 84838 does not improve AUC. Reverting changes.
Training on augumented user 39917 7/50 current_auc = 0.6387542903290935
User 39917 AUC after training: 0.6390066626287099
User 39917 improves AUC. Keeping the model.
Training on augumented user 61839 8/50 current_auc = 0.6390066626287099
User 61839 AUC after training: 0.6388047647890167
User 61839 does not improve AUC. Reverting changes.
Training on augumented user 52801 9/50 current_auc = 0.6390066626287099
User 52801 AUC after training: 0.6391076115485564
User 52801 improves AUC. Keeping the model.
Training on augumented user 149 10/50 current_auc = 0.6391076115485564
User 149 AUC after training: 0.6385019180294771
User 149 does not improve AUC. Reverting changes.
Training on augumented user 12845 11/50 current_auc = 0.6391076115485564
User 12845 AUC after training: 0.6390571370886331
User 12845 does not improve AUC. Reverting changes.
Training on augumented user 5136 12/50 current_auc = 0.6391076115485564
User 5136 AUC after training: 0.6390571370886331
User 5136 does not improve AUC. Reverting changes.
Training on augumented user 77415 13/50 current_auc = 0.6391076115485564
User 77415 AUC after training: 0.6385523924894003
User 77415 does not improve AUC. Reverting changes.
Training on augumented user 94333 14/50 current_auc = 0.6391076115485564
User 94333 AUC after training: 0.6387542903290935
User 94333 does not improve AUC. Reverting changes.
Training on augumented user 110451 15/50 current_auc = 0.6391076115485564
User 110451 AUC after training: 0.6388047647890168
User 110451 does not improve AUC. Reverting changes.
Training on augumented user 55273 16/50 current_auc = 0.6391076115485564
User 55273 AUC after training: 0.6369372097718553
User 55273 does not improve AUC. Reverting changes.
Training on augumented user 70033 17/50 current_auc = 0.6391076115485564
User 70033 AUC after training: 0.6392085604684029
User 70033 improves AUC. Keeping the model.
Training on augumented user 25174 18/50 current_auc = 0.6392085604684029
User 25174 AUC after training: 0.6375429032909349
User 25174 does not improve AUC. Reverting changes.
Training on augumented user 63543 19/50 current_auc = 0.6392085604684029
User 63543 AUC after training: 0.6388047647890167
User 63543 does not improve AUC. Reverting changes.
Training on augumented user 37979 20/50 current_auc = 0.6392085604684029
User 37979 AUC after training: 0.6389561881687866
User 37979 does not improve AUC. Reverting changes.
Training on augumented user 97564 21/50 current_auc = 0.6392085604684029
User 97564 AUC after training: 0.6388047647890167
User 97564 does not improve AUC. Reverting changes.
Training on augumented user 96147 22/50 current_auc = 0.6392085604684029
User 96147 AUC after training: 0.6391076115485563
User 96147 does not improve AUC. Reverting changes.
Training on augumented user 64947 23/50 current_auc = 0.6392085604684029
User 64947 AUC after training: 0.6392085604684029
User 64947 does not improve AUC. Reverting changes.
Training on augumented user 98891 24/50 current_auc = 0.6392085604684029
User 98891 AUC after training: 0.6383504946497072
User 98891 does not improve AUC. Reverting changes.
Training on augumented user 98306 25/50 current_auc = 0.6392085604684029
User 98306 AUC after training: 0.6387542903290935
User 98306 does not improve AUC. Reverting changes.
Training on augumented user 31220 26/50 current_auc = 0.6392085604684029
User 31220 AUC after training: 0.6390066626287099
User 31220 does not improve AUC. Reverting changes.
Training on augumented user 16751 27/50 current_auc = 0.6392085604684029
User 16751 AUC after training: 0.6384514435695537
User 16751 does not improve AUC. Reverting changes.
Training on augumented user 80782 28/50 current_auc = 0.6392085604684029
User 80782 AUC after training: 0.6387038158691702
User 80782 does not improve AUC. Reverting changes.
Training on augumented user 110114 29/50 current_auc = 0.6392085604684029
User 110114 AUC after training: 0.6388047647890167
User 110114 does not improve AUC. Reverting changes.
Training on augumented user 79128 30/50 current_auc = 0.6392085604684029
User 79128 AUC after training: 0.6390571370886331
User 79128 does not improve AUC. Reverting changes.
Training on augumented user 136519 31/50 current_auc = 0.6392085604684029
User 136519 AUC after training: 0.6386533414092469
User 136519 does not improve AUC. Reverting changes.
Training on augumented user 45837 32/50 current_auc = 0.6392085604684029
User 45837 AUC after training: 0.6392590349283263
User 45837 improves AUC. Keeping the model.
Training on augumented user 37550 33/50 current_auc = 0.6392590349283263
User 37550 AUC after training: 0.63885523924894
User 37550 does not improve AUC. Reverting changes.
Training on augumented user 130770 34/50 current_auc = 0.6392590349283263
User 130770 AUC after training: 0.6391076115485566
User 130770 does not improve AUC. Reverting changes.
Training on augumented user 97405 35/50 current_auc = 0.6392590349283263
User 97405 AUC after training: 0.6393599838481728
User 97405 improves AUC. Keeping the model.
Training on augumented user 108824 36/50 current_auc = 0.6393599838481728
User 108824 AUC after training: 0.6392590349283261
User 108824 does not improve AUC. Reverting changes.
Training on augumented user 85085 37/50 current_auc = 0.6393599838481728
User 85085 AUC after training: 0.6396123561477892
User 85085 improves AUC. Keeping the model.
Training on augumented user 41086 38/50 current_auc = 0.6396123561477892
User 41086 AUC after training: 0.639915202907329
User 41086 improves AUC. Keeping the model.
Training on augumented user 16793 39/50 current_auc = 0.639915202907329
User 16793 AUC after training: 0.6398647284474056
User 16793 does not improve AUC. Reverting changes.
Training on augumented user 134941 40/50 current_auc = 0.639915202907329
User 134941 AUC after training: 0.6398142539874822
User 134941 does not improve AUC. Reverting changes.
Training on augumented user 21560 41/50 current_auc = 0.639915202907329
User 21560 AUC after training: 0.6393599838481727
User 21560 does not improve AUC. Reverting changes.
Training on augumented user 18875 42/50 current_auc = 0.639915202907329
User 18875 AUC after training: 0.6386533414092469
User 18875 does not improve AUC. Reverting changes.
Training on augumented user 32527 43/50 current_auc = 0.639915202907329
User 32527 AUC after training: 0.6387542903290935
User 32527 does not improve AUC. Reverting changes.
Training on augumented user 27886 44/50 current_auc = 0.639915202907329
User 27886 AUC after training: 0.6395618816878659
User 27886 does not improve AUC. Reverting changes.
Training on augumented user 81881 45/50 current_auc = 0.639915202907329
User 81881 AUC after training: 0.6398647284474056
User 81881 does not improve AUC. Reverting changes.
Training on augumented user 108517 46/50 current_auc = 0.639915202907329
User 108517 AUC after training: 0.6396628306077125
User 108517 does not improve AUC. Reverting changes.
Training on augumented user 133849 47/50 current_auc = 0.639915202907329
User 133849 AUC after training: 0.6399656773672522
User 133849 improves AUC. Keeping the model.
Training on augumented user 79091 48/50 current_auc = 0.6399656773672522
User 79091 AUC after training: 0.6398647284474055
User 79091 does not improve AUC. Reverting changes.
Training on augumented user 95760 49/50 current_auc = 0.6399656773672522
User 95760 AUC after training: 0.6394609327680194
User 95760 does not improve AUC. Reverting changes.
[2024-12-02 17:56:15.670628] start test user 14442 32/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:16.156316] start test user 14442 32/568 recall augumented users by random, augumented_users = [36164, 14907, 16724, 136587, 116623, 20823, 21723, 72819, 80314, 54639, 38503, 28739, 127132, 26195, 4979, 47469, 76867, 28256, 128357, 45099, 36836, 110018, 74640, 86451, 87920, 122700, 98759, 94682, 122112, 128403, 88701, 112097, 119238, 56738, 58652, 56642, 29003, 68212, 46189, 15462, 136381, 97069, 64743, 111243, 136334, 23251, 87839, 6986, 22277, 72554]
[2024-12-02 17:56:16.171755] user = 14442 Cloud 32/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:56:16.178451] user = 14442 Local 32/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:56:16.242464] user = 14442 Local+ 32/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:56:18.339036] user = 14442 MPDA- 32/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 36164 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36164 AUC after training: 0.5
User 36164 does not improve AUC. Reverting changes.
Training on augumented user 14907 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14907 AUC after training: 0.5
User 14907 does not improve AUC. Reverting changes.
Training on augumented user 16724 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16724 AUC after training: 0.5
User 16724 does not improve AUC. Reverting changes.
Training on augumented user 136587 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136587 AUC after training: 0.5
User 136587 does not improve AUC. Reverting changes.
Training on augumented user 116623 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116623 AUC after training: 0.5
User 116623 does not improve AUC. Reverting changes.
Training on augumented user 20823 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20823 AUC after training: 0.5
User 20823 does not improve AUC. Reverting changes.
Training on augumented user 21723 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21723 AUC after training: 0.5
User 21723 does not improve AUC. Reverting changes.
Training on augumented user 72819 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72819 AUC after training: 0.5
User 72819 does not improve AUC. Reverting changes.
Training on augumented user 80314 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80314 AUC after training: 0.5
User 80314 does not improve AUC. Reverting changes.
Training on augumented user 54639 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54639 AUC after training: 0.5
User 54639 does not improve AUC. Reverting changes.
Training on augumented user 38503 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38503 AUC after training: 0.5
User 38503 does not improve AUC. Reverting changes.
Training on augumented user 28739 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28739 AUC after training: 0.5
User 28739 does not improve AUC. Reverting changes.
Training on augumented user 127132 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127132 AUC after training: 0.5
User 127132 does not improve AUC. Reverting changes.
Training on augumented user 26195 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26195 AUC after training: 0.5
User 26195 does not improve AUC. Reverting changes.
Training on augumented user 4979 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4979 AUC after training: 0.5
User 4979 does not improve AUC. Reverting changes.
Training on augumented user 47469 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47469 AUC after training: 0.5
User 47469 does not improve AUC. Reverting changes.
Training on augumented user 76867 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76867 AUC after training: 0.5
User 76867 does not improve AUC. Reverting changes.
Training on augumented user 28256 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28256 AUC after training: 0.5
User 28256 does not improve AUC. Reverting changes.
Training on augumented user 128357 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128357 AUC after training: 0.5
User 128357 does not improve AUC. Reverting changes.
Training on augumented user 45099 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45099 AUC after training: 0.5
User 45099 does not improve AUC. Reverting changes.
Training on augumented user 36836 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36836 AUC after training: 0.5
User 36836 does not improve AUC. Reverting changes.
Training on augumented user 110018 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110018 AUC after training: 0.5
User 110018 does not improve AUC. Reverting changes.
Training on augumented user 74640 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74640 AUC after training: 0.5
User 74640 does not improve AUC. Reverting changes.
Training on augumented user 86451 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86451 AUC after training: 0.5
User 86451 does not improve AUC. Reverting changes.
Training on augumented user 87920 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87920 AUC after training: 0.5
User 87920 does not improve AUC. Reverting changes.
Training on augumented user 122700 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122700 AUC after training: 0.5
User 122700 does not improve AUC. Reverting changes.
Training on augumented user 98759 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98759 AUC after training: 0.5
User 98759 does not improve AUC. Reverting changes.
Training on augumented user 94682 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94682 AUC after training: 0.5
User 94682 does not improve AUC. Reverting changes.
Training on augumented user 122112 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122112 AUC after training: 0.5
User 122112 does not improve AUC. Reverting changes.
Training on augumented user 128403 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128403 AUC after training: 0.5
User 128403 does not improve AUC. Reverting changes.
Training on augumented user 88701 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88701 AUC after training: 0.5
User 88701 does not improve AUC. Reverting changes.
Training on augumented user 112097 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112097 AUC after training: 0.5
User 112097 does not improve AUC. Reverting changes.
Training on augumented user 119238 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119238 AUC after training: 0.5
User 119238 does not improve AUC. Reverting changes.
Training on augumented user 56738 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56738 AUC after training: 0.5
User 56738 does not improve AUC. Reverting changes.
Training on augumented user 58652 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58652 AUC after training: 0.5
User 58652 does not improve AUC. Reverting changes.
Training on augumented user 56642 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56642 AUC after training: 0.5
User 56642 does not improve AUC. Reverting changes.
Training on augumented user 29003 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29003 AUC after training: 0.5
User 29003 does not improve AUC. Reverting changes.
Training on augumented user 68212 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68212 AUC after training: 0.5
User 68212 does not improve AUC. Reverting changes.
Training on augumented user 46189 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46189 AUC after training: 0.5
User 46189 does not improve AUC. Reverting changes.
Training on augumented user 15462 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15462 AUC after training: 0.5
User 15462 does not improve AUC. Reverting changes.
Training on augumented user 136381 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136381 AUC after training: 0.5
User 136381 does not improve AUC. Reverting changes.
Training on augumented user 97069 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97069 AUC after training: 0.5
User 97069 does not improve AUC. Reverting changes.
Training on augumented user 64743 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64743 AUC after training: 0.5
User 64743 does not improve AUC. Reverting changes.
Training on augumented user 111243 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111243 AUC after training: 0.5
User 111243 does not improve AUC. Reverting changes.
Training on augumented user 136334 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136334 AUC after training: 0.5
User 136334 does not improve AUC. Reverting changes.
Training on augumented user 23251 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23251 AUC after training: 0.5
User 23251 does not improve AUC. Reverting changes.
Training on augumented user 87839 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87839 AUC after training: 0.5
User 87839 does not improve AUC. Reverting changes.
Training on augumented user 6986 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6986 AUC after training: 0.5
User 6986 does not improve AUC. Reverting changes.
Training on augumented user 22277 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22277 AUC after training: 0.5
User 22277 does not improve AUC. Reverting changes.
Training on augumented user 72554 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72554 AUC after training: 0.5
User 72554 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:56:49.928335] start test user 14462 33/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:50.591577] start test user 14462 33/568 recall augumented users by random, augumented_users = [72114, 22373, 50837, 57487, 22051, 99490, 124363, 54759, 36111, 41715, 103623, 10446, 9997, 76133, 86783, 60984, 131212, 124349, 97359, 97688, 56493, 35465, 75403, 58649, 93222, 16595, 29655, 64855, 82047, 26090, 7026, 120665, 82121, 103199, 130371, 26006, 58863, 106379, 119066, 37455, 50551, 117204, 108112, 115877, 40737, 118908, 109910, 43183, 39667, 27809]
[2024-12-02 17:56:50.613684] user = 14462 Cloud 33/568
[2024-12-02 17:56:50.641052] user = 14462 Local 33/568
[2024-12-02 17:56:50.749647] user = 14462 Local+ 33/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:53.565822] user = 14462 MPDA- 33/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8299180327868851
Training on augumented user 72114 0/50 current_auc = 0.8299180327868851
User 72114 AUC after training: 0.8299180327868851
User 72114 does not improve AUC. Reverting changes.
Training on augumented user 22373 1/50 current_auc = 0.8299180327868851
User 22373 AUC after training: 0.8299180327868851
User 22373 does not improve AUC. Reverting changes.
Training on augumented user 50837 2/50 current_auc = 0.8299180327868851
User 50837 AUC after training: 0.8299180327868851
User 50837 does not improve AUC. Reverting changes.
Training on augumented user 57487 3/50 current_auc = 0.8299180327868851
User 57487 AUC after training: 0.8278688524590163
User 57487 does not improve AUC. Reverting changes.
Training on augumented user 22051 4/50 current_auc = 0.8299180327868851
User 22051 AUC after training: 0.8299180327868851
User 22051 does not improve AUC. Reverting changes.
Training on augumented user 99490 5/50 current_auc = 0.8299180327868851
User 99490 AUC after training: 0.8299180327868851
User 99490 does not improve AUC. Reverting changes.
Training on augumented user 124363 6/50 current_auc = 0.8299180327868851
User 124363 AUC after training: 0.8299180327868851
User 124363 does not improve AUC. Reverting changes.
Training on augumented user 54759 7/50 current_auc = 0.8299180327868851
User 54759 AUC after training: 0.8299180327868851
User 54759 does not improve AUC. Reverting changes.
Training on augumented user 36111 8/50 current_auc = 0.8299180327868851
User 36111 AUC after training: 0.8299180327868851
User 36111 does not improve AUC. Reverting changes.
Training on augumented user 41715 9/50 current_auc = 0.8299180327868851
User 41715 AUC after training: 0.8299180327868851
User 41715 does not improve AUC. Reverting changes.
Training on augumented user 103623 10/50 current_auc = 0.8299180327868851
User 103623 AUC after training: 0.8299180327868851
User 103623 does not improve AUC. Reverting changes.
Training on augumented user 10446 11/50 current_auc = 0.8299180327868851
User 10446 AUC after training: 0.8299180327868851
User 10446 does not improve AUC. Reverting changes.
Training on augumented user 9997 12/50 current_auc = 0.8299180327868851
User 9997 AUC after training: 0.8278688524590163
User 9997 does not improve AUC. Reverting changes.
Training on augumented user 76133 13/50 current_auc = 0.8299180327868851
User 76133 AUC after training: 0.8299180327868851
User 76133 does not improve AUC. Reverting changes.
Training on augumented user 86783 14/50 current_auc = 0.8299180327868851
User 86783 AUC after training: 0.8299180327868851
User 86783 does not improve AUC. Reverting changes.
Training on augumented user 60984 15/50 current_auc = 0.8299180327868851
User 60984 AUC after training: 0.8299180327868851
User 60984 does not improve AUC. Reverting changes.
Training on augumented user 131212 16/50 current_auc = 0.8299180327868851
User 131212 AUC after training: 0.8299180327868851
User 131212 does not improve AUC. Reverting changes.
Training on augumented user 124349 17/50 current_auc = 0.8299180327868851
User 124349 AUC after training: 0.8299180327868851
User 124349 does not improve AUC. Reverting changes.
Training on augumented user 97359 18/50 current_auc = 0.8299180327868851
User 97359 AUC after training: 0.8299180327868851
User 97359 does not improve AUC. Reverting changes.
Training on augumented user 97688 19/50 current_auc = 0.8299180327868851
User 97688 AUC after training: 0.8299180327868851
User 97688 does not improve AUC. Reverting changes.
Training on augumented user 56493 20/50 current_auc = 0.8299180327868851
User 56493 AUC after training: 0.8299180327868851
User 56493 does not improve AUC. Reverting changes.
Training on augumented user 35465 21/50 current_auc = 0.8299180327868851
User 35465 AUC after training: 0.8278688524590163
User 35465 does not improve AUC. Reverting changes.
Training on augumented user 75403 22/50 current_auc = 0.8299180327868851
User 75403 AUC after training: 0.8299180327868851
User 75403 does not improve AUC. Reverting changes.
Training on augumented user 58649 23/50 current_auc = 0.8299180327868851
User 58649 AUC after training: 0.8299180327868851
User 58649 does not improve AUC. Reverting changes.
Training on augumented user 93222 24/50 current_auc = 0.8299180327868851
User 93222 AUC after training: 0.8299180327868851
User 93222 does not improve AUC. Reverting changes.
Training on augumented user 16595 25/50 current_auc = 0.8299180327868851
User 16595 AUC after training: 0.8299180327868851
User 16595 does not improve AUC. Reverting changes.
Training on augumented user 29655 26/50 current_auc = 0.8299180327868851
User 29655 AUC after training: 0.8299180327868851
User 29655 does not improve AUC. Reverting changes.
Training on augumented user 64855 27/50 current_auc = 0.8299180327868851
User 64855 AUC after training: 0.8299180327868851
User 64855 does not improve AUC. Reverting changes.
Training on augumented user 82047 28/50 current_auc = 0.8299180327868851
User 82047 AUC after training: 0.8299180327868851
User 82047 does not improve AUC. Reverting changes.
Training on augumented user 26090 29/50 current_auc = 0.8299180327868851
User 26090 AUC after training: 0.8299180327868851
User 26090 does not improve AUC. Reverting changes.
Training on augumented user 7026 30/50 current_auc = 0.8299180327868851
User 7026 AUC after training: 0.8299180327868851
User 7026 does not improve AUC. Reverting changes.
Training on augumented user 120665 31/50 current_auc = 0.8299180327868851
User 120665 AUC after training: 0.8299180327868851
User 120665 does not improve AUC. Reverting changes.
Training on augumented user 82121 32/50 current_auc = 0.8299180327868851
User 82121 AUC after training: 0.8299180327868851
User 82121 does not improve AUC. Reverting changes.
Training on augumented user 103199 33/50 current_auc = 0.8299180327868851
User 103199 AUC after training: 0.8299180327868851
User 103199 does not improve AUC. Reverting changes.
Training on augumented user 130371 34/50 current_auc = 0.8299180327868851
User 130371 AUC after training: 0.8299180327868851
User 130371 does not improve AUC. Reverting changes.
Training on augumented user 26006 35/50 current_auc = 0.8299180327868851
User 26006 AUC after training: 0.8299180327868851
User 26006 does not improve AUC. Reverting changes.
Training on augumented user 58863 36/50 current_auc = 0.8299180327868851
User 58863 AUC after training: 0.8299180327868851
User 58863 does not improve AUC. Reverting changes.
Training on augumented user 106379 37/50 current_auc = 0.8299180327868851
User 106379 AUC after training: 0.8299180327868851
User 106379 does not improve AUC. Reverting changes.
Training on augumented user 119066 38/50 current_auc = 0.8299180327868851
User 119066 AUC after training: 0.8299180327868851
User 119066 does not improve AUC. Reverting changes.
Training on augumented user 37455 39/50 current_auc = 0.8299180327868851
User 37455 AUC after training: 0.8299180327868851
User 37455 does not improve AUC. Reverting changes.
Training on augumented user 50551 40/50 current_auc = 0.8299180327868851
User 50551 AUC after training: 0.8299180327868851
User 50551 does not improve AUC. Reverting changes.
Training on augumented user 117204 41/50 current_auc = 0.8299180327868851
User 117204 AUC after training: 0.8299180327868851
User 117204 does not improve AUC. Reverting changes.
Training on augumented user 108112 42/50 current_auc = 0.8299180327868851
User 108112 AUC after training: 0.8299180327868851
User 108112 does not improve AUC. Reverting changes.
Training on augumented user 115877 43/50 current_auc = 0.8299180327868851
User 115877 AUC after training: 0.8299180327868851
User 115877 does not improve AUC. Reverting changes.
Training on augumented user 40737 44/50 current_auc = 0.8299180327868851
User 40737 AUC after training: 0.8299180327868851
User 40737 does not improve AUC. Reverting changes.
Training on augumented user 118908 45/50 current_auc = 0.8299180327868851
User 118908 AUC after training: 0.8299180327868851
User 118908 does not improve AUC. Reverting changes.
Training on augumented user 109910 46/50 current_auc = 0.8299180327868851
User 109910 AUC after training: 0.831967213114754
User 109910 improves AUC. Keeping the model.
Training on augumented user 43183 47/50 current_auc = 0.831967213114754
User 43183 AUC after training: 0.8299180327868851
User 43183 does not improve AUC. Reverting changes.
Training on augumented user 39667 48/50 current_auc = 0.831967213114754
User 39667 AUC after training: 0.8319672131147541
User 39667 improves AUC. Keeping the model.
Training on augumented user 27809 49/50 current_auc = 0.8319672131147541
User 27809 AUC after training: 0.8319672131147541
User 27809 does not improve AUC. Reverting changes.
[2024-12-02 17:57:23.279915] start test user 14473 34/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:23.954514] start test user 14473 34/568 recall augumented users by random, augumented_users = [53976, 128728, 24401, 117629, 113618, 126492, 137458, 7286, 48639, 19386, 8579, 49549, 22050, 1083, 137933, 118329, 67829, 118246, 110879, 132150, 79335, 133563, 103653, 90868, 9901, 40419, 20207, 79677, 123741, 129977, 47052, 105867, 70543, 47513, 32158, 3050, 98802, 89528, 57618, 58499, 26051, 110473, 39308, 128654, 116864, 112737, 32039, 88460, 8209, 66610]
[2024-12-02 17:57:23.989925] user = 14473 Cloud 34/568
[2024-12-02 17:57:24.036596] user = 14473 Local 34/568
[2024-12-02 17:57:24.200852] user = 14473 Local+ 34/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:27.104101] user = 14473 MPDA- 34/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6707852332852333
Training on augumented user 53976 0/50 current_auc = 0.6707852332852333
User 53976 AUC after training: 0.6706649831649831
User 53976 does not improve AUC. Reverting changes.
Training on augumented user 128728 1/50 current_auc = 0.6707852332852333
User 128728 AUC after training: 0.6709656084656085
User 128728 improves AUC. Keeping the model.
Training on augumented user 24401 2/50 current_auc = 0.6709656084656085
User 24401 AUC after training: 0.6716871091871092
User 24401 improves AUC. Keeping the model.
Training on augumented user 117629 3/50 current_auc = 0.6716871091871092
User 117629 AUC after training: 0.6714466089466089
User 117629 does not improve AUC. Reverting changes.
Training on augumented user 113618 4/50 current_auc = 0.6716871091871092
User 113618 AUC after training: 0.6711459836459837
User 113618 does not improve AUC. Reverting changes.
Training on augumented user 126492 5/50 current_auc = 0.6716871091871092
User 126492 AUC after training: 0.671506734006734
User 126492 does not improve AUC. Reverting changes.
Training on augumented user 137458 6/50 current_auc = 0.6716871091871092
User 137458 AUC after training: 0.6713263588263588
User 137458 does not improve AUC. Reverting changes.
Training on augumented user 7286 7/50 current_auc = 0.6716871091871092
User 7286 AUC after training: 0.6697931697931698
User 7286 does not improve AUC. Reverting changes.
Training on augumented user 48639 8/50 current_auc = 0.6716871091871092
User 48639 AUC after training: 0.6717772967772968
User 48639 improves AUC. Keeping the model.
Training on augumented user 19386 9/50 current_auc = 0.6717772967772968
User 19386 AUC after training: 0.6714766714766716
User 19386 does not improve AUC. Reverting changes.
Training on augumented user 8579 10/50 current_auc = 0.6717772967772968
User 8579 AUC after training: 0.672017797017797
User 8579 improves AUC. Keeping the model.
Training on augumented user 49549 11/50 current_auc = 0.672017797017797
User 49549 AUC after training: 0.6717171717171717
User 49549 does not improve AUC. Reverting changes.
Training on augumented user 22050 12/50 current_auc = 0.672017797017797
User 22050 AUC after training: 0.6714165464165465
User 22050 does not improve AUC. Reverting changes.
Training on augumented user 1083 13/50 current_auc = 0.672017797017797
User 1083 AUC after training: 0.6721380471380471
User 1083 improves AUC. Keeping the model.
Training on augumented user 137933 14/50 current_auc = 0.6721380471380471
User 137933 AUC after training: 0.671897546897547
User 137933 does not improve AUC. Reverting changes.
Training on augumented user 118329 15/50 current_auc = 0.6721380471380471
User 118329 AUC after training: 0.6714766714766716
User 118329 does not improve AUC. Reverting changes.
Training on augumented user 67829 16/50 current_auc = 0.6721380471380471
User 67829 AUC after training: 0.6716570466570467
User 67829 does not improve AUC. Reverting changes.
Training on augumented user 118246 17/50 current_auc = 0.6721380471380471
User 118246 AUC after training: 0.6718674843674843
User 118246 does not improve AUC. Reverting changes.
Training on augumented user 110879 18/50 current_auc = 0.6721380471380471
User 110879 AUC after training: 0.6721079846079846
User 110879 does not improve AUC. Reverting changes.
Training on augumented user 132150 19/50 current_auc = 0.6721380471380471
User 132150 AUC after training: 0.6713864838864838
User 132150 does not improve AUC. Reverting changes.
Training on augumented user 79335 20/50 current_auc = 0.6721380471380471
User 79335 AUC after training: 0.6714766714766716
User 79335 does not improve AUC. Reverting changes.
Training on augumented user 133563 21/50 current_auc = 0.6721380471380471
User 133563 AUC after training: 0.6719576719576721
User 133563 does not improve AUC. Reverting changes.
Training on augumented user 103653 22/50 current_auc = 0.6721380471380471
User 103653 AUC after training: 0.6729497354497354
User 103653 improves AUC. Keeping the model.
Training on augumented user 90868 23/50 current_auc = 0.6729497354497354
User 90868 AUC after training: 0.6720478595478596
User 90868 does not improve AUC. Reverting changes.
Training on augumented user 9901 24/50 current_auc = 0.6729497354497354
User 9901 AUC after training: 0.6724086099086098
User 9901 does not improve AUC. Reverting changes.
Training on augumented user 40419 25/50 current_auc = 0.6729497354497354
User 40419 AUC after training: 0.6731902356902357
User 40419 improves AUC. Keeping the model.
Training on augumented user 20207 26/50 current_auc = 0.6731902356902357
User 20207 AUC after training: 0.6701238576238576
User 20207 does not improve AUC. Reverting changes.
Training on augumented user 79677 27/50 current_auc = 0.6731902356902357
User 79677 AUC after training: 0.67252886002886
User 79677 does not improve AUC. Reverting changes.
Training on augumented user 123741 28/50 current_auc = 0.6731902356902357
User 123741 AUC after training: 0.6727994227994228
User 123741 does not improve AUC. Reverting changes.
Training on augumented user 129977 29/50 current_auc = 0.6731902356902357
User 129977 AUC after training: 0.6727693602693603
User 129977 does not improve AUC. Reverting changes.
Training on augumented user 47052 30/50 current_auc = 0.6731902356902357
User 47052 AUC after training: 0.6715969215969215
User 47052 does not improve AUC. Reverting changes.
Training on augumented user 105867 31/50 current_auc = 0.6731902356902357
User 105867 AUC after training: 0.673039923039923
User 105867 does not improve AUC. Reverting changes.
Training on augumented user 70543 32/50 current_auc = 0.6731902356902357
User 70543 AUC after training: 0.6713263588263588
User 70543 does not improve AUC. Reverting changes.
Training on augumented user 47513 33/50 current_auc = 0.6731902356902357
User 47513 AUC after training: 0.6730098605098604
User 47513 does not improve AUC. Reverting changes.
Training on augumented user 32158 34/50 current_auc = 0.6731902356902357
User 32158 AUC after training: 0.6726491101491101
User 32158 does not improve AUC. Reverting changes.
Training on augumented user 3050 35/50 current_auc = 0.6731902356902357
User 3050 AUC after training: 0.6730699855699855
User 3050 does not improve AUC. Reverting changes.
Training on augumented user 98802 36/50 current_auc = 0.6731902356902357
User 98802 AUC after training: 0.6727693602693603
User 98802 does not improve AUC. Reverting changes.
Training on augumented user 89528 37/50 current_auc = 0.6731902356902357
User 89528 AUC after training: 0.672588985088985
User 89528 does not improve AUC. Reverting changes.
Training on augumented user 57618 38/50 current_auc = 0.6731902356902357
User 57618 AUC after training: 0.6716269841269842
User 57618 does not improve AUC. Reverting changes.
Training on augumented user 58499 39/50 current_auc = 0.6731902356902357
User 58499 AUC after training: 0.6731301106301106
User 58499 does not improve AUC. Reverting changes.
Training on augumented user 26051 40/50 current_auc = 0.6731902356902357
User 26051 AUC after training: 0.671957671957672
User 26051 does not improve AUC. Reverting changes.
Training on augumented user 110473 41/50 current_auc = 0.6731902356902357
User 110473 AUC after training: 0.6731301106301106
User 110473 does not improve AUC. Reverting changes.
Training on augumented user 39308 42/50 current_auc = 0.6731902356902357
User 39308 AUC after training: 0.6735509860509861
User 39308 improves AUC. Keeping the model.
Training on augumented user 128654 43/50 current_auc = 0.6735509860509861
User 128654 AUC after training: 0.6735509860509861
User 128654 does not improve AUC. Reverting changes.
Training on augumented user 116864 44/50 current_auc = 0.6735509860509861
User 116864 AUC after training: 0.6707551707551708
User 116864 does not improve AUC. Reverting changes.
Training on augumented user 112737 45/50 current_auc = 0.6735509860509861
User 112737 AUC after training: 0.673881673881674
User 112737 improves AUC. Keeping the model.
Training on augumented user 32039 46/50 current_auc = 0.673881673881674
User 32039 AUC after training: 0.673490860990861
User 32039 does not improve AUC. Reverting changes.
Training on augumented user 88460 47/50 current_auc = 0.673881673881674
User 88460 AUC after training: 0.6736411736411736
User 88460 does not improve AUC. Reverting changes.
Training on augumented user 8209 48/50 current_auc = 0.673881673881674
User 8209 AUC after training: 0.6731902356902357
User 8209 does not improve AUC. Reverting changes.
Training on augumented user 66610 49/50 current_auc = 0.673881673881674
User 66610 AUC after training: 0.674001924001924
User 66610 improves AUC. Keeping the model.
[2024-12-02 17:57:57.735004] start test user 14512 35/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:58.155944] start test user 14512 35/568 recall augumented users by random, augumented_users = [57622, 76993, 38495, 74410, 37399, 40774, 137302, 19388, 122450, 82228, 67885, 136483, 422, 37293, 46411, 131775, 5786, 116715, 89460, 69466, 64819, 90579, 128809, 132187, 34157, 1387, 73474, 61884, 11910, 82819, 99233, 5627, 88843, 122335, 58526, 66989, 115541, 108456, 50550, 28662, 117798, 129628, 22162, 133921, 14776, 74083, 65410, 125605, 7940, 91227]
[2024-12-02 17:57:58.172588] user = 14512 Cloud 35/568
[2024-12-02 17:57:58.224096] user = 14512 Local 35/568
[2024-12-02 17:57:58.378212] user = 14512 Local+ 35/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:01.166094] user = 14512 MPDA- 35/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7991252050300711
Training on augumented user 57622 0/50 current_auc = 0.7991252050300711
User 57622 AUC after training: 0.7992345544013122
User 57622 improves AUC. Keeping the model.
Training on augumented user 76993 1/50 current_auc = 0.7992345544013122
User 76993 AUC after training: 0.7993439037725534
User 76993 improves AUC. Keeping the model.
Training on augumented user 38495 2/50 current_auc = 0.7993439037725534
User 38495 AUC after training: 0.7993499787376221
User 38495 improves AUC. Keeping the model.
Training on augumented user 74410 3/50 current_auc = 0.7993499787376221
User 74410 AUC after training: 0.7993560537026912
User 74410 improves AUC. Keeping the model.
Training on augumented user 37399 4/50 current_auc = 0.7993560537026912
User 37399 AUC after training: 0.7993560537026911
User 37399 does not improve AUC. Reverting changes.
Training on augumented user 40774 5/50 current_auc = 0.7993560537026912
User 40774 AUC after training: 0.7994046534232427
User 40774 improves AUC. Keeping the model.
Training on augumented user 137302 6/50 current_auc = 0.7994046534232427
User 137302 AUC after training: 0.7990766053095195
User 137302 does not improve AUC. Reverting changes.
Training on augumented user 19388 7/50 current_auc = 0.7994046534232427
User 19388 AUC after training: 0.7996112022355872
User 19388 improves AUC. Keeping the model.
Training on augumented user 122450 8/50 current_auc = 0.7996112022355872
User 122450 AUC after training: 0.799501852864346
User 122450 does not improve AUC. Reverting changes.
Training on augumented user 82228 9/50 current_auc = 0.7996112022355872
User 82228 AUC after training: 0.799143429925278
User 82228 does not improve AUC. Reverting changes.
Training on augumented user 67885 10/50 current_auc = 0.7996112022355872
User 67885 AUC after training: 0.7993317538424154
User 67885 does not improve AUC. Reverting changes.
Training on augumented user 136483 11/50 current_auc = 0.7996112022355872
User 136483 AUC after training: 0.7996962517465525
User 136483 improves AUC. Keeping the model.
Training on augumented user 422 12/50 current_auc = 0.7996962517465525
User 422 AUC after training: 0.7993925034931049
User 422 does not improve AUC. Reverting changes.
Training on augumented user 37293 13/50 current_auc = 0.7996962517465525
User 37293 AUC after training: 0.7996598019561387
User 37293 does not improve AUC. Reverting changes.
Training on augumented user 46411 14/50 current_auc = 0.7996962517465525
User 46411 AUC after training: 0.7995626025150355
User 46411 does not improve AUC. Reverting changes.
Training on augumented user 131775 15/50 current_auc = 0.7996962517465525
User 131775 AUC after training: 0.7995869023753113
User 131775 does not improve AUC. Reverting changes.
Training on augumented user 5786 16/50 current_auc = 0.7996962517465525
User 5786 AUC after training: 0.7998663507684831
User 5786 improves AUC. Keeping the model.
Training on augumented user 116715 17/50 current_auc = 0.7998663507684831
User 116715 AUC after training: 0.7997813012575177
User 116715 does not improve AUC. Reverting changes.
Training on augumented user 89460 18/50 current_auc = 0.7998663507684831
User 89460 AUC after training: 0.7993682036328291
User 89460 does not improve AUC. Reverting changes.
Training on augumented user 69466 19/50 current_auc = 0.7998663507684831
User 69466 AUC after training: 0.7996598019561387
User 69466 does not improve AUC. Reverting changes.
Training on augumented user 64819 20/50 current_auc = 0.7998663507684831
User 64819 AUC after training: 0.7994411032136566
User 64819 does not improve AUC. Reverting changes.
Training on augumented user 90579 21/50 current_auc = 0.7998663507684831
User 90579 AUC after training: 0.7999757001397241
User 90579 improves AUC. Keeping the model.
Training on augumented user 128809 22/50 current_auc = 0.7999757001397241
User 128809 AUC after training: 0.7991616548204847
User 128809 does not improve AUC. Reverting changes.
Training on augumented user 132187 23/50 current_auc = 0.7999757001397241
User 132187 AUC after training: 0.799009780693761
User 132187 does not improve AUC. Reverting changes.
Training on augumented user 34157 24/50 current_auc = 0.7999757001397241
User 34157 AUC after training: 0.7999635502095863
User 34157 does not improve AUC. Reverting changes.
Training on augumented user 1387 25/50 current_auc = 0.7999757001397241
User 1387 AUC after training: 0.7999028005588968
User 1387 does not improve AUC. Reverting changes.
Training on augumented user 73474 26/50 current_auc = 0.7999757001397241
User 73474 AUC after training: 0.7993074539821395
User 73474 does not improve AUC. Reverting changes.
Training on augumented user 61884 27/50 current_auc = 0.7999757001397241
User 61884 AUC after training: 0.7998420509082074
User 61884 does not improve AUC. Reverting changes.
Training on augumented user 11910 28/50 current_auc = 0.7999757001397241
User 11910 AUC after training: 0.7997327015369662
User 11910 does not improve AUC. Reverting changes.
Training on augumented user 82819 29/50 current_auc = 0.7999757001397241
User 82819 AUC after training: 0.7998056011177936
User 82819 does not improve AUC. Reverting changes.
Training on augumented user 99233 30/50 current_auc = 0.7999757001397241
User 99233 AUC after training: 0.7992710041917259
User 99233 does not improve AUC. Reverting changes.
Training on augumented user 5627 31/50 current_auc = 0.7999757001397241
User 5627 AUC after training: 0.799890650628759
User 5627 does not improve AUC. Reverting changes.
Training on augumented user 88843 32/50 current_auc = 0.7999757001397241
User 88843 AUC after training: 0.8000728995808275
User 88843 improves AUC. Keeping the model.
Training on augumented user 122335 33/50 current_auc = 0.8000728995808275
User 122335 AUC after training: 0.7997691513273799
User 122335 does not improve AUC. Reverting changes.
Training on augumented user 58526 34/50 current_auc = 0.8000728995808275
User 58526 AUC after training: 0.7994168033533807
User 58526 does not improve AUC. Reverting changes.
Training on augumented user 66989 35/50 current_auc = 0.8000728995808275
User 66989 AUC after training: 0.7997448514671041
User 66989 does not improve AUC. Reverting changes.
Training on augumented user 115541 36/50 current_auc = 0.8000728995808275
User 115541 AUC after training: 0.7995626025150355
User 115541 does not improve AUC. Reverting changes.
Training on augumented user 108456 37/50 current_auc = 0.8000728995808275
User 108456 AUC after training: 0.8002308486726202
User 108456 improves AUC. Keeping the model.
Training on augumented user 50550 38/50 current_auc = 0.8002308486726202
User 50550 AUC after training: 0.8004799222404471
User 50550 improves AUC. Keeping the model.
Training on augumented user 28662 39/50 current_auc = 0.8004799222404471
User 28662 AUC after training: 0.8005163720308608
User 28662 improves AUC. Keeping the model.
Training on augumented user 117798 40/50 current_auc = 0.8005163720308608
User 117798 AUC after training: 0.8004677723103091
User 117798 does not improve AUC. Reverting changes.
Training on augumented user 129628 41/50 current_auc = 0.8005163720308608
User 129628 AUC after training: 0.8004495474151023
User 129628 does not improve AUC. Reverting changes.
Training on augumented user 22162 42/50 current_auc = 0.8005163720308608
User 22162 AUC after training: 0.8005588967863435
User 22162 improves AUC. Keeping the model.
Training on augumented user 133921 43/50 current_auc = 0.8005588967863435
User 133921 AUC after training: 0.800364497904137
User 133921 does not improve AUC. Reverting changes.
Training on augumented user 14776 44/50 current_auc = 0.8005588967863435
User 14776 AUC after training: 0.8002186987424823
User 14776 does not improve AUC. Reverting changes.
Training on augumented user 74083 45/50 current_auc = 0.8005588967863435
User 74083 AUC after training: 0.8000485997205516
User 74083 does not improve AUC. Reverting changes.
Training on augumented user 65410 46/50 current_auc = 0.8005588967863435
User 65410 AUC after training: 0.8003280481137234
User 65410 does not improve AUC. Reverting changes.
Training on augumented user 125605 47/50 current_auc = 0.8005588967863435
User 125605 AUC after training: 0.8003280481137234
User 125605 does not improve AUC. Reverting changes.
Training on augumented user 7940 48/50 current_auc = 0.8005588967863435
User 7940 AUC after training: 0.8004009476945507
User 7940 does not improve AUC. Reverting changes.
Training on augumented user 91227 49/50 current_auc = 0.8005588967863435
User 91227 AUC after training: 0.800364497904137
User 91227 does not improve AUC. Reverting changes.
[2024-12-02 17:58:35.613658] start test user 14519 36/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:36.382228] start test user 14519 36/568 recall augumented users by random, augumented_users = [60909, 62591, 109529, 58594, 73602, 36907, 6502, 2009, 107194, 8909, 44900, 81673, 64797, 80764, 70372, 34143, 28487, 64048, 65035, 110742, 16623, 48478, 41895, 102811, 69004, 137256, 76926, 102800, 18595, 131443, 21084, 123726, 105947, 74602, 125280, 21379, 76938, 29368, 103556, 104065, 20603, 56440, 12789, 36759, 62193, 12831, 124775, 47594, 79111, 18534]
[2024-12-02 17:58:36.400614] user = 14519 Cloud 36/568
[2024-12-02 17:58:36.426400] user = 14519 Local 36/568
[2024-12-02 17:58:36.568684] user = 14519 Local+ 36/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:38.709119] user = 14519 MPDA- 36/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4578059071729958
Training on augumented user 60909 0/50 current_auc = 0.4578059071729958
User 60909 AUC after training: 0.45593061415846226
User 60909 does not improve AUC. Reverting changes.
Training on augumented user 62591 1/50 current_auc = 0.4578059071729958
User 62591 AUC after training: 0.45757149554617904
User 62591 does not improve AUC. Reverting changes.
Training on augumented user 109529 2/50 current_auc = 0.4578059071729958
User 109529 AUC after training: 0.4571026722925457
User 109529 does not improve AUC. Reverting changes.
Training on augumented user 58594 3/50 current_auc = 0.4578059071729958
User 58594 AUC after training: 0.4571026722925457
User 58594 does not improve AUC. Reverting changes.
Training on augumented user 73602 4/50 current_auc = 0.4578059071729958
User 73602 AUC after training: 0.4571026722925457
User 73602 does not improve AUC. Reverting changes.
Training on augumented user 36907 5/50 current_auc = 0.4578059071729958
User 36907 AUC after training: 0.45686826066572894
User 36907 does not improve AUC. Reverting changes.
Training on augumented user 6502 6/50 current_auc = 0.4578059071729958
User 6502 AUC after training: 0.4566338490389123
User 6502 does not improve AUC. Reverting changes.
Training on augumented user 2009 7/50 current_auc = 0.4578059071729958
User 2009 AUC after training: 0.45616502578527895
User 2009 does not improve AUC. Reverting changes.
Training on augumented user 107194 8/50 current_auc = 0.4578059071729958
User 107194 AUC after training: 0.4571026722925457
User 107194 does not improve AUC. Reverting changes.
Training on augumented user 8909 9/50 current_auc = 0.4578059071729958
User 8909 AUC after training: 0.45663384903891235
User 8909 does not improve AUC. Reverting changes.
Training on augumented user 44900 10/50 current_auc = 0.4578059071729958
User 44900 AUC after training: 0.45686826066572905
User 44900 does not improve AUC. Reverting changes.
Training on augumented user 81673 11/50 current_auc = 0.4578059071729958
User 81673 AUC after training: 0.45804031879981244
User 81673 improves AUC. Keeping the model.
Training on augumented user 64797 12/50 current_auc = 0.45804031879981244
User 64797 AUC after training: 0.45616502578527895
User 64797 does not improve AUC. Reverting changes.
Training on augumented user 80764 13/50 current_auc = 0.45804031879981244
User 80764 AUC after training: 0.4580403187998125
User 80764 improves AUC. Keeping the model.
Training on augumented user 70372 14/50 current_auc = 0.4580403187998125
User 70372 AUC after training: 0.456868260665729
User 70372 does not improve AUC. Reverting changes.
Training on augumented user 34143 15/50 current_auc = 0.4580403187998125
User 34143 AUC after training: 0.4559306141584623
User 34143 does not improve AUC. Reverting changes.
Training on augumented user 28487 16/50 current_auc = 0.4580403187998125
User 28487 AUC after training: 0.456165025785279
User 28487 does not improve AUC. Reverting changes.
Training on augumented user 64048 17/50 current_auc = 0.4580403187998125
User 64048 AUC after training: 0.4566338490389123
User 64048 does not improve AUC. Reverting changes.
Training on augumented user 65035 18/50 current_auc = 0.4580403187998125
User 65035 AUC after training: 0.45663384903891235
User 65035 does not improve AUC. Reverting changes.
Training on augumented user 110742 19/50 current_auc = 0.4580403187998125
User 110742 AUC after training: 0.45780590717299574
User 110742 does not improve AUC. Reverting changes.
Training on augumented user 16623 20/50 current_auc = 0.4580403187998125
User 16623 AUC after training: 0.4573370839193624
User 16623 does not improve AUC. Reverting changes.
Training on augumented user 48478 21/50 current_auc = 0.4580403187998125
User 48478 AUC after training: 0.4547585560243788
User 48478 does not improve AUC. Reverting changes.
Training on augumented user 41895 22/50 current_auc = 0.4580403187998125
User 41895 AUC after training: 0.4578059071729958
User 41895 does not improve AUC. Reverting changes.
Training on augumented user 102811 23/50 current_auc = 0.4580403187998125
User 102811 AUC after training: 0.4571026722925457
User 102811 does not improve AUC. Reverting changes.
Training on augumented user 69004 24/50 current_auc = 0.4580403187998125
User 69004 AUC after training: 0.45757149554617915
User 69004 does not improve AUC. Reverting changes.
Training on augumented user 137256 25/50 current_auc = 0.4580403187998125
User 137256 AUC after training: 0.4578059071729958
User 137256 does not improve AUC. Reverting changes.
Training on augumented user 76926 26/50 current_auc = 0.4580403187998125
User 76926 AUC after training: 0.45639943741209565
User 76926 does not improve AUC. Reverting changes.
Training on augumented user 102800 27/50 current_auc = 0.4580403187998125
User 102800 AUC after training: 0.456868260665729
User 102800 does not improve AUC. Reverting changes.
Training on augumented user 18595 28/50 current_auc = 0.4580403187998125
User 18595 AUC after training: 0.45639943741209565
User 18595 does not improve AUC. Reverting changes.
Training on augumented user 131443 29/50 current_auc = 0.4580403187998125
User 131443 AUC after training: 0.45499296765119546
User 131443 does not improve AUC. Reverting changes.
Training on augumented user 21084 30/50 current_auc = 0.4580403187998125
User 21084 AUC after training: 0.45639943741209565
User 21084 does not improve AUC. Reverting changes.
Training on augumented user 123726 31/50 current_auc = 0.4580403187998125
User 123726 AUC after training: 0.45757149554617904
User 123726 does not improve AUC. Reverting changes.
Training on augumented user 105947 32/50 current_auc = 0.4580403187998125
User 105947 AUC after training: 0.4571026722925457
User 105947 does not improve AUC. Reverting changes.
Training on augumented user 74602 33/50 current_auc = 0.4580403187998125
User 74602 AUC after training: 0.4578059071729958
User 74602 does not improve AUC. Reverting changes.
Training on augumented user 125280 34/50 current_auc = 0.4580403187998125
User 125280 AUC after training: 0.45757149554617904
User 125280 does not improve AUC. Reverting changes.
Training on augumented user 21379 35/50 current_auc = 0.4580403187998125
User 21379 AUC after training: 0.4575714955461791
User 21379 does not improve AUC. Reverting changes.
Training on augumented user 76938 36/50 current_auc = 0.4580403187998125
User 76938 AUC after training: 0.4578059071729958
User 76938 does not improve AUC. Reverting changes.
Training on augumented user 29368 37/50 current_auc = 0.4580403187998125
User 29368 AUC after training: 0.4552273792780122
User 29368 does not improve AUC. Reverting changes.
Training on augumented user 103556 38/50 current_auc = 0.4580403187998125
User 103556 AUC after training: 0.4571026722925457
User 103556 does not improve AUC. Reverting changes.
Training on augumented user 104065 39/50 current_auc = 0.4580403187998125
User 104065 AUC after training: 0.456868260665729
User 104065 does not improve AUC. Reverting changes.
Training on augumented user 20603 40/50 current_auc = 0.4580403187998125
User 20603 AUC after training: 0.45757149554617915
User 20603 does not improve AUC. Reverting changes.
Training on augumented user 56440 41/50 current_auc = 0.4580403187998125
User 56440 AUC after training: 0.45593061415846226
User 56440 does not improve AUC. Reverting changes.
Training on augumented user 12789 42/50 current_auc = 0.4580403187998125
User 12789 AUC after training: 0.4575714955461791
User 12789 does not improve AUC. Reverting changes.
Training on augumented user 36759 43/50 current_auc = 0.4580403187998125
User 36759 AUC after training: 0.45663384903891235
User 36759 does not improve AUC. Reverting changes.
Training on augumented user 62193 44/50 current_auc = 0.4580403187998125
User 62193 AUC after training: 0.45757149554617915
User 62193 does not improve AUC. Reverting changes.
Training on augumented user 12831 45/50 current_auc = 0.4580403187998125
User 12831 AUC after training: 0.4573370839193624
User 12831 does not improve AUC. Reverting changes.
Training on augumented user 124775 46/50 current_auc = 0.4580403187998125
User 124775 AUC after training: 0.4552273792780122
User 124775 does not improve AUC. Reverting changes.
Training on augumented user 47594 47/50 current_auc = 0.4580403187998125
User 47594 AUC after training: 0.45710267229254575
User 47594 does not improve AUC. Reverting changes.
Training on augumented user 79111 48/50 current_auc = 0.4580403187998125
User 79111 AUC after training: 0.4578059071729958
User 79111 does not improve AUC. Reverting changes.
Training on augumented user 18534 49/50 current_auc = 0.4580403187998125
User 18534 AUC after training: 0.4571026722925457
User 18534 does not improve AUC. Reverting changes.
[2024-12-02 17:59:04.357998] start test user 14544 37/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:05.133081] start test user 14544 37/568 recall augumented users by random, augumented_users = [51166, 115876, 21866, 73753, 86084, 126856, 10050, 49959, 12085, 16879, 61618, 58961, 22235, 17035, 54002, 9372, 127761, 130914, 117931, 6659, 93776, 74125, 126787, 59613, 126035, 34875, 2532, 131977, 134638, 35538, 14375, 72509, 77650, 64212, 73842, 116374, 106920, 16397, 97297, 108868, 32361, 12768, 110993, 102395, 130132, 38353, 104005, 49362, 40069, 82156]
[2024-12-02 17:59:05.148645] user = 14544 Cloud 37/568
[2024-12-02 17:59:05.190339] user = 14544 Local 37/568
[2024-12-02 17:59:05.265111] user = 14544 Local+ 37/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:07.486910] user = 14544 MPDA- 37/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9411764705882353
Training on augumented user 51166 0/50 current_auc = 0.9411764705882353
User 51166 AUC after training: 0.9411764705882353
User 51166 does not improve AUC. Reverting changes.
Training on augumented user 115876 1/50 current_auc = 0.9411764705882353
User 115876 AUC after training: 0.9411764705882353
User 115876 does not improve AUC. Reverting changes.
Training on augumented user 21866 2/50 current_auc = 0.9411764705882353
User 21866 AUC after training: 0.9411764705882353
User 21866 does not improve AUC. Reverting changes.
Training on augumented user 73753 3/50 current_auc = 0.9411764705882353
User 73753 AUC after training: 0.9411764705882353
User 73753 does not improve AUC. Reverting changes.
Training on augumented user 86084 4/50 current_auc = 0.9411764705882353
User 86084 AUC after training: 0.9411764705882353
User 86084 does not improve AUC. Reverting changes.
Training on augumented user 126856 5/50 current_auc = 0.9411764705882353
User 126856 AUC after training: 0.9411764705882353
User 126856 does not improve AUC. Reverting changes.
Training on augumented user 10050 6/50 current_auc = 0.9411764705882353
User 10050 AUC after training: 0.9411764705882353
User 10050 does not improve AUC. Reverting changes.
Training on augumented user 49959 7/50 current_auc = 0.9411764705882353
User 49959 AUC after training: 0.9411764705882353
User 49959 does not improve AUC. Reverting changes.
Training on augumented user 12085 8/50 current_auc = 0.9411764705882353
User 12085 AUC after training: 0.9411764705882353
User 12085 does not improve AUC. Reverting changes.
Training on augumented user 16879 9/50 current_auc = 0.9411764705882353
User 16879 AUC after training: 0.9411764705882353
User 16879 does not improve AUC. Reverting changes.
Training on augumented user 61618 10/50 current_auc = 0.9411764705882353
User 61618 AUC after training: 0.9411764705882353
User 61618 does not improve AUC. Reverting changes.
Training on augumented user 58961 11/50 current_auc = 0.9411764705882353
User 58961 AUC after training: 0.9411764705882353
User 58961 does not improve AUC. Reverting changes.
Training on augumented user 22235 12/50 current_auc = 0.9411764705882353
User 22235 AUC after training: 0.9411764705882353
User 22235 does not improve AUC. Reverting changes.
Training on augumented user 17035 13/50 current_auc = 0.9411764705882353
User 17035 AUC after training: 0.9411764705882353
User 17035 does not improve AUC. Reverting changes.
Training on augumented user 54002 14/50 current_auc = 0.9411764705882353
User 54002 AUC after training: 0.9411764705882353
User 54002 does not improve AUC. Reverting changes.
Training on augumented user 9372 15/50 current_auc = 0.9411764705882353
User 9372 AUC after training: 0.9411764705882353
User 9372 does not improve AUC. Reverting changes.
Training on augumented user 127761 16/50 current_auc = 0.9411764705882353
User 127761 AUC after training: 0.9411764705882353
User 127761 does not improve AUC. Reverting changes.
Training on augumented user 130914 17/50 current_auc = 0.9411764705882353
User 130914 AUC after training: 0.9411764705882353
User 130914 does not improve AUC. Reverting changes.
Training on augumented user 117931 18/50 current_auc = 0.9411764705882353
User 117931 AUC after training: 0.9411764705882353
User 117931 does not improve AUC. Reverting changes.
Training on augumented user 6659 19/50 current_auc = 0.9411764705882353
User 6659 AUC after training: 0.9411764705882353
User 6659 does not improve AUC. Reverting changes.
Training on augumented user 93776 20/50 current_auc = 0.9411764705882353
User 93776 AUC after training: 0.9411764705882353
User 93776 does not improve AUC. Reverting changes.
Training on augumented user 74125 21/50 current_auc = 0.9411764705882353
User 74125 AUC after training: 0.9411764705882353
User 74125 does not improve AUC. Reverting changes.
Training on augumented user 126787 22/50 current_auc = 0.9411764705882353
User 126787 AUC after training: 0.9411764705882353
User 126787 does not improve AUC. Reverting changes.
Training on augumented user 59613 23/50 current_auc = 0.9411764705882353
User 59613 AUC after training: 0.9411764705882353
User 59613 does not improve AUC. Reverting changes.
Training on augumented user 126035 24/50 current_auc = 0.9411764705882353
User 126035 AUC after training: 0.9411764705882353
User 126035 does not improve AUC. Reverting changes.
Training on augumented user 34875 25/50 current_auc = 0.9411764705882353
User 34875 AUC after training: 0.9411764705882353
User 34875 does not improve AUC. Reverting changes.
Training on augumented user 2532 26/50 current_auc = 0.9411764705882353
User 2532 AUC after training: 0.9411764705882353
User 2532 does not improve AUC. Reverting changes.
Training on augumented user 131977 27/50 current_auc = 0.9411764705882353
User 131977 AUC after training: 0.9411764705882353
User 131977 does not improve AUC. Reverting changes.
Training on augumented user 134638 28/50 current_auc = 0.9411764705882353
User 134638 AUC after training: 0.9411764705882353
User 134638 does not improve AUC. Reverting changes.
Training on augumented user 35538 29/50 current_auc = 0.9411764705882353
User 35538 AUC after training: 0.9411764705882353
User 35538 does not improve AUC. Reverting changes.
Training on augumented user 14375 30/50 current_auc = 0.9411764705882353
User 14375 AUC after training: 0.9411764705882353
User 14375 does not improve AUC. Reverting changes.
Training on augumented user 72509 31/50 current_auc = 0.9411764705882353
User 72509 AUC after training: 0.9411764705882353
User 72509 does not improve AUC. Reverting changes.
Training on augumented user 77650 32/50 current_auc = 0.9411764705882353
User 77650 AUC after training: 0.9411764705882353
User 77650 does not improve AUC. Reverting changes.
Training on augumented user 64212 33/50 current_auc = 0.9411764705882353
User 64212 AUC after training: 0.9411764705882353
User 64212 does not improve AUC. Reverting changes.
Training on augumented user 73842 34/50 current_auc = 0.9411764705882353
User 73842 AUC after training: 0.9411764705882353
User 73842 does not improve AUC. Reverting changes.
Training on augumented user 116374 35/50 current_auc = 0.9411764705882353
User 116374 AUC after training: 0.9411764705882353
User 116374 does not improve AUC. Reverting changes.
Training on augumented user 106920 36/50 current_auc = 0.9411764705882353
User 106920 AUC after training: 0.9411764705882353
User 106920 does not improve AUC. Reverting changes.
Training on augumented user 16397 37/50 current_auc = 0.9411764705882353
User 16397 AUC after training: 0.9411764705882353
User 16397 does not improve AUC. Reverting changes.
Training on augumented user 97297 38/50 current_auc = 0.9411764705882353
User 97297 AUC after training: 0.9411764705882353
User 97297 does not improve AUC. Reverting changes.
Training on augumented user 108868 39/50 current_auc = 0.9411764705882353
User 108868 AUC after training: 0.9411764705882353
User 108868 does not improve AUC. Reverting changes.
Training on augumented user 32361 40/50 current_auc = 0.9411764705882353
User 32361 AUC after training: 0.9411764705882353
User 32361 does not improve AUC. Reverting changes.
Training on augumented user 12768 41/50 current_auc = 0.9411764705882353
User 12768 AUC after training: 0.9411764705882353
User 12768 does not improve AUC. Reverting changes.
Training on augumented user 110993 42/50 current_auc = 0.9411764705882353
User 110993 AUC after training: 0.9411764705882353
User 110993 does not improve AUC. Reverting changes.
Training on augumented user 102395 43/50 current_auc = 0.9411764705882353
User 102395 AUC after training: 0.9411764705882353
User 102395 does not improve AUC. Reverting changes.
Training on augumented user 130132 44/50 current_auc = 0.9411764705882353
User 130132 AUC after training: 0.9411764705882353
User 130132 does not improve AUC. Reverting changes.
Training on augumented user 38353 45/50 current_auc = 0.9411764705882353
User 38353 AUC after training: 0.9411764705882353
User 38353 does not improve AUC. Reverting changes.
Training on augumented user 104005 46/50 current_auc = 0.9411764705882353
User 104005 AUC after training: 0.9411764705882353
User 104005 does not improve AUC. Reverting changes.
Training on augumented user 49362 47/50 current_auc = 0.9411764705882353
User 49362 AUC after training: 0.9411764705882353
User 49362 does not improve AUC. Reverting changes.
Training on augumented user 40069 48/50 current_auc = 0.9411764705882353
User 40069 AUC after training: 0.9411764705882353
User 40069 does not improve AUC. Reverting changes.
Training on augumented user 82156 49/50 current_auc = 0.9411764705882353
User 82156 AUC after training: 0.9411764705882353
User 82156 does not improve AUC. Reverting changes.
[2024-12-02 17:59:34.586223] start test user 14549 38/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:34.992087] start test user 14549 38/568 recall augumented users by random, augumented_users = [45241, 49754, 50262, 60243, 76971, 27719, 97883, 60340, 134163, 127921, 61749, 36195, 1699, 48586, 124736, 63030, 55340, 59099, 96565, 12047, 21432, 8541, 26965, 30961, 115171, 94987, 2055, 56493, 108697, 29857, 96515, 136086, 36488, 21729, 122108, 127206, 100921, 103372, 122071, 17421, 29850, 47116, 37968, 67391, 9932, 34770, 24201, 92514, 65823, 48682]
[2024-12-02 17:59:35.007344] user = 14549 Cloud 38/568
[2024-12-02 17:59:35.025024] user = 14549 Local 38/568
[2024-12-02 17:59:35.074763] user = 14549 Local+ 38/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:37.797527] user = 14549 MPDA- 38/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7436795994993742
Training on augumented user 45241 0/50 current_auc = 0.7436795994993742
User 45241 AUC after training: 0.742052565707134
User 45241 does not improve AUC. Reverting changes.
Training on augumented user 49754 1/50 current_auc = 0.7436795994993742
User 49754 AUC after training: 0.7429286608260326
User 49754 does not improve AUC. Reverting changes.
Training on augumented user 50262 2/50 current_auc = 0.7436795994993742
User 50262 AUC after training: 0.7434292866082604
User 50262 does not improve AUC. Reverting changes.
Training on augumented user 60243 3/50 current_auc = 0.7436795994993742
User 60243 AUC after training: 0.7439299123904882
User 60243 improves AUC. Keeping the model.
Training on augumented user 76971 4/50 current_auc = 0.7439299123904882
User 76971 AUC after training: 0.7436795994993742
User 76971 does not improve AUC. Reverting changes.
Training on augumented user 27719 5/50 current_auc = 0.7439299123904882
User 27719 AUC after training: 0.7429286608260326
User 27719 does not improve AUC. Reverting changes.
Training on augumented user 97883 6/50 current_auc = 0.7439299123904882
User 97883 AUC after training: 0.7431789737171465
User 97883 does not improve AUC. Reverting changes.
Training on augumented user 60340 7/50 current_auc = 0.7439299123904882
User 60340 AUC after training: 0.7434292866082602
User 60340 does not improve AUC. Reverting changes.
Training on augumented user 134163 8/50 current_auc = 0.7439299123904882
User 134163 AUC after training: 0.7451814768460576
User 134163 improves AUC. Keeping the model.
Training on augumented user 127921 9/50 current_auc = 0.7451814768460576
User 127921 AUC after training: 0.7453066332916145
User 127921 improves AUC. Keeping the model.
Training on augumented user 61749 10/50 current_auc = 0.7453066332916145
User 61749 AUC after training: 0.7455569461827284
User 61749 improves AUC. Keeping the model.
Training on augumented user 36195 11/50 current_auc = 0.7455569461827284
User 36195 AUC after training: 0.7454317897371714
User 36195 does not improve AUC. Reverting changes.
Training on augumented user 1699 12/50 current_auc = 0.7455569461827284
User 1699 AUC after training: 0.7458072590738423
User 1699 improves AUC. Keeping the model.
Training on augumented user 48586 13/50 current_auc = 0.7458072590738423
User 48586 AUC after training: 0.7453066332916145
User 48586 does not improve AUC. Reverting changes.
Training on augumented user 124736 14/50 current_auc = 0.7458072590738423
User 124736 AUC after training: 0.7453066332916146
User 124736 does not improve AUC. Reverting changes.
Training on augumented user 63030 15/50 current_auc = 0.7458072590738423
User 63030 AUC after training: 0.7453066332916145
User 63030 does not improve AUC. Reverting changes.
Training on augumented user 55340 16/50 current_auc = 0.7458072590738423
User 55340 AUC after training: 0.7458072590738423
User 55340 does not improve AUC. Reverting changes.
Training on augumented user 59099 17/50 current_auc = 0.7458072590738423
User 59099 AUC after training: 0.7453066332916146
User 59099 does not improve AUC. Reverting changes.
Training on augumented user 96565 18/50 current_auc = 0.7458072590738423
User 96565 AUC after training: 0.7456821026282854
User 96565 does not improve AUC. Reverting changes.
Training on augumented user 12047 19/50 current_auc = 0.7458072590738423
User 12047 AUC after training: 0.7460575719649563
User 12047 improves AUC. Keeping the model.
Training on augumented user 21432 20/50 current_auc = 0.7460575719649563
User 21432 AUC after training: 0.7453066332916145
User 21432 does not improve AUC. Reverting changes.
Training on augumented user 8541 21/50 current_auc = 0.7460575719649563
User 8541 AUC after training: 0.7448060075093867
User 8541 does not improve AUC. Reverting changes.
Training on augumented user 26965 22/50 current_auc = 0.7460575719649563
User 26965 AUC after training: 0.7468085106382979
User 26965 improves AUC. Keeping the model.
Training on augumented user 30961 23/50 current_auc = 0.7468085106382979
User 30961 AUC after training: 0.7470588235294118
User 30961 improves AUC. Keeping the model.
Training on augumented user 115171 24/50 current_auc = 0.7470588235294118
User 115171 AUC after training: 0.7470588235294118
User 115171 does not improve AUC. Reverting changes.
Training on augumented user 94987 25/50 current_auc = 0.7470588235294118
User 94987 AUC after training: 0.7478097622027535
User 94987 improves AUC. Keeping the model.
Training on augumented user 2055 26/50 current_auc = 0.7478097622027535
User 2055 AUC after training: 0.746558197747184
User 2055 does not improve AUC. Reverting changes.
Training on augumented user 56493 27/50 current_auc = 0.7478097622027535
User 56493 AUC after training: 0.7506883604505631
User 56493 improves AUC. Keeping the model.
Training on augumented user 108697 28/50 current_auc = 0.7506883604505631
User 108697 AUC after training: 0.7506883604505631
User 108697 does not improve AUC. Reverting changes.
Training on augumented user 29857 29/50 current_auc = 0.7506883604505631
User 29857 AUC after training: 0.7506883604505632
User 29857 improves AUC. Keeping the model.
Training on augumented user 96515 30/50 current_auc = 0.7506883604505632
User 96515 AUC after training: 0.7499374217772216
User 96515 does not improve AUC. Reverting changes.
Training on augumented user 136086 31/50 current_auc = 0.7506883604505632
User 136086 AUC after training: 0.7509386733416771
User 136086 improves AUC. Keeping the model.
Training on augumented user 36488 32/50 current_auc = 0.7509386733416771
User 36488 AUC after training: 0.7501877346683354
User 36488 does not improve AUC. Reverting changes.
Training on augumented user 21729 33/50 current_auc = 0.7509386733416771
User 21729 AUC after training: 0.7501877346683354
User 21729 does not improve AUC. Reverting changes.
Training on augumented user 122108 34/50 current_auc = 0.7509386733416771
User 122108 AUC after training: 0.7504380475594494
User 122108 does not improve AUC. Reverting changes.
Training on augumented user 127206 35/50 current_auc = 0.7509386733416771
User 127206 AUC after training: 0.7506883604505632
User 127206 does not improve AUC. Reverting changes.
Training on augumented user 100921 36/50 current_auc = 0.7509386733416771
User 100921 AUC after training: 0.7506883604505632
User 100921 does not improve AUC. Reverting changes.
Training on augumented user 103372 37/50 current_auc = 0.7509386733416771
User 103372 AUC after training: 0.7504380475594494
User 103372 does not improve AUC. Reverting changes.
Training on augumented user 122071 38/50 current_auc = 0.7509386733416771
User 122071 AUC after training: 0.7506883604505632
User 122071 does not improve AUC. Reverting changes.
Training on augumented user 17421 39/50 current_auc = 0.7509386733416771
User 17421 AUC after training: 0.7501877346683354
User 17421 does not improve AUC. Reverting changes.
Training on augumented user 29850 40/50 current_auc = 0.7509386733416771
User 29850 AUC after training: 0.7504380475594493
User 29850 does not improve AUC. Reverting changes.
Training on augumented user 47116 41/50 current_auc = 0.7509386733416771
User 47116 AUC after training: 0.7509386733416771
User 47116 does not improve AUC. Reverting changes.
Training on augumented user 37968 42/50 current_auc = 0.7509386733416771
User 37968 AUC after training: 0.7501877346683354
User 37968 does not improve AUC. Reverting changes.
Training on augumented user 67391 43/50 current_auc = 0.7509386733416771
User 67391 AUC after training: 0.7506883604505633
User 67391 does not improve AUC. Reverting changes.
Training on augumented user 9932 44/50 current_auc = 0.7509386733416771
User 9932 AUC after training: 0.7519399249061327
User 9932 improves AUC. Keeping the model.
Training on augumented user 34770 45/50 current_auc = 0.7519399249061327
User 34770 AUC after training: 0.7504380475594493
User 34770 does not improve AUC. Reverting changes.
Training on augumented user 24201 46/50 current_auc = 0.7519399249061327
User 24201 AUC after training: 0.7511889862327911
User 24201 does not improve AUC. Reverting changes.
Training on augumented user 92514 47/50 current_auc = 0.7519399249061327
User 92514 AUC after training: 0.7521902377972466
User 92514 improves AUC. Keeping the model.
Training on augumented user 65823 48/50 current_auc = 0.7521902377972466
User 65823 AUC after training: 0.7509386733416772
User 65823 does not improve AUC. Reverting changes.
Training on augumented user 48682 49/50 current_auc = 0.7521902377972466
User 48682 AUC after training: 0.7511889862327911
User 48682 does not improve AUC. Reverting changes.
[2024-12-02 18:00:07.207255] start test user 14573 39/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:07.798763] start test user 14573 39/568 recall augumented users by random, augumented_users = [130820, 130514, 133215, 7115, 24334, 118499, 100682, 102006, 23559, 10865, 4011, 110837, 22735, 106346, 14167, 114629, 64485, 81502, 98822, 68156, 80128, 105893, 85435, 8063, 32068, 28651, 99560, 13438, 23203, 115281, 6913, 73632, 104731, 85924, 99060, 35666, 84419, 109114, 98568, 122567, 122793, 118758, 92630, 112212, 63461, 102637, 13902, 84826, 74568, 105445]
[2024-12-02 18:00:07.813165] user = 14573 Cloud 39/568
[2024-12-02 18:00:07.822238] user = 14573 Local 39/568
[2024-12-02 18:00:07.876430] user = 14573 Local+ 39/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:10.122468] user = 14573 MPDA- 39/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 130820 0/50 current_auc = 1.0
User 130820 AUC after training: 1.0
User 130820 does not improve AUC. Reverting changes.
Training on augumented user 130514 1/50 current_auc = 1.0
User 130514 AUC after training: 1.0
User 130514 does not improve AUC. Reverting changes.
Training on augumented user 133215 2/50 current_auc = 1.0
User 133215 AUC after training: 1.0
User 133215 does not improve AUC. Reverting changes.
Training on augumented user 7115 3/50 current_auc = 1.0
User 7115 AUC after training: 1.0
User 7115 does not improve AUC. Reverting changes.
Training on augumented user 24334 4/50 current_auc = 1.0
User 24334 AUC after training: 1.0
User 24334 does not improve AUC. Reverting changes.
Training on augumented user 118499 5/50 current_auc = 1.0
User 118499 AUC after training: 1.0
User 118499 does not improve AUC. Reverting changes.
Training on augumented user 100682 6/50 current_auc = 1.0
User 100682 AUC after training: 1.0
User 100682 does not improve AUC. Reverting changes.
Training on augumented user 102006 7/50 current_auc = 1.0
User 102006 AUC after training: 1.0
User 102006 does not improve AUC. Reverting changes.
Training on augumented user 23559 8/50 current_auc = 1.0
User 23559 AUC after training: 1.0
User 23559 does not improve AUC. Reverting changes.
Training on augumented user 10865 9/50 current_auc = 1.0
User 10865 AUC after training: 1.0
User 10865 does not improve AUC. Reverting changes.
Training on augumented user 4011 10/50 current_auc = 1.0
User 4011 AUC after training: 1.0
User 4011 does not improve AUC. Reverting changes.
Training on augumented user 110837 11/50 current_auc = 1.0
User 110837 AUC after training: 1.0
User 110837 does not improve AUC. Reverting changes.
Training on augumented user 22735 12/50 current_auc = 1.0
User 22735 AUC after training: 1.0
User 22735 does not improve AUC. Reverting changes.
Training on augumented user 106346 13/50 current_auc = 1.0
User 106346 AUC after training: 1.0
User 106346 does not improve AUC. Reverting changes.
Training on augumented user 14167 14/50 current_auc = 1.0
User 14167 AUC after training: 1.0
User 14167 does not improve AUC. Reverting changes.
Training on augumented user 114629 15/50 current_auc = 1.0
User 114629 AUC after training: 1.0
User 114629 does not improve AUC. Reverting changes.
Training on augumented user 64485 16/50 current_auc = 1.0
User 64485 AUC after training: 1.0
User 64485 does not improve AUC. Reverting changes.
Training on augumented user 81502 17/50 current_auc = 1.0
User 81502 AUC after training: 1.0
User 81502 does not improve AUC. Reverting changes.
Training on augumented user 98822 18/50 current_auc = 1.0
User 98822 AUC after training: 1.0
User 98822 does not improve AUC. Reverting changes.
Training on augumented user 68156 19/50 current_auc = 1.0
User 68156 AUC after training: 1.0
User 68156 does not improve AUC. Reverting changes.
Training on augumented user 80128 20/50 current_auc = 1.0
User 80128 AUC after training: 1.0
User 80128 does not improve AUC. Reverting changes.
Training on augumented user 105893 21/50 current_auc = 1.0
User 105893 AUC after training: 1.0
User 105893 does not improve AUC. Reverting changes.
Training on augumented user 85435 22/50 current_auc = 1.0
User 85435 AUC after training: 1.0
User 85435 does not improve AUC. Reverting changes.
Training on augumented user 8063 23/50 current_auc = 1.0
User 8063 AUC after training: 1.0
User 8063 does not improve AUC. Reverting changes.
Training on augumented user 32068 24/50 current_auc = 1.0
User 32068 AUC after training: 1.0
User 32068 does not improve AUC. Reverting changes.
Training on augumented user 28651 25/50 current_auc = 1.0
User 28651 AUC after training: 1.0
User 28651 does not improve AUC. Reverting changes.
Training on augumented user 99560 26/50 current_auc = 1.0
User 99560 AUC after training: 1.0
User 99560 does not improve AUC. Reverting changes.
Training on augumented user 13438 27/50 current_auc = 1.0
User 13438 AUC after training: 1.0
User 13438 does not improve AUC. Reverting changes.
Training on augumented user 23203 28/50 current_auc = 1.0
User 23203 AUC after training: 1.0
User 23203 does not improve AUC. Reverting changes.
Training on augumented user 115281 29/50 current_auc = 1.0
User 115281 AUC after training: 1.0
User 115281 does not improve AUC. Reverting changes.
Training on augumented user 6913 30/50 current_auc = 1.0
User 6913 AUC after training: 1.0
User 6913 does not improve AUC. Reverting changes.
Training on augumented user 73632 31/50 current_auc = 1.0
User 73632 AUC after training: 1.0
User 73632 does not improve AUC. Reverting changes.
Training on augumented user 104731 32/50 current_auc = 1.0
User 104731 AUC after training: 1.0
User 104731 does not improve AUC. Reverting changes.
Training on augumented user 85924 33/50 current_auc = 1.0
User 85924 AUC after training: 1.0
User 85924 does not improve AUC. Reverting changes.
Training on augumented user 99060 34/50 current_auc = 1.0
User 99060 AUC after training: 1.0
User 99060 does not improve AUC. Reverting changes.
Training on augumented user 35666 35/50 current_auc = 1.0
User 35666 AUC after training: 1.0
User 35666 does not improve AUC. Reverting changes.
Training on augumented user 84419 36/50 current_auc = 1.0
User 84419 AUC after training: 1.0
User 84419 does not improve AUC. Reverting changes.
Training on augumented user 109114 37/50 current_auc = 1.0
User 109114 AUC after training: 1.0
User 109114 does not improve AUC. Reverting changes.
Training on augumented user 98568 38/50 current_auc = 1.0
User 98568 AUC after training: 1.0
User 98568 does not improve AUC. Reverting changes.
Training on augumented user 122567 39/50 current_auc = 1.0
User 122567 AUC after training: 1.0
User 122567 does not improve AUC. Reverting changes.
Training on augumented user 122793 40/50 current_auc = 1.0
User 122793 AUC after training: 1.0
User 122793 does not improve AUC. Reverting changes.
Training on augumented user 118758 41/50 current_auc = 1.0
User 118758 AUC after training: 1.0
User 118758 does not improve AUC. Reverting changes.
Training on augumented user 92630 42/50 current_auc = 1.0
User 92630 AUC after training: 1.0
User 92630 does not improve AUC. Reverting changes.
Training on augumented user 112212 43/50 current_auc = 1.0
User 112212 AUC after training: 1.0
User 112212 does not improve AUC. Reverting changes.
Training on augumented user 63461 44/50 current_auc = 1.0
User 63461 AUC after training: 1.0
User 63461 does not improve AUC. Reverting changes.
Training on augumented user 102637 45/50 current_auc = 1.0
User 102637 AUC after training: 1.0
User 102637 does not improve AUC. Reverting changes.
Training on augumented user 13902 46/50 current_auc = 1.0
User 13902 AUC after training: 1.0
User 13902 does not improve AUC. Reverting changes.
Training on augumented user 84826 47/50 current_auc = 1.0
User 84826 AUC after training: 1.0
User 84826 does not improve AUC. Reverting changes.
Training on augumented user 74568 48/50 current_auc = 1.0
User 74568 AUC after training: 1.0
User 74568 does not improve AUC. Reverting changes.
Training on augumented user 105445 49/50 current_auc = 1.0
User 105445 AUC after training: 1.0
User 105445 does not improve AUC. Reverting changes.
[2024-12-02 18:00:42.942167] start test user 14577 40/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:43.544028] start test user 14577 40/568 recall augumented users by random, augumented_users = [38698, 116601, 66263, 97098, 70095, 750, 78529, 19553, 51514, 85681, 40840, 135848, 51603, 70253, 52562, 102032, 97496, 94735, 87001, 83903, 99028, 38231, 94584, 133890, 48482, 107094, 129944, 73015, 25982, 16199, 85982, 16968, 108976, 35435, 134760, 20461, 313, 7995, 127002, 55301, 97951, 80067, 13979, 59900, 66775, 97700, 11732, 43929, 70574, 32750]
[2024-12-02 18:00:43.558505] user = 14577 Cloud 40/568
[2024-12-02 18:00:43.570054] user = 14577 Local 40/568
[2024-12-02 18:00:43.623314] user = 14577 Local+ 40/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:46.466754] user = 14577 MPDA- 40/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.44628099173553715
Training on augumented user 38698 0/50 current_auc = 0.44628099173553715
User 38698 AUC after training: 0.4421487603305785
User 38698 does not improve AUC. Reverting changes.
Training on augumented user 116601 1/50 current_auc = 0.44628099173553715
User 116601 AUC after training: 0.4504132231404958
User 116601 improves AUC. Keeping the model.
Training on augumented user 66263 2/50 current_auc = 0.4504132231404958
User 66263 AUC after training: 0.4545454545454545
User 66263 improves AUC. Keeping the model.
Training on augumented user 97098 3/50 current_auc = 0.4545454545454545
User 97098 AUC after training: 0.4545454545454545
User 97098 does not improve AUC. Reverting changes.
Training on augumented user 70095 4/50 current_auc = 0.4545454545454545
User 70095 AUC after training: 0.4545454545454545
User 70095 does not improve AUC. Reverting changes.
Training on augumented user 750 5/50 current_auc = 0.4545454545454545
User 750 AUC after training: 0.4545454545454545
User 750 does not improve AUC. Reverting changes.
Training on augumented user 78529 6/50 current_auc = 0.4545454545454545
User 78529 AUC after training: 0.4545454545454545
User 78529 does not improve AUC. Reverting changes.
Training on augumented user 19553 7/50 current_auc = 0.4545454545454545
User 19553 AUC after training: 0.45041322314049587
User 19553 does not improve AUC. Reverting changes.
Training on augumented user 51514 8/50 current_auc = 0.4545454545454545
User 51514 AUC after training: 0.4545454545454545
User 51514 does not improve AUC. Reverting changes.
Training on augumented user 85681 9/50 current_auc = 0.4545454545454545
User 85681 AUC after training: 0.4545454545454545
User 85681 does not improve AUC. Reverting changes.
Training on augumented user 40840 10/50 current_auc = 0.4545454545454545
User 40840 AUC after training: 0.4545454545454545
User 40840 does not improve AUC. Reverting changes.
Training on augumented user 135848 11/50 current_auc = 0.4545454545454545
User 135848 AUC after training: 0.4628099173553719
User 135848 improves AUC. Keeping the model.
Training on augumented user 51603 12/50 current_auc = 0.4628099173553719
User 51603 AUC after training: 0.4545454545454546
User 51603 does not improve AUC. Reverting changes.
Training on augumented user 70253 13/50 current_auc = 0.4628099173553719
User 70253 AUC after training: 0.4628099173553719
User 70253 does not improve AUC. Reverting changes.
Training on augumented user 52562 14/50 current_auc = 0.4628099173553719
User 52562 AUC after training: 0.4669421487603306
User 52562 improves AUC. Keeping the model.
Training on augumented user 102032 15/50 current_auc = 0.4669421487603306
User 102032 AUC after training: 0.4628099173553719
User 102032 does not improve AUC. Reverting changes.
Training on augumented user 97496 16/50 current_auc = 0.4669421487603306
User 97496 AUC after training: 0.4628099173553719
User 97496 does not improve AUC. Reverting changes.
Training on augumented user 94735 17/50 current_auc = 0.4669421487603306
User 94735 AUC after training: 0.4669421487603306
User 94735 does not improve AUC. Reverting changes.
Training on augumented user 87001 18/50 current_auc = 0.4669421487603306
User 87001 AUC after training: 0.4628099173553719
User 87001 does not improve AUC. Reverting changes.
Training on augumented user 83903 19/50 current_auc = 0.4669421487603306
User 83903 AUC after training: 0.4628099173553719
User 83903 does not improve AUC. Reverting changes.
Training on augumented user 99028 20/50 current_auc = 0.4669421487603306
User 99028 AUC after training: 0.4545454545454546
User 99028 does not improve AUC. Reverting changes.
Training on augumented user 38231 21/50 current_auc = 0.4669421487603306
User 38231 AUC after training: 0.45867768595041325
User 38231 does not improve AUC. Reverting changes.
Training on augumented user 94584 22/50 current_auc = 0.4669421487603306
User 94584 AUC after training: 0.4752066115702479
User 94584 improves AUC. Keeping the model.
Training on augumented user 133890 23/50 current_auc = 0.4752066115702479
User 133890 AUC after training: 0.45867768595041325
User 133890 does not improve AUC. Reverting changes.
Training on augumented user 48482 24/50 current_auc = 0.4752066115702479
User 48482 AUC after training: 0.45041322314049587
User 48482 does not improve AUC. Reverting changes.
Training on augumented user 107094 25/50 current_auc = 0.4752066115702479
User 107094 AUC after training: 0.4669421487603306
User 107094 does not improve AUC. Reverting changes.
Training on augumented user 129944 26/50 current_auc = 0.4752066115702479
User 129944 AUC after training: 0.4752066115702479
User 129944 does not improve AUC. Reverting changes.
Training on augumented user 73015 27/50 current_auc = 0.4752066115702479
User 73015 AUC after training: 0.45867768595041325
User 73015 does not improve AUC. Reverting changes.
Training on augumented user 25982 28/50 current_auc = 0.4752066115702479
User 25982 AUC after training: 0.4669421487603306
User 25982 does not improve AUC. Reverting changes.
Training on augumented user 16199 29/50 current_auc = 0.4752066115702479
User 16199 AUC after training: 0.47107438016528924
User 16199 does not improve AUC. Reverting changes.
Training on augumented user 85982 30/50 current_auc = 0.4752066115702479
User 85982 AUC after training: 0.4752066115702479
User 85982 does not improve AUC. Reverting changes.
Training on augumented user 16968 31/50 current_auc = 0.4752066115702479
User 16968 AUC after training: 0.4669421487603306
User 16968 does not improve AUC. Reverting changes.
Training on augumented user 108976 32/50 current_auc = 0.4752066115702479
User 108976 AUC after training: 0.4752066115702479
User 108976 does not improve AUC. Reverting changes.
Training on augumented user 35435 33/50 current_auc = 0.4752066115702479
User 35435 AUC after training: 0.4669421487603306
User 35435 does not improve AUC. Reverting changes.
Training on augumented user 134760 34/50 current_auc = 0.4752066115702479
User 134760 AUC after training: 0.4752066115702479
User 134760 does not improve AUC. Reverting changes.
Training on augumented user 20461 35/50 current_auc = 0.4752066115702479
User 20461 AUC after training: 0.4752066115702479
User 20461 does not improve AUC. Reverting changes.
Training on augumented user 313 36/50 current_auc = 0.4752066115702479
User 313 AUC after training: 0.47107438016528924
User 313 does not improve AUC. Reverting changes.
Training on augumented user 7995 37/50 current_auc = 0.4752066115702479
User 7995 AUC after training: 0.4752066115702479
User 7995 does not improve AUC. Reverting changes.
Training on augumented user 127002 38/50 current_auc = 0.4752066115702479
User 127002 AUC after training: 0.4669421487603306
User 127002 does not improve AUC. Reverting changes.
Training on augumented user 55301 39/50 current_auc = 0.4752066115702479
User 55301 AUC after training: 0.4752066115702479
User 55301 does not improve AUC. Reverting changes.
Training on augumented user 97951 40/50 current_auc = 0.4752066115702479
User 97951 AUC after training: 0.4752066115702479
User 97951 does not improve AUC. Reverting changes.
Training on augumented user 80067 41/50 current_auc = 0.4752066115702479
User 80067 AUC after training: 0.4669421487603306
User 80067 does not improve AUC. Reverting changes.
Training on augumented user 13979 42/50 current_auc = 0.4752066115702479
User 13979 AUC after training: 0.47933884297520657
User 13979 improves AUC. Keeping the model.
Training on augumented user 59900 43/50 current_auc = 0.47933884297520657
User 59900 AUC after training: 0.45867768595041325
User 59900 does not improve AUC. Reverting changes.
Training on augumented user 66775 44/50 current_auc = 0.47933884297520657
User 66775 AUC after training: 0.47107438016528924
User 66775 does not improve AUC. Reverting changes.
Training on augumented user 97700 45/50 current_auc = 0.47933884297520657
User 97700 AUC after training: 0.4669421487603306
User 97700 does not improve AUC. Reverting changes.
Training on augumented user 11732 46/50 current_auc = 0.47933884297520657
User 11732 AUC after training: 0.47933884297520657
User 11732 does not improve AUC. Reverting changes.
Training on augumented user 43929 47/50 current_auc = 0.47933884297520657
User 43929 AUC after training: 0.4752066115702479
User 43929 does not improve AUC. Reverting changes.
Training on augumented user 70574 48/50 current_auc = 0.47933884297520657
User 70574 AUC after training: 0.47933884297520657
User 70574 does not improve AUC. Reverting changes.
Training on augumented user 32750 49/50 current_auc = 0.47933884297520657
User 32750 AUC after training: 0.48347107438016523
User 32750 improves AUC. Keeping the model.
[2024-12-02 18:01:14.227722] start test user 14589 41/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:14.991416] start test user 14589 41/568 recall augumented users by random, augumented_users = [10629, 110954, 136319, 60121, 39058, 52763, 100120, 2877, 107618, 93806, 83423, 124823, 11386, 8506, 116131, 137728, 79260, 8302, 24832, 111906, 5959, 108330, 1862, 85085, 18349, 92919, 109903, 73816, 53292, 23166, 39632, 43411, 120220, 101245, 97144, 32673, 6661, 129697, 130399, 38165, 120824, 121473, 54150, 117905, 10740, 104472, 66566, 77385, 50264, 91590]
[2024-12-02 18:01:15.008305] user = 14589 Cloud 41/568
[2024-12-02 18:01:15.025408] user = 14589 Local 41/568
[2024-12-02 18:01:15.101001] user = 14589 Local+ 41/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:17.759469] user = 14589 MPDA- 41/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6085106382978723
Training on augumented user 10629 0/50 current_auc = 0.6085106382978723
User 10629 AUC after training: 0.6031914893617022
User 10629 does not improve AUC. Reverting changes.
Training on augumented user 110954 1/50 current_auc = 0.6085106382978723
User 110954 AUC after training: 0.6031914893617022
User 110954 does not improve AUC. Reverting changes.
Training on augumented user 136319 2/50 current_auc = 0.6085106382978723
User 136319 AUC after training: 0.6085106382978723
User 136319 does not improve AUC. Reverting changes.
Training on augumented user 60121 3/50 current_auc = 0.6085106382978723
User 60121 AUC after training: 0.6095744680851064
User 60121 improves AUC. Keeping the model.
Training on augumented user 39058 4/50 current_auc = 0.6095744680851064
User 39058 AUC after training: 0.6159574468085106
User 39058 improves AUC. Keeping the model.
Training on augumented user 52763 5/50 current_auc = 0.6159574468085106
User 52763 AUC after training: 0.6170212765957447
User 52763 improves AUC. Keeping the model.
Training on augumented user 100120 6/50 current_auc = 0.6170212765957447
User 100120 AUC after training: 0.6191489361702128
User 100120 improves AUC. Keeping the model.
Training on augumented user 2877 7/50 current_auc = 0.6191489361702128
User 2877 AUC after training: 0.6106382978723405
User 2877 does not improve AUC. Reverting changes.
Training on augumented user 107618 8/50 current_auc = 0.6191489361702128
User 107618 AUC after training: 0.6159574468085106
User 107618 does not improve AUC. Reverting changes.
Training on augumented user 93806 9/50 current_auc = 0.6191489361702128
User 93806 AUC after training: 0.6191489361702127
User 93806 does not improve AUC. Reverting changes.
Training on augumented user 83423 10/50 current_auc = 0.6191489361702128
User 83423 AUC after training: 0.6180851063829788
User 83423 does not improve AUC. Reverting changes.
Training on augumented user 124823 11/50 current_auc = 0.6191489361702128
User 124823 AUC after training: 0.6191489361702127
User 124823 does not improve AUC. Reverting changes.
Training on augumented user 11386 12/50 current_auc = 0.6191489361702128
User 11386 AUC after training: 0.6180851063829788
User 11386 does not improve AUC. Reverting changes.
Training on augumented user 8506 13/50 current_auc = 0.6191489361702128
User 8506 AUC after training: 0.6159574468085106
User 8506 does not improve AUC. Reverting changes.
Training on augumented user 116131 14/50 current_auc = 0.6191489361702128
User 116131 AUC after training: 0.6180851063829788
User 116131 does not improve AUC. Reverting changes.
Training on augumented user 137728 15/50 current_auc = 0.6191489361702128
User 137728 AUC after training: 0.6180851063829788
User 137728 does not improve AUC. Reverting changes.
Training on augumented user 79260 16/50 current_auc = 0.6191489361702128
User 79260 AUC after training: 0.6170212765957447
User 79260 does not improve AUC. Reverting changes.
Training on augumented user 8302 17/50 current_auc = 0.6191489361702128
User 8302 AUC after training: 0.6212765957446809
User 8302 improves AUC. Keeping the model.
Training on augumented user 24832 18/50 current_auc = 0.6212765957446809
User 24832 AUC after training: 0.6223404255319148
User 24832 improves AUC. Keeping the model.
Training on augumented user 111906 19/50 current_auc = 0.6223404255319148
User 111906 AUC after training: 0.6202127659574469
User 111906 does not improve AUC. Reverting changes.
Training on augumented user 5959 20/50 current_auc = 0.6223404255319148
User 5959 AUC after training: 0.6202127659574468
User 5959 does not improve AUC. Reverting changes.
Training on augumented user 108330 21/50 current_auc = 0.6223404255319148
User 108330 AUC after training: 0.6202127659574469
User 108330 does not improve AUC. Reverting changes.
Training on augumented user 1862 22/50 current_auc = 0.6223404255319148
User 1862 AUC after training: 0.6223404255319148
User 1862 does not improve AUC. Reverting changes.
Training on augumented user 85085 23/50 current_auc = 0.6223404255319148
User 85085 AUC after training: 0.6191489361702128
User 85085 does not improve AUC. Reverting changes.
Training on augumented user 18349 24/50 current_auc = 0.6223404255319148
User 18349 AUC after training: 0.6276595744680852
User 18349 improves AUC. Keeping the model.
Training on augumented user 92919 25/50 current_auc = 0.6276595744680852
User 92919 AUC after training: 0.625
User 92919 does not improve AUC. Reverting changes.
Training on augumented user 109903 26/50 current_auc = 0.6276595744680852
User 109903 AUC after training: 0.6223404255319148
User 109903 does not improve AUC. Reverting changes.
Training on augumented user 73816 27/50 current_auc = 0.6276595744680852
User 73816 AUC after training: 0.6223404255319148
User 73816 does not improve AUC. Reverting changes.
Training on augumented user 53292 28/50 current_auc = 0.6276595744680852
User 53292 AUC after training: 0.6276595744680852
User 53292 does not improve AUC. Reverting changes.
Training on augumented user 23166 29/50 current_auc = 0.6276595744680852
User 23166 AUC after training: 0.6180851063829788
User 23166 does not improve AUC. Reverting changes.
Training on augumented user 39632 30/50 current_auc = 0.6276595744680852
User 39632 AUC after training: 0.6223404255319148
User 39632 does not improve AUC. Reverting changes.
Training on augumented user 43411 31/50 current_auc = 0.6276595744680852
User 43411 AUC after training: 0.624468085106383
User 43411 does not improve AUC. Reverting changes.
Training on augumented user 120220 32/50 current_auc = 0.6276595744680852
User 120220 AUC after training: 0.6202127659574468
User 120220 does not improve AUC. Reverting changes.
Training on augumented user 101245 33/50 current_auc = 0.6276595744680852
User 101245 AUC after training: 0.6223404255319148
User 101245 does not improve AUC. Reverting changes.
Training on augumented user 97144 34/50 current_auc = 0.6276595744680852
User 97144 AUC after training: 0.6191489361702128
User 97144 does not improve AUC. Reverting changes.
Training on augumented user 32673 35/50 current_auc = 0.6276595744680852
User 32673 AUC after training: 0.625531914893617
User 32673 does not improve AUC. Reverting changes.
Training on augumented user 6661 36/50 current_auc = 0.6276595744680852
User 6661 AUC after training: 0.6180851063829788
User 6661 does not improve AUC. Reverting changes.
Training on augumented user 129697 37/50 current_auc = 0.6276595744680852
User 129697 AUC after training: 0.6212765957446807
User 129697 does not improve AUC. Reverting changes.
Training on augumented user 130399 38/50 current_auc = 0.6276595744680852
User 130399 AUC after training: 0.624468085106383
User 130399 does not improve AUC. Reverting changes.
Training on augumented user 38165 39/50 current_auc = 0.6276595744680852
User 38165 AUC after training: 0.6191489361702128
User 38165 does not improve AUC. Reverting changes.
Training on augumented user 120824 40/50 current_auc = 0.6276595744680852
User 120824 AUC after training: 0.625531914893617
User 120824 does not improve AUC. Reverting changes.
Training on augumented user 121473 41/50 current_auc = 0.6276595744680852
User 121473 AUC after training: 0.6202127659574468
User 121473 does not improve AUC. Reverting changes.
Training on augumented user 54150 42/50 current_auc = 0.6276595744680852
User 54150 AUC after training: 0.6276595744680851
User 54150 does not improve AUC. Reverting changes.
Training on augumented user 117905 43/50 current_auc = 0.6276595744680852
User 117905 AUC after training: 0.6180851063829788
User 117905 does not improve AUC. Reverting changes.
Training on augumented user 10740 44/50 current_auc = 0.6276595744680852
User 10740 AUC after training: 0.6223404255319148
User 10740 does not improve AUC. Reverting changes.
Training on augumented user 104472 45/50 current_auc = 0.6276595744680852
User 104472 AUC after training: 0.625531914893617
User 104472 does not improve AUC. Reverting changes.
Training on augumented user 66566 46/50 current_auc = 0.6276595744680852
User 66566 AUC after training: 0.626595744680851
User 66566 does not improve AUC. Reverting changes.
Training on augumented user 77385 47/50 current_auc = 0.6276595744680852
User 77385 AUC after training: 0.6175531914893616
User 77385 does not improve AUC. Reverting changes.
Training on augumented user 50264 48/50 current_auc = 0.6276595744680852
User 50264 AUC after training: 0.625531914893617
User 50264 does not improve AUC. Reverting changes.
Training on augumented user 91590 49/50 current_auc = 0.6276595744680852
User 91590 AUC after training: 0.6191489361702127
User 91590 does not improve AUC. Reverting changes.
[2024-12-02 18:01:47.968169] start test user 14633 42/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:48.518822] start test user 14633 42/568 recall augumented users by random, augumented_users = [55757, 82322, 20089, 70260, 61356, 67740, 122973, 50007, 64426, 39195, 24767, 50647, 21406, 106911, 3180, 138052, 112318, 3365, 6718, 31507, 69480, 6960, 113016, 72913, 119780, 43108, 9444, 31116, 110336, 50316, 98430, 72093, 59555, 77115, 99649, 67226, 5734, 118780, 76940, 105431, 18294, 19539, 12160, 28174, 56745, 67853, 98978, 22790, 134885, 28762]
[2024-12-02 18:01:48.539539] user = 14633 Cloud 42/568
[2024-12-02 18:01:48.566443] user = 14633 Local 42/568
[2024-12-02 18:01:48.608331] user = 14633 Local+ 42/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:50.198042] user = 14633 MPDA- 42/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7940909090909091
Training on augumented user 55757 0/50 current_auc = 0.7940909090909091
User 55757 AUC after training: 0.7940909090909091
User 55757 does not improve AUC. Reverting changes.
Training on augumented user 82322 1/50 current_auc = 0.7940909090909091
User 82322 AUC after training: 0.7931818181818181
User 82322 does not improve AUC. Reverting changes.
Training on augumented user 20089 2/50 current_auc = 0.7940909090909091
User 20089 AUC after training: 0.7954545454545455
User 20089 improves AUC. Keeping the model.
Training on augumented user 70260 3/50 current_auc = 0.7954545454545455
User 70260 AUC after training: 0.7940909090909091
User 70260 does not improve AUC. Reverting changes.
Training on augumented user 61356 4/50 current_auc = 0.7954545454545455
User 61356 AUC after training: 0.8004545454545454
User 61356 improves AUC. Keeping the model.
Training on augumented user 67740 5/50 current_auc = 0.8004545454545454
User 67740 AUC after training: 0.8004545454545454
User 67740 does not improve AUC. Reverting changes.
Training on augumented user 122973 6/50 current_auc = 0.8004545454545454
User 122973 AUC after training: 0.7995454545454546
User 122973 does not improve AUC. Reverting changes.
Training on augumented user 50007 7/50 current_auc = 0.8004545454545454
User 50007 AUC after training: 0.8004545454545454
User 50007 does not improve AUC. Reverting changes.
Training on augumented user 64426 8/50 current_auc = 0.8004545454545454
User 64426 AUC after training: 0.8004545454545454
User 64426 does not improve AUC. Reverting changes.
Training on augumented user 39195 9/50 current_auc = 0.8004545454545454
User 39195 AUC after training: 0.7890909090909091
User 39195 does not improve AUC. Reverting changes.
Training on augumented user 24767 10/50 current_auc = 0.8004545454545454
User 24767 AUC after training: 0.8004545454545454
User 24767 does not improve AUC. Reverting changes.
Training on augumented user 50647 11/50 current_auc = 0.8004545454545454
User 50647 AUC after training: 0.7995454545454546
User 50647 does not improve AUC. Reverting changes.
Training on augumented user 21406 12/50 current_auc = 0.8004545454545454
User 21406 AUC after training: 0.8004545454545454
User 21406 does not improve AUC. Reverting changes.
Training on augumented user 106911 13/50 current_auc = 0.8004545454545454
User 106911 AUC after training: 0.7909090909090909
User 106911 does not improve AUC. Reverting changes.
Training on augumented user 3180 14/50 current_auc = 0.8004545454545454
User 3180 AUC after training: 0.8004545454545454
User 3180 does not improve AUC. Reverting changes.
Training on augumented user 138052 15/50 current_auc = 0.8004545454545454
User 138052 AUC after training: 0.8004545454545454
User 138052 does not improve AUC. Reverting changes.
Training on augumented user 112318 16/50 current_auc = 0.8004545454545454
User 112318 AUC after training: 0.7995454545454544
User 112318 does not improve AUC. Reverting changes.
Training on augumented user 3365 17/50 current_auc = 0.8004545454545454
User 3365 AUC after training: 0.8013636363636364
User 3365 improves AUC. Keeping the model.
Training on augumented user 6718 18/50 current_auc = 0.8013636363636364
User 6718 AUC after training: 0.8004545454545454
User 6718 does not improve AUC. Reverting changes.
Training on augumented user 31507 19/50 current_auc = 0.8013636363636364
User 31507 AUC after training: 0.7986363636363636
User 31507 does not improve AUC. Reverting changes.
Training on augumented user 69480 20/50 current_auc = 0.8013636363636364
User 69480 AUC after training: 0.8004545454545454
User 69480 does not improve AUC. Reverting changes.
Training on augumented user 6960 21/50 current_auc = 0.8013636363636364
User 6960 AUC after training: 0.8004545454545454
User 6960 does not improve AUC. Reverting changes.
Training on augumented user 113016 22/50 current_auc = 0.8013636363636364
User 113016 AUC after training: 0.8004545454545454
User 113016 does not improve AUC. Reverting changes.
Training on augumented user 72913 23/50 current_auc = 0.8013636363636364
User 72913 AUC after training: 0.8004545454545454
User 72913 does not improve AUC. Reverting changes.
Training on augumented user 119780 24/50 current_auc = 0.8013636363636364
User 119780 AUC after training: 0.8004545454545454
User 119780 does not improve AUC. Reverting changes.
Training on augumented user 43108 25/50 current_auc = 0.8013636363636364
User 43108 AUC after training: 0.8004545454545454
User 43108 does not improve AUC. Reverting changes.
Training on augumented user 9444 26/50 current_auc = 0.8013636363636364
User 9444 AUC after training: 0.8004545454545454
User 9444 does not improve AUC. Reverting changes.
Training on augumented user 31116 27/50 current_auc = 0.8013636363636364
User 31116 AUC after training: 0.7995454545454544
User 31116 does not improve AUC. Reverting changes.
Training on augumented user 110336 28/50 current_auc = 0.8013636363636364
User 110336 AUC after training: 0.8004545454545454
User 110336 does not improve AUC. Reverting changes.
Training on augumented user 50316 29/50 current_auc = 0.8013636363636364
User 50316 AUC after training: 0.8013636363636364
User 50316 does not improve AUC. Reverting changes.
Training on augumented user 98430 30/50 current_auc = 0.8013636363636364
User 98430 AUC after training: 0.8013636363636364
User 98430 does not improve AUC. Reverting changes.
Training on augumented user 72093 31/50 current_auc = 0.8013636363636364
User 72093 AUC after training: 0.8013636363636364
User 72093 does not improve AUC. Reverting changes.
Training on augumented user 59555 32/50 current_auc = 0.8013636363636364
User 59555 AUC after training: 0.8004545454545454
User 59555 does not improve AUC. Reverting changes.
Training on augumented user 77115 33/50 current_auc = 0.8013636363636364
User 77115 AUC after training: 0.7986363636363637
User 77115 does not improve AUC. Reverting changes.
Training on augumented user 99649 34/50 current_auc = 0.8013636363636364
User 99649 AUC after training: 0.8004545454545454
User 99649 does not improve AUC. Reverting changes.
Training on augumented user 67226 35/50 current_auc = 0.8013636363636364
User 67226 AUC after training: 0.8022727272727272
User 67226 improves AUC. Keeping the model.
Training on augumented user 5734 36/50 current_auc = 0.8022727272727272
User 5734 AUC after training: 0.8013636363636364
User 5734 does not improve AUC. Reverting changes.
Training on augumented user 118780 37/50 current_auc = 0.8022727272727272
User 118780 AUC after training: 0.7990909090909091
User 118780 does not improve AUC. Reverting changes.
Training on augumented user 76940 38/50 current_auc = 0.8022727272727272
User 76940 AUC after training: 0.8004545454545454
User 76940 does not improve AUC. Reverting changes.
Training on augumented user 105431 39/50 current_auc = 0.8022727272727272
User 105431 AUC after training: 0.7995454545454546
User 105431 does not improve AUC. Reverting changes.
Training on augumented user 18294 40/50 current_auc = 0.8022727272727272
User 18294 AUC after training: 0.8022727272727272
User 18294 does not improve AUC. Reverting changes.
Training on augumented user 19539 41/50 current_auc = 0.8022727272727272
User 19539 AUC after training: 0.8004545454545454
User 19539 does not improve AUC. Reverting changes.
Training on augumented user 12160 42/50 current_auc = 0.8022727272727272
User 12160 AUC after training: 0.7986363636363636
User 12160 does not improve AUC. Reverting changes.
Training on augumented user 28174 43/50 current_auc = 0.8022727272727272
User 28174 AUC after training: 0.8013636363636364
User 28174 does not improve AUC. Reverting changes.
Training on augumented user 56745 44/50 current_auc = 0.8022727272727272
User 56745 AUC after training: 0.8013636363636364
User 56745 does not improve AUC. Reverting changes.
Training on augumented user 67853 45/50 current_auc = 0.8022727272727272
User 67853 AUC after training: 0.8022727272727272
User 67853 does not improve AUC. Reverting changes.
Training on augumented user 98978 46/50 current_auc = 0.8022727272727272
User 98978 AUC after training: 0.7995454545454546
User 98978 does not improve AUC. Reverting changes.
Training on augumented user 22790 47/50 current_auc = 0.8022727272727272
User 22790 AUC after training: 0.8013636363636364
User 22790 does not improve AUC. Reverting changes.
Training on augumented user 134885 48/50 current_auc = 0.8022727272727272
User 134885 AUC after training: 0.8022727272727272
User 134885 does not improve AUC. Reverting changes.
Training on augumented user 28762 49/50 current_auc = 0.8022727272727272
User 28762 AUC after training: 0.8013636363636364
User 28762 does not improve AUC. Reverting changes.
[2024-12-02 18:02:18.830854] start test user 14674 43/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:19.236590] start test user 14674 43/568 recall augumented users by random, augumented_users = [134717, 16825, 135809, 98744, 28016, 134841, 38265, 21573, 8557, 19906, 39539, 112041, 131853, 20149, 31246, 13895, 38666, 41193, 21039, 45985, 21183, 126189, 77690, 133477, 113435, 79513, 15571, 32696, 29895, 95105, 129613, 65396, 80556, 111750, 114322, 126511, 73802, 65880, 35056, 105446, 112497, 112679, 111161, 111295, 22652, 44809, 10871, 113658, 103395, 79435]
[2024-12-02 18:02:19.249685] user = 14674 Cloud 43/568
[2024-12-02 18:02:19.258680] user = 14674 Local 43/568
[2024-12-02 18:02:19.285554] user = 14674 Local+ 43/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:21.569219] user = 14674 MPDA- 43/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8333333333333334
Training on augumented user 134717 0/50 current_auc = 0.8333333333333334
User 134717 AUC after training: 0.8333333333333334
User 134717 does not improve AUC. Reverting changes.
Training on augumented user 16825 1/50 current_auc = 0.8333333333333334
User 16825 AUC after training: 0.8333333333333334
User 16825 does not improve AUC. Reverting changes.
Training on augumented user 135809 2/50 current_auc = 0.8333333333333334
User 135809 AUC after training: 0.8333333333333334
User 135809 does not improve AUC. Reverting changes.
Training on augumented user 98744 3/50 current_auc = 0.8333333333333334
User 98744 AUC after training: 0.8333333333333334
User 98744 does not improve AUC. Reverting changes.
Training on augumented user 28016 4/50 current_auc = 0.8333333333333334
User 28016 AUC after training: 0.8333333333333334
User 28016 does not improve AUC. Reverting changes.
Training on augumented user 134841 5/50 current_auc = 0.8333333333333334
User 134841 AUC after training: 0.8333333333333334
User 134841 does not improve AUC. Reverting changes.
Training on augumented user 38265 6/50 current_auc = 0.8333333333333334
User 38265 AUC after training: 0.8333333333333334
User 38265 does not improve AUC. Reverting changes.
Training on augumented user 21573 7/50 current_auc = 0.8333333333333334
User 21573 AUC after training: 0.8333333333333334
User 21573 does not improve AUC. Reverting changes.
Training on augumented user 8557 8/50 current_auc = 0.8333333333333334
User 8557 AUC after training: 0.8333333333333334
User 8557 does not improve AUC. Reverting changes.
Training on augumented user 19906 9/50 current_auc = 0.8333333333333334
User 19906 AUC after training: 0.8333333333333334
User 19906 does not improve AUC. Reverting changes.
Training on augumented user 39539 10/50 current_auc = 0.8333333333333334
User 39539 AUC after training: 0.8333333333333334
User 39539 does not improve AUC. Reverting changes.
Training on augumented user 112041 11/50 current_auc = 0.8333333333333334
User 112041 AUC after training: 0.8333333333333334
User 112041 does not improve AUC. Reverting changes.
Training on augumented user 131853 12/50 current_auc = 0.8333333333333334
User 131853 AUC after training: 0.8333333333333334
User 131853 does not improve AUC. Reverting changes.
Training on augumented user 20149 13/50 current_auc = 0.8333333333333334
User 20149 AUC after training: 0.8333333333333334
User 20149 does not improve AUC. Reverting changes.
Training on augumented user 31246 14/50 current_auc = 0.8333333333333334
User 31246 AUC after training: 0.8333333333333334
User 31246 does not improve AUC. Reverting changes.
Training on augumented user 13895 15/50 current_auc = 0.8333333333333334
User 13895 AUC after training: 0.8333333333333334
User 13895 does not improve AUC. Reverting changes.
Training on augumented user 38666 16/50 current_auc = 0.8333333333333334
User 38666 AUC after training: 0.8333333333333334
User 38666 does not improve AUC. Reverting changes.
Training on augumented user 41193 17/50 current_auc = 0.8333333333333334
User 41193 AUC after training: 0.8333333333333334
User 41193 does not improve AUC. Reverting changes.
Training on augumented user 21039 18/50 current_auc = 0.8333333333333334
User 21039 AUC after training: 0.8333333333333334
User 21039 does not improve AUC. Reverting changes.
Training on augumented user 45985 19/50 current_auc = 0.8333333333333334
User 45985 AUC after training: 0.8333333333333334
User 45985 does not improve AUC. Reverting changes.
Training on augumented user 21183 20/50 current_auc = 0.8333333333333334
User 21183 AUC after training: 0.8333333333333334
User 21183 does not improve AUC. Reverting changes.
Training on augumented user 126189 21/50 current_auc = 0.8333333333333334
User 126189 AUC after training: 0.8333333333333334
User 126189 does not improve AUC. Reverting changes.
Training on augumented user 77690 22/50 current_auc = 0.8333333333333334
User 77690 AUC after training: 0.8333333333333334
User 77690 does not improve AUC. Reverting changes.
Training on augumented user 133477 23/50 current_auc = 0.8333333333333334
User 133477 AUC after training: 0.8333333333333334
User 133477 does not improve AUC. Reverting changes.
Training on augumented user 113435 24/50 current_auc = 0.8333333333333334
User 113435 AUC after training: 0.8333333333333334
User 113435 does not improve AUC. Reverting changes.
Training on augumented user 79513 25/50 current_auc = 0.8333333333333334
User 79513 AUC after training: 0.8333333333333334
User 79513 does not improve AUC. Reverting changes.
Training on augumented user 15571 26/50 current_auc = 0.8333333333333334
User 15571 AUC after training: 0.8333333333333334
User 15571 does not improve AUC. Reverting changes.
Training on augumented user 32696 27/50 current_auc = 0.8333333333333334
User 32696 AUC after training: 0.8333333333333334
User 32696 does not improve AUC. Reverting changes.
Training on augumented user 29895 28/50 current_auc = 0.8333333333333334
User 29895 AUC after training: 0.8333333333333334
User 29895 does not improve AUC. Reverting changes.
Training on augumented user 95105 29/50 current_auc = 0.8333333333333334
User 95105 AUC after training: 0.8333333333333334
User 95105 does not improve AUC. Reverting changes.
Training on augumented user 129613 30/50 current_auc = 0.8333333333333334
User 129613 AUC after training: 0.8333333333333334
User 129613 does not improve AUC. Reverting changes.
Training on augumented user 65396 31/50 current_auc = 0.8333333333333334
User 65396 AUC after training: 0.8333333333333334
User 65396 does not improve AUC. Reverting changes.
Training on augumented user 80556 32/50 current_auc = 0.8333333333333334
User 80556 AUC after training: 0.8333333333333334
User 80556 does not improve AUC. Reverting changes.
Training on augumented user 111750 33/50 current_auc = 0.8333333333333334
User 111750 AUC after training: 0.8333333333333334
User 111750 does not improve AUC. Reverting changes.
Training on augumented user 114322 34/50 current_auc = 0.8333333333333334
User 114322 AUC after training: 0.8333333333333334
User 114322 does not improve AUC. Reverting changes.
Training on augumented user 126511 35/50 current_auc = 0.8333333333333334
User 126511 AUC after training: 0.8333333333333334
User 126511 does not improve AUC. Reverting changes.
Training on augumented user 73802 36/50 current_auc = 0.8333333333333334
User 73802 AUC after training: 0.8333333333333334
User 73802 does not improve AUC. Reverting changes.
Training on augumented user 65880 37/50 current_auc = 0.8333333333333334
User 65880 AUC after training: 0.8333333333333334
User 65880 does not improve AUC. Reverting changes.
Training on augumented user 35056 38/50 current_auc = 0.8333333333333334
User 35056 AUC after training: 0.8333333333333334
User 35056 does not improve AUC. Reverting changes.
Training on augumented user 105446 39/50 current_auc = 0.8333333333333334
User 105446 AUC after training: 0.8333333333333334
User 105446 does not improve AUC. Reverting changes.
Training on augumented user 112497 40/50 current_auc = 0.8333333333333334
User 112497 AUC after training: 0.8333333333333334
User 112497 does not improve AUC. Reverting changes.
Training on augumented user 112679 41/50 current_auc = 0.8333333333333334
User 112679 AUC after training: 0.8333333333333334
User 112679 does not improve AUC. Reverting changes.
Training on augumented user 111161 42/50 current_auc = 0.8333333333333334
User 111161 AUC after training: 0.8333333333333334
User 111161 does not improve AUC. Reverting changes.
Training on augumented user 111295 43/50 current_auc = 0.8333333333333334
User 111295 AUC after training: 0.8333333333333334
User 111295 does not improve AUC. Reverting changes.
Training on augumented user 22652 44/50 current_auc = 0.8333333333333334
User 22652 AUC after training: 0.8333333333333334
User 22652 does not improve AUC. Reverting changes.
Training on augumented user 44809 45/50 current_auc = 0.8333333333333334
User 44809 AUC after training: 0.8333333333333334
User 44809 does not improve AUC. Reverting changes.
Training on augumented user 10871 46/50 current_auc = 0.8333333333333334
User 10871 AUC after training: 0.8333333333333334
User 10871 does not improve AUC. Reverting changes.
Training on augumented user 113658 47/50 current_auc = 0.8333333333333334
User 113658 AUC after training: 0.8333333333333334
User 113658 does not improve AUC. Reverting changes.
Training on augumented user 103395 48/50 current_auc = 0.8333333333333334
User 103395 AUC after training: 0.8333333333333334
User 103395 does not improve AUC. Reverting changes.
Training on augumented user 79435 49/50 current_auc = 0.8333333333333334
User 79435 AUC after training: 0.8333333333333334
User 79435 does not improve AUC. Reverting changes.
[2024-12-02 18:02:51.452927] start test user 14678 44/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:51.884165] start test user 14678 44/568 recall augumented users by random, augumented_users = [133704, 44205, 57858, 15558, 131513, 374, 37921, 100021, 30594, 91989, 129473, 3085, 135901, 106956, 110778, 38836, 79335, 70869, 137321, 130196, 18862, 41370, 22556, 8962, 100318, 112876, 15840, 366, 102536, 955, 116272, 92560, 87745, 53702, 101655, 54133, 51075, 45218, 103328, 41261, 83634, 25370, 81493, 43597, 121927, 39273, 79513, 15126, 9925, 85337]
[2024-12-02 18:02:51.901012] user = 14678 Cloud 44/568
[2024-12-02 18:02:51.940315] user = 14678 Local 44/568
[2024-12-02 18:02:52.195593] user = 14678 Local+ 44/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:54.594151] user = 14678 MPDA- 44/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5349896480331263
Training on augumented user 133704 0/50 current_auc = 0.5349896480331263
User 133704 AUC after training: 0.5345755693581781
User 133704 does not improve AUC. Reverting changes.
Training on augumented user 44205 1/50 current_auc = 0.5349896480331263
User 44205 AUC after training: 0.5331521739130436
User 44205 does not improve AUC. Reverting changes.
Training on augumented user 57858 2/50 current_auc = 0.5349896480331263
User 57858 AUC after training: 0.5354554865424431
User 57858 improves AUC. Keeping the model.
Training on augumented user 15558 3/50 current_auc = 0.5354554865424431
User 15558 AUC after training: 0.5350414078674948
User 15558 does not improve AUC. Reverting changes.
Training on augumented user 131513 4/50 current_auc = 0.5354554865424431
User 131513 AUC after training: 0.5353519668737059
User 131513 does not improve AUC. Reverting changes.
Training on augumented user 374 5/50 current_auc = 0.5354554865424431
User 374 AUC after training: 0.5350931677018634
User 374 does not improve AUC. Reverting changes.
Training on augumented user 37921 6/50 current_auc = 0.5354554865424431
User 37921 AUC after training: 0.5346790890269152
User 37921 does not improve AUC. Reverting changes.
Training on augumented user 100021 7/50 current_auc = 0.5354554865424431
User 100021 AUC after training: 0.5349896480331263
User 100021 does not improve AUC. Reverting changes.
Training on augumented user 30594 8/50 current_auc = 0.5354554865424431
User 30594 AUC after training: 0.5348861283643893
User 30594 does not improve AUC. Reverting changes.
Training on augumented user 91989 9/50 current_auc = 0.5354554865424431
User 91989 AUC after training: 0.5354037267080746
User 91989 does not improve AUC. Reverting changes.
Training on augumented user 129473 10/50 current_auc = 0.5354554865424431
User 129473 AUC after training: 0.5355072463768116
User 129473 improves AUC. Keeping the model.
Training on augumented user 3085 11/50 current_auc = 0.5355072463768116
User 3085 AUC after training: 0.5356625258799173
User 3085 improves AUC. Keeping the model.
Training on augumented user 135901 12/50 current_auc = 0.5356625258799173
User 135901 AUC after training: 0.5351449275362319
User 135901 does not improve AUC. Reverting changes.
Training on augumented user 106956 13/50 current_auc = 0.5356625258799173
User 106956 AUC after training: 0.5357660455486543
User 106956 improves AUC. Keeping the model.
Training on augumented user 110778 14/50 current_auc = 0.5357660455486543
User 110778 AUC after training: 0.5350414078674949
User 110778 does not improve AUC. Reverting changes.
Training on augumented user 38836 15/50 current_auc = 0.5357660455486543
User 38836 AUC after training: 0.5355072463768117
User 38836 does not improve AUC. Reverting changes.
Training on augumented user 79335 16/50 current_auc = 0.5357660455486543
User 79335 AUC after training: 0.5360766045548655
User 79335 improves AUC. Keeping the model.
Training on augumented user 70869 17/50 current_auc = 0.5360766045548655
User 70869 AUC after training: 0.5358695652173913
User 70869 does not improve AUC. Reverting changes.
Training on augumented user 137321 18/50 current_auc = 0.5360766045548655
User 137321 AUC after training: 0.5363354037267081
User 137321 improves AUC. Keeping the model.
Training on augumented user 130196 19/50 current_auc = 0.5363354037267081
User 130196 AUC after training: 0.5357142857142858
User 130196 does not improve AUC. Reverting changes.
Training on augumented user 18862 20/50 current_auc = 0.5363354037267081
User 18862 AUC after training: 0.5355848861283644
User 18862 does not improve AUC. Reverting changes.
Training on augumented user 41370 21/50 current_auc = 0.5363354037267081
User 41370 AUC after training: 0.5359730848861284
User 41370 does not improve AUC. Reverting changes.
Training on augumented user 22556 22/50 current_auc = 0.5363354037267081
User 22556 AUC after training: 0.5355072463768116
User 22556 does not improve AUC. Reverting changes.
Training on augumented user 8962 23/50 current_auc = 0.5363354037267081
User 8962 AUC after training: 0.5347308488612837
User 8962 does not improve AUC. Reverting changes.
Training on augumented user 100318 24/50 current_auc = 0.5363354037267081
User 100318 AUC after training: 0.5365424430641823
User 100318 improves AUC. Keeping the model.
Training on augumented user 112876 25/50 current_auc = 0.5365424430641823
User 112876 AUC after training: 0.5364389233954452
User 112876 does not improve AUC. Reverting changes.
Training on augumented user 15840 26/50 current_auc = 0.5365424430641823
User 15840 AUC after training: 0.5362836438923396
User 15840 does not improve AUC. Reverting changes.
Training on augumented user 366 27/50 current_auc = 0.5365424430641823
User 366 AUC after training: 0.5365942028985508
User 366 improves AUC. Keeping the model.
Training on augumented user 102536 28/50 current_auc = 0.5365942028985508
User 102536 AUC after training: 0.5361024844720497
User 102536 does not improve AUC. Reverting changes.
Training on augumented user 955 29/50 current_auc = 0.5365942028985508
User 955 AUC after training: 0.5368012422360249
User 955 improves AUC. Keeping the model.
Training on augumented user 116272 30/50 current_auc = 0.5368012422360249
User 116272 AUC after training: 0.5359730848861284
User 116272 does not improve AUC. Reverting changes.
Training on augumented user 92560 31/50 current_auc = 0.5368012422360249
User 92560 AUC after training: 0.5371635610766046
User 92560 improves AUC. Keeping the model.
Training on augumented user 87745 32/50 current_auc = 0.5371635610766046
User 87745 AUC after training: 0.5371635610766046
User 87745 does not improve AUC. Reverting changes.
Training on augumented user 53702 33/50 current_auc = 0.5371635610766046
User 53702 AUC after training: 0.5371376811594203
User 53702 does not improve AUC. Reverting changes.
Training on augumented user 101655 34/50 current_auc = 0.5371635610766046
User 101655 AUC after training: 0.5369565217391304
User 101655 does not improve AUC. Reverting changes.
Training on augumented user 54133 35/50 current_auc = 0.5371635610766046
User 54133 AUC after training: 0.5381469979296066
User 54133 improves AUC. Keeping the model.
Training on augumented user 51075 36/50 current_auc = 0.5381469979296066
User 51075 AUC after training: 0.5372929606625259
User 51075 does not improve AUC. Reverting changes.
Training on augumented user 45218 37/50 current_auc = 0.5381469979296066
User 45218 AUC after training: 0.537888198757764
User 45218 does not improve AUC. Reverting changes.
Training on augumented user 103328 38/50 current_auc = 0.5381469979296066
User 103328 AUC after training: 0.5385093167701863
User 103328 improves AUC. Keeping the model.
Training on augumented user 41261 39/50 current_auc = 0.5385093167701863
User 41261 AUC after training: 0.5378364389233954
User 41261 does not improve AUC. Reverting changes.
Training on augumented user 83634 40/50 current_auc = 0.5385093167701863
User 83634 AUC after training: 0.5389233954451346
User 83634 improves AUC. Keeping the model.
Training on augumented user 25370 41/50 current_auc = 0.5389233954451346
User 25370 AUC after training: 0.5385610766045549
User 25370 does not improve AUC. Reverting changes.
Training on augumented user 81493 42/50 current_auc = 0.5389233954451346
User 81493 AUC after training: 0.5394927536231884
User 81493 improves AUC. Keeping the model.
Training on augumented user 43597 43/50 current_auc = 0.5394927536231884
User 43597 AUC after training: 0.5393374741200828
User 43597 does not improve AUC. Reverting changes.
Training on augumented user 121927 44/50 current_auc = 0.5394927536231884
User 121927 AUC after training: 0.5392857142857143
User 121927 does not improve AUC. Reverting changes.
Training on augumented user 39273 45/50 current_auc = 0.5394927536231884
User 39273 AUC after training: 0.540631469979296
User 39273 improves AUC. Keeping the model.
Training on augumented user 79513 46/50 current_auc = 0.540631469979296
User 79513 AUC after training: 0.5400879917184265
User 79513 does not improve AUC. Reverting changes.
Training on augumented user 15126 47/50 current_auc = 0.540631469979296
User 15126 AUC after training: 0.5409679089026915
User 15126 improves AUC. Keeping the model.
Training on augumented user 9925 48/50 current_auc = 0.5409679089026915
User 9925 AUC after training: 0.5409679089026915
User 9925 does not improve AUC. Reverting changes.
Training on augumented user 85337 49/50 current_auc = 0.5409679089026915
User 85337 AUC after training: 0.5406314699792961
User 85337 does not improve AUC. Reverting changes.
[2024-12-02 18:03:24.760747] start test user 14687 45/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:25.283794] start test user 14687 45/568 recall augumented users by random, augumented_users = [75136, 78503, 5, 8818, 57874, 121720, 100449, 127632, 137970, 108818, 33273, 3795, 133263, 104565, 133232, 124398, 38202, 76029, 73885, 31431, 61229, 83352, 91118, 27780, 23809, 78545, 102677, 89270, 83690, 96827, 40880, 55193, 54325, 38985, 66868, 9101, 96783, 103325, 43805, 80740, 15095, 26795, 27388, 71959, 28676, 108127, 129120, 53795, 98006, 104065]
[2024-12-02 18:03:25.298206] user = 14687 Cloud 45/568
[2024-12-02 18:03:25.307293] user = 14687 Local 45/568
[2024-12-02 18:03:25.380980] user = 14687 Local+ 45/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:28.013789] user = 14687 MPDA- 45/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7222222222222221
Training on augumented user 75136 0/50 current_auc = 0.7222222222222221
User 75136 AUC after training: 0.7277777777777779
User 75136 improves AUC. Keeping the model.
Training on augumented user 78503 1/50 current_auc = 0.7277777777777779
User 78503 AUC after training: 0.7222222222222221
User 78503 does not improve AUC. Reverting changes.
Training on augumented user 5 2/50 current_auc = 0.7277777777777779
User 5 AUC after training: 0.7277777777777779
User 5 does not improve AUC. Reverting changes.
Training on augumented user 8818 3/50 current_auc = 0.7277777777777779
User 8818 AUC after training: 0.7277777777777779
User 8818 does not improve AUC. Reverting changes.
Training on augumented user 57874 4/50 current_auc = 0.7277777777777779
User 57874 AUC after training: 0.7222222222222221
User 57874 does not improve AUC. Reverting changes.
Training on augumented user 121720 5/50 current_auc = 0.7277777777777779
User 121720 AUC after training: 0.7277777777777779
User 121720 does not improve AUC. Reverting changes.
Training on augumented user 100449 6/50 current_auc = 0.7277777777777779
User 100449 AUC after training: 0.7222222222222221
User 100449 does not improve AUC. Reverting changes.
Training on augumented user 127632 7/50 current_auc = 0.7277777777777779
User 127632 AUC after training: 0.7222222222222221
User 127632 does not improve AUC. Reverting changes.
Training on augumented user 137970 8/50 current_auc = 0.7277777777777779
User 137970 AUC after training: 0.7277777777777779
User 137970 does not improve AUC. Reverting changes.
Training on augumented user 108818 9/50 current_auc = 0.7277777777777779
User 108818 AUC after training: 0.7222222222222221
User 108818 does not improve AUC. Reverting changes.
Training on augumented user 33273 10/50 current_auc = 0.7277777777777779
User 33273 AUC after training: 0.7222222222222221
User 33273 does not improve AUC. Reverting changes.
Training on augumented user 3795 11/50 current_auc = 0.7277777777777779
User 3795 AUC after training: 0.7277777777777779
User 3795 does not improve AUC. Reverting changes.
Training on augumented user 133263 12/50 current_auc = 0.7277777777777779
User 133263 AUC after training: 0.7277777777777779
User 133263 does not improve AUC. Reverting changes.
Training on augumented user 104565 13/50 current_auc = 0.7277777777777779
User 104565 AUC after training: 0.7222222222222221
User 104565 does not improve AUC. Reverting changes.
Training on augumented user 133232 14/50 current_auc = 0.7277777777777779
User 133232 AUC after training: 0.7222222222222221
User 133232 does not improve AUC. Reverting changes.
Training on augumented user 124398 15/50 current_auc = 0.7277777777777779
User 124398 AUC after training: 0.7222222222222221
User 124398 does not improve AUC. Reverting changes.
Training on augumented user 38202 16/50 current_auc = 0.7277777777777779
User 38202 AUC after training: 0.7222222222222221
User 38202 does not improve AUC. Reverting changes.
Training on augumented user 76029 17/50 current_auc = 0.7277777777777779
User 76029 AUC after training: 0.7277777777777779
User 76029 does not improve AUC. Reverting changes.
Training on augumented user 73885 18/50 current_auc = 0.7277777777777779
User 73885 AUC after training: 0.7277777777777779
User 73885 does not improve AUC. Reverting changes.
Training on augumented user 31431 19/50 current_auc = 0.7277777777777779
User 31431 AUC after training: 0.7222222222222221
User 31431 does not improve AUC. Reverting changes.
Training on augumented user 61229 20/50 current_auc = 0.7277777777777779
User 61229 AUC after training: 0.7222222222222221
User 61229 does not improve AUC. Reverting changes.
Training on augumented user 83352 21/50 current_auc = 0.7277777777777779
User 83352 AUC after training: 0.7222222222222221
User 83352 does not improve AUC. Reverting changes.
Training on augumented user 91118 22/50 current_auc = 0.7277777777777779
User 91118 AUC after training: 0.7222222222222221
User 91118 does not improve AUC. Reverting changes.
Training on augumented user 27780 23/50 current_auc = 0.7277777777777779
User 27780 AUC after training: 0.7222222222222221
User 27780 does not improve AUC. Reverting changes.
Training on augumented user 23809 24/50 current_auc = 0.7277777777777779
User 23809 AUC after training: 0.7222222222222221
User 23809 does not improve AUC. Reverting changes.
Training on augumented user 78545 25/50 current_auc = 0.7277777777777779
User 78545 AUC after training: 0.7277777777777779
User 78545 does not improve AUC. Reverting changes.
Training on augumented user 102677 26/50 current_auc = 0.7277777777777779
User 102677 AUC after training: 0.7222222222222221
User 102677 does not improve AUC. Reverting changes.
Training on augumented user 89270 27/50 current_auc = 0.7277777777777779
User 89270 AUC after training: 0.7222222222222221
User 89270 does not improve AUC. Reverting changes.
Training on augumented user 83690 28/50 current_auc = 0.7277777777777779
User 83690 AUC after training: 0.7222222222222221
User 83690 does not improve AUC. Reverting changes.
Training on augumented user 96827 29/50 current_auc = 0.7277777777777779
User 96827 AUC after training: 0.7222222222222221
User 96827 does not improve AUC. Reverting changes.
Training on augumented user 40880 30/50 current_auc = 0.7277777777777779
User 40880 AUC after training: 0.7222222222222221
User 40880 does not improve AUC. Reverting changes.
Training on augumented user 55193 31/50 current_auc = 0.7277777777777779
User 55193 AUC after training: 0.7222222222222221
User 55193 does not improve AUC. Reverting changes.
Training on augumented user 54325 32/50 current_auc = 0.7277777777777779
User 54325 AUC after training: 0.7277777777777779
User 54325 does not improve AUC. Reverting changes.
Training on augumented user 38985 33/50 current_auc = 0.7277777777777779
User 38985 AUC after training: 0.7277777777777779
User 38985 does not improve AUC. Reverting changes.
Training on augumented user 66868 34/50 current_auc = 0.7277777777777779
User 66868 AUC after training: 0.7222222222222221
User 66868 does not improve AUC. Reverting changes.
Training on augumented user 9101 35/50 current_auc = 0.7277777777777779
User 9101 AUC after training: 0.7222222222222221
User 9101 does not improve AUC. Reverting changes.
Training on augumented user 96783 36/50 current_auc = 0.7277777777777779
User 96783 AUC after training: 0.7222222222222221
User 96783 does not improve AUC. Reverting changes.
Training on augumented user 103325 37/50 current_auc = 0.7277777777777779
User 103325 AUC after training: 0.7277777777777779
User 103325 does not improve AUC. Reverting changes.
Training on augumented user 43805 38/50 current_auc = 0.7277777777777779
User 43805 AUC after training: 0.7222222222222221
User 43805 does not improve AUC. Reverting changes.
Training on augumented user 80740 39/50 current_auc = 0.7277777777777779
User 80740 AUC after training: 0.7222222222222221
User 80740 does not improve AUC. Reverting changes.
Training on augumented user 15095 40/50 current_auc = 0.7277777777777779
User 15095 AUC after training: 0.7222222222222221
User 15095 does not improve AUC. Reverting changes.
Training on augumented user 26795 41/50 current_auc = 0.7277777777777779
User 26795 AUC after training: 0.7222222222222221
User 26795 does not improve AUC. Reverting changes.
Training on augumented user 27388 42/50 current_auc = 0.7277777777777779
User 27388 AUC after training: 0.7222222222222221
User 27388 does not improve AUC. Reverting changes.
Training on augumented user 71959 43/50 current_auc = 0.7277777777777779
User 71959 AUC after training: 0.7277777777777779
User 71959 does not improve AUC. Reverting changes.
Training on augumented user 28676 44/50 current_auc = 0.7277777777777779
User 28676 AUC after training: 0.7222222222222221
User 28676 does not improve AUC. Reverting changes.
Training on augumented user 108127 45/50 current_auc = 0.7277777777777779
User 108127 AUC after training: 0.7222222222222221
User 108127 does not improve AUC. Reverting changes.
Training on augumented user 129120 46/50 current_auc = 0.7277777777777779
User 129120 AUC after training: 0.7222222222222221
User 129120 does not improve AUC. Reverting changes.
Training on augumented user 53795 47/50 current_auc = 0.7277777777777779
User 53795 AUC after training: 0.7222222222222221
User 53795 does not improve AUC. Reverting changes.
Training on augumented user 98006 48/50 current_auc = 0.7277777777777779
User 98006 AUC after training: 0.7222222222222221
User 98006 does not improve AUC. Reverting changes.
Training on augumented user 104065 49/50 current_auc = 0.7277777777777779
User 104065 AUC after training: 0.7277777777777779
User 104065 does not improve AUC. Reverting changes.
[2024-12-02 18:03:59.497133] start test user 14713 46/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:59.991768] start test user 14713 46/568 recall augumented users by random, augumented_users = [70437, 117686, 106310, 111125, 114312, 93163, 112349, 95162, 25739, 98202, 69128, 977, 52651, 17656, 46883, 1581, 136546, 130634, 8656, 90001, 78435, 1940, 92649, 3623, 89864, 65553, 89628, 123760, 128147, 26730, 115070, 136223, 20002, 100960, 29593, 21609, 77262, 134360, 2760, 57398, 30442, 41443, 14721, 5920, 135080, 43145, 113055, 10642, 111514, 84776]
[2024-12-02 18:04:00.006106] user = 14713 Cloud 46/568
[2024-12-02 18:04:00.015484] user = 14713 Local 46/568
[2024-12-02 18:04:00.070799] user = 14713 Local+ 46/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:02.603324] user = 14713 MPDA- 46/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7142857142857143
Training on augumented user 70437 0/50 current_auc = 0.7142857142857143
User 70437 AUC after training: 0.7142857142857143
User 70437 does not improve AUC. Reverting changes.
Training on augumented user 117686 1/50 current_auc = 0.7142857142857143
User 117686 AUC after training: 0.7142857142857143
User 117686 does not improve AUC. Reverting changes.
Training on augumented user 106310 2/50 current_auc = 0.7142857142857143
User 106310 AUC after training: 0.7333333333333333
User 106310 improves AUC. Keeping the model.
Training on augumented user 111125 3/50 current_auc = 0.7333333333333333
User 111125 AUC after training: 0.7333333333333333
User 111125 does not improve AUC. Reverting changes.
Training on augumented user 114312 4/50 current_auc = 0.7333333333333333
User 114312 AUC after training: 0.7238095238095238
User 114312 does not improve AUC. Reverting changes.
Training on augumented user 93163 5/50 current_auc = 0.7333333333333333
User 93163 AUC after training: 0.7238095238095238
User 93163 does not improve AUC. Reverting changes.
Training on augumented user 112349 6/50 current_auc = 0.7333333333333333
User 112349 AUC after training: 0.7333333333333333
User 112349 does not improve AUC. Reverting changes.
Training on augumented user 95162 7/50 current_auc = 0.7333333333333333
User 95162 AUC after training: 0.7238095238095238
User 95162 does not improve AUC. Reverting changes.
Training on augumented user 25739 8/50 current_auc = 0.7333333333333333
User 25739 AUC after training: 0.7333333333333333
User 25739 does not improve AUC. Reverting changes.
Training on augumented user 98202 9/50 current_auc = 0.7333333333333333
User 98202 AUC after training: 0.7333333333333333
User 98202 does not improve AUC. Reverting changes.
Training on augumented user 69128 10/50 current_auc = 0.7333333333333333
User 69128 AUC after training: 0.7333333333333333
User 69128 does not improve AUC. Reverting changes.
Training on augumented user 977 11/50 current_auc = 0.7333333333333333
User 977 AUC after training: 0.7333333333333333
User 977 does not improve AUC. Reverting changes.
Training on augumented user 52651 12/50 current_auc = 0.7333333333333333
User 52651 AUC after training: 0.7333333333333333
User 52651 does not improve AUC. Reverting changes.
Training on augumented user 17656 13/50 current_auc = 0.7333333333333333
User 17656 AUC after training: 0.7333333333333333
User 17656 does not improve AUC. Reverting changes.
Training on augumented user 46883 14/50 current_auc = 0.7333333333333333
User 46883 AUC after training: 0.7238095238095238
User 46883 does not improve AUC. Reverting changes.
Training on augumented user 1581 15/50 current_auc = 0.7333333333333333
User 1581 AUC after training: 0.7333333333333333
User 1581 does not improve AUC. Reverting changes.
Training on augumented user 136546 16/50 current_auc = 0.7333333333333333
User 136546 AUC after training: 0.7333333333333333
User 136546 does not improve AUC. Reverting changes.
Training on augumented user 130634 17/50 current_auc = 0.7333333333333333
User 130634 AUC after training: 0.7142857142857143
User 130634 does not improve AUC. Reverting changes.
Training on augumented user 8656 18/50 current_auc = 0.7333333333333333
User 8656 AUC after training: 0.7333333333333333
User 8656 does not improve AUC. Reverting changes.
Training on augumented user 90001 19/50 current_auc = 0.7333333333333333
User 90001 AUC after training: 0.7333333333333333
User 90001 does not improve AUC. Reverting changes.
Training on augumented user 78435 20/50 current_auc = 0.7333333333333333
User 78435 AUC after training: 0.7333333333333333
User 78435 does not improve AUC. Reverting changes.
Training on augumented user 1940 21/50 current_auc = 0.7333333333333333
User 1940 AUC after training: 0.7333333333333333
User 1940 does not improve AUC. Reverting changes.
Training on augumented user 92649 22/50 current_auc = 0.7333333333333333
User 92649 AUC after training: 0.7333333333333333
User 92649 does not improve AUC. Reverting changes.
Training on augumented user 3623 23/50 current_auc = 0.7333333333333333
User 3623 AUC after training: 0.7333333333333333
User 3623 does not improve AUC. Reverting changes.
Training on augumented user 89864 24/50 current_auc = 0.7333333333333333
User 89864 AUC after training: 0.7238095238095238
User 89864 does not improve AUC. Reverting changes.
Training on augumented user 65553 25/50 current_auc = 0.7333333333333333
User 65553 AUC after training: 0.7333333333333333
User 65553 does not improve AUC. Reverting changes.
Training on augumented user 89628 26/50 current_auc = 0.7333333333333333
User 89628 AUC after training: 0.7333333333333333
User 89628 does not improve AUC. Reverting changes.
Training on augumented user 123760 27/50 current_auc = 0.7333333333333333
User 123760 AUC after training: 0.7238095238095238
User 123760 does not improve AUC. Reverting changes.
Training on augumented user 128147 28/50 current_auc = 0.7333333333333333
User 128147 AUC after training: 0.7238095238095238
User 128147 does not improve AUC. Reverting changes.
Training on augumented user 26730 29/50 current_auc = 0.7333333333333333
User 26730 AUC after training: 0.7238095238095238
User 26730 does not improve AUC. Reverting changes.
Training on augumented user 115070 30/50 current_auc = 0.7333333333333333
User 115070 AUC after training: 0.7333333333333333
User 115070 does not improve AUC. Reverting changes.
Training on augumented user 136223 31/50 current_auc = 0.7333333333333333
User 136223 AUC after training: 0.7333333333333333
User 136223 does not improve AUC. Reverting changes.
Training on augumented user 20002 32/50 current_auc = 0.7333333333333333
User 20002 AUC after training: 0.7333333333333333
User 20002 does not improve AUC. Reverting changes.
Training on augumented user 100960 33/50 current_auc = 0.7333333333333333
User 100960 AUC after training: 0.7333333333333333
User 100960 does not improve AUC. Reverting changes.
Training on augumented user 29593 34/50 current_auc = 0.7333333333333333
User 29593 AUC after training: 0.7333333333333333
User 29593 does not improve AUC. Reverting changes.
Training on augumented user 21609 35/50 current_auc = 0.7333333333333333
User 21609 AUC after training: 0.7333333333333333
User 21609 does not improve AUC. Reverting changes.
Training on augumented user 77262 36/50 current_auc = 0.7333333333333333
User 77262 AUC after training: 0.7333333333333333
User 77262 does not improve AUC. Reverting changes.
Training on augumented user 134360 37/50 current_auc = 0.7333333333333333
User 134360 AUC after training: 0.7333333333333333
User 134360 does not improve AUC. Reverting changes.
Training on augumented user 2760 38/50 current_auc = 0.7333333333333333
User 2760 AUC after training: 0.7238095238095238
User 2760 does not improve AUC. Reverting changes.
Training on augumented user 57398 39/50 current_auc = 0.7333333333333333
User 57398 AUC after training: 0.7238095238095238
User 57398 does not improve AUC. Reverting changes.
Training on augumented user 30442 40/50 current_auc = 0.7333333333333333
User 30442 AUC after training: 0.7333333333333333
User 30442 does not improve AUC. Reverting changes.
Training on augumented user 41443 41/50 current_auc = 0.7333333333333333
User 41443 AUC after training: 0.7333333333333333
User 41443 does not improve AUC. Reverting changes.
Training on augumented user 14721 42/50 current_auc = 0.7333333333333333
User 14721 AUC after training: 0.7333333333333333
User 14721 does not improve AUC. Reverting changes.
Training on augumented user 5920 43/50 current_auc = 0.7333333333333333
User 5920 AUC after training: 0.7333333333333333
User 5920 does not improve AUC. Reverting changes.
Training on augumented user 135080 44/50 current_auc = 0.7333333333333333
User 135080 AUC after training: 0.7333333333333333
User 135080 does not improve AUC. Reverting changes.
Training on augumented user 43145 45/50 current_auc = 0.7333333333333333
User 43145 AUC after training: 0.7238095238095238
User 43145 does not improve AUC. Reverting changes.
Training on augumented user 113055 46/50 current_auc = 0.7333333333333333
User 113055 AUC after training: 0.7333333333333333
User 113055 does not improve AUC. Reverting changes.
Training on augumented user 10642 47/50 current_auc = 0.7333333333333333
User 10642 AUC after training: 0.7333333333333333
User 10642 does not improve AUC. Reverting changes.
Training on augumented user 111514 48/50 current_auc = 0.7333333333333333
User 111514 AUC after training: 0.7333333333333333
User 111514 does not improve AUC. Reverting changes.
Training on augumented user 84776 49/50 current_auc = 0.7333333333333333
User 84776 AUC after training: 0.7333333333333333
User 84776 does not improve AUC. Reverting changes.
[2024-12-02 18:04:30.912772] start test user 14768 47/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:31.709268] start test user 14768 47/568 recall augumented users by random, augumented_users = [95295, 11189, 43220, 4883, 129476, 62571, 113121, 134681, 85918, 95970, 43930, 16257, 21338, 44663, 102970, 98868, 95301, 84169, 134201, 9747, 80729, 64241, 84743, 91631, 120500, 859, 126664, 85166, 52336, 81476, 18465, 26603, 4360, 11895, 83682, 24752, 119136, 62087, 37552, 110926, 105660, 136606, 110524, 61267, 60988, 116904, 9882, 104032, 58236, 104558]
[2024-12-02 18:04:31.724911] user = 14768 Cloud 47/568
[2024-12-02 18:04:31.737560] user = 14768 Local 47/568
[2024-12-02 18:04:31.796026] user = 14768 Local+ 47/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:34.247312] user = 14768 MPDA- 47/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.265625
Training on augumented user 95295 0/50 current_auc = 0.265625
User 95295 AUC after training: 0.265625
User 95295 does not improve AUC. Reverting changes.
Training on augumented user 11189 1/50 current_auc = 0.265625
User 11189 AUC after training: 0.265625
User 11189 does not improve AUC. Reverting changes.
Training on augumented user 43220 2/50 current_auc = 0.265625
User 43220 AUC after training: 0.265625
User 43220 does not improve AUC. Reverting changes.
Training on augumented user 4883 3/50 current_auc = 0.265625
User 4883 AUC after training: 0.265625
User 4883 does not improve AUC. Reverting changes.
Training on augumented user 129476 4/50 current_auc = 0.265625
User 129476 AUC after training: 0.265625
User 129476 does not improve AUC. Reverting changes.
Training on augumented user 62571 5/50 current_auc = 0.265625
User 62571 AUC after training: 0.265625
User 62571 does not improve AUC. Reverting changes.
Training on augumented user 113121 6/50 current_auc = 0.265625
User 113121 AUC after training: 0.265625
User 113121 does not improve AUC. Reverting changes.
Training on augumented user 134681 7/50 current_auc = 0.265625
User 134681 AUC after training: 0.265625
User 134681 does not improve AUC. Reverting changes.
Training on augumented user 85918 8/50 current_auc = 0.265625
User 85918 AUC after training: 0.265625
User 85918 does not improve AUC. Reverting changes.
Training on augumented user 95970 9/50 current_auc = 0.265625
User 95970 AUC after training: 0.265625
User 95970 does not improve AUC. Reverting changes.
Training on augumented user 43930 10/50 current_auc = 0.265625
User 43930 AUC after training: 0.265625
User 43930 does not improve AUC. Reverting changes.
Training on augumented user 16257 11/50 current_auc = 0.265625
User 16257 AUC after training: 0.265625
User 16257 does not improve AUC. Reverting changes.
Training on augumented user 21338 12/50 current_auc = 0.265625
User 21338 AUC after training: 0.265625
User 21338 does not improve AUC. Reverting changes.
Training on augumented user 44663 13/50 current_auc = 0.265625
User 44663 AUC after training: 0.265625
User 44663 does not improve AUC. Reverting changes.
Training on augumented user 102970 14/50 current_auc = 0.265625
User 102970 AUC after training: 0.265625
User 102970 does not improve AUC. Reverting changes.
Training on augumented user 98868 15/50 current_auc = 0.265625
User 98868 AUC after training: 0.265625
User 98868 does not improve AUC. Reverting changes.
Training on augumented user 95301 16/50 current_auc = 0.265625
User 95301 AUC after training: 0.265625
User 95301 does not improve AUC. Reverting changes.
Training on augumented user 84169 17/50 current_auc = 0.265625
User 84169 AUC after training: 0.265625
User 84169 does not improve AUC. Reverting changes.
Training on augumented user 134201 18/50 current_auc = 0.265625
User 134201 AUC after training: 0.265625
User 134201 does not improve AUC. Reverting changes.
Training on augumented user 9747 19/50 current_auc = 0.265625
User 9747 AUC after training: 0.265625
User 9747 does not improve AUC. Reverting changes.
Training on augumented user 80729 20/50 current_auc = 0.265625
User 80729 AUC after training: 0.265625
User 80729 does not improve AUC. Reverting changes.
Training on augumented user 64241 21/50 current_auc = 0.265625
User 64241 AUC after training: 0.265625
User 64241 does not improve AUC. Reverting changes.
Training on augumented user 84743 22/50 current_auc = 0.265625
User 84743 AUC after training: 0.265625
User 84743 does not improve AUC. Reverting changes.
Training on augumented user 91631 23/50 current_auc = 0.265625
User 91631 AUC after training: 0.265625
User 91631 does not improve AUC. Reverting changes.
Training on augumented user 120500 24/50 current_auc = 0.265625
User 120500 AUC after training: 0.265625
User 120500 does not improve AUC. Reverting changes.
Training on augumented user 859 25/50 current_auc = 0.265625
User 859 AUC after training: 0.265625
User 859 does not improve AUC. Reverting changes.
Training on augumented user 126664 26/50 current_auc = 0.265625
User 126664 AUC after training: 0.265625
User 126664 does not improve AUC. Reverting changes.
Training on augumented user 85166 27/50 current_auc = 0.265625
User 85166 AUC after training: 0.265625
User 85166 does not improve AUC. Reverting changes.
Training on augumented user 52336 28/50 current_auc = 0.265625
User 52336 AUC after training: 0.265625
User 52336 does not improve AUC. Reverting changes.
Training on augumented user 81476 29/50 current_auc = 0.265625
User 81476 AUC after training: 0.265625
User 81476 does not improve AUC. Reverting changes.
Training on augumented user 18465 30/50 current_auc = 0.265625
User 18465 AUC after training: 0.265625
User 18465 does not improve AUC. Reverting changes.
Training on augumented user 26603 31/50 current_auc = 0.265625
User 26603 AUC after training: 0.265625
User 26603 does not improve AUC. Reverting changes.
Training on augumented user 4360 32/50 current_auc = 0.265625
User 4360 AUC after training: 0.265625
User 4360 does not improve AUC. Reverting changes.
Training on augumented user 11895 33/50 current_auc = 0.265625
User 11895 AUC after training: 0.265625
User 11895 does not improve AUC. Reverting changes.
Training on augumented user 83682 34/50 current_auc = 0.265625
User 83682 AUC after training: 0.265625
User 83682 does not improve AUC. Reverting changes.
Training on augumented user 24752 35/50 current_auc = 0.265625
User 24752 AUC after training: 0.265625
User 24752 does not improve AUC. Reverting changes.
Training on augumented user 119136 36/50 current_auc = 0.265625
User 119136 AUC after training: 0.265625
User 119136 does not improve AUC. Reverting changes.
Training on augumented user 62087 37/50 current_auc = 0.265625
User 62087 AUC after training: 0.265625
User 62087 does not improve AUC. Reverting changes.
Training on augumented user 37552 38/50 current_auc = 0.265625
User 37552 AUC after training: 0.265625
User 37552 does not improve AUC. Reverting changes.
Training on augumented user 110926 39/50 current_auc = 0.265625
User 110926 AUC after training: 0.265625
User 110926 does not improve AUC. Reverting changes.
Training on augumented user 105660 40/50 current_auc = 0.265625
User 105660 AUC after training: 0.265625
User 105660 does not improve AUC. Reverting changes.
Training on augumented user 136606 41/50 current_auc = 0.265625
User 136606 AUC after training: 0.265625
User 136606 does not improve AUC. Reverting changes.
Training on augumented user 110524 42/50 current_auc = 0.265625
User 110524 AUC after training: 0.265625
User 110524 does not improve AUC. Reverting changes.
Training on augumented user 61267 43/50 current_auc = 0.265625
User 61267 AUC after training: 0.265625
User 61267 does not improve AUC. Reverting changes.
Training on augumented user 60988 44/50 current_auc = 0.265625
User 60988 AUC after training: 0.265625
User 60988 does not improve AUC. Reverting changes.
Training on augumented user 116904 45/50 current_auc = 0.265625
User 116904 AUC after training: 0.265625
User 116904 does not improve AUC. Reverting changes.
Training on augumented user 9882 46/50 current_auc = 0.265625
User 9882 AUC after training: 0.265625
User 9882 does not improve AUC. Reverting changes.
Training on augumented user 104032 47/50 current_auc = 0.265625
User 104032 AUC after training: 0.265625
User 104032 does not improve AUC. Reverting changes.
Training on augumented user 58236 48/50 current_auc = 0.265625
User 58236 AUC after training: 0.265625
User 58236 does not improve AUC. Reverting changes.
Training on augumented user 104558 49/50 current_auc = 0.265625
User 104558 AUC after training: 0.265625
User 104558 does not improve AUC. Reverting changes.
[2024-12-02 18:05:04.843318] start test user 14852 48/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:05.371078] start test user 14852 48/568 recall augumented users by random, augumented_users = [914, 48690, 2510, 94734, 119295, 51306, 41848, 18007, 71575, 136687, 127396, 90471, 7302, 34541, 26474, 121936, 64297, 23170, 77338, 73649, 127449, 128630, 105156, 16833, 5993, 31623, 88296, 102586, 19656, 25950, 125794, 63861, 16758, 44639, 26187, 34242, 54925, 15053, 121397, 57774, 103893, 2325, 49883, 129103, 47083, 14669, 45630, 28497, 48366, 16278]
[2024-12-02 18:05:05.388803] user = 14852 Cloud 48/568
[2024-12-02 18:05:05.409831] user = 14852 Local 48/568
[2024-12-02 18:05:05.463677] user = 14852 Local+ 48/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:09.109635] user = 14852 MPDA- 48/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5988571428571429
Training on augumented user 914 0/50 current_auc = 0.5988571428571429
User 914 AUC after training: 0.6005714285714285
User 914 improves AUC. Keeping the model.
Training on augumented user 48690 1/50 current_auc = 0.6005714285714285
User 48690 AUC after training: 0.6017142857142858
User 48690 improves AUC. Keeping the model.
Training on augumented user 2510 2/50 current_auc = 0.6017142857142858
User 2510 AUC after training: 0.6017142857142858
User 2510 does not improve AUC. Reverting changes.
Training on augumented user 94734 3/50 current_auc = 0.6017142857142858
User 94734 AUC after training: 0.6034285714285714
User 94734 improves AUC. Keeping the model.
Training on augumented user 119295 4/50 current_auc = 0.6034285714285714
User 119295 AUC after training: 0.6028571428571429
User 119295 does not improve AUC. Reverting changes.
Training on augumented user 51306 5/50 current_auc = 0.6034285714285714
User 51306 AUC after training: 0.6034285714285714
User 51306 does not improve AUC. Reverting changes.
Training on augumented user 41848 6/50 current_auc = 0.6034285714285714
User 41848 AUC after training: 0.6034285714285714
User 41848 does not improve AUC. Reverting changes.
Training on augumented user 18007 7/50 current_auc = 0.6034285714285714
User 18007 AUC after training: 0.604
User 18007 improves AUC. Keeping the model.
Training on augumented user 71575 8/50 current_auc = 0.604
User 71575 AUC after training: 0.6062857142857143
User 71575 improves AUC. Keeping the model.
Training on augumented user 136687 9/50 current_auc = 0.6062857142857143
User 136687 AUC after training: 0.6057142857142858
User 136687 does not improve AUC. Reverting changes.
Training on augumented user 127396 10/50 current_auc = 0.6062857142857143
User 127396 AUC after training: 0.6057142857142858
User 127396 does not improve AUC. Reverting changes.
Training on augumented user 90471 11/50 current_auc = 0.6062857142857143
User 90471 AUC after training: 0.6062857142857143
User 90471 does not improve AUC. Reverting changes.
Training on augumented user 7302 12/50 current_auc = 0.6062857142857143
User 7302 AUC after training: 0.6062857142857143
User 7302 does not improve AUC. Reverting changes.
Training on augumented user 34541 13/50 current_auc = 0.6062857142857143
User 34541 AUC after training: 0.604
User 34541 does not improve AUC. Reverting changes.
Training on augumented user 26474 14/50 current_auc = 0.6062857142857143
User 26474 AUC after training: 0.6051428571428572
User 26474 does not improve AUC. Reverting changes.
Training on augumented user 121936 15/50 current_auc = 0.6062857142857143
User 121936 AUC after training: 0.6068571428571429
User 121936 improves AUC. Keeping the model.
Training on augumented user 64297 16/50 current_auc = 0.6068571428571429
User 64297 AUC after training: 0.6062857142857143
User 64297 does not improve AUC. Reverting changes.
Training on augumented user 23170 17/50 current_auc = 0.6068571428571429
User 23170 AUC after training: 0.6062857142857143
User 23170 does not improve AUC. Reverting changes.
Training on augumented user 77338 18/50 current_auc = 0.6068571428571429
User 77338 AUC after training: 0.6057142857142856
User 77338 does not improve AUC. Reverting changes.
Training on augumented user 73649 19/50 current_auc = 0.6068571428571429
User 73649 AUC after training: 0.6068571428571429
User 73649 does not improve AUC. Reverting changes.
Training on augumented user 127449 20/50 current_auc = 0.6068571428571429
User 127449 AUC after training: 0.6062857142857143
User 127449 does not improve AUC. Reverting changes.
Training on augumented user 128630 21/50 current_auc = 0.6068571428571429
User 128630 AUC after training: 0.6051428571428571
User 128630 does not improve AUC. Reverting changes.
Training on augumented user 105156 22/50 current_auc = 0.6068571428571429
User 105156 AUC after training: 0.6
User 105156 does not improve AUC. Reverting changes.
Training on augumented user 16833 23/50 current_auc = 0.6068571428571429
User 16833 AUC after training: 0.6062857142857143
User 16833 does not improve AUC. Reverting changes.
Training on augumented user 5993 24/50 current_auc = 0.6068571428571429
User 5993 AUC after training: 0.6057142857142856
User 5993 does not improve AUC. Reverting changes.
Training on augumented user 31623 25/50 current_auc = 0.6068571428571429
User 31623 AUC after training: 0.6057142857142858
User 31623 does not improve AUC. Reverting changes.
Training on augumented user 88296 26/50 current_auc = 0.6068571428571429
User 88296 AUC after training: 0.6057142857142858
User 88296 does not improve AUC. Reverting changes.
Training on augumented user 102586 27/50 current_auc = 0.6068571428571429
User 102586 AUC after training: 0.6068571428571429
User 102586 does not improve AUC. Reverting changes.
Training on augumented user 19656 28/50 current_auc = 0.6068571428571429
User 19656 AUC after training: 0.6057142857142858
User 19656 does not improve AUC. Reverting changes.
Training on augumented user 25950 29/50 current_auc = 0.6068571428571429
User 25950 AUC after training: 0.6062857142857143
User 25950 does not improve AUC. Reverting changes.
Training on augumented user 125794 30/50 current_auc = 0.6068571428571429
User 125794 AUC after training: 0.602857142857143
User 125794 does not improve AUC. Reverting changes.
Training on augumented user 63861 31/50 current_auc = 0.6068571428571429
User 63861 AUC after training: 0.6034285714285714
User 63861 does not improve AUC. Reverting changes.
Training on augumented user 16758 32/50 current_auc = 0.6068571428571429
User 16758 AUC after training: 0.6051428571428571
User 16758 does not improve AUC. Reverting changes.
Training on augumented user 44639 33/50 current_auc = 0.6068571428571429
User 44639 AUC after training: 0.6068571428571429
User 44639 does not improve AUC. Reverting changes.
Training on augumented user 26187 34/50 current_auc = 0.6068571428571429
User 26187 AUC after training: 0.6062857142857143
User 26187 does not improve AUC. Reverting changes.
Training on augumented user 34242 35/50 current_auc = 0.6068571428571429
User 34242 AUC after training: 0.6062857142857143
User 34242 does not improve AUC. Reverting changes.
Training on augumented user 54925 36/50 current_auc = 0.6068571428571429
User 54925 AUC after training: 0.6045714285714285
User 54925 does not improve AUC. Reverting changes.
Training on augumented user 15053 37/50 current_auc = 0.6068571428571429
User 15053 AUC after training: 0.6062857142857143
User 15053 does not improve AUC. Reverting changes.
Training on augumented user 121397 38/50 current_auc = 0.6068571428571429
User 121397 AUC after training: 0.6051428571428571
User 121397 does not improve AUC. Reverting changes.
Training on augumented user 57774 39/50 current_auc = 0.6068571428571429
User 57774 AUC after training: 0.6062857142857143
User 57774 does not improve AUC. Reverting changes.
Training on augumented user 103893 40/50 current_auc = 0.6068571428571429
User 103893 AUC after training: 0.6051428571428571
User 103893 does not improve AUC. Reverting changes.
Training on augumented user 2325 41/50 current_auc = 0.6068571428571429
User 2325 AUC after training: 0.6057142857142858
User 2325 does not improve AUC. Reverting changes.
Training on augumented user 49883 42/50 current_auc = 0.6068571428571429
User 49883 AUC after training: 0.6045714285714285
User 49883 does not improve AUC. Reverting changes.
Training on augumented user 129103 43/50 current_auc = 0.6068571428571429
User 129103 AUC after training: 0.6057142857142856
User 129103 does not improve AUC. Reverting changes.
Training on augumented user 47083 44/50 current_auc = 0.6068571428571429
User 47083 AUC after training: 0.6051428571428572
User 47083 does not improve AUC. Reverting changes.
Training on augumented user 14669 45/50 current_auc = 0.6068571428571429
User 14669 AUC after training: 0.6045714285714285
User 14669 does not improve AUC. Reverting changes.
Training on augumented user 45630 46/50 current_auc = 0.6068571428571429
User 45630 AUC after training: 0.6045714285714285
User 45630 does not improve AUC. Reverting changes.
Training on augumented user 28497 47/50 current_auc = 0.6068571428571429
User 28497 AUC after training: 0.6068571428571429
User 28497 does not improve AUC. Reverting changes.
Training on augumented user 48366 48/50 current_auc = 0.6068571428571429
User 48366 AUC after training: 0.6068571428571429
User 48366 does not improve AUC. Reverting changes.
Training on augumented user 16278 49/50 current_auc = 0.6068571428571429
User 16278 AUC after training: 0.6062857142857143
User 16278 does not improve AUC. Reverting changes.
[2024-12-02 18:05:38.642354] start test user 14908 49/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:39.274638] start test user 14908 49/568 recall augumented users by random, augumented_users = [24675, 78035, 110675, 72024, 136661, 70607, 130060, 7523, 137097, 69741, 128251, 118168, 8254, 70554, 135915, 107948, 95644, 82329, 16733, 66550, 30417, 90926, 73545, 29142, 94422, 70901, 10760, 45866, 68786, 137799, 1335, 58776, 20112, 107929, 117013, 134987, 90266, 118415, 77317, 25999, 115559, 128488, 33053, 66847, 80402, 111663, 120923, 93623, 28005, 126039]
[2024-12-02 18:05:39.327152] user = 14908 Cloud 49/568
[2024-12-02 18:05:39.336575] user = 14908 Local 49/568
[2024-12-02 18:05:39.621999] user = 14908 Local+ 49/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:41.932823] user = 14908 MPDA- 49/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5555555555555556
Training on augumented user 24675 0/50 current_auc = 0.5555555555555556
User 24675 AUC after training: 0.5555555555555556
User 24675 does not improve AUC. Reverting changes.
Training on augumented user 78035 1/50 current_auc = 0.5555555555555556
User 78035 AUC after training: 0.5555555555555556
User 78035 does not improve AUC. Reverting changes.
Training on augumented user 110675 2/50 current_auc = 0.5555555555555556
User 110675 AUC after training: 0.5555555555555556
User 110675 does not improve AUC. Reverting changes.
Training on augumented user 72024 3/50 current_auc = 0.5555555555555556
User 72024 AUC after training: 0.5555555555555556
User 72024 does not improve AUC. Reverting changes.
Training on augumented user 136661 4/50 current_auc = 0.5555555555555556
User 136661 AUC after training: 0.5555555555555556
User 136661 does not improve AUC. Reverting changes.
Training on augumented user 70607 5/50 current_auc = 0.5555555555555556
User 70607 AUC after training: 0.5555555555555556
User 70607 does not improve AUC. Reverting changes.
Training on augumented user 130060 6/50 current_auc = 0.5555555555555556
User 130060 AUC after training: 0.5555555555555556
User 130060 does not improve AUC. Reverting changes.
Training on augumented user 7523 7/50 current_auc = 0.5555555555555556
User 7523 AUC after training: 0.5555555555555556
User 7523 does not improve AUC. Reverting changes.
Training on augumented user 137097 8/50 current_auc = 0.5555555555555556
User 137097 AUC after training: 0.5555555555555556
User 137097 does not improve AUC. Reverting changes.
Training on augumented user 69741 9/50 current_auc = 0.5555555555555556
User 69741 AUC after training: 0.5555555555555556
User 69741 does not improve AUC. Reverting changes.
Training on augumented user 128251 10/50 current_auc = 0.5555555555555556
User 128251 AUC after training: 0.5555555555555556
User 128251 does not improve AUC. Reverting changes.
Training on augumented user 118168 11/50 current_auc = 0.5555555555555556
User 118168 AUC after training: 0.5555555555555556
User 118168 does not improve AUC. Reverting changes.
Training on augumented user 8254 12/50 current_auc = 0.5555555555555556
User 8254 AUC after training: 0.5555555555555556
User 8254 does not improve AUC. Reverting changes.
Training on augumented user 70554 13/50 current_auc = 0.5555555555555556
User 70554 AUC after training: 0.5555555555555556
User 70554 does not improve AUC. Reverting changes.
Training on augumented user 135915 14/50 current_auc = 0.5555555555555556
User 135915 AUC after training: 0.5555555555555556
User 135915 does not improve AUC. Reverting changes.
Training on augumented user 107948 15/50 current_auc = 0.5555555555555556
User 107948 AUC after training: 0.5555555555555556
User 107948 does not improve AUC. Reverting changes.
Training on augumented user 95644 16/50 current_auc = 0.5555555555555556
User 95644 AUC after training: 0.5555555555555556
User 95644 does not improve AUC. Reverting changes.
Training on augumented user 82329 17/50 current_auc = 0.5555555555555556
User 82329 AUC after training: 0.5555555555555556
User 82329 does not improve AUC. Reverting changes.
Training on augumented user 16733 18/50 current_auc = 0.5555555555555556
User 16733 AUC after training: 0.5555555555555556
User 16733 does not improve AUC. Reverting changes.
Training on augumented user 66550 19/50 current_auc = 0.5555555555555556
User 66550 AUC after training: 0.5555555555555556
User 66550 does not improve AUC. Reverting changes.
Training on augumented user 30417 20/50 current_auc = 0.5555555555555556
User 30417 AUC after training: 0.5740740740740742
User 30417 improves AUC. Keeping the model.
Training on augumented user 90926 21/50 current_auc = 0.5740740740740742
User 90926 AUC after training: 0.5555555555555556
User 90926 does not improve AUC. Reverting changes.
Training on augumented user 73545 22/50 current_auc = 0.5740740740740742
User 73545 AUC after training: 0.5740740740740742
User 73545 does not improve AUC. Reverting changes.
Training on augumented user 29142 23/50 current_auc = 0.5740740740740742
User 29142 AUC after training: 0.5740740740740742
User 29142 does not improve AUC. Reverting changes.
Training on augumented user 94422 24/50 current_auc = 0.5740740740740742
User 94422 AUC after training: 0.5555555555555556
User 94422 does not improve AUC. Reverting changes.
Training on augumented user 70901 25/50 current_auc = 0.5740740740740742
User 70901 AUC after training: 0.5740740740740742
User 70901 does not improve AUC. Reverting changes.
Training on augumented user 10760 26/50 current_auc = 0.5740740740740742
User 10760 AUC after training: 0.5555555555555556
User 10760 does not improve AUC. Reverting changes.
Training on augumented user 45866 27/50 current_auc = 0.5740740740740742
User 45866 AUC after training: 0.5555555555555556
User 45866 does not improve AUC. Reverting changes.
Training on augumented user 68786 28/50 current_auc = 0.5740740740740742
User 68786 AUC after training: 0.5555555555555556
User 68786 does not improve AUC. Reverting changes.
Training on augumented user 137799 29/50 current_auc = 0.5740740740740742
User 137799 AUC after training: 0.5740740740740742
User 137799 does not improve AUC. Reverting changes.
Training on augumented user 1335 30/50 current_auc = 0.5740740740740742
User 1335 AUC after training: 0.5555555555555556
User 1335 does not improve AUC. Reverting changes.
Training on augumented user 58776 31/50 current_auc = 0.5740740740740742
User 58776 AUC after training: 0.5740740740740742
User 58776 does not improve AUC. Reverting changes.
Training on augumented user 20112 32/50 current_auc = 0.5740740740740742
User 20112 AUC after training: 0.5555555555555556
User 20112 does not improve AUC. Reverting changes.
Training on augumented user 107929 33/50 current_auc = 0.5740740740740742
User 107929 AUC after training: 0.5740740740740742
User 107929 does not improve AUC. Reverting changes.
Training on augumented user 117013 34/50 current_auc = 0.5740740740740742
User 117013 AUC after training: 0.5740740740740742
User 117013 does not improve AUC. Reverting changes.
Training on augumented user 134987 35/50 current_auc = 0.5740740740740742
User 134987 AUC after training: 0.5740740740740742
User 134987 does not improve AUC. Reverting changes.
Training on augumented user 90266 36/50 current_auc = 0.5740740740740742
User 90266 AUC after training: 0.5740740740740742
User 90266 does not improve AUC. Reverting changes.
Training on augumented user 118415 37/50 current_auc = 0.5740740740740742
User 118415 AUC after training: 0.5740740740740742
User 118415 does not improve AUC. Reverting changes.
Training on augumented user 77317 38/50 current_auc = 0.5740740740740742
User 77317 AUC after training: 0.5555555555555556
User 77317 does not improve AUC. Reverting changes.
Training on augumented user 25999 39/50 current_auc = 0.5740740740740742
User 25999 AUC after training: 0.5740740740740742
User 25999 does not improve AUC. Reverting changes.
Training on augumented user 115559 40/50 current_auc = 0.5740740740740742
User 115559 AUC after training: 0.5555555555555556
User 115559 does not improve AUC. Reverting changes.
Training on augumented user 128488 41/50 current_auc = 0.5740740740740742
User 128488 AUC after training: 0.5740740740740742
User 128488 does not improve AUC. Reverting changes.
Training on augumented user 33053 42/50 current_auc = 0.5740740740740742
User 33053 AUC after training: 0.5740740740740742
User 33053 does not improve AUC. Reverting changes.
Training on augumented user 66847 43/50 current_auc = 0.5740740740740742
User 66847 AUC after training: 0.5555555555555556
User 66847 does not improve AUC. Reverting changes.
Training on augumented user 80402 44/50 current_auc = 0.5740740740740742
User 80402 AUC after training: 0.5555555555555556
User 80402 does not improve AUC. Reverting changes.
Training on augumented user 111663 45/50 current_auc = 0.5740740740740742
User 111663 AUC after training: 0.5740740740740742
User 111663 does not improve AUC. Reverting changes.
Training on augumented user 120923 46/50 current_auc = 0.5740740740740742
User 120923 AUC after training: 0.5555555555555556
User 120923 does not improve AUC. Reverting changes.
Training on augumented user 93623 47/50 current_auc = 0.5740740740740742
User 93623 AUC after training: 0.5555555555555556
User 93623 does not improve AUC. Reverting changes.
Training on augumented user 28005 48/50 current_auc = 0.5740740740740742
User 28005 AUC after training: 0.5740740740740742
User 28005 does not improve AUC. Reverting changes.
Training on augumented user 126039 49/50 current_auc = 0.5740740740740742
User 126039 AUC after training: 0.5740740740740742
User 126039 does not improve AUC. Reverting changes.
[2024-12-02 18:06:09.308738] start test user 14949 50/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:09.724847] start test user 14949 50/568 recall augumented users by random, augumented_users = [67254, 67090, 104506, 20172, 55183, 62674, 134951, 111251, 46679, 55903, 23388, 137800, 82350, 29785, 116725, 103483, 15851, 131458, 13758, 49837, 28450, 38428, 133868, 61886, 55418, 81918, 100417, 135393, 21909, 103659, 20525, 46452, 99984, 113671, 133660, 30285, 53982, 83873, 98407, 108862, 10995, 91580, 115794, 114978, 138252, 61733, 125119, 86079, 73320, 7217]
[2024-12-02 18:06:09.741810] user = 14949 Cloud 50/568
[2024-12-02 18:06:09.752768] user = 14949 Local 50/568
[2024-12-02 18:06:09.824626] user = 14949 Local+ 50/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:12.562642] user = 14949 MPDA- 50/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 67254 0/50 current_auc = 0.0
User 67254 AUC after training: 0.0
User 67254 does not improve AUC. Reverting changes.
Training on augumented user 67090 1/50 current_auc = 0.0
User 67090 AUC after training: 0.0
User 67090 does not improve AUC. Reverting changes.
Training on augumented user 104506 2/50 current_auc = 0.0
User 104506 AUC after training: 0.0
User 104506 does not improve AUC. Reverting changes.
Training on augumented user 20172 3/50 current_auc = 0.0
User 20172 AUC after training: 0.0
User 20172 does not improve AUC. Reverting changes.
Training on augumented user 55183 4/50 current_auc = 0.0
User 55183 AUC after training: 0.0
User 55183 does not improve AUC. Reverting changes.
Training on augumented user 62674 5/50 current_auc = 0.0
User 62674 AUC after training: 0.0
User 62674 does not improve AUC. Reverting changes.
Training on augumented user 134951 6/50 current_auc = 0.0
User 134951 AUC after training: 0.0
User 134951 does not improve AUC. Reverting changes.
Training on augumented user 111251 7/50 current_auc = 0.0
User 111251 AUC after training: 0.0
User 111251 does not improve AUC. Reverting changes.
Training on augumented user 46679 8/50 current_auc = 0.0
User 46679 AUC after training: 0.0
User 46679 does not improve AUC. Reverting changes.
Training on augumented user 55903 9/50 current_auc = 0.0
User 55903 AUC after training: 0.0
User 55903 does not improve AUC. Reverting changes.
Training on augumented user 23388 10/50 current_auc = 0.0
User 23388 AUC after training: 0.0
User 23388 does not improve AUC. Reverting changes.
Training on augumented user 137800 11/50 current_auc = 0.0
User 137800 AUC after training: 0.0
User 137800 does not improve AUC. Reverting changes.
Training on augumented user 82350 12/50 current_auc = 0.0
User 82350 AUC after training: 0.0
User 82350 does not improve AUC. Reverting changes.
Training on augumented user 29785 13/50 current_auc = 0.0
User 29785 AUC after training: 0.0
User 29785 does not improve AUC. Reverting changes.
Training on augumented user 116725 14/50 current_auc = 0.0
User 116725 AUC after training: 0.0
User 116725 does not improve AUC. Reverting changes.
Training on augumented user 103483 15/50 current_auc = 0.0
User 103483 AUC after training: 0.0
User 103483 does not improve AUC. Reverting changes.
Training on augumented user 15851 16/50 current_auc = 0.0
User 15851 AUC after training: 0.0
User 15851 does not improve AUC. Reverting changes.
Training on augumented user 131458 17/50 current_auc = 0.0
User 131458 AUC after training: 0.0
User 131458 does not improve AUC. Reverting changes.
Training on augumented user 13758 18/50 current_auc = 0.0
User 13758 AUC after training: 0.0
User 13758 does not improve AUC. Reverting changes.
Training on augumented user 49837 19/50 current_auc = 0.0
User 49837 AUC after training: 0.0
User 49837 does not improve AUC. Reverting changes.
Training on augumented user 28450 20/50 current_auc = 0.0
User 28450 AUC after training: 0.0
User 28450 does not improve AUC. Reverting changes.
Training on augumented user 38428 21/50 current_auc = 0.0
User 38428 AUC after training: 0.0
User 38428 does not improve AUC. Reverting changes.
Training on augumented user 133868 22/50 current_auc = 0.0
User 133868 AUC after training: 0.0
User 133868 does not improve AUC. Reverting changes.
Training on augumented user 61886 23/50 current_auc = 0.0
User 61886 AUC after training: 0.0
User 61886 does not improve AUC. Reverting changes.
Training on augumented user 55418 24/50 current_auc = 0.0
User 55418 AUC after training: 0.0
User 55418 does not improve AUC. Reverting changes.
Training on augumented user 81918 25/50 current_auc = 0.0
User 81918 AUC after training: 0.0
User 81918 does not improve AUC. Reverting changes.
Training on augumented user 100417 26/50 current_auc = 0.0
User 100417 AUC after training: 0.0
User 100417 does not improve AUC. Reverting changes.
Training on augumented user 135393 27/50 current_auc = 0.0
User 135393 AUC after training: 0.0
User 135393 does not improve AUC. Reverting changes.
Training on augumented user 21909 28/50 current_auc = 0.0
User 21909 AUC after training: 0.0
User 21909 does not improve AUC. Reverting changes.
Training on augumented user 103659 29/50 current_auc = 0.0
User 103659 AUC after training: 0.0
User 103659 does not improve AUC. Reverting changes.
Training on augumented user 20525 30/50 current_auc = 0.0
User 20525 AUC after training: 0.0
User 20525 does not improve AUC. Reverting changes.
Training on augumented user 46452 31/50 current_auc = 0.0
User 46452 AUC after training: 0.0
User 46452 does not improve AUC. Reverting changes.
Training on augumented user 99984 32/50 current_auc = 0.0
User 99984 AUC after training: 0.0
User 99984 does not improve AUC. Reverting changes.
Training on augumented user 113671 33/50 current_auc = 0.0
User 113671 AUC after training: 0.0
User 113671 does not improve AUC. Reverting changes.
Training on augumented user 133660 34/50 current_auc = 0.0
User 133660 AUC after training: 0.0
User 133660 does not improve AUC. Reverting changes.
Training on augumented user 30285 35/50 current_auc = 0.0
User 30285 AUC after training: 0.0
User 30285 does not improve AUC. Reverting changes.
Training on augumented user 53982 36/50 current_auc = 0.0
User 53982 AUC after training: 0.0
User 53982 does not improve AUC. Reverting changes.
Training on augumented user 83873 37/50 current_auc = 0.0
User 83873 AUC after training: 0.0
User 83873 does not improve AUC. Reverting changes.
Training on augumented user 98407 38/50 current_auc = 0.0
User 98407 AUC after training: 0.0
User 98407 does not improve AUC. Reverting changes.
Training on augumented user 108862 39/50 current_auc = 0.0
User 108862 AUC after training: 0.0
User 108862 does not improve AUC. Reverting changes.
Training on augumented user 10995 40/50 current_auc = 0.0
User 10995 AUC after training: 0.0
User 10995 does not improve AUC. Reverting changes.
Training on augumented user 91580 41/50 current_auc = 0.0
User 91580 AUC after training: 0.0
User 91580 does not improve AUC. Reverting changes.
Training on augumented user 115794 42/50 current_auc = 0.0
User 115794 AUC after training: 0.0
User 115794 does not improve AUC. Reverting changes.
Training on augumented user 114978 43/50 current_auc = 0.0
User 114978 AUC after training: 0.0
User 114978 does not improve AUC. Reverting changes.
Training on augumented user 138252 44/50 current_auc = 0.0
User 138252 AUC after training: 0.0
User 138252 does not improve AUC. Reverting changes.
Training on augumented user 61733 45/50 current_auc = 0.0
User 61733 AUC after training: 0.0
User 61733 does not improve AUC. Reverting changes.
Training on augumented user 125119 46/50 current_auc = 0.0
User 125119 AUC after training: 0.0
User 125119 does not improve AUC. Reverting changes.
Training on augumented user 86079 47/50 current_auc = 0.0
User 86079 AUC after training: 0.0
User 86079 does not improve AUC. Reverting changes.
Training on augumented user 73320 48/50 current_auc = 0.0
User 73320 AUC after training: 0.0
User 73320 does not improve AUC. Reverting changes.
Training on augumented user 7217 49/50 current_auc = 0.0
User 7217 AUC after training: 0.0
User 7217 does not improve AUC. Reverting changes.
[2024-12-02 18:06:41.192225] start test user 14962 51/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:42.075174] start test user 14962 51/568 recall augumented users by random, augumented_users = [19365, 45882, 130545, 70009, 42297, 49188, 14303, 19793, 92028, 111338, 134547, 2967, 136190, 125727, 30366, 130578, 34996, 30730, 97384, 111727, 33820, 27537, 31457, 74800, 129000, 71508, 118112, 108059, 27346, 26249, 61099, 62296, 29986, 25702, 60073, 101965, 116717, 83222, 121005, 22969, 1638, 108662, 24744, 76743, 135554, 123226, 132636, 12336, 57732, 137466]
[2024-12-02 18:06:42.131595] user = 14962 Cloud 51/568
[2024-12-02 18:06:42.156075] user = 14962 Local 51/568
[2024-12-02 18:06:42.241760] user = 14962 Local+ 51/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:44.561974] user = 14962 MPDA- 51/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 19365 0/50 current_auc = 0.0
User 19365 AUC after training: 0.0
User 19365 does not improve AUC. Reverting changes.
Training on augumented user 45882 1/50 current_auc = 0.0
User 45882 AUC after training: 0.0
User 45882 does not improve AUC. Reverting changes.
Training on augumented user 130545 2/50 current_auc = 0.0
User 130545 AUC after training: 0.0
User 130545 does not improve AUC. Reverting changes.
Training on augumented user 70009 3/50 current_auc = 0.0
User 70009 AUC after training: 0.0
User 70009 does not improve AUC. Reverting changes.
Training on augumented user 42297 4/50 current_auc = 0.0
User 42297 AUC after training: 0.0
User 42297 does not improve AUC. Reverting changes.
Training on augumented user 49188 5/50 current_auc = 0.0
User 49188 AUC after training: 0.0
User 49188 does not improve AUC. Reverting changes.
Training on augumented user 14303 6/50 current_auc = 0.0
User 14303 AUC after training: 0.0
User 14303 does not improve AUC. Reverting changes.
Training on augumented user 19793 7/50 current_auc = 0.0
User 19793 AUC after training: 0.0
User 19793 does not improve AUC. Reverting changes.
Training on augumented user 92028 8/50 current_auc = 0.0
User 92028 AUC after training: 0.0
User 92028 does not improve AUC. Reverting changes.
Training on augumented user 111338 9/50 current_auc = 0.0
User 111338 AUC after training: 0.0
User 111338 does not improve AUC. Reverting changes.
Training on augumented user 134547 10/50 current_auc = 0.0
User 134547 AUC after training: 0.0
User 134547 does not improve AUC. Reverting changes.
Training on augumented user 2967 11/50 current_auc = 0.0
User 2967 AUC after training: 0.0
User 2967 does not improve AUC. Reverting changes.
Training on augumented user 136190 12/50 current_auc = 0.0
User 136190 AUC after training: 0.0
User 136190 does not improve AUC. Reverting changes.
Training on augumented user 125727 13/50 current_auc = 0.0
User 125727 AUC after training: 0.0
User 125727 does not improve AUC. Reverting changes.
Training on augumented user 30366 14/50 current_auc = 0.0
User 30366 AUC after training: 0.0
User 30366 does not improve AUC. Reverting changes.
Training on augumented user 130578 15/50 current_auc = 0.0
User 130578 AUC after training: 0.0
User 130578 does not improve AUC. Reverting changes.
Training on augumented user 34996 16/50 current_auc = 0.0
User 34996 AUC after training: 0.0
User 34996 does not improve AUC. Reverting changes.
Training on augumented user 30730 17/50 current_auc = 0.0
User 30730 AUC after training: 0.0
User 30730 does not improve AUC. Reverting changes.
Training on augumented user 97384 18/50 current_auc = 0.0
User 97384 AUC after training: 0.0
User 97384 does not improve AUC. Reverting changes.
Training on augumented user 111727 19/50 current_auc = 0.0
User 111727 AUC after training: 0.0
User 111727 does not improve AUC. Reverting changes.
Training on augumented user 33820 20/50 current_auc = 0.0
User 33820 AUC after training: 0.0
User 33820 does not improve AUC. Reverting changes.
Training on augumented user 27537 21/50 current_auc = 0.0
User 27537 AUC after training: 0.0
User 27537 does not improve AUC. Reverting changes.
Training on augumented user 31457 22/50 current_auc = 0.0
User 31457 AUC after training: 0.0
User 31457 does not improve AUC. Reverting changes.
Training on augumented user 74800 23/50 current_auc = 0.0
User 74800 AUC after training: 0.0
User 74800 does not improve AUC. Reverting changes.
Training on augumented user 129000 24/50 current_auc = 0.0
User 129000 AUC after training: 0.0
User 129000 does not improve AUC. Reverting changes.
Training on augumented user 71508 25/50 current_auc = 0.0
User 71508 AUC after training: 0.0
User 71508 does not improve AUC. Reverting changes.
Training on augumented user 118112 26/50 current_auc = 0.0
User 118112 AUC after training: 0.0
User 118112 does not improve AUC. Reverting changes.
Training on augumented user 108059 27/50 current_auc = 0.0
User 108059 AUC after training: 0.0
User 108059 does not improve AUC. Reverting changes.
Training on augumented user 27346 28/50 current_auc = 0.0
User 27346 AUC after training: 0.0
User 27346 does not improve AUC. Reverting changes.
Training on augumented user 26249 29/50 current_auc = 0.0
User 26249 AUC after training: 0.0
User 26249 does not improve AUC. Reverting changes.
Training on augumented user 61099 30/50 current_auc = 0.0
User 61099 AUC after training: 0.0
User 61099 does not improve AUC. Reverting changes.
Training on augumented user 62296 31/50 current_auc = 0.0
User 62296 AUC after training: 0.0
User 62296 does not improve AUC. Reverting changes.
Training on augumented user 29986 32/50 current_auc = 0.0
User 29986 AUC after training: 0.0
User 29986 does not improve AUC. Reverting changes.
Training on augumented user 25702 33/50 current_auc = 0.0
User 25702 AUC after training: 0.0
User 25702 does not improve AUC. Reverting changes.
Training on augumented user 60073 34/50 current_auc = 0.0
User 60073 AUC after training: 0.0
User 60073 does not improve AUC. Reverting changes.
Training on augumented user 101965 35/50 current_auc = 0.0
User 101965 AUC after training: 0.0
User 101965 does not improve AUC. Reverting changes.
Training on augumented user 116717 36/50 current_auc = 0.0
User 116717 AUC after training: 0.0
User 116717 does not improve AUC. Reverting changes.
Training on augumented user 83222 37/50 current_auc = 0.0
User 83222 AUC after training: 0.0
User 83222 does not improve AUC. Reverting changes.
Training on augumented user 121005 38/50 current_auc = 0.0
User 121005 AUC after training: 0.0
User 121005 does not improve AUC. Reverting changes.
Training on augumented user 22969 39/50 current_auc = 0.0
User 22969 AUC after training: 0.0
User 22969 does not improve AUC. Reverting changes.
Training on augumented user 1638 40/50 current_auc = 0.0
User 1638 AUC after training: 0.0
User 1638 does not improve AUC. Reverting changes.
Training on augumented user 108662 41/50 current_auc = 0.0
User 108662 AUC after training: 0.0
User 108662 does not improve AUC. Reverting changes.
Training on augumented user 24744 42/50 current_auc = 0.0
User 24744 AUC after training: 0.0
User 24744 does not improve AUC. Reverting changes.
Training on augumented user 76743 43/50 current_auc = 0.0
User 76743 AUC after training: 0.0
User 76743 does not improve AUC. Reverting changes.
Training on augumented user 135554 44/50 current_auc = 0.0
User 135554 AUC after training: 0.0
User 135554 does not improve AUC. Reverting changes.
Training on augumented user 123226 45/50 current_auc = 0.0
User 123226 AUC after training: 0.0
User 123226 does not improve AUC. Reverting changes.
Training on augumented user 132636 46/50 current_auc = 0.0
User 132636 AUC after training: 0.0
User 132636 does not improve AUC. Reverting changes.
Training on augumented user 12336 47/50 current_auc = 0.0
User 12336 AUC after training: 0.0
User 12336 does not improve AUC. Reverting changes.
Training on augumented user 57732 48/50 current_auc = 0.0
User 57732 AUC after training: 0.0
User 57732 does not improve AUC. Reverting changes.
Training on augumented user 137466 49/50 current_auc = 0.0
User 137466 AUC after training: 0.0
User 137466 does not improve AUC. Reverting changes.
[2024-12-02 18:07:13.425121] start test user 14977 52/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:13.928938] start test user 14977 52/568 recall augumented users by random, augumented_users = [67961, 27572, 108764, 113757, 107604, 19961, 33512, 31960, 96875, 120131, 110462, 105636, 42654, 117042, 83267, 30854, 96558, 12510, 48183, 11271, 81330, 120381, 129017, 22016, 81362, 23751, 98787, 94197, 124721, 77407, 39474, 29491, 16715, 115099, 38893, 132824, 10068, 64153, 85296, 39923, 100897, 69619, 51715, 61600, 138445, 110877, 49178, 39031, 45671, 6821]
[2024-12-02 18:07:13.946146] user = 14977 Cloud 52/568
[2024-12-02 18:07:14.012481] user = 14977 Local 52/568
[2024-12-02 18:07:14.152136] user = 14977 Local+ 52/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:15.959687] user = 14977 MPDA- 52/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7882205513784462
Training on augumented user 67961 0/50 current_auc = 0.7882205513784462
User 67961 AUC after training: 0.7886591478696743
User 67961 improves AUC. Keeping the model.
Training on augumented user 27572 1/50 current_auc = 0.7886591478696743
User 27572 AUC after training: 0.7884085213032581
User 27572 does not improve AUC. Reverting changes.
Training on augumented user 108764 2/50 current_auc = 0.7886591478696743
User 108764 AUC after training: 0.7881578947368422
User 108764 does not improve AUC. Reverting changes.
Training on augumented user 113757 3/50 current_auc = 0.7886591478696743
User 113757 AUC after training: 0.788220551378446
User 113757 does not improve AUC. Reverting changes.
Training on augumented user 107604 4/50 current_auc = 0.7886591478696743
User 107604 AUC after training: 0.7889097744360902
User 107604 improves AUC. Keeping the model.
Training on augumented user 19961 5/50 current_auc = 0.7889097744360902
User 19961 AUC after training: 0.788721804511278
User 19961 does not improve AUC. Reverting changes.
Training on augumented user 33512 6/50 current_auc = 0.7889097744360902
User 33512 AUC after training: 0.7887844611528821
User 33512 does not improve AUC. Reverting changes.
Training on augumented user 31960 7/50 current_auc = 0.7889097744360902
User 31960 AUC after training: 0.7889724310776942
User 31960 improves AUC. Keeping the model.
Training on augumented user 96875 8/50 current_auc = 0.7889724310776942
User 96875 AUC after training: 0.787719298245614
User 96875 does not improve AUC. Reverting changes.
Training on augumented user 120131 9/50 current_auc = 0.7889724310776942
User 120131 AUC after training: 0.7887844611528823
User 120131 does not improve AUC. Reverting changes.
Training on augumented user 110462 10/50 current_auc = 0.7889724310776942
User 110462 AUC after training: 0.7890350877192982
User 110462 improves AUC. Keeping the model.
Training on augumented user 105636 11/50 current_auc = 0.7890350877192982
User 105636 AUC after training: 0.7884711779448621
User 105636 does not improve AUC. Reverting changes.
Training on augumented user 42654 12/50 current_auc = 0.7890350877192982
User 42654 AUC after training: 0.7888471177944862
User 42654 does not improve AUC. Reverting changes.
Training on augumented user 117042 13/50 current_auc = 0.7890350877192982
User 117042 AUC after training: 0.7890977443609022
User 117042 improves AUC. Keeping the model.
Training on augumented user 83267 14/50 current_auc = 0.7890977443609022
User 83267 AUC after training: 0.7888471177944862
User 83267 does not improve AUC. Reverting changes.
Training on augumented user 30854 15/50 current_auc = 0.7890977443609022
User 30854 AUC after training: 0.788032581453634
User 30854 does not improve AUC. Reverting changes.
Training on augumented user 96558 16/50 current_auc = 0.7890977443609022
User 96558 AUC after training: 0.7895363408521303
User 96558 improves AUC. Keeping the model.
Training on augumented user 12510 17/50 current_auc = 0.7895363408521303
User 12510 AUC after training: 0.7894110275689223
User 12510 does not improve AUC. Reverting changes.
Training on augumented user 48183 18/50 current_auc = 0.7895363408521303
User 48183 AUC after training: 0.7893483709273182
User 48183 does not improve AUC. Reverting changes.
Training on augumented user 11271 19/50 current_auc = 0.7895363408521303
User 11271 AUC after training: 0.7888471177944862
User 11271 does not improve AUC. Reverting changes.
Training on augumented user 81330 20/50 current_auc = 0.7895363408521303
User 81330 AUC after training: 0.7901002506265664
User 81330 improves AUC. Keeping the model.
Training on augumented user 120381 21/50 current_auc = 0.7901002506265664
User 120381 AUC after training: 0.7892857142857143
User 120381 does not improve AUC. Reverting changes.
Training on augumented user 129017 22/50 current_auc = 0.7901002506265664
User 129017 AUC after training: 0.7896616541353383
User 129017 does not improve AUC. Reverting changes.
Training on augumented user 22016 23/50 current_auc = 0.7901002506265664
User 22016 AUC after training: 0.7899749373433584
User 22016 does not improve AUC. Reverting changes.
Training on augumented user 81362 24/50 current_auc = 0.7901002506265664
User 81362 AUC after training: 0.7893483709273184
User 81362 does not improve AUC. Reverting changes.
Training on augumented user 23751 25/50 current_auc = 0.7901002506265664
User 23751 AUC after training: 0.7891604010025063
User 23751 does not improve AUC. Reverting changes.
Training on augumented user 98787 26/50 current_auc = 0.7901002506265664
User 98787 AUC after training: 0.7901002506265664
User 98787 does not improve AUC. Reverting changes.
Training on augumented user 94197 27/50 current_auc = 0.7901002506265664
User 94197 AUC after training: 0.7890977443609022
User 94197 does not improve AUC. Reverting changes.
Training on augumented user 124721 28/50 current_auc = 0.7901002506265664
User 124721 AUC after training: 0.7896616541353383
User 124721 does not improve AUC. Reverting changes.
Training on augumented user 77407 29/50 current_auc = 0.7901002506265664
User 77407 AUC after training: 0.7896616541353383
User 77407 does not improve AUC. Reverting changes.
Training on augumented user 39474 30/50 current_auc = 0.7901002506265664
User 39474 AUC after training: 0.7899122807017545
User 39474 does not improve AUC. Reverting changes.
Training on augumented user 29491 31/50 current_auc = 0.7901002506265664
User 29491 AUC after training: 0.7887844611528823
User 29491 does not improve AUC. Reverting changes.
Training on augumented user 16715 32/50 current_auc = 0.7901002506265664
User 16715 AUC after training: 0.7903508771929824
User 16715 improves AUC. Keeping the model.
Training on augumented user 115099 33/50 current_auc = 0.7903508771929824
User 115099 AUC after training: 0.7905388471177945
User 115099 improves AUC. Keeping the model.
Training on augumented user 38893 34/50 current_auc = 0.7905388471177945
User 38893 AUC after training: 0.7894736842105262
User 38893 does not improve AUC. Reverting changes.
Training on augumented user 132824 35/50 current_auc = 0.7905388471177945
User 132824 AUC after training: 0.7906015037593985
User 132824 improves AUC. Keeping the model.
Training on augumented user 10068 36/50 current_auc = 0.7906015037593985
User 10068 AUC after training: 0.7909774436090224
User 10068 improves AUC. Keeping the model.
Training on augumented user 64153 37/50 current_auc = 0.7909774436090224
User 64153 AUC after training: 0.7910401002506265
User 64153 improves AUC. Keeping the model.
Training on augumented user 85296 38/50 current_auc = 0.7910401002506265
User 85296 AUC after training: 0.7902255639097744
User 85296 does not improve AUC. Reverting changes.
Training on augumented user 39923 39/50 current_auc = 0.7910401002506265
User 39923 AUC after training: 0.7902255639097744
User 39923 does not improve AUC. Reverting changes.
Training on augumented user 100897 40/50 current_auc = 0.7910401002506265
User 100897 AUC after training: 0.7902255639097745
User 100897 does not improve AUC. Reverting changes.
Training on augumented user 69619 41/50 current_auc = 0.7910401002506265
User 69619 AUC after training: 0.7906641604010025
User 69619 does not improve AUC. Reverting changes.
Training on augumented user 51715 42/50 current_auc = 0.7910401002506265
User 51715 AUC after training: 0.7886591478696743
User 51715 does not improve AUC. Reverting changes.
Training on augumented user 61600 43/50 current_auc = 0.7910401002506265
User 61600 AUC after training: 0.7909774436090224
User 61600 does not improve AUC. Reverting changes.
Training on augumented user 138445 44/50 current_auc = 0.7910401002506265
User 138445 AUC after training: 0.7906641604010025
User 138445 does not improve AUC. Reverting changes.
Training on augumented user 110877 45/50 current_auc = 0.7910401002506265
User 110877 AUC after training: 0.7909147869674186
User 110877 does not improve AUC. Reverting changes.
Training on augumented user 49178 46/50 current_auc = 0.7910401002506265
User 49178 AUC after training: 0.7912280701754386
User 49178 improves AUC. Keeping the model.
Training on augumented user 39031 47/50 current_auc = 0.7912280701754386
User 39031 AUC after training: 0.7916040100250628
User 39031 improves AUC. Keeping the model.
Training on augumented user 45671 48/50 current_auc = 0.7916040100250628
User 45671 AUC after training: 0.7914786967418546
User 45671 does not improve AUC. Reverting changes.
Training on augumented user 6821 49/50 current_auc = 0.7916040100250628
User 6821 AUC after training: 0.7912907268170426
User 6821 does not improve AUC. Reverting changes.
[2024-12-02 18:07:42.788803] start test user 15043 53/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:43.343606] start test user 15043 53/568 recall augumented users by random, augumented_users = [47269, 67681, 52734, 74581, 110323, 53983, 114599, 120586, 9446, 35387, 93593, 111845, 65754, 66694, 8409, 127293, 36353, 39400, 59478, 47590, 131739, 2763, 128886, 6145, 101077, 129071, 111835, 74111, 119609, 101669, 134579, 96617, 57671, 86671, 9177, 8872, 40856, 122049, 5276, 72466, 71684, 132946, 77452, 8128, 114902, 37992, 136807, 120525, 24219, 17685]
[2024-12-02 18:07:43.360535] user = 15043 Cloud 53/568
[2024-12-02 18:07:43.378996] user = 15043 Local 53/568
[2024-12-02 18:07:43.539997] user = 15043 Local+ 53/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:46.062735] user = 15043 MPDA- 53/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5223544973544973
Training on augumented user 47269 0/50 current_auc = 0.5223544973544973
User 47269 AUC after training: 0.5216931216931217
User 47269 does not improve AUC. Reverting changes.
Training on augumented user 67681 1/50 current_auc = 0.5223544973544973
User 67681 AUC after training: 0.5239417989417989
User 67681 improves AUC. Keeping the model.
Training on augumented user 52734 2/50 current_auc = 0.5239417989417989
User 52734 AUC after training: 0.5201058201058201
User 52734 does not improve AUC. Reverting changes.
Training on augumented user 74581 3/50 current_auc = 0.5239417989417989
User 74581 AUC after training: 0.5230158730158729
User 74581 does not improve AUC. Reverting changes.
Training on augumented user 110323 4/50 current_auc = 0.5239417989417989
User 110323 AUC after training: 0.5226190476190475
User 110323 does not improve AUC. Reverting changes.
Training on augumented user 53983 5/50 current_auc = 0.5239417989417989
User 53983 AUC after training: 0.5243386243386243
User 53983 improves AUC. Keeping the model.
Training on augumented user 114599 6/50 current_auc = 0.5243386243386243
User 114599 AUC after training: 0.5247354497354497
User 114599 improves AUC. Keeping the model.
Training on augumented user 120586 7/50 current_auc = 0.5247354497354497
User 120586 AUC after training: 0.5226190476190476
User 120586 does not improve AUC. Reverting changes.
Training on augumented user 9446 8/50 current_auc = 0.5247354497354497
User 9446 AUC after training: 0.519973544973545
User 9446 does not improve AUC. Reverting changes.
Training on augumented user 35387 9/50 current_auc = 0.5247354497354497
User 35387 AUC after training: 0.5222222222222221
User 35387 does not improve AUC. Reverting changes.
Training on augumented user 93593 10/50 current_auc = 0.5247354497354497
User 93593 AUC after training: 0.525
User 93593 improves AUC. Keeping the model.
Training on augumented user 111845 11/50 current_auc = 0.525
User 111845 AUC after training: 0.5267195767195767
User 111845 improves AUC. Keeping the model.
Training on augumented user 65754 12/50 current_auc = 0.5267195767195767
User 65754 AUC after training: 0.5275132275132275
User 65754 improves AUC. Keeping the model.
Training on augumented user 66694 13/50 current_auc = 0.5275132275132275
User 66694 AUC after training: 0.5246031746031746
User 66694 does not improve AUC. Reverting changes.
Training on augumented user 8409 14/50 current_auc = 0.5275132275132275
User 8409 AUC after training: 0.5280423280423281
User 8409 improves AUC. Keeping the model.
Training on augumented user 127293 15/50 current_auc = 0.5280423280423281
User 127293 AUC after training: 0.5277777777777778
User 127293 does not improve AUC. Reverting changes.
Training on augumented user 36353 16/50 current_auc = 0.5280423280423281
User 36353 AUC after training: 0.5248677248677249
User 36353 does not improve AUC. Reverting changes.
Training on augumented user 39400 17/50 current_auc = 0.5280423280423281
User 39400 AUC after training: 0.5284391534391535
User 39400 improves AUC. Keeping the model.
Training on augumented user 59478 18/50 current_auc = 0.5284391534391535
User 59478 AUC after training: 0.5288359788359788
User 59478 improves AUC. Keeping the model.
Training on augumented user 47590 19/50 current_auc = 0.5288359788359788
User 47590 AUC after training: 0.5271164021164021
User 47590 does not improve AUC. Reverting changes.
Training on augumented user 131739 20/50 current_auc = 0.5288359788359788
User 131739 AUC after training: 0.5293650793650794
User 131739 improves AUC. Keeping the model.
Training on augumented user 2763 21/50 current_auc = 0.5293650793650794
User 2763 AUC after training: 0.5279100529100529
User 2763 does not improve AUC. Reverting changes.
Training on augumented user 128886 22/50 current_auc = 0.5293650793650794
User 128886 AUC after training: 0.5257936507936507
User 128886 does not improve AUC. Reverting changes.
Training on augumented user 6145 23/50 current_auc = 0.5293650793650794
User 6145 AUC after training: 0.5268518518518519
User 6145 does not improve AUC. Reverting changes.
Training on augumented user 101077 24/50 current_auc = 0.5293650793650794
User 101077 AUC after training: 0.5263227513227513
User 101077 does not improve AUC. Reverting changes.
Training on augumented user 129071 25/50 current_auc = 0.5293650793650794
User 129071 AUC after training: 0.5292328042328043
User 129071 does not improve AUC. Reverting changes.
Training on augumented user 111835 26/50 current_auc = 0.5293650793650794
User 111835 AUC after training: 0.5296296296296297
User 111835 improves AUC. Keeping the model.
Training on augumented user 74111 27/50 current_auc = 0.5296296296296297
User 74111 AUC after training: 0.5292328042328042
User 74111 does not improve AUC. Reverting changes.
Training on augumented user 119609 28/50 current_auc = 0.5296296296296297
User 119609 AUC after training: 0.531084656084656
User 119609 improves AUC. Keeping the model.
Training on augumented user 101669 29/50 current_auc = 0.531084656084656
User 101669 AUC after training: 0.5314814814814814
User 101669 improves AUC. Keeping the model.
Training on augumented user 134579 30/50 current_auc = 0.5314814814814814
User 134579 AUC after training: 0.5300264550264551
User 134579 does not improve AUC. Reverting changes.
Training on augumented user 96617 31/50 current_auc = 0.5314814814814814
User 96617 AUC after training: 0.5283068783068783
User 96617 does not improve AUC. Reverting changes.
Training on augumented user 57671 32/50 current_auc = 0.5314814814814814
User 57671 AUC after training: 0.5263227513227513
User 57671 does not improve AUC. Reverting changes.
Training on augumented user 86671 33/50 current_auc = 0.5314814814814814
User 86671 AUC after training: 0.5231481481481483
User 86671 does not improve AUC. Reverting changes.
Training on augumented user 9177 34/50 current_auc = 0.5314814814814814
User 9177 AUC after training: 0.52989417989418
User 9177 does not improve AUC. Reverting changes.
Training on augumented user 8872 35/50 current_auc = 0.5314814814814814
User 8872 AUC after training: 0.5283068783068784
User 8872 does not improve AUC. Reverting changes.
Training on augumented user 40856 36/50 current_auc = 0.5314814814814814
User 40856 AUC after training: 0.5294973544973545
User 40856 does not improve AUC. Reverting changes.
Training on augumented user 122049 37/50 current_auc = 0.5314814814814814
User 122049 AUC after training: 0.5226190476190475
User 122049 does not improve AUC. Reverting changes.
Training on augumented user 5276 38/50 current_auc = 0.5314814814814814
User 5276 AUC after training: 0.532010582010582
User 5276 improves AUC. Keeping the model.
Training on augumented user 72466 39/50 current_auc = 0.532010582010582
User 72466 AUC after training: 0.5328042328042328
User 72466 improves AUC. Keeping the model.
Training on augumented user 71684 40/50 current_auc = 0.5328042328042328
User 71684 AUC after training: 0.5325396825396826
User 71684 does not improve AUC. Reverting changes.
Training on augumented user 132946 41/50 current_auc = 0.5328042328042328
User 132946 AUC after training: 0.5324074074074074
User 132946 does not improve AUC. Reverting changes.
Training on augumented user 77452 42/50 current_auc = 0.5328042328042328
User 77452 AUC after training: 0.5207671957671958
User 77452 does not improve AUC. Reverting changes.
Training on augumented user 8128 43/50 current_auc = 0.5328042328042328
User 8128 AUC after training: 0.5285714285714286
User 8128 does not improve AUC. Reverting changes.
Training on augumented user 114902 44/50 current_auc = 0.5328042328042328
User 114902 AUC after training: 0.5325396825396825
User 114902 does not improve AUC. Reverting changes.
Training on augumented user 37992 45/50 current_auc = 0.5328042328042328
User 37992 AUC after training: 0.5317460317460319
User 37992 does not improve AUC. Reverting changes.
Training on augumented user 136807 46/50 current_auc = 0.5328042328042328
User 136807 AUC after training: 0.5324074074074074
User 136807 does not improve AUC. Reverting changes.
Training on augumented user 120525 47/50 current_auc = 0.5328042328042328
User 120525 AUC after training: 0.5325396825396826
User 120525 does not improve AUC. Reverting changes.
Training on augumented user 24219 48/50 current_auc = 0.5328042328042328
User 24219 AUC after training: 0.5291005291005291
User 24219 does not improve AUC. Reverting changes.
Training on augumented user 17685 49/50 current_auc = 0.5328042328042328
User 17685 AUC after training: 0.5328042328042328
User 17685 does not improve AUC. Reverting changes.
[2024-12-02 18:08:06.834444] start test user 15072 54/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:07.361283] start test user 15072 54/568 recall augumented users by random, augumented_users = [27658, 7322, 96817, 41563, 68858, 134134, 30050, 22761, 78229, 133043, 21216, 33729, 18227, 64494, 108286, 21367, 136817, 101084, 84699, 38875, 70783, 54082, 51685, 75646, 76803, 130605, 60415, 89358, 60758, 121551, 2160, 41729, 75962, 42156, 1697, 106316, 136710, 125238, 19687, 2464, 108268, 99152, 102091, 54296, 4918, 63016, 98571, 125948, 37084, 122276]
[2024-12-02 18:08:07.376964] user = 15072 Cloud 54/568
[2024-12-02 18:08:07.387020] user = 15072 Local 54/568
[2024-12-02 18:08:07.432779] user = 15072 Local+ 54/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:09.742692] user = 15072 MPDA- 54/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8703703703703703
Training on augumented user 27658 0/50 current_auc = 0.8703703703703703
User 27658 AUC after training: 0.8703703703703703
User 27658 does not improve AUC. Reverting changes.
Training on augumented user 7322 1/50 current_auc = 0.8703703703703703
User 7322 AUC after training: 0.8703703703703703
User 7322 does not improve AUC. Reverting changes.
Training on augumented user 96817 2/50 current_auc = 0.8703703703703703
User 96817 AUC after training: 0.8703703703703703
User 96817 does not improve AUC. Reverting changes.
Training on augumented user 41563 3/50 current_auc = 0.8703703703703703
User 41563 AUC after training: 0.8703703703703703
User 41563 does not improve AUC. Reverting changes.
Training on augumented user 68858 4/50 current_auc = 0.8703703703703703
User 68858 AUC after training: 0.8703703703703703
User 68858 does not improve AUC. Reverting changes.
Training on augumented user 134134 5/50 current_auc = 0.8703703703703703
User 134134 AUC after training: 0.8703703703703703
User 134134 does not improve AUC. Reverting changes.
Training on augumented user 30050 6/50 current_auc = 0.8703703703703703
User 30050 AUC after training: 0.8703703703703703
User 30050 does not improve AUC. Reverting changes.
Training on augumented user 22761 7/50 current_auc = 0.8703703703703703
User 22761 AUC after training: 0.8703703703703703
User 22761 does not improve AUC. Reverting changes.
Training on augumented user 78229 8/50 current_auc = 0.8703703703703703
User 78229 AUC after training: 0.8703703703703703
User 78229 does not improve AUC. Reverting changes.
Training on augumented user 133043 9/50 current_auc = 0.8703703703703703
User 133043 AUC after training: 0.8703703703703703
User 133043 does not improve AUC. Reverting changes.
Training on augumented user 21216 10/50 current_auc = 0.8703703703703703
User 21216 AUC after training: 0.8703703703703703
User 21216 does not improve AUC. Reverting changes.
Training on augumented user 33729 11/50 current_auc = 0.8703703703703703
User 33729 AUC after training: 0.8703703703703703
User 33729 does not improve AUC. Reverting changes.
Training on augumented user 18227 12/50 current_auc = 0.8703703703703703
User 18227 AUC after training: 0.8703703703703703
User 18227 does not improve AUC. Reverting changes.
Training on augumented user 64494 13/50 current_auc = 0.8703703703703703
User 64494 AUC after training: 0.8703703703703703
User 64494 does not improve AUC. Reverting changes.
Training on augumented user 108286 14/50 current_auc = 0.8703703703703703
User 108286 AUC after training: 0.8703703703703703
User 108286 does not improve AUC. Reverting changes.
Training on augumented user 21367 15/50 current_auc = 0.8703703703703703
User 21367 AUC after training: 0.8703703703703703
User 21367 does not improve AUC. Reverting changes.
Training on augumented user 136817 16/50 current_auc = 0.8703703703703703
User 136817 AUC after training: 0.8703703703703703
User 136817 does not improve AUC. Reverting changes.
Training on augumented user 101084 17/50 current_auc = 0.8703703703703703
User 101084 AUC after training: 0.8703703703703703
User 101084 does not improve AUC. Reverting changes.
Training on augumented user 84699 18/50 current_auc = 0.8703703703703703
User 84699 AUC after training: 0.8703703703703703
User 84699 does not improve AUC. Reverting changes.
Training on augumented user 38875 19/50 current_auc = 0.8703703703703703
User 38875 AUC after training: 0.8703703703703703
User 38875 does not improve AUC. Reverting changes.
Training on augumented user 70783 20/50 current_auc = 0.8703703703703703
User 70783 AUC after training: 0.8703703703703703
User 70783 does not improve AUC. Reverting changes.
Training on augumented user 54082 21/50 current_auc = 0.8703703703703703
User 54082 AUC after training: 0.8703703703703703
User 54082 does not improve AUC. Reverting changes.
Training on augumented user 51685 22/50 current_auc = 0.8703703703703703
User 51685 AUC after training: 0.8703703703703703
User 51685 does not improve AUC. Reverting changes.
Training on augumented user 75646 23/50 current_auc = 0.8703703703703703
User 75646 AUC after training: 0.8703703703703703
User 75646 does not improve AUC. Reverting changes.
Training on augumented user 76803 24/50 current_auc = 0.8703703703703703
User 76803 AUC after training: 0.8703703703703703
User 76803 does not improve AUC. Reverting changes.
Training on augumented user 130605 25/50 current_auc = 0.8703703703703703
User 130605 AUC after training: 0.8703703703703703
User 130605 does not improve AUC. Reverting changes.
Training on augumented user 60415 26/50 current_auc = 0.8703703703703703
User 60415 AUC after training: 0.8703703703703703
User 60415 does not improve AUC. Reverting changes.
Training on augumented user 89358 27/50 current_auc = 0.8703703703703703
User 89358 AUC after training: 0.8703703703703703
User 89358 does not improve AUC. Reverting changes.
Training on augumented user 60758 28/50 current_auc = 0.8703703703703703
User 60758 AUC after training: 0.8703703703703703
User 60758 does not improve AUC. Reverting changes.
Training on augumented user 121551 29/50 current_auc = 0.8703703703703703
User 121551 AUC after training: 0.8703703703703703
User 121551 does not improve AUC. Reverting changes.
Training on augumented user 2160 30/50 current_auc = 0.8703703703703703
User 2160 AUC after training: 0.8703703703703703
User 2160 does not improve AUC. Reverting changes.
Training on augumented user 41729 31/50 current_auc = 0.8703703703703703
User 41729 AUC after training: 0.8703703703703703
User 41729 does not improve AUC. Reverting changes.
Training on augumented user 75962 32/50 current_auc = 0.8703703703703703
User 75962 AUC after training: 0.8703703703703703
User 75962 does not improve AUC. Reverting changes.
Training on augumented user 42156 33/50 current_auc = 0.8703703703703703
User 42156 AUC after training: 0.8703703703703703
User 42156 does not improve AUC. Reverting changes.
Training on augumented user 1697 34/50 current_auc = 0.8703703703703703
User 1697 AUC after training: 0.8703703703703703
User 1697 does not improve AUC. Reverting changes.
Training on augumented user 106316 35/50 current_auc = 0.8703703703703703
User 106316 AUC after training: 0.8703703703703703
User 106316 does not improve AUC. Reverting changes.
Training on augumented user 136710 36/50 current_auc = 0.8703703703703703
User 136710 AUC after training: 0.8703703703703703
User 136710 does not improve AUC. Reverting changes.
Training on augumented user 125238 37/50 current_auc = 0.8703703703703703
User 125238 AUC after training: 0.8703703703703703
User 125238 does not improve AUC. Reverting changes.
Training on augumented user 19687 38/50 current_auc = 0.8703703703703703
User 19687 AUC after training: 0.8703703703703703
User 19687 does not improve AUC. Reverting changes.
Training on augumented user 2464 39/50 current_auc = 0.8703703703703703
User 2464 AUC after training: 0.8703703703703703
User 2464 does not improve AUC. Reverting changes.
Training on augumented user 108268 40/50 current_auc = 0.8703703703703703
User 108268 AUC after training: 0.8703703703703703
User 108268 does not improve AUC. Reverting changes.
Training on augumented user 99152 41/50 current_auc = 0.8703703703703703
User 99152 AUC after training: 0.8703703703703703
User 99152 does not improve AUC. Reverting changes.
Training on augumented user 102091 42/50 current_auc = 0.8703703703703703
User 102091 AUC after training: 0.8703703703703703
User 102091 does not improve AUC. Reverting changes.
Training on augumented user 54296 43/50 current_auc = 0.8703703703703703
User 54296 AUC after training: 0.8703703703703703
User 54296 does not improve AUC. Reverting changes.
Training on augumented user 4918 44/50 current_auc = 0.8703703703703703
User 4918 AUC after training: 0.8703703703703703
User 4918 does not improve AUC. Reverting changes.
Training on augumented user 63016 45/50 current_auc = 0.8703703703703703
User 63016 AUC after training: 0.8703703703703703
User 63016 does not improve AUC. Reverting changes.
Training on augumented user 98571 46/50 current_auc = 0.8703703703703703
User 98571 AUC after training: 0.8703703703703703
User 98571 does not improve AUC. Reverting changes.
Training on augumented user 125948 47/50 current_auc = 0.8703703703703703
User 125948 AUC after training: 0.8703703703703703
User 125948 does not improve AUC. Reverting changes.
Training on augumented user 37084 48/50 current_auc = 0.8703703703703703
User 37084 AUC after training: 0.8703703703703703
User 37084 does not improve AUC. Reverting changes.
Training on augumented user 122276 49/50 current_auc = 0.8703703703703703
User 122276 AUC after training: 0.8703703703703703
User 122276 does not improve AUC. Reverting changes.
[2024-12-02 18:08:38.840931] start test user 15094 55/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:39.277686] start test user 15094 55/568 recall augumented users by random, augumented_users = [76496, 58358, 50562, 130567, 35270, 81533, 89945, 45318, 43754, 71977, 906, 115702, 21816, 106039, 108347, 135869, 98755, 70901, 95425, 95667, 57732, 35973, 91893, 60121, 41612, 18996, 89991, 44196, 120291, 27734, 8947, 81348, 91097, 40425, 17890, 75065, 95202, 42268, 69484, 79222, 16415, 84797, 48294, 131995, 70802, 78217, 25253, 40168, 77062, 82385]
[2024-12-02 18:08:39.293358] user = 15094 Cloud 55/568
[2024-12-02 18:08:39.303532] user = 15094 Local 55/568
[2024-12-02 18:08:39.343215] user = 15094 Local+ 55/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:41.993716] user = 15094 MPDA- 55/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7857142857142857
Training on augumented user 76496 0/50 current_auc = 0.7857142857142857
User 76496 AUC after training: 0.7857142857142857
User 76496 does not improve AUC. Reverting changes.
Training on augumented user 58358 1/50 current_auc = 0.7857142857142857
User 58358 AUC after training: 0.7857142857142857
User 58358 does not improve AUC. Reverting changes.
Training on augumented user 50562 2/50 current_auc = 0.7857142857142857
User 50562 AUC after training: 0.7857142857142857
User 50562 does not improve AUC. Reverting changes.
Training on augumented user 130567 3/50 current_auc = 0.7857142857142857
User 130567 AUC after training: 0.7857142857142857
User 130567 does not improve AUC. Reverting changes.
Training on augumented user 35270 4/50 current_auc = 0.7857142857142857
User 35270 AUC after training: 0.8035714285714286
User 35270 improves AUC. Keeping the model.
Training on augumented user 81533 5/50 current_auc = 0.8035714285714286
User 81533 AUC after training: 0.8035714285714286
User 81533 does not improve AUC. Reverting changes.
Training on augumented user 89945 6/50 current_auc = 0.8035714285714286
User 89945 AUC after training: 0.8035714285714286
User 89945 does not improve AUC. Reverting changes.
Training on augumented user 45318 7/50 current_auc = 0.8035714285714286
User 45318 AUC after training: 0.8035714285714286
User 45318 does not improve AUC. Reverting changes.
Training on augumented user 43754 8/50 current_auc = 0.8035714285714286
User 43754 AUC after training: 0.8035714285714286
User 43754 does not improve AUC. Reverting changes.
Training on augumented user 71977 9/50 current_auc = 0.8035714285714286
User 71977 AUC after training: 0.8035714285714286
User 71977 does not improve AUC. Reverting changes.
Training on augumented user 906 10/50 current_auc = 0.8035714285714286
User 906 AUC after training: 0.8035714285714286
User 906 does not improve AUC. Reverting changes.
Training on augumented user 115702 11/50 current_auc = 0.8035714285714286
User 115702 AUC after training: 0.8035714285714286
User 115702 does not improve AUC. Reverting changes.
Training on augumented user 21816 12/50 current_auc = 0.8035714285714286
User 21816 AUC after training: 0.8035714285714286
User 21816 does not improve AUC. Reverting changes.
Training on augumented user 106039 13/50 current_auc = 0.8035714285714286
User 106039 AUC after training: 0.8035714285714286
User 106039 does not improve AUC. Reverting changes.
Training on augumented user 108347 14/50 current_auc = 0.8035714285714286
User 108347 AUC after training: 0.8035714285714286
User 108347 does not improve AUC. Reverting changes.
Training on augumented user 135869 15/50 current_auc = 0.8035714285714286
User 135869 AUC after training: 0.8035714285714286
User 135869 does not improve AUC. Reverting changes.
Training on augumented user 98755 16/50 current_auc = 0.8035714285714286
User 98755 AUC after training: 0.8035714285714286
User 98755 does not improve AUC. Reverting changes.
Training on augumented user 70901 17/50 current_auc = 0.8035714285714286
User 70901 AUC after training: 0.8035714285714286
User 70901 does not improve AUC. Reverting changes.
Training on augumented user 95425 18/50 current_auc = 0.8035714285714286
User 95425 AUC after training: 0.8035714285714286
User 95425 does not improve AUC. Reverting changes.
Training on augumented user 95667 19/50 current_auc = 0.8035714285714286
User 95667 AUC after training: 0.8035714285714286
User 95667 does not improve AUC. Reverting changes.
Training on augumented user 57732 20/50 current_auc = 0.8035714285714286
User 57732 AUC after training: 0.8035714285714286
User 57732 does not improve AUC. Reverting changes.
Training on augumented user 35973 21/50 current_auc = 0.8035714285714286
User 35973 AUC after training: 0.8035714285714286
User 35973 does not improve AUC. Reverting changes.
Training on augumented user 91893 22/50 current_auc = 0.8035714285714286
User 91893 AUC after training: 0.7857142857142857
User 91893 does not improve AUC. Reverting changes.
Training on augumented user 60121 23/50 current_auc = 0.8035714285714286
User 60121 AUC after training: 0.8035714285714286
User 60121 does not improve AUC. Reverting changes.
Training on augumented user 41612 24/50 current_auc = 0.8035714285714286
User 41612 AUC after training: 0.8035714285714286
User 41612 does not improve AUC. Reverting changes.
Training on augumented user 18996 25/50 current_auc = 0.8035714285714286
User 18996 AUC after training: 0.7857142857142857
User 18996 does not improve AUC. Reverting changes.
Training on augumented user 89991 26/50 current_auc = 0.8035714285714286
User 89991 AUC after training: 0.8035714285714286
User 89991 does not improve AUC. Reverting changes.
Training on augumented user 44196 27/50 current_auc = 0.8035714285714286
User 44196 AUC after training: 0.8035714285714286
User 44196 does not improve AUC. Reverting changes.
Training on augumented user 120291 28/50 current_auc = 0.8035714285714286
User 120291 AUC after training: 0.8035714285714286
User 120291 does not improve AUC. Reverting changes.
Training on augumented user 27734 29/50 current_auc = 0.8035714285714286
User 27734 AUC after training: 0.8035714285714286
User 27734 does not improve AUC. Reverting changes.
Training on augumented user 8947 30/50 current_auc = 0.8035714285714286
User 8947 AUC after training: 0.8035714285714286
User 8947 does not improve AUC. Reverting changes.
Training on augumented user 81348 31/50 current_auc = 0.8035714285714286
User 81348 AUC after training: 0.8035714285714286
User 81348 does not improve AUC. Reverting changes.
Training on augumented user 91097 32/50 current_auc = 0.8035714285714286
User 91097 AUC after training: 0.8035714285714286
User 91097 does not improve AUC. Reverting changes.
Training on augumented user 40425 33/50 current_auc = 0.8035714285714286
User 40425 AUC after training: 0.8035714285714286
User 40425 does not improve AUC. Reverting changes.
Training on augumented user 17890 34/50 current_auc = 0.8035714285714286
User 17890 AUC after training: 0.8035714285714286
User 17890 does not improve AUC. Reverting changes.
Training on augumented user 75065 35/50 current_auc = 0.8035714285714286
User 75065 AUC after training: 0.8035714285714286
User 75065 does not improve AUC. Reverting changes.
Training on augumented user 95202 36/50 current_auc = 0.8035714285714286
User 95202 AUC after training: 0.8035714285714286
User 95202 does not improve AUC. Reverting changes.
Training on augumented user 42268 37/50 current_auc = 0.8035714285714286
User 42268 AUC after training: 0.8035714285714286
User 42268 does not improve AUC. Reverting changes.
Training on augumented user 69484 38/50 current_auc = 0.8035714285714286
User 69484 AUC after training: 0.8035714285714286
User 69484 does not improve AUC. Reverting changes.
Training on augumented user 79222 39/50 current_auc = 0.8035714285714286
User 79222 AUC after training: 0.8035714285714286
User 79222 does not improve AUC. Reverting changes.
Training on augumented user 16415 40/50 current_auc = 0.8035714285714286
User 16415 AUC after training: 0.8035714285714286
User 16415 does not improve AUC. Reverting changes.
Training on augumented user 84797 41/50 current_auc = 0.8035714285714286
User 84797 AUC after training: 0.8035714285714286
User 84797 does not improve AUC. Reverting changes.
Training on augumented user 48294 42/50 current_auc = 0.8035714285714286
User 48294 AUC after training: 0.8035714285714286
User 48294 does not improve AUC. Reverting changes.
Training on augumented user 131995 43/50 current_auc = 0.8035714285714286
User 131995 AUC after training: 0.8035714285714286
User 131995 does not improve AUC. Reverting changes.
Training on augumented user 70802 44/50 current_auc = 0.8035714285714286
User 70802 AUC after training: 0.8035714285714286
User 70802 does not improve AUC. Reverting changes.
Training on augumented user 78217 45/50 current_auc = 0.8035714285714286
User 78217 AUC after training: 0.8035714285714286
User 78217 does not improve AUC. Reverting changes.
Training on augumented user 25253 46/50 current_auc = 0.8035714285714286
User 25253 AUC after training: 0.8035714285714286
User 25253 does not improve AUC. Reverting changes.
Training on augumented user 40168 47/50 current_auc = 0.8035714285714286
User 40168 AUC after training: 0.8035714285714286
User 40168 does not improve AUC. Reverting changes.
Training on augumented user 77062 48/50 current_auc = 0.8035714285714286
User 77062 AUC after training: 0.8035714285714286
User 77062 does not improve AUC. Reverting changes.
Training on augumented user 82385 49/50 current_auc = 0.8035714285714286
User 82385 AUC after training: 0.8035714285714286
User 82385 does not improve AUC. Reverting changes.
[2024-12-02 18:09:11.154003] start test user 15108 56/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:11.984586] start test user 15108 56/568 recall augumented users by random, augumented_users = [124224, 62923, 113324, 61699, 82796, 93834, 69475, 31374, 18930, 49492, 21269, 48056, 22102, 109660, 38771, 57288, 124388, 61842, 83384, 88, 57855, 28208, 108006, 123647, 129318, 58213, 21255, 37391, 51664, 24544, 75138, 118996, 35390, 74844, 96487, 3228, 83624, 15749, 52074, 74234, 2667, 15044, 39709, 34962, 90236, 39004, 73914, 90276, 77316, 132946]
[2024-12-02 18:09:12.026504] user = 15108 Cloud 56/568
[2024-12-02 18:09:12.059369] user = 15108 Local 56/568
[2024-12-02 18:09:12.194990] user = 15108 Local+ 56/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:14.465999] user = 15108 MPDA- 56/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6225806451612902
Training on augumented user 124224 0/50 current_auc = 0.6225806451612902
User 124224 AUC after training: 0.6233870967741935
User 124224 improves AUC. Keeping the model.
Training on augumented user 62923 1/50 current_auc = 0.6233870967741935
User 62923 AUC after training: 0.625
User 62923 improves AUC. Keeping the model.
Training on augumented user 113324 2/50 current_auc = 0.625
User 113324 AUC after training: 0.6241935483870968
User 113324 does not improve AUC. Reverting changes.
Training on augumented user 61699 3/50 current_auc = 0.625
User 61699 AUC after training: 0.6233870967741935
User 61699 does not improve AUC. Reverting changes.
Training on augumented user 82796 4/50 current_auc = 0.625
User 82796 AUC after training: 0.625
User 82796 does not improve AUC. Reverting changes.
Training on augumented user 93834 5/50 current_auc = 0.625
User 93834 AUC after training: 0.6241935483870967
User 93834 does not improve AUC. Reverting changes.
Training on augumented user 69475 6/50 current_auc = 0.625
User 69475 AUC after training: 0.6185483870967742
User 69475 does not improve AUC. Reverting changes.
Training on augumented user 31374 7/50 current_auc = 0.625
User 31374 AUC after training: 0.6225806451612903
User 31374 does not improve AUC. Reverting changes.
Training on augumented user 18930 8/50 current_auc = 0.625
User 18930 AUC after training: 0.6241935483870967
User 18930 does not improve AUC. Reverting changes.
Training on augumented user 49492 9/50 current_auc = 0.625
User 49492 AUC after training: 0.6241935483870968
User 49492 does not improve AUC. Reverting changes.
Training on augumented user 21269 10/50 current_auc = 0.625
User 21269 AUC after training: 0.6201612903225807
User 21269 does not improve AUC. Reverting changes.
Training on augumented user 48056 11/50 current_auc = 0.625
User 48056 AUC after training: 0.6241935483870966
User 48056 does not improve AUC. Reverting changes.
Training on augumented user 22102 12/50 current_auc = 0.625
User 22102 AUC after training: 0.6258064516129032
User 22102 improves AUC. Keeping the model.
Training on augumented user 109660 13/50 current_auc = 0.6258064516129032
User 109660 AUC after training: 0.6241935483870967
User 109660 does not improve AUC. Reverting changes.
Training on augumented user 38771 14/50 current_auc = 0.6258064516129032
User 38771 AUC after training: 0.625
User 38771 does not improve AUC. Reverting changes.
Training on augumented user 57288 15/50 current_auc = 0.6258064516129032
User 57288 AUC after training: 0.6233870967741935
User 57288 does not improve AUC. Reverting changes.
Training on augumented user 124388 16/50 current_auc = 0.6258064516129032
User 124388 AUC after training: 0.6258064516129032
User 124388 does not improve AUC. Reverting changes.
Training on augumented user 61842 17/50 current_auc = 0.6258064516129032
User 61842 AUC after training: 0.625
User 61842 does not improve AUC. Reverting changes.
Training on augumented user 83384 18/50 current_auc = 0.6258064516129032
User 83384 AUC after training: 0.6225806451612903
User 83384 does not improve AUC. Reverting changes.
Training on augumented user 88 19/50 current_auc = 0.6258064516129032
User 88 AUC after training: 0.6241935483870967
User 88 does not improve AUC. Reverting changes.
Training on augumented user 57855 20/50 current_auc = 0.6258064516129032
User 57855 AUC after training: 0.625
User 57855 does not improve AUC. Reverting changes.
Training on augumented user 28208 21/50 current_auc = 0.6258064516129032
User 28208 AUC after training: 0.625
User 28208 does not improve AUC. Reverting changes.
Training on augumented user 108006 22/50 current_auc = 0.6258064516129032
User 108006 AUC after training: 0.6258064516129032
User 108006 does not improve AUC. Reverting changes.
Training on augumented user 123647 23/50 current_auc = 0.6258064516129032
User 123647 AUC after training: 0.625
User 123647 does not improve AUC. Reverting changes.
Training on augumented user 129318 24/50 current_auc = 0.6258064516129032
User 129318 AUC after training: 0.625
User 129318 does not improve AUC. Reverting changes.
Training on augumented user 58213 25/50 current_auc = 0.6258064516129032
User 58213 AUC after training: 0.6266129032258065
User 58213 improves AUC. Keeping the model.
Training on augumented user 21255 26/50 current_auc = 0.6266129032258065
User 21255 AUC after training: 0.6258064516129033
User 21255 does not improve AUC. Reverting changes.
Training on augumented user 37391 27/50 current_auc = 0.6266129032258065
User 37391 AUC after training: 0.6274193548387097
User 37391 improves AUC. Keeping the model.
Training on augumented user 51664 28/50 current_auc = 0.6274193548387097
User 51664 AUC after training: 0.6282258064516129
User 51664 improves AUC. Keeping the model.
Training on augumented user 24544 29/50 current_auc = 0.6282258064516129
User 24544 AUC after training: 0.6258064516129032
User 24544 does not improve AUC. Reverting changes.
Training on augumented user 75138 30/50 current_auc = 0.6282258064516129
User 75138 AUC after training: 0.6282258064516129
User 75138 does not improve AUC. Reverting changes.
Training on augumented user 118996 31/50 current_auc = 0.6282258064516129
User 118996 AUC after training: 0.625
User 118996 does not improve AUC. Reverting changes.
Training on augumented user 35390 32/50 current_auc = 0.6282258064516129
User 35390 AUC after training: 0.6266129032258064
User 35390 does not improve AUC. Reverting changes.
Training on augumented user 74844 33/50 current_auc = 0.6282258064516129
User 74844 AUC after training: 0.6274193548387097
User 74844 does not improve AUC. Reverting changes.
Training on augumented user 96487 34/50 current_auc = 0.6282258064516129
User 96487 AUC after training: 0.6274193548387097
User 96487 does not improve AUC. Reverting changes.
Training on augumented user 3228 35/50 current_auc = 0.6282258064516129
User 3228 AUC after training: 0.6282258064516129
User 3228 does not improve AUC. Reverting changes.
Training on augumented user 83624 36/50 current_auc = 0.6282258064516129
User 83624 AUC after training: 0.6201612903225807
User 83624 does not improve AUC. Reverting changes.
Training on augumented user 15749 37/50 current_auc = 0.6282258064516129
User 15749 AUC after training: 0.6290322580645161
User 15749 improves AUC. Keeping the model.
Training on augumented user 52074 38/50 current_auc = 0.6290322580645161
User 52074 AUC after training: 0.6266129032258064
User 52074 does not improve AUC. Reverting changes.
Training on augumented user 74234 39/50 current_auc = 0.6290322580645161
User 74234 AUC after training: 0.6266129032258065
User 74234 does not improve AUC. Reverting changes.
Training on augumented user 2667 40/50 current_auc = 0.6290322580645161
User 2667 AUC after training: 0.6258064516129033
User 2667 does not improve AUC. Reverting changes.
Training on augumented user 15044 41/50 current_auc = 0.6290322580645161
User 15044 AUC after training: 0.6290322580645161
User 15044 does not improve AUC. Reverting changes.
Training on augumented user 39709 42/50 current_auc = 0.6290322580645161
User 39709 AUC after training: 0.6258064516129032
User 39709 does not improve AUC. Reverting changes.
Training on augumented user 34962 43/50 current_auc = 0.6290322580645161
User 34962 AUC after training: 0.6193548387096773
User 34962 does not improve AUC. Reverting changes.
Training on augumented user 90236 44/50 current_auc = 0.6290322580645161
User 90236 AUC after training: 0.6290322580645161
User 90236 does not improve AUC. Reverting changes.
Training on augumented user 39004 45/50 current_auc = 0.6290322580645161
User 39004 AUC after training: 0.628225806451613
User 39004 does not improve AUC. Reverting changes.
Training on augumented user 73914 46/50 current_auc = 0.6290322580645161
User 73914 AUC after training: 0.6266129032258065
User 73914 does not improve AUC. Reverting changes.
Training on augumented user 90276 47/50 current_auc = 0.6290322580645161
User 90276 AUC after training: 0.6282258064516129
User 90276 does not improve AUC. Reverting changes.
Training on augumented user 77316 48/50 current_auc = 0.6290322580645161
User 77316 AUC after training: 0.6282258064516129
User 77316 does not improve AUC. Reverting changes.
Training on augumented user 132946 49/50 current_auc = 0.6290322580645161
User 132946 AUC after training: 0.6282258064516129
User 132946 does not improve AUC. Reverting changes.
[2024-12-02 18:09:48.501884] start test user 15134 57/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:49.100920] start test user 15134 57/568 recall augumented users by random, augumented_users = [133028, 138258, 81927, 32581, 103285, 121973, 49842, 53132, 45330, 102256, 105099, 55166, 135111, 12882, 70983, 137155, 39945, 83734, 21761, 4869, 76480, 127617, 126285, 30138, 133136, 24138, 98455, 10094, 21988, 34650, 47651, 8242, 105288, 76786, 58398, 52425, 46978, 93205, 62102, 21279, 78201, 40442, 1608, 20902, 14943, 129687, 22231, 110739, 115841, 86223]
[2024-12-02 18:09:49.116103] user = 15134 Cloud 57/568
[2024-12-02 18:09:49.127475] user = 15134 Local 57/568
[2024-12-02 18:09:49.175757] user = 15134 Local+ 57/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:51.466652] user = 15134 MPDA- 57/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7752613240418119
Training on augumented user 133028 0/50 current_auc = 0.7752613240418119
User 133028 AUC after training: 0.7804878048780488
User 133028 improves AUC. Keeping the model.
Training on augumented user 138258 1/50 current_auc = 0.7804878048780488
User 138258 AUC after training: 0.7787456445993032
User 138258 does not improve AUC. Reverting changes.
Training on augumented user 81927 2/50 current_auc = 0.7804878048780488
User 81927 AUC after training: 0.7787456445993032
User 81927 does not improve AUC. Reverting changes.
Training on augumented user 32581 3/50 current_auc = 0.7804878048780488
User 32581 AUC after training: 0.7752613240418119
User 32581 does not improve AUC. Reverting changes.
Training on augumented user 103285 4/50 current_auc = 0.7804878048780488
User 103285 AUC after training: 0.7787456445993032
User 103285 does not improve AUC. Reverting changes.
Training on augumented user 121973 5/50 current_auc = 0.7804878048780488
User 121973 AUC after training: 0.7787456445993032
User 121973 does not improve AUC. Reverting changes.
Training on augumented user 49842 6/50 current_auc = 0.7804878048780488
User 49842 AUC after training: 0.7770034843205575
User 49842 does not improve AUC. Reverting changes.
Training on augumented user 53132 7/50 current_auc = 0.7804878048780488
User 53132 AUC after training: 0.7787456445993032
User 53132 does not improve AUC. Reverting changes.
Training on augumented user 45330 8/50 current_auc = 0.7804878048780488
User 45330 AUC after training: 0.7787456445993032
User 45330 does not improve AUC. Reverting changes.
Training on augumented user 102256 9/50 current_auc = 0.7804878048780488
User 102256 AUC after training: 0.7735191637630663
User 102256 does not improve AUC. Reverting changes.
Training on augumented user 105099 10/50 current_auc = 0.7804878048780488
User 105099 AUC after training: 0.7839721254355401
User 105099 improves AUC. Keeping the model.
Training on augumented user 55166 11/50 current_auc = 0.7839721254355401
User 55166 AUC after training: 0.7804878048780488
User 55166 does not improve AUC. Reverting changes.
Training on augumented user 135111 12/50 current_auc = 0.7839721254355401
User 135111 AUC after training: 0.7822299651567944
User 135111 does not improve AUC. Reverting changes.
Training on augumented user 12882 13/50 current_auc = 0.7839721254355401
User 12882 AUC after training: 0.7857142857142857
User 12882 improves AUC. Keeping the model.
Training on augumented user 70983 14/50 current_auc = 0.7857142857142857
User 70983 AUC after training: 0.7857142857142857
User 70983 does not improve AUC. Reverting changes.
Training on augumented user 137155 15/50 current_auc = 0.7857142857142857
User 137155 AUC after training: 0.7839721254355401
User 137155 does not improve AUC. Reverting changes.
Training on augumented user 39945 16/50 current_auc = 0.7857142857142857
User 39945 AUC after training: 0.7857142857142857
User 39945 does not improve AUC. Reverting changes.
Training on augumented user 83734 17/50 current_auc = 0.7857142857142857
User 83734 AUC after training: 0.7857142857142857
User 83734 does not improve AUC. Reverting changes.
Training on augumented user 21761 18/50 current_auc = 0.7857142857142857
User 21761 AUC after training: 0.7857142857142857
User 21761 does not improve AUC. Reverting changes.
Training on augumented user 4869 19/50 current_auc = 0.7857142857142857
User 4869 AUC after training: 0.7822299651567944
User 4869 does not improve AUC. Reverting changes.
Training on augumented user 76480 20/50 current_auc = 0.7857142857142857
User 76480 AUC after training: 0.7822299651567944
User 76480 does not improve AUC. Reverting changes.
Training on augumented user 127617 21/50 current_auc = 0.7857142857142857
User 127617 AUC after training: 0.7822299651567944
User 127617 does not improve AUC. Reverting changes.
Training on augumented user 126285 22/50 current_auc = 0.7857142857142857
User 126285 AUC after training: 0.7857142857142857
User 126285 does not improve AUC. Reverting changes.
Training on augumented user 30138 23/50 current_auc = 0.7857142857142857
User 30138 AUC after training: 0.7857142857142857
User 30138 does not improve AUC. Reverting changes.
Training on augumented user 133136 24/50 current_auc = 0.7857142857142857
User 133136 AUC after training: 0.7787456445993032
User 133136 does not improve AUC. Reverting changes.
Training on augumented user 24138 25/50 current_auc = 0.7857142857142857
User 24138 AUC after training: 0.7822299651567944
User 24138 does not improve AUC. Reverting changes.
Training on augumented user 98455 26/50 current_auc = 0.7857142857142857
User 98455 AUC after training: 0.7822299651567944
User 98455 does not improve AUC. Reverting changes.
Training on augumented user 10094 27/50 current_auc = 0.7857142857142857
User 10094 AUC after training: 0.7804878048780487
User 10094 does not improve AUC. Reverting changes.
Training on augumented user 21988 28/50 current_auc = 0.7857142857142857
User 21988 AUC after training: 0.7839721254355401
User 21988 does not improve AUC. Reverting changes.
Training on augumented user 34650 29/50 current_auc = 0.7857142857142857
User 34650 AUC after training: 0.7874564459930314
User 34650 improves AUC. Keeping the model.
Training on augumented user 47651 30/50 current_auc = 0.7874564459930314
User 47651 AUC after training: 0.7874564459930313
User 47651 does not improve AUC. Reverting changes.
Training on augumented user 8242 31/50 current_auc = 0.7874564459930314
User 8242 AUC after training: 0.7909407665505227
User 8242 improves AUC. Keeping the model.
Training on augumented user 105288 32/50 current_auc = 0.7909407665505227
User 105288 AUC after training: 0.789198606271777
User 105288 does not improve AUC. Reverting changes.
Training on augumented user 76786 33/50 current_auc = 0.7909407665505227
User 76786 AUC after training: 0.789198606271777
User 76786 does not improve AUC. Reverting changes.
Training on augumented user 58398 34/50 current_auc = 0.7909407665505227
User 58398 AUC after training: 0.7874564459930314
User 58398 does not improve AUC. Reverting changes.
Training on augumented user 52425 35/50 current_auc = 0.7909407665505227
User 52425 AUC after training: 0.7839721254355401
User 52425 does not improve AUC. Reverting changes.
Training on augumented user 46978 36/50 current_auc = 0.7909407665505227
User 46978 AUC after training: 0.789198606271777
User 46978 does not improve AUC. Reverting changes.
Training on augumented user 93205 37/50 current_auc = 0.7909407665505227
User 93205 AUC after training: 0.7909407665505227
User 93205 does not improve AUC. Reverting changes.
Training on augumented user 62102 38/50 current_auc = 0.7909407665505227
User 62102 AUC after training: 0.7857142857142857
User 62102 does not improve AUC. Reverting changes.
Training on augumented user 21279 39/50 current_auc = 0.7909407665505227
User 21279 AUC after training: 0.7874564459930314
User 21279 does not improve AUC. Reverting changes.
Training on augumented user 78201 40/50 current_auc = 0.7909407665505227
User 78201 AUC after training: 0.7874564459930314
User 78201 does not improve AUC. Reverting changes.
Training on augumented user 40442 41/50 current_auc = 0.7909407665505227
User 40442 AUC after training: 0.7874564459930314
User 40442 does not improve AUC. Reverting changes.
Training on augumented user 1608 42/50 current_auc = 0.7909407665505227
User 1608 AUC after training: 0.7839721254355401
User 1608 does not improve AUC. Reverting changes.
Training on augumented user 20902 43/50 current_auc = 0.7909407665505227
User 20902 AUC after training: 0.7909407665505227
User 20902 does not improve AUC. Reverting changes.
Training on augumented user 14943 44/50 current_auc = 0.7909407665505227
User 14943 AUC after training: 0.7874564459930313
User 14943 does not improve AUC. Reverting changes.
Training on augumented user 129687 45/50 current_auc = 0.7909407665505227
User 129687 AUC after training: 0.789198606271777
User 129687 does not improve AUC. Reverting changes.
Training on augumented user 22231 46/50 current_auc = 0.7909407665505227
User 22231 AUC after training: 0.7839721254355401
User 22231 does not improve AUC. Reverting changes.
Training on augumented user 110739 47/50 current_auc = 0.7909407665505227
User 110739 AUC after training: 0.7909407665505227
User 110739 does not improve AUC. Reverting changes.
Training on augumented user 115841 48/50 current_auc = 0.7909407665505227
User 115841 AUC after training: 0.7874564459930313
User 115841 does not improve AUC. Reverting changes.
Training on augumented user 86223 49/50 current_auc = 0.7909407665505227
User 86223 AUC after training: 0.7857142857142857
User 86223 does not improve AUC. Reverting changes.
[2024-12-02 18:10:19.518621] start test user 15138 58/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:19.952395] start test user 15138 58/568 recall augumented users by random, augumented_users = [101306, 13363, 39749, 103386, 103400, 92989, 103553, 115985, 96978, 14346, 50240, 50673, 55792, 126290, 27925, 46112, 35488, 130154, 129268, 5756, 120914, 35068, 52785, 45003, 12122, 115099, 93957, 15796, 129627, 96768, 25079, 43676, 18870, 122759, 53544, 30876, 101737, 49993, 61817, 61151, 111655, 58510, 70003, 106577, 85388, 56749, 201, 74978, 30872, 20596]
[2024-12-02 18:10:19.966804] user = 15138 Cloud 58/568
[2024-12-02 18:10:19.981172] user = 15138 Local 58/568
[2024-12-02 18:10:20.063095] user = 15138 Local+ 58/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:21.907476] user = 15138 MPDA- 58/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7012121212121212
Training on augumented user 101306 0/50 current_auc = 0.7012121212121212
User 101306 AUC after training: 0.7012121212121212
User 101306 does not improve AUC. Reverting changes.
Training on augumented user 13363 1/50 current_auc = 0.7012121212121212
User 13363 AUC after training: 0.7012121212121212
User 13363 does not improve AUC. Reverting changes.
Training on augumented user 39749 2/50 current_auc = 0.7012121212121212
User 39749 AUC after training: 0.6993939393939395
User 39749 does not improve AUC. Reverting changes.
Training on augumented user 103386 3/50 current_auc = 0.7012121212121212
User 103386 AUC after training: 0.7012121212121212
User 103386 does not improve AUC. Reverting changes.
Training on augumented user 103400 4/50 current_auc = 0.7012121212121212
User 103400 AUC after training: 0.7012121212121212
User 103400 does not improve AUC. Reverting changes.
Training on augumented user 92989 5/50 current_auc = 0.7012121212121212
User 92989 AUC after training: 0.7012121212121212
User 92989 does not improve AUC. Reverting changes.
Training on augumented user 103553 6/50 current_auc = 0.7012121212121212
User 103553 AUC after training: 0.7
User 103553 does not improve AUC. Reverting changes.
Training on augumented user 115985 7/50 current_auc = 0.7012121212121212
User 115985 AUC after training: 0.7012121212121212
User 115985 does not improve AUC. Reverting changes.
Training on augumented user 96978 8/50 current_auc = 0.7012121212121212
User 96978 AUC after training: 0.7012121212121212
User 96978 does not improve AUC. Reverting changes.
Training on augumented user 14346 9/50 current_auc = 0.7012121212121212
User 14346 AUC after training: 0.7006060606060607
User 14346 does not improve AUC. Reverting changes.
Training on augumented user 50240 10/50 current_auc = 0.7012121212121212
User 50240 AUC after training: 0.7024242424242424
User 50240 improves AUC. Keeping the model.
Training on augumented user 50673 11/50 current_auc = 0.7024242424242424
User 50673 AUC after training: 0.7024242424242424
User 50673 does not improve AUC. Reverting changes.
Training on augumented user 55792 12/50 current_auc = 0.7024242424242424
User 55792 AUC after training: 0.7030303030303031
User 55792 improves AUC. Keeping the model.
Training on augumented user 126290 13/50 current_auc = 0.7030303030303031
User 126290 AUC after training: 0.7
User 126290 does not improve AUC. Reverting changes.
Training on augumented user 27925 14/50 current_auc = 0.7030303030303031
User 27925 AUC after training: 0.7018181818181818
User 27925 does not improve AUC. Reverting changes.
Training on augumented user 46112 15/50 current_auc = 0.7030303030303031
User 46112 AUC after training: 0.703030303030303
User 46112 does not improve AUC. Reverting changes.
Training on augumented user 35488 16/50 current_auc = 0.7030303030303031
User 35488 AUC after training: 0.703030303030303
User 35488 does not improve AUC. Reverting changes.
Training on augumented user 130154 17/50 current_auc = 0.7030303030303031
User 130154 AUC after training: 0.7036363636363636
User 130154 improves AUC. Keeping the model.
Training on augumented user 129268 18/50 current_auc = 0.7036363636363636
User 129268 AUC after training: 0.7036363636363636
User 129268 does not improve AUC. Reverting changes.
Training on augumented user 5756 19/50 current_auc = 0.7036363636363636
User 5756 AUC after training: 0.7042424242424242
User 5756 improves AUC. Keeping the model.
Training on augumented user 120914 20/50 current_auc = 0.7042424242424242
User 120914 AUC after training: 0.7024242424242424
User 120914 does not improve AUC. Reverting changes.
Training on augumented user 35068 21/50 current_auc = 0.7042424242424242
User 35068 AUC after training: 0.7042424242424242
User 35068 does not improve AUC. Reverting changes.
Training on augumented user 52785 22/50 current_auc = 0.7042424242424242
User 52785 AUC after training: 0.7048484848484848
User 52785 improves AUC. Keeping the model.
Training on augumented user 45003 23/50 current_auc = 0.7048484848484848
User 45003 AUC after training: 0.7048484848484848
User 45003 does not improve AUC. Reverting changes.
Training on augumented user 12122 24/50 current_auc = 0.7048484848484848
User 12122 AUC after training: 0.7048484848484848
User 12122 does not improve AUC. Reverting changes.
Training on augumented user 115099 25/50 current_auc = 0.7048484848484848
User 115099 AUC after training: 0.7048484848484848
User 115099 does not improve AUC. Reverting changes.
Training on augumented user 93957 26/50 current_auc = 0.7048484848484848
User 93957 AUC after training: 0.7036363636363636
User 93957 does not improve AUC. Reverting changes.
Training on augumented user 15796 27/50 current_auc = 0.7048484848484848
User 15796 AUC after training: 0.7054545454545456
User 15796 improves AUC. Keeping the model.
Training on augumented user 129627 28/50 current_auc = 0.7054545454545456
User 129627 AUC after training: 0.7048484848484848
User 129627 does not improve AUC. Reverting changes.
Training on augumented user 96768 29/50 current_auc = 0.7054545454545456
User 96768 AUC after training: 0.7048484848484848
User 96768 does not improve AUC. Reverting changes.
Training on augumented user 25079 30/50 current_auc = 0.7054545454545456
User 25079 AUC after training: 0.7048484848484848
User 25079 does not improve AUC. Reverting changes.
Training on augumented user 43676 31/50 current_auc = 0.7054545454545456
User 43676 AUC after training: 0.7054545454545456
User 43676 does not improve AUC. Reverting changes.
Training on augumented user 18870 32/50 current_auc = 0.7054545454545456
User 18870 AUC after training: 0.7048484848484848
User 18870 does not improve AUC. Reverting changes.
Training on augumented user 122759 33/50 current_auc = 0.7054545454545456
User 122759 AUC after training: 0.7048484848484848
User 122759 does not improve AUC. Reverting changes.
Training on augumented user 53544 34/50 current_auc = 0.7054545454545456
User 53544 AUC after training: 0.7042424242424242
User 53544 does not improve AUC. Reverting changes.
Training on augumented user 30876 35/50 current_auc = 0.7054545454545456
User 30876 AUC after training: 0.7036363636363636
User 30876 does not improve AUC. Reverting changes.
Training on augumented user 101737 36/50 current_auc = 0.7054545454545456
User 101737 AUC after training: 0.7036363636363636
User 101737 does not improve AUC. Reverting changes.
Training on augumented user 49993 37/50 current_auc = 0.7054545454545456
User 49993 AUC after training: 0.7036363636363636
User 49993 does not improve AUC. Reverting changes.
Training on augumented user 61817 38/50 current_auc = 0.7054545454545456
User 61817 AUC after training: 0.7048484848484848
User 61817 does not improve AUC. Reverting changes.
Training on augumented user 61151 39/50 current_auc = 0.7054545454545456
User 61151 AUC after training: 0.7036363636363636
User 61151 does not improve AUC. Reverting changes.
Training on augumented user 111655 40/50 current_auc = 0.7054545454545456
User 111655 AUC after training: 0.7054545454545456
User 111655 does not improve AUC. Reverting changes.
Training on augumented user 58510 41/50 current_auc = 0.7054545454545456
User 58510 AUC after training: 0.7024242424242424
User 58510 does not improve AUC. Reverting changes.
Training on augumented user 70003 42/50 current_auc = 0.7054545454545456
User 70003 AUC after training: 0.7036363636363636
User 70003 does not improve AUC. Reverting changes.
Training on augumented user 106577 43/50 current_auc = 0.7054545454545456
User 106577 AUC after training: 0.7048484848484848
User 106577 does not improve AUC. Reverting changes.
Training on augumented user 85388 44/50 current_auc = 0.7054545454545456
User 85388 AUC after training: 0.7036363636363636
User 85388 does not improve AUC. Reverting changes.
Training on augumented user 56749 45/50 current_auc = 0.7054545454545456
User 56749 AUC after training: 0.7048484848484848
User 56749 does not improve AUC. Reverting changes.
Training on augumented user 201 46/50 current_auc = 0.7054545454545456
User 201 AUC after training: 0.7042424242424242
User 201 does not improve AUC. Reverting changes.
Training on augumented user 74978 47/50 current_auc = 0.7054545454545456
User 74978 AUC after training: 0.7048484848484848
User 74978 does not improve AUC. Reverting changes.
Training on augumented user 30872 48/50 current_auc = 0.7054545454545456
User 30872 AUC after training: 0.7048484848484848
User 30872 does not improve AUC. Reverting changes.
Training on augumented user 20596 49/50 current_auc = 0.7054545454545456
User 20596 AUC after training: 0.703030303030303
User 20596 does not improve AUC. Reverting changes.
[2024-12-02 18:10:50.410471] start test user 15165 59/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:51.230877] start test user 15165 59/568 recall augumented users by random, augumented_users = [85620, 49965, 116577, 1337, 119413, 35982, 124650, 66581, 17183, 89088, 74837, 3553, 104365, 118883, 16515, 11366, 121889, 37793, 8946, 11300, 84162, 22248, 43668, 47816, 22298, 53888, 55971, 12516, 43127, 9219, 42013, 116437, 89166, 92265, 99075, 119163, 86630, 112252, 126502, 125984, 12247, 12895, 131940, 76991, 77245, 31911, 27781, 56714, 48579, 75160]
[2024-12-02 18:10:51.251982] user = 15165 Cloud 59/568
[2024-12-02 18:10:51.268420] user = 15165 Local 59/568
[2024-12-02 18:10:51.307310] user = 15165 Local+ 59/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:53.961221] user = 15165 MPDA- 59/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.45833333333333337
Training on augumented user 85620 0/50 current_auc = 0.45833333333333337
User 85620 AUC after training: 0.45833333333333337
User 85620 does not improve AUC. Reverting changes.
Training on augumented user 49965 1/50 current_auc = 0.45833333333333337
User 49965 AUC after training: 0.46875
User 49965 improves AUC. Keeping the model.
Training on augumented user 116577 2/50 current_auc = 0.46875
User 116577 AUC after training: 0.46354166666666663
User 116577 does not improve AUC. Reverting changes.
Training on augumented user 1337 3/50 current_auc = 0.46875
User 1337 AUC after training: 0.45833333333333337
User 1337 does not improve AUC. Reverting changes.
Training on augumented user 119413 4/50 current_auc = 0.46875
User 119413 AUC after training: 0.46875
User 119413 does not improve AUC. Reverting changes.
Training on augumented user 35982 5/50 current_auc = 0.46875
User 35982 AUC after training: 0.46875
User 35982 does not improve AUC. Reverting changes.
Training on augumented user 124650 6/50 current_auc = 0.46875
User 124650 AUC after training: 0.46354166666666663
User 124650 does not improve AUC. Reverting changes.
Training on augumented user 66581 7/50 current_auc = 0.46875
User 66581 AUC after training: 0.46354166666666663
User 66581 does not improve AUC. Reverting changes.
Training on augumented user 17183 8/50 current_auc = 0.46875
User 17183 AUC after training: 0.45833333333333337
User 17183 does not improve AUC. Reverting changes.
Training on augumented user 89088 9/50 current_auc = 0.46875
User 89088 AUC after training: 0.4375
User 89088 does not improve AUC. Reverting changes.
Training on augumented user 74837 10/50 current_auc = 0.46875
User 74837 AUC after training: 0.46875
User 74837 does not improve AUC. Reverting changes.
Training on augumented user 3553 11/50 current_auc = 0.46875
User 3553 AUC after training: 0.46354166666666663
User 3553 does not improve AUC. Reverting changes.
Training on augumented user 104365 12/50 current_auc = 0.46875
User 104365 AUC after training: 0.46354166666666663
User 104365 does not improve AUC. Reverting changes.
Training on augumented user 118883 13/50 current_auc = 0.46875
User 118883 AUC after training: 0.46354166666666663
User 118883 does not improve AUC. Reverting changes.
Training on augumented user 16515 14/50 current_auc = 0.46875
User 16515 AUC after training: 0.46354166666666663
User 16515 does not improve AUC. Reverting changes.
Training on augumented user 11366 15/50 current_auc = 0.46875
User 11366 AUC after training: 0.46354166666666663
User 11366 does not improve AUC. Reverting changes.
Training on augumented user 121889 16/50 current_auc = 0.46875
User 121889 AUC after training: 0.45833333333333337
User 121889 does not improve AUC. Reverting changes.
Training on augumented user 37793 17/50 current_auc = 0.46875
User 37793 AUC after training: 0.46354166666666663
User 37793 does not improve AUC. Reverting changes.
Training on augumented user 8946 18/50 current_auc = 0.46875
User 8946 AUC after training: 0.45833333333333337
User 8946 does not improve AUC. Reverting changes.
Training on augumented user 11300 19/50 current_auc = 0.46875
User 11300 AUC after training: 0.46354166666666663
User 11300 does not improve AUC. Reverting changes.
Training on augumented user 84162 20/50 current_auc = 0.46875
User 84162 AUC after training: 0.45833333333333337
User 84162 does not improve AUC. Reverting changes.
Training on augumented user 22248 21/50 current_auc = 0.46875
User 22248 AUC after training: 0.46354166666666663
User 22248 does not improve AUC. Reverting changes.
Training on augumented user 43668 22/50 current_auc = 0.46875
User 43668 AUC after training: 0.46354166666666663
User 43668 does not improve AUC. Reverting changes.
Training on augumented user 47816 23/50 current_auc = 0.46875
User 47816 AUC after training: 0.46354166666666663
User 47816 does not improve AUC. Reverting changes.
Training on augumented user 22298 24/50 current_auc = 0.46875
User 22298 AUC after training: 0.46354166666666663
User 22298 does not improve AUC. Reverting changes.
Training on augumented user 53888 25/50 current_auc = 0.46875
User 53888 AUC after training: 0.45833333333333337
User 53888 does not improve AUC. Reverting changes.
Training on augumented user 55971 26/50 current_auc = 0.46875
User 55971 AUC after training: 0.45833333333333337
User 55971 does not improve AUC. Reverting changes.
Training on augumented user 12516 27/50 current_auc = 0.46875
User 12516 AUC after training: 0.46354166666666663
User 12516 does not improve AUC. Reverting changes.
Training on augumented user 43127 28/50 current_auc = 0.46875
User 43127 AUC after training: 0.45833333333333337
User 43127 does not improve AUC. Reverting changes.
Training on augumented user 9219 29/50 current_auc = 0.46875
User 9219 AUC after training: 0.45833333333333337
User 9219 does not improve AUC. Reverting changes.
Training on augumented user 42013 30/50 current_auc = 0.46875
User 42013 AUC after training: 0.45833333333333337
User 42013 does not improve AUC. Reverting changes.
Training on augumented user 116437 31/50 current_auc = 0.46875
User 116437 AUC after training: 0.46875
User 116437 does not improve AUC. Reverting changes.
Training on augumented user 89166 32/50 current_auc = 0.46875
User 89166 AUC after training: 0.47395833333333337
User 89166 improves AUC. Keeping the model.
Training on augumented user 92265 33/50 current_auc = 0.47395833333333337
User 92265 AUC after training: 0.45833333333333337
User 92265 does not improve AUC. Reverting changes.
Training on augumented user 99075 34/50 current_auc = 0.47395833333333337
User 99075 AUC after training: 0.45833333333333337
User 99075 does not improve AUC. Reverting changes.
Training on augumented user 119163 35/50 current_auc = 0.47395833333333337
User 119163 AUC after training: 0.45833333333333337
User 119163 does not improve AUC. Reverting changes.
Training on augumented user 86630 36/50 current_auc = 0.47395833333333337
User 86630 AUC after training: 0.46875
User 86630 does not improve AUC. Reverting changes.
Training on augumented user 112252 37/50 current_auc = 0.47395833333333337
User 112252 AUC after training: 0.45833333333333337
User 112252 does not improve AUC. Reverting changes.
Training on augumented user 126502 38/50 current_auc = 0.47395833333333337
User 126502 AUC after training: 0.45833333333333337
User 126502 does not improve AUC. Reverting changes.
Training on augumented user 125984 39/50 current_auc = 0.47395833333333337
User 125984 AUC after training: 0.47395833333333337
User 125984 does not improve AUC. Reverting changes.
Training on augumented user 12247 40/50 current_auc = 0.47395833333333337
User 12247 AUC after training: 0.46875
User 12247 does not improve AUC. Reverting changes.
Training on augumented user 12895 41/50 current_auc = 0.47395833333333337
User 12895 AUC after training: 0.46354166666666663
User 12895 does not improve AUC. Reverting changes.
Training on augumented user 131940 42/50 current_auc = 0.47395833333333337
User 131940 AUC after training: 0.46875
User 131940 does not improve AUC. Reverting changes.
Training on augumented user 76991 43/50 current_auc = 0.47395833333333337
User 76991 AUC after training: 0.44791666666666663
User 76991 does not improve AUC. Reverting changes.
Training on augumented user 77245 44/50 current_auc = 0.47395833333333337
User 77245 AUC after training: 0.46875
User 77245 does not improve AUC. Reverting changes.
Training on augumented user 31911 45/50 current_auc = 0.47395833333333337
User 31911 AUC after training: 0.46875
User 31911 does not improve AUC. Reverting changes.
Training on augumented user 27781 46/50 current_auc = 0.47395833333333337
User 27781 AUC after training: 0.45833333333333337
User 27781 does not improve AUC. Reverting changes.
Training on augumented user 56714 47/50 current_auc = 0.47395833333333337
User 56714 AUC after training: 0.46354166666666663
User 56714 does not improve AUC. Reverting changes.
Training on augumented user 48579 48/50 current_auc = 0.47395833333333337
User 48579 AUC after training: 0.45833333333333337
User 48579 does not improve AUC. Reverting changes.
Training on augumented user 75160 49/50 current_auc = 0.47395833333333337
User 75160 AUC after training: 0.45833333333333337
User 75160 does not improve AUC. Reverting changes.
[2024-12-02 18:11:23.037787] start test user 15194 60/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:23.857811] start test user 15194 60/568 recall augumented users by random, augumented_users = [81912, 95287, 74025, 66993, 23516, 86553, 58752, 22133, 77498, 126198, 78072, 87849, 95059, 1858, 40993, 88924, 123601, 3116, 62915, 82716, 78458, 85464, 81949, 116139, 14893, 73446, 82993, 6502, 38603, 14384, 110169, 34370, 89467, 88158, 81313, 60086, 29459, 8406, 2094, 76705, 128197, 128506, 76754, 109980, 131370, 56311, 17713, 13530, 62846, 80264]
[2024-12-02 18:11:23.874631] user = 15194 Cloud 60/568
[2024-12-02 18:11:23.887997] user = 15194 Local 60/568
[2024-12-02 18:11:24.027098] user = 15194 Local+ 60/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:25.902799] user = 15194 MPDA- 60/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7758620689655172
Training on augumented user 81912 0/50 current_auc = 0.7758620689655172
User 81912 AUC after training: 0.7758620689655172
User 81912 does not improve AUC. Reverting changes.
Training on augumented user 95287 1/50 current_auc = 0.7758620689655172
User 95287 AUC after training: 0.7758620689655172
User 95287 does not improve AUC. Reverting changes.
Training on augumented user 74025 2/50 current_auc = 0.7758620689655172
User 74025 AUC after training: 0.7758620689655172
User 74025 does not improve AUC. Reverting changes.
Training on augumented user 66993 3/50 current_auc = 0.7758620689655172
User 66993 AUC after training: 0.7724137931034483
User 66993 does not improve AUC. Reverting changes.
Training on augumented user 23516 4/50 current_auc = 0.7758620689655172
User 23516 AUC after training: 0.7741379310344827
User 23516 does not improve AUC. Reverting changes.
Training on augumented user 86553 5/50 current_auc = 0.7758620689655172
User 86553 AUC after training: 0.7741379310344827
User 86553 does not improve AUC. Reverting changes.
Training on augumented user 58752 6/50 current_auc = 0.7758620689655172
User 58752 AUC after training: 0.7758620689655172
User 58752 does not improve AUC. Reverting changes.
Training on augumented user 22133 7/50 current_auc = 0.7758620689655172
User 22133 AUC after training: 0.7741379310344827
User 22133 does not improve AUC. Reverting changes.
Training on augumented user 77498 8/50 current_auc = 0.7758620689655172
User 77498 AUC after training: 0.7758620689655172
User 77498 does not improve AUC. Reverting changes.
Training on augumented user 126198 9/50 current_auc = 0.7758620689655172
User 126198 AUC after training: 0.7724137931034483
User 126198 does not improve AUC. Reverting changes.
Training on augumented user 78072 10/50 current_auc = 0.7758620689655172
User 78072 AUC after training: 0.7724137931034483
User 78072 does not improve AUC. Reverting changes.
Training on augumented user 87849 11/50 current_auc = 0.7758620689655172
User 87849 AUC after training: 0.7758620689655172
User 87849 does not improve AUC. Reverting changes.
Training on augumented user 95059 12/50 current_auc = 0.7758620689655172
User 95059 AUC after training: 0.7724137931034483
User 95059 does not improve AUC. Reverting changes.
Training on augumented user 1858 13/50 current_auc = 0.7758620689655172
User 1858 AUC after training: 0.7741379310344827
User 1858 does not improve AUC. Reverting changes.
Training on augumented user 40993 14/50 current_auc = 0.7758620689655172
User 40993 AUC after training: 0.7724137931034483
User 40993 does not improve AUC. Reverting changes.
Training on augumented user 88924 15/50 current_auc = 0.7758620689655172
User 88924 AUC after training: 0.7758620689655172
User 88924 does not improve AUC. Reverting changes.
Training on augumented user 123601 16/50 current_auc = 0.7758620689655172
User 123601 AUC after training: 0.7724137931034483
User 123601 does not improve AUC. Reverting changes.
Training on augumented user 3116 17/50 current_auc = 0.7758620689655172
User 3116 AUC after training: 0.7724137931034483
User 3116 does not improve AUC. Reverting changes.
Training on augumented user 62915 18/50 current_auc = 0.7758620689655172
User 62915 AUC after training: 0.7758620689655172
User 62915 does not improve AUC. Reverting changes.
Training on augumented user 82716 19/50 current_auc = 0.7758620689655172
User 82716 AUC after training: 0.7758620689655172
User 82716 does not improve AUC. Reverting changes.
Training on augumented user 78458 20/50 current_auc = 0.7758620689655172
User 78458 AUC after training: 0.7758620689655172
User 78458 does not improve AUC. Reverting changes.
Training on augumented user 85464 21/50 current_auc = 0.7758620689655172
User 85464 AUC after training: 0.7758620689655172
User 85464 does not improve AUC. Reverting changes.
Training on augumented user 81949 22/50 current_auc = 0.7758620689655172
User 81949 AUC after training: 0.7724137931034483
User 81949 does not improve AUC. Reverting changes.
Training on augumented user 116139 23/50 current_auc = 0.7758620689655172
User 116139 AUC after training: 0.7706896551724138
User 116139 does not improve AUC. Reverting changes.
Training on augumented user 14893 24/50 current_auc = 0.7758620689655172
User 14893 AUC after training: 0.7758620689655172
User 14893 does not improve AUC. Reverting changes.
Training on augumented user 73446 25/50 current_auc = 0.7758620689655172
User 73446 AUC after training: 0.7758620689655172
User 73446 does not improve AUC. Reverting changes.
Training on augumented user 82993 26/50 current_auc = 0.7758620689655172
User 82993 AUC after training: 0.7724137931034483
User 82993 does not improve AUC. Reverting changes.
Training on augumented user 6502 27/50 current_auc = 0.7758620689655172
User 6502 AUC after training: 0.7724137931034483
User 6502 does not improve AUC. Reverting changes.
Training on augumented user 38603 28/50 current_auc = 0.7758620689655172
User 38603 AUC after training: 0.7758620689655172
User 38603 does not improve AUC. Reverting changes.
Training on augumented user 14384 29/50 current_auc = 0.7758620689655172
User 14384 AUC after training: 0.7758620689655172
User 14384 does not improve AUC. Reverting changes.
Training on augumented user 110169 30/50 current_auc = 0.7758620689655172
User 110169 AUC after training: 0.7758620689655172
User 110169 does not improve AUC. Reverting changes.
Training on augumented user 34370 31/50 current_auc = 0.7758620689655172
User 34370 AUC after training: 0.7758620689655172
User 34370 does not improve AUC. Reverting changes.
Training on augumented user 89467 32/50 current_auc = 0.7758620689655172
User 89467 AUC after training: 0.7758620689655172
User 89467 does not improve AUC. Reverting changes.
Training on augumented user 88158 33/50 current_auc = 0.7758620689655172
User 88158 AUC after training: 0.7758620689655172
User 88158 does not improve AUC. Reverting changes.
Training on augumented user 81313 34/50 current_auc = 0.7758620689655172
User 81313 AUC after training: 0.7758620689655172
User 81313 does not improve AUC. Reverting changes.
Training on augumented user 60086 35/50 current_auc = 0.7758620689655172
User 60086 AUC after training: 0.7758620689655172
User 60086 does not improve AUC. Reverting changes.
Training on augumented user 29459 36/50 current_auc = 0.7758620689655172
User 29459 AUC after training: 0.7758620689655172
User 29459 does not improve AUC. Reverting changes.
Training on augumented user 8406 37/50 current_auc = 0.7758620689655172
User 8406 AUC after training: 0.7724137931034483
User 8406 does not improve AUC. Reverting changes.
Training on augumented user 2094 38/50 current_auc = 0.7758620689655172
User 2094 AUC after training: 0.7724137931034483
User 2094 does not improve AUC. Reverting changes.
Training on augumented user 76705 39/50 current_auc = 0.7758620689655172
User 76705 AUC after training: 0.7741379310344827
User 76705 does not improve AUC. Reverting changes.
Training on augumented user 128197 40/50 current_auc = 0.7758620689655172
User 128197 AUC after training: 0.7724137931034483
User 128197 does not improve AUC. Reverting changes.
Training on augumented user 128506 41/50 current_auc = 0.7758620689655172
User 128506 AUC after training: 0.7706896551724138
User 128506 does not improve AUC. Reverting changes.
Training on augumented user 76754 42/50 current_auc = 0.7758620689655172
User 76754 AUC after training: 0.7741379310344827
User 76754 does not improve AUC. Reverting changes.
Training on augumented user 109980 43/50 current_auc = 0.7758620689655172
User 109980 AUC after training: 0.7741379310344827
User 109980 does not improve AUC. Reverting changes.
Training on augumented user 131370 44/50 current_auc = 0.7758620689655172
User 131370 AUC after training: 0.7724137931034483
User 131370 does not improve AUC. Reverting changes.
Training on augumented user 56311 45/50 current_auc = 0.7758620689655172
User 56311 AUC after training: 0.7706896551724137
User 56311 does not improve AUC. Reverting changes.
Training on augumented user 17713 46/50 current_auc = 0.7758620689655172
User 17713 AUC after training: 0.7689655172413793
User 17713 does not improve AUC. Reverting changes.
Training on augumented user 13530 47/50 current_auc = 0.7758620689655172
User 13530 AUC after training: 0.7724137931034483
User 13530 does not improve AUC. Reverting changes.
Training on augumented user 62846 48/50 current_auc = 0.7758620689655172
User 62846 AUC after training: 0.7741379310344827
User 62846 does not improve AUC. Reverting changes.
Training on augumented user 80264 49/50 current_auc = 0.7758620689655172
User 80264 AUC after training: 0.7724137931034483
User 80264 does not improve AUC. Reverting changes.
[2024-12-02 18:11:57.866723] start test user 15208 61/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:58.464289] start test user 15208 61/568 recall augumented users by random, augumented_users = [69894, 24269, 103042, 30682, 11938, 55450, 93783, 42777, 106608, 14653, 61345, 110043, 67530, 14897, 58837, 7942, 45403, 124421, 30638, 99946, 97984, 129830, 37282, 47595, 105507, 43975, 112358, 93992, 78863, 83809, 128577, 46369, 89228, 122909, 122133, 49166, 55411, 118531, 45444, 92342, 100305, 95937, 100788, 56587, 86684, 126197, 17567, 30609, 11816, 81041]
[2024-12-02 18:11:58.487425] user = 15208 Cloud 61/568
[2024-12-02 18:11:58.511526] user = 15208 Local 61/568
[2024-12-02 18:11:58.678059] user = 15208 Local+ 61/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:01.269232] user = 15208 MPDA- 61/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5907564684969385
Training on augumented user 69894 0/50 current_auc = 0.5907564684969385
User 69894 AUC after training: 0.5922378036737113
User 69894 improves AUC. Keeping the model.
Training on augumented user 24269 1/50 current_auc = 0.5922378036737113
User 24269 AUC after training: 0.593521627493581
User 24269 improves AUC. Keeping the model.
Training on augumented user 103042 2/50 current_auc = 0.593521627493581
User 103042 AUC after training: 0.5925340707090658
User 103042 does not improve AUC. Reverting changes.
Training on augumented user 30682 3/50 current_auc = 0.593521627493581
User 30682 AUC after training: 0.5927315820659688
User 30682 does not improve AUC. Reverting changes.
Training on augumented user 11938 4/50 current_auc = 0.593521627493581
User 11938 AUC after training: 0.5939166502073869
User 11938 improves AUC. Keeping the model.
Training on augumented user 55450 5/50 current_auc = 0.5939166502073869
User 55450 AUC after training: 0.5935216274935808
User 55450 does not improve AUC. Reverting changes.
Training on augumented user 93783 6/50 current_auc = 0.5939166502073869
User 93783 AUC after training: 0.5935216274935808
User 93783 does not improve AUC. Reverting changes.
Training on augumented user 42777 7/50 current_auc = 0.5939166502073869
User 42777 AUC after training: 0.5939166502073868
User 42777 does not improve AUC. Reverting changes.
Training on augumented user 106608 8/50 current_auc = 0.5939166502073869
User 106608 AUC after training: 0.5939166502073869
User 106608 does not improve AUC. Reverting changes.
Training on augumented user 14653 9/50 current_auc = 0.5939166502073869
User 14653 AUC after training: 0.594509184278096
User 14653 improves AUC. Keeping the model.
Training on augumented user 61345 10/50 current_auc = 0.594509184278096
User 61345 AUC after training: 0.594904206991902
User 61345 improves AUC. Keeping the model.
Training on augumented user 110043 11/50 current_auc = 0.594904206991902
User 110043 AUC after training: 0.5935216274935808
User 110043 does not improve AUC. Reverting changes.
Training on augumented user 67530 12/50 current_auc = 0.594904206991902
User 67530 AUC after training: 0.5949042069919022
User 67530 improves AUC. Keeping the model.
Training on augumented user 14897 13/50 current_auc = 0.5949042069919022
User 14897 AUC after training: 0.5939166502073868
User 14897 does not improve AUC. Reverting changes.
Training on augumented user 58837 14/50 current_auc = 0.5949042069919022
User 58837 AUC after training: 0.59411416156429
User 58837 does not improve AUC. Reverting changes.
Training on augumented user 7942 15/50 current_auc = 0.5949042069919022
User 7942 AUC after training: 0.5933241161366778
User 7942 does not improve AUC. Reverting changes.
Training on augumented user 45403 16/50 current_auc = 0.5949042069919022
User 45403 AUC after training: 0.595101718348805
User 45403 improves AUC. Keeping the model.
Training on augumented user 124421 17/50 current_auc = 0.595101718348805
User 124421 AUC after training: 0.5952992297057081
User 124421 improves AUC. Keeping the model.
Training on augumented user 30638 18/50 current_auc = 0.5952992297057081
User 30638 AUC after training: 0.5952992297057081
User 30638 does not improve AUC. Reverting changes.
Training on augumented user 99946 19/50 current_auc = 0.5952992297057081
User 99946 AUC after training: 0.5951017183488051
User 99946 does not improve AUC. Reverting changes.
Training on augumented user 97984 20/50 current_auc = 0.5952992297057081
User 97984 AUC after training: 0.594509184278096
User 97984 does not improve AUC. Reverting changes.
Training on augumented user 129830 21/50 current_auc = 0.5952992297057081
User 129830 AUC after training: 0.5954967410626111
User 129830 improves AUC. Keeping the model.
Training on augumented user 37282 22/50 current_auc = 0.5954967410626111
User 37282 AUC after training: 0.5948054513134505
User 37282 does not improve AUC. Reverting changes.
Training on augumented user 47595 23/50 current_auc = 0.5954967410626111
User 47595 AUC after training: 0.5951017183488051
User 47595 does not improve AUC. Reverting changes.
Training on augumented user 105507 24/50 current_auc = 0.5954967410626111
User 105507 AUC after training: 0.594706695634999
User 105507 does not improve AUC. Reverting changes.
Training on augumented user 43975 25/50 current_auc = 0.5954967410626111
User 43975 AUC after training: 0.5949042069919019
User 43975 does not improve AUC. Reverting changes.
Training on augumented user 112358 26/50 current_auc = 0.5954967410626111
User 112358 AUC after training: 0.5952992297057081
User 112358 does not improve AUC. Reverting changes.
Training on augumented user 93992 27/50 current_auc = 0.5954967410626111
User 93992 AUC after training: 0.594509184278096
User 93992 does not improve AUC. Reverting changes.
Training on augumented user 78863 28/50 current_auc = 0.5954967410626111
User 78863 AUC after training: 0.5952992297057081
User 78863 does not improve AUC. Reverting changes.
Training on augumented user 83809 29/50 current_auc = 0.5954967410626111
User 83809 AUC after training: 0.5951017183488051
User 83809 does not improve AUC. Reverting changes.
Training on augumented user 128577 30/50 current_auc = 0.5954967410626111
User 128577 AUC after training: 0.5954967410626112
User 128577 improves AUC. Keeping the model.
Training on augumented user 46369 31/50 current_auc = 0.5954967410626112
User 46369 AUC after training: 0.5960892751333201
User 46369 improves AUC. Keeping the model.
Training on augumented user 89228 32/50 current_auc = 0.5960892751333201
User 89228 AUC after training: 0.5956942524195141
User 89228 does not improve AUC. Reverting changes.
Training on augumented user 122909 33/50 current_auc = 0.5960892751333201
User 122909 AUC after training: 0.5949042069919019
User 122909 does not improve AUC. Reverting changes.
Training on augumented user 122133 34/50 current_auc = 0.5960892751333201
User 122133 AUC after training: 0.5956942524195141
User 122133 does not improve AUC. Reverting changes.
Training on augumented user 49166 35/50 current_auc = 0.5960892751333201
User 49166 AUC after training: 0.5968793205609322
User 49166 improves AUC. Keeping the model.
Training on augumented user 55411 36/50 current_auc = 0.5968793205609322
User 55411 AUC after training: 0.594904206991902
User 55411 does not improve AUC. Reverting changes.
Training on augumented user 118531 37/50 current_auc = 0.5968793205609322
User 118531 AUC after training: 0.5968793205609323
User 118531 improves AUC. Keeping the model.
Training on augumented user 45444 38/50 current_auc = 0.5968793205609323
User 45444 AUC after training: 0.5956942524195141
User 45444 does not improve AUC. Reverting changes.
Training on augumented user 92342 39/50 current_auc = 0.5968793205609323
User 92342 AUC after training: 0.5960892751333201
User 92342 does not improve AUC. Reverting changes.
Training on augumented user 100305 40/50 current_auc = 0.5968793205609323
User 100305 AUC after training: 0.595299229705708
User 100305 does not improve AUC. Reverting changes.
Training on augumented user 95937 41/50 current_auc = 0.5968793205609323
User 95937 AUC after training: 0.5963855421686747
User 95937 does not improve AUC. Reverting changes.
Training on augumented user 100788 42/50 current_auc = 0.5968793205609323
User 100788 AUC after training: 0.5964842978471262
User 100788 does not improve AUC. Reverting changes.
Training on augumented user 56587 43/50 current_auc = 0.5968793205609323
User 56587 AUC after training: 0.5966818092040291
User 56587 does not improve AUC. Reverting changes.
Training on augumented user 86684 44/50 current_auc = 0.5968793205609323
User 86684 AUC after training: 0.59411416156429
User 86684 does not improve AUC. Reverting changes.
Training on augumented user 126197 45/50 current_auc = 0.5968793205609323
User 126197 AUC after training: 0.5964842978471262
User 126197 does not improve AUC. Reverting changes.
Training on augumented user 17567 46/50 current_auc = 0.5968793205609323
User 17567 AUC after training: 0.5954967410626112
User 17567 does not improve AUC. Reverting changes.
Training on augumented user 30609 47/50 current_auc = 0.5968793205609323
User 30609 AUC after training: 0.5954967410626111
User 30609 does not improve AUC. Reverting changes.
Training on augumented user 11816 48/50 current_auc = 0.5968793205609323
User 11816 AUC after training: 0.5966818092040292
User 11816 does not improve AUC. Reverting changes.
Training on augumented user 81041 49/50 current_auc = 0.5968793205609323
User 81041 AUC after training: 0.5952004740272566
User 81041 does not improve AUC. Reverting changes.
[2024-12-02 18:12:32.055034] start test user 15242 62/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:32.699104] start test user 15242 62/568 recall augumented users by random, augumented_users = [91597, 63962, 114618, 110481, 81947, 2706, 129377, 33091, 35009, 68693, 50037, 63706, 133367, 127230, 129592, 128840, 14407, 62612, 72013, 102204, 38840, 128088, 74798, 85415, 72617, 47666, 66282, 81944, 69745, 125931, 46557, 39823, 79886, 68323, 2864, 122062, 64231, 97537, 32750, 95711, 136774, 70404, 97044, 131047, 125178, 136098, 87383, 590, 33510, 25007]
[2024-12-02 18:12:32.717420] user = 15242 Cloud 62/568
[2024-12-02 18:12:32.805820] user = 15242 Local 62/568
[2024-12-02 18:12:33.048276] user = 15242 Local+ 62/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:36.116119] user = 15242 MPDA- 62/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6722276146566367
Training on augumented user 91597 0/50 current_auc = 0.6722276146566367
User 91597 AUC after training: 0.672146728140419
User 91597 does not improve AUC. Reverting changes.
Training on augumented user 63962 1/50 current_auc = 0.6722276146566367
User 63962 AUC after training: 0.6722478362856911
User 63962 improves AUC. Keeping the model.
Training on augumented user 114618 2/50 current_auc = 0.6722478362856911
User 114618 AUC after training: 0.6720658416242012
User 114618 does not improve AUC. Reverting changes.
Training on augumented user 110481 3/50 current_auc = 0.6722478362856911
User 110481 AUC after training: 0.6724500525762356
User 110481 improves AUC. Keeping the model.
Training on augumented user 81947 4/50 current_auc = 0.6724500525762356
User 81947 AUC after training: 0.6723085011728545
User 81947 does not improve AUC. Reverting changes.
Training on augumented user 2706 5/50 current_auc = 0.6724500525762356
User 2706 AUC after training: 0.6723691660600177
User 2706 does not improve AUC. Reverting changes.
Training on augumented user 129377 6/50 current_auc = 0.6724500525762356
User 129377 AUC after training: 0.6724702742052899
User 129377 improves AUC. Keeping the model.
Training on augumented user 33091 7/50 current_auc = 0.6724702742052899
User 33091 AUC after training: 0.6724096093181267
User 33091 does not improve AUC. Reverting changes.
Training on augumented user 35009 8/50 current_auc = 0.6724702742052899
User 35009 AUC after training: 0.6723691660600178
User 35009 does not improve AUC. Reverting changes.
Training on augumented user 68693 9/50 current_auc = 0.6724702742052899
User 68693 AUC after training: 0.6725309390924532
User 68693 improves AUC. Keeping the model.
Training on augumented user 50037 10/50 current_auc = 0.6725309390924532
User 50037 AUC after training: 0.6722882795438001
User 50037 does not improve AUC. Reverting changes.
Training on augumented user 63706 11/50 current_auc = 0.6725309390924532
User 63706 AUC after training: 0.6723691660600178
User 63706 does not improve AUC. Reverting changes.
Training on augumented user 133367 12/50 current_auc = 0.6725309390924532
User 133367 AUC after training: 0.6727735986411065
User 133367 improves AUC. Keeping the model.
Training on augumented user 127230 13/50 current_auc = 0.6727735986411065
User 127230 AUC after training: 0.6728342635282699
User 127230 improves AUC. Keeping the model.
Training on augumented user 129592 14/50 current_auc = 0.6728342635282699
User 129592 AUC after training: 0.6727129337539431
User 129592 does not improve AUC. Reverting changes.
Training on augumented user 128840 15/50 current_auc = 0.6728342635282699
User 128840 AUC after training: 0.6727129337539433
User 128840 does not improve AUC. Reverting changes.
Training on augumented user 14407 16/50 current_auc = 0.6728342635282699
User 14407 AUC after training: 0.67265226886678
User 14407 does not improve AUC. Reverting changes.
Training on augumented user 62612 17/50 current_auc = 0.6728342635282699
User 62612 AUC after training: 0.672611825608671
User 62612 does not improve AUC. Reverting changes.
Training on augumented user 72013 18/50 current_auc = 0.6728342635282699
User 72013 AUC after training: 0.672611825608671
User 72013 does not improve AUC. Reverting changes.
Training on augumented user 102204 19/50 current_auc = 0.6728342635282699
User 102204 AUC after training: 0.672611825608671
User 102204 does not improve AUC. Reverting changes.
Training on augumented user 38840 20/50 current_auc = 0.6728342635282699
User 38840 AUC after training: 0.6729151500444875
User 38840 improves AUC. Keeping the model.
Training on augumented user 128088 21/50 current_auc = 0.6729151500444875
User 128088 AUC after training: 0.6727533770120522
User 128088 does not improve AUC. Reverting changes.
Training on augumented user 74798 22/50 current_auc = 0.6729151500444875
User 74798 AUC after training: 0.6728140418992155
User 74798 does not improve AUC. Reverting changes.
Training on augumented user 85415 23/50 current_auc = 0.6729151500444875
User 85415 AUC after training: 0.6731375879640864
User 85415 improves AUC. Keeping the model.
Training on augumented user 72617 24/50 current_auc = 0.6731375879640864
User 72617 AUC after training: 0.6730567014478686
User 72617 does not improve AUC. Reverting changes.
Training on augumented user 47666 25/50 current_auc = 0.6731375879640864
User 47666 AUC after training: 0.6726724904958343
User 47666 does not improve AUC. Reverting changes.
Training on augumented user 66282 26/50 current_auc = 0.6731375879640864
User 66282 AUC after training: 0.6728747067863787
User 66282 does not improve AUC. Reverting changes.
Training on augumented user 81944 27/50 current_auc = 0.6731375879640864
User 81944 AUC after training: 0.6731982528512497
User 81944 improves AUC. Keeping the model.
Training on augumented user 69745 28/50 current_auc = 0.6731982528512497
User 69745 AUC after training: 0.6732184744803041
User 69745 improves AUC. Keeping the model.
Training on augumented user 125931 29/50 current_auc = 0.6732184744803041
User 125931 AUC after training: 0.6732791393674675
User 125931 improves AUC. Keeping the model.
Training on augumented user 46557 30/50 current_auc = 0.6732791393674675
User 46557 AUC after training: 0.673258917738413
User 46557 does not improve AUC. Reverting changes.
Training on augumented user 39823 31/50 current_auc = 0.6732791393674675
User 39823 AUC after training: 0.6730971447059776
User 39823 does not improve AUC. Reverting changes.
Training on augumented user 79886 32/50 current_auc = 0.6732791393674675
User 79886 AUC after training: 0.6733398042546307
User 79886 improves AUC. Keeping the model.
Training on augumented user 68323 33/50 current_auc = 0.6733398042546307
User 68323 AUC after training: 0.6732791393674674
User 68323 does not improve AUC. Reverting changes.
Training on augumented user 2864 34/50 current_auc = 0.6733398042546307
User 2864 AUC after training: 0.673258917738413
User 2864 does not improve AUC. Reverting changes.
Training on augumented user 122062 35/50 current_auc = 0.6733398042546307
User 122062 AUC after training: 0.6735824638032839
User 122062 improves AUC. Keeping the model.
Training on augumented user 64231 36/50 current_auc = 0.6735824638032839
User 64231 AUC after training: 0.6732184744803043
User 64231 does not improve AUC. Reverting changes.
Training on augumented user 97537 37/50 current_auc = 0.6735824638032839
User 97537 AUC after training: 0.6738655666100462
User 97537 improves AUC. Keeping the model.
Training on augumented user 32750 38/50 current_auc = 0.6738655666100462
User 32750 AUC after training: 0.6737037935776107
User 32750 does not improve AUC. Reverting changes.
Training on augumented user 95711 39/50 current_auc = 0.6738655666100462
User 95711 AUC after training: 0.673764458464774
User 95711 does not improve AUC. Reverting changes.
Training on augumented user 136774 40/50 current_auc = 0.6738655666100462
User 136774 AUC after training: 0.673764458464774
User 136774 does not improve AUC. Reverting changes.
Training on augumented user 70404 41/50 current_auc = 0.6738655666100462
User 70404 AUC after training: 0.6742699991911348
User 70404 improves AUC. Keeping the model.
Training on augumented user 97044 42/50 current_auc = 0.6742699991911348
User 97044 AUC after training: 0.6744317722235703
User 97044 improves AUC. Keeping the model.
Training on augumented user 131047 43/50 current_auc = 0.6744317722235703
User 131047 AUC after training: 0.6743104424492437
User 131047 does not improve AUC. Reverting changes.
Training on augumented user 125178 44/50 current_auc = 0.6744317722235703
User 125178 AUC after training: 0.6730364798188142
User 125178 does not improve AUC. Reverting changes.
Training on augumented user 136098 45/50 current_auc = 0.6744317722235703
User 136098 AUC after training: 0.674269999191135
User 136098 does not improve AUC. Reverting changes.
Training on augumented user 87383 46/50 current_auc = 0.6744317722235703
User 87383 AUC after training: 0.6746744317722235
User 87383 improves AUC. Keeping the model.
Training on augumented user 590 47/50 current_auc = 0.6746744317722235
User 590 AUC after training: 0.6749777562080401
User 590 improves AUC. Keeping the model.
Training on augumented user 33510 48/50 current_auc = 0.6749777562080401
User 33510 AUC after training: 0.6746137668850603
User 33510 does not improve AUC. Reverting changes.
Training on augumented user 25007 49/50 current_auc = 0.6749777562080401
User 25007 AUC after training: 0.6744519938526248
User 25007 does not improve AUC. Reverting changes.
[2024-12-02 18:13:04.409201] start test user 15265 63/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:05.293072] start test user 15265 63/568 recall augumented users by random, augumented_users = [2442, 55278, 52048, 40664, 103492, 82899, 1440, 66680, 6985, 99131, 52961, 114680, 71835, 39537, 11105, 42218, 42904, 114629, 98505, 38795, 74515, 88449, 25905, 118869, 130452, 138255, 35017, 37865, 50896, 80620, 134934, 116747, 24512, 133796, 90622, 56811, 55072, 100610, 109807, 136685, 22047, 56704, 44047, 77933, 77644, 49427, 5366, 15043, 35940, 7785]
[2024-12-02 18:13:05.309702] user = 15265 Cloud 63/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:13:05.316427] user = 15265 Local 63/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:13:05.335857] user = 15265 Local+ 63/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:13:08.009909] user = 15265 MPDA- 63/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 2442 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2442 AUC after training: 0.5
User 2442 does not improve AUC. Reverting changes.
Training on augumented user 55278 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55278 AUC after training: 0.5
User 55278 does not improve AUC. Reverting changes.
Training on augumented user 52048 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52048 AUC after training: 0.5
User 52048 does not improve AUC. Reverting changes.
Training on augumented user 40664 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40664 AUC after training: 0.5
User 40664 does not improve AUC. Reverting changes.
Training on augumented user 103492 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103492 AUC after training: 0.5
User 103492 does not improve AUC. Reverting changes.
Training on augumented user 82899 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82899 AUC after training: 0.5
User 82899 does not improve AUC. Reverting changes.
Training on augumented user 1440 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1440 AUC after training: 0.5
User 1440 does not improve AUC. Reverting changes.
Training on augumented user 66680 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66680 AUC after training: 0.5
User 66680 does not improve AUC. Reverting changes.
Training on augumented user 6985 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6985 AUC after training: 0.5
User 6985 does not improve AUC. Reverting changes.
Training on augumented user 99131 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99131 AUC after training: 0.5
User 99131 does not improve AUC. Reverting changes.
Training on augumented user 52961 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52961 AUC after training: 0.5
User 52961 does not improve AUC. Reverting changes.
Training on augumented user 114680 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114680 AUC after training: 0.5
User 114680 does not improve AUC. Reverting changes.
Training on augumented user 71835 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71835 AUC after training: 0.5
User 71835 does not improve AUC. Reverting changes.
Training on augumented user 39537 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39537 AUC after training: 0.5
User 39537 does not improve AUC. Reverting changes.
Training on augumented user 11105 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11105 AUC after training: 0.5
User 11105 does not improve AUC. Reverting changes.
Training on augumented user 42218 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42218 AUC after training: 0.5
User 42218 does not improve AUC. Reverting changes.
Training on augumented user 42904 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42904 AUC after training: 0.5
User 42904 does not improve AUC. Reverting changes.
Training on augumented user 114629 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114629 AUC after training: 0.5
User 114629 does not improve AUC. Reverting changes.
Training on augumented user 98505 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98505 AUC after training: 0.5
User 98505 does not improve AUC. Reverting changes.
Training on augumented user 38795 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38795 AUC after training: 0.5
User 38795 does not improve AUC. Reverting changes.
Training on augumented user 74515 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74515 AUC after training: 0.5
User 74515 does not improve AUC. Reverting changes.
Training on augumented user 88449 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88449 AUC after training: 0.5
User 88449 does not improve AUC. Reverting changes.
Training on augumented user 25905 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25905 AUC after training: 0.5
User 25905 does not improve AUC. Reverting changes.
Training on augumented user 118869 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118869 AUC after training: 0.5
User 118869 does not improve AUC. Reverting changes.
Training on augumented user 130452 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130452 AUC after training: 0.5
User 130452 does not improve AUC. Reverting changes.
Training on augumented user 138255 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138255 AUC after training: 0.5
User 138255 does not improve AUC. Reverting changes.
Training on augumented user 35017 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35017 AUC after training: 0.5
User 35017 does not improve AUC. Reverting changes.
Training on augumented user 37865 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37865 AUC after training: 0.5
User 37865 does not improve AUC. Reverting changes.
Training on augumented user 50896 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50896 AUC after training: 0.5
User 50896 does not improve AUC. Reverting changes.
Training on augumented user 80620 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80620 AUC after training: 0.5
User 80620 does not improve AUC. Reverting changes.
Training on augumented user 134934 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134934 AUC after training: 0.5
User 134934 does not improve AUC. Reverting changes.
Training on augumented user 116747 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116747 AUC after training: 0.5
User 116747 does not improve AUC. Reverting changes.
Training on augumented user 24512 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24512 AUC after training: 0.5
User 24512 does not improve AUC. Reverting changes.
Training on augumented user 133796 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133796 AUC after training: 0.5
User 133796 does not improve AUC. Reverting changes.
Training on augumented user 90622 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90622 AUC after training: 0.5
User 90622 does not improve AUC. Reverting changes.
Training on augumented user 56811 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56811 AUC after training: 0.5
User 56811 does not improve AUC. Reverting changes.
Training on augumented user 55072 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55072 AUC after training: 0.5
User 55072 does not improve AUC. Reverting changes.
Training on augumented user 100610 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100610 AUC after training: 0.5
User 100610 does not improve AUC. Reverting changes.
Training on augumented user 109807 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109807 AUC after training: 0.5
User 109807 does not improve AUC. Reverting changes.
Training on augumented user 136685 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136685 AUC after training: 0.5
User 136685 does not improve AUC. Reverting changes.
Training on augumented user 22047 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22047 AUC after training: 0.5
User 22047 does not improve AUC. Reverting changes.
Training on augumented user 56704 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56704 AUC after training: 0.5
User 56704 does not improve AUC. Reverting changes.
Training on augumented user 44047 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44047 AUC after training: 0.5
User 44047 does not improve AUC. Reverting changes.
Training on augumented user 77933 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77933 AUC after training: 0.5
User 77933 does not improve AUC. Reverting changes.
Training on augumented user 77644 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77644 AUC after training: 0.5
User 77644 does not improve AUC. Reverting changes.
Training on augumented user 49427 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49427 AUC after training: 0.5
User 49427 does not improve AUC. Reverting changes.
Training on augumented user 5366 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5366 AUC after training: 0.5
User 5366 does not improve AUC. Reverting changes.
Training on augumented user 15043 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15043 AUC after training: 0.5
User 15043 does not improve AUC. Reverting changes.
Training on augumented user 35940 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35940 AUC after training: 0.5
User 35940 does not improve AUC. Reverting changes.
Training on augumented user 7785 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7785 AUC after training: 0.5
User 7785 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:13:35.359694] start test user 15299 64/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:35.818949] start test user 15299 64/568 recall augumented users by random, augumented_users = [48029, 107036, 73551, 102545, 12650, 131227, 2519, 81068, 5925, 69499, 111937, 36337, 116779, 7399, 105117, 103400, 125974, 95965, 25032, 93133, 50139, 60248, 25587, 73060, 36633, 124830, 51406, 72602, 1088, 60116, 118044, 7367, 72377, 71391, 39723, 67596, 113185, 109599, 132128, 93980, 65914, 95371, 23815, 15379, 4799, 67068, 107026, 78399, 88007, 60238]
[2024-12-02 18:13:35.834236] user = 15299 Cloud 64/568
[2024-12-02 18:13:35.853640] user = 15299 Local 64/568
[2024-12-02 18:13:35.930501] user = 15299 Local+ 64/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:38.475104] user = 15299 MPDA- 64/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7442666666666666
Training on augumented user 48029 0/50 current_auc = 0.7442666666666666
User 48029 AUC after training: 0.7452000000000001
User 48029 improves AUC. Keeping the model.
Training on augumented user 107036 1/50 current_auc = 0.7452000000000001
User 107036 AUC after training: 0.7435333333333335
User 107036 does not improve AUC. Reverting changes.
Training on augumented user 73551 2/50 current_auc = 0.7452000000000001
User 73551 AUC after training: 0.7446666666666667
User 73551 does not improve AUC. Reverting changes.
Training on augumented user 102545 3/50 current_auc = 0.7452000000000001
User 102545 AUC after training: 0.7454666666666666
User 102545 improves AUC. Keeping the model.
Training on augumented user 12650 4/50 current_auc = 0.7454666666666666
User 12650 AUC after training: 0.7449333333333332
User 12650 does not improve AUC. Reverting changes.
Training on augumented user 131227 5/50 current_auc = 0.7454666666666666
User 131227 AUC after training: 0.7444000000000001
User 131227 does not improve AUC. Reverting changes.
Training on augumented user 2519 6/50 current_auc = 0.7454666666666666
User 2519 AUC after training: 0.7449333333333334
User 2519 does not improve AUC. Reverting changes.
Training on augumented user 81068 7/50 current_auc = 0.7454666666666666
User 81068 AUC after training: 0.7458
User 81068 improves AUC. Keeping the model.
Training on augumented user 5925 8/50 current_auc = 0.7458
User 5925 AUC after training: 0.7458666666666667
User 5925 improves AUC. Keeping the model.
Training on augumented user 69499 9/50 current_auc = 0.7458666666666667
User 69499 AUC after training: 0.7456
User 69499 does not improve AUC. Reverting changes.
Training on augumented user 111937 10/50 current_auc = 0.7458666666666667
User 111937 AUC after training: 0.746
User 111937 improves AUC. Keeping the model.
Training on augumented user 36337 11/50 current_auc = 0.746
User 36337 AUC after training: 0.7454666666666667
User 36337 does not improve AUC. Reverting changes.
Training on augumented user 116779 12/50 current_auc = 0.746
User 116779 AUC after training: 0.7458666666666666
User 116779 does not improve AUC. Reverting changes.
Training on augumented user 7399 13/50 current_auc = 0.746
User 7399 AUC after training: 0.746
User 7399 does not improve AUC. Reverting changes.
Training on augumented user 105117 14/50 current_auc = 0.746
User 105117 AUC after training: 0.7454666666666667
User 105117 does not improve AUC. Reverting changes.
Training on augumented user 103400 15/50 current_auc = 0.746
User 103400 AUC after training: 0.7453333333333333
User 103400 does not improve AUC. Reverting changes.
Training on augumented user 125974 16/50 current_auc = 0.746
User 125974 AUC after training: 0.7469333333333333
User 125974 improves AUC. Keeping the model.
Training on augumented user 95965 17/50 current_auc = 0.7469333333333333
User 95965 AUC after training: 0.7465333333333334
User 95965 does not improve AUC. Reverting changes.
Training on augumented user 25032 18/50 current_auc = 0.7469333333333333
User 25032 AUC after training: 0.7466666666666667
User 25032 does not improve AUC. Reverting changes.
Training on augumented user 93133 19/50 current_auc = 0.7469333333333333
User 93133 AUC after training: 0.7454666666666667
User 93133 does not improve AUC. Reverting changes.
Training on augumented user 50139 20/50 current_auc = 0.7469333333333333
User 50139 AUC after training: 0.7470666666666667
User 50139 improves AUC. Keeping the model.
Training on augumented user 60248 21/50 current_auc = 0.7470666666666667
User 60248 AUC after training: 0.7467333333333332
User 60248 does not improve AUC. Reverting changes.
Training on augumented user 25587 22/50 current_auc = 0.7470666666666667
User 25587 AUC after training: 0.7474666666666668
User 25587 improves AUC. Keeping the model.
Training on augumented user 73060 23/50 current_auc = 0.7474666666666668
User 73060 AUC after training: 0.7472
User 73060 does not improve AUC. Reverting changes.
Training on augumented user 36633 24/50 current_auc = 0.7474666666666668
User 36633 AUC after training: 0.7473333333333334
User 36633 does not improve AUC. Reverting changes.
Training on augumented user 124830 25/50 current_auc = 0.7474666666666668
User 124830 AUC after training: 0.7476
User 124830 improves AUC. Keeping the model.
Training on augumented user 51406 26/50 current_auc = 0.7476
User 51406 AUC after training: 0.7476000000000002
User 51406 improves AUC. Keeping the model.
Training on augumented user 72602 27/50 current_auc = 0.7476000000000002
User 72602 AUC after training: 0.7482666666666667
User 72602 improves AUC. Keeping the model.
Training on augumented user 1088 28/50 current_auc = 0.7482666666666667
User 1088 AUC after training: 0.7475999999999999
User 1088 does not improve AUC. Reverting changes.
Training on augumented user 60116 29/50 current_auc = 0.7482666666666667
User 60116 AUC after training: 0.7476000000000002
User 60116 does not improve AUC. Reverting changes.
Training on augumented user 118044 30/50 current_auc = 0.7482666666666667
User 118044 AUC after training: 0.7476
User 118044 does not improve AUC. Reverting changes.
Training on augumented user 7367 31/50 current_auc = 0.7482666666666667
User 7367 AUC after training: 0.7478666666666667
User 7367 does not improve AUC. Reverting changes.
Training on augumented user 72377 32/50 current_auc = 0.7482666666666667
User 72377 AUC after training: 0.7478666666666667
User 72377 does not improve AUC. Reverting changes.
Training on augumented user 71391 33/50 current_auc = 0.7482666666666667
User 71391 AUC after training: 0.7477333333333334
User 71391 does not improve AUC. Reverting changes.
Training on augumented user 39723 34/50 current_auc = 0.7482666666666667
User 39723 AUC after training: 0.7473333333333334
User 39723 does not improve AUC. Reverting changes.
Training on augumented user 67596 35/50 current_auc = 0.7482666666666667
User 67596 AUC after training: 0.7475333333333333
User 67596 does not improve AUC. Reverting changes.
Training on augumented user 113185 36/50 current_auc = 0.7482666666666667
User 113185 AUC after training: 0.7476666666666666
User 113185 does not improve AUC. Reverting changes.
Training on augumented user 109599 37/50 current_auc = 0.7482666666666667
User 109599 AUC after training: 0.7461999999999999
User 109599 does not improve AUC. Reverting changes.
Training on augumented user 132128 38/50 current_auc = 0.7482666666666667
User 132128 AUC after training: 0.7476000000000002
User 132128 does not improve AUC. Reverting changes.
Training on augumented user 93980 39/50 current_auc = 0.7482666666666667
User 93980 AUC after training: 0.7478666666666668
User 93980 does not improve AUC. Reverting changes.
Training on augumented user 65914 40/50 current_auc = 0.7482666666666667
User 65914 AUC after training: 0.7478666666666668
User 65914 does not improve AUC. Reverting changes.
Training on augumented user 95371 41/50 current_auc = 0.7482666666666667
User 95371 AUC after training: 0.7477333333333334
User 95371 does not improve AUC. Reverting changes.
Training on augumented user 23815 42/50 current_auc = 0.7482666666666667
User 23815 AUC after training: 0.7481333333333333
User 23815 does not improve AUC. Reverting changes.
Training on augumented user 15379 43/50 current_auc = 0.7482666666666667
User 15379 AUC after training: 0.7474666666666666
User 15379 does not improve AUC. Reverting changes.
Training on augumented user 4799 44/50 current_auc = 0.7482666666666667
User 4799 AUC after training: 0.7478666666666667
User 4799 does not improve AUC. Reverting changes.
Training on augumented user 67068 45/50 current_auc = 0.7482666666666667
User 67068 AUC after training: 0.7476000000000002
User 67068 does not improve AUC. Reverting changes.
Training on augumented user 107026 46/50 current_auc = 0.7482666666666667
User 107026 AUC after training: 0.7482666666666667
User 107026 does not improve AUC. Reverting changes.
Training on augumented user 78399 47/50 current_auc = 0.7482666666666667
User 78399 AUC after training: 0.7472666666666667
User 78399 does not improve AUC. Reverting changes.
Training on augumented user 88007 48/50 current_auc = 0.7482666666666667
User 88007 AUC after training: 0.7474666666666666
User 88007 does not improve AUC. Reverting changes.
Training on augumented user 60238 49/50 current_auc = 0.7482666666666667
User 60238 AUC after training: 0.7473333333333334
User 60238 does not improve AUC. Reverting changes.
[2024-12-02 18:14:09.346984] start test user 15312 65/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:10.103505] start test user 15312 65/568 recall augumented users by random, augumented_users = [4222, 80378, 92304, 132392, 122143, 115506, 53311, 31399, 108569, 106901, 90188, 62521, 56117, 56075, 72344, 16229, 107415, 22782, 122439, 4381, 104116, 76883, 79394, 120438, 75203, 53717, 88314, 15447, 9211, 63953, 110669, 40123, 80181, 40250, 60909, 45865, 60465, 106488, 74678, 101933, 61548, 113889, 510, 82420, 42911, 45879, 103959, 25249, 102427, 11176]
[2024-12-02 18:14:10.118536] user = 15312 Cloud 65/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:14:10.124899] user = 15312 Local 65/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:14:10.242303] user = 15312 Local+ 65/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:14:12.913081] user = 15312 MPDA- 65/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 4222 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4222 AUC after training: 0.5
User 4222 does not improve AUC. Reverting changes.
Training on augumented user 80378 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80378 AUC after training: 0.5
User 80378 does not improve AUC. Reverting changes.
Training on augumented user 92304 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92304 AUC after training: 0.5
User 92304 does not improve AUC. Reverting changes.
Training on augumented user 132392 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132392 AUC after training: 0.5
User 132392 does not improve AUC. Reverting changes.
Training on augumented user 122143 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122143 AUC after training: 0.5
User 122143 does not improve AUC. Reverting changes.
Training on augumented user 115506 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115506 AUC after training: 0.5
User 115506 does not improve AUC. Reverting changes.
Training on augumented user 53311 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53311 AUC after training: 0.5
User 53311 does not improve AUC. Reverting changes.
Training on augumented user 31399 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31399 AUC after training: 0.5
User 31399 does not improve AUC. Reverting changes.
Training on augumented user 108569 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108569 AUC after training: 0.5
User 108569 does not improve AUC. Reverting changes.
Training on augumented user 106901 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106901 AUC after training: 0.5
User 106901 does not improve AUC. Reverting changes.
Training on augumented user 90188 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90188 AUC after training: 0.5
User 90188 does not improve AUC. Reverting changes.
Training on augumented user 62521 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62521 AUC after training: 0.5
User 62521 does not improve AUC. Reverting changes.
Training on augumented user 56117 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56117 AUC after training: 0.5
User 56117 does not improve AUC. Reverting changes.
Training on augumented user 56075 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56075 AUC after training: 0.5
User 56075 does not improve AUC. Reverting changes.
Training on augumented user 72344 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72344 AUC after training: 0.5
User 72344 does not improve AUC. Reverting changes.
Training on augumented user 16229 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16229 AUC after training: 0.5
User 16229 does not improve AUC. Reverting changes.
Training on augumented user 107415 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107415 AUC after training: 0.5
User 107415 does not improve AUC. Reverting changes.
Training on augumented user 22782 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22782 AUC after training: 0.5
User 22782 does not improve AUC. Reverting changes.
Training on augumented user 122439 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122439 AUC after training: 0.5
User 122439 does not improve AUC. Reverting changes.
Training on augumented user 4381 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4381 AUC after training: 0.5
User 4381 does not improve AUC. Reverting changes.
Training on augumented user 104116 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104116 AUC after training: 0.5
User 104116 does not improve AUC. Reverting changes.
Training on augumented user 76883 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76883 AUC after training: 0.5
User 76883 does not improve AUC. Reverting changes.
Training on augumented user 79394 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79394 AUC after training: 0.5
User 79394 does not improve AUC. Reverting changes.
Training on augumented user 120438 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120438 AUC after training: 0.5
User 120438 does not improve AUC. Reverting changes.
Training on augumented user 75203 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75203 AUC after training: 0.5
User 75203 does not improve AUC. Reverting changes.
Training on augumented user 53717 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53717 AUC after training: 0.5
User 53717 does not improve AUC. Reverting changes.
Training on augumented user 88314 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88314 AUC after training: 0.5
User 88314 does not improve AUC. Reverting changes.
Training on augumented user 15447 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15447 AUC after training: 0.5
User 15447 does not improve AUC. Reverting changes.
Training on augumented user 9211 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9211 AUC after training: 0.5
User 9211 does not improve AUC. Reverting changes.
Training on augumented user 63953 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63953 AUC after training: 0.5
User 63953 does not improve AUC. Reverting changes.
Training on augumented user 110669 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110669 AUC after training: 0.5
User 110669 does not improve AUC. Reverting changes.
Training on augumented user 40123 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40123 AUC after training: 0.5
User 40123 does not improve AUC. Reverting changes.
Training on augumented user 80181 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80181 AUC after training: 0.5
User 80181 does not improve AUC. Reverting changes.
Training on augumented user 40250 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40250 AUC after training: 0.5
User 40250 does not improve AUC. Reverting changes.
Training on augumented user 60909 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60909 AUC after training: 0.5
User 60909 does not improve AUC. Reverting changes.
Training on augumented user 45865 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45865 AUC after training: 0.5
User 45865 does not improve AUC. Reverting changes.
Training on augumented user 60465 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60465 AUC after training: 0.5
User 60465 does not improve AUC. Reverting changes.
Training on augumented user 106488 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106488 AUC after training: 0.5
User 106488 does not improve AUC. Reverting changes.
Training on augumented user 74678 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74678 AUC after training: 0.5
User 74678 does not improve AUC. Reverting changes.
Training on augumented user 101933 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101933 AUC after training: 0.5
User 101933 does not improve AUC. Reverting changes.
Training on augumented user 61548 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61548 AUC after training: 0.5
User 61548 does not improve AUC. Reverting changes.
Training on augumented user 113889 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113889 AUC after training: 0.5
User 113889 does not improve AUC. Reverting changes.
Training on augumented user 510 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 510 AUC after training: 0.5
User 510 does not improve AUC. Reverting changes.
Training on augumented user 82420 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82420 AUC after training: 0.5
User 82420 does not improve AUC. Reverting changes.
Training on augumented user 42911 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42911 AUC after training: 0.5
User 42911 does not improve AUC. Reverting changes.
Training on augumented user 45879 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45879 AUC after training: 0.5
User 45879 does not improve AUC. Reverting changes.
Training on augumented user 103959 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103959 AUC after training: 0.5
User 103959 does not improve AUC. Reverting changes.
Training on augumented user 25249 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25249 AUC after training: 0.5
User 25249 does not improve AUC. Reverting changes.
Training on augumented user 102427 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102427 AUC after training: 0.5
User 102427 does not improve AUC. Reverting changes.
Training on augumented user 11176 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11176 AUC after training: 0.5
User 11176 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:14:38.991353] start test user 15339 66/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:39.431021] start test user 15339 66/568 recall augumented users by random, augumented_users = [89821, 104326, 50364, 57105, 93521, 78998, 75253, 22231, 8627, 129746, 48514, 93189, 72147, 133165, 91886, 8511, 119344, 45496, 99446, 134235, 30121, 3329, 120152, 39312, 40061, 113773, 12002, 81842, 17749, 100672, 14642, 105141, 66042, 137060, 84130, 74359, 131042, 103270, 53827, 28441, 38697, 68934, 113963, 99142, 100332, 117231, 84357, 101567, 29561, 95881]
[2024-12-02 18:14:39.445704] user = 15339 Cloud 66/568
[2024-12-02 18:14:39.480592] user = 15339 Local 66/568
[2024-12-02 18:14:39.514307] user = 15339 Local+ 66/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:42.604073] user = 15339 MPDA- 66/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6071428571428572
Training on augumented user 89821 0/50 current_auc = 0.6071428571428572
User 89821 AUC after training: 0.6064139941690961
User 89821 does not improve AUC. Reverting changes.
Training on augumented user 104326 1/50 current_auc = 0.6071428571428572
User 104326 AUC after training: 0.6056851311953353
User 104326 does not improve AUC. Reverting changes.
Training on augumented user 50364 2/50 current_auc = 0.6071428571428572
User 50364 AUC after training: 0.608600583090379
User 50364 improves AUC. Keeping the model.
Training on augumented user 57105 3/50 current_auc = 0.608600583090379
User 57105 AUC after training: 0.607871720116618
User 57105 does not improve AUC. Reverting changes.
Training on augumented user 93521 4/50 current_auc = 0.608600583090379
User 93521 AUC after training: 0.607871720116618
User 93521 does not improve AUC. Reverting changes.
Training on augumented user 78998 5/50 current_auc = 0.608600583090379
User 78998 AUC after training: 0.607871720116618
User 78998 does not improve AUC. Reverting changes.
Training on augumented user 75253 6/50 current_auc = 0.608600583090379
User 75253 AUC after training: 0.60932944606414
User 75253 improves AUC. Keeping the model.
Training on augumented user 22231 7/50 current_auc = 0.60932944606414
User 22231 AUC after training: 0.608600583090379
User 22231 does not improve AUC. Reverting changes.
Training on augumented user 8627 8/50 current_auc = 0.60932944606414
User 8627 AUC after training: 0.608600583090379
User 8627 does not improve AUC. Reverting changes.
Training on augumented user 129746 9/50 current_auc = 0.60932944606414
User 129746 AUC after training: 0.608600583090379
User 129746 does not improve AUC. Reverting changes.
Training on augumented user 48514 10/50 current_auc = 0.60932944606414
User 48514 AUC after training: 0.60932944606414
User 48514 does not improve AUC. Reverting changes.
Training on augumented user 93189 11/50 current_auc = 0.60932944606414
User 93189 AUC after training: 0.6115160349854227
User 93189 improves AUC. Keeping the model.
Training on augumented user 72147 12/50 current_auc = 0.6115160349854227
User 72147 AUC after training: 0.6115160349854227
User 72147 does not improve AUC. Reverting changes.
Training on augumented user 133165 13/50 current_auc = 0.6115160349854227
User 133165 AUC after training: 0.608600583090379
User 133165 does not improve AUC. Reverting changes.
Training on augumented user 91886 14/50 current_auc = 0.6115160349854227
User 91886 AUC after training: 0.608600583090379
User 91886 does not improve AUC. Reverting changes.
Training on augumented user 8511 15/50 current_auc = 0.6115160349854227
User 8511 AUC after training: 0.6107871720116618
User 8511 does not improve AUC. Reverting changes.
Training on augumented user 119344 16/50 current_auc = 0.6115160349854227
User 119344 AUC after training: 0.6064139941690961
User 119344 does not improve AUC. Reverting changes.
Training on augumented user 45496 17/50 current_auc = 0.6115160349854227
User 45496 AUC after training: 0.6129737609329446
User 45496 improves AUC. Keeping the model.
Training on augumented user 99446 18/50 current_auc = 0.6129737609329446
User 99446 AUC after training: 0.6115160349854227
User 99446 does not improve AUC. Reverting changes.
Training on augumented user 134235 19/50 current_auc = 0.6129737609329446
User 134235 AUC after training: 0.6129737609329446
User 134235 does not improve AUC. Reverting changes.
Training on augumented user 30121 20/50 current_auc = 0.6129737609329446
User 30121 AUC after training: 0.6129737609329446
User 30121 does not improve AUC. Reverting changes.
Training on augumented user 3329 21/50 current_auc = 0.6129737609329446
User 3329 AUC after training: 0.608600583090379
User 3329 does not improve AUC. Reverting changes.
Training on augumented user 120152 22/50 current_auc = 0.6129737609329446
User 120152 AUC after training: 0.6122448979591837
User 120152 does not improve AUC. Reverting changes.
Training on augumented user 39312 23/50 current_auc = 0.6129737609329446
User 39312 AUC after training: 0.6100583090379009
User 39312 does not improve AUC. Reverting changes.
Training on augumented user 40061 24/50 current_auc = 0.6129737609329446
User 40061 AUC after training: 0.6115160349854226
User 40061 does not improve AUC. Reverting changes.
Training on augumented user 113773 25/50 current_auc = 0.6129737609329446
User 113773 AUC after training: 0.607871720116618
User 113773 does not improve AUC. Reverting changes.
Training on augumented user 12002 26/50 current_auc = 0.6129737609329446
User 12002 AUC after training: 0.6122448979591837
User 12002 does not improve AUC. Reverting changes.
Training on augumented user 81842 27/50 current_auc = 0.6129737609329446
User 81842 AUC after training: 0.6100583090379009
User 81842 does not improve AUC. Reverting changes.
Training on augumented user 17749 28/50 current_auc = 0.6129737609329446
User 17749 AUC after training: 0.6100583090379009
User 17749 does not improve AUC. Reverting changes.
Training on augumented user 100672 29/50 current_auc = 0.6129737609329446
User 100672 AUC after training: 0.6122448979591837
User 100672 does not improve AUC. Reverting changes.
Training on augumented user 14642 30/50 current_auc = 0.6129737609329446
User 14642 AUC after training: 0.6122448979591837
User 14642 does not improve AUC. Reverting changes.
Training on augumented user 105141 31/50 current_auc = 0.6129737609329446
User 105141 AUC after training: 0.6129737609329446
User 105141 does not improve AUC. Reverting changes.
Training on augumented user 66042 32/50 current_auc = 0.6129737609329446
User 66042 AUC after training: 0.6122448979591837
User 66042 does not improve AUC. Reverting changes.
Training on augumented user 137060 33/50 current_auc = 0.6129737609329446
User 137060 AUC after training: 0.60932944606414
User 137060 does not improve AUC. Reverting changes.
Training on augumented user 84130 34/50 current_auc = 0.6129737609329446
User 84130 AUC after training: 0.6115160349854227
User 84130 does not improve AUC. Reverting changes.
Training on augumented user 74359 35/50 current_auc = 0.6129737609329446
User 74359 AUC after training: 0.6115160349854227
User 74359 does not improve AUC. Reverting changes.
Training on augumented user 131042 36/50 current_auc = 0.6129737609329446
User 131042 AUC after training: 0.6093294460641399
User 131042 does not improve AUC. Reverting changes.
Training on augumented user 103270 37/50 current_auc = 0.6129737609329446
User 103270 AUC after training: 0.6122448979591837
User 103270 does not improve AUC. Reverting changes.
Training on augumented user 53827 38/50 current_auc = 0.6129737609329446
User 53827 AUC after training: 0.6107871720116618
User 53827 does not improve AUC. Reverting changes.
Training on augumented user 28441 39/50 current_auc = 0.6129737609329446
User 28441 AUC after training: 0.6115160349854227
User 28441 does not improve AUC. Reverting changes.
Training on augumented user 38697 40/50 current_auc = 0.6129737609329446
User 38697 AUC after training: 0.6107871720116618
User 38697 does not improve AUC. Reverting changes.
Training on augumented user 68934 41/50 current_auc = 0.6129737609329446
User 68934 AUC after training: 0.6115160349854227
User 68934 does not improve AUC. Reverting changes.
Training on augumented user 113963 42/50 current_auc = 0.6129737609329446
User 113963 AUC after training: 0.6129737609329446
User 113963 does not improve AUC. Reverting changes.
Training on augumented user 99142 43/50 current_auc = 0.6129737609329446
User 99142 AUC after training: 0.6115160349854227
User 99142 does not improve AUC. Reverting changes.
Training on augumented user 100332 44/50 current_auc = 0.6129737609329446
User 100332 AUC after training: 0.6100583090379009
User 100332 does not improve AUC. Reverting changes.
Training on augumented user 117231 45/50 current_auc = 0.6129737609329446
User 117231 AUC after training: 0.608600583090379
User 117231 does not improve AUC. Reverting changes.
Training on augumented user 84357 46/50 current_auc = 0.6129737609329446
User 84357 AUC after training: 0.6100583090379009
User 84357 does not improve AUC. Reverting changes.
Training on augumented user 101567 47/50 current_auc = 0.6129737609329446
User 101567 AUC after training: 0.6144314868804664
User 101567 improves AUC. Keeping the model.
Training on augumented user 29561 48/50 current_auc = 0.6144314868804664
User 29561 AUC after training: 0.6144314868804664
User 29561 does not improve AUC. Reverting changes.
Training on augumented user 95881 49/50 current_auc = 0.6144314868804664
User 95881 AUC after training: 0.6115160349854227
User 95881 does not improve AUC. Reverting changes.
[2024-12-02 18:15:16.899918] start test user 15418 67/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:17.385158] start test user 15418 67/568 recall augumented users by random, augumented_users = [21554, 104752, 37630, 73254, 28899, 52134, 88858, 124701, 4391, 61636, 106128, 74609, 132678, 114417, 51431, 3002, 80127, 30041, 120026, 73922, 13044, 54545, 11413, 17114, 87133, 39164, 131995, 123196, 74426, 105215, 108258, 27122, 68375, 67698, 10030, 47973, 51761, 125933, 28531, 510, 32238, 45775, 68321, 30558, 44395, 610, 72997, 110750, 66950, 8588]
[2024-12-02 18:15:17.402134] user = 15418 Cloud 67/568
[2024-12-02 18:15:17.416189] user = 15418 Local 67/568
[2024-12-02 18:15:17.460854] user = 15418 Local+ 67/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:20.624147] user = 15418 MPDA- 67/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5928853754940712
Training on augumented user 21554 0/50 current_auc = 0.5928853754940712
User 21554 AUC after training: 0.5942028985507247
User 21554 improves AUC. Keeping the model.
Training on augumented user 104752 1/50 current_auc = 0.5942028985507247
User 104752 AUC after training: 0.5942028985507247
User 104752 does not improve AUC. Reverting changes.
Training on augumented user 37630 2/50 current_auc = 0.5942028985507247
User 37630 AUC after training: 0.5942028985507247
User 37630 does not improve AUC. Reverting changes.
Training on augumented user 73254 3/50 current_auc = 0.5942028985507247
User 73254 AUC after training: 0.5942028985507247
User 73254 does not improve AUC. Reverting changes.
Training on augumented user 28899 4/50 current_auc = 0.5942028985507247
User 28899 AUC after training: 0.5942028985507247
User 28899 does not improve AUC. Reverting changes.
Training on augumented user 52134 5/50 current_auc = 0.5942028985507247
User 52134 AUC after training: 0.5928853754940712
User 52134 does not improve AUC. Reverting changes.
Training on augumented user 88858 6/50 current_auc = 0.5942028985507247
User 88858 AUC after training: 0.5968379446640316
User 88858 improves AUC. Keeping the model.
Training on augumented user 124701 7/50 current_auc = 0.5968379446640316
User 124701 AUC after training: 0.5928853754940712
User 124701 does not improve AUC. Reverting changes.
Training on augumented user 4391 8/50 current_auc = 0.5968379446640316
User 4391 AUC after training: 0.5968379446640316
User 4391 does not improve AUC. Reverting changes.
Training on augumented user 61636 9/50 current_auc = 0.5968379446640316
User 61636 AUC after training: 0.5968379446640316
User 61636 does not improve AUC. Reverting changes.
Training on augumented user 106128 10/50 current_auc = 0.5968379446640316
User 106128 AUC after training: 0.5968379446640316
User 106128 does not improve AUC. Reverting changes.
Training on augumented user 74609 11/50 current_auc = 0.5968379446640316
User 74609 AUC after training: 0.5928853754940712
User 74609 does not improve AUC. Reverting changes.
Training on augumented user 132678 12/50 current_auc = 0.5968379446640316
User 132678 AUC after training: 0.5955204216073782
User 132678 does not improve AUC. Reverting changes.
Training on augumented user 114417 13/50 current_auc = 0.5968379446640316
User 114417 AUC after training: 0.5955204216073782
User 114417 does not improve AUC. Reverting changes.
Training on augumented user 51431 14/50 current_auc = 0.5968379446640316
User 51431 AUC after training: 0.5942028985507247
User 51431 does not improve AUC. Reverting changes.
Training on augumented user 3002 15/50 current_auc = 0.5968379446640316
User 3002 AUC after training: 0.5942028985507247
User 3002 does not improve AUC. Reverting changes.
Training on augumented user 80127 16/50 current_auc = 0.5968379446640316
User 80127 AUC after training: 0.5955204216073782
User 80127 does not improve AUC. Reverting changes.
Training on augumented user 30041 17/50 current_auc = 0.5968379446640316
User 30041 AUC after training: 0.5968379446640316
User 30041 does not improve AUC. Reverting changes.
Training on augumented user 120026 18/50 current_auc = 0.5968379446640316
User 120026 AUC after training: 0.5955204216073782
User 120026 does not improve AUC. Reverting changes.
Training on augumented user 73922 19/50 current_auc = 0.5968379446640316
User 73922 AUC after training: 0.5928853754940712
User 73922 does not improve AUC. Reverting changes.
Training on augumented user 13044 20/50 current_auc = 0.5968379446640316
User 13044 AUC after training: 0.5942028985507247
User 13044 does not improve AUC. Reverting changes.
Training on augumented user 54545 21/50 current_auc = 0.5968379446640316
User 54545 AUC after training: 0.5955204216073782
User 54545 does not improve AUC. Reverting changes.
Training on augumented user 11413 22/50 current_auc = 0.5968379446640316
User 11413 AUC after training: 0.5942028985507247
User 11413 does not improve AUC. Reverting changes.
Training on augumented user 17114 23/50 current_auc = 0.5968379446640316
User 17114 AUC after training: 0.5942028985507247
User 17114 does not improve AUC. Reverting changes.
Training on augumented user 87133 24/50 current_auc = 0.5968379446640316
User 87133 AUC after training: 0.5942028985507247
User 87133 does not improve AUC. Reverting changes.
Training on augumented user 39164 25/50 current_auc = 0.5968379446640316
User 39164 AUC after training: 0.5955204216073782
User 39164 does not improve AUC. Reverting changes.
Training on augumented user 131995 26/50 current_auc = 0.5968379446640316
User 131995 AUC after training: 0.5968379446640316
User 131995 does not improve AUC. Reverting changes.
Training on augumented user 123196 27/50 current_auc = 0.5968379446640316
User 123196 AUC after training: 0.5955204216073782
User 123196 does not improve AUC. Reverting changes.
Training on augumented user 74426 28/50 current_auc = 0.5968379446640316
User 74426 AUC after training: 0.5942028985507247
User 74426 does not improve AUC. Reverting changes.
Training on augumented user 105215 29/50 current_auc = 0.5968379446640316
User 105215 AUC after training: 0.5928853754940712
User 105215 does not improve AUC. Reverting changes.
Training on augumented user 108258 30/50 current_auc = 0.5968379446640316
User 108258 AUC after training: 0.5942028985507247
User 108258 does not improve AUC. Reverting changes.
Training on augumented user 27122 31/50 current_auc = 0.5968379446640316
User 27122 AUC after training: 0.5955204216073782
User 27122 does not improve AUC. Reverting changes.
Training on augumented user 68375 32/50 current_auc = 0.5968379446640316
User 68375 AUC after training: 0.5955204216073782
User 68375 does not improve AUC. Reverting changes.
Training on augumented user 67698 33/50 current_auc = 0.5968379446640316
User 67698 AUC after training: 0.5928853754940712
User 67698 does not improve AUC. Reverting changes.
Training on augumented user 10030 34/50 current_auc = 0.5968379446640316
User 10030 AUC after training: 0.5942028985507247
User 10030 does not improve AUC. Reverting changes.
Training on augumented user 47973 35/50 current_auc = 0.5968379446640316
User 47973 AUC after training: 0.5981554677206851
User 47973 improves AUC. Keeping the model.
Training on augumented user 51761 36/50 current_auc = 0.5981554677206851
User 51761 AUC after training: 0.5981554677206851
User 51761 does not improve AUC. Reverting changes.
Training on augumented user 125933 37/50 current_auc = 0.5981554677206851
User 125933 AUC after training: 0.5981554677206851
User 125933 does not improve AUC. Reverting changes.
Training on augumented user 28531 38/50 current_auc = 0.5981554677206851
User 28531 AUC after training: 0.5942028985507247
User 28531 does not improve AUC. Reverting changes.
Training on augumented user 510 39/50 current_auc = 0.5981554677206851
User 510 AUC after training: 0.5968379446640316
User 510 does not improve AUC. Reverting changes.
Training on augumented user 32238 40/50 current_auc = 0.5981554677206851
User 32238 AUC after training: 0.5981554677206851
User 32238 does not improve AUC. Reverting changes.
Training on augumented user 45775 41/50 current_auc = 0.5981554677206851
User 45775 AUC after training: 0.5955204216073782
User 45775 does not improve AUC. Reverting changes.
Training on augumented user 68321 42/50 current_auc = 0.5981554677206851
User 68321 AUC after training: 0.5981554677206851
User 68321 does not improve AUC. Reverting changes.
Training on augumented user 30558 43/50 current_auc = 0.5981554677206851
User 30558 AUC after training: 0.5968379446640316
User 30558 does not improve AUC. Reverting changes.
Training on augumented user 44395 44/50 current_auc = 0.5981554677206851
User 44395 AUC after training: 0.5968379446640316
User 44395 does not improve AUC. Reverting changes.
Training on augumented user 610 45/50 current_auc = 0.5981554677206851
User 610 AUC after training: 0.5955204216073782
User 610 does not improve AUC. Reverting changes.
Training on augumented user 72997 46/50 current_auc = 0.5981554677206851
User 72997 AUC after training: 0.5981554677206851
User 72997 does not improve AUC. Reverting changes.
Training on augumented user 110750 47/50 current_auc = 0.5981554677206851
User 110750 AUC after training: 0.5968379446640316
User 110750 does not improve AUC. Reverting changes.
Training on augumented user 66950 48/50 current_auc = 0.5981554677206851
User 66950 AUC after training: 0.5981554677206851
User 66950 does not improve AUC. Reverting changes.
Training on augumented user 8588 49/50 current_auc = 0.5981554677206851
User 8588 AUC after training: 0.5981554677206851
User 8588 does not improve AUC. Reverting changes.
[2024-12-02 18:15:51.606305] start test user 15428 68/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:52.305137] start test user 15428 68/568 recall augumented users by random, augumented_users = [88105, 130801, 133898, 78948, 31579, 35029, 134540, 20657, 124041, 134572, 53297, 56250, 131860, 106189, 72794, 93247, 129621, 18033, 4689, 105587, 46119, 58174, 15170, 111431, 113149, 40328, 79605, 39640, 54864, 38582, 27264, 41394, 11328, 103925, 31320, 125036, 25641, 136583, 70636, 40675, 9949, 18336, 9569, 112525, 47981, 28155, 117788, 64479, 135446, 133249]
[2024-12-02 18:15:52.320897] user = 15428 Cloud 68/568
[2024-12-02 18:15:52.332075] user = 15428 Local 68/568
[2024-12-02 18:15:52.370111] user = 15428 Local+ 68/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:54.823227] user = 15428 MPDA- 68/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.710204081632653
Training on augumented user 88105 0/50 current_auc = 0.710204081632653
User 88105 AUC after training: 0.710204081632653
User 88105 does not improve AUC. Reverting changes.
Training on augumented user 130801 1/50 current_auc = 0.710204081632653
User 130801 AUC after training: 0.710204081632653
User 130801 does not improve AUC. Reverting changes.
Training on augumented user 133898 2/50 current_auc = 0.710204081632653
User 133898 AUC after training: 0.7061224489795918
User 133898 does not improve AUC. Reverting changes.
Training on augumented user 78948 3/50 current_auc = 0.710204081632653
User 78948 AUC after training: 0.7142857142857142
User 78948 improves AUC. Keeping the model.
Training on augumented user 31579 4/50 current_auc = 0.7142857142857142
User 31579 AUC after training: 0.7183673469387755
User 31579 improves AUC. Keeping the model.
Training on augumented user 35029 5/50 current_auc = 0.7183673469387755
User 35029 AUC after training: 0.7183673469387755
User 35029 does not improve AUC. Reverting changes.
Training on augumented user 134540 6/50 current_auc = 0.7183673469387755
User 134540 AUC after training: 0.7183673469387755
User 134540 does not improve AUC. Reverting changes.
Training on augumented user 20657 7/50 current_auc = 0.7183673469387755
User 20657 AUC after training: 0.710204081632653
User 20657 does not improve AUC. Reverting changes.
Training on augumented user 124041 8/50 current_auc = 0.7183673469387755
User 124041 AUC after training: 0.7183673469387755
User 124041 does not improve AUC. Reverting changes.
Training on augumented user 134572 9/50 current_auc = 0.7183673469387755
User 134572 AUC after training: 0.7061224489795919
User 134572 does not improve AUC. Reverting changes.
Training on augumented user 53297 10/50 current_auc = 0.7183673469387755
User 53297 AUC after training: 0.7183673469387755
User 53297 does not improve AUC. Reverting changes.
Training on augumented user 56250 11/50 current_auc = 0.7183673469387755
User 56250 AUC after training: 0.710204081632653
User 56250 does not improve AUC. Reverting changes.
Training on augumented user 131860 12/50 current_auc = 0.7183673469387755
User 131860 AUC after training: 0.7183673469387755
User 131860 does not improve AUC. Reverting changes.
Training on augumented user 106189 13/50 current_auc = 0.7183673469387755
User 106189 AUC after training: 0.710204081632653
User 106189 does not improve AUC. Reverting changes.
Training on augumented user 72794 14/50 current_auc = 0.7183673469387755
User 72794 AUC after training: 0.7183673469387755
User 72794 does not improve AUC. Reverting changes.
Training on augumented user 93247 15/50 current_auc = 0.7183673469387755
User 93247 AUC after training: 0.7142857142857142
User 93247 does not improve AUC. Reverting changes.
Training on augumented user 129621 16/50 current_auc = 0.7183673469387755
User 129621 AUC after training: 0.7142857142857142
User 129621 does not improve AUC. Reverting changes.
Training on augumented user 18033 17/50 current_auc = 0.7183673469387755
User 18033 AUC after training: 0.7183673469387755
User 18033 does not improve AUC. Reverting changes.
Training on augumented user 4689 18/50 current_auc = 0.7183673469387755
User 4689 AUC after training: 0.7183673469387755
User 4689 does not improve AUC. Reverting changes.
Training on augumented user 105587 19/50 current_auc = 0.7183673469387755
User 105587 AUC after training: 0.710204081632653
User 105587 does not improve AUC. Reverting changes.
Training on augumented user 46119 20/50 current_auc = 0.7183673469387755
User 46119 AUC after training: 0.7183673469387755
User 46119 does not improve AUC. Reverting changes.
Training on augumented user 58174 21/50 current_auc = 0.7183673469387755
User 58174 AUC after training: 0.7183673469387755
User 58174 does not improve AUC. Reverting changes.
Training on augumented user 15170 22/50 current_auc = 0.7183673469387755
User 15170 AUC after training: 0.7183673469387755
User 15170 does not improve AUC. Reverting changes.
Training on augumented user 111431 23/50 current_auc = 0.7183673469387755
User 111431 AUC after training: 0.7183673469387755
User 111431 does not improve AUC. Reverting changes.
Training on augumented user 113149 24/50 current_auc = 0.7183673469387755
User 113149 AUC after training: 0.7183673469387755
User 113149 does not improve AUC. Reverting changes.
Training on augumented user 40328 25/50 current_auc = 0.7183673469387755
User 40328 AUC after training: 0.7061224489795919
User 40328 does not improve AUC. Reverting changes.
Training on augumented user 79605 26/50 current_auc = 0.7183673469387755
User 79605 AUC after training: 0.7183673469387755
User 79605 does not improve AUC. Reverting changes.
Training on augumented user 39640 27/50 current_auc = 0.7183673469387755
User 39640 AUC after training: 0.7183673469387755
User 39640 does not improve AUC. Reverting changes.
Training on augumented user 54864 28/50 current_auc = 0.7183673469387755
User 54864 AUC after training: 0.7183673469387755
User 54864 does not improve AUC. Reverting changes.
Training on augumented user 38582 29/50 current_auc = 0.7183673469387755
User 38582 AUC after training: 0.7183673469387755
User 38582 does not improve AUC. Reverting changes.
Training on augumented user 27264 30/50 current_auc = 0.7183673469387755
User 27264 AUC after training: 0.710204081632653
User 27264 does not improve AUC. Reverting changes.
Training on augumented user 41394 31/50 current_auc = 0.7183673469387755
User 41394 AUC after training: 0.7183673469387755
User 41394 does not improve AUC. Reverting changes.
Training on augumented user 11328 32/50 current_auc = 0.7183673469387755
User 11328 AUC after training: 0.710204081632653
User 11328 does not improve AUC. Reverting changes.
Training on augumented user 103925 33/50 current_auc = 0.7183673469387755
User 103925 AUC after training: 0.7061224489795918
User 103925 does not improve AUC. Reverting changes.
Training on augumented user 31320 34/50 current_auc = 0.7183673469387755
User 31320 AUC after training: 0.7183673469387755
User 31320 does not improve AUC. Reverting changes.
Training on augumented user 125036 35/50 current_auc = 0.7183673469387755
User 125036 AUC after training: 0.7061224489795919
User 125036 does not improve AUC. Reverting changes.
Training on augumented user 25641 36/50 current_auc = 0.7183673469387755
User 25641 AUC after training: 0.7183673469387755
User 25641 does not improve AUC. Reverting changes.
Training on augumented user 136583 37/50 current_auc = 0.7183673469387755
User 136583 AUC after training: 0.7183673469387755
User 136583 does not improve AUC. Reverting changes.
Training on augumented user 70636 38/50 current_auc = 0.7183673469387755
User 70636 AUC after training: 0.7183673469387755
User 70636 does not improve AUC. Reverting changes.
Training on augumented user 40675 39/50 current_auc = 0.7183673469387755
User 40675 AUC after training: 0.7183673469387755
User 40675 does not improve AUC. Reverting changes.
Training on augumented user 9949 40/50 current_auc = 0.7183673469387755
User 9949 AUC after training: 0.7183673469387755
User 9949 does not improve AUC. Reverting changes.
Training on augumented user 18336 41/50 current_auc = 0.7183673469387755
User 18336 AUC after training: 0.7183673469387755
User 18336 does not improve AUC. Reverting changes.
Training on augumented user 9569 42/50 current_auc = 0.7183673469387755
User 9569 AUC after training: 0.7183673469387755
User 9569 does not improve AUC. Reverting changes.
Training on augumented user 112525 43/50 current_auc = 0.7183673469387755
User 112525 AUC after training: 0.7183673469387755
User 112525 does not improve AUC. Reverting changes.
Training on augumented user 47981 44/50 current_auc = 0.7183673469387755
User 47981 AUC after training: 0.7183673469387755
User 47981 does not improve AUC. Reverting changes.
Training on augumented user 28155 45/50 current_auc = 0.7183673469387755
User 28155 AUC after training: 0.7183673469387755
User 28155 does not improve AUC. Reverting changes.
Training on augumented user 117788 46/50 current_auc = 0.7183673469387755
User 117788 AUC after training: 0.7183673469387755
User 117788 does not improve AUC. Reverting changes.
Training on augumented user 64479 47/50 current_auc = 0.7183673469387755
User 64479 AUC after training: 0.7183673469387755
User 64479 does not improve AUC. Reverting changes.
Training on augumented user 135446 48/50 current_auc = 0.7183673469387755
User 135446 AUC after training: 0.7183673469387755
User 135446 does not improve AUC. Reverting changes.
Training on augumented user 133249 49/50 current_auc = 0.7183673469387755
User 133249 AUC after training: 0.7183673469387755
User 133249 does not improve AUC. Reverting changes.
[2024-12-02 18:16:24.126872] start test user 15439 69/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:24.591008] start test user 15439 69/568 recall augumented users by random, augumented_users = [128211, 109516, 124082, 83208, 19434, 23547, 35803, 38104, 21128, 119120, 30593, 106605, 112738, 119810, 73147, 111247, 99404, 50346, 32352, 74155, 27564, 68531, 18701, 4655, 122461, 68690, 35961, 94181, 40647, 68475, 87211, 77545, 118132, 41985, 79215, 131163, 78900, 159, 12279, 17653, 112803, 44929, 55129, 45002, 104076, 34243, 38149, 102690, 67063, 81799]
[2024-12-02 18:16:24.608936] user = 15439 Cloud 69/568
[2024-12-02 18:16:24.632252] user = 15439 Local 69/568
[2024-12-02 18:16:24.741778] user = 15439 Local+ 69/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:26.762403] user = 15439 MPDA- 69/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7202380952380953
Training on augumented user 128211 0/50 current_auc = 0.7202380952380953
User 128211 AUC after training: 0.7261904761904762
User 128211 improves AUC. Keeping the model.
Training on augumented user 109516 1/50 current_auc = 0.7261904761904762
User 109516 AUC after training: 0.7202380952380953
User 109516 does not improve AUC. Reverting changes.
Training on augumented user 124082 2/50 current_auc = 0.7261904761904762
User 124082 AUC after training: 0.7202380952380952
User 124082 does not improve AUC. Reverting changes.
Training on augumented user 83208 3/50 current_auc = 0.7261904761904762
User 83208 AUC after training: 0.7202380952380953
User 83208 does not improve AUC. Reverting changes.
Training on augumented user 19434 4/50 current_auc = 0.7261904761904762
User 19434 AUC after training: 0.7142857142857143
User 19434 does not improve AUC. Reverting changes.
Training on augumented user 23547 5/50 current_auc = 0.7261904761904762
User 23547 AUC after training: 0.7261904761904762
User 23547 does not improve AUC. Reverting changes.
Training on augumented user 35803 6/50 current_auc = 0.7261904761904762
User 35803 AUC after training: 0.7202380952380953
User 35803 does not improve AUC. Reverting changes.
Training on augumented user 38104 7/50 current_auc = 0.7261904761904762
User 38104 AUC after training: 0.7202380952380952
User 38104 does not improve AUC. Reverting changes.
Training on augumented user 21128 8/50 current_auc = 0.7261904761904762
User 21128 AUC after training: 0.7202380952380953
User 21128 does not improve AUC. Reverting changes.
Training on augumented user 119120 9/50 current_auc = 0.7261904761904762
User 119120 AUC after training: 0.7261904761904762
User 119120 does not improve AUC. Reverting changes.
Training on augumented user 30593 10/50 current_auc = 0.7261904761904762
User 30593 AUC after training: 0.7261904761904762
User 30593 does not improve AUC. Reverting changes.
Training on augumented user 106605 11/50 current_auc = 0.7261904761904762
User 106605 AUC after training: 0.7142857142857143
User 106605 does not improve AUC. Reverting changes.
Training on augumented user 112738 12/50 current_auc = 0.7261904761904762
User 112738 AUC after training: 0.7202380952380953
User 112738 does not improve AUC. Reverting changes.
Training on augumented user 119810 13/50 current_auc = 0.7261904761904762
User 119810 AUC after training: 0.7202380952380953
User 119810 does not improve AUC. Reverting changes.
Training on augumented user 73147 14/50 current_auc = 0.7261904761904762
User 73147 AUC after training: 0.7261904761904762
User 73147 does not improve AUC. Reverting changes.
Training on augumented user 111247 15/50 current_auc = 0.7261904761904762
User 111247 AUC after training: 0.7261904761904762
User 111247 does not improve AUC. Reverting changes.
Training on augumented user 99404 16/50 current_auc = 0.7261904761904762
User 99404 AUC after training: 0.7202380952380952
User 99404 does not improve AUC. Reverting changes.
Training on augumented user 50346 17/50 current_auc = 0.7261904761904762
User 50346 AUC after training: 0.7202380952380953
User 50346 does not improve AUC. Reverting changes.
Training on augumented user 32352 18/50 current_auc = 0.7261904761904762
User 32352 AUC after training: 0.7261904761904762
User 32352 does not improve AUC. Reverting changes.
Training on augumented user 74155 19/50 current_auc = 0.7261904761904762
User 74155 AUC after training: 0.7202380952380953
User 74155 does not improve AUC. Reverting changes.
Training on augumented user 27564 20/50 current_auc = 0.7261904761904762
User 27564 AUC after training: 0.7261904761904762
User 27564 does not improve AUC. Reverting changes.
Training on augumented user 68531 21/50 current_auc = 0.7261904761904762
User 68531 AUC after training: 0.7202380952380953
User 68531 does not improve AUC. Reverting changes.
Training on augumented user 18701 22/50 current_auc = 0.7261904761904762
User 18701 AUC after training: 0.7261904761904762
User 18701 does not improve AUC. Reverting changes.
Training on augumented user 4655 23/50 current_auc = 0.7261904761904762
User 4655 AUC after training: 0.7261904761904762
User 4655 does not improve AUC. Reverting changes.
Training on augumented user 122461 24/50 current_auc = 0.7261904761904762
User 122461 AUC after training: 0.7261904761904762
User 122461 does not improve AUC. Reverting changes.
Training on augumented user 68690 25/50 current_auc = 0.7261904761904762
User 68690 AUC after training: 0.7202380952380953
User 68690 does not improve AUC. Reverting changes.
Training on augumented user 35961 26/50 current_auc = 0.7261904761904762
User 35961 AUC after training: 0.7202380952380953
User 35961 does not improve AUC. Reverting changes.
Training on augumented user 94181 27/50 current_auc = 0.7261904761904762
User 94181 AUC after training: 0.7202380952380953
User 94181 does not improve AUC. Reverting changes.
Training on augumented user 40647 28/50 current_auc = 0.7261904761904762
User 40647 AUC after training: 0.7142857142857143
User 40647 does not improve AUC. Reverting changes.
Training on augumented user 68475 29/50 current_auc = 0.7261904761904762
User 68475 AUC after training: 0.7202380952380953
User 68475 does not improve AUC. Reverting changes.
Training on augumented user 87211 30/50 current_auc = 0.7261904761904762
User 87211 AUC after training: 0.7261904761904762
User 87211 does not improve AUC. Reverting changes.
Training on augumented user 77545 31/50 current_auc = 0.7261904761904762
User 77545 AUC after training: 0.7202380952380953
User 77545 does not improve AUC. Reverting changes.
Training on augumented user 118132 32/50 current_auc = 0.7261904761904762
User 118132 AUC after training: 0.7142857142857143
User 118132 does not improve AUC. Reverting changes.
Training on augumented user 41985 33/50 current_auc = 0.7261904761904762
User 41985 AUC after training: 0.7202380952380953
User 41985 does not improve AUC. Reverting changes.
Training on augumented user 79215 34/50 current_auc = 0.7261904761904762
User 79215 AUC after training: 0.7202380952380953
User 79215 does not improve AUC. Reverting changes.
Training on augumented user 131163 35/50 current_auc = 0.7261904761904762
User 131163 AUC after training: 0.7261904761904762
User 131163 does not improve AUC. Reverting changes.
Training on augumented user 78900 36/50 current_auc = 0.7261904761904762
User 78900 AUC after training: 0.7261904761904762
User 78900 does not improve AUC. Reverting changes.
Training on augumented user 159 37/50 current_auc = 0.7261904761904762
User 159 AUC after training: 0.7202380952380953
User 159 does not improve AUC. Reverting changes.
Training on augumented user 12279 38/50 current_auc = 0.7261904761904762
User 12279 AUC after training: 0.7202380952380953
User 12279 does not improve AUC. Reverting changes.
Training on augumented user 17653 39/50 current_auc = 0.7261904761904762
User 17653 AUC after training: 0.7202380952380953
User 17653 does not improve AUC. Reverting changes.
Training on augumented user 112803 40/50 current_auc = 0.7261904761904762
User 112803 AUC after training: 0.7202380952380953
User 112803 does not improve AUC. Reverting changes.
Training on augumented user 44929 41/50 current_auc = 0.7261904761904762
User 44929 AUC after training: 0.7261904761904762
User 44929 does not improve AUC. Reverting changes.
Training on augumented user 55129 42/50 current_auc = 0.7261904761904762
User 55129 AUC after training: 0.7202380952380953
User 55129 does not improve AUC. Reverting changes.
Training on augumented user 45002 43/50 current_auc = 0.7261904761904762
User 45002 AUC after training: 0.7261904761904762
User 45002 does not improve AUC. Reverting changes.
Training on augumented user 104076 44/50 current_auc = 0.7261904761904762
User 104076 AUC after training: 0.7202380952380953
User 104076 does not improve AUC. Reverting changes.
Training on augumented user 34243 45/50 current_auc = 0.7261904761904762
User 34243 AUC after training: 0.7202380952380953
User 34243 does not improve AUC. Reverting changes.
Training on augumented user 38149 46/50 current_auc = 0.7261904761904762
User 38149 AUC after training: 0.7202380952380953
User 38149 does not improve AUC. Reverting changes.
Training on augumented user 102690 47/50 current_auc = 0.7261904761904762
User 102690 AUC after training: 0.7261904761904762
User 102690 does not improve AUC. Reverting changes.
Training on augumented user 67063 48/50 current_auc = 0.7261904761904762
User 67063 AUC after training: 0.7202380952380952
User 67063 does not improve AUC. Reverting changes.
Training on augumented user 81799 49/50 current_auc = 0.7261904761904762
User 81799 AUC after training: 0.7261904761904762
User 81799 does not improve AUC. Reverting changes.
[2024-12-02 18:16:56.167391] start test user 15440 70/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:56.913854] start test user 15440 70/568 recall augumented users by random, augumented_users = [71745, 5594, 8238, 67972, 17853, 98440, 90701, 7836, 49635, 77410, 55670, 73750, 30181, 69268, 88609, 84112, 3630, 130965, 37690, 8907, 43482, 65930, 51623, 54229, 58280, 117193, 92986, 55418, 133062, 70767, 87502, 120692, 29754, 41888, 82632, 57768, 81495, 46881, 70655, 65194, 124519, 108900, 94774, 68672, 102202, 13865, 43761, 10099, 112351, 57736]
[2024-12-02 18:16:56.929411] user = 15440 Cloud 70/568
[2024-12-02 18:16:56.944557] user = 15440 Local 70/568
[2024-12-02 18:16:56.991586] user = 15440 Local+ 70/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:59.064024] user = 15440 MPDA- 70/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7387267904509284
Training on augumented user 71745 0/50 current_auc = 0.7387267904509284
User 71745 AUC after training: 0.7413793103448276
User 71745 improves AUC. Keeping the model.
Training on augumented user 5594 1/50 current_auc = 0.7413793103448276
User 5594 AUC after training: 0.7380636604774535
User 5594 does not improve AUC. Reverting changes.
Training on augumented user 8238 2/50 current_auc = 0.7413793103448276
User 8238 AUC after training: 0.7407161803713528
User 8238 does not improve AUC. Reverting changes.
Training on augumented user 67972 3/50 current_auc = 0.7413793103448276
User 67972 AUC after training: 0.7407161803713528
User 67972 does not improve AUC. Reverting changes.
Training on augumented user 17853 4/50 current_auc = 0.7413793103448276
User 17853 AUC after training: 0.7400530503978779
User 17853 does not improve AUC. Reverting changes.
Training on augumented user 98440 5/50 current_auc = 0.7413793103448276
User 98440 AUC after training: 0.7427055702917772
User 98440 improves AUC. Keeping the model.
Training on augumented user 90701 6/50 current_auc = 0.7427055702917772
User 90701 AUC after training: 0.7440318302387268
User 90701 improves AUC. Keeping the model.
Training on augumented user 7836 7/50 current_auc = 0.7440318302387268
User 7836 AUC after training: 0.7347480106100795
User 7836 does not improve AUC. Reverting changes.
Training on augumented user 49635 8/50 current_auc = 0.7440318302387268
User 49635 AUC after training: 0.7367374005305041
User 49635 does not improve AUC. Reverting changes.
Training on augumented user 77410 9/50 current_auc = 0.7440318302387268
User 77410 AUC after training: 0.7413793103448276
User 77410 does not improve AUC. Reverting changes.
Training on augumented user 55670 10/50 current_auc = 0.7440318302387268
User 55670 AUC after training: 0.7413793103448276
User 55670 does not improve AUC. Reverting changes.
Training on augumented user 73750 11/50 current_auc = 0.7440318302387268
User 73750 AUC after training: 0.7393899204244032
User 73750 does not improve AUC. Reverting changes.
Training on augumented user 30181 12/50 current_auc = 0.7440318302387268
User 30181 AUC after training: 0.7440318302387268
User 30181 does not improve AUC. Reverting changes.
Training on augumented user 69268 13/50 current_auc = 0.7440318302387268
User 69268 AUC after training: 0.7387267904509284
User 69268 does not improve AUC. Reverting changes.
Training on augumented user 88609 14/50 current_auc = 0.7440318302387268
User 88609 AUC after training: 0.7440318302387268
User 88609 does not improve AUC. Reverting changes.
Training on augumented user 84112 15/50 current_auc = 0.7440318302387268
User 84112 AUC after training: 0.7387267904509285
User 84112 does not improve AUC. Reverting changes.
Training on augumented user 3630 16/50 current_auc = 0.7440318302387268
User 3630 AUC after training: 0.7374005305039788
User 3630 does not improve AUC. Reverting changes.
Training on augumented user 130965 17/50 current_auc = 0.7440318302387268
User 130965 AUC after training: 0.7407161803713528
User 130965 does not improve AUC. Reverting changes.
Training on augumented user 37690 18/50 current_auc = 0.7440318302387268
User 37690 AUC after training: 0.736737400530504
User 37690 does not improve AUC. Reverting changes.
Training on augumented user 8907 19/50 current_auc = 0.7440318302387268
User 8907 AUC after training: 0.7440318302387268
User 8907 does not improve AUC. Reverting changes.
Training on augumented user 43482 20/50 current_auc = 0.7440318302387268
User 43482 AUC after training: 0.7427055702917772
User 43482 does not improve AUC. Reverting changes.
Training on augumented user 65930 21/50 current_auc = 0.7440318302387268
User 65930 AUC after training: 0.7413793103448276
User 65930 does not improve AUC. Reverting changes.
Training on augumented user 51623 22/50 current_auc = 0.7440318302387268
User 51623 AUC after training: 0.7374005305039788
User 51623 does not improve AUC. Reverting changes.
Training on augumented user 54229 23/50 current_auc = 0.7440318302387268
User 54229 AUC after training: 0.7413793103448276
User 54229 does not improve AUC. Reverting changes.
Training on augumented user 58280 24/50 current_auc = 0.7440318302387268
User 58280 AUC after training: 0.7440318302387268
User 58280 does not improve AUC. Reverting changes.
Training on augumented user 117193 25/50 current_auc = 0.7440318302387268
User 117193 AUC after training: 0.7354111405835544
User 117193 does not improve AUC. Reverting changes.
Training on augumented user 92986 26/50 current_auc = 0.7440318302387268
User 92986 AUC after training: 0.7400530503978779
User 92986 does not improve AUC. Reverting changes.
Training on augumented user 55418 27/50 current_auc = 0.7440318302387268
User 55418 AUC after training: 0.743368700265252
User 55418 does not improve AUC. Reverting changes.
Training on augumented user 133062 28/50 current_auc = 0.7440318302387268
User 133062 AUC after training: 0.7393899204244032
User 133062 does not improve AUC. Reverting changes.
Training on augumented user 70767 29/50 current_auc = 0.7440318302387268
User 70767 AUC after training: 0.7393899204244032
User 70767 does not improve AUC. Reverting changes.
Training on augumented user 87502 30/50 current_auc = 0.7440318302387268
User 87502 AUC after training: 0.7360742705570291
User 87502 does not improve AUC. Reverting changes.
Training on augumented user 120692 31/50 current_auc = 0.7440318302387268
User 120692 AUC after training: 0.7427055702917772
User 120692 does not improve AUC. Reverting changes.
Training on augumented user 29754 32/50 current_auc = 0.7440318302387268
User 29754 AUC after training: 0.7446949602122016
User 29754 improves AUC. Keeping the model.
Training on augumented user 41888 33/50 current_auc = 0.7446949602122016
User 41888 AUC after training: 0.746684350132626
User 41888 improves AUC. Keeping the model.
Training on augumented user 82632 34/50 current_auc = 0.746684350132626
User 82632 AUC after training: 0.7453580901856764
User 82632 does not improve AUC. Reverting changes.
Training on augumented user 57768 35/50 current_auc = 0.746684350132626
User 57768 AUC after training: 0.746684350132626
User 57768 does not improve AUC. Reverting changes.
Training on augumented user 81495 36/50 current_auc = 0.746684350132626
User 81495 AUC after training: 0.7453580901856764
User 81495 does not improve AUC. Reverting changes.
Training on augumented user 46881 37/50 current_auc = 0.746684350132626
User 46881 AUC after training: 0.7453580901856764
User 46881 does not improve AUC. Reverting changes.
Training on augumented user 70655 38/50 current_auc = 0.746684350132626
User 70655 AUC after training: 0.7427055702917772
User 70655 does not improve AUC. Reverting changes.
Training on augumented user 65194 39/50 current_auc = 0.746684350132626
User 65194 AUC after training: 0.746684350132626
User 65194 does not improve AUC. Reverting changes.
Training on augumented user 124519 40/50 current_auc = 0.746684350132626
User 124519 AUC after training: 0.7453580901856764
User 124519 does not improve AUC. Reverting changes.
Training on augumented user 108900 41/50 current_auc = 0.746684350132626
User 108900 AUC after training: 0.7446949602122016
User 108900 does not improve AUC. Reverting changes.
Training on augumented user 94774 42/50 current_auc = 0.746684350132626
User 94774 AUC after training: 0.7453580901856764
User 94774 does not improve AUC. Reverting changes.
Training on augumented user 68672 43/50 current_auc = 0.746684350132626
User 68672 AUC after training: 0.7440318302387268
User 68672 does not improve AUC. Reverting changes.
Training on augumented user 102202 44/50 current_auc = 0.746684350132626
User 102202 AUC after training: 0.746684350132626
User 102202 does not improve AUC. Reverting changes.
Training on augumented user 13865 45/50 current_auc = 0.746684350132626
User 13865 AUC after training: 0.743368700265252
User 13865 does not improve AUC. Reverting changes.
Training on augumented user 43761 46/50 current_auc = 0.746684350132626
User 43761 AUC after training: 0.7440318302387269
User 43761 does not improve AUC. Reverting changes.
Training on augumented user 10099 47/50 current_auc = 0.746684350132626
User 10099 AUC after training: 0.7440318302387268
User 10099 does not improve AUC. Reverting changes.
Training on augumented user 112351 48/50 current_auc = 0.746684350132626
User 112351 AUC after training: 0.73342175066313
User 112351 does not improve AUC. Reverting changes.
Training on augumented user 57736 49/50 current_auc = 0.746684350132626
User 57736 AUC after training: 0.7420424403183025
User 57736 does not improve AUC. Reverting changes.
[2024-12-02 18:17:30.788935] start test user 15452 71/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:31.348927] start test user 15452 71/568 recall augumented users by random, augumented_users = [47156, 127193, 65666, 73641, 41955, 68357, 14058, 93020, 132168, 113689, 9515, 671, 102114, 82305, 55684, 51960, 43804, 35090, 8725, 38746, 36230, 99114, 71794, 43650, 131558, 107025, 66111, 134811, 69276, 110954, 132912, 130347, 19793, 110563, 7877, 107501, 79122, 80684, 99757, 23189, 21963, 54371, 74271, 110727, 33795, 45297, 28457, 26143, 111016, 8766]
[2024-12-02 18:17:31.364422] user = 15452 Cloud 71/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:17:31.397228] user = 15452 Local 71/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:17:31.509372] user = 15452 Local+ 71/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:17:33.732022] user = 15452 MPDA- 71/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 47156 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47156 AUC after training: 0.5
User 47156 does not improve AUC. Reverting changes.
Training on augumented user 127193 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127193 AUC after training: 0.5
User 127193 does not improve AUC. Reverting changes.
Training on augumented user 65666 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65666 AUC after training: 0.5
User 65666 does not improve AUC. Reverting changes.
Training on augumented user 73641 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73641 AUC after training: 0.5
User 73641 does not improve AUC. Reverting changes.
Training on augumented user 41955 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41955 AUC after training: 0.5
User 41955 does not improve AUC. Reverting changes.
Training on augumented user 68357 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68357 AUC after training: 0.5
User 68357 does not improve AUC. Reverting changes.
Training on augumented user 14058 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14058 AUC after training: 0.5
User 14058 does not improve AUC. Reverting changes.
Training on augumented user 93020 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93020 AUC after training: 0.5
User 93020 does not improve AUC. Reverting changes.
Training on augumented user 132168 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132168 AUC after training: 0.5
User 132168 does not improve AUC. Reverting changes.
Training on augumented user 113689 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113689 AUC after training: 0.5
User 113689 does not improve AUC. Reverting changes.
Training on augumented user 9515 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9515 AUC after training: 0.5
User 9515 does not improve AUC. Reverting changes.
Training on augumented user 671 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 671 AUC after training: 0.5
User 671 does not improve AUC. Reverting changes.
Training on augumented user 102114 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102114 AUC after training: 0.5
User 102114 does not improve AUC. Reverting changes.
Training on augumented user 82305 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82305 AUC after training: 0.5
User 82305 does not improve AUC. Reverting changes.
Training on augumented user 55684 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55684 AUC after training: 0.5
User 55684 does not improve AUC. Reverting changes.
Training on augumented user 51960 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51960 AUC after training: 0.5
User 51960 does not improve AUC. Reverting changes.
Training on augumented user 43804 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43804 AUC after training: 0.5
User 43804 does not improve AUC. Reverting changes.
Training on augumented user 35090 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35090 AUC after training: 0.5
User 35090 does not improve AUC. Reverting changes.
Training on augumented user 8725 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8725 AUC after training: 0.5
User 8725 does not improve AUC. Reverting changes.
Training on augumented user 38746 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38746 AUC after training: 0.5
User 38746 does not improve AUC. Reverting changes.
Training on augumented user 36230 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36230 AUC after training: 0.5
User 36230 does not improve AUC. Reverting changes.
Training on augumented user 99114 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99114 AUC after training: 0.5
User 99114 does not improve AUC. Reverting changes.
Training on augumented user 71794 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71794 AUC after training: 0.5
User 71794 does not improve AUC. Reverting changes.
Training on augumented user 43650 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43650 AUC after training: 0.5
User 43650 does not improve AUC. Reverting changes.
Training on augumented user 131558 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131558 AUC after training: 0.5
User 131558 does not improve AUC. Reverting changes.
Training on augumented user 107025 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107025 AUC after training: 0.5
User 107025 does not improve AUC. Reverting changes.
Training on augumented user 66111 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66111 AUC after training: 0.5
User 66111 does not improve AUC. Reverting changes.
Training on augumented user 134811 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134811 AUC after training: 0.5
User 134811 does not improve AUC. Reverting changes.
Training on augumented user 69276 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69276 AUC after training: 0.5
User 69276 does not improve AUC. Reverting changes.
Training on augumented user 110954 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110954 AUC after training: 0.5
User 110954 does not improve AUC. Reverting changes.
Training on augumented user 132912 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132912 AUC after training: 0.5
User 132912 does not improve AUC. Reverting changes.
Training on augumented user 130347 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130347 AUC after training: 0.5
User 130347 does not improve AUC. Reverting changes.
Training on augumented user 19793 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19793 AUC after training: 0.5
User 19793 does not improve AUC. Reverting changes.
Training on augumented user 110563 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110563 AUC after training: 0.5
User 110563 does not improve AUC. Reverting changes.
Training on augumented user 7877 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7877 AUC after training: 0.5
User 7877 does not improve AUC. Reverting changes.
Training on augumented user 107501 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107501 AUC after training: 0.5
User 107501 does not improve AUC. Reverting changes.
Training on augumented user 79122 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79122 AUC after training: 0.5
User 79122 does not improve AUC. Reverting changes.
Training on augumented user 80684 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80684 AUC after training: 0.5
User 80684 does not improve AUC. Reverting changes.
Training on augumented user 99757 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99757 AUC after training: 0.5
User 99757 does not improve AUC. Reverting changes.
Training on augumented user 23189 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23189 AUC after training: 0.5
User 23189 does not improve AUC. Reverting changes.
Training on augumented user 21963 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21963 AUC after training: 0.5
User 21963 does not improve AUC. Reverting changes.
Training on augumented user 54371 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54371 AUC after training: 0.5
User 54371 does not improve AUC. Reverting changes.
Training on augumented user 74271 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74271 AUC after training: 0.5
User 74271 does not improve AUC. Reverting changes.
Training on augumented user 110727 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110727 AUC after training: 0.5
User 110727 does not improve AUC. Reverting changes.
Training on augumented user 33795 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33795 AUC after training: 0.5
User 33795 does not improve AUC. Reverting changes.
Training on augumented user 45297 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45297 AUC after training: 0.5
User 45297 does not improve AUC. Reverting changes.
Training on augumented user 28457 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28457 AUC after training: 0.5
User 28457 does not improve AUC. Reverting changes.
Training on augumented user 26143 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26143 AUC after training: 0.5
User 26143 does not improve AUC. Reverting changes.
Training on augumented user 111016 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111016 AUC after training: 0.5
User 111016 does not improve AUC. Reverting changes.
Training on augumented user 8766 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8766 AUC after training: 0.5
User 8766 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:17:57.080939] start test user 15486 72/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:57.499978] start test user 15486 72/568 recall augumented users by random, augumented_users = [126747, 103662, 102465, 5795, 110308, 32986, 80224, 33105, 79461, 86057, 127763, 87541, 57234, 92605, 37079, 8053, 55952, 119346, 104748, 45437, 74466, 79154, 25883, 25802, 71006, 38142, 112858, 33995, 17545, 89126, 76405, 90788, 3077, 53911, 106056, 35001, 124512, 112654, 118833, 78800, 66020, 77390, 8272, 106965, 3408, 40579, 6009, 94028, 122071, 93650]
[2024-12-02 18:17:57.518163] user = 15486 Cloud 72/568
[2024-12-02 18:17:57.588126] user = 15486 Local 72/568
[2024-12-02 18:17:58.131664] user = 15486 Local+ 72/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:00.292810] user = 15486 MPDA- 72/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5893383038210626
Training on augumented user 126747 0/50 current_auc = 0.5893383038210626
User 126747 AUC after training: 0.5896738117427773
User 126747 improves AUC. Keeping the model.
Training on augumented user 103662 1/50 current_auc = 0.5896738117427773
User 103662 AUC after training: 0.5899347623485556
User 103662 improves AUC. Keeping the model.
Training on augumented user 102465 2/50 current_auc = 0.5899347623485556
User 102465 AUC after training: 0.5903821062441752
User 102465 improves AUC. Keeping the model.
Training on augumented user 5795 3/50 current_auc = 0.5903821062441752
User 5795 AUC after training: 0.5899347623485555
User 5795 does not improve AUC. Reverting changes.
Training on augumented user 110308 4/50 current_auc = 0.5903821062441752
User 110308 AUC after training: 0.5900838769804287
User 110308 does not improve AUC. Reverting changes.
Training on augumented user 32986 5/50 current_auc = 0.5903821062441752
User 32986 AUC after training: 0.5895619757688723
User 32986 does not improve AUC. Reverting changes.
Training on augumented user 80224 6/50 current_auc = 0.5903821062441752
User 80224 AUC after training: 0.5901211556383971
User 80224 does not improve AUC. Reverting changes.
Training on augumented user 33105 7/50 current_auc = 0.5903821062441752
User 33105 AUC after training: 0.5901957129543337
User 33105 does not improve AUC. Reverting changes.
Training on augumented user 79461 8/50 current_auc = 0.5903821062441752
User 79461 AUC after training: 0.5898602050326188
User 79461 does not improve AUC. Reverting changes.
Training on augumented user 86057 9/50 current_auc = 0.5903821062441752
User 86057 AUC after training: 0.5909040074557316
User 86057 improves AUC. Keeping the model.
Training on augumented user 127763 10/50 current_auc = 0.5909040074557316
User 127763 AUC after training: 0.5908667287977633
User 127763 does not improve AUC. Reverting changes.
Training on augumented user 87541 11/50 current_auc = 0.5909040074557316
User 87541 AUC after training: 0.5906803355079218
User 87541 does not improve AUC. Reverting changes.
Training on augumented user 57234 12/50 current_auc = 0.5909040074557316
User 57234 AUC after training: 0.5911276794035415
User 57234 improves AUC. Keeping the model.
Training on augumented user 92605 13/50 current_auc = 0.5911276794035415
User 92605 AUC after training: 0.590232991612302
User 92605 does not improve AUC. Reverting changes.
Training on augumented user 37079 14/50 current_auc = 0.5911276794035415
User 37079 AUC after training: 0.590605778191985
User 37079 does not improve AUC. Reverting changes.
Training on augumented user 8053 15/50 current_auc = 0.5911276794035415
User 8053 AUC after training: 0.5911649580615098
User 8053 improves AUC. Keeping the model.
Training on augumented user 55952 16/50 current_auc = 0.5911649580615098
User 55952 AUC after training: 0.5912767940354148
User 55952 improves AUC. Keeping the model.
Training on augumented user 119346 17/50 current_auc = 0.5912767940354148
User 119346 AUC after training: 0.5913140726933831
User 119346 improves AUC. Keeping the model.
Training on augumented user 104748 18/50 current_auc = 0.5913140726933831
User 104748 AUC after training: 0.5910531220876049
User 104748 does not improve AUC. Reverting changes.
Training on augumented user 45437 19/50 current_auc = 0.5913140726933831
User 45437 AUC after training: 0.5911276794035415
User 45437 does not improve AUC. Reverting changes.
Training on augumented user 74466 20/50 current_auc = 0.5913140726933831
User 74466 AUC after training: 0.5912395153774465
User 74466 does not improve AUC. Reverting changes.
Training on augumented user 79154 21/50 current_auc = 0.5913140726933831
User 79154 AUC after training: 0.5908294501397949
User 79154 does not improve AUC. Reverting changes.
Training on augumented user 25883 22/50 current_auc = 0.5913140726933831
User 25883 AUC after training: 0.5907921714818266
User 25883 does not improve AUC. Reverting changes.
Training on augumented user 25802 23/50 current_auc = 0.5913140726933831
User 25802 AUC after training: 0.5915750232991612
User 25802 improves AUC. Keeping the model.
Training on augumented user 71006 24/50 current_auc = 0.5915750232991612
User 71006 AUC after training: 0.5918732525629077
User 71006 improves AUC. Keeping the model.
Training on augumented user 38142 25/50 current_auc = 0.5918732525629077
User 38142 AUC after training: 0.5913886300093197
User 38142 does not improve AUC. Reverting changes.
Training on augumented user 112858 26/50 current_auc = 0.5918732525629077
User 112858 AUC after training: 0.5922087604846226
User 112858 improves AUC. Keeping the model.
Training on augumented user 33995 27/50 current_auc = 0.5922087604846226
User 33995 AUC after training: 0.5915004659832246
User 33995 does not improve AUC. Reverting changes.
Training on augumented user 17545 28/50 current_auc = 0.5922087604846226
User 17545 AUC after training: 0.5916123019571297
User 17545 does not improve AUC. Reverting changes.
Training on augumented user 89126 29/50 current_auc = 0.5922087604846226
User 89126 AUC after training: 0.5922833178005592
User 89126 improves AUC. Keeping the model.
Training on augumented user 76405 30/50 current_auc = 0.5922833178005592
User 76405 AUC after training: 0.5919850885368128
User 76405 does not improve AUC. Reverting changes.
Training on augumented user 90788 31/50 current_auc = 0.5922833178005592
User 90788 AUC after training: 0.5928424976700839
User 90788 improves AUC. Keeping the model.
Training on augumented user 3077 32/50 current_auc = 0.5928424976700839
User 3077 AUC after training: 0.5929916123019572
User 3077 improves AUC. Keeping the model.
Training on augumented user 53911 33/50 current_auc = 0.5929916123019572
User 53911 AUC after training: 0.5925069897483691
User 53911 does not improve AUC. Reverting changes.
Training on augumented user 106056 34/50 current_auc = 0.5929916123019572
User 106056 AUC after training: 0.5928052190121156
User 106056 does not improve AUC. Reverting changes.
Training on augumented user 35001 35/50 current_auc = 0.5929916123019572
User 35001 AUC after training: 0.5929916123019571
User 35001 does not improve AUC. Reverting changes.
Training on augumented user 124512 36/50 current_auc = 0.5929916123019572
User 124512 AUC after training: 0.5916868592730663
User 124512 does not improve AUC. Reverting changes.
Training on augumented user 112654 37/50 current_auc = 0.5929916123019572
User 112654 AUC after training: 0.5928052190121156
User 112654 does not improve AUC. Reverting changes.
Training on augumented user 118833 38/50 current_auc = 0.5929916123019572
User 118833 AUC after training: 0.5928052190121156
User 118833 does not improve AUC. Reverting changes.
Training on augumented user 78800 39/50 current_auc = 0.5929916123019572
User 78800 AUC after training: 0.5928424976700839
User 78800 does not improve AUC. Reverting changes.
Training on augumented user 66020 40/50 current_auc = 0.5929916123019572
User 66020 AUC after training: 0.592730661696179
User 66020 does not improve AUC. Reverting changes.
Training on augumented user 77390 41/50 current_auc = 0.5929916123019572
User 77390 AUC after training: 0.5924697110904007
User 77390 does not improve AUC. Reverting changes.
Training on augumented user 8272 42/50 current_auc = 0.5929916123019572
User 8272 AUC after training: 0.5925815470643058
User 8272 does not improve AUC. Reverting changes.
Training on augumented user 106965 43/50 current_auc = 0.5929916123019572
User 106965 AUC after training: 0.5930661696178937
User 106965 improves AUC. Keeping the model.
Training on augumented user 3408 44/50 current_auc = 0.5930661696178937
User 3408 AUC after training: 0.5926561043802423
User 3408 does not improve AUC. Reverting changes.
Training on augumented user 40579 45/50 current_auc = 0.5930661696178937
User 40579 AUC after training: 0.5930288909599254
User 40579 does not improve AUC. Reverting changes.
Training on augumented user 6009 46/50 current_auc = 0.5930661696178937
User 6009 AUC after training: 0.593103448275862
User 6009 improves AUC. Keeping the model.
Training on augumented user 94028 47/50 current_auc = 0.593103448275862
User 94028 AUC after training: 0.5925442684063373
User 94028 does not improve AUC. Reverting changes.
Training on augumented user 122071 48/50 current_auc = 0.593103448275862
User 122071 AUC after training: 0.5934016775396086
User 122071 improves AUC. Keeping the model.
Training on augumented user 93650 49/50 current_auc = 0.5934016775396086
User 93650 AUC after training: 0.5927679403541473
User 93650 does not improve AUC. Reverting changes.
[2024-12-02 18:18:28.477820] start test user 15492 73/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:28.894119] start test user 15492 73/568 recall augumented users by random, augumented_users = [19078, 131088, 64091, 13210, 75304, 79446, 94710, 125021, 117031, 19910, 119193, 109172, 121044, 86169, 105548, 97754, 81067, 116625, 76134, 64962, 124442, 129964, 126772, 87560, 84025, 18461, 34271, 124907, 133626, 74205, 72731, 64193, 90277, 48989, 656, 60266, 53737, 27794, 99442, 42571, 53173, 134915, 12685, 71620, 28210, 89248, 129804, 44088, 117959, 2712]
[2024-12-02 18:18:28.909192] user = 15492 Cloud 73/568
[2024-12-02 18:18:28.936246] user = 15492 Local 73/568
[2024-12-02 18:18:28.994418] user = 15492 Local+ 73/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:31.364422] user = 15492 MPDA- 73/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6550904977375566
Training on augumented user 19078 0/50 current_auc = 0.6550904977375566
User 19078 AUC after training: 0.6547511312217196
User 19078 does not improve AUC. Reverting changes.
Training on augumented user 131088 1/50 current_auc = 0.6550904977375566
User 131088 AUC after training: 0.6540158371040724
User 131088 does not improve AUC. Reverting changes.
Training on augumented user 64091 2/50 current_auc = 0.6550904977375566
User 64091 AUC after training: 0.6549773755656109
User 64091 does not improve AUC. Reverting changes.
Training on augumented user 13210 3/50 current_auc = 0.6550904977375566
User 13210 AUC after training: 0.6549773755656109
User 13210 does not improve AUC. Reverting changes.
Training on augumented user 75304 4/50 current_auc = 0.6550904977375566
User 75304 AUC after training: 0.6548642533936652
User 75304 does not improve AUC. Reverting changes.
Training on augumented user 79446 5/50 current_auc = 0.6550904977375566
User 79446 AUC after training: 0.6555429864253394
User 79446 improves AUC. Keeping the model.
Training on augumented user 94710 6/50 current_auc = 0.6555429864253394
User 94710 AUC after training: 0.6550904977375566
User 94710 does not improve AUC. Reverting changes.
Training on augumented user 125021 7/50 current_auc = 0.6555429864253394
User 125021 AUC after training: 0.6555429864253394
User 125021 does not improve AUC. Reverting changes.
Training on augumented user 117031 8/50 current_auc = 0.6555429864253394
User 117031 AUC after training: 0.6557692307692308
User 117031 improves AUC. Keeping the model.
Training on augumented user 19910 9/50 current_auc = 0.6557692307692308
User 19910 AUC after training: 0.656447963800905
User 19910 improves AUC. Keeping the model.
Training on augumented user 119193 10/50 current_auc = 0.656447963800905
User 119193 AUC after training: 0.6563914027149321
User 119193 does not improve AUC. Reverting changes.
Training on augumented user 109172 11/50 current_auc = 0.656447963800905
User 109172 AUC after training: 0.6562217194570136
User 109172 does not improve AUC. Reverting changes.
Training on augumented user 121044 12/50 current_auc = 0.656447963800905
User 121044 AUC after training: 0.6569570135746606
User 121044 improves AUC. Keeping the model.
Training on augumented user 86169 13/50 current_auc = 0.6569570135746606
User 86169 AUC after training: 0.6576357466063348
User 86169 improves AUC. Keeping the model.
Training on augumented user 105548 14/50 current_auc = 0.6576357466063348
User 105548 AUC after training: 0.6574660633484163
User 105548 does not improve AUC. Reverting changes.
Training on augumented user 97754 15/50 current_auc = 0.6576357466063348
User 97754 AUC after training: 0.6570701357466064
User 97754 does not improve AUC. Reverting changes.
Training on augumented user 81067 16/50 current_auc = 0.6576357466063348
User 81067 AUC after training: 0.657918552036199
User 81067 improves AUC. Keeping the model.
Training on augumented user 116625 17/50 current_auc = 0.657918552036199
User 116625 AUC after training: 0.6581447963800905
User 116625 improves AUC. Keeping the model.
Training on augumented user 76134 18/50 current_auc = 0.6581447963800905
User 76134 AUC after training: 0.6574095022624434
User 76134 does not improve AUC. Reverting changes.
Training on augumented user 64962 19/50 current_auc = 0.6581447963800905
User 64962 AUC after training: 0.6580316742081448
User 64962 does not improve AUC. Reverting changes.
Training on augumented user 124442 20/50 current_auc = 0.6581447963800905
User 124442 AUC after training: 0.6574660633484163
User 124442 does not improve AUC. Reverting changes.
Training on augumented user 129964 21/50 current_auc = 0.6581447963800905
User 129964 AUC after training: 0.6579185520361991
User 129964 does not improve AUC. Reverting changes.
Training on augumented user 126772 22/50 current_auc = 0.6581447963800905
User 126772 AUC after training: 0.6576923076923076
User 126772 does not improve AUC. Reverting changes.
Training on augumented user 87560 23/50 current_auc = 0.6581447963800905
User 87560 AUC after training: 0.6582013574660633
User 87560 improves AUC. Keeping the model.
Training on augumented user 84025 24/50 current_auc = 0.6582013574660633
User 84025 AUC after training: 0.6582579185520363
User 84025 improves AUC. Keeping the model.
Training on augumented user 18461 25/50 current_auc = 0.6582579185520363
User 18461 AUC after training: 0.6578054298642534
User 18461 does not improve AUC. Reverting changes.
Training on augumented user 34271 26/50 current_auc = 0.6582579185520363
User 34271 AUC after training: 0.6581447963800905
User 34271 does not improve AUC. Reverting changes.
Training on augumented user 124907 27/50 current_auc = 0.6582579185520363
User 124907 AUC after training: 0.6581447963800905
User 124907 does not improve AUC. Reverting changes.
Training on augumented user 133626 28/50 current_auc = 0.6582579185520363
User 133626 AUC after training: 0.6574660633484163
User 133626 does not improve AUC. Reverting changes.
Training on augumented user 74205 29/50 current_auc = 0.6582579185520363
User 74205 AUC after training: 0.6572963800904977
User 74205 does not improve AUC. Reverting changes.
Training on augumented user 72731 30/50 current_auc = 0.6582579185520363
User 72731 AUC after training: 0.6585407239819004
User 72731 improves AUC. Keeping the model.
Training on augumented user 64193 31/50 current_auc = 0.6585407239819004
User 64193 AUC after training: 0.6583710407239819
User 64193 does not improve AUC. Reverting changes.
Training on augumented user 90277 32/50 current_auc = 0.6585407239819004
User 90277 AUC after training: 0.6581447963800905
User 90277 does not improve AUC. Reverting changes.
Training on augumented user 48989 33/50 current_auc = 0.6585407239819004
User 48989 AUC after training: 0.6581447963800906
User 48989 does not improve AUC. Reverting changes.
Training on augumented user 656 34/50 current_auc = 0.6585407239819004
User 656 AUC after training: 0.6583710407239819
User 656 does not improve AUC. Reverting changes.
Training on augumented user 60266 35/50 current_auc = 0.6585407239819004
User 60266 AUC after training: 0.6581447963800905
User 60266 does not improve AUC. Reverting changes.
Training on augumented user 53737 36/50 current_auc = 0.6585407239819004
User 53737 AUC after training: 0.6580316742081448
User 53737 does not improve AUC. Reverting changes.
Training on augumented user 27794 37/50 current_auc = 0.6585407239819004
User 27794 AUC after training: 0.6585972850678733
User 27794 improves AUC. Keeping the model.
Training on augumented user 99442 38/50 current_auc = 0.6585972850678733
User 99442 AUC after training: 0.6584841628959276
User 99442 does not improve AUC. Reverting changes.
Training on augumented user 42571 39/50 current_auc = 0.6585972850678733
User 42571 AUC after training: 0.658710407239819
User 42571 improves AUC. Keeping the model.
Training on augumented user 53173 40/50 current_auc = 0.658710407239819
User 53173 AUC after training: 0.6581447963800905
User 53173 does not improve AUC. Reverting changes.
Training on augumented user 134915 41/50 current_auc = 0.658710407239819
User 134915 AUC after training: 0.6582579185520362
User 134915 does not improve AUC. Reverting changes.
Training on augumented user 12685 42/50 current_auc = 0.658710407239819
User 12685 AUC after training: 0.6588235294117647
User 12685 improves AUC. Keeping the model.
Training on augumented user 71620 43/50 current_auc = 0.6588235294117647
User 71620 AUC after training: 0.6588235294117648
User 71620 improves AUC. Keeping the model.
Training on augumented user 28210 44/50 current_auc = 0.6588235294117648
User 28210 AUC after training: 0.6584276018099547
User 28210 does not improve AUC. Reverting changes.
Training on augumented user 89248 45/50 current_auc = 0.6588235294117648
User 89248 AUC after training: 0.6584841628959276
User 89248 does not improve AUC. Reverting changes.
Training on augumented user 129804 46/50 current_auc = 0.6588235294117648
User 129804 AUC after training: 0.6584841628959276
User 129804 does not improve AUC. Reverting changes.
Training on augumented user 44088 47/50 current_auc = 0.6588235294117648
User 44088 AUC after training: 0.6580316742081449
User 44088 does not improve AUC. Reverting changes.
Training on augumented user 117959 48/50 current_auc = 0.6588235294117648
User 117959 AUC after training: 0.658371040723982
User 117959 does not improve AUC. Reverting changes.
Training on augumented user 2712 49/50 current_auc = 0.6588235294117648
User 2712 AUC after training: 0.6582013574660633
User 2712 does not improve AUC. Reverting changes.
[2024-12-02 18:19:01.157197] start test user 15497 74/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:01.582419] start test user 15497 74/568 recall augumented users by random, augumented_users = [3343, 32112, 111394, 29275, 127525, 8055, 34106, 95714, 98697, 1406, 8712, 106853, 516, 106947, 119887, 128003, 115832, 59413, 9750, 131938, 33645, 55329, 98447, 123818, 71523, 25222, 44002, 36111, 95008, 93889, 46224, 4886, 87154, 89933, 59338, 18131, 30666, 44651, 58747, 40056, 130282, 133278, 64740, 98130, 72108, 134208, 99019, 59568, 117196, 66470]
[2024-12-02 18:19:01.599575] user = 15497 Cloud 74/568
[2024-12-02 18:19:01.683135] user = 15497 Local 74/568
[2024-12-02 18:19:01.828837] user = 15497 Local+ 74/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:03.815825] user = 15497 MPDA- 74/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7780082459533746
Training on augumented user 3343 0/50 current_auc = 0.7780082459533746
User 3343 AUC after training: 0.7780803556279479
User 3343 improves AUC. Keeping the model.
Training on augumented user 32112 1/50 current_auc = 0.7780803556279479
User 32112 AUC after training: 0.7781270148291425
User 32112 improves AUC. Keeping the model.
Training on augumented user 111394 2/50 current_auc = 0.7781270148291425
User 111394 AUC after training: 0.7781863992670264
User 111394 improves AUC. Keeping the model.
Training on augumented user 29275 3/50 current_auc = 0.7781863992670264
User 29275 AUC after training: 0.7781291357019241
User 29275 does not improve AUC. Reverting changes.
Training on augumented user 127525 4/50 current_auc = 0.7781863992670264
User 127525 AUC after training: 0.7782309375954393
User 127525 improves AUC. Keeping the model.
Training on augumented user 8055 5/50 current_auc = 0.7782309375954393
User 8055 AUC after training: 0.7782012453764974
User 8055 does not improve AUC. Reverting changes.
Training on augumented user 34106 6/50 current_auc = 0.7782309375954393
User 34106 AUC after training: 0.7782797176694152
User 34106 improves AUC. Keeping the model.
Training on augumented user 95714 7/50 current_auc = 0.7782797176694152
User 95714 AUC after training: 0.7782245749770945
User 95714 does not improve AUC. Reverting changes.
Training on augumented user 98697 8/50 current_auc = 0.7782797176694152
User 98697 AUC after training: 0.7781397400658319
User 98697 does not improve AUC. Reverting changes.
Training on augumented user 1406 9/50 current_auc = 0.7782797176694152
User 1406 AUC after training: 0.7783178933794835
User 1406 improves AUC. Keeping the model.
Training on augumented user 8712 10/50 current_auc = 0.7783178933794835
User 8712 AUC after training: 0.7782606298143814
User 8712 does not improve AUC. Reverting changes.
Training on augumented user 106853 11/50 current_auc = 0.7783178933794835
User 106853 AUC after training: 0.7782839594149784
User 106853 does not improve AUC. Reverting changes.
Training on augumented user 516 12/50 current_auc = 0.7783178933794835
User 516 AUC after training: 0.7782054871220605
User 516 does not improve AUC. Reverting changes.
Training on augumented user 106947 13/50 current_auc = 0.7783178933794835
User 106947 AUC after training: 0.7781821575214632
User 106947 does not improve AUC. Reverting changes.
Training on augumented user 119887 14/50 current_auc = 0.7783178933794835
User 119887 AUC after training: 0.7782245749770945
User 119887 does not improve AUC. Reverting changes.
Training on augumented user 128003 15/50 current_auc = 0.7783178933794835
User 128003 AUC after training: 0.7782288167226576
User 128003 does not improve AUC. Reverting changes.
Training on augumented user 115832 16/50 current_auc = 0.7783178933794835
User 115832 AUC after training: 0.7783178933794835
User 115832 does not improve AUC. Reverting changes.
Training on augumented user 59413 17/50 current_auc = 0.7783178933794835
User 59413 AUC after training: 0.778143981811395
User 59413 does not improve AUC. Reverting changes.
Training on augumented user 9750 18/50 current_auc = 0.7783178933794835
User 9750 AUC after training: 0.7782033662492789
User 9750 does not improve AUC. Reverting changes.
Training on augumented user 131938 19/50 current_auc = 0.7783178933794835
User 131938 AUC after training: 0.7782203332315314
User 131938 does not improve AUC. Reverting changes.
Training on augumented user 33645 20/50 current_auc = 0.7783178933794835
User 33645 AUC after training: 0.7782839594149784
User 33645 does not improve AUC. Reverting changes.
Training on augumented user 55329 21/50 current_auc = 0.7783178933794835
User 55329 AUC after training: 0.7782203332315315
User 55329 does not improve AUC. Reverting changes.
Training on augumented user 98447 22/50 current_auc = 0.7783178933794835
User 98447 AUC after training: 0.778334860361736
User 98447 improves AUC. Keeping the model.
Training on augumented user 123818 23/50 current_auc = 0.778334860361736
User 123818 AUC after training: 0.7783178933794835
User 123818 does not improve AUC. Reverting changes.
Training on augumented user 71523 24/50 current_auc = 0.778334860361736
User 71523 AUC after training: 0.7782479045776919
User 71523 does not improve AUC. Reverting changes.
Training on augumented user 25222 25/50 current_auc = 0.778334860361736
User 25222 AUC after training: 0.778334860361736
User 25222 does not improve AUC. Reverting changes.
Training on augumented user 44002 26/50 current_auc = 0.778334860361736
User 44002 AUC after training: 0.7781461026841765
User 44002 does not improve AUC. Reverting changes.
Training on augumented user 36111 27/50 current_auc = 0.778334860361736
User 36111 AUC after training: 0.7782203332315314
User 36111 does not improve AUC. Reverting changes.
Training on augumented user 95008 28/50 current_auc = 0.778334860361736
User 95008 AUC after training: 0.7781036852285452
User 95008 does not improve AUC. Reverting changes.
Training on augumented user 93889 29/50 current_auc = 0.778334860361736
User 93889 AUC after training: 0.77828608028776
User 93889 does not improve AUC. Reverting changes.
Training on augumented user 46224 30/50 current_auc = 0.778334860361736
User 46224 AUC after training: 0.7782033662492789
User 46224 does not improve AUC. Reverting changes.
Training on augumented user 4886 31/50 current_auc = 0.778334860361736
User 4886 AUC after training: 0.7781715531575555
User 4886 does not improve AUC. Reverting changes.
Training on augumented user 87154 32/50 current_auc = 0.778334860361736
User 87154 AUC after training: 0.7783009263972309
User 87154 does not improve AUC. Reverting changes.
Training on augumented user 89933 33/50 current_auc = 0.778334860361736
User 89933 AUC after training: 0.7782733550510705
User 89933 does not improve AUC. Reverting changes.
Training on augumented user 59338 34/50 current_auc = 0.778334860361736
User 59338 AUC after training: 0.7780803556279481
User 59338 does not improve AUC. Reverting changes.
Training on augumented user 18131 35/50 current_auc = 0.778334860361736
User 18131 AUC after training: 0.7783263768706098
User 18131 does not improve AUC. Reverting changes.
Training on augumented user 30666 36/50 current_auc = 0.778334860361736
User 30666 AUC after training: 0.7782288167226578
User 30666 does not improve AUC. Reverting changes.
Training on augumented user 44651 37/50 current_auc = 0.778334860361736
User 44651 AUC after training: 0.7781863992670264
User 44651 does not improve AUC. Reverting changes.
Training on augumented user 58747 38/50 current_auc = 0.778334860361736
User 58747 AUC after training: 0.7782754759238522
User 58747 does not improve AUC. Reverting changes.
Training on augumented user 40056 39/50 current_auc = 0.778334860361736
User 40056 AUC after training: 0.7782733550510704
User 40056 does not improve AUC. Reverting changes.
Training on augumented user 130282 40/50 current_auc = 0.778334860361736
User 130282 AUC after training: 0.7782627506871629
User 130282 does not improve AUC. Reverting changes.
Training on augumented user 133278 41/50 current_auc = 0.778334860361736
User 133278 AUC after training: 0.7781948827581526
User 133278 does not improve AUC. Reverting changes.
Training on augumented user 64740 42/50 current_auc = 0.778334860361736
User 64740 AUC after training: 0.7781948827581526
User 64740 does not improve AUC. Reverting changes.
Training on augumented user 98130 43/50 current_auc = 0.778334860361736
User 98130 AUC after training: 0.7783263768706097
User 98130 does not improve AUC. Reverting changes.
Training on augumented user 72108 44/50 current_auc = 0.778334860361736
User 72108 AUC after training: 0.7783136516339203
User 72108 does not improve AUC. Reverting changes.
Training on augumented user 134208 45/50 current_auc = 0.778334860361736
User 134208 AUC after training: 0.7783475855984253
User 134208 improves AUC. Keeping the model.
Training on augumented user 99019 46/50 current_auc = 0.7783475855984253
User 99019 AUC after training: 0.7781354983202687
User 99019 does not improve AUC. Reverting changes.
Training on augumented user 59568 47/50 current_auc = 0.7783475855984253
User 59568 AUC after training: 0.7784112117818724
User 59568 improves AUC. Keeping the model.
Training on augumented user 117196 48/50 current_auc = 0.7784112117818724
User 117196 AUC after training: 0.778428178764125
User 117196 improves AUC. Keeping the model.
Training on augumented user 66470 49/50 current_auc = 0.778428178764125
User 66470 AUC after training: 0.7790580779802503
User 66470 improves AUC. Keeping the model.
[2024-12-02 18:19:37.871274] start test user 15548 75/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:38.303405] start test user 15548 75/568 recall augumented users by random, augumented_users = [90251, 6726, 21032, 127800, 58513, 131659, 117625, 10460, 126313, 76510, 131514, 74863, 129037, 37165, 120226, 24672, 23019, 104365, 111052, 78422, 26279, 113711, 106973, 125595, 36871, 55264, 75833, 73269, 124986, 36217, 11874, 73373, 78516, 21002, 107818, 92541, 20481, 109417, 66754, 106061, 21039, 136771, 89378, 24396, 45062, 20357, 120668, 21385, 25048, 70307]
[2024-12-02 18:19:38.318761] user = 15548 Cloud 75/568
[2024-12-02 18:19:38.332715] user = 15548 Local 75/568
[2024-12-02 18:19:38.410731] user = 15548 Local+ 75/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:40.310101] user = 15548 MPDA- 75/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7651515151515151
Training on augumented user 90251 0/50 current_auc = 0.7651515151515151
User 90251 AUC after training: 0.7727272727272727
User 90251 improves AUC. Keeping the model.
Training on augumented user 6726 1/50 current_auc = 0.7727272727272727
User 6726 AUC after training: 0.7727272727272727
User 6726 does not improve AUC. Reverting changes.
Training on augumented user 21032 2/50 current_auc = 0.7727272727272727
User 21032 AUC after training: 0.7651515151515151
User 21032 does not improve AUC. Reverting changes.
Training on augumented user 127800 3/50 current_auc = 0.7727272727272727
User 127800 AUC after training: 0.7727272727272727
User 127800 does not improve AUC. Reverting changes.
Training on augumented user 58513 4/50 current_auc = 0.7727272727272727
User 58513 AUC after training: 0.7727272727272727
User 58513 does not improve AUC. Reverting changes.
Training on augumented user 131659 5/50 current_auc = 0.7727272727272727
User 131659 AUC after training: 0.7727272727272727
User 131659 does not improve AUC. Reverting changes.
Training on augumented user 117625 6/50 current_auc = 0.7727272727272727
User 117625 AUC after training: 0.7727272727272727
User 117625 does not improve AUC. Reverting changes.
Training on augumented user 10460 7/50 current_auc = 0.7727272727272727
User 10460 AUC after training: 0.7651515151515151
User 10460 does not improve AUC. Reverting changes.
Training on augumented user 126313 8/50 current_auc = 0.7727272727272727
User 126313 AUC after training: 0.7727272727272727
User 126313 does not improve AUC. Reverting changes.
Training on augumented user 76510 9/50 current_auc = 0.7727272727272727
User 76510 AUC after training: 0.7727272727272727
User 76510 does not improve AUC. Reverting changes.
Training on augumented user 131514 10/50 current_auc = 0.7727272727272727
User 131514 AUC after training: 0.7727272727272727
User 131514 does not improve AUC. Reverting changes.
Training on augumented user 74863 11/50 current_auc = 0.7727272727272727
User 74863 AUC after training: 0.7727272727272727
User 74863 does not improve AUC. Reverting changes.
Training on augumented user 129037 12/50 current_auc = 0.7727272727272727
User 129037 AUC after training: 0.7727272727272727
User 129037 does not improve AUC. Reverting changes.
Training on augumented user 37165 13/50 current_auc = 0.7727272727272727
User 37165 AUC after training: 0.7727272727272727
User 37165 does not improve AUC. Reverting changes.
Training on augumented user 120226 14/50 current_auc = 0.7727272727272727
User 120226 AUC after training: 0.7651515151515151
User 120226 does not improve AUC. Reverting changes.
Training on augumented user 24672 15/50 current_auc = 0.7727272727272727
User 24672 AUC after training: 0.7727272727272727
User 24672 does not improve AUC. Reverting changes.
Training on augumented user 23019 16/50 current_auc = 0.7727272727272727
User 23019 AUC after training: 0.7727272727272727
User 23019 does not improve AUC. Reverting changes.
Training on augumented user 104365 17/50 current_auc = 0.7727272727272727
User 104365 AUC after training: 0.7651515151515151
User 104365 does not improve AUC. Reverting changes.
Training on augumented user 111052 18/50 current_auc = 0.7727272727272727
User 111052 AUC after training: 0.7727272727272727
User 111052 does not improve AUC. Reverting changes.
Training on augumented user 78422 19/50 current_auc = 0.7727272727272727
User 78422 AUC after training: 0.7727272727272727
User 78422 does not improve AUC. Reverting changes.
Training on augumented user 26279 20/50 current_auc = 0.7727272727272727
User 26279 AUC after training: 0.7651515151515151
User 26279 does not improve AUC. Reverting changes.
Training on augumented user 113711 21/50 current_auc = 0.7727272727272727
User 113711 AUC after training: 0.7651515151515151
User 113711 does not improve AUC. Reverting changes.
Training on augumented user 106973 22/50 current_auc = 0.7727272727272727
User 106973 AUC after training: 0.7727272727272727
User 106973 does not improve AUC. Reverting changes.
Training on augumented user 125595 23/50 current_auc = 0.7727272727272727
User 125595 AUC after training: 0.7727272727272727
User 125595 does not improve AUC. Reverting changes.
Training on augumented user 36871 24/50 current_auc = 0.7727272727272727
User 36871 AUC after training: 0.7727272727272727
User 36871 does not improve AUC. Reverting changes.
Training on augumented user 55264 25/50 current_auc = 0.7727272727272727
User 55264 AUC after training: 0.7727272727272727
User 55264 does not improve AUC. Reverting changes.
Training on augumented user 75833 26/50 current_auc = 0.7727272727272727
User 75833 AUC after training: 0.7575757575757576
User 75833 does not improve AUC. Reverting changes.
Training on augumented user 73269 27/50 current_auc = 0.7727272727272727
User 73269 AUC after training: 0.7727272727272727
User 73269 does not improve AUC. Reverting changes.
Training on augumented user 124986 28/50 current_auc = 0.7727272727272727
User 124986 AUC after training: 0.7575757575757576
User 124986 does not improve AUC. Reverting changes.
Training on augumented user 36217 29/50 current_auc = 0.7727272727272727
User 36217 AUC after training: 0.7727272727272727
User 36217 does not improve AUC. Reverting changes.
Training on augumented user 11874 30/50 current_auc = 0.7727272727272727
User 11874 AUC after training: 0.7651515151515151
User 11874 does not improve AUC. Reverting changes.
Training on augumented user 73373 31/50 current_auc = 0.7727272727272727
User 73373 AUC after training: 0.7727272727272727
User 73373 does not improve AUC. Reverting changes.
Training on augumented user 78516 32/50 current_auc = 0.7727272727272727
User 78516 AUC after training: 0.7651515151515151
User 78516 does not improve AUC. Reverting changes.
Training on augumented user 21002 33/50 current_auc = 0.7727272727272727
User 21002 AUC after training: 0.7727272727272727
User 21002 does not improve AUC. Reverting changes.
Training on augumented user 107818 34/50 current_auc = 0.7727272727272727
User 107818 AUC after training: 0.7727272727272727
User 107818 does not improve AUC. Reverting changes.
Training on augumented user 92541 35/50 current_auc = 0.7727272727272727
User 92541 AUC after training: 0.7727272727272727
User 92541 does not improve AUC. Reverting changes.
Training on augumented user 20481 36/50 current_auc = 0.7727272727272727
User 20481 AUC after training: 0.7727272727272727
User 20481 does not improve AUC. Reverting changes.
Training on augumented user 109417 37/50 current_auc = 0.7727272727272727
User 109417 AUC after training: 0.7727272727272727
User 109417 does not improve AUC. Reverting changes.
Training on augumented user 66754 38/50 current_auc = 0.7727272727272727
User 66754 AUC after training: 0.7727272727272727
User 66754 does not improve AUC. Reverting changes.
Training on augumented user 106061 39/50 current_auc = 0.7727272727272727
User 106061 AUC after training: 0.7727272727272727
User 106061 does not improve AUC. Reverting changes.
Training on augumented user 21039 40/50 current_auc = 0.7727272727272727
User 21039 AUC after training: 0.7727272727272727
User 21039 does not improve AUC. Reverting changes.
Training on augumented user 136771 41/50 current_auc = 0.7727272727272727
User 136771 AUC after training: 0.7727272727272727
User 136771 does not improve AUC. Reverting changes.
Training on augumented user 89378 42/50 current_auc = 0.7727272727272727
User 89378 AUC after training: 0.7651515151515151
User 89378 does not improve AUC. Reverting changes.
Training on augumented user 24396 43/50 current_auc = 0.7727272727272727
User 24396 AUC after training: 0.7727272727272727
User 24396 does not improve AUC. Reverting changes.
Training on augumented user 45062 44/50 current_auc = 0.7727272727272727
User 45062 AUC after training: 0.7651515151515151
User 45062 does not improve AUC. Reverting changes.
Training on augumented user 20357 45/50 current_auc = 0.7727272727272727
User 20357 AUC after training: 0.7727272727272727
User 20357 does not improve AUC. Reverting changes.
Training on augumented user 120668 46/50 current_auc = 0.7727272727272727
User 120668 AUC after training: 0.7727272727272727
User 120668 does not improve AUC. Reverting changes.
Training on augumented user 21385 47/50 current_auc = 0.7727272727272727
User 21385 AUC after training: 0.7651515151515151
User 21385 does not improve AUC. Reverting changes.
Training on augumented user 25048 48/50 current_auc = 0.7727272727272727
User 25048 AUC after training: 0.7727272727272727
User 25048 does not improve AUC. Reverting changes.
Training on augumented user 70307 49/50 current_auc = 0.7727272727272727
User 70307 AUC after training: 0.7727272727272727
User 70307 does not improve AUC. Reverting changes.
[2024-12-02 18:20:04.586646] start test user 15571 76/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:05.514302] start test user 15571 76/568 recall augumented users by random, augumented_users = [88647, 63518, 49100, 115320, 78961, 40665, 125763, 26687, 27337, 112170, 38976, 60467, 20467, 32286, 127855, 67160, 114718, 40167, 114454, 129411, 19499, 86341, 20484, 112122, 51604, 25283, 22046, 51324, 124697, 103916, 122281, 12498, 60943, 89389, 88753, 99737, 126064, 19848, 60230, 29194, 133406, 91552, 99581, 24125, 76396, 84708, 80234, 52310, 42477, 137830]
[2024-12-02 18:20:05.548389] user = 15571 Cloud 76/568
[2024-12-02 18:20:05.599314] user = 15571 Local 76/568
[2024-12-02 18:20:05.728886] user = 15571 Local+ 76/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:07.068510] user = 15571 MPDA- 76/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8143292682926829
Training on augumented user 88647 0/50 current_auc = 0.8143292682926829
User 88647 AUC after training: 0.8144817073170731
User 88647 improves AUC. Keeping the model.
Training on augumented user 63518 1/50 current_auc = 0.8144817073170731
User 63518 AUC after training: 0.8147865853658536
User 63518 improves AUC. Keeping the model.
Training on augumented user 49100 2/50 current_auc = 0.8147865853658536
User 49100 AUC after training: 0.8150914634146341
User 49100 improves AUC. Keeping the model.
Training on augumented user 115320 3/50 current_auc = 0.8150914634146341
User 115320 AUC after training: 0.8137195121951218
User 115320 does not improve AUC. Reverting changes.
Training on augumented user 78961 4/50 current_auc = 0.8150914634146341
User 78961 AUC after training: 0.8135670731707317
User 78961 does not improve AUC. Reverting changes.
Training on augumented user 40665 5/50 current_auc = 0.8150914634146341
User 40665 AUC after training: 0.8144817073170731
User 40665 does not improve AUC. Reverting changes.
Training on augumented user 125763 6/50 current_auc = 0.8150914634146341
User 125763 AUC after training: 0.8135670731707317
User 125763 does not improve AUC. Reverting changes.
Training on augumented user 26687 7/50 current_auc = 0.8150914634146341
User 26687 AUC after training: 0.8149390243902438
User 26687 does not improve AUC. Reverting changes.
Training on augumented user 27337 8/50 current_auc = 0.8150914634146341
User 27337 AUC after training: 0.8121951219512195
User 27337 does not improve AUC. Reverting changes.
Training on augumented user 112170 9/50 current_auc = 0.8150914634146341
User 112170 AUC after training: 0.8147865853658537
User 112170 does not improve AUC. Reverting changes.
Training on augumented user 38976 10/50 current_auc = 0.8150914634146341
User 38976 AUC after training: 0.8134146341463414
User 38976 does not improve AUC. Reverting changes.
Training on augumented user 60467 11/50 current_auc = 0.8150914634146341
User 60467 AUC after training: 0.8146341463414635
User 60467 does not improve AUC. Reverting changes.
Training on augumented user 20467 12/50 current_auc = 0.8150914634146341
User 20467 AUC after training: 0.8143292682926829
User 20467 does not improve AUC. Reverting changes.
Training on augumented user 32286 13/50 current_auc = 0.8150914634146341
User 32286 AUC after training: 0.8141768292682926
User 32286 does not improve AUC. Reverting changes.
Training on augumented user 127855 14/50 current_auc = 0.8150914634146341
User 127855 AUC after training: 0.8134146341463414
User 127855 does not improve AUC. Reverting changes.
Training on augumented user 67160 15/50 current_auc = 0.8150914634146341
User 67160 AUC after training: 0.8137195121951218
User 67160 does not improve AUC. Reverting changes.
Training on augumented user 114718 16/50 current_auc = 0.8150914634146341
User 114718 AUC after training: 0.8149390243902438
User 114718 does not improve AUC. Reverting changes.
Training on augumented user 40167 17/50 current_auc = 0.8150914634146341
User 40167 AUC after training: 0.8134146341463415
User 40167 does not improve AUC. Reverting changes.
Training on augumented user 114454 18/50 current_auc = 0.8150914634146341
User 114454 AUC after training: 0.8147865853658537
User 114454 does not improve AUC. Reverting changes.
Training on augumented user 129411 19/50 current_auc = 0.8150914634146341
User 129411 AUC after training: 0.8143292682926829
User 129411 does not improve AUC. Reverting changes.
Training on augumented user 19499 20/50 current_auc = 0.8150914634146341
User 19499 AUC after training: 0.8146341463414634
User 19499 does not improve AUC. Reverting changes.
Training on augumented user 86341 21/50 current_auc = 0.8150914634146341
User 86341 AUC after training: 0.8147865853658537
User 86341 does not improve AUC. Reverting changes.
Training on augumented user 20484 22/50 current_auc = 0.8150914634146341
User 20484 AUC after training: 0.8141768292682927
User 20484 does not improve AUC. Reverting changes.
Training on augumented user 112122 23/50 current_auc = 0.8150914634146341
User 112122 AUC after training: 0.8141768292682926
User 112122 does not improve AUC. Reverting changes.
Training on augumented user 51604 24/50 current_auc = 0.8150914634146341
User 51604 AUC after training: 0.8138719512195122
User 51604 does not improve AUC. Reverting changes.
Training on augumented user 25283 25/50 current_auc = 0.8150914634146341
User 25283 AUC after training: 0.8141768292682926
User 25283 does not improve AUC. Reverting changes.
Training on augumented user 22046 26/50 current_auc = 0.8150914634146341
User 22046 AUC after training: 0.8137195121951218
User 22046 does not improve AUC. Reverting changes.
Training on augumented user 51324 27/50 current_auc = 0.8150914634146341
User 51324 AUC after training: 0.8126524390243902
User 51324 does not improve AUC. Reverting changes.
Training on augumented user 124697 28/50 current_auc = 0.8150914634146341
User 124697 AUC after training: 0.8149390243902438
User 124697 does not improve AUC. Reverting changes.
Training on augumented user 103916 29/50 current_auc = 0.8150914634146341
User 103916 AUC after training: 0.8143292682926829
User 103916 does not improve AUC. Reverting changes.
Training on augumented user 122281 30/50 current_auc = 0.8150914634146341
User 122281 AUC after training: 0.8146341463414634
User 122281 does not improve AUC. Reverting changes.
Training on augumented user 12498 31/50 current_auc = 0.8150914634146341
User 12498 AUC after training: 0.8140243902439025
User 12498 does not improve AUC. Reverting changes.
Training on augumented user 60943 32/50 current_auc = 0.8150914634146341
User 60943 AUC after training: 0.8147865853658536
User 60943 does not improve AUC. Reverting changes.
Training on augumented user 89389 33/50 current_auc = 0.8150914634146341
User 89389 AUC after training: 0.8138719512195122
User 89389 does not improve AUC. Reverting changes.
Training on augumented user 88753 34/50 current_auc = 0.8150914634146341
User 88753 AUC after training: 0.8147865853658537
User 88753 does not improve AUC. Reverting changes.
Training on augumented user 99737 35/50 current_auc = 0.8150914634146341
User 99737 AUC after training: 0.8140243902439025
User 99737 does not improve AUC. Reverting changes.
Training on augumented user 126064 36/50 current_auc = 0.8150914634146341
User 126064 AUC after training: 0.8144817073170731
User 126064 does not improve AUC. Reverting changes.
Training on augumented user 19848 37/50 current_auc = 0.8150914634146341
User 19848 AUC after training: 0.8149390243902438
User 19848 does not improve AUC. Reverting changes.
Training on augumented user 60230 38/50 current_auc = 0.8150914634146341
User 60230 AUC after training: 0.813719512195122
User 60230 does not improve AUC. Reverting changes.
Training on augumented user 29194 39/50 current_auc = 0.8150914634146341
User 29194 AUC after training: 0.8140243902439025
User 29194 does not improve AUC. Reverting changes.
Training on augumented user 133406 40/50 current_auc = 0.8150914634146341
User 133406 AUC after training: 0.8146341463414635
User 133406 does not improve AUC. Reverting changes.
Training on augumented user 91552 41/50 current_auc = 0.8150914634146341
User 91552 AUC after training: 0.8143292682926829
User 91552 does not improve AUC. Reverting changes.
Training on augumented user 99581 42/50 current_auc = 0.8150914634146341
User 99581 AUC after training: 0.813719512195122
User 99581 does not improve AUC. Reverting changes.
Training on augumented user 24125 43/50 current_auc = 0.8150914634146341
User 24125 AUC after training: 0.813719512195122
User 24125 does not improve AUC. Reverting changes.
Training on augumented user 76396 44/50 current_auc = 0.8150914634146341
User 76396 AUC after training: 0.8138719512195122
User 76396 does not improve AUC. Reverting changes.
Training on augumented user 84708 45/50 current_auc = 0.8150914634146341
User 84708 AUC after training: 0.8147865853658537
User 84708 does not improve AUC. Reverting changes.
Training on augumented user 80234 46/50 current_auc = 0.8150914634146341
User 80234 AUC after training: 0.8138719512195122
User 80234 does not improve AUC. Reverting changes.
Training on augumented user 52310 47/50 current_auc = 0.8150914634146341
User 52310 AUC after training: 0.8138719512195122
User 52310 does not improve AUC. Reverting changes.
Training on augumented user 42477 48/50 current_auc = 0.8150914634146341
User 42477 AUC after training: 0.813719512195122
User 42477 does not improve AUC. Reverting changes.
Training on augumented user 137830 49/50 current_auc = 0.8150914634146341
User 137830 AUC after training: 0.8141768292682926
User 137830 does not improve AUC. Reverting changes.
[2024-12-02 18:20:30.472083] start test user 15616 77/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:30.867926] start test user 15616 77/568 recall augumented users by random, augumented_users = [23418, 57509, 39677, 82524, 104321, 69348, 60374, 108989, 32451, 11751, 127933, 101401, 99059, 126863, 41447, 64332, 3964, 92854, 122036, 45277, 47858, 15507, 116060, 51016, 36807, 54506, 135683, 135929, 98096, 105922, 12805, 106899, 73051, 129008, 35079, 122737, 34602, 92999, 25935, 97825, 130683, 91183, 2850, 41794, 57534, 28554, 81706, 19236, 93128, 16682]
[2024-12-02 18:20:30.882719] user = 15616 Cloud 77/568
[2024-12-02 18:20:30.906772] user = 15616 Local 77/568
[2024-12-02 18:20:31.059275] user = 15616 Local+ 77/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:32.809048] user = 15616 MPDA- 77/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7129186602870814
Training on augumented user 23418 0/50 current_auc = 0.7129186602870814
User 23418 AUC after training: 0.7131465026201869
User 23418 improves AUC. Keeping the model.
Training on augumented user 57509 1/50 current_auc = 0.7131465026201869
User 57509 AUC after training: 0.7126908179539758
User 57509 does not improve AUC. Reverting changes.
Training on augumented user 39677 2/50 current_auc = 0.7131465026201869
User 39677 AUC after training: 0.7130325814536341
User 39677 does not improve AUC. Reverting changes.
Training on augumented user 82524 3/50 current_auc = 0.7131465026201869
User 82524 AUC after training: 0.713032581453634
User 82524 does not improve AUC. Reverting changes.
Training on augumented user 104321 4/50 current_auc = 0.7131465026201869
User 104321 AUC after training: 0.7132604237867396
User 104321 improves AUC. Keeping the model.
Training on augumented user 69348 5/50 current_auc = 0.7132604237867396
User 69348 AUC after training: 0.7133743449532923
User 69348 improves AUC. Keeping the model.
Training on augumented user 60374 6/50 current_auc = 0.7133743449532923
User 60374 AUC after training: 0.7132604237867395
User 60374 does not improve AUC. Reverting changes.
Training on augumented user 108989 7/50 current_auc = 0.7133743449532923
User 108989 AUC after training: 0.7133743449532923
User 108989 does not improve AUC. Reverting changes.
Training on augumented user 32451 8/50 current_auc = 0.7133743449532923
User 32451 AUC after training: 0.7134882661198451
User 32451 improves AUC. Keeping the model.
Training on augumented user 11751 9/50 current_auc = 0.7134882661198451
User 11751 AUC after training: 0.7128047391205286
User 11751 does not improve AUC. Reverting changes.
Training on augumented user 127933 10/50 current_auc = 0.7134882661198451
User 127933 AUC after training: 0.713032581453634
User 127933 does not improve AUC. Reverting changes.
Training on augumented user 101401 11/50 current_auc = 0.7134882661198451
User 101401 AUC after training: 0.7131465026201869
User 101401 does not improve AUC. Reverting changes.
Training on augumented user 99059 12/50 current_auc = 0.7134882661198451
User 99059 AUC after training: 0.7129186602870813
User 99059 does not improve AUC. Reverting changes.
Training on augumented user 126863 13/50 current_auc = 0.7134882661198451
User 126863 AUC after training: 0.7132604237867395
User 126863 does not improve AUC. Reverting changes.
Training on augumented user 41447 14/50 current_auc = 0.7134882661198451
User 41447 AUC after training: 0.7136021872863978
User 41447 improves AUC. Keeping the model.
Training on augumented user 64332 15/50 current_auc = 0.7136021872863978
User 64332 AUC after training: 0.7134882661198451
User 64332 does not improve AUC. Reverting changes.
Training on augumented user 3964 16/50 current_auc = 0.7136021872863978
User 3964 AUC after training: 0.7138300296195033
User 3964 improves AUC. Keeping the model.
Training on augumented user 92854 17/50 current_auc = 0.7138300296195033
User 92854 AUC after training: 0.7134882661198451
User 92854 does not improve AUC. Reverting changes.
Training on augumented user 122036 18/50 current_auc = 0.7138300296195033
User 122036 AUC after training: 0.713032581453634
User 122036 does not improve AUC. Reverting changes.
Training on augumented user 45277 19/50 current_auc = 0.7138300296195033
User 45277 AUC after training: 0.7131465026201869
User 45277 does not improve AUC. Reverting changes.
Training on augumented user 47858 20/50 current_auc = 0.7138300296195033
User 47858 AUC after training: 0.7130325814536341
User 47858 does not improve AUC. Reverting changes.
Training on augumented user 15507 21/50 current_auc = 0.7138300296195033
User 15507 AUC after training: 0.7133743449532923
User 15507 does not improve AUC. Reverting changes.
Training on augumented user 116060 22/50 current_auc = 0.7138300296195033
User 116060 AUC after training: 0.713488266119845
User 116060 does not improve AUC. Reverting changes.
Training on augumented user 51016 23/50 current_auc = 0.7138300296195033
User 51016 AUC after training: 0.7123490544543176
User 51016 does not improve AUC. Reverting changes.
Training on augumented user 36807 24/50 current_auc = 0.7138300296195033
User 36807 AUC after training: 0.7136021872863979
User 36807 does not improve AUC. Reverting changes.
Training on augumented user 54506 25/50 current_auc = 0.7138300296195033
User 54506 AUC after training: 0.7133743449532923
User 54506 does not improve AUC. Reverting changes.
Training on augumented user 135683 26/50 current_auc = 0.7138300296195033
User 135683 AUC after training: 0.7134882661198451
User 135683 does not improve AUC. Reverting changes.
Training on augumented user 135929 27/50 current_auc = 0.7138300296195033
User 135929 AUC after training: 0.7138300296195033
User 135929 does not improve AUC. Reverting changes.
Training on augumented user 98096 28/50 current_auc = 0.7138300296195033
User 98096 AUC after training: 0.713943950786056
User 98096 improves AUC. Keeping the model.
Training on augumented user 105922 29/50 current_auc = 0.713943950786056
User 105922 AUC after training: 0.7138300296195033
User 105922 does not improve AUC. Reverting changes.
Training on augumented user 12805 30/50 current_auc = 0.713943950786056
User 12805 AUC after training: 0.7142857142857143
User 12805 improves AUC. Keeping the model.
Training on augumented user 106899 31/50 current_auc = 0.7142857142857143
User 106899 AUC after training: 0.7137161084529505
User 106899 does not improve AUC. Reverting changes.
Training on augumented user 73051 32/50 current_auc = 0.7142857142857143
User 73051 AUC after training: 0.7134882661198451
User 73051 does not improve AUC. Reverting changes.
Training on augumented user 129008 33/50 current_auc = 0.7142857142857143
User 129008 AUC after training: 0.7137161084529505
User 129008 does not improve AUC. Reverting changes.
Training on augumented user 35079 34/50 current_auc = 0.7142857142857143
User 35079 AUC after training: 0.7128047391205286
User 35079 does not improve AUC. Reverting changes.
Training on augumented user 122737 35/50 current_auc = 0.7142857142857143
User 122737 AUC after training: 0.713032581453634
User 122737 does not improve AUC. Reverting changes.
Training on augumented user 34602 36/50 current_auc = 0.7142857142857143
User 34602 AUC after training: 0.714399635452267
User 34602 improves AUC. Keeping the model.
Training on augumented user 92999 37/50 current_auc = 0.714399635452267
User 92999 AUC after training: 0.7141717931191616
User 92999 does not improve AUC. Reverting changes.
Training on augumented user 25935 38/50 current_auc = 0.714399635452267
User 25935 AUC after training: 0.7132604237867395
User 25935 does not improve AUC. Reverting changes.
Training on augumented user 97825 39/50 current_auc = 0.714399635452267
User 97825 AUC after training: 0.7137161084529505
User 97825 does not improve AUC. Reverting changes.
Training on augumented user 130683 40/50 current_auc = 0.714399635452267
User 130683 AUC after training: 0.7140578719526088
User 130683 does not improve AUC. Reverting changes.
Training on augumented user 91183 41/50 current_auc = 0.714399635452267
User 91183 AUC after training: 0.7132604237867396
User 91183 does not improve AUC. Reverting changes.
Training on augumented user 2850 42/50 current_auc = 0.714399635452267
User 2850 AUC after training: 0.7137161084529505
User 2850 does not improve AUC. Reverting changes.
Training on augumented user 41794 43/50 current_auc = 0.714399635452267
User 41794 AUC after training: 0.7134882661198451
User 41794 does not improve AUC. Reverting changes.
Training on augumented user 57534 44/50 current_auc = 0.714399635452267
User 57534 AUC after training: 0.7141717931191616
User 57534 does not improve AUC. Reverting changes.
Training on augumented user 28554 45/50 current_auc = 0.714399635452267
User 28554 AUC after training: 0.7140578719526087
User 28554 does not improve AUC. Reverting changes.
Training on augumented user 81706 46/50 current_auc = 0.714399635452267
User 81706 AUC after training: 0.7134882661198451
User 81706 does not improve AUC. Reverting changes.
Training on augumented user 19236 47/50 current_auc = 0.714399635452267
User 19236 AUC after training: 0.714399635452267
User 19236 does not improve AUC. Reverting changes.
Training on augumented user 93128 48/50 current_auc = 0.714399635452267
User 93128 AUC after training: 0.7140578719526088
User 93128 does not improve AUC. Reverting changes.
Training on augumented user 16682 49/50 current_auc = 0.714399635452267
User 16682 AUC after training: 0.7134882661198451
User 16682 does not improve AUC. Reverting changes.
[2024-12-02 18:21:01.100131] start test user 15688 78/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:01.508289] start test user 15688 78/568 recall augumented users by random, augumented_users = [12337, 89125, 101756, 96126, 4435, 29600, 26081, 18996, 69198, 71038, 96050, 60747, 20058, 96524, 68764, 109509, 82782, 67660, 47132, 85524, 107994, 57186, 53785, 83042, 99401, 98712, 75936, 101863, 112997, 130571, 64557, 117073, 10935, 99143, 90771, 27894, 60694, 80352, 130945, 5875, 100176, 74377, 44175, 61436, 39543, 86395, 74911, 83501, 44570, 30098]
[2024-12-02 18:21:01.522626] user = 15688 Cloud 78/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:21:01.539883] user = 15688 Local 78/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:21:01.561352] user = 15688 Local+ 78/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:21:03.736084] user = 15688 MPDA- 78/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 12337 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12337 AUC after training: 0.5
User 12337 does not improve AUC. Reverting changes.
Training on augumented user 89125 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89125 AUC after training: 0.5
User 89125 does not improve AUC. Reverting changes.
Training on augumented user 101756 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101756 AUC after training: 0.5
User 101756 does not improve AUC. Reverting changes.
Training on augumented user 96126 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96126 AUC after training: 0.5
User 96126 does not improve AUC. Reverting changes.
Training on augumented user 4435 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4435 AUC after training: 0.5
User 4435 does not improve AUC. Reverting changes.
Training on augumented user 29600 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29600 AUC after training: 0.5
User 29600 does not improve AUC. Reverting changes.
Training on augumented user 26081 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26081 AUC after training: 0.5
User 26081 does not improve AUC. Reverting changes.
Training on augumented user 18996 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18996 AUC after training: 0.5
User 18996 does not improve AUC. Reverting changes.
Training on augumented user 69198 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69198 AUC after training: 0.5
User 69198 does not improve AUC. Reverting changes.
Training on augumented user 71038 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71038 AUC after training: 0.5
User 71038 does not improve AUC. Reverting changes.
Training on augumented user 96050 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96050 AUC after training: 0.5
User 96050 does not improve AUC. Reverting changes.
Training on augumented user 60747 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60747 AUC after training: 0.5
User 60747 does not improve AUC. Reverting changes.
Training on augumented user 20058 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20058 AUC after training: 0.5
User 20058 does not improve AUC. Reverting changes.
Training on augumented user 96524 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96524 AUC after training: 0.5
User 96524 does not improve AUC. Reverting changes.
Training on augumented user 68764 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68764 AUC after training: 0.5
User 68764 does not improve AUC. Reverting changes.
Training on augumented user 109509 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109509 AUC after training: 0.5
User 109509 does not improve AUC. Reverting changes.
Training on augumented user 82782 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82782 AUC after training: 0.5
User 82782 does not improve AUC. Reverting changes.
Training on augumented user 67660 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67660 AUC after training: 0.5
User 67660 does not improve AUC. Reverting changes.
Training on augumented user 47132 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47132 AUC after training: 0.5
User 47132 does not improve AUC. Reverting changes.
Training on augumented user 85524 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85524 AUC after training: 0.5
User 85524 does not improve AUC. Reverting changes.
Training on augumented user 107994 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107994 AUC after training: 0.5
User 107994 does not improve AUC. Reverting changes.
Training on augumented user 57186 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57186 AUC after training: 0.5
User 57186 does not improve AUC. Reverting changes.
Training on augumented user 53785 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53785 AUC after training: 0.5
User 53785 does not improve AUC. Reverting changes.
Training on augumented user 83042 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83042 AUC after training: 0.5
User 83042 does not improve AUC. Reverting changes.
Training on augumented user 99401 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99401 AUC after training: 0.5
User 99401 does not improve AUC. Reverting changes.
Training on augumented user 98712 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98712 AUC after training: 0.5
User 98712 does not improve AUC. Reverting changes.
Training on augumented user 75936 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75936 AUC after training: 0.5
User 75936 does not improve AUC. Reverting changes.
Training on augumented user 101863 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101863 AUC after training: 0.5
User 101863 does not improve AUC. Reverting changes.
Training on augumented user 112997 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112997 AUC after training: 0.5
User 112997 does not improve AUC. Reverting changes.
Training on augumented user 130571 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130571 AUC after training: 0.5
User 130571 does not improve AUC. Reverting changes.
Training on augumented user 64557 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64557 AUC after training: 0.5
User 64557 does not improve AUC. Reverting changes.
Training on augumented user 117073 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117073 AUC after training: 0.5
User 117073 does not improve AUC. Reverting changes.
Training on augumented user 10935 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10935 AUC after training: 0.5
User 10935 does not improve AUC. Reverting changes.
Training on augumented user 99143 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99143 AUC after training: 0.5
User 99143 does not improve AUC. Reverting changes.
Training on augumented user 90771 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90771 AUC after training: 0.5
User 90771 does not improve AUC. Reverting changes.
Training on augumented user 27894 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27894 AUC after training: 0.5
User 27894 does not improve AUC. Reverting changes.
Training on augumented user 60694 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60694 AUC after training: 0.5
User 60694 does not improve AUC. Reverting changes.
Training on augumented user 80352 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80352 AUC after training: 0.5
User 80352 does not improve AUC. Reverting changes.
Training on augumented user 130945 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130945 AUC after training: 0.5
User 130945 does not improve AUC. Reverting changes.
Training on augumented user 5875 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5875 AUC after training: 0.5
User 5875 does not improve AUC. Reverting changes.
Training on augumented user 100176 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100176 AUC after training: 0.5
User 100176 does not improve AUC. Reverting changes.
Training on augumented user 74377 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74377 AUC after training: 0.5
User 74377 does not improve AUC. Reverting changes.
Training on augumented user 44175 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44175 AUC after training: 0.5
User 44175 does not improve AUC. Reverting changes.
Training on augumented user 61436 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61436 AUC after training: 0.5
User 61436 does not improve AUC. Reverting changes.
Training on augumented user 39543 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39543 AUC after training: 0.5
User 39543 does not improve AUC. Reverting changes.
Training on augumented user 86395 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86395 AUC after training: 0.5
User 86395 does not improve AUC. Reverting changes.
Training on augumented user 74911 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74911 AUC after training: 0.5
User 74911 does not improve AUC. Reverting changes.
Training on augumented user 83501 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83501 AUC after training: 0.5
User 83501 does not improve AUC. Reverting changes.
Training on augumented user 44570 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44570 AUC after training: 0.5
User 44570 does not improve AUC. Reverting changes.
Training on augumented user 30098 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30098 AUC after training: 0.5
User 30098 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:21:29.193468] start test user 15701 79/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:29.608611] start test user 15701 79/568 recall augumented users by random, augumented_users = [98696, 88232, 78176, 44956, 14326, 59465, 53598, 127235, 111212, 58341, 80965, 74706, 86821, 80685, 108998, 110669, 34069, 94911, 116966, 123915, 23689, 102505, 79196, 22936, 116863, 111843, 58276, 63333, 123661, 5794, 61105, 87898, 56622, 105772, 32388, 48926, 105250, 95885, 68520, 44763, 124667, 85087, 77932, 118687, 72558, 104767, 37174, 41040, 131888, 81383]
[2024-12-02 18:21:29.626546] user = 15701 Cloud 79/568
[2024-12-02 18:21:29.689534] user = 15701 Local 79/568
[2024-12-02 18:21:30.135461] user = 15701 Local+ 79/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:32.996840] user = 15701 MPDA- 79/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5467308257419924
Training on augumented user 98696 0/50 current_auc = 0.5467308257419924
User 98696 AUC after training: 0.5471054951513371
User 98696 improves AUC. Keeping the model.
Training on augumented user 88232 1/50 current_auc = 0.5471054951513371
User 88232 AUC after training: 0.5466867469879517
User 88232 does not improve AUC. Reverting changes.
Training on augumented user 78176 2/50 current_auc = 0.5471054951513371
User 78176 AUC after training: 0.5469659124302086
User 78176 does not improve AUC. Reverting changes.
Training on augumented user 44956 3/50 current_auc = 0.5471054951513371
User 44956 AUC after training: 0.5469365265941816
User 44956 does not improve AUC. Reverting changes.
Training on augumented user 14326 4/50 current_auc = 0.5471054951513371
User 14326 AUC after training: 0.546951219512195
User 14326 does not improve AUC. Reverting changes.
Training on augumented user 59465 5/50 current_auc = 0.5471054951513371
User 59465 AUC after training: 0.5469218336761681
User 59465 does not improve AUC. Reverting changes.
Training on augumented user 53598 6/50 current_auc = 0.5471054951513371
User 53598 AUC after training: 0.5470393770202763
User 53598 does not improve AUC. Reverting changes.
Training on augumented user 127235 7/50 current_auc = 0.5471054951513371
User 127235 AUC after training: 0.5497171613282398
User 127235 improves AUC. Keeping the model.
Training on augumented user 111212 8/50 current_auc = 0.5497171613282398
User 111212 AUC after training: 0.5496363502791654
User 111212 does not improve AUC. Reverting changes.
Training on augumented user 58341 9/50 current_auc = 0.5497171613282398
User 58341 AUC after training: 0.5497465471642667
User 58341 improves AUC. Keeping the model.
Training on augumented user 80965 10/50 current_auc = 0.5497465471642667
User 80965 AUC after training: 0.5496583896561857
User 80965 does not improve AUC. Reverting changes.
Training on augumented user 74706 11/50 current_auc = 0.5497465471642667
User 74706 AUC after training: 0.549709814869233
User 74706 does not improve AUC. Reverting changes.
Training on augumented user 86821 12/50 current_auc = 0.5497465471642667
User 86821 AUC after training: 0.5497392007052601
User 86821 does not improve AUC. Reverting changes.
Training on augumented user 80685 13/50 current_auc = 0.5497465471642667
User 80685 AUC after training: 0.5496143109021452
User 80685 does not improve AUC. Reverting changes.
Training on augumented user 108998 14/50 current_auc = 0.5497465471642667
User 108998 AUC after training: 0.549680429033206
User 108998 does not improve AUC. Reverting changes.
Training on augumented user 110669 15/50 current_auc = 0.5497465471642667
User 110669 AUC after training: 0.5500110196885102
User 110669 improves AUC. Keeping the model.
Training on augumented user 34069 16/50 current_auc = 0.5500110196885102
User 34069 AUC after training: 0.5500110196885101
User 34069 does not improve AUC. Reverting changes.
Training on augumented user 94911 17/50 current_auc = 0.5500110196885102
User 94911 AUC after training: 0.5498971495739053
User 94911 does not improve AUC. Reverting changes.
Training on augumented user 116966 18/50 current_auc = 0.5500110196885102
User 116966 AUC after training: 0.5499302086394358
User 116966 does not improve AUC. Reverting changes.
Training on augumented user 123915 19/50 current_auc = 0.5500110196885102
User 123915 AUC after training: 0.5497024684102262
User 123915 does not improve AUC. Reverting changes.
Training on augumented user 23689 20/50 current_auc = 0.5500110196885102
User 23689 AUC after training: 0.5495996179841316
User 23689 does not improve AUC. Reverting changes.
Training on augumented user 102505 21/50 current_auc = 0.5500110196885102
User 102505 AUC after training: 0.5500477519835439
User 102505 improves AUC. Keeping the model.
Training on augumented user 79196 22/50 current_auc = 0.5500477519835439
User 79196 AUC after training: 0.5500991771965913
User 79196 improves AUC. Keeping the model.
Training on augumented user 22936 23/50 current_auc = 0.5500991771965913
User 22936 AUC after training: 0.5498787834263885
User 22936 does not improve AUC. Reverting changes.
Training on augumented user 116863 24/50 current_auc = 0.5500991771965913
User 116863 AUC after training: 0.5498126652953276
User 116863 does not improve AUC. Reverting changes.
Training on augumented user 111843 25/50 current_auc = 0.5500991771965913
User 111843 AUC after training: 0.5502167205406994
User 111843 improves AUC. Keeping the model.
Training on augumented user 58276 26/50 current_auc = 0.5502167205406994
User 58276 AUC after training: 0.5500330590655303
User 58276 does not improve AUC. Reverting changes.
Training on augumented user 63333 27/50 current_auc = 0.5502167205406994
User 63333 AUC after training: 0.5502607992947399
User 63333 improves AUC. Keeping the model.
Training on augumented user 123661 28/50 current_auc = 0.5502607992947399
User 123661 AUC after training: 0.5501652953276521
User 123661 does not improve AUC. Reverting changes.
Training on augumented user 5794 29/50 current_auc = 0.5502607992947399
User 5794 AUC after training: 0.5500918307375844
User 5794 does not improve AUC. Reverting changes.
Training on augumented user 61105 30/50 current_auc = 0.5502607992947399
User 61105 AUC after training: 0.5493939171319424
User 61105 does not improve AUC. Reverting changes.
Training on augumented user 87898 31/50 current_auc = 0.5502607992947399
User 87898 AUC after training: 0.5484682632970908
User 87898 does not improve AUC. Reverting changes.
Training on augumented user 56622 32/50 current_auc = 0.5502607992947399
User 56622 AUC after training: 0.5501579488686453
User 56622 does not improve AUC. Reverting changes.
Training on augumented user 105772 33/50 current_auc = 0.5502607992947399
User 105772 AUC after training: 0.5501652953276521
User 105772 does not improve AUC. Reverting changes.
Training on augumented user 32388 34/50 current_auc = 0.5502607992947399
User 32388 AUC after training: 0.550319570966794
User 32388 improves AUC. Keeping the model.
Training on augumented user 48926 35/50 current_auc = 0.550319570966794
User 48926 AUC after training: 0.5500697913605642
User 48926 does not improve AUC. Reverting changes.
Training on augumented user 105250 36/50 current_auc = 0.550319570966794
User 105250 AUC after training: 0.5502461063767264
User 105250 does not improve AUC. Reverting changes.
Training on augumented user 95885 37/50 current_auc = 0.550319570966794
User 95885 AUC after training: 0.5504811930649427
User 95885 improves AUC. Keeping the model.
Training on augumented user 68520 38/50 current_auc = 0.5504811930649427
User 68520 AUC after training: 0.5503636497208346
User 68520 does not improve AUC. Reverting changes.
Training on augumented user 44763 39/50 current_auc = 0.5504811930649427
User 44763 AUC after training: 0.5501285630326183
User 44763 does not improve AUC. Reverting changes.
Training on augumented user 124667 40/50 current_auc = 0.5504811930649427
User 124667 AUC after training: 0.5503709961798413
User 124667 does not improve AUC. Reverting changes.
Training on augumented user 85087 41/50 current_auc = 0.5504811930649427
User 85087 AUC after training: 0.5500477519835438
User 85087 does not improve AUC. Reverting changes.
Training on augumented user 77932 42/50 current_auc = 0.5504811930649427
User 77932 AUC after training: 0.5501138701146048
User 77932 does not improve AUC. Reverting changes.
Training on augumented user 118687 43/50 current_auc = 0.5504811930649427
User 118687 AUC after training: 0.5505105789009697
User 118687 improves AUC. Keeping the model.
Training on augumented user 72558 44/50 current_auc = 0.5505105789009697
User 72558 AUC after training: 0.5480862474287393
User 72558 does not improve AUC. Reverting changes.
Training on augumented user 104767 45/50 current_auc = 0.5505105789009697
User 104767 AUC after training: 0.5502240669997062
User 104767 does not improve AUC. Reverting changes.
Training on augumented user 37174 46/50 current_auc = 0.5505105789009697
User 37174 AUC after training: 0.5505252718189833
User 37174 improves AUC. Keeping the model.
Training on augumented user 41040 47/50 current_auc = 0.5505252718189833
User 41040 AUC after training: 0.5510395239494563
User 41040 improves AUC. Keeping the model.
Training on augumented user 131888 48/50 current_auc = 0.5510395239494563
User 131888 AUC after training: 0.551171760211578
User 131888 improves AUC. Keeping the model.
Training on augumented user 81383 49/50 current_auc = 0.551171760211578
User 81383 AUC after training: 0.5506575080811048
User 81383 does not improve AUC. Reverting changes.
[2024-12-02 18:22:07.237159] start test user 15703 80/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:07.735169] start test user 15703 80/568 recall augumented users by random, augumented_users = [134405, 42210, 38522, 55161, 56445, 3287, 88009, 84051, 95900, 117948, 63131, 102318, 69678, 130044, 122950, 36456, 114976, 17651, 73263, 55458, 119521, 40367, 31799, 102670, 82803, 107051, 135245, 57973, 70245, 135559, 87248, 124421, 5568, 119327, 23302, 58274, 33439, 98396, 53004, 20389, 73881, 89396, 44955, 60696, 38187, 126399, 84707, 46979, 107005, 84512]
[2024-12-02 18:22:07.749884] user = 15703 Cloud 80/568
[2024-12-02 18:22:07.760108] user = 15703 Local 80/568
[2024-12-02 18:22:07.825822] user = 15703 Local+ 80/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:10.060249] user = 15703 MPDA- 80/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8871527777777778
Training on augumented user 134405 0/50 current_auc = 0.8871527777777778
User 134405 AUC after training: 0.888888888888889
User 134405 improves AUC. Keeping the model.
Training on augumented user 42210 1/50 current_auc = 0.888888888888889
User 42210 AUC after training: 0.8854166666666666
User 42210 does not improve AUC. Reverting changes.
Training on augumented user 38522 2/50 current_auc = 0.888888888888889
User 38522 AUC after training: 0.8871527777777778
User 38522 does not improve AUC. Reverting changes.
Training on augumented user 55161 3/50 current_auc = 0.888888888888889
User 55161 AUC after training: 0.8871527777777778
User 55161 does not improve AUC. Reverting changes.
Training on augumented user 56445 4/50 current_auc = 0.888888888888889
User 56445 AUC after training: 0.888888888888889
User 56445 does not improve AUC. Reverting changes.
Training on augumented user 3287 5/50 current_auc = 0.888888888888889
User 3287 AUC after training: 0.888888888888889
User 3287 does not improve AUC. Reverting changes.
Training on augumented user 88009 6/50 current_auc = 0.888888888888889
User 88009 AUC after training: 0.888888888888889
User 88009 does not improve AUC. Reverting changes.
Training on augumented user 84051 7/50 current_auc = 0.888888888888889
User 84051 AUC after training: 0.888888888888889
User 84051 does not improve AUC. Reverting changes.
Training on augumented user 95900 8/50 current_auc = 0.888888888888889
User 95900 AUC after training: 0.888888888888889
User 95900 does not improve AUC. Reverting changes.
Training on augumented user 117948 9/50 current_auc = 0.888888888888889
User 117948 AUC after training: 0.8836805555555555
User 117948 does not improve AUC. Reverting changes.
Training on augumented user 63131 10/50 current_auc = 0.888888888888889
User 63131 AUC after training: 0.8854166666666666
User 63131 does not improve AUC. Reverting changes.
Training on augumented user 102318 11/50 current_auc = 0.888888888888889
User 102318 AUC after training: 0.8819444444444445
User 102318 does not improve AUC. Reverting changes.
Training on augumented user 69678 12/50 current_auc = 0.888888888888889
User 69678 AUC after training: 0.888888888888889
User 69678 does not improve AUC. Reverting changes.
Training on augumented user 130044 13/50 current_auc = 0.888888888888889
User 130044 AUC after training: 0.890625
User 130044 improves AUC. Keeping the model.
Training on augumented user 122950 14/50 current_auc = 0.890625
User 122950 AUC after training: 0.8871527777777778
User 122950 does not improve AUC. Reverting changes.
Training on augumented user 36456 15/50 current_auc = 0.890625
User 36456 AUC after training: 0.8871527777777778
User 36456 does not improve AUC. Reverting changes.
Training on augumented user 114976 16/50 current_auc = 0.890625
User 114976 AUC after training: 0.888888888888889
User 114976 does not improve AUC. Reverting changes.
Training on augumented user 17651 17/50 current_auc = 0.890625
User 17651 AUC after training: 0.888888888888889
User 17651 does not improve AUC. Reverting changes.
Training on augumented user 73263 18/50 current_auc = 0.890625
User 73263 AUC after training: 0.8854166666666666
User 73263 does not improve AUC. Reverting changes.
Training on augumented user 55458 19/50 current_auc = 0.890625
User 55458 AUC after training: 0.8854166666666666
User 55458 does not improve AUC. Reverting changes.
Training on augumented user 119521 20/50 current_auc = 0.890625
User 119521 AUC after training: 0.8854166666666666
User 119521 does not improve AUC. Reverting changes.
Training on augumented user 40367 21/50 current_auc = 0.890625
User 40367 AUC after training: 0.890625
User 40367 does not improve AUC. Reverting changes.
Training on augumented user 31799 22/50 current_auc = 0.890625
User 31799 AUC after training: 0.890625
User 31799 does not improve AUC. Reverting changes.
Training on augumented user 102670 23/50 current_auc = 0.890625
User 102670 AUC after training: 0.8854166666666666
User 102670 does not improve AUC. Reverting changes.
Training on augumented user 82803 24/50 current_auc = 0.890625
User 82803 AUC after training: 0.890625
User 82803 does not improve AUC. Reverting changes.
Training on augumented user 107051 25/50 current_auc = 0.890625
User 107051 AUC after training: 0.8854166666666666
User 107051 does not improve AUC. Reverting changes.
Training on augumented user 135245 26/50 current_auc = 0.890625
User 135245 AUC after training: 0.8871527777777778
User 135245 does not improve AUC. Reverting changes.
Training on augumented user 57973 27/50 current_auc = 0.890625
User 57973 AUC after training: 0.8871527777777778
User 57973 does not improve AUC. Reverting changes.
Training on augumented user 70245 28/50 current_auc = 0.890625
User 70245 AUC after training: 0.8819444444444445
User 70245 does not improve AUC. Reverting changes.
Training on augumented user 135559 29/50 current_auc = 0.890625
User 135559 AUC after training: 0.8854166666666666
User 135559 does not improve AUC. Reverting changes.
Training on augumented user 87248 30/50 current_auc = 0.890625
User 87248 AUC after training: 0.890625
User 87248 does not improve AUC. Reverting changes.
Training on augumented user 124421 31/50 current_auc = 0.890625
User 124421 AUC after training: 0.888888888888889
User 124421 does not improve AUC. Reverting changes.
Training on augumented user 5568 32/50 current_auc = 0.890625
User 5568 AUC after training: 0.8871527777777778
User 5568 does not improve AUC. Reverting changes.
Training on augumented user 119327 33/50 current_auc = 0.890625
User 119327 AUC after training: 0.888888888888889
User 119327 does not improve AUC. Reverting changes.
Training on augumented user 23302 34/50 current_auc = 0.890625
User 23302 AUC after training: 0.890625
User 23302 does not improve AUC. Reverting changes.
Training on augumented user 58274 35/50 current_auc = 0.890625
User 58274 AUC after training: 0.8871527777777778
User 58274 does not improve AUC. Reverting changes.
Training on augumented user 33439 36/50 current_auc = 0.890625
User 33439 AUC after training: 0.890625
User 33439 does not improve AUC. Reverting changes.
Training on augumented user 98396 37/50 current_auc = 0.890625
User 98396 AUC after training: 0.8871527777777778
User 98396 does not improve AUC. Reverting changes.
Training on augumented user 53004 38/50 current_auc = 0.890625
User 53004 AUC after training: 0.890625
User 53004 does not improve AUC. Reverting changes.
Training on augumented user 20389 39/50 current_auc = 0.890625
User 20389 AUC after training: 0.888888888888889
User 20389 does not improve AUC. Reverting changes.
Training on augumented user 73881 40/50 current_auc = 0.890625
User 73881 AUC after training: 0.890625
User 73881 does not improve AUC. Reverting changes.
Training on augumented user 89396 41/50 current_auc = 0.890625
User 89396 AUC after training: 0.890625
User 89396 does not improve AUC. Reverting changes.
Training on augumented user 44955 42/50 current_auc = 0.890625
User 44955 AUC after training: 0.888888888888889
User 44955 does not improve AUC. Reverting changes.
Training on augumented user 60696 43/50 current_auc = 0.890625
User 60696 AUC after training: 0.8854166666666666
User 60696 does not improve AUC. Reverting changes.
Training on augumented user 38187 44/50 current_auc = 0.890625
User 38187 AUC after training: 0.890625
User 38187 does not improve AUC. Reverting changes.
Training on augumented user 126399 45/50 current_auc = 0.890625
User 126399 AUC after training: 0.888888888888889
User 126399 does not improve AUC. Reverting changes.
Training on augumented user 84707 46/50 current_auc = 0.890625
User 84707 AUC after training: 0.888888888888889
User 84707 does not improve AUC. Reverting changes.
Training on augumented user 46979 47/50 current_auc = 0.890625
User 46979 AUC after training: 0.8854166666666666
User 46979 does not improve AUC. Reverting changes.
Training on augumented user 107005 48/50 current_auc = 0.890625
User 107005 AUC after training: 0.890625
User 107005 does not improve AUC. Reverting changes.
Training on augumented user 84512 49/50 current_auc = 0.890625
User 84512 AUC after training: 0.8854166666666666
User 84512 does not improve AUC. Reverting changes.
[2024-12-02 18:22:39.980323] start test user 15772 81/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:40.855283] start test user 15772 81/568 recall augumented users by random, augumented_users = [4846, 44060, 119939, 31854, 122935, 98778, 67356, 44006, 45069, 107418, 130812, 82429, 120254, 44176, 52169, 94065, 99139, 80713, 112600, 122195, 77723, 105488, 24077, 38448, 107571, 109348, 11066, 122272, 52456, 42345, 111771, 120914, 56506, 99594, 111314, 6663, 93379, 42106, 127639, 27657, 113659, 69464, 54668, 52024, 85432, 20209, 107671, 4904, 137687, 96819]
[2024-12-02 18:22:40.877098] user = 15772 Cloud 81/568
[2024-12-02 18:22:40.893082] user = 15772 Local 81/568
[2024-12-02 18:22:40.969246] user = 15772 Local+ 81/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:42.924598] user = 15772 MPDA- 81/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.22222222222222224
Training on augumented user 4846 0/50 current_auc = 0.22222222222222224
User 4846 AUC after training: 0.22222222222222224
User 4846 does not improve AUC. Reverting changes.
Training on augumented user 44060 1/50 current_auc = 0.22222222222222224
User 44060 AUC after training: 0.22222222222222224
User 44060 does not improve AUC. Reverting changes.
Training on augumented user 119939 2/50 current_auc = 0.22222222222222224
User 119939 AUC after training: 0.22222222222222224
User 119939 does not improve AUC. Reverting changes.
Training on augumented user 31854 3/50 current_auc = 0.22222222222222224
User 31854 AUC after training: 0.22222222222222224
User 31854 does not improve AUC. Reverting changes.
Training on augumented user 122935 4/50 current_auc = 0.22222222222222224
User 122935 AUC after training: 0.22222222222222224
User 122935 does not improve AUC. Reverting changes.
Training on augumented user 98778 5/50 current_auc = 0.22222222222222224
User 98778 AUC after training: 0.22222222222222224
User 98778 does not improve AUC. Reverting changes.
Training on augumented user 67356 6/50 current_auc = 0.22222222222222224
User 67356 AUC after training: 0.22222222222222224
User 67356 does not improve AUC. Reverting changes.
Training on augumented user 44006 7/50 current_auc = 0.22222222222222224
User 44006 AUC after training: 0.22222222222222224
User 44006 does not improve AUC. Reverting changes.
Training on augumented user 45069 8/50 current_auc = 0.22222222222222224
User 45069 AUC after training: 0.22222222222222224
User 45069 does not improve AUC. Reverting changes.
Training on augumented user 107418 9/50 current_auc = 0.22222222222222224
User 107418 AUC after training: 0.22222222222222224
User 107418 does not improve AUC. Reverting changes.
Training on augumented user 130812 10/50 current_auc = 0.22222222222222224
User 130812 AUC after training: 0.22222222222222224
User 130812 does not improve AUC. Reverting changes.
Training on augumented user 82429 11/50 current_auc = 0.22222222222222224
User 82429 AUC after training: 0.22222222222222224
User 82429 does not improve AUC. Reverting changes.
Training on augumented user 120254 12/50 current_auc = 0.22222222222222224
User 120254 AUC after training: 0.22222222222222224
User 120254 does not improve AUC. Reverting changes.
Training on augumented user 44176 13/50 current_auc = 0.22222222222222224
User 44176 AUC after training: 0.22222222222222224
User 44176 does not improve AUC. Reverting changes.
Training on augumented user 52169 14/50 current_auc = 0.22222222222222224
User 52169 AUC after training: 0.22222222222222224
User 52169 does not improve AUC. Reverting changes.
Training on augumented user 94065 15/50 current_auc = 0.22222222222222224
User 94065 AUC after training: 0.22222222222222224
User 94065 does not improve AUC. Reverting changes.
Training on augumented user 99139 16/50 current_auc = 0.22222222222222224
User 99139 AUC after training: 0.22222222222222224
User 99139 does not improve AUC. Reverting changes.
Training on augumented user 80713 17/50 current_auc = 0.22222222222222224
User 80713 AUC after training: 0.22222222222222224
User 80713 does not improve AUC. Reverting changes.
Training on augumented user 112600 18/50 current_auc = 0.22222222222222224
User 112600 AUC after training: 0.22222222222222224
User 112600 does not improve AUC. Reverting changes.
Training on augumented user 122195 19/50 current_auc = 0.22222222222222224
User 122195 AUC after training: 0.22222222222222224
User 122195 does not improve AUC. Reverting changes.
Training on augumented user 77723 20/50 current_auc = 0.22222222222222224
User 77723 AUC after training: 0.22222222222222224
User 77723 does not improve AUC. Reverting changes.
Training on augumented user 105488 21/50 current_auc = 0.22222222222222224
User 105488 AUC after training: 0.22222222222222224
User 105488 does not improve AUC. Reverting changes.
Training on augumented user 24077 22/50 current_auc = 0.22222222222222224
User 24077 AUC after training: 0.22222222222222224
User 24077 does not improve AUC. Reverting changes.
Training on augumented user 38448 23/50 current_auc = 0.22222222222222224
User 38448 AUC after training: 0.22222222222222224
User 38448 does not improve AUC. Reverting changes.
Training on augumented user 107571 24/50 current_auc = 0.22222222222222224
User 107571 AUC after training: 0.22222222222222224
User 107571 does not improve AUC. Reverting changes.
Training on augumented user 109348 25/50 current_auc = 0.22222222222222224
User 109348 AUC after training: 0.22222222222222224
User 109348 does not improve AUC. Reverting changes.
Training on augumented user 11066 26/50 current_auc = 0.22222222222222224
User 11066 AUC after training: 0.22222222222222224
User 11066 does not improve AUC. Reverting changes.
Training on augumented user 122272 27/50 current_auc = 0.22222222222222224
User 122272 AUC after training: 0.22222222222222224
User 122272 does not improve AUC. Reverting changes.
Training on augumented user 52456 28/50 current_auc = 0.22222222222222224
User 52456 AUC after training: 0.22222222222222224
User 52456 does not improve AUC. Reverting changes.
Training on augumented user 42345 29/50 current_auc = 0.22222222222222224
User 42345 AUC after training: 0.22222222222222224
User 42345 does not improve AUC. Reverting changes.
Training on augumented user 111771 30/50 current_auc = 0.22222222222222224
User 111771 AUC after training: 0.22222222222222224
User 111771 does not improve AUC. Reverting changes.
Training on augumented user 120914 31/50 current_auc = 0.22222222222222224
User 120914 AUC after training: 0.22222222222222224
User 120914 does not improve AUC. Reverting changes.
Training on augumented user 56506 32/50 current_auc = 0.22222222222222224
User 56506 AUC after training: 0.22222222222222224
User 56506 does not improve AUC. Reverting changes.
Training on augumented user 99594 33/50 current_auc = 0.22222222222222224
User 99594 AUC after training: 0.22222222222222224
User 99594 does not improve AUC. Reverting changes.
Training on augumented user 111314 34/50 current_auc = 0.22222222222222224
User 111314 AUC after training: 0.22222222222222224
User 111314 does not improve AUC. Reverting changes.
Training on augumented user 6663 35/50 current_auc = 0.22222222222222224
User 6663 AUC after training: 0.22222222222222224
User 6663 does not improve AUC. Reverting changes.
Training on augumented user 93379 36/50 current_auc = 0.22222222222222224
User 93379 AUC after training: 0.22222222222222224
User 93379 does not improve AUC. Reverting changes.
Training on augumented user 42106 37/50 current_auc = 0.22222222222222224
User 42106 AUC after training: 0.22222222222222224
User 42106 does not improve AUC. Reverting changes.
Training on augumented user 127639 38/50 current_auc = 0.22222222222222224
User 127639 AUC after training: 0.22222222222222224
User 127639 does not improve AUC. Reverting changes.
Training on augumented user 27657 39/50 current_auc = 0.22222222222222224
User 27657 AUC after training: 0.22222222222222224
User 27657 does not improve AUC. Reverting changes.
Training on augumented user 113659 40/50 current_auc = 0.22222222222222224
User 113659 AUC after training: 0.22222222222222224
User 113659 does not improve AUC. Reverting changes.
Training on augumented user 69464 41/50 current_auc = 0.22222222222222224
User 69464 AUC after training: 0.22222222222222224
User 69464 does not improve AUC. Reverting changes.
Training on augumented user 54668 42/50 current_auc = 0.22222222222222224
User 54668 AUC after training: 0.22222222222222224
User 54668 does not improve AUC. Reverting changes.
Training on augumented user 52024 43/50 current_auc = 0.22222222222222224
User 52024 AUC after training: 0.22222222222222224
User 52024 does not improve AUC. Reverting changes.
Training on augumented user 85432 44/50 current_auc = 0.22222222222222224
User 85432 AUC after training: 0.22222222222222224
User 85432 does not improve AUC. Reverting changes.
Training on augumented user 20209 45/50 current_auc = 0.22222222222222224
User 20209 AUC after training: 0.22222222222222224
User 20209 does not improve AUC. Reverting changes.
Training on augumented user 107671 46/50 current_auc = 0.22222222222222224
User 107671 AUC after training: 0.22222222222222224
User 107671 does not improve AUC. Reverting changes.
Training on augumented user 4904 47/50 current_auc = 0.22222222222222224
User 4904 AUC after training: 0.22222222222222224
User 4904 does not improve AUC. Reverting changes.
Training on augumented user 137687 48/50 current_auc = 0.22222222222222224
User 137687 AUC after training: 0.22222222222222224
User 137687 does not improve AUC. Reverting changes.
Training on augumented user 96819 49/50 current_auc = 0.22222222222222224
User 96819 AUC after training: 0.22222222222222224
User 96819 does not improve AUC. Reverting changes.
[2024-12-02 18:23:10.522617] start test user 15796 82/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:11.285744] start test user 15796 82/568 recall augumented users by random, augumented_users = [66286, 10880, 73478, 54705, 59848, 75283, 19085, 97774, 11090, 109763, 41461, 18820, 102899, 98605, 107313, 123893, 26400, 112935, 31097, 70948, 2138, 111753, 49332, 82207, 22565, 105835, 99231, 115224, 91659, 69007, 119493, 67059, 11064, 120580, 31425, 21750, 119779, 133862, 129521, 83115, 64752, 70678, 40624, 114149, 66754, 79955, 77183, 44758, 40957, 18087]
[2024-12-02 18:23:11.307003] user = 15796 Cloud 82/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:23:11.314037] user = 15796 Local 82/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:23:11.373768] user = 15796 Local+ 82/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:23:13.731405] user = 15796 MPDA- 82/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 66286 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66286 AUC after training: 0.5
User 66286 does not improve AUC. Reverting changes.
Training on augumented user 10880 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10880 AUC after training: 0.5
User 10880 does not improve AUC. Reverting changes.
Training on augumented user 73478 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73478 AUC after training: 0.5
User 73478 does not improve AUC. Reverting changes.
Training on augumented user 54705 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54705 AUC after training: 0.5
User 54705 does not improve AUC. Reverting changes.
Training on augumented user 59848 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59848 AUC after training: 0.5
User 59848 does not improve AUC. Reverting changes.
Training on augumented user 75283 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75283 AUC after training: 0.5
User 75283 does not improve AUC. Reverting changes.
Training on augumented user 19085 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19085 AUC after training: 0.5
User 19085 does not improve AUC. Reverting changes.
Training on augumented user 97774 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97774 AUC after training: 0.5
User 97774 does not improve AUC. Reverting changes.
Training on augumented user 11090 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11090 AUC after training: 0.5
User 11090 does not improve AUC. Reverting changes.
Training on augumented user 109763 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109763 AUC after training: 0.5
User 109763 does not improve AUC. Reverting changes.
Training on augumented user 41461 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41461 AUC after training: 0.5
User 41461 does not improve AUC. Reverting changes.
Training on augumented user 18820 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18820 AUC after training: 0.5
User 18820 does not improve AUC. Reverting changes.
Training on augumented user 102899 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102899 AUC after training: 0.5
User 102899 does not improve AUC. Reverting changes.
Training on augumented user 98605 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98605 AUC after training: 0.5
User 98605 does not improve AUC. Reverting changes.
Training on augumented user 107313 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107313 AUC after training: 0.5
User 107313 does not improve AUC. Reverting changes.
Training on augumented user 123893 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123893 AUC after training: 0.5
User 123893 does not improve AUC. Reverting changes.
Training on augumented user 26400 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26400 AUC after training: 0.5
User 26400 does not improve AUC. Reverting changes.
Training on augumented user 112935 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112935 AUC after training: 0.5
User 112935 does not improve AUC. Reverting changes.
Training on augumented user 31097 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31097 AUC after training: 0.5
User 31097 does not improve AUC. Reverting changes.
Training on augumented user 70948 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70948 AUC after training: 0.5
User 70948 does not improve AUC. Reverting changes.
Training on augumented user 2138 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2138 AUC after training: 0.5
User 2138 does not improve AUC. Reverting changes.
Training on augumented user 111753 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111753 AUC after training: 0.5
User 111753 does not improve AUC. Reverting changes.
Training on augumented user 49332 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49332 AUC after training: 0.5
User 49332 does not improve AUC. Reverting changes.
Training on augumented user 82207 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82207 AUC after training: 0.5
User 82207 does not improve AUC. Reverting changes.
Training on augumented user 22565 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22565 AUC after training: 0.5
User 22565 does not improve AUC. Reverting changes.
Training on augumented user 105835 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105835 AUC after training: 0.5
User 105835 does not improve AUC. Reverting changes.
Training on augumented user 99231 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99231 AUC after training: 0.5
User 99231 does not improve AUC. Reverting changes.
Training on augumented user 115224 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115224 AUC after training: 0.5
User 115224 does not improve AUC. Reverting changes.
Training on augumented user 91659 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91659 AUC after training: 0.5
User 91659 does not improve AUC. Reverting changes.
Training on augumented user 69007 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69007 AUC after training: 0.5
User 69007 does not improve AUC. Reverting changes.
Training on augumented user 119493 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119493 AUC after training: 0.5
User 119493 does not improve AUC. Reverting changes.
Training on augumented user 67059 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67059 AUC after training: 0.5
User 67059 does not improve AUC. Reverting changes.
Training on augumented user 11064 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11064 AUC after training: 0.5
User 11064 does not improve AUC. Reverting changes.
Training on augumented user 120580 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120580 AUC after training: 0.5
User 120580 does not improve AUC. Reverting changes.
Training on augumented user 31425 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31425 AUC after training: 0.5
User 31425 does not improve AUC. Reverting changes.
Training on augumented user 21750 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21750 AUC after training: 0.5
User 21750 does not improve AUC. Reverting changes.
Training on augumented user 119779 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119779 AUC after training: 0.5
User 119779 does not improve AUC. Reverting changes.
Training on augumented user 133862 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133862 AUC after training: 0.5
User 133862 does not improve AUC. Reverting changes.
Training on augumented user 129521 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129521 AUC after training: 0.5
User 129521 does not improve AUC. Reverting changes.
Training on augumented user 83115 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83115 AUC after training: 0.5
User 83115 does not improve AUC. Reverting changes.
Training on augumented user 64752 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64752 AUC after training: 0.5
User 64752 does not improve AUC. Reverting changes.
Training on augumented user 70678 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70678 AUC after training: 0.5
User 70678 does not improve AUC. Reverting changes.
Training on augumented user 40624 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40624 AUC after training: 0.5
User 40624 does not improve AUC. Reverting changes.
Training on augumented user 114149 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114149 AUC after training: 0.5
User 114149 does not improve AUC. Reverting changes.
Training on augumented user 66754 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66754 AUC after training: 0.5
User 66754 does not improve AUC. Reverting changes.
Training on augumented user 79955 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79955 AUC after training: 0.5
User 79955 does not improve AUC. Reverting changes.
Training on augumented user 77183 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77183 AUC after training: 0.5
User 77183 does not improve AUC. Reverting changes.
Training on augumented user 44758 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44758 AUC after training: 0.5
User 44758 does not improve AUC. Reverting changes.
Training on augumented user 40957 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40957 AUC after training: 0.5
User 40957 does not improve AUC. Reverting changes.
Training on augumented user 18087 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18087 AUC after training: 0.5
User 18087 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:23:37.205245] start test user 15803 83/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:37.607683] start test user 15803 83/568 recall augumented users by random, augumented_users = [78965, 114795, 4300, 40782, 86156, 82473, 107536, 112263, 49156, 29024, 69133, 136842, 136594, 107101, 28062, 116915, 78113, 33356, 24743, 17715, 83181, 122305, 25977, 52095, 135531, 20270, 116199, 104678, 101887, 27040, 18790, 28298, 52365, 47052, 123516, 49147, 6682, 61992, 20640, 63949, 61066, 44286, 83519, 80870, 117902, 61291, 13983, 33225, 30089, 124063]
[2024-12-02 18:23:37.623395] user = 15803 Cloud 83/568
[2024-12-02 18:23:37.634666] user = 15803 Local 83/568
[2024-12-02 18:23:37.826680] user = 15803 Local+ 83/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:40.416116] user = 15803 MPDA- 83/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.44166666666666665
Training on augumented user 78965 0/50 current_auc = 0.44166666666666665
User 78965 AUC after training: 0.44166666666666665
User 78965 does not improve AUC. Reverting changes.
Training on augumented user 114795 1/50 current_auc = 0.44166666666666665
User 114795 AUC after training: 0.44166666666666665
User 114795 does not improve AUC. Reverting changes.
Training on augumented user 4300 2/50 current_auc = 0.44166666666666665
User 4300 AUC after training: 0.44166666666666665
User 4300 does not improve AUC. Reverting changes.
Training on augumented user 40782 3/50 current_auc = 0.44166666666666665
User 40782 AUC after training: 0.44166666666666665
User 40782 does not improve AUC. Reverting changes.
Training on augumented user 86156 4/50 current_auc = 0.44166666666666665
User 86156 AUC after training: 0.44166666666666665
User 86156 does not improve AUC. Reverting changes.
Training on augumented user 82473 5/50 current_auc = 0.44166666666666665
User 82473 AUC after training: 0.44166666666666665
User 82473 does not improve AUC. Reverting changes.
Training on augumented user 107536 6/50 current_auc = 0.44166666666666665
User 107536 AUC after training: 0.44166666666666665
User 107536 does not improve AUC. Reverting changes.
Training on augumented user 112263 7/50 current_auc = 0.44166666666666665
User 112263 AUC after training: 0.44166666666666665
User 112263 does not improve AUC. Reverting changes.
Training on augumented user 49156 8/50 current_auc = 0.44166666666666665
User 49156 AUC after training: 0.44999999999999996
User 49156 improves AUC. Keeping the model.
Training on augumented user 29024 9/50 current_auc = 0.44999999999999996
User 29024 AUC after training: 0.44999999999999996
User 29024 does not improve AUC. Reverting changes.
Training on augumented user 69133 10/50 current_auc = 0.44999999999999996
User 69133 AUC after training: 0.44999999999999996
User 69133 does not improve AUC. Reverting changes.
Training on augumented user 136842 11/50 current_auc = 0.44999999999999996
User 136842 AUC after training: 0.44999999999999996
User 136842 does not improve AUC. Reverting changes.
Training on augumented user 136594 12/50 current_auc = 0.44999999999999996
User 136594 AUC after training: 0.44999999999999996
User 136594 does not improve AUC. Reverting changes.
Training on augumented user 107101 13/50 current_auc = 0.44999999999999996
User 107101 AUC after training: 0.44166666666666665
User 107101 does not improve AUC. Reverting changes.
Training on augumented user 28062 14/50 current_auc = 0.44999999999999996
User 28062 AUC after training: 0.44166666666666665
User 28062 does not improve AUC. Reverting changes.
Training on augumented user 116915 15/50 current_auc = 0.44999999999999996
User 116915 AUC after training: 0.44166666666666665
User 116915 does not improve AUC. Reverting changes.
Training on augumented user 78113 16/50 current_auc = 0.44999999999999996
User 78113 AUC after training: 0.44999999999999996
User 78113 does not improve AUC. Reverting changes.
Training on augumented user 33356 17/50 current_auc = 0.44999999999999996
User 33356 AUC after training: 0.44166666666666665
User 33356 does not improve AUC. Reverting changes.
Training on augumented user 24743 18/50 current_auc = 0.44999999999999996
User 24743 AUC after training: 0.44999999999999996
User 24743 does not improve AUC. Reverting changes.
Training on augumented user 17715 19/50 current_auc = 0.44999999999999996
User 17715 AUC after training: 0.44999999999999996
User 17715 does not improve AUC. Reverting changes.
Training on augumented user 83181 20/50 current_auc = 0.44999999999999996
User 83181 AUC after training: 0.44999999999999996
User 83181 does not improve AUC. Reverting changes.
Training on augumented user 122305 21/50 current_auc = 0.44999999999999996
User 122305 AUC after training: 0.44166666666666665
User 122305 does not improve AUC. Reverting changes.
Training on augumented user 25977 22/50 current_auc = 0.44999999999999996
User 25977 AUC after training: 0.44166666666666665
User 25977 does not improve AUC. Reverting changes.
Training on augumented user 52095 23/50 current_auc = 0.44999999999999996
User 52095 AUC after training: 0.44999999999999996
User 52095 does not improve AUC. Reverting changes.
Training on augumented user 135531 24/50 current_auc = 0.44999999999999996
User 135531 AUC after training: 0.44999999999999996
User 135531 does not improve AUC. Reverting changes.
Training on augumented user 20270 25/50 current_auc = 0.44999999999999996
User 20270 AUC after training: 0.44999999999999996
User 20270 does not improve AUC. Reverting changes.
Training on augumented user 116199 26/50 current_auc = 0.44999999999999996
User 116199 AUC after training: 0.44166666666666665
User 116199 does not improve AUC. Reverting changes.
Training on augumented user 104678 27/50 current_auc = 0.44999999999999996
User 104678 AUC after training: 0.44166666666666665
User 104678 does not improve AUC. Reverting changes.
Training on augumented user 101887 28/50 current_auc = 0.44999999999999996
User 101887 AUC after training: 0.44999999999999996
User 101887 does not improve AUC. Reverting changes.
Training on augumented user 27040 29/50 current_auc = 0.44999999999999996
User 27040 AUC after training: 0.44166666666666665
User 27040 does not improve AUC. Reverting changes.
Training on augumented user 18790 30/50 current_auc = 0.44999999999999996
User 18790 AUC after training: 0.44999999999999996
User 18790 does not improve AUC. Reverting changes.
Training on augumented user 28298 31/50 current_auc = 0.44999999999999996
User 28298 AUC after training: 0.44166666666666665
User 28298 does not improve AUC. Reverting changes.
Training on augumented user 52365 32/50 current_auc = 0.44999999999999996
User 52365 AUC after training: 0.44999999999999996
User 52365 does not improve AUC. Reverting changes.
Training on augumented user 47052 33/50 current_auc = 0.44999999999999996
User 47052 AUC after training: 0.44166666666666665
User 47052 does not improve AUC. Reverting changes.
Training on augumented user 123516 34/50 current_auc = 0.44999999999999996
User 123516 AUC after training: 0.44999999999999996
User 123516 does not improve AUC. Reverting changes.
Training on augumented user 49147 35/50 current_auc = 0.44999999999999996
User 49147 AUC after training: 0.44999999999999996
User 49147 does not improve AUC. Reverting changes.
Training on augumented user 6682 36/50 current_auc = 0.44999999999999996
User 6682 AUC after training: 0.44166666666666665
User 6682 does not improve AUC. Reverting changes.
Training on augumented user 61992 37/50 current_auc = 0.44999999999999996
User 61992 AUC after training: 0.44999999999999996
User 61992 does not improve AUC. Reverting changes.
Training on augumented user 20640 38/50 current_auc = 0.44999999999999996
User 20640 AUC after training: 0.44999999999999996
User 20640 does not improve AUC. Reverting changes.
Training on augumented user 63949 39/50 current_auc = 0.44999999999999996
User 63949 AUC after training: 0.44166666666666665
User 63949 does not improve AUC. Reverting changes.
Training on augumented user 61066 40/50 current_auc = 0.44999999999999996
User 61066 AUC after training: 0.44999999999999996
User 61066 does not improve AUC. Reverting changes.
Training on augumented user 44286 41/50 current_auc = 0.44999999999999996
User 44286 AUC after training: 0.44999999999999996
User 44286 does not improve AUC. Reverting changes.
Training on augumented user 83519 42/50 current_auc = 0.44999999999999996
User 83519 AUC after training: 0.44166666666666665
User 83519 does not improve AUC. Reverting changes.
Training on augumented user 80870 43/50 current_auc = 0.44999999999999996
User 80870 AUC after training: 0.44999999999999996
User 80870 does not improve AUC. Reverting changes.
Training on augumented user 117902 44/50 current_auc = 0.44999999999999996
User 117902 AUC after training: 0.44999999999999996
User 117902 does not improve AUC. Reverting changes.
Training on augumented user 61291 45/50 current_auc = 0.44999999999999996
User 61291 AUC after training: 0.44166666666666665
User 61291 does not improve AUC. Reverting changes.
Training on augumented user 13983 46/50 current_auc = 0.44999999999999996
User 13983 AUC after training: 0.44999999999999996
User 13983 does not improve AUC. Reverting changes.
Training on augumented user 33225 47/50 current_auc = 0.44999999999999996
User 33225 AUC after training: 0.44999999999999996
User 33225 does not improve AUC. Reverting changes.
Training on augumented user 30089 48/50 current_auc = 0.44999999999999996
User 30089 AUC after training: 0.44166666666666665
User 30089 does not improve AUC. Reverting changes.
Training on augumented user 124063 49/50 current_auc = 0.44999999999999996
User 124063 AUC after training: 0.44166666666666665
User 124063 does not improve AUC. Reverting changes.
[2024-12-02 18:24:07.620691] start test user 15812 84/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:08.030677] start test user 15812 84/568 recall augumented users by random, augumented_users = [132995, 134369, 4636, 34945, 130612, 34995, 136853, 106163, 125117, 64131, 23491, 132943, 64790, 129011, 21366, 131397, 108241, 117891, 31088, 136530, 117468, 32065, 12293, 37862, 113442, 63357, 82480, 8951, 103764, 6049, 133898, 58731, 66006, 99313, 119616, 92598, 33616, 9916, 77003, 100108, 123050, 126034, 23262, 68013, 51679, 60979, 47350, 27565, 133985, 42365]
[2024-12-02 18:24:08.045739] user = 15812 Cloud 84/568
[2024-12-02 18:24:08.055433] user = 15812 Local 84/568
[2024-12-02 18:24:08.110749] user = 15812 Local+ 84/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:10.336829] user = 15812 MPDA- 84/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5784313725490197
Training on augumented user 132995 0/50 current_auc = 0.5784313725490197
User 132995 AUC after training: 0.5784313725490197
User 132995 does not improve AUC. Reverting changes.
Training on augumented user 134369 1/50 current_auc = 0.5784313725490197
User 134369 AUC after training: 0.5784313725490197
User 134369 does not improve AUC. Reverting changes.
Training on augumented user 4636 2/50 current_auc = 0.5784313725490197
User 4636 AUC after training: 0.5784313725490197
User 4636 does not improve AUC. Reverting changes.
Training on augumented user 34945 3/50 current_auc = 0.5784313725490197
User 34945 AUC after training: 0.5784313725490197
User 34945 does not improve AUC. Reverting changes.
Training on augumented user 130612 4/50 current_auc = 0.5784313725490197
User 130612 AUC after training: 0.5784313725490197
User 130612 does not improve AUC. Reverting changes.
Training on augumented user 34995 5/50 current_auc = 0.5784313725490197
User 34995 AUC after training: 0.5784313725490197
User 34995 does not improve AUC. Reverting changes.
Training on augumented user 136853 6/50 current_auc = 0.5784313725490197
User 136853 AUC after training: 0.5784313725490197
User 136853 does not improve AUC. Reverting changes.
Training on augumented user 106163 7/50 current_auc = 0.5784313725490197
User 106163 AUC after training: 0.5784313725490197
User 106163 does not improve AUC. Reverting changes.
Training on augumented user 125117 8/50 current_auc = 0.5784313725490197
User 125117 AUC after training: 0.5784313725490197
User 125117 does not improve AUC. Reverting changes.
Training on augumented user 64131 9/50 current_auc = 0.5784313725490197
User 64131 AUC after training: 0.5784313725490197
User 64131 does not improve AUC. Reverting changes.
Training on augumented user 23491 10/50 current_auc = 0.5784313725490197
User 23491 AUC after training: 0.5784313725490197
User 23491 does not improve AUC. Reverting changes.
Training on augumented user 132943 11/50 current_auc = 0.5784313725490197
User 132943 AUC after training: 0.5784313725490197
User 132943 does not improve AUC. Reverting changes.
Training on augumented user 64790 12/50 current_auc = 0.5784313725490197
User 64790 AUC after training: 0.5784313725490197
User 64790 does not improve AUC. Reverting changes.
Training on augumented user 129011 13/50 current_auc = 0.5784313725490197
User 129011 AUC after training: 0.5784313725490197
User 129011 does not improve AUC. Reverting changes.
Training on augumented user 21366 14/50 current_auc = 0.5784313725490197
User 21366 AUC after training: 0.5784313725490197
User 21366 does not improve AUC. Reverting changes.
Training on augumented user 131397 15/50 current_auc = 0.5784313725490197
User 131397 AUC after training: 0.5784313725490197
User 131397 does not improve AUC. Reverting changes.
Training on augumented user 108241 16/50 current_auc = 0.5784313725490197
User 108241 AUC after training: 0.5784313725490197
User 108241 does not improve AUC. Reverting changes.
Training on augumented user 117891 17/50 current_auc = 0.5784313725490197
User 117891 AUC after training: 0.5784313725490197
User 117891 does not improve AUC. Reverting changes.
Training on augumented user 31088 18/50 current_auc = 0.5784313725490197
User 31088 AUC after training: 0.5784313725490197
User 31088 does not improve AUC. Reverting changes.
Training on augumented user 136530 19/50 current_auc = 0.5784313725490197
User 136530 AUC after training: 0.5784313725490197
User 136530 does not improve AUC. Reverting changes.
Training on augumented user 117468 20/50 current_auc = 0.5784313725490197
User 117468 AUC after training: 0.5784313725490197
User 117468 does not improve AUC. Reverting changes.
Training on augumented user 32065 21/50 current_auc = 0.5784313725490197
User 32065 AUC after training: 0.5784313725490197
User 32065 does not improve AUC. Reverting changes.
Training on augumented user 12293 22/50 current_auc = 0.5784313725490197
User 12293 AUC after training: 0.5784313725490197
User 12293 does not improve AUC. Reverting changes.
Training on augumented user 37862 23/50 current_auc = 0.5784313725490197
User 37862 AUC after training: 0.5784313725490197
User 37862 does not improve AUC. Reverting changes.
Training on augumented user 113442 24/50 current_auc = 0.5784313725490197
User 113442 AUC after training: 0.5784313725490197
User 113442 does not improve AUC. Reverting changes.
Training on augumented user 63357 25/50 current_auc = 0.5784313725490197
User 63357 AUC after training: 0.5784313725490197
User 63357 does not improve AUC. Reverting changes.
Training on augumented user 82480 26/50 current_auc = 0.5784313725490197
User 82480 AUC after training: 0.5784313725490197
User 82480 does not improve AUC. Reverting changes.
Training on augumented user 8951 27/50 current_auc = 0.5784313725490197
User 8951 AUC after training: 0.5784313725490197
User 8951 does not improve AUC. Reverting changes.
Training on augumented user 103764 28/50 current_auc = 0.5784313725490197
User 103764 AUC after training: 0.5784313725490197
User 103764 does not improve AUC. Reverting changes.
Training on augumented user 6049 29/50 current_auc = 0.5784313725490197
User 6049 AUC after training: 0.5784313725490197
User 6049 does not improve AUC. Reverting changes.
Training on augumented user 133898 30/50 current_auc = 0.5784313725490197
User 133898 AUC after training: 0.5784313725490197
User 133898 does not improve AUC. Reverting changes.
Training on augumented user 58731 31/50 current_auc = 0.5784313725490197
User 58731 AUC after training: 0.5784313725490197
User 58731 does not improve AUC. Reverting changes.
Training on augumented user 66006 32/50 current_auc = 0.5784313725490197
User 66006 AUC after training: 0.5784313725490197
User 66006 does not improve AUC. Reverting changes.
Training on augumented user 99313 33/50 current_auc = 0.5784313725490197
User 99313 AUC after training: 0.5833333333333334
User 99313 improves AUC. Keeping the model.
Training on augumented user 119616 34/50 current_auc = 0.5833333333333334
User 119616 AUC after training: 0.5833333333333334
User 119616 does not improve AUC. Reverting changes.
Training on augumented user 92598 35/50 current_auc = 0.5833333333333334
User 92598 AUC after training: 0.5833333333333334
User 92598 does not improve AUC. Reverting changes.
Training on augumented user 33616 36/50 current_auc = 0.5833333333333334
User 33616 AUC after training: 0.5833333333333334
User 33616 does not improve AUC. Reverting changes.
Training on augumented user 9916 37/50 current_auc = 0.5833333333333334
User 9916 AUC after training: 0.5833333333333334
User 9916 does not improve AUC. Reverting changes.
Training on augumented user 77003 38/50 current_auc = 0.5833333333333334
User 77003 AUC after training: 0.5833333333333334
User 77003 does not improve AUC. Reverting changes.
Training on augumented user 100108 39/50 current_auc = 0.5833333333333334
User 100108 AUC after training: 0.5833333333333334
User 100108 does not improve AUC. Reverting changes.
Training on augumented user 123050 40/50 current_auc = 0.5833333333333334
User 123050 AUC after training: 0.5833333333333334
User 123050 does not improve AUC. Reverting changes.
Training on augumented user 126034 41/50 current_auc = 0.5833333333333334
User 126034 AUC after training: 0.5833333333333334
User 126034 does not improve AUC. Reverting changes.
Training on augumented user 23262 42/50 current_auc = 0.5833333333333334
User 23262 AUC after training: 0.5833333333333334
User 23262 does not improve AUC. Reverting changes.
Training on augumented user 68013 43/50 current_auc = 0.5833333333333334
User 68013 AUC after training: 0.5833333333333334
User 68013 does not improve AUC. Reverting changes.
Training on augumented user 51679 44/50 current_auc = 0.5833333333333334
User 51679 AUC after training: 0.5833333333333334
User 51679 does not improve AUC. Reverting changes.
Training on augumented user 60979 45/50 current_auc = 0.5833333333333334
User 60979 AUC after training: 0.5833333333333334
User 60979 does not improve AUC. Reverting changes.
Training on augumented user 47350 46/50 current_auc = 0.5833333333333334
User 47350 AUC after training: 0.5833333333333334
User 47350 does not improve AUC. Reverting changes.
Training on augumented user 27565 47/50 current_auc = 0.5833333333333334
User 27565 AUC after training: 0.5833333333333334
User 27565 does not improve AUC. Reverting changes.
Training on augumented user 133985 48/50 current_auc = 0.5833333333333334
User 133985 AUC after training: 0.5833333333333334
User 133985 does not improve AUC. Reverting changes.
Training on augumented user 42365 49/50 current_auc = 0.5833333333333334
User 42365 AUC after training: 0.5833333333333334
User 42365 does not improve AUC. Reverting changes.
[2024-12-02 18:24:42.090229] start test user 15824 85/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:42.523305] start test user 15824 85/568 recall augumented users by random, augumented_users = [125856, 117099, 79937, 123325, 121619, 60731, 12880, 96353, 9494, 82730, 90049, 33746, 102163, 91118, 10185, 59304, 9268, 123294, 123149, 53373, 24592, 68019, 104895, 13849, 95427, 90831, 117422, 84046, 133956, 70276, 98711, 54553, 81020, 114575, 102169, 123967, 70580, 130583, 132619, 68140, 27290, 12504, 65806, 3886, 117805, 108211, 115752, 12731, 122535, 39760]
[2024-12-02 18:24:42.537994] user = 15824 Cloud 85/568
[2024-12-02 18:24:42.551053] user = 15824 Local 85/568
[2024-12-02 18:24:42.578963] user = 15824 Local+ 85/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:44.288225] user = 15824 MPDA- 85/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5817460317460317
Training on augumented user 125856 0/50 current_auc = 0.5817460317460317
User 125856 AUC after training: 0.5793650793650793
User 125856 does not improve AUC. Reverting changes.
Training on augumented user 117099 1/50 current_auc = 0.5817460317460317
User 117099 AUC after training: 0.5825396825396825
User 117099 improves AUC. Keeping the model.
Training on augumented user 79937 2/50 current_auc = 0.5825396825396825
User 79937 AUC after training: 0.5825396825396826
User 79937 improves AUC. Keeping the model.
Training on augumented user 123325 3/50 current_auc = 0.5825396825396826
User 123325 AUC after training: 0.5825396825396825
User 123325 does not improve AUC. Reverting changes.
Training on augumented user 121619 4/50 current_auc = 0.5825396825396826
User 121619 AUC after training: 0.5817460317460317
User 121619 does not improve AUC. Reverting changes.
Training on augumented user 60731 5/50 current_auc = 0.5825396825396826
User 60731 AUC after training: 0.5825396825396826
User 60731 does not improve AUC. Reverting changes.
Training on augumented user 12880 6/50 current_auc = 0.5825396825396826
User 12880 AUC after training: 0.5825396825396826
User 12880 does not improve AUC. Reverting changes.
Training on augumented user 96353 7/50 current_auc = 0.5825396825396826
User 96353 AUC after training: 0.5825396825396826
User 96353 does not improve AUC. Reverting changes.
Training on augumented user 9494 8/50 current_auc = 0.5825396825396826
User 9494 AUC after training: 0.5817460317460317
User 9494 does not improve AUC. Reverting changes.
Training on augumented user 82730 9/50 current_auc = 0.5825396825396826
User 82730 AUC after training: 0.5809523809523809
User 82730 does not improve AUC. Reverting changes.
Training on augumented user 90049 10/50 current_auc = 0.5825396825396826
User 90049 AUC after training: 0.5825396825396826
User 90049 does not improve AUC. Reverting changes.
Training on augumented user 33746 11/50 current_auc = 0.5825396825396826
User 33746 AUC after training: 0.5825396825396826
User 33746 does not improve AUC. Reverting changes.
Training on augumented user 102163 12/50 current_auc = 0.5825396825396826
User 102163 AUC after training: 0.5809523809523809
User 102163 does not improve AUC. Reverting changes.
Training on augumented user 91118 13/50 current_auc = 0.5825396825396826
User 91118 AUC after training: 0.5841269841269842
User 91118 improves AUC. Keeping the model.
Training on augumented user 10185 14/50 current_auc = 0.5841269841269842
User 10185 AUC after training: 0.5849206349206348
User 10185 improves AUC. Keeping the model.
Training on augumented user 59304 15/50 current_auc = 0.5849206349206348
User 59304 AUC after training: 0.5841269841269842
User 59304 does not improve AUC. Reverting changes.
Training on augumented user 9268 16/50 current_auc = 0.5849206349206348
User 9268 AUC after training: 0.584920634920635
User 9268 improves AUC. Keeping the model.
Training on augumented user 123294 17/50 current_auc = 0.584920634920635
User 123294 AUC after training: 0.5841269841269842
User 123294 does not improve AUC. Reverting changes.
Training on augumented user 123149 18/50 current_auc = 0.584920634920635
User 123149 AUC after training: 0.5841269841269842
User 123149 does not improve AUC. Reverting changes.
Training on augumented user 53373 19/50 current_auc = 0.584920634920635
User 53373 AUC after training: 0.584920634920635
User 53373 does not improve AUC. Reverting changes.
Training on augumented user 24592 20/50 current_auc = 0.584920634920635
User 24592 AUC after training: 0.5857142857142856
User 24592 improves AUC. Keeping the model.
Training on augumented user 68019 21/50 current_auc = 0.5857142857142856
User 68019 AUC after training: 0.584920634920635
User 68019 does not improve AUC. Reverting changes.
Training on augumented user 104895 22/50 current_auc = 0.5857142857142856
User 104895 AUC after training: 0.5888888888888889
User 104895 improves AUC. Keeping the model.
Training on augumented user 13849 23/50 current_auc = 0.5888888888888889
User 13849 AUC after training: 0.5777777777777777
User 13849 does not improve AUC. Reverting changes.
Training on augumented user 95427 24/50 current_auc = 0.5888888888888889
User 95427 AUC after training: 0.5880952380952381
User 95427 does not improve AUC. Reverting changes.
Training on augumented user 90831 25/50 current_auc = 0.5888888888888889
User 90831 AUC after training: 0.584126984126984
User 90831 does not improve AUC. Reverting changes.
Training on augumented user 117422 26/50 current_auc = 0.5888888888888889
User 117422 AUC after training: 0.5896825396825397
User 117422 improves AUC. Keeping the model.
Training on augumented user 84046 27/50 current_auc = 0.5896825396825397
User 84046 AUC after training: 0.5873015873015873
User 84046 does not improve AUC. Reverting changes.
Training on augumented user 133956 28/50 current_auc = 0.5896825396825397
User 133956 AUC after training: 0.5880952380952381
User 133956 does not improve AUC. Reverting changes.
Training on augumented user 70276 29/50 current_auc = 0.5896825396825397
User 70276 AUC after training: 0.5896825396825397
User 70276 does not improve AUC. Reverting changes.
Training on augumented user 98711 30/50 current_auc = 0.5896825396825397
User 98711 AUC after training: 0.5849206349206348
User 98711 does not improve AUC. Reverting changes.
Training on augumented user 54553 31/50 current_auc = 0.5896825396825397
User 54553 AUC after training: 0.5896825396825397
User 54553 does not improve AUC. Reverting changes.
Training on augumented user 81020 32/50 current_auc = 0.5896825396825397
User 81020 AUC after training: 0.5873015873015873
User 81020 does not improve AUC. Reverting changes.
Training on augumented user 114575 33/50 current_auc = 0.5896825396825397
User 114575 AUC after training: 0.5888888888888889
User 114575 does not improve AUC. Reverting changes.
Training on augumented user 102169 34/50 current_auc = 0.5896825396825397
User 102169 AUC after training: 0.5880952380952381
User 102169 does not improve AUC. Reverting changes.
Training on augumented user 123967 35/50 current_auc = 0.5896825396825397
User 123967 AUC after training: 0.5873015873015872
User 123967 does not improve AUC. Reverting changes.
Training on augumented user 70580 36/50 current_auc = 0.5896825396825397
User 70580 AUC after training: 0.5904761904761905
User 70580 improves AUC. Keeping the model.
Training on augumented user 130583 37/50 current_auc = 0.5904761904761905
User 130583 AUC after training: 0.5873015873015873
User 130583 does not improve AUC. Reverting changes.
Training on augumented user 132619 38/50 current_auc = 0.5904761904761905
User 132619 AUC after training: 0.5865079365079364
User 132619 does not improve AUC. Reverting changes.
Training on augumented user 68140 39/50 current_auc = 0.5904761904761905
User 68140 AUC after training: 0.5825396825396825
User 68140 does not improve AUC. Reverting changes.
Training on augumented user 27290 40/50 current_auc = 0.5904761904761905
User 27290 AUC after training: 0.5880952380952381
User 27290 does not improve AUC. Reverting changes.
Training on augumented user 12504 41/50 current_auc = 0.5904761904761905
User 12504 AUC after training: 0.5896825396825396
User 12504 does not improve AUC. Reverting changes.
Training on augumented user 65806 42/50 current_auc = 0.5904761904761905
User 65806 AUC after training: 0.5849206349206348
User 65806 does not improve AUC. Reverting changes.
Training on augumented user 3886 43/50 current_auc = 0.5904761904761905
User 3886 AUC after training: 0.5865079365079364
User 3886 does not improve AUC. Reverting changes.
Training on augumented user 117805 44/50 current_auc = 0.5904761904761905
User 117805 AUC after training: 0.5865079365079365
User 117805 does not improve AUC. Reverting changes.
Training on augumented user 108211 45/50 current_auc = 0.5904761904761905
User 108211 AUC after training: 0.5873015873015873
User 108211 does not improve AUC. Reverting changes.
Training on augumented user 115752 46/50 current_auc = 0.5904761904761905
User 115752 AUC after training: 0.5825396825396825
User 115752 does not improve AUC. Reverting changes.
Training on augumented user 12731 47/50 current_auc = 0.5904761904761905
User 12731 AUC after training: 0.5873015873015873
User 12731 does not improve AUC. Reverting changes.
Training on augumented user 122535 48/50 current_auc = 0.5904761904761905
User 122535 AUC after training: 0.5873015873015872
User 122535 does not improve AUC. Reverting changes.
Training on augumented user 39760 49/50 current_auc = 0.5904761904761905
User 39760 AUC after training: 0.5873015873015873
User 39760 does not improve AUC. Reverting changes.
[2024-12-02 18:25:12.510552] start test user 15825 86/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:12.977290] start test user 15825 86/568 recall augumented users by random, augumented_users = [125069, 78976, 119916, 19708, 5081, 121366, 102726, 18061, 122992, 47329, 87486, 114801, 92567, 66560, 78906, 78585, 24306, 121431, 44981, 126142, 45689, 87809, 120990, 101042, 37816, 116596, 42523, 10930, 118182, 135523, 115406, 75631, 78863, 53994, 77217, 16995, 20119, 31934, 129653, 109263, 79430, 129743, 137298, 84113, 9234, 110209, 82052, 51568, 38300, 15194]
[2024-12-02 18:25:12.994819] user = 15825 Cloud 86/568
[2024-12-02 18:25:13.010969] user = 15825 Local 86/568
[2024-12-02 18:25:13.071543] user = 15825 Local+ 86/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:15.076324] user = 15825 MPDA- 86/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6004056795131847
Training on augumented user 125069 0/50 current_auc = 0.6004056795131847
User 125069 AUC after training: 0.5973630831643002
User 125069 does not improve AUC. Reverting changes.
Training on augumented user 78976 1/50 current_auc = 0.6004056795131847
User 78976 AUC after training: 0.6014198782961461
User 78976 improves AUC. Keeping the model.
Training on augumented user 119916 2/50 current_auc = 0.6014198782961461
User 119916 AUC after training: 0.6014198782961461
User 119916 does not improve AUC. Reverting changes.
Training on augumented user 19708 3/50 current_auc = 0.6014198782961461
User 19708 AUC after training: 0.5993914807302231
User 19708 does not improve AUC. Reverting changes.
Training on augumented user 5081 4/50 current_auc = 0.6014198782961461
User 5081 AUC after training: 0.5963488843813387
User 5081 does not improve AUC. Reverting changes.
Training on augumented user 121366 5/50 current_auc = 0.6014198782961461
User 121366 AUC after training: 0.5993914807302232
User 121366 does not improve AUC. Reverting changes.
Training on augumented user 102726 6/50 current_auc = 0.6014198782961461
User 102726 AUC after training: 0.6054766734279919
User 102726 improves AUC. Keeping the model.
Training on augumented user 18061 7/50 current_auc = 0.6054766734279919
User 18061 AUC after training: 0.6044624746450304
User 18061 does not improve AUC. Reverting changes.
Training on augumented user 122992 8/50 current_auc = 0.6054766734279919
User 122992 AUC after training: 0.6024340770791076
User 122992 does not improve AUC. Reverting changes.
Training on augumented user 47329 9/50 current_auc = 0.6054766734279919
User 47329 AUC after training: 0.603448275862069
User 47329 does not improve AUC. Reverting changes.
Training on augumented user 87486 10/50 current_auc = 0.6054766734279919
User 87486 AUC after training: 0.6014198782961461
User 87486 does not improve AUC. Reverting changes.
Training on augumented user 114801 11/50 current_auc = 0.6054766734279919
User 114801 AUC after training: 0.5993914807302231
User 114801 does not improve AUC. Reverting changes.
Training on augumented user 92567 12/50 current_auc = 0.6054766734279919
User 92567 AUC after training: 0.6054766734279919
User 92567 does not improve AUC. Reverting changes.
Training on augumented user 66560 13/50 current_auc = 0.6054766734279919
User 66560 AUC after training: 0.6014198782961461
User 66560 does not improve AUC. Reverting changes.
Training on augumented user 78906 14/50 current_auc = 0.6054766734279919
User 78906 AUC after training: 0.6014198782961461
User 78906 does not improve AUC. Reverting changes.
Training on augumented user 78585 15/50 current_auc = 0.6054766734279919
User 78585 AUC after training: 0.6024340770791075
User 78585 does not improve AUC. Reverting changes.
Training on augumented user 24306 16/50 current_auc = 0.6054766734279919
User 24306 AUC after training: 0.6024340770791076
User 24306 does not improve AUC. Reverting changes.
Training on augumented user 121431 17/50 current_auc = 0.6054766734279919
User 121431 AUC after training: 0.603448275862069
User 121431 does not improve AUC. Reverting changes.
Training on augumented user 44981 18/50 current_auc = 0.6054766734279919
User 44981 AUC after training: 0.6044624746450304
User 44981 does not improve AUC. Reverting changes.
Training on augumented user 126142 19/50 current_auc = 0.6054766734279919
User 126142 AUC after training: 0.603448275862069
User 126142 does not improve AUC. Reverting changes.
Training on augumented user 45689 20/50 current_auc = 0.6054766734279919
User 45689 AUC after training: 0.603448275862069
User 45689 does not improve AUC. Reverting changes.
Training on augumented user 87809 21/50 current_auc = 0.6054766734279919
User 87809 AUC after training: 0.5993914807302231
User 87809 does not improve AUC. Reverting changes.
Training on augumented user 120990 22/50 current_auc = 0.6054766734279919
User 120990 AUC after training: 0.6054766734279919
User 120990 does not improve AUC. Reverting changes.
Training on augumented user 101042 23/50 current_auc = 0.6054766734279919
User 101042 AUC after training: 0.6014198782961461
User 101042 does not improve AUC. Reverting changes.
Training on augumented user 37816 24/50 current_auc = 0.6054766734279919
User 37816 AUC after training: 0.6054766734279919
User 37816 does not improve AUC. Reverting changes.
Training on augumented user 116596 25/50 current_auc = 0.6054766734279919
User 116596 AUC after training: 0.6064908722109533
User 116596 improves AUC. Keeping the model.
Training on augumented user 42523 26/50 current_auc = 0.6064908722109533
User 42523 AUC after training: 0.603448275862069
User 42523 does not improve AUC. Reverting changes.
Training on augumented user 10930 27/50 current_auc = 0.6064908722109533
User 10930 AUC after training: 0.6004056795131846
User 10930 does not improve AUC. Reverting changes.
Training on augumented user 118182 28/50 current_auc = 0.6064908722109533
User 118182 AUC after training: 0.6024340770791076
User 118182 does not improve AUC. Reverting changes.
Training on augumented user 135523 29/50 current_auc = 0.6064908722109533
User 135523 AUC after training: 0.6064908722109533
User 135523 does not improve AUC. Reverting changes.
Training on augumented user 115406 30/50 current_auc = 0.6064908722109533
User 115406 AUC after training: 0.6064908722109533
User 115406 does not improve AUC. Reverting changes.
Training on augumented user 75631 31/50 current_auc = 0.6064908722109533
User 75631 AUC after training: 0.603448275862069
User 75631 does not improve AUC. Reverting changes.
Training on augumented user 78863 32/50 current_auc = 0.6064908722109533
User 78863 AUC after training: 0.6054766734279919
User 78863 does not improve AUC. Reverting changes.
Training on augumented user 53994 33/50 current_auc = 0.6064908722109533
User 53994 AUC after training: 0.6004056795131846
User 53994 does not improve AUC. Reverting changes.
Training on augumented user 77217 34/50 current_auc = 0.6064908722109533
User 77217 AUC after training: 0.6044624746450304
User 77217 does not improve AUC. Reverting changes.
Training on augumented user 16995 35/50 current_auc = 0.6064908722109533
User 16995 AUC after training: 0.603448275862069
User 16995 does not improve AUC. Reverting changes.
Training on augumented user 20119 36/50 current_auc = 0.6064908722109533
User 20119 AUC after training: 0.6054766734279919
User 20119 does not improve AUC. Reverting changes.
Training on augumented user 31934 37/50 current_auc = 0.6064908722109533
User 31934 AUC after training: 0.6064908722109533
User 31934 does not improve AUC. Reverting changes.
Training on augumented user 129653 38/50 current_auc = 0.6064908722109533
User 129653 AUC after training: 0.6024340770791076
User 129653 does not improve AUC. Reverting changes.
Training on augumented user 109263 39/50 current_auc = 0.6064908722109533
User 109263 AUC after training: 0.6064908722109533
User 109263 does not improve AUC. Reverting changes.
Training on augumented user 79430 40/50 current_auc = 0.6064908722109533
User 79430 AUC after training: 0.5993914807302231
User 79430 does not improve AUC. Reverting changes.
Training on augumented user 129743 41/50 current_auc = 0.6064908722109533
User 129743 AUC after training: 0.5973630831643002
User 129743 does not improve AUC. Reverting changes.
Training on augumented user 137298 42/50 current_auc = 0.6064908722109533
User 137298 AUC after training: 0.6044624746450304
User 137298 does not improve AUC. Reverting changes.
Training on augumented user 84113 43/50 current_auc = 0.6064908722109533
User 84113 AUC after training: 0.6024340770791076
User 84113 does not improve AUC. Reverting changes.
Training on augumented user 9234 44/50 current_auc = 0.6064908722109533
User 9234 AUC after training: 0.6024340770791076
User 9234 does not improve AUC. Reverting changes.
Training on augumented user 110209 45/50 current_auc = 0.6064908722109533
User 110209 AUC after training: 0.6044624746450304
User 110209 does not improve AUC. Reverting changes.
Training on augumented user 82052 46/50 current_auc = 0.6064908722109533
User 82052 AUC after training: 0.603448275862069
User 82052 does not improve AUC. Reverting changes.
Training on augumented user 51568 47/50 current_auc = 0.6064908722109533
User 51568 AUC after training: 0.5983772819472617
User 51568 does not improve AUC. Reverting changes.
Training on augumented user 38300 48/50 current_auc = 0.6064908722109533
User 38300 AUC after training: 0.603448275862069
User 38300 does not improve AUC. Reverting changes.
Training on augumented user 15194 49/50 current_auc = 0.6064908722109533
User 15194 AUC after training: 0.6004056795131846
User 15194 does not improve AUC. Reverting changes.
[2024-12-02 18:25:45.726619] start test user 15838 87/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:46.390696] start test user 15838 87/568 recall augumented users by random, augumented_users = [4847, 69254, 67421, 107657, 91537, 72007, 1940, 120385, 116280, 104009, 42259, 98916, 67084, 21020, 5356, 72465, 128475, 23775, 17097, 4482, 134421, 81450, 26522, 21760, 107727, 120206, 86056, 36922, 100409, 50966, 17510, 95790, 30896, 73280, 121729, 50774, 115281, 38178, 115260, 144, 114098, 74699, 133876, 64268, 110298, 80266, 19973, 108598, 49409, 16070]
[2024-12-02 18:25:46.409397] user = 15838 Cloud 87/568
[2024-12-02 18:25:46.425225] user = 15838 Local 87/568
[2024-12-02 18:25:46.624710] user = 15838 Local+ 87/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:50.084439] user = 15838 MPDA- 87/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5996124031007752
Training on augumented user 4847 0/50 current_auc = 0.5996124031007752
User 4847 AUC after training: 0.5996124031007752
User 4847 does not improve AUC. Reverting changes.
Training on augumented user 69254 1/50 current_auc = 0.5996124031007752
User 69254 AUC after training: 0.6007751937984496
User 69254 improves AUC. Keeping the model.
Training on augumented user 67421 2/50 current_auc = 0.6007751937984496
User 67421 AUC after training: 0.6011627906976744
User 67421 improves AUC. Keeping the model.
Training on augumented user 107657 3/50 current_auc = 0.6011627906976744
User 107657 AUC after training: 0.6
User 107657 does not improve AUC. Reverting changes.
Training on augumented user 91537 4/50 current_auc = 0.6011627906976744
User 91537 AUC after training: 0.6003875968992247
User 91537 does not improve AUC. Reverting changes.
Training on augumented user 72007 5/50 current_auc = 0.6011627906976744
User 72007 AUC after training: 0.6031007751937985
User 72007 improves AUC. Keeping the model.
Training on augumented user 1940 6/50 current_auc = 0.6031007751937985
User 1940 AUC after training: 0.6031007751937985
User 1940 does not improve AUC. Reverting changes.
Training on augumented user 120385 7/50 current_auc = 0.6031007751937985
User 120385 AUC after training: 0.6023255813953488
User 120385 does not improve AUC. Reverting changes.
Training on augumented user 116280 8/50 current_auc = 0.6031007751937985
User 116280 AUC after training: 0.6015503875968993
User 116280 does not improve AUC. Reverting changes.
Training on augumented user 104009 9/50 current_auc = 0.6031007751937985
User 104009 AUC after training: 0.6007751937984496
User 104009 does not improve AUC. Reverting changes.
Training on augumented user 42259 10/50 current_auc = 0.6031007751937985
User 42259 AUC after training: 0.6023255813953488
User 42259 does not improve AUC. Reverting changes.
Training on augumented user 98916 11/50 current_auc = 0.6031007751937985
User 98916 AUC after training: 0.6023255813953488
User 98916 does not improve AUC. Reverting changes.
Training on augumented user 67084 12/50 current_auc = 0.6031007751937985
User 67084 AUC after training: 0.6015503875968993
User 67084 does not improve AUC. Reverting changes.
Training on augumented user 21020 13/50 current_auc = 0.6031007751937985
User 21020 AUC after training: 0.6000000000000001
User 21020 does not improve AUC. Reverting changes.
Training on augumented user 5356 14/50 current_auc = 0.6031007751937985
User 5356 AUC after training: 0.6015503875968993
User 5356 does not improve AUC. Reverting changes.
Training on augumented user 72465 15/50 current_auc = 0.6031007751937985
User 72465 AUC after training: 0.5976744186046512
User 72465 does not improve AUC. Reverting changes.
Training on augumented user 128475 16/50 current_auc = 0.6031007751937985
User 128475 AUC after training: 0.6015503875968992
User 128475 does not improve AUC. Reverting changes.
Training on augumented user 23775 17/50 current_auc = 0.6031007751937985
User 23775 AUC after training: 0.6031007751937985
User 23775 does not improve AUC. Reverting changes.
Training on augumented user 17097 18/50 current_auc = 0.6031007751937985
User 17097 AUC after training: 0.6007751937984496
User 17097 does not improve AUC. Reverting changes.
Training on augumented user 4482 19/50 current_auc = 0.6031007751937985
User 4482 AUC after training: 0.6015503875968993
User 4482 does not improve AUC. Reverting changes.
Training on augumented user 134421 20/50 current_auc = 0.6031007751937985
User 134421 AUC after training: 0.6007751937984496
User 134421 does not improve AUC. Reverting changes.
Training on augumented user 81450 21/50 current_auc = 0.6031007751937985
User 81450 AUC after training: 0.6007751937984496
User 81450 does not improve AUC. Reverting changes.
Training on augumented user 26522 22/50 current_auc = 0.6031007751937985
User 26522 AUC after training: 0.601937984496124
User 26522 does not improve AUC. Reverting changes.
Training on augumented user 21760 23/50 current_auc = 0.6031007751937985
User 21760 AUC after training: 0.6015503875968992
User 21760 does not improve AUC. Reverting changes.
Training on augumented user 107727 24/50 current_auc = 0.6031007751937985
User 107727 AUC after training: 0.601937984496124
User 107727 does not improve AUC. Reverting changes.
Training on augumented user 120206 25/50 current_auc = 0.6031007751937985
User 120206 AUC after training: 0.6023255813953488
User 120206 does not improve AUC. Reverting changes.
Training on augumented user 86056 26/50 current_auc = 0.6031007751937985
User 86056 AUC after training: 0.6031007751937985
User 86056 does not improve AUC. Reverting changes.
Training on augumented user 36922 27/50 current_auc = 0.6031007751937985
User 36922 AUC after training: 0.6023255813953488
User 36922 does not improve AUC. Reverting changes.
Training on augumented user 100409 28/50 current_auc = 0.6031007751937985
User 100409 AUC after training: 0.6023255813953488
User 100409 does not improve AUC. Reverting changes.
Training on augumented user 50966 29/50 current_auc = 0.6031007751937985
User 50966 AUC after training: 0.6015503875968992
User 50966 does not improve AUC. Reverting changes.
Training on augumented user 17510 30/50 current_auc = 0.6031007751937985
User 17510 AUC after training: 0.6023255813953488
User 17510 does not improve AUC. Reverting changes.
Training on augumented user 95790 31/50 current_auc = 0.6031007751937985
User 95790 AUC after training: 0.6015503875968992
User 95790 does not improve AUC. Reverting changes.
Training on augumented user 30896 32/50 current_auc = 0.6031007751937985
User 30896 AUC after training: 0.6011627906976744
User 30896 does not improve AUC. Reverting changes.
Training on augumented user 73280 33/50 current_auc = 0.6031007751937985
User 73280 AUC after training: 0.6015503875968992
User 73280 does not improve AUC. Reverting changes.
Training on augumented user 121729 34/50 current_auc = 0.6031007751937985
User 121729 AUC after training: 0.6007751937984496
User 121729 does not improve AUC. Reverting changes.
Training on augumented user 50774 35/50 current_auc = 0.6031007751937985
User 50774 AUC after training: 0.5992248062015504
User 50774 does not improve AUC. Reverting changes.
Training on augumented user 115281 36/50 current_auc = 0.6031007751937985
User 115281 AUC after training: 0.6031007751937985
User 115281 does not improve AUC. Reverting changes.
Training on augumented user 38178 37/50 current_auc = 0.6031007751937985
User 38178 AUC after training: 0.6023255813953488
User 38178 does not improve AUC. Reverting changes.
Training on augumented user 115260 38/50 current_auc = 0.6031007751937985
User 115260 AUC after training: 0.6031007751937985
User 115260 does not improve AUC. Reverting changes.
Training on augumented user 144 39/50 current_auc = 0.6031007751937985
User 144 AUC after training: 0.6031007751937985
User 144 does not improve AUC. Reverting changes.
Training on augumented user 114098 40/50 current_auc = 0.6031007751937985
User 114098 AUC after training: 0.6023255813953488
User 114098 does not improve AUC. Reverting changes.
Training on augumented user 74699 41/50 current_auc = 0.6031007751937985
User 74699 AUC after training: 0.6015503875968993
User 74699 does not improve AUC. Reverting changes.
Training on augumented user 133876 42/50 current_auc = 0.6031007751937985
User 133876 AUC after training: 0.6015503875968992
User 133876 does not improve AUC. Reverting changes.
Training on augumented user 64268 43/50 current_auc = 0.6031007751937985
User 64268 AUC after training: 0.6023255813953488
User 64268 does not improve AUC. Reverting changes.
Training on augumented user 110298 44/50 current_auc = 0.6031007751937985
User 110298 AUC after training: 0.6023255813953488
User 110298 does not improve AUC. Reverting changes.
Training on augumented user 80266 45/50 current_auc = 0.6031007751937985
User 80266 AUC after training: 0.6007751937984496
User 80266 does not improve AUC. Reverting changes.
Training on augumented user 19973 46/50 current_auc = 0.6031007751937985
User 19973 AUC after training: 0.6023255813953488
User 19973 does not improve AUC. Reverting changes.
Training on augumented user 108598 47/50 current_auc = 0.6031007751937985
User 108598 AUC after training: 0.5980620155038758
User 108598 does not improve AUC. Reverting changes.
Training on augumented user 49409 48/50 current_auc = 0.6031007751937985
User 49409 AUC after training: 0.6023255813953488
User 49409 does not improve AUC. Reverting changes.
Training on augumented user 16070 49/50 current_auc = 0.6031007751937985
User 16070 AUC after training: 0.6015503875968993
User 16070 does not improve AUC. Reverting changes.
[2024-12-02 18:26:18.587094] start test user 15855 88/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:19.378873] start test user 15855 88/568 recall augumented users by random, augumented_users = [125762, 42940, 109503, 90388, 75263, 25460, 2136, 109105, 130453, 112987, 40856, 48331, 102391, 116456, 23314, 78881, 37218, 100919, 94255, 99357, 73256, 49962, 42297, 125234, 43944, 39116, 17390, 6095, 56605, 66671, 52174, 132554, 31939, 78379, 35108, 72616, 91987, 48673, 28639, 96849, 122142, 99008, 8581, 116581, 27401, 35037, 90389, 35082, 112813, 15422]
[2024-12-02 18:26:19.407020] user = 15855 Cloud 88/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:26:19.427516] user = 15855 Local 88/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:26:19.596720] user = 15855 Local+ 88/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:26:22.208490] user = 15855 MPDA- 88/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 125762 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125762 AUC after training: 0.5
User 125762 does not improve AUC. Reverting changes.
Training on augumented user 42940 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42940 AUC after training: 0.5
User 42940 does not improve AUC. Reverting changes.
Training on augumented user 109503 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109503 AUC after training: 0.5
User 109503 does not improve AUC. Reverting changes.
Training on augumented user 90388 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90388 AUC after training: 0.5
User 90388 does not improve AUC. Reverting changes.
Training on augumented user 75263 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75263 AUC after training: 0.5
User 75263 does not improve AUC. Reverting changes.
Training on augumented user 25460 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25460 AUC after training: 0.5
User 25460 does not improve AUC. Reverting changes.
Training on augumented user 2136 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2136 AUC after training: 0.5
User 2136 does not improve AUC. Reverting changes.
Training on augumented user 109105 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109105 AUC after training: 0.5
User 109105 does not improve AUC. Reverting changes.
Training on augumented user 130453 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130453 AUC after training: 0.5
User 130453 does not improve AUC. Reverting changes.
Training on augumented user 112987 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112987 AUC after training: 0.5
User 112987 does not improve AUC. Reverting changes.
Training on augumented user 40856 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40856 AUC after training: 0.5
User 40856 does not improve AUC. Reverting changes.
Training on augumented user 48331 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48331 AUC after training: 0.5
User 48331 does not improve AUC. Reverting changes.
Training on augumented user 102391 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102391 AUC after training: 0.5
User 102391 does not improve AUC. Reverting changes.
Training on augumented user 116456 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116456 AUC after training: 0.5
User 116456 does not improve AUC. Reverting changes.
Training on augumented user 23314 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23314 AUC after training: 0.5
User 23314 does not improve AUC. Reverting changes.
Training on augumented user 78881 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78881 AUC after training: 0.5
User 78881 does not improve AUC. Reverting changes.
Training on augumented user 37218 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37218 AUC after training: 0.5
User 37218 does not improve AUC. Reverting changes.
Training on augumented user 100919 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100919 AUC after training: 0.5
User 100919 does not improve AUC. Reverting changes.
Training on augumented user 94255 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94255 AUC after training: 0.5
User 94255 does not improve AUC. Reverting changes.
Training on augumented user 99357 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99357 AUC after training: 0.5
User 99357 does not improve AUC. Reverting changes.
Training on augumented user 73256 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73256 AUC after training: 0.5
User 73256 does not improve AUC. Reverting changes.
Training on augumented user 49962 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49962 AUC after training: 0.5
User 49962 does not improve AUC. Reverting changes.
Training on augumented user 42297 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42297 AUC after training: 0.5
User 42297 does not improve AUC. Reverting changes.
Training on augumented user 125234 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125234 AUC after training: 0.5
User 125234 does not improve AUC. Reverting changes.
Training on augumented user 43944 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43944 AUC after training: 0.5
User 43944 does not improve AUC. Reverting changes.
Training on augumented user 39116 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39116 AUC after training: 0.5
User 39116 does not improve AUC. Reverting changes.
Training on augumented user 17390 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17390 AUC after training: 0.5
User 17390 does not improve AUC. Reverting changes.
Training on augumented user 6095 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6095 AUC after training: 0.5
User 6095 does not improve AUC. Reverting changes.
Training on augumented user 56605 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56605 AUC after training: 0.5
User 56605 does not improve AUC. Reverting changes.
Training on augumented user 66671 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66671 AUC after training: 0.5
User 66671 does not improve AUC. Reverting changes.
Training on augumented user 52174 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52174 AUC after training: 0.5
User 52174 does not improve AUC. Reverting changes.
Training on augumented user 132554 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132554 AUC after training: 0.5
User 132554 does not improve AUC. Reverting changes.
Training on augumented user 31939 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31939 AUC after training: 0.5
User 31939 does not improve AUC. Reverting changes.
Training on augumented user 78379 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78379 AUC after training: 0.5
User 78379 does not improve AUC. Reverting changes.
Training on augumented user 35108 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35108 AUC after training: 0.5
User 35108 does not improve AUC. Reverting changes.
Training on augumented user 72616 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72616 AUC after training: 0.5
User 72616 does not improve AUC. Reverting changes.
Training on augumented user 91987 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91987 AUC after training: 0.5
User 91987 does not improve AUC. Reverting changes.
Training on augumented user 48673 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48673 AUC after training: 0.5
User 48673 does not improve AUC. Reverting changes.
Training on augumented user 28639 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28639 AUC after training: 0.5
User 28639 does not improve AUC. Reverting changes.
Training on augumented user 96849 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96849 AUC after training: 0.5
User 96849 does not improve AUC. Reverting changes.
Training on augumented user 122142 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122142 AUC after training: 0.5
User 122142 does not improve AUC. Reverting changes.
Training on augumented user 99008 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99008 AUC after training: 0.5
User 99008 does not improve AUC. Reverting changes.
Training on augumented user 8581 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8581 AUC after training: 0.5
User 8581 does not improve AUC. Reverting changes.
Training on augumented user 116581 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116581 AUC after training: 0.5
User 116581 does not improve AUC. Reverting changes.
Training on augumented user 27401 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27401 AUC after training: 0.5
User 27401 does not improve AUC. Reverting changes.
Training on augumented user 35037 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35037 AUC after training: 0.5
User 35037 does not improve AUC. Reverting changes.
Training on augumented user 90389 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90389 AUC after training: 0.5
User 90389 does not improve AUC. Reverting changes.
Training on augumented user 35082 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35082 AUC after training: 0.5
User 35082 does not improve AUC. Reverting changes.
Training on augumented user 112813 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112813 AUC after training: 0.5
User 112813 does not improve AUC. Reverting changes.
Training on augumented user 15422 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15422 AUC after training: 0.5
User 15422 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:26:53.512828] start test user 15868 89/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:54.120375] start test user 15868 89/568 recall augumented users by random, augumented_users = [77891, 137503, 29060, 80090, 109402, 89321, 54000, 95619, 76134, 46467, 14308, 123009, 127122, 65880, 44752, 60810, 17823, 79692, 33310, 10661, 107850, 18686, 154, 18630, 98797, 33316, 98563, 67748, 64835, 7032, 81220, 46293, 8405, 31134, 121601, 89141, 129706, 34100, 103638, 45068, 82397, 35207, 97728, 122488, 27387, 48590, 69630, 47586, 69542, 56237]
[2024-12-02 18:26:54.137254] user = 15868 Cloud 89/568
[2024-12-02 18:26:54.149909] user = 15868 Local 89/568
[2024-12-02 18:26:54.185834] user = 15868 Local+ 89/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:58.255295] user = 15868 MPDA- 89/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5217391304347826
Training on augumented user 77891 0/50 current_auc = 0.5217391304347826
User 77891 AUC after training: 0.5217391304347826
User 77891 does not improve AUC. Reverting changes.
Training on augumented user 137503 1/50 current_auc = 0.5217391304347826
User 137503 AUC after training: 0.5217391304347826
User 137503 does not improve AUC. Reverting changes.
Training on augumented user 29060 2/50 current_auc = 0.5217391304347826
User 29060 AUC after training: 0.5217391304347826
User 29060 does not improve AUC. Reverting changes.
Training on augumented user 80090 3/50 current_auc = 0.5217391304347826
User 80090 AUC after training: 0.5183946488294314
User 80090 does not improve AUC. Reverting changes.
Training on augumented user 109402 4/50 current_auc = 0.5217391304347826
User 109402 AUC after training: 0.5217391304347826
User 109402 does not improve AUC. Reverting changes.
Training on augumented user 89321 5/50 current_auc = 0.5217391304347826
User 89321 AUC after training: 0.5217391304347826
User 89321 does not improve AUC. Reverting changes.
Training on augumented user 54000 6/50 current_auc = 0.5217391304347826
User 54000 AUC after training: 0.5183946488294314
User 54000 does not improve AUC. Reverting changes.
Training on augumented user 95619 7/50 current_auc = 0.5217391304347826
User 95619 AUC after training: 0.5183946488294314
User 95619 does not improve AUC. Reverting changes.
Training on augumented user 76134 8/50 current_auc = 0.5217391304347826
User 76134 AUC after training: 0.5217391304347826
User 76134 does not improve AUC. Reverting changes.
Training on augumented user 46467 9/50 current_auc = 0.5217391304347826
User 46467 AUC after training: 0.5217391304347826
User 46467 does not improve AUC. Reverting changes.
Training on augumented user 14308 10/50 current_auc = 0.5217391304347826
User 14308 AUC after training: 0.5217391304347826
User 14308 does not improve AUC. Reverting changes.
Training on augumented user 123009 11/50 current_auc = 0.5217391304347826
User 123009 AUC after training: 0.5217391304347826
User 123009 does not improve AUC. Reverting changes.
Training on augumented user 127122 12/50 current_auc = 0.5217391304347826
User 127122 AUC after training: 0.5183946488294314
User 127122 does not improve AUC. Reverting changes.
Training on augumented user 65880 13/50 current_auc = 0.5217391304347826
User 65880 AUC after training: 0.5217391304347826
User 65880 does not improve AUC. Reverting changes.
Training on augumented user 44752 14/50 current_auc = 0.5217391304347826
User 44752 AUC after training: 0.5217391304347826
User 44752 does not improve AUC. Reverting changes.
Training on augumented user 60810 15/50 current_auc = 0.5217391304347826
User 60810 AUC after training: 0.5183946488294314
User 60810 does not improve AUC. Reverting changes.
Training on augumented user 17823 16/50 current_auc = 0.5217391304347826
User 17823 AUC after training: 0.5217391304347826
User 17823 does not improve AUC. Reverting changes.
Training on augumented user 79692 17/50 current_auc = 0.5217391304347826
User 79692 AUC after training: 0.5183946488294314
User 79692 does not improve AUC. Reverting changes.
Training on augumented user 33310 18/50 current_auc = 0.5217391304347826
User 33310 AUC after training: 0.5183946488294314
User 33310 does not improve AUC. Reverting changes.
Training on augumented user 10661 19/50 current_auc = 0.5217391304347826
User 10661 AUC after training: 0.5217391304347826
User 10661 does not improve AUC. Reverting changes.
Training on augumented user 107850 20/50 current_auc = 0.5217391304347826
User 107850 AUC after training: 0.5183946488294314
User 107850 does not improve AUC. Reverting changes.
Training on augumented user 18686 21/50 current_auc = 0.5217391304347826
User 18686 AUC after training: 0.5183946488294314
User 18686 does not improve AUC. Reverting changes.
Training on augumented user 154 22/50 current_auc = 0.5217391304347826
User 154 AUC after training: 0.5183946488294314
User 154 does not improve AUC. Reverting changes.
Training on augumented user 18630 23/50 current_auc = 0.5217391304347826
User 18630 AUC after training: 0.5183946488294314
User 18630 does not improve AUC. Reverting changes.
Training on augumented user 98797 24/50 current_auc = 0.5217391304347826
User 98797 AUC after training: 0.5217391304347826
User 98797 does not improve AUC. Reverting changes.
Training on augumented user 33316 25/50 current_auc = 0.5217391304347826
User 33316 AUC after training: 0.5217391304347826
User 33316 does not improve AUC. Reverting changes.
Training on augumented user 98563 26/50 current_auc = 0.5217391304347826
User 98563 AUC after training: 0.5217391304347826
User 98563 does not improve AUC. Reverting changes.
Training on augumented user 67748 27/50 current_auc = 0.5217391304347826
User 67748 AUC after training: 0.5183946488294314
User 67748 does not improve AUC. Reverting changes.
Training on augumented user 64835 28/50 current_auc = 0.5217391304347826
User 64835 AUC after training: 0.5250836120401338
User 64835 improves AUC. Keeping the model.
Training on augumented user 7032 29/50 current_auc = 0.5250836120401338
User 7032 AUC after training: 0.5217391304347826
User 7032 does not improve AUC. Reverting changes.
Training on augumented user 81220 30/50 current_auc = 0.5250836120401338
User 81220 AUC after training: 0.5250836120401338
User 81220 does not improve AUC. Reverting changes.
Training on augumented user 46293 31/50 current_auc = 0.5250836120401338
User 46293 AUC after training: 0.5217391304347826
User 46293 does not improve AUC. Reverting changes.
Training on augumented user 8405 32/50 current_auc = 0.5250836120401338
User 8405 AUC after training: 0.5183946488294314
User 8405 does not improve AUC. Reverting changes.
Training on augumented user 31134 33/50 current_auc = 0.5250836120401338
User 31134 AUC after training: 0.5250836120401338
User 31134 does not improve AUC. Reverting changes.
Training on augumented user 121601 34/50 current_auc = 0.5250836120401338
User 121601 AUC after training: 0.5250836120401338
User 121601 does not improve AUC. Reverting changes.
Training on augumented user 89141 35/50 current_auc = 0.5250836120401338
User 89141 AUC after training: 0.5250836120401338
User 89141 does not improve AUC. Reverting changes.
Training on augumented user 129706 36/50 current_auc = 0.5250836120401338
User 129706 AUC after training: 0.5250836120401338
User 129706 does not improve AUC. Reverting changes.
Training on augumented user 34100 37/50 current_auc = 0.5250836120401338
User 34100 AUC after training: 0.5250836120401338
User 34100 does not improve AUC. Reverting changes.
Training on augumented user 103638 38/50 current_auc = 0.5250836120401338
User 103638 AUC after training: 0.5250836120401338
User 103638 does not improve AUC. Reverting changes.
Training on augumented user 45068 39/50 current_auc = 0.5250836120401338
User 45068 AUC after training: 0.5217391304347826
User 45068 does not improve AUC. Reverting changes.
Training on augumented user 82397 40/50 current_auc = 0.5250836120401338
User 82397 AUC after training: 0.5284280936454849
User 82397 improves AUC. Keeping the model.
Training on augumented user 35207 41/50 current_auc = 0.5284280936454849
User 35207 AUC after training: 0.5250836120401338
User 35207 does not improve AUC. Reverting changes.
Training on augumented user 97728 42/50 current_auc = 0.5284280936454849
User 97728 AUC after training: 0.5250836120401338
User 97728 does not improve AUC. Reverting changes.
Training on augumented user 122488 43/50 current_auc = 0.5284280936454849
User 122488 AUC after training: 0.5250836120401338
User 122488 does not improve AUC. Reverting changes.
Training on augumented user 27387 44/50 current_auc = 0.5284280936454849
User 27387 AUC after training: 0.5250836120401338
User 27387 does not improve AUC. Reverting changes.
Training on augumented user 48590 45/50 current_auc = 0.5284280936454849
User 48590 AUC after training: 0.5250836120401338
User 48590 does not improve AUC. Reverting changes.
Training on augumented user 69630 46/50 current_auc = 0.5284280936454849
User 69630 AUC after training: 0.5250836120401338
User 69630 does not improve AUC. Reverting changes.
Training on augumented user 47586 47/50 current_auc = 0.5284280936454849
User 47586 AUC after training: 0.5250836120401338
User 47586 does not improve AUC. Reverting changes.
Training on augumented user 69542 48/50 current_auc = 0.5284280936454849
User 69542 AUC after training: 0.5250836120401338
User 69542 does not improve AUC. Reverting changes.
Training on augumented user 56237 49/50 current_auc = 0.5284280936454849
User 56237 AUC after training: 0.5250836120401338
User 56237 does not improve AUC. Reverting changes.
[2024-12-02 18:27:31.171367] start test user 15880 90/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:31.654168] start test user 15880 90/568 recall augumented users by random, augumented_users = [56473, 15714, 2546, 12846, 101826, 105541, 18201, 106165, 57150, 113554, 50270, 30908, 43403, 67486, 97916, 79995, 104345, 33912, 128908, 79806, 124225, 136554, 102355, 88241, 78157, 97760, 82681, 40056, 58110, 124292, 51151, 108062, 74869, 32304, 20295, 4067, 70457, 19067, 128369, 120314, 133676, 33001, 120385, 38074, 22067, 119915, 27862, 120568, 87645, 41363]
[2024-12-02 18:27:31.675075] user = 15880 Cloud 90/568
[2024-12-02 18:27:31.703690] user = 15880 Local 90/568
[2024-12-02 18:27:31.777798] user = 15880 Local+ 90/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:34.545761] user = 15880 MPDA- 90/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6153846153846154
Training on augumented user 56473 0/50 current_auc = 0.6153846153846154
User 56473 AUC after training: 0.6153846153846154
User 56473 does not improve AUC. Reverting changes.
Training on augumented user 15714 1/50 current_auc = 0.6153846153846154
User 15714 AUC after training: 0.6108597285067873
User 15714 does not improve AUC. Reverting changes.
Training on augumented user 2546 2/50 current_auc = 0.6153846153846154
User 2546 AUC after training: 0.6153846153846154
User 2546 does not improve AUC. Reverting changes.
Training on augumented user 12846 3/50 current_auc = 0.6153846153846154
User 12846 AUC after training: 0.6153846153846154
User 12846 does not improve AUC. Reverting changes.
Training on augumented user 101826 4/50 current_auc = 0.6153846153846154
User 101826 AUC after training: 0.6108597285067874
User 101826 does not improve AUC. Reverting changes.
Training on augumented user 105541 5/50 current_auc = 0.6153846153846154
User 105541 AUC after training: 0.6108597285067874
User 105541 does not improve AUC. Reverting changes.
Training on augumented user 18201 6/50 current_auc = 0.6153846153846154
User 18201 AUC after training: 0.6108597285067874
User 18201 does not improve AUC. Reverting changes.
Training on augumented user 106165 7/50 current_auc = 0.6153846153846154
User 106165 AUC after training: 0.6153846153846154
User 106165 does not improve AUC. Reverting changes.
Training on augumented user 57150 8/50 current_auc = 0.6153846153846154
User 57150 AUC after training: 0.6153846153846154
User 57150 does not improve AUC. Reverting changes.
Training on augumented user 113554 9/50 current_auc = 0.6153846153846154
User 113554 AUC after training: 0.6153846153846154
User 113554 does not improve AUC. Reverting changes.
Training on augumented user 50270 10/50 current_auc = 0.6153846153846154
User 50270 AUC after training: 0.6153846153846154
User 50270 does not improve AUC. Reverting changes.
Training on augumented user 30908 11/50 current_auc = 0.6153846153846154
User 30908 AUC after training: 0.6153846153846154
User 30908 does not improve AUC. Reverting changes.
Training on augumented user 43403 12/50 current_auc = 0.6153846153846154
User 43403 AUC after training: 0.6153846153846154
User 43403 does not improve AUC. Reverting changes.
Training on augumented user 67486 13/50 current_auc = 0.6153846153846154
User 67486 AUC after training: 0.6153846153846154
User 67486 does not improve AUC. Reverting changes.
Training on augumented user 97916 14/50 current_auc = 0.6153846153846154
User 97916 AUC after training: 0.6153846153846154
User 97916 does not improve AUC. Reverting changes.
Training on augumented user 79995 15/50 current_auc = 0.6153846153846154
User 79995 AUC after training: 0.6108597285067874
User 79995 does not improve AUC. Reverting changes.
Training on augumented user 104345 16/50 current_auc = 0.6153846153846154
User 104345 AUC after training: 0.6153846153846154
User 104345 does not improve AUC. Reverting changes.
Training on augumented user 33912 17/50 current_auc = 0.6153846153846154
User 33912 AUC after training: 0.6153846153846154
User 33912 does not improve AUC. Reverting changes.
Training on augumented user 128908 18/50 current_auc = 0.6153846153846154
User 128908 AUC after training: 0.6153846153846154
User 128908 does not improve AUC. Reverting changes.
Training on augumented user 79806 19/50 current_auc = 0.6153846153846154
User 79806 AUC after training: 0.6153846153846154
User 79806 does not improve AUC. Reverting changes.
Training on augumented user 124225 20/50 current_auc = 0.6153846153846154
User 124225 AUC after training: 0.6153846153846154
User 124225 does not improve AUC. Reverting changes.
Training on augumented user 136554 21/50 current_auc = 0.6153846153846154
User 136554 AUC after training: 0.6153846153846154
User 136554 does not improve AUC. Reverting changes.
Training on augumented user 102355 22/50 current_auc = 0.6153846153846154
User 102355 AUC after training: 0.6018099547511312
User 102355 does not improve AUC. Reverting changes.
Training on augumented user 88241 23/50 current_auc = 0.6153846153846154
User 88241 AUC after training: 0.6153846153846154
User 88241 does not improve AUC. Reverting changes.
Training on augumented user 78157 24/50 current_auc = 0.6153846153846154
User 78157 AUC after training: 0.6108597285067874
User 78157 does not improve AUC. Reverting changes.
Training on augumented user 97760 25/50 current_auc = 0.6153846153846154
User 97760 AUC after training: 0.6108597285067874
User 97760 does not improve AUC. Reverting changes.
Training on augumented user 82681 26/50 current_auc = 0.6153846153846154
User 82681 AUC after training: 0.6063348416289593
User 82681 does not improve AUC. Reverting changes.
Training on augumented user 40056 27/50 current_auc = 0.6153846153846154
User 40056 AUC after training: 0.6153846153846154
User 40056 does not improve AUC. Reverting changes.
Training on augumented user 58110 28/50 current_auc = 0.6153846153846154
User 58110 AUC after training: 0.6108597285067874
User 58110 does not improve AUC. Reverting changes.
Training on augumented user 124292 29/50 current_auc = 0.6153846153846154
User 124292 AUC after training: 0.6153846153846154
User 124292 does not improve AUC. Reverting changes.
Training on augumented user 51151 30/50 current_auc = 0.6153846153846154
User 51151 AUC after training: 0.6063348416289592
User 51151 does not improve AUC. Reverting changes.
Training on augumented user 108062 31/50 current_auc = 0.6153846153846154
User 108062 AUC after training: 0.6108597285067874
User 108062 does not improve AUC. Reverting changes.
Training on augumented user 74869 32/50 current_auc = 0.6153846153846154
User 74869 AUC after training: 0.6108597285067874
User 74869 does not improve AUC. Reverting changes.
Training on augumented user 32304 33/50 current_auc = 0.6153846153846154
User 32304 AUC after training: 0.6108597285067874
User 32304 does not improve AUC. Reverting changes.
Training on augumented user 20295 34/50 current_auc = 0.6153846153846154
User 20295 AUC after training: 0.6153846153846154
User 20295 does not improve AUC. Reverting changes.
Training on augumented user 4067 35/50 current_auc = 0.6153846153846154
User 4067 AUC after training: 0.6153846153846154
User 4067 does not improve AUC. Reverting changes.
Training on augumented user 70457 36/50 current_auc = 0.6153846153846154
User 70457 AUC after training: 0.6063348416289592
User 70457 does not improve AUC. Reverting changes.
Training on augumented user 19067 37/50 current_auc = 0.6153846153846154
User 19067 AUC after training: 0.6108597285067874
User 19067 does not improve AUC. Reverting changes.
Training on augumented user 128369 38/50 current_auc = 0.6153846153846154
User 128369 AUC after training: 0.6153846153846154
User 128369 does not improve AUC. Reverting changes.
Training on augumented user 120314 39/50 current_auc = 0.6153846153846154
User 120314 AUC after training: 0.6153846153846154
User 120314 does not improve AUC. Reverting changes.
Training on augumented user 133676 40/50 current_auc = 0.6153846153846154
User 133676 AUC after training: 0.6108597285067874
User 133676 does not improve AUC. Reverting changes.
Training on augumented user 33001 41/50 current_auc = 0.6153846153846154
User 33001 AUC after training: 0.6063348416289592
User 33001 does not improve AUC. Reverting changes.
Training on augumented user 120385 42/50 current_auc = 0.6153846153846154
User 120385 AUC after training: 0.6153846153846154
User 120385 does not improve AUC. Reverting changes.
Training on augumented user 38074 43/50 current_auc = 0.6153846153846154
User 38074 AUC after training: 0.6153846153846154
User 38074 does not improve AUC. Reverting changes.
Training on augumented user 22067 44/50 current_auc = 0.6153846153846154
User 22067 AUC after training: 0.6153846153846154
User 22067 does not improve AUC. Reverting changes.
Training on augumented user 119915 45/50 current_auc = 0.6153846153846154
User 119915 AUC after training: 0.6153846153846154
User 119915 does not improve AUC. Reverting changes.
Training on augumented user 27862 46/50 current_auc = 0.6153846153846154
User 27862 AUC after training: 0.6153846153846154
User 27862 does not improve AUC. Reverting changes.
Training on augumented user 120568 47/50 current_auc = 0.6153846153846154
User 120568 AUC after training: 0.6153846153846154
User 120568 does not improve AUC. Reverting changes.
Training on augumented user 87645 48/50 current_auc = 0.6153846153846154
User 87645 AUC after training: 0.6153846153846154
User 87645 does not improve AUC. Reverting changes.
Training on augumented user 41363 49/50 current_auc = 0.6153846153846154
User 41363 AUC after training: 0.6108597285067874
User 41363 does not improve AUC. Reverting changes.
[2024-12-02 18:27:59.797633] start test user 15918 91/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:00.498262] start test user 15918 91/568 recall augumented users by random, augumented_users = [7911, 78547, 13173, 17304, 32170, 91035, 85120, 97478, 22156, 47615, 136379, 21834, 90308, 61627, 52381, 748, 84318, 94986, 86905, 97595, 23404, 126015, 48702, 29932, 94630, 132842, 15932, 40419, 2199, 42477, 25721, 6742, 120299, 128808, 117410, 45419, 2059, 118519, 69507, 131259, 43572, 120267, 14352, 95863, 26400, 105526, 114549, 33577, 136802, 46418]
[2024-12-02 18:28:00.515983] user = 15918 Cloud 91/568
[2024-12-02 18:28:00.674394] user = 15918 Local 91/568
[2024-12-02 18:28:00.927420] user = 15918 Local+ 91/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:03.062594] user = 15918 MPDA- 91/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6427969220475075
Training on augumented user 7911 0/50 current_auc = 0.6427969220475075
User 7911 AUC after training: 0.6430746068919371
User 7911 improves AUC. Keeping the model.
Training on augumented user 78547 1/50 current_auc = 0.6430746068919371
User 78547 AUC after training: 0.6430411508865841
User 78547 does not improve AUC. Reverting changes.
Training on augumented user 13173 2/50 current_auc = 0.6430746068919371
User 13173 AUC after training: 0.6428437604550017
User 13173 does not improve AUC. Reverting changes.
Training on augumented user 17304 3/50 current_auc = 0.6430746068919371
User 17304 AUC after training: 0.6431281365005018
User 17304 improves AUC. Keeping the model.
Training on augumented user 32170 4/50 current_auc = 0.6431281365005018
User 32170 AUC after training: 0.6431281365005019
User 32170 improves AUC. Keeping the model.
Training on augumented user 91035 5/50 current_auc = 0.6431281365005019
User 91035 AUC after training: 0.6430846436935429
User 91035 does not improve AUC. Reverting changes.
Training on augumented user 85120 6/50 current_auc = 0.6431281365005019
User 85120 AUC after training: 0.6428537972566075
User 85120 does not improve AUC. Reverting changes.
Training on augumented user 97478 7/50 current_auc = 0.6431281365005019
User 97478 AUC after training: 0.6430679156908665
User 97478 does not improve AUC. Reverting changes.
Training on augumented user 22156 8/50 current_auc = 0.6431281365005019
User 22156 AUC after training: 0.6430645700903312
User 22156 does not improve AUC. Reverting changes.
Training on augumented user 47615 9/50 current_auc = 0.6431281365005019
User 47615 AUC after training: 0.6427668116426899
User 47615 does not improve AUC. Reverting changes.
Training on augumented user 136379 10/50 current_auc = 0.6431281365005019
User 136379 AUC after training: 0.64293743726999
User 136379 does not improve AUC. Reverting changes.
Training on augumented user 21834 11/50 current_auc = 0.6431281365005019
User 21834 AUC after training: 0.6432820341251255
User 21834 improves AUC. Keeping the model.
Training on augumented user 90308 12/50 current_auc = 0.6432820341251255
User 90308 AUC after training: 0.6434894613583138
User 90308 improves AUC. Keeping the model.
Training on augumented user 61627 13/50 current_auc = 0.6434894613583138
User 61627 AUC after training: 0.6426731348277015
User 61627 does not improve AUC. Reverting changes.
Training on augumented user 52381 14/50 current_auc = 0.6434894613583138
User 52381 AUC after training: 0.6432485781197725
User 52381 does not improve AUC. Reverting changes.
Training on augumented user 748 15/50 current_auc = 0.6434894613583138
User 748 AUC after training: 0.6434760789561726
User 748 does not improve AUC. Reverting changes.
Training on augumented user 84318 16/50 current_auc = 0.6434894613583138
User 84318 AUC after training: 0.6432619605219136
User 84318 does not improve AUC. Reverting changes.
Training on augumented user 94986 17/50 current_auc = 0.6434894613583138
User 94986 AUC after training: 0.6435429909668786
User 94986 improves AUC. Keeping the model.
Training on augumented user 86905 18/50 current_auc = 0.6435429909668786
User 86905 AUC after training: 0.6434861157577786
User 86905 does not improve AUC. Reverting changes.
Training on augumented user 97595 19/50 current_auc = 0.6435429909668786
User 97595 AUC after training: 0.643559718969555
User 97595 improves AUC. Keeping the model.
Training on augumented user 23404 20/50 current_auc = 0.643559718969555
User 23404 AUC after training: 0.643874205419873
User 23404 improves AUC. Keeping the model.
Training on augumented user 126015 21/50 current_auc = 0.643874205419873
User 126015 AUC after training: 0.6440916694546671
User 126015 improves AUC. Keeping the model.
Training on augumented user 48702 22/50 current_auc = 0.6440916694546671
User 48702 AUC after training: 0.6441953830712612
User 48702 improves AUC. Keeping the model.
Training on augumented user 29932 23/50 current_auc = 0.6441953830712612
User 29932 AUC after training: 0.6442355302776848
User 29932 improves AUC. Keeping the model.
Training on augumented user 94630 24/50 current_auc = 0.6442355302776848
User 94630 AUC after training: 0.6438340582134493
User 94630 does not improve AUC. Reverting changes.
Training on augumented user 132842 25/50 current_auc = 0.6442355302776848
User 132842 AUC after training: 0.6441619270659084
User 132842 does not improve AUC. Reverting changes.
Training on augumented user 15932 26/50 current_auc = 0.6442355302776848
User 15932 AUC after training: 0.644235530277685
User 15932 improves AUC. Keeping the model.
Training on augumented user 40419 27/50 current_auc = 0.644235530277685
User 40419 AUC after training: 0.6439478086316494
User 40419 does not improve AUC. Reverting changes.
Training on augumented user 2199 28/50 current_auc = 0.644235530277685
User 2199 AUC after training: 0.6439344262295081
User 2199 does not improve AUC. Reverting changes.
Training on augumented user 42477 29/50 current_auc = 0.644235530277685
User 42477 AUC after training: 0.6441719638675142
User 42477 does not improve AUC. Reverting changes.
Training on augumented user 25721 30/50 current_auc = 0.644235530277685
User 25721 AUC after training: 0.6436533957845433
User 25721 does not improve AUC. Reverting changes.
Training on augumented user 6742 31/50 current_auc = 0.644235530277685
User 6742 AUC after training: 0.6441083974573436
User 6742 does not improve AUC. Reverting changes.
Training on augumented user 120299 32/50 current_auc = 0.644235530277685
User 120299 AUC after training: 0.6443392438942791
User 120299 improves AUC. Keeping the model.
Training on augumented user 128808 33/50 current_auc = 0.6443392438942791
User 128808 AUC after training: 0.6439344262295081
User 128808 does not improve AUC. Reverting changes.
Training on augumented user 117410 34/50 current_auc = 0.6443392438942791
User 117410 AUC after training: 0.6441117430578789
User 117410 does not improve AUC. Reverting changes.
Training on augumented user 45419 35/50 current_auc = 0.6443392438942791
User 45419 AUC after training: 0.6441585814653731
User 45419 does not improve AUC. Reverting changes.
Training on augumented user 2059 36/50 current_auc = 0.6443392438942791
User 2059 AUC after training: 0.6446503847440616
User 2059 improves AUC. Keeping the model.
Training on augumented user 118519 37/50 current_auc = 0.6446503847440616
User 118519 AUC after training: 0.6442355302776848
User 118519 does not improve AUC. Reverting changes.
Training on augumented user 69507 38/50 current_auc = 0.6446503847440616
User 69507 AUC after training: 0.6444630311140849
User 69507 does not improve AUC. Reverting changes.
Training on augumented user 131259 39/50 current_auc = 0.6446503847440616
User 131259 AUC after training: 0.6441485446637671
User 131259 does not improve AUC. Reverting changes.
Training on augumented user 43572 40/50 current_auc = 0.6446503847440616
User 43572 AUC after training: 0.6443425894948143
User 43572 does not improve AUC. Reverting changes.
Training on augumented user 120267 41/50 current_auc = 0.6446503847440616
User 120267 AUC after training: 0.6437269989963198
User 120267 does not improve AUC. Reverting changes.
Training on augumented user 14352 42/50 current_auc = 0.6446503847440616
User 14352 AUC after training: 0.644315824690532
User 14352 does not improve AUC. Reverting changes.
Training on augumented user 95863 43/50 current_auc = 0.6446503847440616
User 95863 AUC after training: 0.6443091334894614
User 95863 does not improve AUC. Reverting changes.
Training on augumented user 26400 44/50 current_auc = 0.6446503847440616
User 26400 AUC after training: 0.6444463031114085
User 26400 does not improve AUC. Reverting changes.
Training on augumented user 105526 45/50 current_auc = 0.6446503847440616
User 105526 AUC after training: 0.6439277350284377
User 105526 does not improve AUC. Reverting changes.
Training on augumented user 114549 46/50 current_auc = 0.6446503847440616
User 114549 AUC after training: 0.645209100033456
User 114549 improves AUC. Keeping the model.
Training on augumented user 33577 47/50 current_auc = 0.645209100033456
User 33577 AUC after training: 0.6449146871863499
User 33577 does not improve AUC. Reverting changes.
Training on augumented user 136802 48/50 current_auc = 0.645209100033456
User 136802 AUC after training: 0.6450652392104382
User 136802 does not improve AUC. Reverting changes.
Training on augumented user 46418 49/50 current_auc = 0.645209100033456
User 46418 AUC after training: 0.6452358648377384
User 46418 improves AUC. Keeping the model.
[2024-12-02 18:28:37.194594] start test user 15962 92/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:37.733613] start test user 15962 92/568 recall augumented users by random, augumented_users = [98056, 18119, 9119, 50382, 111254, 22183, 66950, 63741, 131675, 61942, 106783, 38700, 29850, 101663, 61957, 31569, 52564, 56726, 73034, 118306, 9342, 120012, 21122, 131462, 64168, 600, 103306, 131855, 52944, 101375, 34105, 30557, 74141, 23025, 68098, 95870, 100482, 127882, 133230, 126969, 17561, 127659, 44860, 68165, 48054, 67420, 109167, 18883, 135102, 85452]
[2024-12-02 18:28:37.749201] user = 15962 Cloud 92/568
[2024-12-02 18:28:37.771285] user = 15962 Local 92/568
[2024-12-02 18:28:37.833613] user = 15962 Local+ 92/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:40.628510] user = 15962 MPDA- 92/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.554752987337257
Training on augumented user 98056 0/50 current_auc = 0.554752987337257
User 98056 AUC after training: 0.5544854645978242
User 98056 does not improve AUC. Reverting changes.
Training on augumented user 18119 1/50 current_auc = 0.554752987337257
User 18119 AUC after training: 0.5539504191189584
User 18119 does not improve AUC. Reverting changes.
Training on augumented user 9119 2/50 current_auc = 0.554752987337257
User 9119 AUC after training: 0.5544854645978242
User 9119 does not improve AUC. Reverting changes.
Training on augumented user 50382 3/50 current_auc = 0.554752987337257
User 50382 AUC after training: 0.5527019796682718
User 50382 does not improve AUC. Reverting changes.
Training on augumented user 111254 4/50 current_auc = 0.554752987337257
User 111254 AUC after training: 0.5534153736400929
User 111254 does not improve AUC. Reverting changes.
Training on augumented user 22183 5/50 current_auc = 0.554752987337257
User 22183 AUC after training: 0.5543962903513466
User 22183 does not improve AUC. Reverting changes.
Training on augumented user 66950 6/50 current_auc = 0.554752987337257
User 66950 AUC after training: 0.5552880328161227
User 66950 improves AUC. Keeping the model.
Training on augumented user 63741 7/50 current_auc = 0.5552880328161227
User 63741 AUC after training: 0.5553772070626003
User 63741 improves AUC. Keeping the model.
Training on augumented user 131675 8/50 current_auc = 0.5553772070626003
User 131675 AUC after training: 0.552880328161227
User 131675 does not improve AUC. Reverting changes.
Training on augumented user 61942 9/50 current_auc = 0.5553772070626003
User 61942 AUC after training: 0.557339040485108
User 61942 improves AUC. Keeping the model.
Training on augumented user 106783 10/50 current_auc = 0.557339040485108
User 106783 AUC after training: 0.5546638130907794
User 106783 does not improve AUC. Reverting changes.
Training on augumented user 38700 11/50 current_auc = 0.557339040485108
User 38700 AUC after training: 0.5576957374710184
User 38700 improves AUC. Keeping the model.
Training on augumented user 29850 12/50 current_auc = 0.5576957374710184
User 29850 AUC after training: 0.5586766541822722
User 29850 improves AUC. Keeping the model.
Training on augumented user 101663 13/50 current_auc = 0.5586766541822722
User 101663 AUC after training: 0.558944176921705
User 101663 improves AUC. Keeping the model.
Training on augumented user 61957 14/50 current_auc = 0.558944176921705
User 61957 AUC after training: 0.5586766541822722
User 61957 does not improve AUC. Reverting changes.
Training on augumented user 31569 15/50 current_auc = 0.558944176921705
User 31569 AUC after training: 0.5596575708935259
User 31569 improves AUC. Keeping the model.
Training on augumented user 52564 16/50 current_auc = 0.5596575708935259
User 52564 AUC after training: 0.5571606919921527
User 52564 does not improve AUC. Reverting changes.
Training on augumented user 56726 17/50 current_auc = 0.5596575708935259
User 56726 AUC after training: 0.5556447298020332
User 56726 does not improve AUC. Reverting changes.
Training on augumented user 73034 18/50 current_auc = 0.5596575708935259
User 73034 AUC after training: 0.5587658284287498
User 73034 does not improve AUC. Reverting changes.
Training on augumented user 118306 19/50 current_auc = 0.5596575708935259
User 118306 AUC after training: 0.5589441769217051
User 118306 does not improve AUC. Reverting changes.
Training on augumented user 9342 20/50 current_auc = 0.5596575708935259
User 9342 AUC after training: 0.5587658284287498
User 9342 does not improve AUC. Reverting changes.
Training on augumented user 120012 21/50 current_auc = 0.5596575708935259
User 120012 AUC after training: 0.5600142678794365
User 120012 improves AUC. Keeping the model.
Training on augumented user 21122 22/50 current_auc = 0.5600142678794365
User 21122 AUC after training: 0.5594792224005707
User 21122 does not improve AUC. Reverting changes.
Training on augumented user 131462 23/50 current_auc = 0.5600142678794365
User 131462 AUC after training: 0.559657570893526
User 131462 does not improve AUC. Reverting changes.
Training on augumented user 64168 24/50 current_auc = 0.5600142678794365
User 64168 AUC after training: 0.5614410558230783
User 64168 improves AUC. Keeping the model.
Training on augumented user 600 25/50 current_auc = 0.5614410558230783
User 600 AUC after training: 0.5578740859639736
User 600 does not improve AUC. Reverting changes.
Training on augumented user 103306 26/50 current_auc = 0.5614410558230783
User 103306 AUC after training: 0.5640271089709292
User 103306 improves AUC. Keeping the model.
Training on augumented user 131855 27/50 current_auc = 0.5640271089709292
User 131855 AUC after training: 0.5617977528089888
User 131855 does not improve AUC. Reverting changes.
Training on augumented user 52944 28/50 current_auc = 0.5640271089709292
User 52944 AUC after training: 0.5593008739076155
User 52944 does not improve AUC. Reverting changes.
Training on augumented user 101375 29/50 current_auc = 0.5640271089709292
User 101375 AUC after training: 0.565008025682183
User 101375 improves AUC. Keeping the model.
Training on augumented user 34105 30/50 current_auc = 0.565008025682183
User 34105 AUC after training: 0.5651863741751383
User 34105 improves AUC. Keeping the model.
Training on augumented user 30557 31/50 current_auc = 0.5651863741751383
User 30557 AUC after training: 0.5651863741751383
User 30557 does not improve AUC. Reverting changes.
Training on augumented user 74141 32/50 current_auc = 0.5651863741751383
User 74141 AUC after training: 0.5651863741751383
User 74141 does not improve AUC. Reverting changes.
Training on augumented user 23025 33/50 current_auc = 0.5651863741751383
User 23025 AUC after training: 0.5635812377385412
User 23025 does not improve AUC. Reverting changes.
Training on augumented user 68098 34/50 current_auc = 0.5651863741751383
User 68098 AUC after training: 0.565008025682183
User 68098 does not improve AUC. Reverting changes.
Training on augumented user 95870 35/50 current_auc = 0.5651863741751383
User 95870 AUC after training: 0.5658997681469592
User 95870 improves AUC. Keeping the model.
Training on augumented user 100482 36/50 current_auc = 0.5658997681469592
User 100482 AUC after training: 0.5644729802033173
User 100482 does not improve AUC. Reverting changes.
Training on augumented user 127882 37/50 current_auc = 0.5658997681469592
User 127882 AUC after training: 0.5654538969145712
User 127882 does not improve AUC. Reverting changes.
Training on augumented user 133230 38/50 current_auc = 0.5658997681469592
User 133230 AUC after training: 0.5651863741751383
User 133230 does not improve AUC. Reverting changes.
Training on augumented user 126969 39/50 current_auc = 0.5658997681469592
User 126969 AUC after training: 0.5657214196540039
User 126969 does not improve AUC. Reverting changes.
Training on augumented user 17561 40/50 current_auc = 0.5658997681469592
User 17561 AUC after training: 0.5651863741751382
User 17561 does not improve AUC. Reverting changes.
Training on augumented user 127659 41/50 current_auc = 0.5658997681469592
User 127659 AUC after training: 0.5642054574638845
User 127659 does not improve AUC. Reverting changes.
Training on augumented user 44860 42/50 current_auc = 0.5658997681469592
User 44860 AUC after training: 0.5640271089709292
User 44860 does not improve AUC. Reverting changes.
Training on augumented user 68165 43/50 current_auc = 0.5658997681469592
User 68165 AUC after training: 0.5659889423934368
User 68165 improves AUC. Keeping the model.
Training on augumented user 48054 44/50 current_auc = 0.5659889423934368
User 48054 AUC after training: 0.5641162832174068
User 48054 does not improve AUC. Reverting changes.
Training on augumented user 67420 45/50 current_auc = 0.5659889423934368
User 67420 AUC after training: 0.5657214196540039
User 67420 does not improve AUC. Reverting changes.
Training on augumented user 109167 46/50 current_auc = 0.5659889423934368
User 109167 AUC after training: 0.5593900481540932
User 109167 does not improve AUC. Reverting changes.
Training on augumented user 18883 47/50 current_auc = 0.5659889423934368
User 18883 AUC after training: 0.5653647226680935
User 18883 does not improve AUC. Reverting changes.
Training on augumented user 135102 48/50 current_auc = 0.5659889423934368
User 135102 AUC after training: 0.5629570180131978
User 135102 does not improve AUC. Reverting changes.
Training on augumented user 85452 49/50 current_auc = 0.5659889423934368
User 85452 AUC after training: 0.5653647226680935
User 85452 does not improve AUC. Reverting changes.
[2024-12-02 18:29:11.107350] start test user 16016 93/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:11.615714] start test user 16016 93/568 recall augumented users by random, augumented_users = [129310, 36784, 92515, 55878, 86505, 108040, 122215, 11645, 30942, 2963, 73826, 126044, 45293, 33831, 43873, 137147, 59791, 119415, 57360, 18653, 37901, 126124, 43841, 2486, 15701, 113164, 42538, 58796, 16802, 134880, 129509, 8052, 45606, 2373, 120381, 107924, 75332, 12614, 71442, 26868, 2471, 71207, 17037, 106722, 49141, 32672, 107193, 125067, 121173, 78538]
[2024-12-02 18:29:11.637025] user = 16016 Cloud 93/568
[2024-12-02 18:29:11.653171] user = 16016 Local 93/568
[2024-12-02 18:29:11.697258] user = 16016 Local+ 93/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:14.151301] user = 16016 MPDA- 93/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7532467532467533
Training on augumented user 129310 0/50 current_auc = 0.7532467532467533
User 129310 AUC after training: 0.7532467532467533
User 129310 does not improve AUC. Reverting changes.
Training on augumented user 36784 1/50 current_auc = 0.7532467532467533
User 36784 AUC after training: 0.7532467532467533
User 36784 does not improve AUC. Reverting changes.
Training on augumented user 92515 2/50 current_auc = 0.7532467532467533
User 92515 AUC after training: 0.7402597402597403
User 92515 does not improve AUC. Reverting changes.
Training on augumented user 55878 3/50 current_auc = 0.7532467532467533
User 55878 AUC after training: 0.7532467532467533
User 55878 does not improve AUC. Reverting changes.
Training on augumented user 86505 4/50 current_auc = 0.7532467532467533
User 86505 AUC after training: 0.7402597402597403
User 86505 does not improve AUC. Reverting changes.
Training on augumented user 108040 5/50 current_auc = 0.7532467532467533
User 108040 AUC after training: 0.7532467532467533
User 108040 does not improve AUC. Reverting changes.
Training on augumented user 122215 6/50 current_auc = 0.7532467532467533
User 122215 AUC after training: 0.7532467532467533
User 122215 does not improve AUC. Reverting changes.
Training on augumented user 11645 7/50 current_auc = 0.7532467532467533
User 11645 AUC after training: 0.7402597402597403
User 11645 does not improve AUC. Reverting changes.
Training on augumented user 30942 8/50 current_auc = 0.7532467532467533
User 30942 AUC after training: 0.7532467532467533
User 30942 does not improve AUC. Reverting changes.
Training on augumented user 2963 9/50 current_auc = 0.7532467532467533
User 2963 AUC after training: 0.7402597402597403
User 2963 does not improve AUC. Reverting changes.
Training on augumented user 73826 10/50 current_auc = 0.7532467532467533
User 73826 AUC after training: 0.7532467532467533
User 73826 does not improve AUC. Reverting changes.
Training on augumented user 126044 11/50 current_auc = 0.7532467532467533
User 126044 AUC after training: 0.7532467532467533
User 126044 does not improve AUC. Reverting changes.
Training on augumented user 45293 12/50 current_auc = 0.7532467532467533
User 45293 AUC after training: 0.7532467532467533
User 45293 does not improve AUC. Reverting changes.
Training on augumented user 33831 13/50 current_auc = 0.7532467532467533
User 33831 AUC after training: 0.7532467532467533
User 33831 does not improve AUC. Reverting changes.
Training on augumented user 43873 14/50 current_auc = 0.7532467532467533
User 43873 AUC after training: 0.7532467532467533
User 43873 does not improve AUC. Reverting changes.
Training on augumented user 137147 15/50 current_auc = 0.7532467532467533
User 137147 AUC after training: 0.7532467532467533
User 137147 does not improve AUC. Reverting changes.
Training on augumented user 59791 16/50 current_auc = 0.7532467532467533
User 59791 AUC after training: 0.7532467532467533
User 59791 does not improve AUC. Reverting changes.
Training on augumented user 119415 17/50 current_auc = 0.7532467532467533
User 119415 AUC after training: 0.7532467532467533
User 119415 does not improve AUC. Reverting changes.
Training on augumented user 57360 18/50 current_auc = 0.7532467532467533
User 57360 AUC after training: 0.7532467532467533
User 57360 does not improve AUC. Reverting changes.
Training on augumented user 18653 19/50 current_auc = 0.7532467532467533
User 18653 AUC after training: 0.7402597402597403
User 18653 does not improve AUC. Reverting changes.
Training on augumented user 37901 20/50 current_auc = 0.7532467532467533
User 37901 AUC after training: 0.7532467532467533
User 37901 does not improve AUC. Reverting changes.
Training on augumented user 126124 21/50 current_auc = 0.7532467532467533
User 126124 AUC after training: 0.7532467532467533
User 126124 does not improve AUC. Reverting changes.
Training on augumented user 43841 22/50 current_auc = 0.7532467532467533
User 43841 AUC after training: 0.7402597402597403
User 43841 does not improve AUC. Reverting changes.
Training on augumented user 2486 23/50 current_auc = 0.7532467532467533
User 2486 AUC after training: 0.7532467532467533
User 2486 does not improve AUC. Reverting changes.
Training on augumented user 15701 24/50 current_auc = 0.7532467532467533
User 15701 AUC after training: 0.7402597402597403
User 15701 does not improve AUC. Reverting changes.
Training on augumented user 113164 25/50 current_auc = 0.7532467532467533
User 113164 AUC after training: 0.7532467532467533
User 113164 does not improve AUC. Reverting changes.
Training on augumented user 42538 26/50 current_auc = 0.7532467532467533
User 42538 AUC after training: 0.7532467532467533
User 42538 does not improve AUC. Reverting changes.
Training on augumented user 58796 27/50 current_auc = 0.7532467532467533
User 58796 AUC after training: 0.7532467532467533
User 58796 does not improve AUC. Reverting changes.
Training on augumented user 16802 28/50 current_auc = 0.7532467532467533
User 16802 AUC after training: 0.7532467532467533
User 16802 does not improve AUC. Reverting changes.
Training on augumented user 134880 29/50 current_auc = 0.7532467532467533
User 134880 AUC after training: 0.7532467532467533
User 134880 does not improve AUC. Reverting changes.
Training on augumented user 129509 30/50 current_auc = 0.7532467532467533
User 129509 AUC after training: 0.7402597402597403
User 129509 does not improve AUC. Reverting changes.
Training on augumented user 8052 31/50 current_auc = 0.7532467532467533
User 8052 AUC after training: 0.7402597402597403
User 8052 does not improve AUC. Reverting changes.
Training on augumented user 45606 32/50 current_auc = 0.7532467532467533
User 45606 AUC after training: 0.7532467532467533
User 45606 does not improve AUC. Reverting changes.
Training on augumented user 2373 33/50 current_auc = 0.7532467532467533
User 2373 AUC after training: 0.7532467532467533
User 2373 does not improve AUC. Reverting changes.
Training on augumented user 120381 34/50 current_auc = 0.7532467532467533
User 120381 AUC after training: 0.7532467532467533
User 120381 does not improve AUC. Reverting changes.
Training on augumented user 107924 35/50 current_auc = 0.7532467532467533
User 107924 AUC after training: 0.7532467532467533
User 107924 does not improve AUC. Reverting changes.
Training on augumented user 75332 36/50 current_auc = 0.7532467532467533
User 75332 AUC after training: 0.7402597402597403
User 75332 does not improve AUC. Reverting changes.
Training on augumented user 12614 37/50 current_auc = 0.7532467532467533
User 12614 AUC after training: 0.7532467532467533
User 12614 does not improve AUC. Reverting changes.
Training on augumented user 71442 38/50 current_auc = 0.7532467532467533
User 71442 AUC after training: 0.7402597402597403
User 71442 does not improve AUC. Reverting changes.
Training on augumented user 26868 39/50 current_auc = 0.7532467532467533
User 26868 AUC after training: 0.7532467532467533
User 26868 does not improve AUC. Reverting changes.
Training on augumented user 2471 40/50 current_auc = 0.7532467532467533
User 2471 AUC after training: 0.7532467532467533
User 2471 does not improve AUC. Reverting changes.
Training on augumented user 71207 41/50 current_auc = 0.7532467532467533
User 71207 AUC after training: 0.7532467532467533
User 71207 does not improve AUC. Reverting changes.
Training on augumented user 17037 42/50 current_auc = 0.7532467532467533
User 17037 AUC after training: 0.7402597402597403
User 17037 does not improve AUC. Reverting changes.
Training on augumented user 106722 43/50 current_auc = 0.7532467532467533
User 106722 AUC after training: 0.7532467532467533
User 106722 does not improve AUC. Reverting changes.
Training on augumented user 49141 44/50 current_auc = 0.7532467532467533
User 49141 AUC after training: 0.7532467532467533
User 49141 does not improve AUC. Reverting changes.
Training on augumented user 32672 45/50 current_auc = 0.7532467532467533
User 32672 AUC after training: 0.7272727272727273
User 32672 does not improve AUC. Reverting changes.
Training on augumented user 107193 46/50 current_auc = 0.7532467532467533
User 107193 AUC after training: 0.7402597402597403
User 107193 does not improve AUC. Reverting changes.
Training on augumented user 125067 47/50 current_auc = 0.7532467532467533
User 125067 AUC after training: 0.7532467532467533
User 125067 does not improve AUC. Reverting changes.
Training on augumented user 121173 48/50 current_auc = 0.7532467532467533
User 121173 AUC after training: 0.7532467532467533
User 121173 does not improve AUC. Reverting changes.
Training on augumented user 78538 49/50 current_auc = 0.7532467532467533
User 78538 AUC after training: 0.7532467532467533
User 78538 does not improve AUC. Reverting changes.
[2024-12-02 18:29:41.845171] start test user 16040 94/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:42.473001] start test user 16040 94/568 recall augumented users by random, augumented_users = [138056, 123375, 73866, 110421, 128772, 132126, 60734, 22936, 137946, 50750, 90361, 106943, 30831, 18203, 31824, 83699, 78680, 121273, 14377, 107310, 67349, 115226, 103170, 22385, 44627, 94986, 32994, 84609, 92224, 59522, 107731, 62112, 136318, 38717, 24136, 115114, 962, 51871, 117105, 85131, 3, 19911, 56971, 11227, 50283, 77826, 82739, 128982, 76698, 78472]
[2024-12-02 18:29:42.487482] user = 16040 Cloud 94/568
[2024-12-02 18:29:42.497535] user = 16040 Local 94/568
[2024-12-02 18:29:42.590754] user = 16040 Local+ 94/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:45.601899] user = 16040 MPDA- 94/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6436781609195402
Training on augumented user 138056 0/50 current_auc = 0.6436781609195402
User 138056 AUC after training: 0.6436781609195402
User 138056 does not improve AUC. Reverting changes.
Training on augumented user 123375 1/50 current_auc = 0.6436781609195402
User 123375 AUC after training: 0.6436781609195402
User 123375 does not improve AUC. Reverting changes.
Training on augumented user 73866 2/50 current_auc = 0.6436781609195402
User 73866 AUC after training: 0.6436781609195402
User 73866 does not improve AUC. Reverting changes.
Training on augumented user 110421 3/50 current_auc = 0.6436781609195402
User 110421 AUC after training: 0.6436781609195402
User 110421 does not improve AUC. Reverting changes.
Training on augumented user 128772 4/50 current_auc = 0.6436781609195402
User 128772 AUC after training: 0.6436781609195402
User 128772 does not improve AUC. Reverting changes.
Training on augumented user 132126 5/50 current_auc = 0.6436781609195402
User 132126 AUC after training: 0.6436781609195402
User 132126 does not improve AUC. Reverting changes.
Training on augumented user 60734 6/50 current_auc = 0.6436781609195402
User 60734 AUC after training: 0.6436781609195402
User 60734 does not improve AUC. Reverting changes.
Training on augumented user 22936 7/50 current_auc = 0.6436781609195402
User 22936 AUC after training: 0.6436781609195402
User 22936 does not improve AUC. Reverting changes.
Training on augumented user 137946 8/50 current_auc = 0.6436781609195402
User 137946 AUC after training: 0.6436781609195402
User 137946 does not improve AUC. Reverting changes.
Training on augumented user 50750 9/50 current_auc = 0.6436781609195402
User 50750 AUC after training: 0.6436781609195402
User 50750 does not improve AUC. Reverting changes.
Training on augumented user 90361 10/50 current_auc = 0.6436781609195402
User 90361 AUC after training: 0.6436781609195402
User 90361 does not improve AUC. Reverting changes.
Training on augumented user 106943 11/50 current_auc = 0.6436781609195402
User 106943 AUC after training: 0.6436781609195402
User 106943 does not improve AUC. Reverting changes.
Training on augumented user 30831 12/50 current_auc = 0.6436781609195402
User 30831 AUC after training: 0.6436781609195402
User 30831 does not improve AUC. Reverting changes.
Training on augumented user 18203 13/50 current_auc = 0.6436781609195402
User 18203 AUC after training: 0.6436781609195402
User 18203 does not improve AUC. Reverting changes.
Training on augumented user 31824 14/50 current_auc = 0.6436781609195402
User 31824 AUC after training: 0.6436781609195402
User 31824 does not improve AUC. Reverting changes.
Training on augumented user 83699 15/50 current_auc = 0.6436781609195402
User 83699 AUC after training: 0.6436781609195402
User 83699 does not improve AUC. Reverting changes.
Training on augumented user 78680 16/50 current_auc = 0.6436781609195402
User 78680 AUC after training: 0.6436781609195402
User 78680 does not improve AUC. Reverting changes.
Training on augumented user 121273 17/50 current_auc = 0.6436781609195402
User 121273 AUC after training: 0.6436781609195402
User 121273 does not improve AUC. Reverting changes.
Training on augumented user 14377 18/50 current_auc = 0.6436781609195402
User 14377 AUC after training: 0.6436781609195402
User 14377 does not improve AUC. Reverting changes.
Training on augumented user 107310 19/50 current_auc = 0.6436781609195402
User 107310 AUC after training: 0.6436781609195402
User 107310 does not improve AUC. Reverting changes.
Training on augumented user 67349 20/50 current_auc = 0.6436781609195402
User 67349 AUC after training: 0.6436781609195402
User 67349 does not improve AUC. Reverting changes.
Training on augumented user 115226 21/50 current_auc = 0.6436781609195402
User 115226 AUC after training: 0.6436781609195402
User 115226 does not improve AUC. Reverting changes.
Training on augumented user 103170 22/50 current_auc = 0.6436781609195402
User 103170 AUC after training: 0.6436781609195402
User 103170 does not improve AUC. Reverting changes.
Training on augumented user 22385 23/50 current_auc = 0.6436781609195402
User 22385 AUC after training: 0.6436781609195402
User 22385 does not improve AUC. Reverting changes.
Training on augumented user 44627 24/50 current_auc = 0.6436781609195402
User 44627 AUC after training: 0.6436781609195402
User 44627 does not improve AUC. Reverting changes.
Training on augumented user 94986 25/50 current_auc = 0.6436781609195402
User 94986 AUC after training: 0.6436781609195402
User 94986 does not improve AUC. Reverting changes.
Training on augumented user 32994 26/50 current_auc = 0.6436781609195402
User 32994 AUC after training: 0.6436781609195402
User 32994 does not improve AUC. Reverting changes.
Training on augumented user 84609 27/50 current_auc = 0.6436781609195402
User 84609 AUC after training: 0.6436781609195402
User 84609 does not improve AUC. Reverting changes.
Training on augumented user 92224 28/50 current_auc = 0.6436781609195402
User 92224 AUC after training: 0.6436781609195402
User 92224 does not improve AUC. Reverting changes.
Training on augumented user 59522 29/50 current_auc = 0.6436781609195402
User 59522 AUC after training: 0.6436781609195402
User 59522 does not improve AUC. Reverting changes.
Training on augumented user 107731 30/50 current_auc = 0.6436781609195402
User 107731 AUC after training: 0.6436781609195402
User 107731 does not improve AUC. Reverting changes.
Training on augumented user 62112 31/50 current_auc = 0.6436781609195402
User 62112 AUC after training: 0.6436781609195402
User 62112 does not improve AUC. Reverting changes.
Training on augumented user 136318 32/50 current_auc = 0.6436781609195402
User 136318 AUC after training: 0.6436781609195402
User 136318 does not improve AUC. Reverting changes.
Training on augumented user 38717 33/50 current_auc = 0.6436781609195402
User 38717 AUC after training: 0.6436781609195402
User 38717 does not improve AUC. Reverting changes.
Training on augumented user 24136 34/50 current_auc = 0.6436781609195402
User 24136 AUC after training: 0.6436781609195402
User 24136 does not improve AUC. Reverting changes.
Training on augumented user 115114 35/50 current_auc = 0.6436781609195402
User 115114 AUC after training: 0.6436781609195402
User 115114 does not improve AUC. Reverting changes.
Training on augumented user 962 36/50 current_auc = 0.6436781609195402
User 962 AUC after training: 0.6436781609195402
User 962 does not improve AUC. Reverting changes.
Training on augumented user 51871 37/50 current_auc = 0.6436781609195402
User 51871 AUC after training: 0.6436781609195402
User 51871 does not improve AUC. Reverting changes.
Training on augumented user 117105 38/50 current_auc = 0.6436781609195402
User 117105 AUC after training: 0.6436781609195402
User 117105 does not improve AUC. Reverting changes.
Training on augumented user 85131 39/50 current_auc = 0.6436781609195402
User 85131 AUC after training: 0.6436781609195402
User 85131 does not improve AUC. Reverting changes.
Training on augumented user 3 40/50 current_auc = 0.6436781609195402
User 3 AUC after training: 0.6436781609195402
User 3 does not improve AUC. Reverting changes.
Training on augumented user 19911 41/50 current_auc = 0.6436781609195402
User 19911 AUC after training: 0.6436781609195402
User 19911 does not improve AUC. Reverting changes.
Training on augumented user 56971 42/50 current_auc = 0.6436781609195402
User 56971 AUC after training: 0.6436781609195402
User 56971 does not improve AUC. Reverting changes.
Training on augumented user 11227 43/50 current_auc = 0.6436781609195402
User 11227 AUC after training: 0.6436781609195402
User 11227 does not improve AUC. Reverting changes.
Training on augumented user 50283 44/50 current_auc = 0.6436781609195402
User 50283 AUC after training: 0.6436781609195402
User 50283 does not improve AUC. Reverting changes.
Training on augumented user 77826 45/50 current_auc = 0.6436781609195402
User 77826 AUC after training: 0.6436781609195402
User 77826 does not improve AUC. Reverting changes.
Training on augumented user 82739 46/50 current_auc = 0.6436781609195402
User 82739 AUC after training: 0.6436781609195402
User 82739 does not improve AUC. Reverting changes.
Training on augumented user 128982 47/50 current_auc = 0.6436781609195402
User 128982 AUC after training: 0.6436781609195402
User 128982 does not improve AUC. Reverting changes.
Training on augumented user 76698 48/50 current_auc = 0.6436781609195402
User 76698 AUC after training: 0.6436781609195402
User 76698 does not improve AUC. Reverting changes.
Training on augumented user 78472 49/50 current_auc = 0.6436781609195402
User 78472 AUC after training: 0.6436781609195402
User 78472 does not improve AUC. Reverting changes.
[2024-12-02 18:30:11.265646] start test user 16050 95/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:12.006054] start test user 16050 95/568 recall augumented users by random, augumented_users = [119615, 42518, 106600, 110422, 25775, 27415, 129753, 22278, 39163, 53252, 49069, 10746, 60604, 33108, 135632, 48070, 99684, 36553, 30688, 107729, 103888, 33736, 69154, 39645, 82970, 93463, 69187, 85687, 65177, 88308, 63453, 68971, 47994, 1203, 113853, 64860, 21480, 82099, 10265, 96942, 65648, 55200, 15218, 100888, 95247, 69513, 28443, 10850, 129145, 136939]
[2024-12-02 18:30:12.059498] user = 16050 Cloud 95/568
[2024-12-02 18:30:12.102369] user = 16050 Local 95/568
[2024-12-02 18:30:12.264085] user = 16050 Local+ 95/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:14.836503] user = 16050 MPDA- 95/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5307692307692308
Training on augumented user 119615 0/50 current_auc = 0.5307692307692308
User 119615 AUC after training: 0.5230769230769231
User 119615 does not improve AUC. Reverting changes.
Training on augumented user 42518 1/50 current_auc = 0.5307692307692308
User 42518 AUC after training: 0.5269230769230769
User 42518 does not improve AUC. Reverting changes.
Training on augumented user 106600 2/50 current_auc = 0.5307692307692308
User 106600 AUC after training: 0.5269230769230769
User 106600 does not improve AUC. Reverting changes.
Training on augumented user 110422 3/50 current_auc = 0.5307692307692308
User 110422 AUC after training: 0.5307692307692308
User 110422 does not improve AUC. Reverting changes.
Training on augumented user 25775 4/50 current_auc = 0.5307692307692308
User 25775 AUC after training: 0.5269230769230769
User 25775 does not improve AUC. Reverting changes.
Training on augumented user 27415 5/50 current_auc = 0.5307692307692308
User 27415 AUC after training: 0.5346153846153846
User 27415 improves AUC. Keeping the model.
Training on augumented user 129753 6/50 current_auc = 0.5346153846153846
User 129753 AUC after training: 0.5307692307692308
User 129753 does not improve AUC. Reverting changes.
Training on augumented user 22278 7/50 current_auc = 0.5346153846153846
User 22278 AUC after training: 0.5346153846153846
User 22278 does not improve AUC. Reverting changes.
Training on augumented user 39163 8/50 current_auc = 0.5346153846153846
User 39163 AUC after training: 0.5346153846153846
User 39163 does not improve AUC. Reverting changes.
Training on augumented user 53252 9/50 current_auc = 0.5346153846153846
User 53252 AUC after training: 0.5307692307692308
User 53252 does not improve AUC. Reverting changes.
Training on augumented user 49069 10/50 current_auc = 0.5346153846153846
User 49069 AUC after training: 0.5346153846153846
User 49069 does not improve AUC. Reverting changes.
Training on augumented user 10746 11/50 current_auc = 0.5346153846153846
User 10746 AUC after training: 0.5346153846153846
User 10746 does not improve AUC. Reverting changes.
Training on augumented user 60604 12/50 current_auc = 0.5346153846153846
User 60604 AUC after training: 0.5346153846153846
User 60604 does not improve AUC. Reverting changes.
Training on augumented user 33108 13/50 current_auc = 0.5346153846153846
User 33108 AUC after training: 0.5346153846153846
User 33108 does not improve AUC. Reverting changes.
Training on augumented user 135632 14/50 current_auc = 0.5346153846153846
User 135632 AUC after training: 0.5346153846153846
User 135632 does not improve AUC. Reverting changes.
Training on augumented user 48070 15/50 current_auc = 0.5346153846153846
User 48070 AUC after training: 0.5384615384615384
User 48070 improves AUC. Keeping the model.
Training on augumented user 99684 16/50 current_auc = 0.5384615384615384
User 99684 AUC after training: 0.5346153846153846
User 99684 does not improve AUC. Reverting changes.
Training on augumented user 36553 17/50 current_auc = 0.5384615384615384
User 36553 AUC after training: 0.5384615384615384
User 36553 does not improve AUC. Reverting changes.
Training on augumented user 30688 18/50 current_auc = 0.5384615384615384
User 30688 AUC after training: 0.5384615384615384
User 30688 does not improve AUC. Reverting changes.
Training on augumented user 107729 19/50 current_auc = 0.5384615384615384
User 107729 AUC after training: 0.5384615384615384
User 107729 does not improve AUC. Reverting changes.
Training on augumented user 103888 20/50 current_auc = 0.5384615384615384
User 103888 AUC after training: 0.5346153846153846
User 103888 does not improve AUC. Reverting changes.
Training on augumented user 33736 21/50 current_auc = 0.5384615384615384
User 33736 AUC after training: 0.523076923076923
User 33736 does not improve AUC. Reverting changes.
Training on augumented user 69154 22/50 current_auc = 0.5384615384615384
User 69154 AUC after training: 0.5346153846153846
User 69154 does not improve AUC. Reverting changes.
Training on augumented user 39645 23/50 current_auc = 0.5384615384615384
User 39645 AUC after training: 0.5346153846153846
User 39645 does not improve AUC. Reverting changes.
Training on augumented user 82970 24/50 current_auc = 0.5384615384615384
User 82970 AUC after training: 0.5384615384615384
User 82970 does not improve AUC. Reverting changes.
Training on augumented user 93463 25/50 current_auc = 0.5384615384615384
User 93463 AUC after training: 0.5346153846153846
User 93463 does not improve AUC. Reverting changes.
Training on augumented user 69187 26/50 current_auc = 0.5384615384615384
User 69187 AUC after training: 0.5384615384615384
User 69187 does not improve AUC. Reverting changes.
Training on augumented user 85687 27/50 current_auc = 0.5384615384615384
User 85687 AUC after training: 0.5384615384615384
User 85687 does not improve AUC. Reverting changes.
Training on augumented user 65177 28/50 current_auc = 0.5384615384615384
User 65177 AUC after training: 0.5384615384615384
User 65177 does not improve AUC. Reverting changes.
Training on augumented user 88308 29/50 current_auc = 0.5384615384615384
User 88308 AUC after training: 0.5346153846153846
User 88308 does not improve AUC. Reverting changes.
Training on augumented user 63453 30/50 current_auc = 0.5384615384615384
User 63453 AUC after training: 0.5384615384615384
User 63453 does not improve AUC. Reverting changes.
Training on augumented user 68971 31/50 current_auc = 0.5384615384615384
User 68971 AUC after training: 0.5384615384615384
User 68971 does not improve AUC. Reverting changes.
Training on augumented user 47994 32/50 current_auc = 0.5384615384615384
User 47994 AUC after training: 0.5346153846153846
User 47994 does not improve AUC. Reverting changes.
Training on augumented user 1203 33/50 current_auc = 0.5384615384615384
User 1203 AUC after training: 0.5384615384615384
User 1203 does not improve AUC. Reverting changes.
Training on augumented user 113853 34/50 current_auc = 0.5384615384615384
User 113853 AUC after training: 0.5346153846153846
User 113853 does not improve AUC. Reverting changes.
Training on augumented user 64860 35/50 current_auc = 0.5384615384615384
User 64860 AUC after training: 0.5307692307692308
User 64860 does not improve AUC. Reverting changes.
Training on augumented user 21480 36/50 current_auc = 0.5384615384615384
User 21480 AUC after training: 0.5384615384615384
User 21480 does not improve AUC. Reverting changes.
Training on augumented user 82099 37/50 current_auc = 0.5384615384615384
User 82099 AUC after training: 0.5346153846153846
User 82099 does not improve AUC. Reverting changes.
Training on augumented user 10265 38/50 current_auc = 0.5384615384615384
User 10265 AUC after training: 0.5384615384615384
User 10265 does not improve AUC. Reverting changes.
Training on augumented user 96942 39/50 current_auc = 0.5384615384615384
User 96942 AUC after training: 0.5346153846153846
User 96942 does not improve AUC. Reverting changes.
Training on augumented user 65648 40/50 current_auc = 0.5384615384615384
User 65648 AUC after training: 0.5346153846153846
User 65648 does not improve AUC. Reverting changes.
Training on augumented user 55200 41/50 current_auc = 0.5384615384615384
User 55200 AUC after training: 0.5346153846153846
User 55200 does not improve AUC. Reverting changes.
Training on augumented user 15218 42/50 current_auc = 0.5384615384615384
User 15218 AUC after training: 0.5346153846153846
User 15218 does not improve AUC. Reverting changes.
Training on augumented user 100888 43/50 current_auc = 0.5384615384615384
User 100888 AUC after training: 0.5346153846153846
User 100888 does not improve AUC. Reverting changes.
Training on augumented user 95247 44/50 current_auc = 0.5384615384615384
User 95247 AUC after training: 0.5384615384615384
User 95247 does not improve AUC. Reverting changes.
Training on augumented user 69513 45/50 current_auc = 0.5384615384615384
User 69513 AUC after training: 0.5384615384615384
User 69513 does not improve AUC. Reverting changes.
Training on augumented user 28443 46/50 current_auc = 0.5384615384615384
User 28443 AUC after training: 0.5384615384615384
User 28443 does not improve AUC. Reverting changes.
Training on augumented user 10850 47/50 current_auc = 0.5384615384615384
User 10850 AUC after training: 0.5307692307692308
User 10850 does not improve AUC. Reverting changes.
Training on augumented user 129145 48/50 current_auc = 0.5384615384615384
User 129145 AUC after training: 0.5384615384615384
User 129145 does not improve AUC. Reverting changes.
Training on augumented user 136939 49/50 current_auc = 0.5384615384615384
User 136939 AUC after training: 0.5384615384615384
User 136939 does not improve AUC. Reverting changes.
[2024-12-02 18:30:46.512572] start test user 16073 96/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:46.962516] start test user 16073 96/568 recall augumented users by random, augumented_users = [16702, 4824, 13302, 68501, 26205, 76074, 71246, 68620, 110966, 23585, 112585, 95044, 136280, 137162, 138384, 74996, 51234, 4732, 113150, 129301, 58130, 66975, 69355, 61592, 76347, 101999, 125108, 125526, 19061, 111958, 29201, 37495, 54709, 129011, 120458, 31209, 54068, 39374, 113819, 85177, 110192, 1594, 126835, 131549, 54773, 108938, 38559, 91987, 24904, 85478]
[2024-12-02 18:30:46.977489] user = 16073 Cloud 96/568
[2024-12-02 18:30:46.998697] user = 16073 Local 96/568
[2024-12-02 18:30:47.042010] user = 16073 Local+ 96/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:49.093778] user = 16073 MPDA- 96/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6088971269694161
Training on augumented user 16702 0/50 current_auc = 0.6088971269694161
User 16702 AUC after training: 0.6093605189990732
User 16702 improves AUC. Keeping the model.
Training on augumented user 4824 1/50 current_auc = 0.6093605189990732
User 4824 AUC after training: 0.6090129749768304
User 4824 does not improve AUC. Reverting changes.
Training on augumented user 13302 2/50 current_auc = 0.6093605189990732
User 13302 AUC after training: 0.6093605189990732
User 13302 does not improve AUC. Reverting changes.
Training on augumented user 68501 3/50 current_auc = 0.6093605189990732
User 68501 AUC after training: 0.6092446709916589
User 68501 does not improve AUC. Reverting changes.
Training on augumented user 26205 4/50 current_auc = 0.6093605189990732
User 26205 AUC after training: 0.6091288229842446
User 26205 does not improve AUC. Reverting changes.
Training on augumented user 76074 5/50 current_auc = 0.6093605189990732
User 76074 AUC after training: 0.6092446709916589
User 76074 does not improve AUC. Reverting changes.
Training on augumented user 71246 6/50 current_auc = 0.6093605189990732
User 71246 AUC after training: 0.6090129749768304
User 71246 does not improve AUC. Reverting changes.
Training on augumented user 68620 7/50 current_auc = 0.6093605189990732
User 68620 AUC after training: 0.6098239110287302
User 68620 improves AUC. Keeping the model.
Training on augumented user 110966 8/50 current_auc = 0.6098239110287302
User 110966 AUC after training: 0.6097080630213161
User 110966 does not improve AUC. Reverting changes.
Training on augumented user 23585 9/50 current_auc = 0.6098239110287302
User 23585 AUC after training: 0.6100556070435588
User 23585 improves AUC. Keeping the model.
Training on augumented user 112585 10/50 current_auc = 0.6100556070435588
User 112585 AUC after training: 0.6100556070435589
User 112585 improves AUC. Keeping the model.
Training on augumented user 95044 11/50 current_auc = 0.6100556070435589
User 95044 AUC after training: 0.6099397590361445
User 95044 does not improve AUC. Reverting changes.
Training on augumented user 136280 12/50 current_auc = 0.6100556070435589
User 136280 AUC after training: 0.6099397590361446
User 136280 does not improve AUC. Reverting changes.
Training on augumented user 137162 13/50 current_auc = 0.6100556070435589
User 137162 AUC after training: 0.6099397590361446
User 137162 does not improve AUC. Reverting changes.
Training on augumented user 138384 14/50 current_auc = 0.6100556070435589
User 138384 AUC after training: 0.6098239110287303
User 138384 does not improve AUC. Reverting changes.
Training on augumented user 74996 15/50 current_auc = 0.6100556070435589
User 74996 AUC after training: 0.6098239110287302
User 74996 does not improve AUC. Reverting changes.
Training on augumented user 51234 16/50 current_auc = 0.6100556070435589
User 51234 AUC after training: 0.6094763670064874
User 51234 does not improve AUC. Reverting changes.
Training on augumented user 4732 17/50 current_auc = 0.6100556070435589
User 4732 AUC after training: 0.609708063021316
User 4732 does not improve AUC. Reverting changes.
Training on augumented user 113150 18/50 current_auc = 0.6100556070435589
User 113150 AUC after training: 0.6100556070435589
User 113150 does not improve AUC. Reverting changes.
Training on augumented user 129301 19/50 current_auc = 0.6100556070435589
User 129301 AUC after training: 0.6100556070435589
User 129301 does not improve AUC. Reverting changes.
Training on augumented user 58130 20/50 current_auc = 0.6100556070435589
User 58130 AUC after training: 0.6095922150139018
User 58130 does not improve AUC. Reverting changes.
Training on augumented user 66975 21/50 current_auc = 0.6100556070435589
User 66975 AUC after training: 0.6099397590361445
User 66975 does not improve AUC. Reverting changes.
Training on augumented user 69355 22/50 current_auc = 0.6100556070435589
User 69355 AUC after training: 0.6093605189990732
User 69355 does not improve AUC. Reverting changes.
Training on augumented user 61592 23/50 current_auc = 0.6100556070435589
User 61592 AUC after training: 0.6094763670064876
User 61592 does not improve AUC. Reverting changes.
Training on augumented user 76347 24/50 current_auc = 0.6100556070435589
User 76347 AUC after training: 0.6101714550509731
User 76347 improves AUC. Keeping the model.
Training on augumented user 101999 25/50 current_auc = 0.6101714550509731
User 101999 AUC after training: 0.6100556070435588
User 101999 does not improve AUC. Reverting changes.
Training on augumented user 125108 26/50 current_auc = 0.6101714550509731
User 125108 AUC after training: 0.6101714550509731
User 125108 does not improve AUC. Reverting changes.
Training on augumented user 125526 27/50 current_auc = 0.6101714550509731
User 125526 AUC after training: 0.6101714550509731
User 125526 does not improve AUC. Reverting changes.
Training on augumented user 19061 28/50 current_auc = 0.6101714550509731
User 19061 AUC after training: 0.6099397590361445
User 19061 does not improve AUC. Reverting changes.
Training on augumented user 111958 29/50 current_auc = 0.6101714550509731
User 111958 AUC after training: 0.6100556070435588
User 111958 does not improve AUC. Reverting changes.
Training on augumented user 29201 30/50 current_auc = 0.6101714550509731
User 29201 AUC after training: 0.6095922150139017
User 29201 does not improve AUC. Reverting changes.
Training on augumented user 37495 31/50 current_auc = 0.6101714550509731
User 37495 AUC after training: 0.6101714550509731
User 37495 does not improve AUC. Reverting changes.
Training on augumented user 54709 32/50 current_auc = 0.6101714550509731
User 54709 AUC after training: 0.6100556070435588
User 54709 does not improve AUC. Reverting changes.
Training on augumented user 129011 33/50 current_auc = 0.6101714550509731
User 129011 AUC after training: 0.6098239110287302
User 129011 does not improve AUC. Reverting changes.
Training on augumented user 120458 34/50 current_auc = 0.6101714550509731
User 120458 AUC after training: 0.6088971269694161
User 120458 does not improve AUC. Reverting changes.
Training on augumented user 31209 35/50 current_auc = 0.6101714550509731
User 31209 AUC after training: 0.6102873030583874
User 31209 improves AUC. Keeping the model.
Training on augumented user 54068 36/50 current_auc = 0.6102873030583874
User 54068 AUC after training: 0.609244670991659
User 54068 does not improve AUC. Reverting changes.
Training on augumented user 39374 37/50 current_auc = 0.6102873030583874
User 39374 AUC after training: 0.6101714550509731
User 39374 does not improve AUC. Reverting changes.
Training on augumented user 113819 38/50 current_auc = 0.6102873030583874
User 113819 AUC after training: 0.6101714550509731
User 113819 does not improve AUC. Reverting changes.
Training on augumented user 85177 39/50 current_auc = 0.6102873030583874
User 85177 AUC after training: 0.6108665430954587
User 85177 improves AUC. Keeping the model.
Training on augumented user 110192 40/50 current_auc = 0.6108665430954587
User 110192 AUC after training: 0.6101714550509731
User 110192 does not improve AUC. Reverting changes.
Training on augumented user 1594 41/50 current_auc = 0.6108665430954587
User 1594 AUC after training: 0.610982391102873
User 1594 improves AUC. Keeping the model.
Training on augumented user 126835 42/50 current_auc = 0.610982391102873
User 126835 AUC after training: 0.6108665430954587
User 126835 does not improve AUC. Reverting changes.
Training on augumented user 131549 43/50 current_auc = 0.610982391102873
User 131549 AUC after training: 0.6112140871177016
User 131549 improves AUC. Keeping the model.
Training on augumented user 54773 44/50 current_auc = 0.6112140871177016
User 54773 AUC after training: 0.6112140871177015
User 54773 does not improve AUC. Reverting changes.
Training on augumented user 108938 45/50 current_auc = 0.6112140871177016
User 108938 AUC after training: 0.6109823911028729
User 108938 does not improve AUC. Reverting changes.
Training on augumented user 38559 46/50 current_auc = 0.6112140871177016
User 38559 AUC after training: 0.6113299351251158
User 38559 improves AUC. Keeping the model.
Training on augumented user 91987 47/50 current_auc = 0.6113299351251158
User 91987 AUC after training: 0.6114457831325301
User 91987 improves AUC. Keeping the model.
Training on augumented user 24904 48/50 current_auc = 0.6114457831325301
User 24904 AUC after training: 0.6110982391102873
User 24904 does not improve AUC. Reverting changes.
Training on augumented user 85478 49/50 current_auc = 0.6114457831325301
User 85478 AUC after training: 0.6110982391102873
User 85478 does not improve AUC. Reverting changes.
[2024-12-02 18:31:13.391096] start test user 16092 97/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:13.796869] start test user 16092 97/568 recall augumented users by random, augumented_users = [105502, 129928, 13512, 22671, 37167, 117035, 118663, 95799, 20423, 98894, 111789, 50095, 27174, 43650, 16241, 119702, 65591, 110830, 14002, 26139, 12874, 111579, 4792, 120797, 112299, 56250, 108646, 129384, 116252, 80406, 134654, 45115, 80353, 4540, 96014, 122913, 20509, 13499, 111812, 79770, 93595, 75321, 135086, 90670, 12960, 388, 98613, 64389, 120094, 38988]
[2024-12-02 18:31:13.812349] user = 16092 Cloud 97/568
[2024-12-02 18:31:13.847214] user = 16092 Local 97/568
[2024-12-02 18:31:13.937288] user = 16092 Local+ 97/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:16.133031] user = 16092 MPDA- 97/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7454360539028733
Training on augumented user 105502 0/50 current_auc = 0.7454360539028733
User 105502 AUC after training: 0.7454360539028733
User 105502 does not improve AUC. Reverting changes.
Training on augumented user 129928 1/50 current_auc = 0.7454360539028733
User 129928 AUC after training: 0.7458428680396644
User 129928 improves AUC. Keeping the model.
Training on augumented user 13512 2/50 current_auc = 0.7458428680396644
User 13512 AUC after training: 0.7464530892448513
User 13512 improves AUC. Keeping the model.
Training on augumented user 22671 3/50 current_auc = 0.7464530892448513
User 22671 AUC after training: 0.7462751080600051
User 22671 does not improve AUC. Reverting changes.
Training on augumented user 37167 4/50 current_auc = 0.7464530892448513
User 37167 AUC after training: 0.7461988304093568
User 37167 does not improve AUC. Reverting changes.
Training on augumented user 117035 5/50 current_auc = 0.7464530892448513
User 117035 AUC after training: 0.7463005339435546
User 117035 does not improve AUC. Reverting changes.
Training on augumented user 118663 6/50 current_auc = 0.7464530892448513
User 118663 AUC after training: 0.7461225527587083
User 118663 does not improve AUC. Reverting changes.
Training on augumented user 95799 7/50 current_auc = 0.7464530892448513
User 95799 AUC after training: 0.7463513857106534
User 95799 does not improve AUC. Reverting changes.
Training on augumented user 20423 8/50 current_auc = 0.7464530892448513
User 20423 AUC after training: 0.7462751080600051
User 20423 does not improve AUC. Reverting changes.
Training on augumented user 98894 9/50 current_auc = 0.7464530892448513
User 98894 AUC after training: 0.7445969997457411
User 98894 does not improve AUC. Reverting changes.
Training on augumented user 111789 10/50 current_auc = 0.7464530892448513
User 111789 AUC after training: 0.7465293668954996
User 111789 improves AUC. Keeping the model.
Training on augumented user 50095 11/50 current_auc = 0.7465293668954996
User 50095 AUC after training: 0.7469361810322909
User 50095 improves AUC. Keeping the model.
Training on augumented user 27174 12/50 current_auc = 0.7469361810322909
User 27174 AUC after training: 0.7462751080600051
User 27174 does not improve AUC. Reverting changes.
Training on augumented user 43650 13/50 current_auc = 0.7469361810322909
User 43650 AUC after training: 0.7467327739638951
User 43650 does not improve AUC. Reverting changes.
Training on augumented user 16241 14/50 current_auc = 0.7469361810322909
User 16241 AUC after training: 0.7467836257309942
User 16241 does not improve AUC. Reverting changes.
Training on augumented user 119702 15/50 current_auc = 0.7469361810322909
User 119702 AUC after training: 0.7461734045258073
User 119702 does not improve AUC. Reverting changes.
Training on augumented user 65591 16/50 current_auc = 0.7469361810322909
User 65591 AUC after training: 0.7465547927790491
User 65591 does not improve AUC. Reverting changes.
Training on augumented user 110830 17/50 current_auc = 0.7469361810322909
User 110830 AUC after training: 0.7467581998474447
User 110830 does not improve AUC. Reverting changes.
Training on augumented user 14002 18/50 current_auc = 0.7469361810322909
User 14002 AUC after training: 0.7467581998474447
User 14002 does not improve AUC. Reverting changes.
Training on augumented user 26139 19/50 current_auc = 0.7469361810322909
User 26139 AUC after training: 0.7473175692855327
User 26139 improves AUC. Keeping the model.
Training on augumented user 12874 20/50 current_auc = 0.7473175692855327
User 12874 AUC after training: 0.7475209763539283
User 12874 improves AUC. Keeping the model.
Training on augumented user 111579 21/50 current_auc = 0.7475209763539283
User 111579 AUC after training: 0.7477498093058733
User 111579 improves AUC. Keeping the model.
Training on augumented user 4792 22/50 current_auc = 0.7477498093058733
User 4792 AUC after training: 0.7475718281210273
User 4792 does not improve AUC. Reverting changes.
Training on augumented user 120797 23/50 current_auc = 0.7477498093058733
User 120797 AUC after training: 0.7478769387236207
User 120797 improves AUC. Keeping the model.
Training on augumented user 112299 24/50 current_auc = 0.7478769387236207
User 112299 AUC after training: 0.747724383422324
User 112299 does not improve AUC. Reverting changes.
Training on augumented user 56250 25/50 current_auc = 0.7478769387236207
User 56250 AUC after training: 0.7470124586829392
User 56250 does not improve AUC. Reverting changes.
Training on augumented user 108646 26/50 current_auc = 0.7478769387236207
User 108646 AUC after training: 0.7478515128400711
User 108646 does not improve AUC. Reverting changes.
Training on augumented user 129384 27/50 current_auc = 0.7478769387236207
User 129384 AUC after training: 0.747673531655225
User 129384 does not improve AUC. Reverting changes.
Training on augumented user 116252 28/50 current_auc = 0.7478769387236207
User 116252 AUC after training: 0.7477498093058733
User 116252 does not improve AUC. Reverting changes.
Training on augumented user 80406 29/50 current_auc = 0.7478769387236207
User 80406 AUC after training: 0.7475718281210272
User 80406 does not improve AUC. Reverting changes.
Training on augumented user 134654 30/50 current_auc = 0.7478769387236207
User 134654 AUC after training: 0.7477752351894229
User 134654 does not improve AUC. Reverting changes.
Training on augumented user 45115 31/50 current_auc = 0.7478769387236207
User 45115 AUC after training: 0.7475209763539283
User 45115 does not improve AUC. Reverting changes.
Training on augumented user 80353 32/50 current_auc = 0.7478769387236207
User 80353 AUC after training: 0.7478769387236206
User 80353 does not improve AUC. Reverting changes.
Training on augumented user 4540 33/50 current_auc = 0.7478769387236207
User 4540 AUC after training: 0.7465802186625986
User 4540 does not improve AUC. Reverting changes.
Training on augumented user 96014 34/50 current_auc = 0.7478769387236207
User 96014 AUC after training: 0.7476226798881263
User 96014 does not improve AUC. Reverting changes.
Training on augumented user 122913 35/50 current_auc = 0.7478769387236207
User 122913 AUC after training: 0.747673531655225
User 122913 does not improve AUC. Reverting changes.
Training on augumented user 20509 36/50 current_auc = 0.7478769387236207
User 20509 AUC after training: 0.7481566234426646
User 20509 improves AUC. Keeping the model.
Training on augumented user 13499 37/50 current_auc = 0.7481566234426646
User 13499 AUC after training: 0.7484108822781591
User 13499 improves AUC. Keeping the model.
Training on augumented user 111812 38/50 current_auc = 0.7484108822781591
User 111812 AUC after training: 0.7483346046275108
User 111812 does not improve AUC. Reverting changes.
Training on augumented user 79770 39/50 current_auc = 0.7484108822781591
User 79770 AUC after training: 0.7485380116959064
User 79770 improves AUC. Keeping the model.
Training on augumented user 93595 40/50 current_auc = 0.7485380116959064
User 93595 AUC after training: 0.7476989575387745
User 93595 does not improve AUC. Reverting changes.
Training on augumented user 75321 41/50 current_auc = 0.7485380116959064
User 75321 AUC after training: 0.7482329010933131
User 75321 does not improve AUC. Reverting changes.
Training on augumented user 135086 42/50 current_auc = 0.7485380116959064
User 135086 AUC after training: 0.7481820493262141
User 135086 does not improve AUC. Reverting changes.
Training on augumented user 90670 43/50 current_auc = 0.7485380116959064
User 90670 AUC after training: 0.7487668446478515
User 90670 improves AUC. Keeping the model.
Training on augumented user 12960 44/50 current_auc = 0.7487668446478515
User 12960 AUC after training: 0.7488685481820493
User 12960 improves AUC. Keeping the model.
Training on augumented user 388 45/50 current_auc = 0.7488685481820493
User 388 AUC after training: 0.7481820493262141
User 388 does not improve AUC. Reverting changes.
Training on augumented user 98613 46/50 current_auc = 0.7488685481820493
User 98613 AUC after training: 0.749021103483346
User 98613 improves AUC. Keeping the model.
Training on augumented user 64389 47/50 current_auc = 0.749021103483346
User 64389 AUC after training: 0.7488431222984999
User 64389 does not improve AUC. Reverting changes.
Training on augumented user 120094 48/50 current_auc = 0.749021103483346
User 120094 AUC after training: 0.749122807017544
User 120094 improves AUC. Keeping the model.
Training on augumented user 38988 49/50 current_auc = 0.749122807017544
User 38988 AUC after training: 0.7500889905924231
User 38988 improves AUC. Keeping the model.
[2024-12-02 18:31:45.214760] start test user 16117 98/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:46.029592] start test user 16117 98/568 recall augumented users by random, augumented_users = [93925, 81319, 9762, 52044, 90828, 60462, 37780, 6844, 89833, 85689, 50426, 37856, 63647, 109983, 106062, 108864, 107660, 82183, 14596, 61428, 4556, 10404, 97810, 109217, 136711, 73984, 84739, 5409, 129339, 2699, 30249, 22055, 37085, 14373, 25229, 69243, 68814, 60181, 42181, 73343, 117586, 59329, 76788, 29326, 81768, 36513, 116113, 126238, 103706, 112057]
[2024-12-02 18:31:46.060895] user = 16117 Cloud 98/568
[2024-12-02 18:31:46.075827] user = 16117 Local 98/568
[2024-12-02 18:31:46.232406] user = 16117 Local+ 98/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:49.505427] user = 16117 MPDA- 98/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6318681318681318
Training on augumented user 93925 0/50 current_auc = 0.6318681318681318
User 93925 AUC after training: 0.6263736263736264
User 93925 does not improve AUC. Reverting changes.
Training on augumented user 81319 1/50 current_auc = 0.6318681318681318
User 81319 AUC after training: 0.6263736263736264
User 81319 does not improve AUC. Reverting changes.
Training on augumented user 9762 2/50 current_auc = 0.6318681318681318
User 9762 AUC after training: 0.631868131868132
User 9762 improves AUC. Keeping the model.
Training on augumented user 52044 3/50 current_auc = 0.631868131868132
User 52044 AUC after training: 0.6373626373626374
User 52044 improves AUC. Keeping the model.
Training on augumented user 90828 4/50 current_auc = 0.6373626373626374
User 90828 AUC after training: 0.6318681318681318
User 90828 does not improve AUC. Reverting changes.
Training on augumented user 60462 5/50 current_auc = 0.6373626373626374
User 60462 AUC after training: 0.6318681318681318
User 60462 does not improve AUC. Reverting changes.
Training on augumented user 37780 6/50 current_auc = 0.6373626373626374
User 37780 AUC after training: 0.6263736263736264
User 37780 does not improve AUC. Reverting changes.
Training on augumented user 6844 7/50 current_auc = 0.6373626373626374
User 6844 AUC after training: 0.6318681318681318
User 6844 does not improve AUC. Reverting changes.
Training on augumented user 89833 8/50 current_auc = 0.6373626373626374
User 89833 AUC after training: 0.631868131868132
User 89833 does not improve AUC. Reverting changes.
Training on augumented user 85689 9/50 current_auc = 0.6373626373626374
User 85689 AUC after training: 0.6318681318681318
User 85689 does not improve AUC. Reverting changes.
Training on augumented user 50426 10/50 current_auc = 0.6373626373626374
User 50426 AUC after training: 0.6373626373626374
User 50426 does not improve AUC. Reverting changes.
Training on augumented user 37856 11/50 current_auc = 0.6373626373626374
User 37856 AUC after training: 0.6263736263736264
User 37856 does not improve AUC. Reverting changes.
Training on augumented user 63647 12/50 current_auc = 0.6373626373626374
User 63647 AUC after training: 0.6373626373626374
User 63647 does not improve AUC. Reverting changes.
Training on augumented user 109983 13/50 current_auc = 0.6373626373626374
User 109983 AUC after training: 0.6263736263736264
User 109983 does not improve AUC. Reverting changes.
Training on augumented user 106062 14/50 current_auc = 0.6373626373626374
User 106062 AUC after training: 0.631868131868132
User 106062 does not improve AUC. Reverting changes.
Training on augumented user 108864 15/50 current_auc = 0.6373626373626374
User 108864 AUC after training: 0.6263736263736264
User 108864 does not improve AUC. Reverting changes.
Training on augumented user 107660 16/50 current_auc = 0.6373626373626374
User 107660 AUC after training: 0.631868131868132
User 107660 does not improve AUC. Reverting changes.
Training on augumented user 82183 17/50 current_auc = 0.6373626373626374
User 82183 AUC after training: 0.6373626373626374
User 82183 does not improve AUC. Reverting changes.
Training on augumented user 14596 18/50 current_auc = 0.6373626373626374
User 14596 AUC after training: 0.6373626373626374
User 14596 does not improve AUC. Reverting changes.
Training on augumented user 61428 19/50 current_auc = 0.6373626373626374
User 61428 AUC after training: 0.6263736263736264
User 61428 does not improve AUC. Reverting changes.
Training on augumented user 4556 20/50 current_auc = 0.6373626373626374
User 4556 AUC after training: 0.6263736263736264
User 4556 does not improve AUC. Reverting changes.
Training on augumented user 10404 21/50 current_auc = 0.6373626373626374
User 10404 AUC after training: 0.6373626373626374
User 10404 does not improve AUC. Reverting changes.
Training on augumented user 97810 22/50 current_auc = 0.6373626373626374
User 97810 AUC after training: 0.6263736263736264
User 97810 does not improve AUC. Reverting changes.
Training on augumented user 109217 23/50 current_auc = 0.6373626373626374
User 109217 AUC after training: 0.6373626373626374
User 109217 does not improve AUC. Reverting changes.
Training on augumented user 136711 24/50 current_auc = 0.6373626373626374
User 136711 AUC after training: 0.6373626373626374
User 136711 does not improve AUC. Reverting changes.
Training on augumented user 73984 25/50 current_auc = 0.6373626373626374
User 73984 AUC after training: 0.631868131868132
User 73984 does not improve AUC. Reverting changes.
Training on augumented user 84739 26/50 current_auc = 0.6373626373626374
User 84739 AUC after training: 0.6263736263736265
User 84739 does not improve AUC. Reverting changes.
Training on augumented user 5409 27/50 current_auc = 0.6373626373626374
User 5409 AUC after training: 0.631868131868132
User 5409 does not improve AUC. Reverting changes.
Training on augumented user 129339 28/50 current_auc = 0.6373626373626374
User 129339 AUC after training: 0.6263736263736264
User 129339 does not improve AUC. Reverting changes.
Training on augumented user 2699 29/50 current_auc = 0.6373626373626374
User 2699 AUC after training: 0.6263736263736265
User 2699 does not improve AUC. Reverting changes.
Training on augumented user 30249 30/50 current_auc = 0.6373626373626374
User 30249 AUC after training: 0.6373626373626374
User 30249 does not improve AUC. Reverting changes.
Training on augumented user 22055 31/50 current_auc = 0.6373626373626374
User 22055 AUC after training: 0.6373626373626374
User 22055 does not improve AUC. Reverting changes.
Training on augumented user 37085 32/50 current_auc = 0.6373626373626374
User 37085 AUC after training: 0.6373626373626374
User 37085 does not improve AUC. Reverting changes.
Training on augumented user 14373 33/50 current_auc = 0.6373626373626374
User 14373 AUC after training: 0.631868131868132
User 14373 does not improve AUC. Reverting changes.
Training on augumented user 25229 34/50 current_auc = 0.6373626373626374
User 25229 AUC after training: 0.6318681318681318
User 25229 does not improve AUC. Reverting changes.
Training on augumented user 69243 35/50 current_auc = 0.6373626373626374
User 69243 AUC after training: 0.6263736263736264
User 69243 does not improve AUC. Reverting changes.
Training on augumented user 68814 36/50 current_auc = 0.6373626373626374
User 68814 AUC after training: 0.6263736263736264
User 68814 does not improve AUC. Reverting changes.
Training on augumented user 60181 37/50 current_auc = 0.6373626373626374
User 60181 AUC after training: 0.6318681318681318
User 60181 does not improve AUC. Reverting changes.
Training on augumented user 42181 38/50 current_auc = 0.6373626373626374
User 42181 AUC after training: 0.6263736263736264
User 42181 does not improve AUC. Reverting changes.
Training on augumented user 73343 39/50 current_auc = 0.6373626373626374
User 73343 AUC after training: 0.631868131868132
User 73343 does not improve AUC. Reverting changes.
Training on augumented user 117586 40/50 current_auc = 0.6373626373626374
User 117586 AUC after training: 0.6263736263736264
User 117586 does not improve AUC. Reverting changes.
Training on augumented user 59329 41/50 current_auc = 0.6373626373626374
User 59329 AUC after training: 0.631868131868132
User 59329 does not improve AUC. Reverting changes.
Training on augumented user 76788 42/50 current_auc = 0.6373626373626374
User 76788 AUC after training: 0.6263736263736264
User 76788 does not improve AUC. Reverting changes.
Training on augumented user 29326 43/50 current_auc = 0.6373626373626374
User 29326 AUC after training: 0.6263736263736265
User 29326 does not improve AUC. Reverting changes.
Training on augumented user 81768 44/50 current_auc = 0.6373626373626374
User 81768 AUC after training: 0.6318681318681318
User 81768 does not improve AUC. Reverting changes.
Training on augumented user 36513 45/50 current_auc = 0.6373626373626374
User 36513 AUC after training: 0.6318681318681318
User 36513 does not improve AUC. Reverting changes.
Training on augumented user 116113 46/50 current_auc = 0.6373626373626374
User 116113 AUC after training: 0.6263736263736264
User 116113 does not improve AUC. Reverting changes.
Training on augumented user 126238 47/50 current_auc = 0.6373626373626374
User 126238 AUC after training: 0.6263736263736264
User 126238 does not improve AUC. Reverting changes.
Training on augumented user 103706 48/50 current_auc = 0.6373626373626374
User 103706 AUC after training: 0.631868131868132
User 103706 does not improve AUC. Reverting changes.
Training on augumented user 112057 49/50 current_auc = 0.6373626373626374
User 112057 AUC after training: 0.6373626373626374
User 112057 does not improve AUC. Reverting changes.
[2024-12-02 18:32:19.487396] start test user 16128 99/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:20.028599] start test user 16128 99/568 recall augumented users by random, augumented_users = [100313, 24620, 100147, 105480, 43365, 48799, 95669, 34885, 107104, 67026, 9464, 18134, 105644, 26956, 81270, 76582, 95400, 36809, 120032, 54778, 105303, 116321, 54545, 62543, 3698, 111995, 59808, 21334, 27243, 3716, 69837, 58704, 36861, 30246, 73462, 126884, 83303, 88139, 6183, 70227, 43594, 69867, 17131, 96928, 36507, 44974, 114928, 72092, 97903, 97261]
[2024-12-02 18:32:20.050691] user = 16128 Cloud 99/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:32:20.056957] user = 16128 Local 99/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:32:20.200457] user = 16128 Local+ 99/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:32:22.781117] user = 16128 MPDA- 99/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 100313 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100313 AUC after training: 0.5
User 100313 does not improve AUC. Reverting changes.
Training on augumented user 24620 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24620 AUC after training: 0.5
User 24620 does not improve AUC. Reverting changes.
Training on augumented user 100147 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100147 AUC after training: 0.5
User 100147 does not improve AUC. Reverting changes.
Training on augumented user 105480 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105480 AUC after training: 0.5
User 105480 does not improve AUC. Reverting changes.
Training on augumented user 43365 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43365 AUC after training: 0.5
User 43365 does not improve AUC. Reverting changes.
Training on augumented user 48799 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48799 AUC after training: 0.5
User 48799 does not improve AUC. Reverting changes.
Training on augumented user 95669 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95669 AUC after training: 0.5
User 95669 does not improve AUC. Reverting changes.
Training on augumented user 34885 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34885 AUC after training: 0.5
User 34885 does not improve AUC. Reverting changes.
Training on augumented user 107104 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107104 AUC after training: 0.5
User 107104 does not improve AUC. Reverting changes.
Training on augumented user 67026 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67026 AUC after training: 0.5
User 67026 does not improve AUC. Reverting changes.
Training on augumented user 9464 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9464 AUC after training: 0.5
User 9464 does not improve AUC. Reverting changes.
Training on augumented user 18134 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18134 AUC after training: 0.5
User 18134 does not improve AUC. Reverting changes.
Training on augumented user 105644 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105644 AUC after training: 0.5
User 105644 does not improve AUC. Reverting changes.
Training on augumented user 26956 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26956 AUC after training: 0.5
User 26956 does not improve AUC. Reverting changes.
Training on augumented user 81270 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81270 AUC after training: 0.5
User 81270 does not improve AUC. Reverting changes.
Training on augumented user 76582 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76582 AUC after training: 0.5
User 76582 does not improve AUC. Reverting changes.
Training on augumented user 95400 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95400 AUC after training: 0.5
User 95400 does not improve AUC. Reverting changes.
Training on augumented user 36809 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36809 AUC after training: 0.5
User 36809 does not improve AUC. Reverting changes.
Training on augumented user 120032 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120032 AUC after training: 0.5
User 120032 does not improve AUC. Reverting changes.
Training on augumented user 54778 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54778 AUC after training: 0.5
User 54778 does not improve AUC. Reverting changes.
Training on augumented user 105303 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105303 AUC after training: 0.5
User 105303 does not improve AUC. Reverting changes.
Training on augumented user 116321 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116321 AUC after training: 0.5
User 116321 does not improve AUC. Reverting changes.
Training on augumented user 54545 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54545 AUC after training: 0.5
User 54545 does not improve AUC. Reverting changes.
Training on augumented user 62543 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62543 AUC after training: 0.5
User 62543 does not improve AUC. Reverting changes.
Training on augumented user 3698 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3698 AUC after training: 0.5
User 3698 does not improve AUC. Reverting changes.
Training on augumented user 111995 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111995 AUC after training: 0.5
User 111995 does not improve AUC. Reverting changes.
Training on augumented user 59808 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59808 AUC after training: 0.5
User 59808 does not improve AUC. Reverting changes.
Training on augumented user 21334 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21334 AUC after training: 0.5
User 21334 does not improve AUC. Reverting changes.
Training on augumented user 27243 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27243 AUC after training: 0.5
User 27243 does not improve AUC. Reverting changes.
Training on augumented user 3716 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3716 AUC after training: 0.5
User 3716 does not improve AUC. Reverting changes.
Training on augumented user 69837 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69837 AUC after training: 0.5
User 69837 does not improve AUC. Reverting changes.
Training on augumented user 58704 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58704 AUC after training: 0.5
User 58704 does not improve AUC. Reverting changes.
Training on augumented user 36861 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36861 AUC after training: 0.5
User 36861 does not improve AUC. Reverting changes.
Training on augumented user 30246 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30246 AUC after training: 0.5
User 30246 does not improve AUC. Reverting changes.
Training on augumented user 73462 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73462 AUC after training: 0.5
User 73462 does not improve AUC. Reverting changes.
Training on augumented user 126884 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126884 AUC after training: 0.5
User 126884 does not improve AUC. Reverting changes.
Training on augumented user 83303 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83303 AUC after training: 0.5
User 83303 does not improve AUC. Reverting changes.
Training on augumented user 88139 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88139 AUC after training: 0.5
User 88139 does not improve AUC. Reverting changes.
Training on augumented user 6183 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6183 AUC after training: 0.5
User 6183 does not improve AUC. Reverting changes.
Training on augumented user 70227 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70227 AUC after training: 0.5
User 70227 does not improve AUC. Reverting changes.
Training on augumented user 43594 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43594 AUC after training: 0.5
User 43594 does not improve AUC. Reverting changes.
Training on augumented user 69867 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69867 AUC after training: 0.5
User 69867 does not improve AUC. Reverting changes.
Training on augumented user 17131 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17131 AUC after training: 0.5
User 17131 does not improve AUC. Reverting changes.
Training on augumented user 96928 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96928 AUC after training: 0.5
User 96928 does not improve AUC. Reverting changes.
Training on augumented user 36507 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36507 AUC after training: 0.5
User 36507 does not improve AUC. Reverting changes.
Training on augumented user 44974 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44974 AUC after training: 0.5
User 44974 does not improve AUC. Reverting changes.
Training on augumented user 114928 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114928 AUC after training: 0.5
User 114928 does not improve AUC. Reverting changes.
Training on augumented user 72092 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72092 AUC after training: 0.5
User 72092 does not improve AUC. Reverting changes.
Training on augumented user 97903 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97903 AUC after training: 0.5
User 97903 does not improve AUC. Reverting changes.
Training on augumented user 97261 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97261 AUC after training: 0.5
User 97261 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:32:51.664748] start test user 16132 100/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:52.271916] start test user 16132 100/568 recall augumented users by random, augumented_users = [4194, 64377, 117448, 49137, 107742, 129883, 58751, 62594, 13470, 38114, 61606, 35128, 8092, 137580, 28941, 60162, 55207, 3361, 56203, 90791, 39020, 98422, 119330, 130808, 92485, 13891, 16733, 64810, 44920, 111615, 60474, 110584, 112831, 22567, 21370, 100067, 102144, 29036, 110126, 82165, 133705, 86031, 22456, 127836, 28551, 100883, 55186, 93384, 52544, 38294]
[2024-12-02 18:32:52.288212] user = 16132 Cloud 100/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:32:52.295104] user = 16132 Local 100/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:32:52.422158] user = 16132 Local+ 100/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:32:55.028044] user = 16132 MPDA- 100/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 4194 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4194 AUC after training: 0.5
User 4194 does not improve AUC. Reverting changes.
Training on augumented user 64377 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64377 AUC after training: 0.5
User 64377 does not improve AUC. Reverting changes.
Training on augumented user 117448 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117448 AUC after training: 0.5
User 117448 does not improve AUC. Reverting changes.
Training on augumented user 49137 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49137 AUC after training: 0.5
User 49137 does not improve AUC. Reverting changes.
Training on augumented user 107742 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107742 AUC after training: 0.5
User 107742 does not improve AUC. Reverting changes.
Training on augumented user 129883 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129883 AUC after training: 0.5
User 129883 does not improve AUC. Reverting changes.
Training on augumented user 58751 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58751 AUC after training: 0.5
User 58751 does not improve AUC. Reverting changes.
Training on augumented user 62594 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62594 AUC after training: 0.5
User 62594 does not improve AUC. Reverting changes.
Training on augumented user 13470 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13470 AUC after training: 0.5
User 13470 does not improve AUC. Reverting changes.
Training on augumented user 38114 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38114 AUC after training: 0.5
User 38114 does not improve AUC. Reverting changes.
Training on augumented user 61606 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61606 AUC after training: 0.5
User 61606 does not improve AUC. Reverting changes.
Training on augumented user 35128 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35128 AUC after training: 0.5
User 35128 does not improve AUC. Reverting changes.
Training on augumented user 8092 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8092 AUC after training: 0.5
User 8092 does not improve AUC. Reverting changes.
Training on augumented user 137580 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137580 AUC after training: 0.5
User 137580 does not improve AUC. Reverting changes.
Training on augumented user 28941 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28941 AUC after training: 0.5
User 28941 does not improve AUC. Reverting changes.
Training on augumented user 60162 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60162 AUC after training: 0.5
User 60162 does not improve AUC. Reverting changes.
Training on augumented user 55207 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55207 AUC after training: 0.5
User 55207 does not improve AUC. Reverting changes.
Training on augumented user 3361 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3361 AUC after training: 0.5
User 3361 does not improve AUC. Reverting changes.
Training on augumented user 56203 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56203 AUC after training: 0.5
User 56203 does not improve AUC. Reverting changes.
Training on augumented user 90791 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90791 AUC after training: 0.5
User 90791 does not improve AUC. Reverting changes.
Training on augumented user 39020 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39020 AUC after training: 0.5
User 39020 does not improve AUC. Reverting changes.
Training on augumented user 98422 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98422 AUC after training: 0.5
User 98422 does not improve AUC. Reverting changes.
Training on augumented user 119330 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119330 AUC after training: 0.5
User 119330 does not improve AUC. Reverting changes.
Training on augumented user 130808 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130808 AUC after training: 0.5
User 130808 does not improve AUC. Reverting changes.
Training on augumented user 92485 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92485 AUC after training: 0.5
User 92485 does not improve AUC. Reverting changes.
Training on augumented user 13891 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13891 AUC after training: 0.5
User 13891 does not improve AUC. Reverting changes.
Training on augumented user 16733 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16733 AUC after training: 0.5
User 16733 does not improve AUC. Reverting changes.
Training on augumented user 64810 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64810 AUC after training: 0.5
User 64810 does not improve AUC. Reverting changes.
Training on augumented user 44920 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44920 AUC after training: 0.5
User 44920 does not improve AUC. Reverting changes.
Training on augumented user 111615 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111615 AUC after training: 0.5
User 111615 does not improve AUC. Reverting changes.
Training on augumented user 60474 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60474 AUC after training: 0.5
User 60474 does not improve AUC. Reverting changes.
Training on augumented user 110584 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110584 AUC after training: 0.5
User 110584 does not improve AUC. Reverting changes.
Training on augumented user 112831 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112831 AUC after training: 0.5
User 112831 does not improve AUC. Reverting changes.
Training on augumented user 22567 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22567 AUC after training: 0.5
User 22567 does not improve AUC. Reverting changes.
Training on augumented user 21370 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21370 AUC after training: 0.5
User 21370 does not improve AUC. Reverting changes.
Training on augumented user 100067 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100067 AUC after training: 0.5
User 100067 does not improve AUC. Reverting changes.
Training on augumented user 102144 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102144 AUC after training: 0.5
User 102144 does not improve AUC. Reverting changes.
Training on augumented user 29036 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29036 AUC after training: 0.5
User 29036 does not improve AUC. Reverting changes.
Training on augumented user 110126 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110126 AUC after training: 0.5
User 110126 does not improve AUC. Reverting changes.
Training on augumented user 82165 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82165 AUC after training: 0.5
User 82165 does not improve AUC. Reverting changes.
Training on augumented user 133705 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133705 AUC after training: 0.5
User 133705 does not improve AUC. Reverting changes.
Training on augumented user 86031 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86031 AUC after training: 0.5
User 86031 does not improve AUC. Reverting changes.
Training on augumented user 22456 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22456 AUC after training: 0.5
User 22456 does not improve AUC. Reverting changes.
Training on augumented user 127836 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127836 AUC after training: 0.5
User 127836 does not improve AUC. Reverting changes.
Training on augumented user 28551 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28551 AUC after training: 0.5
User 28551 does not improve AUC. Reverting changes.
Training on augumented user 100883 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100883 AUC after training: 0.5
User 100883 does not improve AUC. Reverting changes.
Training on augumented user 55186 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55186 AUC after training: 0.5
User 55186 does not improve AUC. Reverting changes.
Training on augumented user 93384 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93384 AUC after training: 0.5
User 93384 does not improve AUC. Reverting changes.
Training on augumented user 52544 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52544 AUC after training: 0.5
User 52544 does not improve AUC. Reverting changes.
Training on augumented user 38294 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38294 AUC after training: 0.5
User 38294 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:33:25.620860] start test user 16158 101/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:26.044085] start test user 16158 101/568 recall augumented users by random, augumented_users = [137794, 29765, 58458, 90033, 117366, 117874, 89166, 108637, 95502, 108463, 28775, 61305, 102270, 28709, 119836, 97711, 122482, 25058, 128286, 46173, 130029, 8435, 10573, 88081, 19133, 6683, 128951, 134201, 85926, 113484, 111698, 121797, 20840, 54205, 124376, 12170, 99452, 135137, 63221, 24394, 129158, 7919, 86128, 102317, 88141, 2621, 1504, 122528, 117204, 3165]
[2024-12-02 18:33:26.059387] user = 16158 Cloud 101/568
[2024-12-02 18:33:26.070765] user = 16158 Local 101/568
[2024-12-02 18:33:26.139939] user = 16158 Local+ 101/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:29.097561] user = 16158 MPDA- 101/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.646098003629764
Training on augumented user 137794 0/50 current_auc = 0.646098003629764
User 137794 AUC after training: 0.646098003629764
User 137794 does not improve AUC. Reverting changes.
Training on augumented user 29765 1/50 current_auc = 0.646098003629764
User 29765 AUC after training: 0.646098003629764
User 29765 does not improve AUC. Reverting changes.
Training on augumented user 58458 2/50 current_auc = 0.646098003629764
User 58458 AUC after training: 0.646098003629764
User 58458 does not improve AUC. Reverting changes.
Training on augumented user 90033 3/50 current_auc = 0.646098003629764
User 90033 AUC after training: 0.6297640653357531
User 90033 does not improve AUC. Reverting changes.
Training on augumented user 117366 4/50 current_auc = 0.646098003629764
User 117366 AUC after training: 0.646098003629764
User 117366 does not improve AUC. Reverting changes.
Training on augumented user 117874 5/50 current_auc = 0.646098003629764
User 117874 AUC after training: 0.6442831215970962
User 117874 does not improve AUC. Reverting changes.
Training on augumented user 89166 6/50 current_auc = 0.646098003629764
User 89166 AUC after training: 0.6442831215970962
User 89166 does not improve AUC. Reverting changes.
Training on augumented user 108637 7/50 current_auc = 0.646098003629764
User 108637 AUC after training: 0.6406533575317604
User 108637 does not improve AUC. Reverting changes.
Training on augumented user 95502 8/50 current_auc = 0.646098003629764
User 95502 AUC after training: 0.646098003629764
User 95502 does not improve AUC. Reverting changes.
Training on augumented user 108463 9/50 current_auc = 0.646098003629764
User 108463 AUC after training: 0.646098003629764
User 108463 does not improve AUC. Reverting changes.
Training on augumented user 28775 10/50 current_auc = 0.646098003629764
User 28775 AUC after training: 0.6424682395644282
User 28775 does not improve AUC. Reverting changes.
Training on augumented user 61305 11/50 current_auc = 0.646098003629764
User 61305 AUC after training: 0.6406533575317604
User 61305 does not improve AUC. Reverting changes.
Training on augumented user 102270 12/50 current_auc = 0.646098003629764
User 102270 AUC after training: 0.6497277676950998
User 102270 improves AUC. Keeping the model.
Training on augumented user 28709 13/50 current_auc = 0.6497277676950998
User 28709 AUC after training: 0.6479128856624319
User 28709 does not improve AUC. Reverting changes.
Training on augumented user 119836 14/50 current_auc = 0.6497277676950998
User 119836 AUC after training: 0.647912885662432
User 119836 does not improve AUC. Reverting changes.
Training on augumented user 97711 15/50 current_auc = 0.6497277676950998
User 97711 AUC after training: 0.6424682395644283
User 97711 does not improve AUC. Reverting changes.
Training on augumented user 122482 16/50 current_auc = 0.6497277676950998
User 122482 AUC after training: 0.646098003629764
User 122482 does not improve AUC. Reverting changes.
Training on augumented user 25058 17/50 current_auc = 0.6497277676950998
User 25058 AUC after training: 0.6479128856624319
User 25058 does not improve AUC. Reverting changes.
Training on augumented user 128286 18/50 current_auc = 0.6497277676950998
User 128286 AUC after training: 0.6497277676950999
User 128286 improves AUC. Keeping the model.
Training on augumented user 46173 19/50 current_auc = 0.6497277676950999
User 46173 AUC after training: 0.647912885662432
User 46173 does not improve AUC. Reverting changes.
Training on augumented user 130029 20/50 current_auc = 0.6497277676950999
User 130029 AUC after training: 0.646098003629764
User 130029 does not improve AUC. Reverting changes.
Training on augumented user 8435 21/50 current_auc = 0.6497277676950999
User 8435 AUC after training: 0.6497277676950999
User 8435 does not improve AUC. Reverting changes.
Training on augumented user 10573 22/50 current_auc = 0.6497277676950999
User 10573 AUC after training: 0.6370235934664247
User 10573 does not improve AUC. Reverting changes.
Training on augumented user 88081 23/50 current_auc = 0.6497277676950999
User 88081 AUC after training: 0.6497277676950999
User 88081 does not improve AUC. Reverting changes.
Training on augumented user 19133 24/50 current_auc = 0.6497277676950999
User 19133 AUC after training: 0.646098003629764
User 19133 does not improve AUC. Reverting changes.
Training on augumented user 6683 25/50 current_auc = 0.6497277676950999
User 6683 AUC after training: 0.6515426497277677
User 6683 improves AUC. Keeping the model.
Training on augumented user 128951 26/50 current_auc = 0.6515426497277677
User 128951 AUC after training: 0.6442831215970962
User 128951 does not improve AUC. Reverting changes.
Training on augumented user 134201 27/50 current_auc = 0.6515426497277677
User 134201 AUC after training: 0.6479128856624319
User 134201 does not improve AUC. Reverting changes.
Training on augumented user 85926 28/50 current_auc = 0.6515426497277677
User 85926 AUC after training: 0.6497277676950997
User 85926 does not improve AUC. Reverting changes.
Training on augumented user 113484 29/50 current_auc = 0.6515426497277677
User 113484 AUC after training: 0.6406533575317604
User 113484 does not improve AUC. Reverting changes.
Training on augumented user 111698 30/50 current_auc = 0.6515426497277677
User 111698 AUC after training: 0.6497277676950999
User 111698 does not improve AUC. Reverting changes.
Training on augumented user 121797 31/50 current_auc = 0.6515426497277677
User 121797 AUC after training: 0.647912885662432
User 121797 does not improve AUC. Reverting changes.
Training on augumented user 20840 32/50 current_auc = 0.6515426497277677
User 20840 AUC after training: 0.6424682395644283
User 20840 does not improve AUC. Reverting changes.
Training on augumented user 54205 33/50 current_auc = 0.6515426497277677
User 54205 AUC after training: 0.6533575317604355
User 54205 improves AUC. Keeping the model.
Training on augumented user 124376 34/50 current_auc = 0.6533575317604355
User 124376 AUC after training: 0.6551724137931034
User 124376 improves AUC. Keeping the model.
Training on augumented user 12170 35/50 current_auc = 0.6551724137931034
User 12170 AUC after training: 0.6497277676950998
User 12170 does not improve AUC. Reverting changes.
Training on augumented user 99452 36/50 current_auc = 0.6551724137931034
User 99452 AUC after training: 0.6497277676950999
User 99452 does not improve AUC. Reverting changes.
Training on augumented user 135137 37/50 current_auc = 0.6551724137931034
User 135137 AUC after training: 0.6569872958257713
User 135137 improves AUC. Keeping the model.
Training on augumented user 63221 38/50 current_auc = 0.6569872958257713
User 63221 AUC after training: 0.6497277676950999
User 63221 does not improve AUC. Reverting changes.
Training on augumented user 24394 39/50 current_auc = 0.6569872958257713
User 24394 AUC after training: 0.6515426497277677
User 24394 does not improve AUC. Reverting changes.
Training on augumented user 129158 40/50 current_auc = 0.6569872958257713
User 129158 AUC after training: 0.6515426497277677
User 129158 does not improve AUC. Reverting changes.
Training on augumented user 7919 41/50 current_auc = 0.6569872958257713
User 7919 AUC after training: 0.6533575317604355
User 7919 does not improve AUC. Reverting changes.
Training on augumented user 86128 42/50 current_auc = 0.6569872958257713
User 86128 AUC after training: 0.6497277676950998
User 86128 does not improve AUC. Reverting changes.
Training on augumented user 102317 43/50 current_auc = 0.6569872958257713
User 102317 AUC after training: 0.6497277676950998
User 102317 does not improve AUC. Reverting changes.
Training on augumented user 88141 44/50 current_auc = 0.6569872958257713
User 88141 AUC after training: 0.6533575317604355
User 88141 does not improve AUC. Reverting changes.
Training on augumented user 2621 45/50 current_auc = 0.6569872958257713
User 2621 AUC after training: 0.6533575317604355
User 2621 does not improve AUC. Reverting changes.
Training on augumented user 1504 46/50 current_auc = 0.6569872958257713
User 1504 AUC after training: 0.6569872958257713
User 1504 does not improve AUC. Reverting changes.
Training on augumented user 122528 47/50 current_auc = 0.6569872958257713
User 122528 AUC after training: 0.6515426497277677
User 122528 does not improve AUC. Reverting changes.
Training on augumented user 117204 48/50 current_auc = 0.6569872958257713
User 117204 AUC after training: 0.646098003629764
User 117204 does not improve AUC. Reverting changes.
Training on augumented user 3165 49/50 current_auc = 0.6569872958257713
User 3165 AUC after training: 0.6515426497277677
User 3165 does not improve AUC. Reverting changes.
[2024-12-02 18:33:58.052100] start test user 16161 102/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:58.741353] start test user 16161 102/568 recall augumented users by random, augumented_users = [52911, 22623, 68261, 47211, 115736, 4424, 130531, 97840, 6499, 81991, 93936, 133582, 104004, 32546, 21989, 92597, 116931, 39812, 6618, 9050, 39940, 45924, 107732, 76253, 131916, 69835, 90168, 20657, 68677, 127870, 3777, 48049, 130927, 1122, 129150, 34073, 116610, 132803, 35387, 84934, 85664, 4683, 123790, 90019, 73736, 66215, 120592, 68485, 16985, 76639]
[2024-12-02 18:33:58.757454] user = 16161 Cloud 102/568
[2024-12-02 18:33:58.776415] user = 16161 Local 102/568
[2024-12-02 18:33:58.839290] user = 16161 Local+ 102/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:01.547005] user = 16161 MPDA- 102/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7083333333333334
Training on augumented user 52911 0/50 current_auc = 0.7083333333333334
User 52911 AUC after training: 0.7106227106227107
User 52911 improves AUC. Keeping the model.
Training on augumented user 22623 1/50 current_auc = 0.7106227106227107
User 22623 AUC after training: 0.7087912087912088
User 22623 does not improve AUC. Reverting changes.
Training on augumented user 68261 2/50 current_auc = 0.7106227106227107
User 68261 AUC after training: 0.7087912087912087
User 68261 does not improve AUC. Reverting changes.
Training on augumented user 47211 3/50 current_auc = 0.7106227106227107
User 47211 AUC after training: 0.7101648351648351
User 47211 does not improve AUC. Reverting changes.
Training on augumented user 115736 4/50 current_auc = 0.7106227106227107
User 115736 AUC after training: 0.7119963369963371
User 115736 improves AUC. Keeping the model.
Training on augumented user 4424 5/50 current_auc = 0.7119963369963371
User 4424 AUC after training: 0.7147435897435898
User 4424 improves AUC. Keeping the model.
Training on augumented user 130531 6/50 current_auc = 0.7147435897435898
User 130531 AUC after training: 0.7124542124542125
User 130531 does not improve AUC. Reverting changes.
Training on augumented user 97840 7/50 current_auc = 0.7147435897435898
User 97840 AUC after training: 0.7138278388278388
User 97840 does not improve AUC. Reverting changes.
Training on augumented user 6499 8/50 current_auc = 0.7147435897435898
User 6499 AUC after training: 0.7156593406593407
User 6499 improves AUC. Keeping the model.
Training on augumented user 81991 9/50 current_auc = 0.7156593406593407
User 81991 AUC after training: 0.7161172161172161
User 81991 improves AUC. Keeping the model.
Training on augumented user 93936 10/50 current_auc = 0.7161172161172161
User 93936 AUC after training: 0.7156593406593407
User 93936 does not improve AUC. Reverting changes.
Training on augumented user 133582 11/50 current_auc = 0.7161172161172161
User 133582 AUC after training: 0.7161172161172161
User 133582 does not improve AUC. Reverting changes.
Training on augumented user 104004 12/50 current_auc = 0.7161172161172161
User 104004 AUC after training: 0.7174908424908425
User 104004 improves AUC. Keeping the model.
Training on augumented user 32546 13/50 current_auc = 0.7174908424908425
User 32546 AUC after training: 0.7179487179487178
User 32546 improves AUC. Keeping the model.
Training on augumented user 21989 14/50 current_auc = 0.7179487179487178
User 21989 AUC after training: 0.7193223443223443
User 21989 improves AUC. Keeping the model.
Training on augumented user 92597 15/50 current_auc = 0.7193223443223443
User 92597 AUC after training: 0.7193223443223443
User 92597 does not improve AUC. Reverting changes.
Training on augumented user 116931 16/50 current_auc = 0.7193223443223443
User 116931 AUC after training: 0.7188644688644689
User 116931 does not improve AUC. Reverting changes.
Training on augumented user 39812 17/50 current_auc = 0.7193223443223443
User 39812 AUC after training: 0.7174908424908425
User 39812 does not improve AUC. Reverting changes.
Training on augumented user 6618 18/50 current_auc = 0.7193223443223443
User 6618 AUC after training: 0.7193223443223443
User 6618 does not improve AUC. Reverting changes.
Training on augumented user 9050 19/50 current_auc = 0.7193223443223443
User 9050 AUC after training: 0.7152014652014652
User 9050 does not improve AUC. Reverting changes.
Training on augumented user 39940 20/50 current_auc = 0.7193223443223443
User 39940 AUC after training: 0.7193223443223443
User 39940 does not improve AUC. Reverting changes.
Training on augumented user 45924 21/50 current_auc = 0.7193223443223443
User 45924 AUC after training: 0.7184065934065935
User 45924 does not improve AUC. Reverting changes.
Training on augumented user 107732 22/50 current_auc = 0.7193223443223443
User 107732 AUC after training: 0.711996336996337
User 107732 does not improve AUC. Reverting changes.
Training on augumented user 76253 23/50 current_auc = 0.7193223443223443
User 76253 AUC after training: 0.7197802197802198
User 76253 improves AUC. Keeping the model.
Training on augumented user 131916 24/50 current_auc = 0.7197802197802198
User 131916 AUC after training: 0.7165750915750916
User 131916 does not improve AUC. Reverting changes.
Training on augumented user 69835 25/50 current_auc = 0.7197802197802198
User 69835 AUC after training: 0.7188644688644689
User 69835 does not improve AUC. Reverting changes.
Training on augumented user 90168 26/50 current_auc = 0.7197802197802198
User 90168 AUC after training: 0.7193223443223443
User 90168 does not improve AUC. Reverting changes.
Training on augumented user 20657 27/50 current_auc = 0.7197802197802198
User 20657 AUC after training: 0.7179487179487181
User 20657 does not improve AUC. Reverting changes.
Training on augumented user 68677 28/50 current_auc = 0.7197802197802198
User 68677 AUC after training: 0.7193223443223443
User 68677 does not improve AUC. Reverting changes.
Training on augumented user 127870 29/50 current_auc = 0.7197802197802198
User 127870 AUC after training: 0.718864468864469
User 127870 does not improve AUC. Reverting changes.
Training on augumented user 3777 30/50 current_auc = 0.7197802197802198
User 3777 AUC after training: 0.7184065934065934
User 3777 does not improve AUC. Reverting changes.
Training on augumented user 48049 31/50 current_auc = 0.7197802197802198
User 48049 AUC after training: 0.7197802197802198
User 48049 does not improve AUC. Reverting changes.
Training on augumented user 130927 32/50 current_auc = 0.7197802197802198
User 130927 AUC after training: 0.7184065934065934
User 130927 does not improve AUC. Reverting changes.
Training on augumented user 1122 33/50 current_auc = 0.7197802197802198
User 1122 AUC after training: 0.718864468864469
User 1122 does not improve AUC. Reverting changes.
Training on augumented user 129150 34/50 current_auc = 0.7197802197802198
User 129150 AUC after training: 0.7197802197802199
User 129150 improves AUC. Keeping the model.
Training on augumented user 34073 35/50 current_auc = 0.7197802197802199
User 34073 AUC after training: 0.7188644688644689
User 34073 does not improve AUC. Reverting changes.
Training on augumented user 116610 36/50 current_auc = 0.7197802197802199
User 116610 AUC after training: 0.7188644688644689
User 116610 does not improve AUC. Reverting changes.
Training on augumented user 132803 37/50 current_auc = 0.7197802197802199
User 132803 AUC after training: 0.7188644688644689
User 132803 does not improve AUC. Reverting changes.
Training on augumented user 35387 38/50 current_auc = 0.7197802197802199
User 35387 AUC after training: 0.7193223443223444
User 35387 does not improve AUC. Reverting changes.
Training on augumented user 84934 39/50 current_auc = 0.7197802197802199
User 84934 AUC after training: 0.7179487179487178
User 84934 does not improve AUC. Reverting changes.
Training on augumented user 85664 40/50 current_auc = 0.7197802197802199
User 85664 AUC after training: 0.7188644688644689
User 85664 does not improve AUC. Reverting changes.
Training on augumented user 4683 41/50 current_auc = 0.7197802197802199
User 4683 AUC after training: 0.7188644688644689
User 4683 does not improve AUC. Reverting changes.
Training on augumented user 123790 42/50 current_auc = 0.7197802197802199
User 123790 AUC after training: 0.7193223443223444
User 123790 does not improve AUC. Reverting changes.
Training on augumented user 90019 43/50 current_auc = 0.7197802197802199
User 90019 AUC after training: 0.7197802197802199
User 90019 does not improve AUC. Reverting changes.
Training on augumented user 73736 44/50 current_auc = 0.7197802197802199
User 73736 AUC after training: 0.7193223443223444
User 73736 does not improve AUC. Reverting changes.
Training on augumented user 66215 45/50 current_auc = 0.7197802197802199
User 66215 AUC after training: 0.7197802197802199
User 66215 does not improve AUC. Reverting changes.
Training on augumented user 120592 46/50 current_auc = 0.7197802197802199
User 120592 AUC after training: 0.7188644688644688
User 120592 does not improve AUC. Reverting changes.
Training on augumented user 68485 47/50 current_auc = 0.7197802197802199
User 68485 AUC after training: 0.7147435897435898
User 68485 does not improve AUC. Reverting changes.
Training on augumented user 16985 48/50 current_auc = 0.7197802197802199
User 16985 AUC after training: 0.7197802197802199
User 16985 does not improve AUC. Reverting changes.
Training on augumented user 76639 49/50 current_auc = 0.7197802197802199
User 76639 AUC after training: 0.7188644688644689
User 76639 does not improve AUC. Reverting changes.
[2024-12-02 18:34:30.217940] start test user 16162 103/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:30.887886] start test user 16162 103/568 recall augumented users by random, augumented_users = [33075, 45530, 94862, 3586, 70331, 130400, 136210, 9778, 41271, 75362, 66202, 95340, 57589, 121991, 81684, 43554, 104741, 80832, 132192, 47831, 117760, 126675, 28238, 118344, 69496, 31084, 37621, 70777, 22111, 8939, 90178, 64105, 107411, 137477, 12518, 64817, 88939, 42046, 88863, 132706, 89229, 131282, 41370, 50222, 135164, 57088, 48019, 92418, 50484, 121782]
[2024-12-02 18:34:30.912388] user = 16162 Cloud 103/568
[2024-12-02 18:34:31.028496] user = 16162 Local 103/568
[2024-12-02 18:34:31.397314] user = 16162 Local+ 103/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:33.952468] user = 16162 MPDA- 103/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.562520659205742
Training on augumented user 33075 0/50 current_auc = 0.562520659205742
User 33075 AUC after training: 0.5627567644142231
User 33075 improves AUC. Keeping the model.
Training on augumented user 45530 1/50 current_auc = 0.5627567644142231
User 45530 AUC after training: 0.5637011852481466
User 45530 improves AUC. Keeping the model.
Training on augumented user 94862 2/50 current_auc = 0.5637011852481466
User 94862 AUC after training: 0.5640317325400197
User 94862 improves AUC. Keeping the model.
Training on augumented user 3586 3/50 current_auc = 0.5640317325400197
User 3586 AUC after training: 0.5644095008735892
User 3586 improves AUC. Keeping the model.
Training on augumented user 70331 4/50 current_auc = 0.5644095008735892
User 70331 AUC after training: 0.5648817112905511
User 70331 improves AUC. Keeping the model.
Training on augumented user 130400 5/50 current_auc = 0.5648817112905511
User 130400 AUC after training: 0.5645275534778297
User 130400 does not improve AUC. Reverting changes.
Training on augumented user 136210 6/50 current_auc = 0.5648817112905511
User 136210 AUC after training: 0.5630282854039761
User 136210 does not improve AUC. Reverting changes.
Training on augumented user 9778 7/50 current_auc = 0.5648817112905511
User 9778 AUC after training: 0.5658025216036267
User 9778 improves AUC. Keeping the model.
Training on augumented user 41271 8/50 current_auc = 0.5658025216036267
User 41271 AUC after training: 0.5656962742598102
User 41271 does not improve AUC. Reverting changes.
Training on augumented user 75362 9/50 current_auc = 0.5658025216036267
User 75362 AUC after training: 0.5660150162912594
User 75362 improves AUC. Keeping the model.
Training on augumented user 66202 10/50 current_auc = 0.5660150162912594
User 66202 AUC after training: 0.5664400056665251
User 66202 improves AUC. Keeping the model.
Training on augumented user 95340 11/50 current_auc = 0.5664400056665251
User 95340 AUC after training: 0.5647636586863106
User 95340 does not improve AUC. Reverting changes.
Training on augumented user 57589 12/50 current_auc = 0.5664400056665251
User 57589 AUC after training: 0.5657553005619304
User 57589 does not improve AUC. Reverting changes.
Training on augumented user 121991 13/50 current_auc = 0.5664400056665251
User 121991 AUC after training: 0.5670656844689994
User 121991 improves AUC. Keeping the model.
Training on augumented user 81684 14/50 current_auc = 0.5670656844689994
User 81684 AUC after training: 0.5664872267082212
User 81684 does not improve AUC. Reverting changes.
Training on augumented user 43554 15/50 current_auc = 0.5670656844689994
User 43554 AUC after training: 0.565377532228361
User 43554 does not improve AUC. Reverting changes.
Training on augumented user 104741 16/50 current_auc = 0.5670656844689994
User 104741 AUC after training: 0.5640789535817161
User 104741 does not improve AUC. Reverting changes.
Training on augumented user 80832 17/50 current_auc = 0.5670656844689994
User 80832 AUC after training: 0.565649053218114
User 80832 does not improve AUC. Reverting changes.
Training on augumented user 132192 18/50 current_auc = 0.5670656844689994
User 132192 AUC after training: 0.5648344902488549
User 132192 does not improve AUC. Reverting changes.
Training on augumented user 47831 19/50 current_auc = 0.5670656844689994
User 47831 AUC after training: 0.567502479104689
User 47831 improves AUC. Keeping the model.
Training on augumented user 117760 20/50 current_auc = 0.567502479104689
User 117760 AUC after training: 0.5670066581668791
User 117760 does not improve AUC. Reverting changes.
Training on augumented user 126675 21/50 current_auc = 0.567502479104689
User 126675 AUC after training: 0.5667941634792464
User 126675 does not improve AUC. Reverting changes.
Training on augumented user 28238 22/50 current_auc = 0.567502479104689
User 28238 AUC after training: 0.564350474571469
User 28238 does not improve AUC. Reverting changes.
Training on augumented user 118344 23/50 current_auc = 0.567502479104689
User 118344 AUC after training: 0.5633706379562733
User 118344 does not improve AUC. Reverting changes.
Training on augumented user 69496 24/50 current_auc = 0.567502479104689
User 69496 AUC after training: 0.5617533172781791
User 69496 does not improve AUC. Reverting changes.
Training on augumented user 31084 25/50 current_auc = 0.567502479104689
User 31084 AUC after training: 0.567266373896208
User 31084 does not improve AUC. Reverting changes.
Training on augumented user 37621 26/50 current_auc = 0.567502479104689
User 37621 AUC after training: 0.5657434953015064
User 37621 does not improve AUC. Reverting changes.
Training on augumented user 70777 27/50 current_auc = 0.567502479104689
User 70777 AUC after training: 0.5675260896255371
User 70777 improves AUC. Keeping the model.
Training on augumented user 22111 28/50 current_auc = 0.5675260896255371
User 22111 AUC after training: 0.5672427633753601
User 22111 does not improve AUC. Reverting changes.
Training on augumented user 8939 29/50 current_auc = 0.5675260896255371
User 8939 AUC after training: 0.566404589885253
User 8939 does not improve AUC. Reverting changes.
Training on augumented user 90178 30/50 current_auc = 0.5675260896255371
User 90178 AUC after training: 0.5669122160834869
User 90178 does not improve AUC. Reverting changes.
Training on augumented user 64105 31/50 current_auc = 0.5675260896255371
User 64105 AUC after training: 0.5675260896255372
User 64105 improves AUC. Keeping the model.
Training on augumented user 107411 32/50 current_auc = 0.5675260896255372
User 107411 AUC after training: 0.5676913632714737
User 107411 improves AUC. Keeping the model.
Training on augumented user 137477 33/50 current_auc = 0.5676913632714737
User 137477 AUC after training: 0.5674552580629929
User 137477 does not improve AUC. Reverting changes.
Training on augumented user 12518 34/50 current_auc = 0.5676913632714737
User 12518 AUC after training: 0.5672427633753601
User 12518 does not improve AUC. Reverting changes.
Training on augumented user 64817 35/50 current_auc = 0.5676913632714737
User 64817 AUC after training: 0.5673844265004486
User 64817 does not improve AUC. Reverting changes.
Training on augumented user 88939 36/50 current_auc = 0.5676913632714737
User 88939 AUC after training: 0.5652358691032724
User 88939 does not improve AUC. Reverting changes.
Training on augumented user 42046 37/50 current_auc = 0.5676913632714737
User 42046 AUC after training: 0.5675733106672334
User 42046 does not improve AUC. Reverting changes.
Training on augumented user 88863 38/50 current_auc = 0.5676913632714737
User 88863 AUC after training: 0.5670538792085753
User 88863 does not improve AUC. Reverting changes.
Training on augumented user 132706 39/50 current_auc = 0.5676913632714737
User 132706 AUC after training: 0.5668177740000944
User 132706 does not improve AUC. Reverting changes.
Training on augumented user 89229 40/50 current_auc = 0.5676913632714737
User 89229 AUC after training: 0.5677385843131698
User 89229 improves AUC. Keeping the model.
Training on augumented user 131282 41/50 current_auc = 0.5677385843131698
User 131282 AUC after training: 0.5675497001463852
User 131282 does not improve AUC. Reverting changes.
Training on augumented user 41370 42/50 current_auc = 0.5677385843131698
User 41370 AUC after training: 0.5678566369174104
User 41370 improves AUC. Keeping the model.
Training on augumented user 50222 43/50 current_auc = 0.5678566369174104
User 50222 AUC after training: 0.566699721395854
User 50222 does not improve AUC. Reverting changes.
Training on augumented user 135164 44/50 current_auc = 0.5678566369174104
User 135164 AUC after training: 0.5678094158757142
User 135164 does not improve AUC. Reverting changes.
Training on augumented user 57088 45/50 current_auc = 0.5678566369174104
User 57088 AUC after training: 0.5676677527506256
User 57088 does not improve AUC. Reverting changes.
Training on augumented user 48019 46/50 current_auc = 0.5678566369174104
User 48019 AUC after training: 0.567478868583841
User 48019 does not improve AUC. Reverting changes.
Training on augumented user 92418 47/50 current_auc = 0.5678566369174104
User 92418 AUC after training: 0.5670066581668792
User 92418 does not improve AUC. Reverting changes.
Training on augumented user 50484 48/50 current_auc = 0.5678566369174104
User 50484 AUC after training: 0.5679510790008028
User 50484 improves AUC. Keeping the model.
Training on augumented user 121782 49/50 current_auc = 0.5679510790008028
User 121782 AUC after training: 0.5667823582188223
User 121782 does not improve AUC. Reverting changes.
[2024-12-02 18:35:04.239171] start test user 16167 104/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:04.661747] start test user 16167 104/568 recall augumented users by random, augumented_users = [64022, 75922, 81372, 31522, 35378, 77327, 34925, 31091, 122570, 123024, 21497, 61756, 128379, 64694, 68610, 45351, 3370, 122381, 114338, 22626, 29004, 120179, 136565, 133780, 54755, 80740, 25181, 27714, 121088, 73434, 19336, 124178, 29632, 51448, 129251, 106538, 66781, 126950, 129739, 108467, 86557, 68353, 59934, 125272, 7332, 66261, 115924, 104417, 114225, 55584]
[2024-12-02 18:35:04.678960] user = 16167 Cloud 104/568
[2024-12-02 18:35:04.721391] user = 16167 Local 104/568
[2024-12-02 18:35:04.793384] user = 16167 Local+ 104/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:06.115986] user = 16167 MPDA- 104/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7944302721088435
Training on augumented user 64022 0/50 current_auc = 0.7944302721088435
User 64022 AUC after training: 0.7948554421768707
User 64022 improves AUC. Keeping the model.
Training on augumented user 75922 1/50 current_auc = 0.7948554421768707
User 75922 AUC after training: 0.79421768707483
User 75922 does not improve AUC. Reverting changes.
Training on augumented user 81372 2/50 current_auc = 0.7948554421768707
User 81372 AUC after training: 0.7948554421768709
User 81372 improves AUC. Keeping the model.
Training on augumented user 31522 3/50 current_auc = 0.7948554421768709
User 31522 AUC after training: 0.7944302721088435
User 31522 does not improve AUC. Reverting changes.
Training on augumented user 35378 4/50 current_auc = 0.7948554421768709
User 35378 AUC after training: 0.7960246598639457
User 35378 improves AUC. Keeping the model.
Training on augumented user 77327 5/50 current_auc = 0.7960246598639457
User 77327 AUC after training: 0.7953869047619048
User 77327 does not improve AUC. Reverting changes.
Training on augumented user 34925 6/50 current_auc = 0.7960246598639457
User 34925 AUC after training: 0.795280612244898
User 34925 does not improve AUC. Reverting changes.
Training on augumented user 31091 7/50 current_auc = 0.7960246598639457
User 31091 AUC after training: 0.7962372448979592
User 31091 improves AUC. Keeping the model.
Training on augumented user 122570 8/50 current_auc = 0.7962372448979592
User 122570 AUC after training: 0.7960246598639457
User 122570 does not improve AUC. Reverting changes.
Training on augumented user 123024 9/50 current_auc = 0.7962372448979592
User 123024 AUC after training: 0.7958120748299319
User 123024 does not improve AUC. Reverting changes.
Training on augumented user 21497 10/50 current_auc = 0.7962372448979592
User 21497 AUC after training: 0.7961309523809524
User 21497 does not improve AUC. Reverting changes.
Training on augumented user 61756 11/50 current_auc = 0.7962372448979592
User 61756 AUC after training: 0.7960246598639455
User 61756 does not improve AUC. Reverting changes.
Training on augumented user 128379 12/50 current_auc = 0.7962372448979592
User 128379 AUC after training: 0.7953869047619048
User 128379 does not improve AUC. Reverting changes.
Training on augumented user 64694 13/50 current_auc = 0.7962372448979592
User 64694 AUC after training: 0.7955994897959183
User 64694 does not improve AUC. Reverting changes.
Training on augumented user 68610 14/50 current_auc = 0.7962372448979592
User 68610 AUC after training: 0.7960246598639457
User 68610 does not improve AUC. Reverting changes.
Training on augumented user 45351 15/50 current_auc = 0.7962372448979592
User 45351 AUC after training: 0.7962372448979592
User 45351 does not improve AUC. Reverting changes.
Training on augumented user 3370 16/50 current_auc = 0.7962372448979592
User 3370 AUC after training: 0.7953869047619048
User 3370 does not improve AUC. Reverting changes.
Training on augumented user 122381 17/50 current_auc = 0.7962372448979592
User 122381 AUC after training: 0.7958120748299319
User 122381 does not improve AUC. Reverting changes.
Training on augumented user 114338 18/50 current_auc = 0.7962372448979592
User 114338 AUC after training: 0.795812074829932
User 114338 does not improve AUC. Reverting changes.
Training on augumented user 22626 19/50 current_auc = 0.7962372448979592
User 22626 AUC after training: 0.7962372448979592
User 22626 does not improve AUC. Reverting changes.
Training on augumented user 29004 20/50 current_auc = 0.7962372448979592
User 29004 AUC after training: 0.7955994897959183
User 29004 does not improve AUC. Reverting changes.
Training on augumented user 120179 21/50 current_auc = 0.7962372448979592
User 120179 AUC after training: 0.7958120748299321
User 120179 does not improve AUC. Reverting changes.
Training on augumented user 136565 22/50 current_auc = 0.7962372448979592
User 136565 AUC after training: 0.7962372448979592
User 136565 does not improve AUC. Reverting changes.
Training on augumented user 133780 23/50 current_auc = 0.7962372448979592
User 133780 AUC after training: 0.7960246598639457
User 133780 does not improve AUC. Reverting changes.
Training on augumented user 54755 24/50 current_auc = 0.7962372448979592
User 54755 AUC after training: 0.7964498299319728
User 54755 improves AUC. Keeping the model.
Training on augumented user 80740 25/50 current_auc = 0.7964498299319728
User 80740 AUC after training: 0.7958120748299319
User 80740 does not improve AUC. Reverting changes.
Training on augumented user 25181 26/50 current_auc = 0.7964498299319728
User 25181 AUC after training: 0.7960246598639455
User 25181 does not improve AUC. Reverting changes.
Training on augumented user 27714 27/50 current_auc = 0.7964498299319728
User 27714 AUC after training: 0.7964498299319728
User 27714 does not improve AUC. Reverting changes.
Training on augumented user 121088 28/50 current_auc = 0.7964498299319728
User 121088 AUC after training: 0.7964498299319729
User 121088 improves AUC. Keeping the model.
Training on augumented user 73434 29/50 current_auc = 0.7964498299319729
User 73434 AUC after training: 0.796875
User 73434 improves AUC. Keeping the model.
Training on augumented user 19336 30/50 current_auc = 0.796875
User 19336 AUC after training: 0.7962372448979592
User 19336 does not improve AUC. Reverting changes.
Training on augumented user 124178 31/50 current_auc = 0.796875
User 124178 AUC after training: 0.7960246598639454
User 124178 does not improve AUC. Reverting changes.
Training on augumented user 29632 32/50 current_auc = 0.796875
User 29632 AUC after training: 0.7964498299319728
User 29632 does not improve AUC. Reverting changes.
Training on augumented user 51448 33/50 current_auc = 0.796875
User 51448 AUC after training: 0.796875
User 51448 does not improve AUC. Reverting changes.
Training on augumented user 129251 34/50 current_auc = 0.796875
User 129251 AUC after training: 0.795812074829932
User 129251 does not improve AUC. Reverting changes.
Training on augumented user 106538 35/50 current_auc = 0.796875
User 106538 AUC after training: 0.7962372448979592
User 106538 does not improve AUC. Reverting changes.
Training on augumented user 66781 36/50 current_auc = 0.796875
User 66781 AUC after training: 0.7964498299319728
User 66781 does not improve AUC. Reverting changes.
Training on augumented user 126950 37/50 current_auc = 0.796875
User 126950 AUC after training: 0.7964498299319728
User 126950 does not improve AUC. Reverting changes.
Training on augumented user 129739 38/50 current_auc = 0.796875
User 129739 AUC after training: 0.7960246598639455
User 129739 does not improve AUC. Reverting changes.
Training on augumented user 108467 39/50 current_auc = 0.796875
User 108467 AUC after training: 0.7964498299319728
User 108467 does not improve AUC. Reverting changes.
Training on augumented user 86557 40/50 current_auc = 0.796875
User 86557 AUC after training: 0.7954931972789115
User 86557 does not improve AUC. Reverting changes.
Training on augumented user 68353 41/50 current_auc = 0.796875
User 68353 AUC after training: 0.7966624149659863
User 68353 does not improve AUC. Reverting changes.
Training on augumented user 59934 42/50 current_auc = 0.796875
User 59934 AUC after training: 0.7964498299319728
User 59934 does not improve AUC. Reverting changes.
Training on augumented user 125272 43/50 current_auc = 0.796875
User 125272 AUC after training: 0.7964498299319728
User 125272 does not improve AUC. Reverting changes.
Training on augumented user 7332 44/50 current_auc = 0.796875
User 7332 AUC after training: 0.7966624149659863
User 7332 does not improve AUC. Reverting changes.
Training on augumented user 66261 45/50 current_auc = 0.796875
User 66261 AUC after training: 0.7960246598639455
User 66261 does not improve AUC. Reverting changes.
Training on augumented user 115924 46/50 current_auc = 0.796875
User 115924 AUC after training: 0.7966624149659863
User 115924 does not improve AUC. Reverting changes.
Training on augumented user 104417 47/50 current_auc = 0.796875
User 104417 AUC after training: 0.7966624149659863
User 104417 does not improve AUC. Reverting changes.
Training on augumented user 114225 48/50 current_auc = 0.796875
User 114225 AUC after training: 0.7964498299319728
User 114225 does not improve AUC. Reverting changes.
Training on augumented user 55584 49/50 current_auc = 0.796875
User 55584 AUC after training: 0.7962372448979593
User 55584 does not improve AUC. Reverting changes.
[2024-12-02 18:35:28.648526] start test user 16189 105/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:29.064705] start test user 16189 105/568 recall augumented users by random, augumented_users = [24607, 51907, 52818, 9542, 84303, 29876, 59334, 6097, 115483, 79941, 35258, 129347, 137797, 108031, 37295, 66776, 67857, 2639, 133500, 4819, 3315, 38948, 108651, 98616, 105398, 17163, 46286, 108048, 74048, 83804, 70269, 51657, 85183, 71674, 24707, 59570, 60395, 44148, 97214, 13306, 13933, 105103, 123036, 37162, 106270, 10434, 82164, 107386, 9327, 132226]
[2024-12-02 18:35:29.080443] user = 16189 Cloud 105/568
[2024-12-02 18:35:29.117306] user = 16189 Local 105/568
[2024-12-02 18:35:29.230345] user = 16189 Local+ 105/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:31.519902] user = 16189 MPDA- 105/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6206326463132371
Training on augumented user 24607 0/50 current_auc = 0.6206326463132371
User 24607 AUC after training: 0.6210000367390426
User 24607 improves AUC. Keeping the model.
Training on augumented user 51907 1/50 current_auc = 0.6210000367390426
User 51907 AUC after training: 0.620559168228076
User 51907 does not improve AUC. Reverting changes.
Training on augumented user 52818 2/50 current_auc = 0.6210000367390426
User 52818 AUC after training: 0.6211469929093648
User 52818 improves AUC. Keeping the model.
Training on augumented user 9542 3/50 current_auc = 0.6211469929093648
User 9542 AUC after training: 0.620559168228076
User 9542 does not improve AUC. Reverting changes.
Training on augumented user 84303 4/50 current_auc = 0.6211469929093648
User 84303 AUC after training: 0.6218634042396856
User 84303 improves AUC. Keeping the model.
Training on augumented user 29876 5/50 current_auc = 0.6218634042396856
User 29876 AUC after training: 0.6225247070061355
User 29876 improves AUC. Keeping the model.
Training on augumented user 59334 6/50 current_auc = 0.6225247070061355
User 59334 AUC after training: 0.6217899261545244
User 59334 does not improve AUC. Reverting changes.
Training on augumented user 6097 7/50 current_auc = 0.6225247070061355
User 6097 AUC after training: 0.6213306881222674
User 6097 does not improve AUC. Reverting changes.
Training on augumented user 115483 8/50 current_auc = 0.6225247070061355
User 115483 AUC after training: 0.6197509092913039
User 115483 does not improve AUC. Reverting changes.
Training on augumented user 79941 9/50 current_auc = 0.6225247070061355
User 79941 AUC after training: 0.6220103604100078
User 79941 does not improve AUC. Reverting changes.
Training on augumented user 35258 10/50 current_auc = 0.6225247070061355
User 35258 AUC after training: 0.6199713435467873
User 35258 does not improve AUC. Reverting changes.
Training on augumented user 129347 11/50 current_auc = 0.6225247070061355
User 129347 AUC after training: 0.6217348175906536
User 129347 does not improve AUC. Reverting changes.
Training on augumented user 137797 12/50 current_auc = 0.6225247070061355
User 137797 AUC after training: 0.6212021014732356
User 137797 does not improve AUC. Reverting changes.
Training on augumented user 108031 13/50 current_auc = 0.6225247070061355
User 108031 AUC after training: 0.6212572100371064
User 108031 does not improve AUC. Reverting changes.
Training on augumented user 37295 14/50 current_auc = 0.6225247070061355
User 37295 AUC after training: 0.6205959072706565
User 37295 does not improve AUC. Reverting changes.
Training on augumented user 66776 15/50 current_auc = 0.6225247070061355
User 66776 AUC after training: 0.6219919908887175
User 66776 does not improve AUC. Reverting changes.
Training on augumented user 67857 16/50 current_auc = 0.6225247070061355
User 67857 AUC after training: 0.6225063374848451
User 67857 does not improve AUC. Reverting changes.
Training on augumented user 2639 17/50 current_auc = 0.6225247070061355
User 2639 AUC after training: 0.6213306881222675
User 2639 does not improve AUC. Reverting changes.
Training on augumented user 133500 18/50 current_auc = 0.6225247070061355
User 133500 AUC after training: 0.620632646313237
User 133500 does not improve AUC. Reverting changes.
Training on augumented user 4819 19/50 current_auc = 0.6225247070061355
User 4819 AUC after training: 0.621624600462912
User 4819 does not improve AUC. Reverting changes.
Training on augumented user 3315 20/50 current_auc = 0.6225247070061355
User 3315 AUC after training: 0.6216613395054924
User 3315 does not improve AUC. Reverting changes.
Training on augumented user 38948 21/50 current_auc = 0.6225247070061355
User 38948 AUC after training: 0.6222491641867813
User 38948 does not improve AUC. Reverting changes.
Training on augumented user 108651 22/50 current_auc = 0.6225247070061355
User 108651 AUC after training: 0.6204489511003344
User 108651 does not improve AUC. Reverting changes.
Training on augumented user 98616 23/50 current_auc = 0.6225247070061355
User 98616 AUC after training: 0.6213857966861382
User 98616 does not improve AUC. Reverting changes.
Training on augumented user 105398 24/50 current_auc = 0.6225247070061355
User 105398 AUC after training: 0.6217348175906536
User 105398 does not improve AUC. Reverting changes.
Training on augumented user 17163 25/50 current_auc = 0.6225247070061355
User 17163 AUC after training: 0.6206326463132371
User 17163 does not improve AUC. Reverting changes.
Training on augumented user 46286 26/50 current_auc = 0.6225247070061355
User 46286 AUC after training: 0.6219368823248467
User 46286 does not improve AUC. Reverting changes.
Training on augumented user 108048 27/50 current_auc = 0.6225247070061355
User 108048 AUC after training: 0.6213306881222675
User 108048 does not improve AUC. Reverting changes.
Training on augumented user 74048 28/50 current_auc = 0.6225247070061355
User 74048 AUC after training: 0.61949373599324
User 74048 does not improve AUC. Reverting changes.
Training on augumented user 83804 29/50 current_auc = 0.6225247070061355
User 83804 AUC after training: 0.6213306881222674
User 83804 does not improve AUC. Reverting changes.
Training on augumented user 70269 30/50 current_auc = 0.6225247070061355
User 70269 AUC after training: 0.6208163415261397
User 70269 does not improve AUC. Reverting changes.
Training on augumented user 51657 31/50 current_auc = 0.6225247070061355
User 51657 AUC after training: 0.6210918843454939
User 51657 does not improve AUC. Reverting changes.
Training on augumented user 85183 32/50 current_auc = 0.6225247070061355
User 85183 AUC after training: 0.6219552518461369
User 85183 does not improve AUC. Reverting changes.
Training on augumented user 71674 33/50 current_auc = 0.6225247070061355
User 71674 AUC after training: 0.6217164480693633
User 71674 does not improve AUC. Reverting changes.
Training on augumented user 24707 34/50 current_auc = 0.6225247070061355
User 24707 AUC after training: 0.6211286233880745
User 24707 does not improve AUC. Reverting changes.
Training on augumented user 59570 35/50 current_auc = 0.6225247070061355
User 59570 AUC after training: 0.6214225357287189
User 59570 does not improve AUC. Reverting changes.
Training on augumented user 60395 36/50 current_auc = 0.6225247070061355
User 60395 AUC after training: 0.6219368823248466
User 60395 does not improve AUC. Reverting changes.
Training on augumented user 44148 37/50 current_auc = 0.6225247070061355
User 44148 AUC after training: 0.6215511223777508
User 44148 does not improve AUC. Reverting changes.
Training on augumented user 97214 38/50 current_auc = 0.6225247070061355
User 97214 AUC after training: 0.6207979720048495
User 97214 does not improve AUC. Reverting changes.
Training on augumented user 13306 39/50 current_auc = 0.6225247070061355
User 13306 AUC after training: 0.6204856901429148
User 13306 does not improve AUC. Reverting changes.
Training on augumented user 13933 40/50 current_auc = 0.6225247070061355
User 13933 AUC after training: 0.6223961203571036
User 13933 does not improve AUC. Reverting changes.
Training on augumented user 105103 41/50 current_auc = 0.6225247070061355
User 105103 AUC after training: 0.6217531871119438
User 105103 does not improve AUC. Reverting changes.
Training on augumented user 123036 42/50 current_auc = 0.6225247070061355
User 123036 AUC after training: 0.6218082956758147
User 123036 does not improve AUC. Reverting changes.
Training on augumented user 37162 43/50 current_auc = 0.6225247070061355
User 37162 AUC after training: 0.6219736213674272
User 37162 does not improve AUC. Reverting changes.
Training on augumented user 106270 44/50 current_auc = 0.6225247070061355
User 106270 AUC after training: 0.6209081891325912
User 106270 does not improve AUC. Reverting changes.
Training on augumented user 10434 45/50 current_auc = 0.6225247070061355
User 10434 AUC after training: 0.6207428634409786
User 10434 does not improve AUC. Reverting changes.
Training on augumented user 82164 46/50 current_auc = 0.6225247070061355
User 82164 AUC after training: 0.6217348175906535
User 82164 does not improve AUC. Reverting changes.
Training on augumented user 107386 47/50 current_auc = 0.6225247070061355
User 107386 AUC after training: 0.6218634042396854
User 107386 does not improve AUC. Reverting changes.
Training on augumented user 9327 48/50 current_auc = 0.6225247070061355
User 9327 AUC after training: 0.6214960138138801
User 9327 does not improve AUC. Reverting changes.
Training on augumented user 132226 49/50 current_auc = 0.6225247070061355
User 132226 AUC after training: 0.6215878614203314
User 132226 does not improve AUC. Reverting changes.
[2024-12-02 18:36:00.230957] start test user 16231 106/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:00.675934] start test user 16231 106/568 recall augumented users by random, augumented_users = [79604, 61248, 105392, 31118, 80532, 65144, 118269, 116413, 43711, 133329, 12014, 46344, 66996, 127478, 22435, 117672, 61085, 29219, 75098, 56, 45182, 108, 30508, 60427, 100565, 115100, 129922, 86149, 32691, 35575, 73016, 40168, 3416, 103876, 121698, 15556, 124779, 29531, 87380, 62134, 131258, 77977, 70398, 53118, 115314, 34992, 101495, 41319, 22066, 75666]
[2024-12-02 18:36:00.690501] user = 16231 Cloud 106/568
[2024-12-02 18:36:00.704933] user = 16231 Local 106/568
[2024-12-02 18:36:00.784525] user = 16231 Local+ 106/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:03.086335] user = 16231 MPDA- 106/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7152777777777778
Training on augumented user 79604 0/50 current_auc = 0.7152777777777778
User 79604 AUC after training: 0.7161458333333334
User 79604 improves AUC. Keeping the model.
Training on augumented user 61248 1/50 current_auc = 0.7161458333333334
User 61248 AUC after training: 0.7170138888888888
User 61248 improves AUC. Keeping the model.
Training on augumented user 105392 2/50 current_auc = 0.7170138888888888
User 105392 AUC after training: 0.7170138888888888
User 105392 does not improve AUC. Reverting changes.
Training on augumented user 31118 3/50 current_auc = 0.7170138888888888
User 31118 AUC after training: 0.7170138888888888
User 31118 does not improve AUC. Reverting changes.
Training on augumented user 80532 4/50 current_auc = 0.7170138888888888
User 80532 AUC after training: 0.7170138888888888
User 80532 does not improve AUC. Reverting changes.
Training on augumented user 65144 5/50 current_auc = 0.7170138888888888
User 65144 AUC after training: 0.7170138888888888
User 65144 does not improve AUC. Reverting changes.
Training on augumented user 118269 6/50 current_auc = 0.7170138888888888
User 118269 AUC after training: 0.7170138888888888
User 118269 does not improve AUC. Reverting changes.
Training on augumented user 116413 7/50 current_auc = 0.7170138888888888
User 116413 AUC after training: 0.7170138888888888
User 116413 does not improve AUC. Reverting changes.
Training on augumented user 43711 8/50 current_auc = 0.7170138888888888
User 43711 AUC after training: 0.7170138888888888
User 43711 does not improve AUC. Reverting changes.
Training on augumented user 133329 9/50 current_auc = 0.7170138888888888
User 133329 AUC after training: 0.7178819444444444
User 133329 improves AUC. Keeping the model.
Training on augumented user 12014 10/50 current_auc = 0.7178819444444444
User 12014 AUC after training: 0.7170138888888888
User 12014 does not improve AUC. Reverting changes.
Training on augumented user 46344 11/50 current_auc = 0.7178819444444444
User 46344 AUC after training: 0.7178819444444444
User 46344 does not improve AUC. Reverting changes.
Training on augumented user 66996 12/50 current_auc = 0.7178819444444444
User 66996 AUC after training: 0.7178819444444444
User 66996 does not improve AUC. Reverting changes.
Training on augumented user 127478 13/50 current_auc = 0.7178819444444444
User 127478 AUC after training: 0.71875
User 127478 improves AUC. Keeping the model.
Training on augumented user 22435 14/50 current_auc = 0.71875
User 22435 AUC after training: 0.71875
User 22435 does not improve AUC. Reverting changes.
Training on augumented user 117672 15/50 current_auc = 0.71875
User 117672 AUC after training: 0.71875
User 117672 does not improve AUC. Reverting changes.
Training on augumented user 61085 16/50 current_auc = 0.71875
User 61085 AUC after training: 0.7178819444444444
User 61085 does not improve AUC. Reverting changes.
Training on augumented user 29219 17/50 current_auc = 0.71875
User 29219 AUC after training: 0.71875
User 29219 does not improve AUC. Reverting changes.
Training on augumented user 75098 18/50 current_auc = 0.71875
User 75098 AUC after training: 0.71875
User 75098 does not improve AUC. Reverting changes.
Training on augumented user 56 19/50 current_auc = 0.71875
User 56 AUC after training: 0.7178819444444444
User 56 does not improve AUC. Reverting changes.
Training on augumented user 45182 20/50 current_auc = 0.71875
User 45182 AUC after training: 0.7178819444444444
User 45182 does not improve AUC. Reverting changes.
Training on augumented user 108 21/50 current_auc = 0.71875
User 108 AUC after training: 0.71875
User 108 does not improve AUC. Reverting changes.
Training on augumented user 30508 22/50 current_auc = 0.71875
User 30508 AUC after training: 0.7178819444444444
User 30508 does not improve AUC. Reverting changes.
Training on augumented user 60427 23/50 current_auc = 0.71875
User 60427 AUC after training: 0.7178819444444444
User 60427 does not improve AUC. Reverting changes.
Training on augumented user 100565 24/50 current_auc = 0.71875
User 100565 AUC after training: 0.71875
User 100565 does not improve AUC. Reverting changes.
Training on augumented user 115100 25/50 current_auc = 0.71875
User 115100 AUC after training: 0.7178819444444444
User 115100 does not improve AUC. Reverting changes.
Training on augumented user 129922 26/50 current_auc = 0.71875
User 129922 AUC after training: 0.71875
User 129922 does not improve AUC. Reverting changes.
Training on augumented user 86149 27/50 current_auc = 0.71875
User 86149 AUC after training: 0.71875
User 86149 does not improve AUC. Reverting changes.
Training on augumented user 32691 28/50 current_auc = 0.71875
User 32691 AUC after training: 0.71875
User 32691 does not improve AUC. Reverting changes.
Training on augumented user 35575 29/50 current_auc = 0.71875
User 35575 AUC after training: 0.71875
User 35575 does not improve AUC. Reverting changes.
Training on augumented user 73016 30/50 current_auc = 0.71875
User 73016 AUC after training: 0.71875
User 73016 does not improve AUC. Reverting changes.
Training on augumented user 40168 31/50 current_auc = 0.71875
User 40168 AUC after training: 0.7178819444444444
User 40168 does not improve AUC. Reverting changes.
Training on augumented user 3416 32/50 current_auc = 0.71875
User 3416 AUC after training: 0.7178819444444444
User 3416 does not improve AUC. Reverting changes.
Training on augumented user 103876 33/50 current_auc = 0.71875
User 103876 AUC after training: 0.71875
User 103876 does not improve AUC. Reverting changes.
Training on augumented user 121698 34/50 current_auc = 0.71875
User 121698 AUC after training: 0.71875
User 121698 does not improve AUC. Reverting changes.
Training on augumented user 15556 35/50 current_auc = 0.71875
User 15556 AUC after training: 0.71875
User 15556 does not improve AUC. Reverting changes.
Training on augumented user 124779 36/50 current_auc = 0.71875
User 124779 AUC after training: 0.71875
User 124779 does not improve AUC. Reverting changes.
Training on augumented user 29531 37/50 current_auc = 0.71875
User 29531 AUC after training: 0.71875
User 29531 does not improve AUC. Reverting changes.
Training on augumented user 87380 38/50 current_auc = 0.71875
User 87380 AUC after training: 0.71875
User 87380 does not improve AUC. Reverting changes.
Training on augumented user 62134 39/50 current_auc = 0.71875
User 62134 AUC after training: 0.7170138888888888
User 62134 does not improve AUC. Reverting changes.
Training on augumented user 131258 40/50 current_auc = 0.71875
User 131258 AUC after training: 0.71875
User 131258 does not improve AUC. Reverting changes.
Training on augumented user 77977 41/50 current_auc = 0.71875
User 77977 AUC after training: 0.7178819444444444
User 77977 does not improve AUC. Reverting changes.
Training on augumented user 70398 42/50 current_auc = 0.71875
User 70398 AUC after training: 0.71875
User 70398 does not improve AUC. Reverting changes.
Training on augumented user 53118 43/50 current_auc = 0.71875
User 53118 AUC after training: 0.71875
User 53118 does not improve AUC. Reverting changes.
Training on augumented user 115314 44/50 current_auc = 0.71875
User 115314 AUC after training: 0.7178819444444444
User 115314 does not improve AUC. Reverting changes.
Training on augumented user 34992 45/50 current_auc = 0.71875
User 34992 AUC after training: 0.71875
User 34992 does not improve AUC. Reverting changes.
Training on augumented user 101495 46/50 current_auc = 0.71875
User 101495 AUC after training: 0.7178819444444444
User 101495 does not improve AUC. Reverting changes.
Training on augumented user 41319 47/50 current_auc = 0.71875
User 41319 AUC after training: 0.71875
User 41319 does not improve AUC. Reverting changes.
Training on augumented user 22066 48/50 current_auc = 0.71875
User 22066 AUC after training: 0.7178819444444444
User 22066 does not improve AUC. Reverting changes.
Training on augumented user 75666 49/50 current_auc = 0.71875
User 75666 AUC after training: 0.7178819444444444
User 75666 does not improve AUC. Reverting changes.
[2024-12-02 18:36:29.138195] start test user 16270 107/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:29.925690] start test user 16270 107/568 recall augumented users by random, augumented_users = [89667, 136109, 45992, 131260, 41387, 60588, 72194, 119963, 46089, 128998, 122908, 123151, 94265, 36365, 102577, 78000, 97094, 51012, 3187, 129364, 55168, 1717, 67879, 93891, 89864, 101612, 80260, 124670, 24329, 104443, 117661, 99562, 33075, 65813, 42034, 82065, 109060, 109746, 107042, 4069, 94934, 111150, 55353, 14746, 122824, 56746, 105430, 66507, 71467, 65670]
[2024-12-02 18:36:29.954653] user = 16270 Cloud 107/568
[2024-12-02 18:36:29.965802] user = 16270 Local 107/568
[2024-12-02 18:36:30.135478] user = 16270 Local+ 107/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:33.077218] user = 16270 MPDA- 107/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6339285714285714
Training on augumented user 89667 0/50 current_auc = 0.6339285714285714
User 89667 AUC after training: 0.6383928571428572
User 89667 improves AUC. Keeping the model.
Training on augumented user 136109 1/50 current_auc = 0.6383928571428572
User 136109 AUC after training: 0.6383928571428572
User 136109 does not improve AUC. Reverting changes.
Training on augumented user 45992 2/50 current_auc = 0.6383928571428572
User 45992 AUC after training: 0.6383928571428572
User 45992 does not improve AUC. Reverting changes.
Training on augumented user 131260 3/50 current_auc = 0.6383928571428572
User 131260 AUC after training: 0.6339285714285714
User 131260 does not improve AUC. Reverting changes.
Training on augumented user 41387 4/50 current_auc = 0.6383928571428572
User 41387 AUC after training: 0.6383928571428572
User 41387 does not improve AUC. Reverting changes.
Training on augumented user 60588 5/50 current_auc = 0.6383928571428572
User 60588 AUC after training: 0.6383928571428572
User 60588 does not improve AUC. Reverting changes.
Training on augumented user 72194 6/50 current_auc = 0.6383928571428572
User 72194 AUC after training: 0.6339285714285714
User 72194 does not improve AUC. Reverting changes.
Training on augumented user 119963 7/50 current_auc = 0.6383928571428572
User 119963 AUC after training: 0.6383928571428572
User 119963 does not improve AUC. Reverting changes.
Training on augumented user 46089 8/50 current_auc = 0.6383928571428572
User 46089 AUC after training: 0.6383928571428572
User 46089 does not improve AUC. Reverting changes.
Training on augumented user 128998 9/50 current_auc = 0.6383928571428572
User 128998 AUC after training: 0.6383928571428572
User 128998 does not improve AUC. Reverting changes.
Training on augumented user 122908 10/50 current_auc = 0.6383928571428572
User 122908 AUC after training: 0.6383928571428572
User 122908 does not improve AUC. Reverting changes.
Training on augumented user 123151 11/50 current_auc = 0.6383928571428572
User 123151 AUC after training: 0.6383928571428572
User 123151 does not improve AUC. Reverting changes.
Training on augumented user 94265 12/50 current_auc = 0.6383928571428572
User 94265 AUC after training: 0.6383928571428572
User 94265 does not improve AUC. Reverting changes.
Training on augumented user 36365 13/50 current_auc = 0.6383928571428572
User 36365 AUC after training: 0.6383928571428572
User 36365 does not improve AUC. Reverting changes.
Training on augumented user 102577 14/50 current_auc = 0.6383928571428572
User 102577 AUC after training: 0.6339285714285714
User 102577 does not improve AUC. Reverting changes.
Training on augumented user 78000 15/50 current_auc = 0.6383928571428572
User 78000 AUC after training: 0.6339285714285714
User 78000 does not improve AUC. Reverting changes.
Training on augumented user 97094 16/50 current_auc = 0.6383928571428572
User 97094 AUC after training: 0.6383928571428572
User 97094 does not improve AUC. Reverting changes.
Training on augumented user 51012 17/50 current_auc = 0.6383928571428572
User 51012 AUC after training: 0.6339285714285714
User 51012 does not improve AUC. Reverting changes.
Training on augumented user 3187 18/50 current_auc = 0.6383928571428572
User 3187 AUC after training: 0.6339285714285714
User 3187 does not improve AUC. Reverting changes.
Training on augumented user 129364 19/50 current_auc = 0.6383928571428572
User 129364 AUC after training: 0.6383928571428572
User 129364 does not improve AUC. Reverting changes.
Training on augumented user 55168 20/50 current_auc = 0.6383928571428572
User 55168 AUC after training: 0.6339285714285714
User 55168 does not improve AUC. Reverting changes.
Training on augumented user 1717 21/50 current_auc = 0.6383928571428572
User 1717 AUC after training: 0.6383928571428572
User 1717 does not improve AUC. Reverting changes.
Training on augumented user 67879 22/50 current_auc = 0.6383928571428572
User 67879 AUC after training: 0.6383928571428572
User 67879 does not improve AUC. Reverting changes.
Training on augumented user 93891 23/50 current_auc = 0.6383928571428572
User 93891 AUC after training: 0.6383928571428572
User 93891 does not improve AUC. Reverting changes.
Training on augumented user 89864 24/50 current_auc = 0.6383928571428572
User 89864 AUC after training: 0.6339285714285714
User 89864 does not improve AUC. Reverting changes.
Training on augumented user 101612 25/50 current_auc = 0.6383928571428572
User 101612 AUC after training: 0.6383928571428572
User 101612 does not improve AUC. Reverting changes.
Training on augumented user 80260 26/50 current_auc = 0.6383928571428572
User 80260 AUC after training: 0.6383928571428572
User 80260 does not improve AUC. Reverting changes.
Training on augumented user 124670 27/50 current_auc = 0.6383928571428572
User 124670 AUC after training: 0.6383928571428572
User 124670 does not improve AUC. Reverting changes.
Training on augumented user 24329 28/50 current_auc = 0.6383928571428572
User 24329 AUC after training: 0.6383928571428572
User 24329 does not improve AUC. Reverting changes.
Training on augumented user 104443 29/50 current_auc = 0.6383928571428572
User 104443 AUC after training: 0.6383928571428572
User 104443 does not improve AUC. Reverting changes.
Training on augumented user 117661 30/50 current_auc = 0.6383928571428572
User 117661 AUC after training: 0.6383928571428572
User 117661 does not improve AUC. Reverting changes.
Training on augumented user 99562 31/50 current_auc = 0.6383928571428572
User 99562 AUC after training: 0.6383928571428572
User 99562 does not improve AUC. Reverting changes.
Training on augumented user 33075 32/50 current_auc = 0.6383928571428572
User 33075 AUC after training: 0.6383928571428572
User 33075 does not improve AUC. Reverting changes.
Training on augumented user 65813 33/50 current_auc = 0.6383928571428572
User 65813 AUC after training: 0.6339285714285714
User 65813 does not improve AUC. Reverting changes.
Training on augumented user 42034 34/50 current_auc = 0.6383928571428572
User 42034 AUC after training: 0.6383928571428572
User 42034 does not improve AUC. Reverting changes.
Training on augumented user 82065 35/50 current_auc = 0.6383928571428572
User 82065 AUC after training: 0.6383928571428572
User 82065 does not improve AUC. Reverting changes.
Training on augumented user 109060 36/50 current_auc = 0.6383928571428572
User 109060 AUC after training: 0.6339285714285714
User 109060 does not improve AUC. Reverting changes.
Training on augumented user 109746 37/50 current_auc = 0.6383928571428572
User 109746 AUC after training: 0.6383928571428572
User 109746 does not improve AUC. Reverting changes.
Training on augumented user 107042 38/50 current_auc = 0.6383928571428572
User 107042 AUC after training: 0.6383928571428572
User 107042 does not improve AUC. Reverting changes.
Training on augumented user 4069 39/50 current_auc = 0.6383928571428572
User 4069 AUC after training: 0.6383928571428572
User 4069 does not improve AUC. Reverting changes.
Training on augumented user 94934 40/50 current_auc = 0.6383928571428572
User 94934 AUC after training: 0.6383928571428572
User 94934 does not improve AUC. Reverting changes.
Training on augumented user 111150 41/50 current_auc = 0.6383928571428572
User 111150 AUC after training: 0.6383928571428572
User 111150 does not improve AUC. Reverting changes.
Training on augumented user 55353 42/50 current_auc = 0.6383928571428572
User 55353 AUC after training: 0.6383928571428572
User 55353 does not improve AUC. Reverting changes.
Training on augumented user 14746 43/50 current_auc = 0.6383928571428572
User 14746 AUC after training: 0.6339285714285714
User 14746 does not improve AUC. Reverting changes.
Training on augumented user 122824 44/50 current_auc = 0.6383928571428572
User 122824 AUC after training: 0.6383928571428572
User 122824 does not improve AUC. Reverting changes.
Training on augumented user 56746 45/50 current_auc = 0.6383928571428572
User 56746 AUC after training: 0.6339285714285714
User 56746 does not improve AUC. Reverting changes.
Training on augumented user 105430 46/50 current_auc = 0.6383928571428572
User 105430 AUC after training: 0.6383928571428572
User 105430 does not improve AUC. Reverting changes.
Training on augumented user 66507 47/50 current_auc = 0.6383928571428572
User 66507 AUC after training: 0.6383928571428572
User 66507 does not improve AUC. Reverting changes.
Training on augumented user 71467 48/50 current_auc = 0.6383928571428572
User 71467 AUC after training: 0.6339285714285714
User 71467 does not improve AUC. Reverting changes.
Training on augumented user 65670 49/50 current_auc = 0.6383928571428572
User 65670 AUC after training: 0.6383928571428572
User 65670 does not improve AUC. Reverting changes.
[2024-12-02 18:37:02.738956] start test user 16280 108/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:03.433236] start test user 16280 108/568 recall augumented users by random, augumented_users = [101928, 96852, 47870, 72440, 129163, 30942, 130020, 118524, 122178, 94774, 29193, 60303, 9604, 30144, 20515, 131855, 105867, 57657, 8465, 57163, 126965, 132108, 4974, 48629, 43636, 60965, 124989, 106123, 48768, 111711, 96952, 48587, 129385, 19664, 114792, 80282, 111558, 12950, 85649, 51965, 8368, 2798, 78445, 66441, 2198, 9291, 58860, 47541, 55759, 129886]
[2024-12-02 18:37:03.449548] user = 16280 Cloud 108/568
[2024-12-02 18:37:03.464003] user = 16280 Local 108/568
[2024-12-02 18:37:03.535707] user = 16280 Local+ 108/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:06.726865] user = 16280 MPDA- 108/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4743589743589744
Training on augumented user 101928 0/50 current_auc = 0.4743589743589744
User 101928 AUC after training: 0.46703296703296704
User 101928 does not improve AUC. Reverting changes.
Training on augumented user 96852 1/50 current_auc = 0.4743589743589744
User 96852 AUC after training: 0.4725274725274725
User 96852 does not improve AUC. Reverting changes.
Training on augumented user 47870 2/50 current_auc = 0.4743589743589744
User 47870 AUC after training: 0.4706959706959707
User 47870 does not improve AUC. Reverting changes.
Training on augumented user 72440 3/50 current_auc = 0.4743589743589744
User 72440 AUC after training: 0.4743589743589744
User 72440 does not improve AUC. Reverting changes.
Training on augumented user 129163 4/50 current_auc = 0.4743589743589744
User 129163 AUC after training: 0.4743589743589744
User 129163 does not improve AUC. Reverting changes.
Training on augumented user 30942 5/50 current_auc = 0.4743589743589744
User 30942 AUC after training: 0.46886446886446886
User 30942 does not improve AUC. Reverting changes.
Training on augumented user 130020 6/50 current_auc = 0.4743589743589744
User 130020 AUC after training: 0.47435897435897434
User 130020 does not improve AUC. Reverting changes.
Training on augumented user 118524 7/50 current_auc = 0.4743589743589744
User 118524 AUC after training: 0.4725274725274725
User 118524 does not improve AUC. Reverting changes.
Training on augumented user 122178 8/50 current_auc = 0.4743589743589744
User 122178 AUC after training: 0.4725274725274725
User 122178 does not improve AUC. Reverting changes.
Training on augumented user 94774 9/50 current_auc = 0.4743589743589744
User 94774 AUC after training: 0.4743589743589744
User 94774 does not improve AUC. Reverting changes.
Training on augumented user 29193 10/50 current_auc = 0.4743589743589744
User 29193 AUC after training: 0.4743589743589744
User 29193 does not improve AUC. Reverting changes.
Training on augumented user 60303 11/50 current_auc = 0.4743589743589744
User 60303 AUC after training: 0.4734432234432235
User 60303 does not improve AUC. Reverting changes.
Training on augumented user 9604 12/50 current_auc = 0.4743589743589744
User 9604 AUC after training: 0.4743589743589744
User 9604 does not improve AUC. Reverting changes.
Training on augumented user 30144 13/50 current_auc = 0.4743589743589744
User 30144 AUC after training: 0.4734432234432235
User 30144 does not improve AUC. Reverting changes.
Training on augumented user 20515 14/50 current_auc = 0.4743589743589744
User 20515 AUC after training: 0.4743589743589744
User 20515 does not improve AUC. Reverting changes.
Training on augumented user 131855 15/50 current_auc = 0.4743589743589744
User 131855 AUC after training: 0.4706959706959707
User 131855 does not improve AUC. Reverting changes.
Training on augumented user 105867 16/50 current_auc = 0.4743589743589744
User 105867 AUC after training: 0.4743589743589744
User 105867 does not improve AUC. Reverting changes.
Training on augumented user 57657 17/50 current_auc = 0.4743589743589744
User 57657 AUC after training: 0.4743589743589744
User 57657 does not improve AUC. Reverting changes.
Training on augumented user 8465 18/50 current_auc = 0.4743589743589744
User 8465 AUC after training: 0.4752747252747253
User 8465 improves AUC. Keeping the model.
Training on augumented user 57163 19/50 current_auc = 0.4752747252747253
User 57163 AUC after training: 0.47069597069597074
User 57163 does not improve AUC. Reverting changes.
Training on augumented user 126965 20/50 current_auc = 0.4752747252747253
User 126965 AUC after training: 0.4688644688644689
User 126965 does not improve AUC. Reverting changes.
Training on augumented user 132108 21/50 current_auc = 0.4752747252747253
User 132108 AUC after training: 0.47435897435897434
User 132108 does not improve AUC. Reverting changes.
Training on augumented user 4974 22/50 current_auc = 0.4752747252747253
User 4974 AUC after training: 0.4734432234432235
User 4974 does not improve AUC. Reverting changes.
Training on augumented user 48629 23/50 current_auc = 0.4752747252747253
User 48629 AUC after training: 0.4752747252747253
User 48629 does not improve AUC. Reverting changes.
Training on augumented user 43636 24/50 current_auc = 0.4752747252747253
User 43636 AUC after training: 0.46520146520146527
User 43636 does not improve AUC. Reverting changes.
Training on augumented user 60965 25/50 current_auc = 0.4752747252747253
User 60965 AUC after training: 0.4734432234432235
User 60965 does not improve AUC. Reverting changes.
Training on augumented user 124989 26/50 current_auc = 0.4752747252747253
User 124989 AUC after training: 0.46978021978021983
User 124989 does not improve AUC. Reverting changes.
Training on augumented user 106123 27/50 current_auc = 0.4752747252747253
User 106123 AUC after training: 0.47619047619047616
User 106123 improves AUC. Keeping the model.
Training on augumented user 48768 28/50 current_auc = 0.47619047619047616
User 48768 AUC after training: 0.47252747252747257
User 48768 does not improve AUC. Reverting changes.
Training on augumented user 111711 29/50 current_auc = 0.47619047619047616
User 111711 AUC after training: 0.47161172161172166
User 111711 does not improve AUC. Reverting changes.
Training on augumented user 96952 30/50 current_auc = 0.47619047619047616
User 96952 AUC after training: 0.4670329670329671
User 96952 does not improve AUC. Reverting changes.
Training on augumented user 48587 31/50 current_auc = 0.47619047619047616
User 48587 AUC after training: 0.47435897435897445
User 48587 does not improve AUC. Reverting changes.
Training on augumented user 129385 32/50 current_auc = 0.47619047619047616
User 129385 AUC after training: 0.47252747252747257
User 129385 does not improve AUC. Reverting changes.
Training on augumented user 19664 33/50 current_auc = 0.47619047619047616
User 19664 AUC after training: 0.47252747252747257
User 19664 does not improve AUC. Reverting changes.
Training on augumented user 114792 34/50 current_auc = 0.47619047619047616
User 114792 AUC after training: 0.47619047619047616
User 114792 does not improve AUC. Reverting changes.
Training on augumented user 80282 35/50 current_auc = 0.47619047619047616
User 80282 AUC after training: 0.4734432234432235
User 80282 does not improve AUC. Reverting changes.
Training on augumented user 111558 36/50 current_auc = 0.47619047619047616
User 111558 AUC after training: 0.4734432234432235
User 111558 does not improve AUC. Reverting changes.
Training on augumented user 12950 37/50 current_auc = 0.47619047619047616
User 12950 AUC after training: 0.4578754578754579
User 12950 does not improve AUC. Reverting changes.
Training on augumented user 85649 38/50 current_auc = 0.47619047619047616
User 85649 AUC after training: 0.4670329670329671
User 85649 does not improve AUC. Reverting changes.
Training on augumented user 51965 39/50 current_auc = 0.47619047619047616
User 51965 AUC after training: 0.4725274725274725
User 51965 does not improve AUC. Reverting changes.
Training on augumented user 8368 40/50 current_auc = 0.47619047619047616
User 8368 AUC after training: 0.4734432234432235
User 8368 does not improve AUC. Reverting changes.
Training on augumented user 2798 41/50 current_auc = 0.47619047619047616
User 2798 AUC after training: 0.4752747252747253
User 2798 does not improve AUC. Reverting changes.
Training on augumented user 78445 42/50 current_auc = 0.47619047619047616
User 78445 AUC after training: 0.47619047619047616
User 78445 does not improve AUC. Reverting changes.
Training on augumented user 66441 43/50 current_auc = 0.47619047619047616
User 66441 AUC after training: 0.47527472527472525
User 66441 does not improve AUC. Reverting changes.
Training on augumented user 2198 44/50 current_auc = 0.47619047619047616
User 2198 AUC after training: 0.47161172161172166
User 2198 does not improve AUC. Reverting changes.
Training on augumented user 9291 45/50 current_auc = 0.47619047619047616
User 9291 AUC after training: 0.4706959706959707
User 9291 does not improve AUC. Reverting changes.
Training on augumented user 58860 46/50 current_auc = 0.47619047619047616
User 58860 AUC after training: 0.4743589743589744
User 58860 does not improve AUC. Reverting changes.
Training on augumented user 47541 47/50 current_auc = 0.47619047619047616
User 47541 AUC after training: 0.4734432234432235
User 47541 does not improve AUC. Reverting changes.
Training on augumented user 55759 48/50 current_auc = 0.47619047619047616
User 55759 AUC after training: 0.4706959706959707
User 55759 does not improve AUC. Reverting changes.
Training on augumented user 129886 49/50 current_auc = 0.47619047619047616
User 129886 AUC after training: 0.47619047619047616
User 129886 does not improve AUC. Reverting changes.
[2024-12-02 18:37:35.898550] start test user 16351 109/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:36.655846] start test user 16351 109/568 recall augumented users by random, augumented_users = [39043, 34403, 62265, 132668, 28878, 8542, 87960, 82839, 11827, 37168, 80137, 108604, 33206, 120667, 43277, 111881, 108778, 59993, 4747, 21952, 41561, 58845, 42636, 123599, 4490, 81973, 100848, 105611, 56030, 45045, 1188, 93172, 130199, 115840, 110207, 42547, 56704, 79297, 42415, 127312, 25384, 117497, 10922, 16942, 46914, 116112, 15700, 52755, 11449, 42224]
[2024-12-02 18:37:36.678126] user = 16351 Cloud 109/568
[2024-12-02 18:37:36.707156] user = 16351 Local 109/568
[2024-12-02 18:37:36.847979] user = 16351 Local+ 109/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:39.086036] user = 16351 MPDA- 109/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6066666666666667
Training on augumented user 39043 0/50 current_auc = 0.6066666666666667
User 39043 AUC after training: 0.6066666666666667
User 39043 does not improve AUC. Reverting changes.
Training on augumented user 34403 1/50 current_auc = 0.6066666666666667
User 34403 AUC after training: 0.6033333333333334
User 34403 does not improve AUC. Reverting changes.
Training on augumented user 62265 2/50 current_auc = 0.6066666666666667
User 62265 AUC after training: 0.6066666666666667
User 62265 does not improve AUC. Reverting changes.
Training on augumented user 132668 3/50 current_auc = 0.6066666666666667
User 132668 AUC after training: 0.6033333333333334
User 132668 does not improve AUC. Reverting changes.
Training on augumented user 28878 4/50 current_auc = 0.6066666666666667
User 28878 AUC after training: 0.6066666666666667
User 28878 does not improve AUC. Reverting changes.
Training on augumented user 8542 5/50 current_auc = 0.6066666666666667
User 8542 AUC after training: 0.6066666666666667
User 8542 does not improve AUC. Reverting changes.
Training on augumented user 87960 6/50 current_auc = 0.6066666666666667
User 87960 AUC after training: 0.6066666666666667
User 87960 does not improve AUC. Reverting changes.
Training on augumented user 82839 7/50 current_auc = 0.6066666666666667
User 82839 AUC after training: 0.6066666666666667
User 82839 does not improve AUC. Reverting changes.
Training on augumented user 11827 8/50 current_auc = 0.6066666666666667
User 11827 AUC after training: 0.6033333333333334
User 11827 does not improve AUC. Reverting changes.
Training on augumented user 37168 9/50 current_auc = 0.6066666666666667
User 37168 AUC after training: 0.6
User 37168 does not improve AUC. Reverting changes.
Training on augumented user 80137 10/50 current_auc = 0.6066666666666667
User 80137 AUC after training: 0.6033333333333334
User 80137 does not improve AUC. Reverting changes.
Training on augumented user 108604 11/50 current_auc = 0.6066666666666667
User 108604 AUC after training: 0.6066666666666667
User 108604 does not improve AUC. Reverting changes.
Training on augumented user 33206 12/50 current_auc = 0.6066666666666667
User 33206 AUC after training: 0.6066666666666667
User 33206 does not improve AUC. Reverting changes.
Training on augumented user 120667 13/50 current_auc = 0.6066666666666667
User 120667 AUC after training: 0.6066666666666667
User 120667 does not improve AUC. Reverting changes.
Training on augumented user 43277 14/50 current_auc = 0.6066666666666667
User 43277 AUC after training: 0.6066666666666667
User 43277 does not improve AUC. Reverting changes.
Training on augumented user 111881 15/50 current_auc = 0.6066666666666667
User 111881 AUC after training: 0.6
User 111881 does not improve AUC. Reverting changes.
Training on augumented user 108778 16/50 current_auc = 0.6066666666666667
User 108778 AUC after training: 0.6066666666666667
User 108778 does not improve AUC. Reverting changes.
Training on augumented user 59993 17/50 current_auc = 0.6066666666666667
User 59993 AUC after training: 0.6033333333333334
User 59993 does not improve AUC. Reverting changes.
Training on augumented user 4747 18/50 current_auc = 0.6066666666666667
User 4747 AUC after training: 0.6066666666666667
User 4747 does not improve AUC. Reverting changes.
Training on augumented user 21952 19/50 current_auc = 0.6066666666666667
User 21952 AUC after training: 0.6066666666666667
User 21952 does not improve AUC. Reverting changes.
Training on augumented user 41561 20/50 current_auc = 0.6066666666666667
User 41561 AUC after training: 0.6033333333333334
User 41561 does not improve AUC. Reverting changes.
Training on augumented user 58845 21/50 current_auc = 0.6066666666666667
User 58845 AUC after training: 0.6033333333333334
User 58845 does not improve AUC. Reverting changes.
Training on augumented user 42636 22/50 current_auc = 0.6066666666666667
User 42636 AUC after training: 0.6033333333333334
User 42636 does not improve AUC. Reverting changes.
Training on augumented user 123599 23/50 current_auc = 0.6066666666666667
User 123599 AUC after training: 0.6033333333333334
User 123599 does not improve AUC. Reverting changes.
Training on augumented user 4490 24/50 current_auc = 0.6066666666666667
User 4490 AUC after training: 0.6066666666666667
User 4490 does not improve AUC. Reverting changes.
Training on augumented user 81973 25/50 current_auc = 0.6066666666666667
User 81973 AUC after training: 0.6066666666666667
User 81973 does not improve AUC. Reverting changes.
Training on augumented user 100848 26/50 current_auc = 0.6066666666666667
User 100848 AUC after training: 0.6066666666666667
User 100848 does not improve AUC. Reverting changes.
Training on augumented user 105611 27/50 current_auc = 0.6066666666666667
User 105611 AUC after training: 0.6033333333333333
User 105611 does not improve AUC. Reverting changes.
Training on augumented user 56030 28/50 current_auc = 0.6066666666666667
User 56030 AUC after training: 0.6066666666666667
User 56030 does not improve AUC. Reverting changes.
Training on augumented user 45045 29/50 current_auc = 0.6066666666666667
User 45045 AUC after training: 0.6066666666666667
User 45045 does not improve AUC. Reverting changes.
Training on augumented user 1188 30/50 current_auc = 0.6066666666666667
User 1188 AUC after training: 0.6066666666666667
User 1188 does not improve AUC. Reverting changes.
Training on augumented user 93172 31/50 current_auc = 0.6066666666666667
User 93172 AUC after training: 0.6066666666666667
User 93172 does not improve AUC. Reverting changes.
Training on augumented user 130199 32/50 current_auc = 0.6066666666666667
User 130199 AUC after training: 0.6066666666666667
User 130199 does not improve AUC. Reverting changes.
Training on augumented user 115840 33/50 current_auc = 0.6066666666666667
User 115840 AUC after training: 0.6066666666666667
User 115840 does not improve AUC. Reverting changes.
Training on augumented user 110207 34/50 current_auc = 0.6066666666666667
User 110207 AUC after training: 0.6066666666666667
User 110207 does not improve AUC. Reverting changes.
Training on augumented user 42547 35/50 current_auc = 0.6066666666666667
User 42547 AUC after training: 0.6066666666666667
User 42547 does not improve AUC. Reverting changes.
Training on augumented user 56704 36/50 current_auc = 0.6066666666666667
User 56704 AUC after training: 0.6033333333333334
User 56704 does not improve AUC. Reverting changes.
Training on augumented user 79297 37/50 current_auc = 0.6066666666666667
User 79297 AUC after training: 0.6066666666666667
User 79297 does not improve AUC. Reverting changes.
Training on augumented user 42415 38/50 current_auc = 0.6066666666666667
User 42415 AUC after training: 0.6033333333333334
User 42415 does not improve AUC. Reverting changes.
Training on augumented user 127312 39/50 current_auc = 0.6066666666666667
User 127312 AUC after training: 0.6066666666666667
User 127312 does not improve AUC. Reverting changes.
Training on augumented user 25384 40/50 current_auc = 0.6066666666666667
User 25384 AUC after training: 0.6066666666666667
User 25384 does not improve AUC. Reverting changes.
Training on augumented user 117497 41/50 current_auc = 0.6066666666666667
User 117497 AUC after training: 0.6066666666666667
User 117497 does not improve AUC. Reverting changes.
Training on augumented user 10922 42/50 current_auc = 0.6066666666666667
User 10922 AUC after training: 0.6066666666666667
User 10922 does not improve AUC. Reverting changes.
Training on augumented user 16942 43/50 current_auc = 0.6066666666666667
User 16942 AUC after training: 0.6066666666666667
User 16942 does not improve AUC. Reverting changes.
Training on augumented user 46914 44/50 current_auc = 0.6066666666666667
User 46914 AUC after training: 0.6066666666666667
User 46914 does not improve AUC. Reverting changes.
Training on augumented user 116112 45/50 current_auc = 0.6066666666666667
User 116112 AUC after training: 0.6066666666666667
User 116112 does not improve AUC. Reverting changes.
Training on augumented user 15700 46/50 current_auc = 0.6066666666666667
User 15700 AUC after training: 0.6066666666666667
User 15700 does not improve AUC. Reverting changes.
Training on augumented user 52755 47/50 current_auc = 0.6066666666666667
User 52755 AUC after training: 0.6033333333333334
User 52755 does not improve AUC. Reverting changes.
Training on augumented user 11449 48/50 current_auc = 0.6066666666666667
User 11449 AUC after training: 0.6066666666666667
User 11449 does not improve AUC. Reverting changes.
Training on augumented user 42224 49/50 current_auc = 0.6066666666666667
User 42224 AUC after training: 0.6066666666666667
User 42224 does not improve AUC. Reverting changes.
[2024-12-02 18:38:09.093609] start test user 16370 110/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:09.502732] start test user 16370 110/568 recall augumented users by random, augumented_users = [32959, 91834, 111905, 36210, 89536, 130943, 73616, 113743, 62401, 45190, 39953, 38638, 10551, 88750, 130711, 95876, 76921, 30942, 136676, 64211, 93432, 104406, 57688, 134954, 72951, 92120, 46752, 67675, 84627, 113662, 135081, 7884, 62100, 84494, 5276, 117641, 23917, 14119, 115351, 77755, 120423, 72054, 53302, 11723, 103871, 100692, 135652, 68241, 11742, 37008]
[2024-12-02 18:38:09.517976] user = 16370 Cloud 110/568
[2024-12-02 18:38:09.530616] user = 16370 Local 110/568
[2024-12-02 18:38:09.574326] user = 16370 Local+ 110/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:12.032255] user = 16370 MPDA- 110/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666667
Training on augumented user 32959 0/50 current_auc = 0.6666666666666667
User 32959 AUC after training: 0.6666666666666667
User 32959 does not improve AUC. Reverting changes.
Training on augumented user 91834 1/50 current_auc = 0.6666666666666667
User 91834 AUC after training: 0.6666666666666667
User 91834 does not improve AUC. Reverting changes.
Training on augumented user 111905 2/50 current_auc = 0.6666666666666667
User 111905 AUC after training: 0.6666666666666667
User 111905 does not improve AUC. Reverting changes.
Training on augumented user 36210 3/50 current_auc = 0.6666666666666667
User 36210 AUC after training: 0.6666666666666667
User 36210 does not improve AUC. Reverting changes.
Training on augumented user 89536 4/50 current_auc = 0.6666666666666667
User 89536 AUC after training: 0.6388888888888888
User 89536 does not improve AUC. Reverting changes.
Training on augumented user 130943 5/50 current_auc = 0.6666666666666667
User 130943 AUC after training: 0.6666666666666667
User 130943 does not improve AUC. Reverting changes.
Training on augumented user 73616 6/50 current_auc = 0.6666666666666667
User 73616 AUC after training: 0.6574074074074074
User 73616 does not improve AUC. Reverting changes.
Training on augumented user 113743 7/50 current_auc = 0.6666666666666667
User 113743 AUC after training: 0.6574074074074074
User 113743 does not improve AUC. Reverting changes.
Training on augumented user 62401 8/50 current_auc = 0.6666666666666667
User 62401 AUC after training: 0.6574074074074074
User 62401 does not improve AUC. Reverting changes.
Training on augumented user 45190 9/50 current_auc = 0.6666666666666667
User 45190 AUC after training: 0.6574074074074074
User 45190 does not improve AUC. Reverting changes.
Training on augumented user 39953 10/50 current_auc = 0.6666666666666667
User 39953 AUC after training: 0.6666666666666667
User 39953 does not improve AUC. Reverting changes.
Training on augumented user 38638 11/50 current_auc = 0.6666666666666667
User 38638 AUC after training: 0.6574074074074074
User 38638 does not improve AUC. Reverting changes.
Training on augumented user 10551 12/50 current_auc = 0.6666666666666667
User 10551 AUC after training: 0.6574074074074074
User 10551 does not improve AUC. Reverting changes.
Training on augumented user 88750 13/50 current_auc = 0.6666666666666667
User 88750 AUC after training: 0.6574074074074074
User 88750 does not improve AUC. Reverting changes.
Training on augumented user 130711 14/50 current_auc = 0.6666666666666667
User 130711 AUC after training: 0.6666666666666667
User 130711 does not improve AUC. Reverting changes.
Training on augumented user 95876 15/50 current_auc = 0.6666666666666667
User 95876 AUC after training: 0.6666666666666667
User 95876 does not improve AUC. Reverting changes.
Training on augumented user 76921 16/50 current_auc = 0.6666666666666667
User 76921 AUC after training: 0.6574074074074074
User 76921 does not improve AUC. Reverting changes.
Training on augumented user 30942 17/50 current_auc = 0.6666666666666667
User 30942 AUC after training: 0.6574074074074074
User 30942 does not improve AUC. Reverting changes.
Training on augumented user 136676 18/50 current_auc = 0.6666666666666667
User 136676 AUC after training: 0.6666666666666667
User 136676 does not improve AUC. Reverting changes.
Training on augumented user 64211 19/50 current_auc = 0.6666666666666667
User 64211 AUC after training: 0.6666666666666667
User 64211 does not improve AUC. Reverting changes.
Training on augumented user 93432 20/50 current_auc = 0.6666666666666667
User 93432 AUC after training: 0.6666666666666667
User 93432 does not improve AUC. Reverting changes.
Training on augumented user 104406 21/50 current_auc = 0.6666666666666667
User 104406 AUC after training: 0.6666666666666667
User 104406 does not improve AUC. Reverting changes.
Training on augumented user 57688 22/50 current_auc = 0.6666666666666667
User 57688 AUC after training: 0.6574074074074074
User 57688 does not improve AUC. Reverting changes.
Training on augumented user 134954 23/50 current_auc = 0.6666666666666667
User 134954 AUC after training: 0.6574074074074074
User 134954 does not improve AUC. Reverting changes.
Training on augumented user 72951 24/50 current_auc = 0.6666666666666667
User 72951 AUC after training: 0.6666666666666667
User 72951 does not improve AUC. Reverting changes.
Training on augumented user 92120 25/50 current_auc = 0.6666666666666667
User 92120 AUC after training: 0.6666666666666667
User 92120 does not improve AUC. Reverting changes.
Training on augumented user 46752 26/50 current_auc = 0.6666666666666667
User 46752 AUC after training: 0.6574074074074074
User 46752 does not improve AUC. Reverting changes.
Training on augumented user 67675 27/50 current_auc = 0.6666666666666667
User 67675 AUC after training: 0.6666666666666667
User 67675 does not improve AUC. Reverting changes.
Training on augumented user 84627 28/50 current_auc = 0.6666666666666667
User 84627 AUC after training: 0.6574074074074074
User 84627 does not improve AUC. Reverting changes.
Training on augumented user 113662 29/50 current_auc = 0.6666666666666667
User 113662 AUC after training: 0.6574074074074074
User 113662 does not improve AUC. Reverting changes.
Training on augumented user 135081 30/50 current_auc = 0.6666666666666667
User 135081 AUC after training: 0.6666666666666667
User 135081 does not improve AUC. Reverting changes.
Training on augumented user 7884 31/50 current_auc = 0.6666666666666667
User 7884 AUC after training: 0.6574074074074074
User 7884 does not improve AUC. Reverting changes.
Training on augumented user 62100 32/50 current_auc = 0.6666666666666667
User 62100 AUC after training: 0.6666666666666667
User 62100 does not improve AUC. Reverting changes.
Training on augumented user 84494 33/50 current_auc = 0.6666666666666667
User 84494 AUC after training: 0.6574074074074074
User 84494 does not improve AUC. Reverting changes.
Training on augumented user 5276 34/50 current_auc = 0.6666666666666667
User 5276 AUC after training: 0.6666666666666667
User 5276 does not improve AUC. Reverting changes.
Training on augumented user 117641 35/50 current_auc = 0.6666666666666667
User 117641 AUC after training: 0.6666666666666667
User 117641 does not improve AUC. Reverting changes.
Training on augumented user 23917 36/50 current_auc = 0.6666666666666667
User 23917 AUC after training: 0.6574074074074074
User 23917 does not improve AUC. Reverting changes.
Training on augumented user 14119 37/50 current_auc = 0.6666666666666667
User 14119 AUC after training: 0.6574074074074074
User 14119 does not improve AUC. Reverting changes.
Training on augumented user 115351 38/50 current_auc = 0.6666666666666667
User 115351 AUC after training: 0.638888888888889
User 115351 does not improve AUC. Reverting changes.
Training on augumented user 77755 39/50 current_auc = 0.6666666666666667
User 77755 AUC after training: 0.6666666666666667
User 77755 does not improve AUC. Reverting changes.
Training on augumented user 120423 40/50 current_auc = 0.6666666666666667
User 120423 AUC after training: 0.638888888888889
User 120423 does not improve AUC. Reverting changes.
Training on augumented user 72054 41/50 current_auc = 0.6666666666666667
User 72054 AUC after training: 0.6574074074074074
User 72054 does not improve AUC. Reverting changes.
Training on augumented user 53302 42/50 current_auc = 0.6666666666666667
User 53302 AUC after training: 0.6574074074074074
User 53302 does not improve AUC. Reverting changes.
Training on augumented user 11723 43/50 current_auc = 0.6666666666666667
User 11723 AUC after training: 0.6574074074074074
User 11723 does not improve AUC. Reverting changes.
Training on augumented user 103871 44/50 current_auc = 0.6666666666666667
User 103871 AUC after training: 0.6574074074074074
User 103871 does not improve AUC. Reverting changes.
Training on augumented user 100692 45/50 current_auc = 0.6666666666666667
User 100692 AUC after training: 0.6574074074074074
User 100692 does not improve AUC. Reverting changes.
Training on augumented user 135652 46/50 current_auc = 0.6666666666666667
User 135652 AUC after training: 0.6481481481481481
User 135652 does not improve AUC. Reverting changes.
Training on augumented user 68241 47/50 current_auc = 0.6666666666666667
User 68241 AUC after training: 0.6574074074074074
User 68241 does not improve AUC. Reverting changes.
Training on augumented user 11742 48/50 current_auc = 0.6666666666666667
User 11742 AUC after training: 0.6574074074074074
User 11742 does not improve AUC. Reverting changes.
Training on augumented user 37008 49/50 current_auc = 0.6666666666666667
User 37008 AUC after training: 0.6666666666666667
User 37008 does not improve AUC. Reverting changes.
[2024-12-02 18:38:37.053333] start test user 16398 111/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:37.523075] start test user 16398 111/568 recall augumented users by random, augumented_users = [130948, 30717, 11568, 69416, 69288, 94123, 51022, 71193, 108014, 41874, 131550, 69732, 85507, 122548, 21852, 16447, 92919, 92065, 133140, 112387, 64437, 97550, 122999, 132779, 48539, 35207, 76141, 137845, 87935, 1288, 84987, 15533, 45547, 84652, 90599, 71424, 113679, 47759, 40935, 112136, 130478, 17434, 72396, 119390, 111222, 115797, 9631, 76087, 21218, 54233]
[2024-12-02 18:38:37.539252] user = 16398 Cloud 111/568
[2024-12-02 18:38:37.549785] user = 16398 Local 111/568
[2024-12-02 18:38:37.676207] user = 16398 Local+ 111/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:40.758621] user = 16398 MPDA- 111/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8605042016806723
Training on augumented user 130948 0/50 current_auc = 0.8605042016806723
User 130948 AUC after training: 0.8605042016806723
User 130948 does not improve AUC. Reverting changes.
Training on augumented user 30717 1/50 current_auc = 0.8605042016806723
User 30717 AUC after training: 0.8605042016806723
User 30717 does not improve AUC. Reverting changes.
Training on augumented user 11568 2/50 current_auc = 0.8605042016806723
User 11568 AUC after training: 0.8621848739495799
User 11568 improves AUC. Keeping the model.
Training on augumented user 69416 3/50 current_auc = 0.8621848739495799
User 69416 AUC after training: 0.8638655462184874
User 69416 improves AUC. Keeping the model.
Training on augumented user 69288 4/50 current_auc = 0.8638655462184874
User 69288 AUC after training: 0.8638655462184874
User 69288 does not improve AUC. Reverting changes.
Training on augumented user 94123 5/50 current_auc = 0.8638655462184874
User 94123 AUC after training: 0.8638655462184874
User 94123 does not improve AUC. Reverting changes.
Training on augumented user 51022 6/50 current_auc = 0.8638655462184874
User 51022 AUC after training: 0.8638655462184874
User 51022 does not improve AUC. Reverting changes.
Training on augumented user 71193 7/50 current_auc = 0.8638655462184874
User 71193 AUC after training: 0.8621848739495799
User 71193 does not improve AUC. Reverting changes.
Training on augumented user 108014 8/50 current_auc = 0.8638655462184874
User 108014 AUC after training: 0.8638655462184874
User 108014 does not improve AUC. Reverting changes.
Training on augumented user 41874 9/50 current_auc = 0.8638655462184874
User 41874 AUC after training: 0.8638655462184874
User 41874 does not improve AUC. Reverting changes.
Training on augumented user 131550 10/50 current_auc = 0.8638655462184874
User 131550 AUC after training: 0.8621848739495799
User 131550 does not improve AUC. Reverting changes.
Training on augumented user 69732 11/50 current_auc = 0.8638655462184874
User 69732 AUC after training: 0.8605042016806723
User 69732 does not improve AUC. Reverting changes.
Training on augumented user 85507 12/50 current_auc = 0.8638655462184874
User 85507 AUC after training: 0.8621848739495799
User 85507 does not improve AUC. Reverting changes.
Training on augumented user 122548 13/50 current_auc = 0.8638655462184874
User 122548 AUC after training: 0.8638655462184874
User 122548 does not improve AUC. Reverting changes.
Training on augumented user 21852 14/50 current_auc = 0.8638655462184874
User 21852 AUC after training: 0.8638655462184874
User 21852 does not improve AUC. Reverting changes.
Training on augumented user 16447 15/50 current_auc = 0.8638655462184874
User 16447 AUC after training: 0.8705882352941177
User 16447 improves AUC. Keeping the model.
Training on augumented user 92919 16/50 current_auc = 0.8705882352941177
User 92919 AUC after training: 0.8638655462184874
User 92919 does not improve AUC. Reverting changes.
Training on augumented user 92065 17/50 current_auc = 0.8705882352941177
User 92065 AUC after training: 0.8705882352941177
User 92065 does not improve AUC. Reverting changes.
Training on augumented user 133140 18/50 current_auc = 0.8705882352941177
User 133140 AUC after training: 0.8705882352941177
User 133140 does not improve AUC. Reverting changes.
Training on augumented user 112387 19/50 current_auc = 0.8705882352941177
User 112387 AUC after training: 0.8705882352941177
User 112387 does not improve AUC. Reverting changes.
Training on augumented user 64437 20/50 current_auc = 0.8705882352941177
User 64437 AUC after training: 0.8705882352941177
User 64437 does not improve AUC. Reverting changes.
Training on augumented user 97550 21/50 current_auc = 0.8705882352941177
User 97550 AUC after training: 0.8672268907563025
User 97550 does not improve AUC. Reverting changes.
Training on augumented user 122999 22/50 current_auc = 0.8705882352941177
User 122999 AUC after training: 0.8705882352941177
User 122999 does not improve AUC. Reverting changes.
Training on augumented user 132779 23/50 current_auc = 0.8705882352941177
User 132779 AUC after training: 0.8705882352941177
User 132779 does not improve AUC. Reverting changes.
Training on augumented user 48539 24/50 current_auc = 0.8705882352941177
User 48539 AUC after training: 0.8705882352941177
User 48539 does not improve AUC. Reverting changes.
Training on augumented user 35207 25/50 current_auc = 0.8705882352941177
User 35207 AUC after training: 0.8705882352941177
User 35207 does not improve AUC. Reverting changes.
Training on augumented user 76141 26/50 current_auc = 0.8705882352941177
User 76141 AUC after training: 0.8705882352941177
User 76141 does not improve AUC. Reverting changes.
Training on augumented user 137845 27/50 current_auc = 0.8705882352941177
User 137845 AUC after training: 0.8689075630252101
User 137845 does not improve AUC. Reverting changes.
Training on augumented user 87935 28/50 current_auc = 0.8705882352941177
User 87935 AUC after training: 0.8705882352941177
User 87935 does not improve AUC. Reverting changes.
Training on augumented user 1288 29/50 current_auc = 0.8705882352941177
User 1288 AUC after training: 0.8705882352941177
User 1288 does not improve AUC. Reverting changes.
Training on augumented user 84987 30/50 current_auc = 0.8705882352941177
User 84987 AUC after training: 0.8705882352941177
User 84987 does not improve AUC. Reverting changes.
Training on augumented user 15533 31/50 current_auc = 0.8705882352941177
User 15533 AUC after training: 0.8705882352941177
User 15533 does not improve AUC. Reverting changes.
Training on augumented user 45547 32/50 current_auc = 0.8705882352941177
User 45547 AUC after training: 0.8705882352941177
User 45547 does not improve AUC. Reverting changes.
Training on augumented user 84652 33/50 current_auc = 0.8705882352941177
User 84652 AUC after training: 0.8705882352941177
User 84652 does not improve AUC. Reverting changes.
Training on augumented user 90599 34/50 current_auc = 0.8705882352941177
User 90599 AUC after training: 0.8705882352941177
User 90599 does not improve AUC. Reverting changes.
Training on augumented user 71424 35/50 current_auc = 0.8705882352941177
User 71424 AUC after training: 0.8705882352941177
User 71424 does not improve AUC. Reverting changes.
Training on augumented user 113679 36/50 current_auc = 0.8705882352941177
User 113679 AUC after training: 0.8705882352941177
User 113679 does not improve AUC. Reverting changes.
Training on augumented user 47759 37/50 current_auc = 0.8705882352941177
User 47759 AUC after training: 0.8705882352941177
User 47759 does not improve AUC. Reverting changes.
Training on augumented user 40935 38/50 current_auc = 0.8705882352941177
User 40935 AUC after training: 0.8705882352941177
User 40935 does not improve AUC. Reverting changes.
Training on augumented user 112136 39/50 current_auc = 0.8705882352941177
User 112136 AUC after training: 0.8705882352941177
User 112136 does not improve AUC. Reverting changes.
Training on augumented user 130478 40/50 current_auc = 0.8705882352941177
User 130478 AUC after training: 0.8705882352941177
User 130478 does not improve AUC. Reverting changes.
Training on augumented user 17434 41/50 current_auc = 0.8705882352941177
User 17434 AUC after training: 0.8705882352941177
User 17434 does not improve AUC. Reverting changes.
Training on augumented user 72396 42/50 current_auc = 0.8705882352941177
User 72396 AUC after training: 0.8705882352941177
User 72396 does not improve AUC. Reverting changes.
Training on augumented user 119390 43/50 current_auc = 0.8705882352941177
User 119390 AUC after training: 0.8705882352941177
User 119390 does not improve AUC. Reverting changes.
Training on augumented user 111222 44/50 current_auc = 0.8705882352941177
User 111222 AUC after training: 0.8672268907563025
User 111222 does not improve AUC. Reverting changes.
Training on augumented user 115797 45/50 current_auc = 0.8705882352941177
User 115797 AUC after training: 0.8705882352941177
User 115797 does not improve AUC. Reverting changes.
Training on augumented user 9631 46/50 current_auc = 0.8705882352941177
User 9631 AUC after training: 0.8705882352941177
User 9631 does not improve AUC. Reverting changes.
Training on augumented user 76087 47/50 current_auc = 0.8705882352941177
User 76087 AUC after training: 0.8705882352941177
User 76087 does not improve AUC. Reverting changes.
Training on augumented user 21218 48/50 current_auc = 0.8705882352941177
User 21218 AUC after training: 0.8705882352941177
User 21218 does not improve AUC. Reverting changes.
Training on augumented user 54233 49/50 current_auc = 0.8705882352941177
User 54233 AUC after training: 0.8705882352941177
User 54233 does not improve AUC. Reverting changes.
[2024-12-02 18:39:10.713994] start test user 16404 112/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:11.142122] start test user 16404 112/568 recall augumented users by random, augumented_users = [95831, 6659, 100319, 89678, 70519, 124236, 48149, 123818, 52285, 91128, 113666, 93936, 85935, 7381, 43304, 104172, 29805, 94184, 119382, 99552, 83011, 88292, 67660, 56410, 28344, 101133, 30174, 67065, 95584, 43318, 39207, 58745, 100618, 53826, 129302, 51940, 120772, 71253, 39918, 56762, 97221, 5581, 102297, 136284, 131534, 79921, 98305, 79150, 91515, 97742]
[2024-12-02 18:39:11.156805] user = 16404 Cloud 112/568
[2024-12-02 18:39:11.178511] user = 16404 Local 112/568
[2024-12-02 18:39:11.252136] user = 16404 Local+ 112/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:13.200789] user = 16404 MPDA- 112/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8685714285714285
Training on augumented user 95831 0/50 current_auc = 0.8685714285714285
User 95831 AUC after training: 0.8685714285714285
User 95831 does not improve AUC. Reverting changes.
Training on augumented user 6659 1/50 current_auc = 0.8685714285714285
User 6659 AUC after training: 0.8685714285714285
User 6659 does not improve AUC. Reverting changes.
Training on augumented user 100319 2/50 current_auc = 0.8685714285714285
User 100319 AUC after training: 0.8685714285714285
User 100319 does not improve AUC. Reverting changes.
Training on augumented user 89678 3/50 current_auc = 0.8685714285714285
User 89678 AUC after training: 0.8685714285714285
User 89678 does not improve AUC. Reverting changes.
Training on augumented user 70519 4/50 current_auc = 0.8685714285714285
User 70519 AUC after training: 0.8685714285714285
User 70519 does not improve AUC. Reverting changes.
Training on augumented user 124236 5/50 current_auc = 0.8685714285714285
User 124236 AUC after training: 0.8685714285714285
User 124236 does not improve AUC. Reverting changes.
Training on augumented user 48149 6/50 current_auc = 0.8685714285714285
User 48149 AUC after training: 0.8685714285714285
User 48149 does not improve AUC. Reverting changes.
Training on augumented user 123818 7/50 current_auc = 0.8685714285714285
User 123818 AUC after training: 0.8685714285714285
User 123818 does not improve AUC. Reverting changes.
Training on augumented user 52285 8/50 current_auc = 0.8685714285714285
User 52285 AUC after training: 0.8685714285714285
User 52285 does not improve AUC. Reverting changes.
Training on augumented user 91128 9/50 current_auc = 0.8685714285714285
User 91128 AUC after training: 0.8685714285714285
User 91128 does not improve AUC. Reverting changes.
Training on augumented user 113666 10/50 current_auc = 0.8685714285714285
User 113666 AUC after training: 0.8666666666666667
User 113666 does not improve AUC. Reverting changes.
Training on augumented user 93936 11/50 current_auc = 0.8685714285714285
User 93936 AUC after training: 0.8685714285714285
User 93936 does not improve AUC. Reverting changes.
Training on augumented user 85935 12/50 current_auc = 0.8685714285714285
User 85935 AUC after training: 0.8685714285714285
User 85935 does not improve AUC. Reverting changes.
Training on augumented user 7381 13/50 current_auc = 0.8685714285714285
User 7381 AUC after training: 0.8685714285714285
User 7381 does not improve AUC. Reverting changes.
Training on augumented user 43304 14/50 current_auc = 0.8685714285714285
User 43304 AUC after training: 0.8666666666666667
User 43304 does not improve AUC. Reverting changes.
Training on augumented user 104172 15/50 current_auc = 0.8685714285714285
User 104172 AUC after training: 0.8685714285714285
User 104172 does not improve AUC. Reverting changes.
Training on augumented user 29805 16/50 current_auc = 0.8685714285714285
User 29805 AUC after training: 0.8666666666666667
User 29805 does not improve AUC. Reverting changes.
Training on augumented user 94184 17/50 current_auc = 0.8685714285714285
User 94184 AUC after training: 0.8685714285714285
User 94184 does not improve AUC. Reverting changes.
Training on augumented user 119382 18/50 current_auc = 0.8685714285714285
User 119382 AUC after training: 0.8685714285714285
User 119382 does not improve AUC. Reverting changes.
Training on augumented user 99552 19/50 current_auc = 0.8685714285714285
User 99552 AUC after training: 0.8666666666666667
User 99552 does not improve AUC. Reverting changes.
Training on augumented user 83011 20/50 current_auc = 0.8685714285714285
User 83011 AUC after training: 0.8685714285714285
User 83011 does not improve AUC. Reverting changes.
Training on augumented user 88292 21/50 current_auc = 0.8685714285714285
User 88292 AUC after training: 0.8685714285714285
User 88292 does not improve AUC. Reverting changes.
Training on augumented user 67660 22/50 current_auc = 0.8685714285714285
User 67660 AUC after training: 0.8685714285714285
User 67660 does not improve AUC. Reverting changes.
Training on augumented user 56410 23/50 current_auc = 0.8685714285714285
User 56410 AUC after training: 0.8685714285714285
User 56410 does not improve AUC. Reverting changes.
Training on augumented user 28344 24/50 current_auc = 0.8685714285714285
User 28344 AUC after training: 0.8685714285714285
User 28344 does not improve AUC. Reverting changes.
Training on augumented user 101133 25/50 current_auc = 0.8685714285714285
User 101133 AUC after training: 0.8666666666666667
User 101133 does not improve AUC. Reverting changes.
Training on augumented user 30174 26/50 current_auc = 0.8685714285714285
User 30174 AUC after training: 0.8685714285714285
User 30174 does not improve AUC. Reverting changes.
Training on augumented user 67065 27/50 current_auc = 0.8685714285714285
User 67065 AUC after training: 0.8685714285714285
User 67065 does not improve AUC. Reverting changes.
Training on augumented user 95584 28/50 current_auc = 0.8685714285714285
User 95584 AUC after training: 0.8685714285714285
User 95584 does not improve AUC. Reverting changes.
Training on augumented user 43318 29/50 current_auc = 0.8685714285714285
User 43318 AUC after training: 0.8685714285714285
User 43318 does not improve AUC. Reverting changes.
Training on augumented user 39207 30/50 current_auc = 0.8685714285714285
User 39207 AUC after training: 0.8685714285714285
User 39207 does not improve AUC. Reverting changes.
Training on augumented user 58745 31/50 current_auc = 0.8685714285714285
User 58745 AUC after training: 0.8685714285714285
User 58745 does not improve AUC. Reverting changes.
Training on augumented user 100618 32/50 current_auc = 0.8685714285714285
User 100618 AUC after training: 0.8666666666666667
User 100618 does not improve AUC. Reverting changes.
Training on augumented user 53826 33/50 current_auc = 0.8685714285714285
User 53826 AUC after training: 0.8666666666666667
User 53826 does not improve AUC. Reverting changes.
Training on augumented user 129302 34/50 current_auc = 0.8685714285714285
User 129302 AUC after training: 0.8666666666666667
User 129302 does not improve AUC. Reverting changes.
Training on augumented user 51940 35/50 current_auc = 0.8685714285714285
User 51940 AUC after training: 0.8685714285714285
User 51940 does not improve AUC. Reverting changes.
Training on augumented user 120772 36/50 current_auc = 0.8685714285714285
User 120772 AUC after training: 0.8685714285714285
User 120772 does not improve AUC. Reverting changes.
Training on augumented user 71253 37/50 current_auc = 0.8685714285714285
User 71253 AUC after training: 0.8685714285714285
User 71253 does not improve AUC. Reverting changes.
Training on augumented user 39918 38/50 current_auc = 0.8685714285714285
User 39918 AUC after training: 0.8685714285714285
User 39918 does not improve AUC. Reverting changes.
Training on augumented user 56762 39/50 current_auc = 0.8685714285714285
User 56762 AUC after training: 0.8685714285714285
User 56762 does not improve AUC. Reverting changes.
Training on augumented user 97221 40/50 current_auc = 0.8685714285714285
User 97221 AUC after training: 0.8685714285714285
User 97221 does not improve AUC. Reverting changes.
Training on augumented user 5581 41/50 current_auc = 0.8685714285714285
User 5581 AUC after training: 0.8685714285714285
User 5581 does not improve AUC. Reverting changes.
Training on augumented user 102297 42/50 current_auc = 0.8685714285714285
User 102297 AUC after training: 0.8685714285714285
User 102297 does not improve AUC. Reverting changes.
Training on augumented user 136284 43/50 current_auc = 0.8685714285714285
User 136284 AUC after training: 0.8685714285714285
User 136284 does not improve AUC. Reverting changes.
Training on augumented user 131534 44/50 current_auc = 0.8685714285714285
User 131534 AUC after training: 0.8685714285714285
User 131534 does not improve AUC. Reverting changes.
Training on augumented user 79921 45/50 current_auc = 0.8685714285714285
User 79921 AUC after training: 0.8685714285714285
User 79921 does not improve AUC. Reverting changes.
Training on augumented user 98305 46/50 current_auc = 0.8685714285714285
User 98305 AUC after training: 0.8685714285714285
User 98305 does not improve AUC. Reverting changes.
Training on augumented user 79150 47/50 current_auc = 0.8685714285714285
User 79150 AUC after training: 0.8666666666666667
User 79150 does not improve AUC. Reverting changes.
Training on augumented user 91515 48/50 current_auc = 0.8685714285714285
User 91515 AUC after training: 0.8685714285714285
User 91515 does not improve AUC. Reverting changes.
Training on augumented user 97742 49/50 current_auc = 0.8685714285714285
User 97742 AUC after training: 0.8685714285714285
User 97742 does not improve AUC. Reverting changes.
[2024-12-02 18:39:39.025468] start test user 16462 113/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:39.660703] start test user 16462 113/568 recall augumented users by random, augumented_users = [75718, 104825, 45381, 43605, 24130, 14682, 67554, 138313, 70339, 68514, 66987, 24707, 43204, 43620, 30812, 72784, 90406, 55111, 122312, 7455, 18593, 33238, 41003, 70795, 57820, 23413, 95267, 18712, 19988, 18350, 103969, 21609, 3895, 58869, 21217, 94083, 70918, 121929, 80145, 91121, 19199, 49838, 136629, 106799, 70802, 24246, 92720, 130732, 70623, 17531]
[2024-12-02 18:39:39.688423] user = 16462 Cloud 113/568
[2024-12-02 18:39:39.705952] user = 16462 Local 113/568
[2024-12-02 18:39:39.775577] user = 16462 Local+ 113/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:42.653838] user = 16462 MPDA- 113/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6547619047619048
Training on augumented user 75718 0/50 current_auc = 0.6547619047619048
User 75718 AUC after training: 0.6547619047619048
User 75718 does not improve AUC. Reverting changes.
Training on augumented user 104825 1/50 current_auc = 0.6547619047619048
User 104825 AUC after training: 0.6523809523809524
User 104825 does not improve AUC. Reverting changes.
Training on augumented user 45381 2/50 current_auc = 0.6547619047619048
User 45381 AUC after training: 0.6547619047619048
User 45381 does not improve AUC. Reverting changes.
Training on augumented user 43605 3/50 current_auc = 0.6547619047619048
User 43605 AUC after training: 0.6547619047619048
User 43605 does not improve AUC. Reverting changes.
Training on augumented user 24130 4/50 current_auc = 0.6547619047619048
User 24130 AUC after training: 0.6547619047619048
User 24130 does not improve AUC. Reverting changes.
Training on augumented user 14682 5/50 current_auc = 0.6547619047619048
User 14682 AUC after training: 0.6547619047619048
User 14682 does not improve AUC. Reverting changes.
Training on augumented user 67554 6/50 current_auc = 0.6547619047619048
User 67554 AUC after training: 0.6547619047619048
User 67554 does not improve AUC. Reverting changes.
Training on augumented user 138313 7/50 current_auc = 0.6547619047619048
User 138313 AUC after training: 0.6547619047619048
User 138313 does not improve AUC. Reverting changes.
Training on augumented user 70339 8/50 current_auc = 0.6547619047619048
User 70339 AUC after training: 0.6523809523809524
User 70339 does not improve AUC. Reverting changes.
Training on augumented user 68514 9/50 current_auc = 0.6547619047619048
User 68514 AUC after training: 0.6595238095238095
User 68514 improves AUC. Keeping the model.
Training on augumented user 66987 10/50 current_auc = 0.6595238095238095
User 66987 AUC after training: 0.6571428571428571
User 66987 does not improve AUC. Reverting changes.
Training on augumented user 24707 11/50 current_auc = 0.6595238095238095
User 24707 AUC after training: 0.6619047619047619
User 24707 improves AUC. Keeping the model.
Training on augumented user 43204 12/50 current_auc = 0.6619047619047619
User 43204 AUC after training: 0.6571428571428571
User 43204 does not improve AUC. Reverting changes.
Training on augumented user 43620 13/50 current_auc = 0.6619047619047619
User 43620 AUC after training: 0.6619047619047619
User 43620 does not improve AUC. Reverting changes.
Training on augumented user 30812 14/50 current_auc = 0.6619047619047619
User 30812 AUC after training: 0.6619047619047619
User 30812 does not improve AUC. Reverting changes.
Training on augumented user 72784 15/50 current_auc = 0.6619047619047619
User 72784 AUC after training: 0.6595238095238095
User 72784 does not improve AUC. Reverting changes.
Training on augumented user 90406 16/50 current_auc = 0.6619047619047619
User 90406 AUC after training: 0.6619047619047619
User 90406 does not improve AUC. Reverting changes.
Training on augumented user 55111 17/50 current_auc = 0.6619047619047619
User 55111 AUC after training: 0.6619047619047619
User 55111 does not improve AUC. Reverting changes.
Training on augumented user 122312 18/50 current_auc = 0.6619047619047619
User 122312 AUC after training: 0.6571428571428571
User 122312 does not improve AUC. Reverting changes.
Training on augumented user 7455 19/50 current_auc = 0.6619047619047619
User 7455 AUC after training: 0.661904761904762
User 7455 improves AUC. Keeping the model.
Training on augumented user 18593 20/50 current_auc = 0.661904761904762
User 18593 AUC after training: 0.6595238095238095
User 18593 does not improve AUC. Reverting changes.
Training on augumented user 33238 21/50 current_auc = 0.661904761904762
User 33238 AUC after training: 0.6571428571428571
User 33238 does not improve AUC. Reverting changes.
Training on augumented user 41003 22/50 current_auc = 0.661904761904762
User 41003 AUC after training: 0.661904761904762
User 41003 does not improve AUC. Reverting changes.
Training on augumented user 70795 23/50 current_auc = 0.661904761904762
User 70795 AUC after training: 0.6642857142857144
User 70795 improves AUC. Keeping the model.
Training on augumented user 57820 24/50 current_auc = 0.6642857142857144
User 57820 AUC after training: 0.6642857142857143
User 57820 does not improve AUC. Reverting changes.
Training on augumented user 23413 25/50 current_auc = 0.6642857142857144
User 23413 AUC after training: 0.6571428571428571
User 23413 does not improve AUC. Reverting changes.
Training on augumented user 95267 26/50 current_auc = 0.6642857142857144
User 95267 AUC after training: 0.6642857142857144
User 95267 does not improve AUC. Reverting changes.
Training on augumented user 18712 27/50 current_auc = 0.6642857142857144
User 18712 AUC after training: 0.6642857142857144
User 18712 does not improve AUC. Reverting changes.
Training on augumented user 19988 28/50 current_auc = 0.6642857142857144
User 19988 AUC after training: 0.6642857142857143
User 19988 does not improve AUC. Reverting changes.
Training on augumented user 18350 29/50 current_auc = 0.6642857142857144
User 18350 AUC after training: 0.6642857142857144
User 18350 does not improve AUC. Reverting changes.
Training on augumented user 103969 30/50 current_auc = 0.6642857142857144
User 103969 AUC after training: 0.6642857142857144
User 103969 does not improve AUC. Reverting changes.
Training on augumented user 21609 31/50 current_auc = 0.6642857142857144
User 21609 AUC after training: 0.6642857142857144
User 21609 does not improve AUC. Reverting changes.
Training on augumented user 3895 32/50 current_auc = 0.6642857142857144
User 3895 AUC after training: 0.6595238095238095
User 3895 does not improve AUC. Reverting changes.
Training on augumented user 58869 33/50 current_auc = 0.6642857142857144
User 58869 AUC after training: 0.6666666666666666
User 58869 improves AUC. Keeping the model.
Training on augumented user 21217 34/50 current_auc = 0.6666666666666666
User 21217 AUC after training: 0.6666666666666666
User 21217 does not improve AUC. Reverting changes.
Training on augumented user 94083 35/50 current_auc = 0.6666666666666666
User 94083 AUC after training: 0.6666666666666667
User 94083 improves AUC. Keeping the model.
Training on augumented user 70918 36/50 current_auc = 0.6666666666666667
User 70918 AUC after training: 0.6666666666666667
User 70918 does not improve AUC. Reverting changes.
Training on augumented user 121929 37/50 current_auc = 0.6666666666666667
User 121929 AUC after training: 0.6666666666666667
User 121929 does not improve AUC. Reverting changes.
Training on augumented user 80145 38/50 current_auc = 0.6666666666666667
User 80145 AUC after training: 0.6666666666666667
User 80145 does not improve AUC. Reverting changes.
Training on augumented user 91121 39/50 current_auc = 0.6666666666666667
User 91121 AUC after training: 0.6666666666666666
User 91121 does not improve AUC. Reverting changes.
Training on augumented user 19199 40/50 current_auc = 0.6666666666666667
User 19199 AUC after training: 0.6666666666666667
User 19199 does not improve AUC. Reverting changes.
Training on augumented user 49838 41/50 current_auc = 0.6666666666666667
User 49838 AUC after training: 0.669047619047619
User 49838 improves AUC. Keeping the model.
Training on augumented user 136629 42/50 current_auc = 0.669047619047619
User 136629 AUC after training: 0.669047619047619
User 136629 does not improve AUC. Reverting changes.
Training on augumented user 106799 43/50 current_auc = 0.669047619047619
User 106799 AUC after training: 0.6642857142857144
User 106799 does not improve AUC. Reverting changes.
Training on augumented user 70802 44/50 current_auc = 0.669047619047619
User 70802 AUC after training: 0.669047619047619
User 70802 does not improve AUC. Reverting changes.
Training on augumented user 24246 45/50 current_auc = 0.669047619047619
User 24246 AUC after training: 0.6666666666666666
User 24246 does not improve AUC. Reverting changes.
Training on augumented user 92720 46/50 current_auc = 0.669047619047619
User 92720 AUC after training: 0.6690476190476191
User 92720 improves AUC. Keeping the model.
Training on augumented user 130732 47/50 current_auc = 0.6690476190476191
User 130732 AUC after training: 0.6642857142857144
User 130732 does not improve AUC. Reverting changes.
Training on augumented user 70623 48/50 current_auc = 0.6690476190476191
User 70623 AUC after training: 0.6642857142857144
User 70623 does not improve AUC. Reverting changes.
Training on augumented user 17531 49/50 current_auc = 0.6690476190476191
User 17531 AUC after training: 0.6666666666666666
User 17531 does not improve AUC. Reverting changes.
[2024-12-02 18:40:10.379522] start test user 16498 114/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:10.808156] start test user 16498 114/568 recall augumented users by random, augumented_users = [103875, 88430, 12225, 118257, 36635, 104644, 54962, 119756, 67325, 32002, 48067, 72800, 24126, 116565, 24123, 12485, 81640, 5482, 90033, 86274, 29189, 120881, 125105, 40567, 41614, 103954, 102110, 79098, 41377, 82622, 28452, 103750, 47609, 51464, 65504, 67901, 71849, 8629, 48112, 34738, 115502, 48764, 129795, 93169, 136329, 79924, 120253, 76836, 80032, 130721]
[2024-12-02 18:40:10.822958] user = 16498 Cloud 114/568
[2024-12-02 18:40:10.835257] user = 16498 Local 114/568
[2024-12-02 18:40:10.952571] user = 16498 Local+ 114/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:13.348656] user = 16498 MPDA- 114/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8215130023640662
Training on augumented user 103875 0/50 current_auc = 0.8215130023640662
User 103875 AUC after training: 0.8238770685579196
User 103875 improves AUC. Keeping the model.
Training on augumented user 88430 1/50 current_auc = 0.8238770685579196
User 88430 AUC after training: 0.8238770685579196
User 88430 does not improve AUC. Reverting changes.
Training on augumented user 12225 2/50 current_auc = 0.8238770685579196
User 12225 AUC after training: 0.8238770685579196
User 12225 does not improve AUC. Reverting changes.
Training on augumented user 118257 3/50 current_auc = 0.8238770685579196
User 118257 AUC after training: 0.8250591016548463
User 118257 improves AUC. Keeping the model.
Training on augumented user 36635 4/50 current_auc = 0.8250591016548463
User 36635 AUC after training: 0.8274231678486997
User 36635 improves AUC. Keeping the model.
Training on augumented user 104644 5/50 current_auc = 0.8274231678486997
User 104644 AUC after training: 0.8226950354609929
User 104644 does not improve AUC. Reverting changes.
Training on augumented user 54962 6/50 current_auc = 0.8274231678486997
User 54962 AUC after training: 0.8226950354609929
User 54962 does not improve AUC. Reverting changes.
Training on augumented user 119756 7/50 current_auc = 0.8274231678486997
User 119756 AUC after training: 0.8262411347517731
User 119756 does not improve AUC. Reverting changes.
Training on augumented user 67325 8/50 current_auc = 0.8274231678486997
User 67325 AUC after training: 0.822695035460993
User 67325 does not improve AUC. Reverting changes.
Training on augumented user 32002 9/50 current_auc = 0.8274231678486997
User 32002 AUC after training: 0.8226950354609929
User 32002 does not improve AUC. Reverting changes.
Training on augumented user 48067 10/50 current_auc = 0.8274231678486997
User 48067 AUC after training: 0.8238770685579196
User 48067 does not improve AUC. Reverting changes.
Training on augumented user 72800 11/50 current_auc = 0.8274231678486997
User 72800 AUC after training: 0.8274231678486997
User 72800 does not improve AUC. Reverting changes.
Training on augumented user 24126 12/50 current_auc = 0.8274231678486997
User 24126 AUC after training: 0.8250591016548463
User 24126 does not improve AUC. Reverting changes.
Training on augumented user 116565 13/50 current_auc = 0.8274231678486997
User 116565 AUC after training: 0.8238770685579196
User 116565 does not improve AUC. Reverting changes.
Training on augumented user 24123 14/50 current_auc = 0.8274231678486997
User 24123 AUC after training: 0.8238770685579196
User 24123 does not improve AUC. Reverting changes.
Training on augumented user 12485 15/50 current_auc = 0.8274231678486997
User 12485 AUC after training: 0.8238770685579195
User 12485 does not improve AUC. Reverting changes.
Training on augumented user 81640 16/50 current_auc = 0.8274231678486997
User 81640 AUC after training: 0.8250591016548463
User 81640 does not improve AUC. Reverting changes.
Training on augumented user 5482 17/50 current_auc = 0.8274231678486997
User 5482 AUC after training: 0.8286052009456264
User 5482 improves AUC. Keeping the model.
Training on augumented user 90033 18/50 current_auc = 0.8286052009456264
User 90033 AUC after training: 0.8262411347517731
User 90033 does not improve AUC. Reverting changes.
Training on augumented user 86274 19/50 current_auc = 0.8286052009456264
User 86274 AUC after training: 0.8286052009456264
User 86274 does not improve AUC. Reverting changes.
Training on augumented user 29189 20/50 current_auc = 0.8286052009456264
User 29189 AUC after training: 0.8286052009456264
User 29189 does not improve AUC. Reverting changes.
Training on augumented user 120881 21/50 current_auc = 0.8286052009456264
User 120881 AUC after training: 0.8274231678486997
User 120881 does not improve AUC. Reverting changes.
Training on augumented user 125105 22/50 current_auc = 0.8286052009456264
User 125105 AUC after training: 0.8274231678486997
User 125105 does not improve AUC. Reverting changes.
Training on augumented user 40567 23/50 current_auc = 0.8286052009456264
User 40567 AUC after training: 0.8262411347517731
User 40567 does not improve AUC. Reverting changes.
Training on augumented user 41614 24/50 current_auc = 0.8286052009456264
User 41614 AUC after training: 0.8286052009456264
User 41614 does not improve AUC. Reverting changes.
Training on augumented user 103954 25/50 current_auc = 0.8286052009456264
User 103954 AUC after training: 0.8274231678486997
User 103954 does not improve AUC. Reverting changes.
Training on augumented user 102110 26/50 current_auc = 0.8286052009456264
User 102110 AUC after training: 0.8238770685579195
User 102110 does not improve AUC. Reverting changes.
Training on augumented user 79098 27/50 current_auc = 0.8286052009456264
User 79098 AUC after training: 0.8274231678486997
User 79098 does not improve AUC. Reverting changes.
Training on augumented user 41377 28/50 current_auc = 0.8286052009456264
User 41377 AUC after training: 0.8274231678486997
User 41377 does not improve AUC. Reverting changes.
Training on augumented user 82622 29/50 current_auc = 0.8286052009456264
User 82622 AUC after training: 0.8297872340425532
User 82622 improves AUC. Keeping the model.
Training on augumented user 28452 30/50 current_auc = 0.8297872340425532
User 28452 AUC after training: 0.8297872340425532
User 28452 does not improve AUC. Reverting changes.
Training on augumented user 103750 31/50 current_auc = 0.8297872340425532
User 103750 AUC after training: 0.8297872340425532
User 103750 does not improve AUC. Reverting changes.
Training on augumented user 47609 32/50 current_auc = 0.8297872340425532
User 47609 AUC after training: 0.8297872340425532
User 47609 does not improve AUC. Reverting changes.
Training on augumented user 51464 33/50 current_auc = 0.8297872340425532
User 51464 AUC after training: 0.8274231678486997
User 51464 does not improve AUC. Reverting changes.
Training on augumented user 65504 34/50 current_auc = 0.8297872340425532
User 65504 AUC after training: 0.8286052009456264
User 65504 does not improve AUC. Reverting changes.
Training on augumented user 67901 35/50 current_auc = 0.8297872340425532
User 67901 AUC after training: 0.8262411347517731
User 67901 does not improve AUC. Reverting changes.
Training on augumented user 71849 36/50 current_auc = 0.8297872340425532
User 71849 AUC after training: 0.8286052009456264
User 71849 does not improve AUC. Reverting changes.
Training on augumented user 8629 37/50 current_auc = 0.8297872340425532
User 8629 AUC after training: 0.8297872340425532
User 8629 does not improve AUC. Reverting changes.
Training on augumented user 48112 38/50 current_auc = 0.8297872340425532
User 48112 AUC after training: 0.8297872340425532
User 48112 does not improve AUC. Reverting changes.
Training on augumented user 34738 39/50 current_auc = 0.8297872340425532
User 34738 AUC after training: 0.8297872340425532
User 34738 does not improve AUC. Reverting changes.
Training on augumented user 115502 40/50 current_auc = 0.8297872340425532
User 115502 AUC after training: 0.8120567375886525
User 115502 does not improve AUC. Reverting changes.
Training on augumented user 48764 41/50 current_auc = 0.8297872340425532
User 48764 AUC after training: 0.8286052009456264
User 48764 does not improve AUC. Reverting changes.
Training on augumented user 129795 42/50 current_auc = 0.8297872340425532
User 129795 AUC after training: 0.8297872340425532
User 129795 does not improve AUC. Reverting changes.
Training on augumented user 93169 43/50 current_auc = 0.8297872340425532
User 93169 AUC after training: 0.8297872340425532
User 93169 does not improve AUC. Reverting changes.
Training on augumented user 136329 44/50 current_auc = 0.8297872340425532
User 136329 AUC after training: 0.8286052009456264
User 136329 does not improve AUC. Reverting changes.
Training on augumented user 79924 45/50 current_auc = 0.8297872340425532
User 79924 AUC after training: 0.8297872340425532
User 79924 does not improve AUC. Reverting changes.
Training on augumented user 120253 46/50 current_auc = 0.8297872340425532
User 120253 AUC after training: 0.8297872340425532
User 120253 does not improve AUC. Reverting changes.
Training on augumented user 76836 47/50 current_auc = 0.8297872340425532
User 76836 AUC after training: 0.8274231678486997
User 76836 does not improve AUC. Reverting changes.
Training on augumented user 80032 48/50 current_auc = 0.8297872340425532
User 80032 AUC after training: 0.8238770685579195
User 80032 does not improve AUC. Reverting changes.
Training on augumented user 130721 49/50 current_auc = 0.8297872340425532
User 130721 AUC after training: 0.8250591016548463
User 130721 does not improve AUC. Reverting changes.
[2024-12-02 18:40:43.954569] start test user 16551 115/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:44.616423] start test user 16551 115/568 recall augumented users by random, augumented_users = [14406, 42202, 58212, 90798, 86450, 87146, 68494, 57731, 123793, 35608, 9868, 73977, 113284, 80378, 42375, 30779, 45790, 133225, 83978, 12552, 49556, 56700, 52176, 108356, 51392, 108146, 23374, 129138, 74729, 57631, 126299, 81861, 67043, 103235, 86605, 120254, 68821, 29108, 81336, 4162, 114408, 101672, 36838, 136555, 98172, 124020, 66538, 39518, 75328, 99935]
[2024-12-02 18:40:44.632393] user = 16551 Cloud 115/568
[2024-12-02 18:40:44.698473] user = 16551 Local 115/568
[2024-12-02 18:40:44.850397] user = 16551 Local+ 115/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:47.425412] user = 16551 MPDA- 115/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6267027084327131
Training on augumented user 14406 0/50 current_auc = 0.6267027084327131
User 14406 AUC after training: 0.6268011418273781
User 14406 improves AUC. Keeping the model.
Training on augumented user 42202 1/50 current_auc = 0.6268011418273781
User 42202 AUC after training: 0.6268617162240949
User 42202 improves AUC. Keeping the model.
Training on augumented user 58212 2/50 current_auc = 0.6268617162240949
User 58212 AUC after training: 0.6270812984121936
User 58212 improves AUC. Keeping the model.
Training on augumented user 90798 3/50 current_auc = 0.6270812984121936
User 90798 AUC after training: 0.6269828650175286
User 90798 does not improve AUC. Reverting changes.
Training on augumented user 86450 4/50 current_auc = 0.6270812984121936
User 86450 AUC after training: 0.6271532305082949
User 86450 improves AUC. Keeping the model.
Training on augumented user 87146 5/50 current_auc = 0.6271532305082949
User 87146 AUC after training: 0.6270585830134248
User 87146 does not improve AUC. Reverting changes.
Training on augumented user 68494 6/50 current_auc = 0.6271532305082949
User 68494 AUC after training: 0.6268503585247105
User 68494 does not improve AUC. Reverting changes.
Training on augumented user 57731 7/50 current_auc = 0.6271532305082949
User 57731 AUC after training: 0.6271267292097313
User 57731 does not improve AUC. Reverting changes.
Training on augumented user 123793 8/50 current_auc = 0.6271532305082949
User 123793 AUC after training: 0.6266421340359962
User 123793 does not improve AUC. Reverting changes.
Training on augumented user 35608 9/50 current_auc = 0.6271532305082949
User 35608 AUC after training: 0.6267367815308664
User 35608 does not improve AUC. Reverting changes.
Training on augumented user 9868 10/50 current_auc = 0.6271532305082949
User 9868 AUC after training: 0.6268730739234794
User 9868 does not improve AUC. Reverting changes.
Training on augumented user 73977 11/50 current_auc = 0.6271532305082949
User 73977 AUC after training: 0.6272781652015235
User 73977 improves AUC. Keeping the model.
Training on augumented user 113284 12/50 current_auc = 0.6272781652015235
User 113284 AUC after training: 0.6267367815308664
User 113284 does not improve AUC. Reverting changes.
Training on augumented user 80378 13/50 current_auc = 0.6272781652015235
User 80378 AUC after training: 0.6263619774511808
User 80378 does not improve AUC. Reverting changes.
Training on augumented user 42375 14/50 current_auc = 0.6272781652015235
User 42375 AUC after training: 0.627035867614656
User 42375 does not improve AUC. Reverting changes.
Training on augumented user 30779 15/50 current_auc = 0.6272781652015235
User 30779 AUC after training: 0.6271153715103468
User 30779 does not improve AUC. Reverting changes.
Training on augumented user 45790 16/50 current_auc = 0.6272781652015235
User 45790 AUC after training: 0.6267329956310717
User 45790 does not improve AUC. Reverting changes.
Training on augumented user 133225 17/50 current_auc = 0.6272781652015235
User 133225 AUC after training: 0.6277021859785415
User 133225 improves AUC. Keeping the model.
Training on augumented user 83978 18/50 current_auc = 0.6277021859785415
User 83978 AUC after training: 0.6276870423793623
User 83978 does not improve AUC. Reverting changes.
Training on augumented user 12552 19/50 current_auc = 0.6277021859785415
User 12552 AUC after training: 0.6271797318068586
User 12552 does not improve AUC. Reverting changes.
Training on augumented user 49556 20/50 current_auc = 0.6277021859785415
User 49556 AUC after training: 0.6273235959990611
User 49556 does not improve AUC. Reverting changes.
Training on augumented user 56700 21/50 current_auc = 0.6277021859785415
User 56700 AUC after training: 0.6275128909888013
User 56700 does not improve AUC. Reverting changes.
Training on augumented user 52176 22/50 current_auc = 0.6277021859785415
User 52176 AUC after training: 0.6272516639029597
User 52176 does not improve AUC. Reverting changes.
Training on augumented user 108356 23/50 current_auc = 0.6277021859785415
User 108356 AUC after training: 0.6274258152935208
User 108356 does not improve AUC. Reverting changes.
Training on augumented user 51392 24/50 current_auc = 0.6277021859785415
User 51392 AUC after training: 0.6275734653855182
User 51392 does not improve AUC. Reverting changes.
Training on augumented user 108146 25/50 current_auc = 0.6277021859785415
User 108146 AUC after training: 0.6271873036064481
User 108146 does not improve AUC. Reverting changes.
Training on augumented user 23374 26/50 current_auc = 0.6277021859785415
User 23374 AUC after training: 0.6268238572261469
User 23374 does not improve AUC. Reverting changes.
Training on augumented user 129138 27/50 current_auc = 0.6277021859785415
User 129138 AUC after training: 0.6267519251300456
User 129138 does not improve AUC. Reverting changes.
Training on augumented user 74729 28/50 current_auc = 0.6277021859785415
User 74729 AUC after training: 0.6271456587087053
User 74729 does not improve AUC. Reverting changes.
Training on augumented user 57631 29/50 current_auc = 0.6277021859785415
User 57631 AUC after training: 0.6276037525838766
User 57631 does not improve AUC. Reverting changes.
Training on augumented user 126299 30/50 current_auc = 0.6277021859785415
User 126299 AUC after training: 0.6271040138109625
User 126299 does not improve AUC. Reverting changes.
Training on augumented user 81861 31/50 current_auc = 0.6277021859785415
User 81861 AUC after training: 0.6276188961830558
User 81861 does not improve AUC. Reverting changes.
Training on augumented user 67043 32/50 current_auc = 0.6277021859785415
User 67043 AUC after training: 0.6267594969296352
User 67043 does not improve AUC. Reverting changes.
Training on augumented user 103235 33/50 current_auc = 0.6277021859785415
User 103235 AUC after training: 0.627422029393726
User 103235 does not improve AUC. Reverting changes.
Training on augumented user 86605 34/50 current_auc = 0.6277021859785415
User 86605 AUC after training: 0.6272024472056273
User 86605 does not improve AUC. Reverting changes.
Training on augumented user 120254 35/50 current_auc = 0.6277021859785415
User 120254 AUC after training: 0.6274561024918792
User 120254 does not improve AUC. Reverting changes.
Training on augumented user 68821 36/50 current_auc = 0.6277021859785415
User 68821 AUC after training: 0.6280277733608947
User 68821 improves AUC. Keeping the model.
Training on augumented user 29108 37/50 current_auc = 0.6280277733608947
User 29108 AUC after training: 0.6278006193732064
User 29108 does not improve AUC. Reverting changes.
Training on augumented user 81336 38/50 current_auc = 0.6280277733608947
User 81336 AUC after training: 0.6272705934019338
User 81336 does not improve AUC. Reverting changes.
Training on augumented user 4162 39/50 current_auc = 0.6280277733608947
User 4162 AUC after training: 0.627497747389622
User 4162 does not improve AUC. Reverting changes.
Training on augumented user 114408 40/50 current_auc = 0.6280277733608947
User 114408 AUC after training: 0.6276870423793623
User 114408 does not improve AUC. Reverting changes.
Training on augumented user 101672 41/50 current_auc = 0.6280277733608947
User 101672 AUC after training: 0.6278687655695129
User 101672 does not improve AUC. Reverting changes.
Training on augumented user 36838 42/50 current_auc = 0.6280277733608947
User 36838 AUC after training: 0.6277627603752584
User 36838 does not improve AUC. Reverting changes.
Training on augumented user 136555 43/50 current_auc = 0.6280277733608947
User 136555 AUC after training: 0.6275128909888013
User 136555 does not improve AUC. Reverting changes.
Training on augumented user 98172 44/50 current_auc = 0.6280277733608947
User 98172 AUC after training: 0.6278801232688973
User 98172 does not improve AUC. Reverting changes.
Training on augumented user 124020 45/50 current_auc = 0.6280277733608947
User 124020 AUC after training: 0.6277211154775155
User 124020 does not improve AUC. Reverting changes.
Training on augumented user 66538 46/50 current_auc = 0.6280277733608947
User 66538 AUC after training: 0.6275658935859285
User 66538 does not improve AUC. Reverting changes.
Training on augumented user 39518 47/50 current_auc = 0.6280277733608947
User 39518 AUC after training: 0.6278725514693076
User 39518 does not improve AUC. Reverting changes.
Training on augumented user 75328 48/50 current_auc = 0.6280277733608947
User 75328 AUC after training: 0.6271721600072688
User 75328 does not improve AUC. Reverting changes.
Training on augumented user 99935 49/50 current_auc = 0.6280277733608947
User 99935 AUC after training: 0.6276378256820299
User 99935 does not improve AUC. Reverting changes.
[2024-12-02 18:41:14.406998] start test user 16558 116/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:15.083337] start test user 16558 116/568 recall augumented users by random, augumented_users = [112262, 44454, 10577, 85569, 27173, 95185, 117112, 20901, 61902, 102053, 85766, 20493, 124635, 56922, 4544, 69185, 81721, 89686, 10044, 11354, 5258, 40205, 14984, 66545, 73084, 47702, 94127, 121473, 37905, 63143, 68407, 23247, 127077, 105331, 38084, 83344, 109563, 87230, 41460, 135272, 112981, 68268, 101289, 1571, 634, 127114, 108835, 108522, 61036, 7160]
[2024-12-02 18:41:15.149617] user = 16558 Cloud 116/568
[2024-12-02 18:41:15.165598] user = 16558 Local 116/568
[2024-12-02 18:41:15.227924] user = 16558 Local+ 116/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:17.885778] user = 16558 MPDA- 116/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6193957115009746
Training on augumented user 112262 0/50 current_auc = 0.6193957115009746
User 112262 AUC after training: 0.621345029239766
User 112262 improves AUC. Keeping the model.
Training on augumented user 44454 1/50 current_auc = 0.621345029239766
User 44454 AUC after training: 0.6213450292397661
User 44454 improves AUC. Keeping the model.
Training on augumented user 10577 2/50 current_auc = 0.6213450292397661
User 10577 AUC after training: 0.6189083820662769
User 10577 does not improve AUC. Reverting changes.
Training on augumented user 85569 3/50 current_auc = 0.6213450292397661
User 85569 AUC after training: 0.6198830409356726
User 85569 does not improve AUC. Reverting changes.
Training on augumented user 27173 4/50 current_auc = 0.6213450292397661
User 27173 AUC after training: 0.6189083820662767
User 27173 does not improve AUC. Reverting changes.
Training on augumented user 95185 5/50 current_auc = 0.6213450292397661
User 95185 AUC after training: 0.6213450292397661
User 95185 does not improve AUC. Reverting changes.
Training on augumented user 117112 6/50 current_auc = 0.6213450292397661
User 117112 AUC after training: 0.6208576998050682
User 117112 does not improve AUC. Reverting changes.
Training on augumented user 20901 7/50 current_auc = 0.6213450292397661
User 20901 AUC after training: 0.6213450292397661
User 20901 does not improve AUC. Reverting changes.
Training on augumented user 61902 8/50 current_auc = 0.6213450292397661
User 61902 AUC after training: 0.6203703703703703
User 61902 does not improve AUC. Reverting changes.
Training on augumented user 102053 9/50 current_auc = 0.6213450292397661
User 102053 AUC after training: 0.6198830409356725
User 102053 does not improve AUC. Reverting changes.
Training on augumented user 85766 10/50 current_auc = 0.6213450292397661
User 85766 AUC after training: 0.6198830409356725
User 85766 does not improve AUC. Reverting changes.
Training on augumented user 20493 11/50 current_auc = 0.6213450292397661
User 20493 AUC after training: 0.6193957115009746
User 20493 does not improve AUC. Reverting changes.
Training on augumented user 124635 12/50 current_auc = 0.6213450292397661
User 124635 AUC after training: 0.618421052631579
User 124635 does not improve AUC. Reverting changes.
Training on augumented user 56922 13/50 current_auc = 0.6213450292397661
User 56922 AUC after training: 0.6203703703703703
User 56922 does not improve AUC. Reverting changes.
Training on augumented user 4544 14/50 current_auc = 0.6213450292397661
User 4544 AUC after training: 0.6198830409356725
User 4544 does not improve AUC. Reverting changes.
Training on augumented user 69185 15/50 current_auc = 0.6213450292397661
User 69185 AUC after training: 0.618421052631579
User 69185 does not improve AUC. Reverting changes.
Training on augumented user 81721 16/50 current_auc = 0.6213450292397661
User 81721 AUC after training: 0.6213450292397661
User 81721 does not improve AUC. Reverting changes.
Training on augumented user 89686 17/50 current_auc = 0.6213450292397661
User 89686 AUC after training: 0.6203703703703703
User 89686 does not improve AUC. Reverting changes.
Training on augumented user 10044 18/50 current_auc = 0.6213450292397661
User 10044 AUC after training: 0.6208576998050682
User 10044 does not improve AUC. Reverting changes.
Training on augumented user 11354 19/50 current_auc = 0.6213450292397661
User 11354 AUC after training: 0.6208576998050682
User 11354 does not improve AUC. Reverting changes.
Training on augumented user 5258 20/50 current_auc = 0.6213450292397661
User 5258 AUC after training: 0.6203703703703703
User 5258 does not improve AUC. Reverting changes.
Training on augumented user 40205 21/50 current_auc = 0.6213450292397661
User 40205 AUC after training: 0.6203703703703703
User 40205 does not improve AUC. Reverting changes.
Training on augumented user 14984 22/50 current_auc = 0.6213450292397661
User 14984 AUC after training: 0.6203703703703703
User 14984 does not improve AUC. Reverting changes.
Training on augumented user 66545 23/50 current_auc = 0.6213450292397661
User 66545 AUC after training: 0.6189083820662767
User 66545 does not improve AUC. Reverting changes.
Training on augumented user 73084 24/50 current_auc = 0.6213450292397661
User 73084 AUC after training: 0.615009746588694
User 73084 does not improve AUC. Reverting changes.
Training on augumented user 47702 25/50 current_auc = 0.6213450292397661
User 47702 AUC after training: 0.6213450292397661
User 47702 does not improve AUC. Reverting changes.
Training on augumented user 94127 26/50 current_auc = 0.6213450292397661
User 94127 AUC after training: 0.621832358674464
User 94127 improves AUC. Keeping the model.
Training on augumented user 121473 27/50 current_auc = 0.621832358674464
User 121473 AUC after training: 0.6198830409356725
User 121473 does not improve AUC. Reverting changes.
Training on augumented user 37905 28/50 current_auc = 0.621832358674464
User 37905 AUC after training: 0.6208576998050682
User 37905 does not improve AUC. Reverting changes.
Training on augumented user 63143 29/50 current_auc = 0.621832358674464
User 63143 AUC after training: 0.6208576998050682
User 63143 does not improve AUC. Reverting changes.
Training on augumented user 68407 30/50 current_auc = 0.621832358674464
User 68407 AUC after training: 0.6208576998050682
User 68407 does not improve AUC. Reverting changes.
Training on augumented user 23247 31/50 current_auc = 0.621832358674464
User 23247 AUC after training: 0.6213450292397661
User 23247 does not improve AUC. Reverting changes.
Training on augumented user 127077 32/50 current_auc = 0.621832358674464
User 127077 AUC after training: 0.6218323586744638
User 127077 does not improve AUC. Reverting changes.
Training on augumented user 105331 33/50 current_auc = 0.621832358674464
User 105331 AUC after training: 0.6208576998050682
User 105331 does not improve AUC. Reverting changes.
Training on augumented user 38084 34/50 current_auc = 0.621832358674464
User 38084 AUC after training: 0.6208576998050683
User 38084 does not improve AUC. Reverting changes.
Training on augumented user 83344 35/50 current_auc = 0.621832358674464
User 83344 AUC after training: 0.621832358674464
User 83344 does not improve AUC. Reverting changes.
Training on augumented user 109563 36/50 current_auc = 0.621832358674464
User 109563 AUC after training: 0.6198830409356726
User 109563 does not improve AUC. Reverting changes.
Training on augumented user 87230 37/50 current_auc = 0.621832358674464
User 87230 AUC after training: 0.6193957115009746
User 87230 does not improve AUC. Reverting changes.
Training on augumented user 41460 38/50 current_auc = 0.621832358674464
User 41460 AUC after training: 0.621345029239766
User 41460 does not improve AUC. Reverting changes.
Training on augumented user 135272 39/50 current_auc = 0.621832358674464
User 135272 AUC after training: 0.6223196881091618
User 135272 improves AUC. Keeping the model.
Training on augumented user 112981 40/50 current_auc = 0.6223196881091618
User 112981 AUC after training: 0.621345029239766
User 112981 does not improve AUC. Reverting changes.
Training on augumented user 68268 41/50 current_auc = 0.6223196881091618
User 68268 AUC after training: 0.6223196881091618
User 68268 does not improve AUC. Reverting changes.
Training on augumented user 101289 42/50 current_auc = 0.6223196881091618
User 101289 AUC after training: 0.6208576998050682
User 101289 does not improve AUC. Reverting changes.
Training on augumented user 1571 43/50 current_auc = 0.6223196881091618
User 1571 AUC after training: 0.6174463937621831
User 1571 does not improve AUC. Reverting changes.
Training on augumented user 634 44/50 current_auc = 0.6223196881091618
User 634 AUC after training: 0.6198830409356725
User 634 does not improve AUC. Reverting changes.
Training on augumented user 127114 45/50 current_auc = 0.6223196881091618
User 127114 AUC after training: 0.6228070175438596
User 127114 improves AUC. Keeping the model.
Training on augumented user 108835 46/50 current_auc = 0.6228070175438596
User 108835 AUC after training: 0.6218323586744638
User 108835 does not improve AUC. Reverting changes.
Training on augumented user 108522 47/50 current_auc = 0.6228070175438596
User 108522 AUC after training: 0.6232943469785575
User 108522 improves AUC. Keeping the model.
Training on augumented user 61036 48/50 current_auc = 0.6232943469785575
User 61036 AUC after training: 0.6218323586744638
User 61036 does not improve AUC. Reverting changes.
Training on augumented user 7160 49/50 current_auc = 0.6232943469785575
User 7160 AUC after training: 0.6223196881091617
User 7160 does not improve AUC. Reverting changes.
[2024-12-02 18:41:46.459379] start test user 16575 117/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:47.202053] start test user 16575 117/568 recall augumented users by random, augumented_users = [35544, 93352, 62038, 83992, 102029, 27744, 10926, 76139, 58267, 28169, 88674, 116031, 134801, 52612, 25477, 10221, 38694, 9334, 7356, 50613, 2670, 2834, 43691, 131595, 111027, 95188, 20119, 50520, 86323, 66050, 68705, 88871, 83734, 80762, 69616, 43660, 108875, 115609, 27567, 48581, 10418, 78787, 114680, 93113, 4219, 15072, 11220, 946, 38081, 98692]
[2024-12-02 18:41:47.218283] user = 16575 Cloud 117/568
[2024-12-02 18:41:47.229858] user = 16575 Local 117/568
[2024-12-02 18:41:47.299905] user = 16575 Local+ 117/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:49.449763] user = 16575 MPDA- 117/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7452380952380953
Training on augumented user 35544 0/50 current_auc = 0.7452380952380953
User 35544 AUC after training: 0.7452380952380953
User 35544 does not improve AUC. Reverting changes.
Training on augumented user 93352 1/50 current_auc = 0.7452380952380953
User 93352 AUC after training: 0.7428571428571429
User 93352 does not improve AUC. Reverting changes.
Training on augumented user 62038 2/50 current_auc = 0.7452380952380953
User 62038 AUC after training: 0.7452380952380953
User 62038 does not improve AUC. Reverting changes.
Training on augumented user 83992 3/50 current_auc = 0.7452380952380953
User 83992 AUC after training: 0.7452380952380953
User 83992 does not improve AUC. Reverting changes.
Training on augumented user 102029 4/50 current_auc = 0.7452380952380953
User 102029 AUC after training: 0.7452380952380953
User 102029 does not improve AUC. Reverting changes.
Training on augumented user 27744 5/50 current_auc = 0.7452380952380953
User 27744 AUC after training: 0.7452380952380953
User 27744 does not improve AUC. Reverting changes.
Training on augumented user 10926 6/50 current_auc = 0.7452380952380953
User 10926 AUC after training: 0.7452380952380953
User 10926 does not improve AUC. Reverting changes.
Training on augumented user 76139 7/50 current_auc = 0.7452380952380953
User 76139 AUC after training: 0.7452380952380953
User 76139 does not improve AUC. Reverting changes.
Training on augumented user 58267 8/50 current_auc = 0.7452380952380953
User 58267 AUC after training: 0.7476190476190477
User 58267 improves AUC. Keeping the model.
Training on augumented user 28169 9/50 current_auc = 0.7476190476190477
User 28169 AUC after training: 0.7452380952380953
User 28169 does not improve AUC. Reverting changes.
Training on augumented user 88674 10/50 current_auc = 0.7476190476190477
User 88674 AUC after training: 0.7500000000000001
User 88674 improves AUC. Keeping the model.
Training on augumented user 116031 11/50 current_auc = 0.7500000000000001
User 116031 AUC after training: 0.7500000000000001
User 116031 does not improve AUC. Reverting changes.
Training on augumented user 134801 12/50 current_auc = 0.7500000000000001
User 134801 AUC after training: 0.7476190476190477
User 134801 does not improve AUC. Reverting changes.
Training on augumented user 52612 13/50 current_auc = 0.7500000000000001
User 52612 AUC after training: 0.7476190476190477
User 52612 does not improve AUC. Reverting changes.
Training on augumented user 25477 14/50 current_auc = 0.7500000000000001
User 25477 AUC after training: 0.7476190476190477
User 25477 does not improve AUC. Reverting changes.
Training on augumented user 10221 15/50 current_auc = 0.7500000000000001
User 10221 AUC after training: 0.7476190476190477
User 10221 does not improve AUC. Reverting changes.
Training on augumented user 38694 16/50 current_auc = 0.7500000000000001
User 38694 AUC after training: 0.7500000000000001
User 38694 does not improve AUC. Reverting changes.
Training on augumented user 9334 17/50 current_auc = 0.7500000000000001
User 9334 AUC after training: 0.7500000000000001
User 9334 does not improve AUC. Reverting changes.
Training on augumented user 7356 18/50 current_auc = 0.7500000000000001
User 7356 AUC after training: 0.7500000000000001
User 7356 does not improve AUC. Reverting changes.
Training on augumented user 50613 19/50 current_auc = 0.7500000000000001
User 50613 AUC after training: 0.7476190476190477
User 50613 does not improve AUC. Reverting changes.
Training on augumented user 2670 20/50 current_auc = 0.7500000000000001
User 2670 AUC after training: 0.7476190476190477
User 2670 does not improve AUC. Reverting changes.
Training on augumented user 2834 21/50 current_auc = 0.7500000000000001
User 2834 AUC after training: 0.7476190476190477
User 2834 does not improve AUC. Reverting changes.
Training on augumented user 43691 22/50 current_auc = 0.7500000000000001
User 43691 AUC after training: 0.7500000000000001
User 43691 does not improve AUC. Reverting changes.
Training on augumented user 131595 23/50 current_auc = 0.7500000000000001
User 131595 AUC after training: 0.7500000000000001
User 131595 does not improve AUC. Reverting changes.
Training on augumented user 111027 24/50 current_auc = 0.7500000000000001
User 111027 AUC after training: 0.7476190476190477
User 111027 does not improve AUC. Reverting changes.
Training on augumented user 95188 25/50 current_auc = 0.7500000000000001
User 95188 AUC after training: 0.7476190476190477
User 95188 does not improve AUC. Reverting changes.
Training on augumented user 20119 26/50 current_auc = 0.7500000000000001
User 20119 AUC after training: 0.7476190476190477
User 20119 does not improve AUC. Reverting changes.
Training on augumented user 50520 27/50 current_auc = 0.7500000000000001
User 50520 AUC after training: 0.7500000000000001
User 50520 does not improve AUC. Reverting changes.
Training on augumented user 86323 28/50 current_auc = 0.7500000000000001
User 86323 AUC after training: 0.7476190476190477
User 86323 does not improve AUC. Reverting changes.
Training on augumented user 66050 29/50 current_auc = 0.7500000000000001
User 66050 AUC after training: 0.7500000000000001
User 66050 does not improve AUC. Reverting changes.
Training on augumented user 68705 30/50 current_auc = 0.7500000000000001
User 68705 AUC after training: 0.7476190476190477
User 68705 does not improve AUC. Reverting changes.
Training on augumented user 88871 31/50 current_auc = 0.7500000000000001
User 88871 AUC after training: 0.7500000000000001
User 88871 does not improve AUC. Reverting changes.
Training on augumented user 83734 32/50 current_auc = 0.7500000000000001
User 83734 AUC after training: 0.7500000000000001
User 83734 does not improve AUC. Reverting changes.
Training on augumented user 80762 33/50 current_auc = 0.7500000000000001
User 80762 AUC after training: 0.7500000000000001
User 80762 does not improve AUC. Reverting changes.
Training on augumented user 69616 34/50 current_auc = 0.7500000000000001
User 69616 AUC after training: 0.7476190476190477
User 69616 does not improve AUC. Reverting changes.
Training on augumented user 43660 35/50 current_auc = 0.7500000000000001
User 43660 AUC after training: 0.7500000000000001
User 43660 does not improve AUC. Reverting changes.
Training on augumented user 108875 36/50 current_auc = 0.7500000000000001
User 108875 AUC after training: 0.7476190476190477
User 108875 does not improve AUC. Reverting changes.
Training on augumented user 115609 37/50 current_auc = 0.7500000000000001
User 115609 AUC after training: 0.7476190476190477
User 115609 does not improve AUC. Reverting changes.
Training on augumented user 27567 38/50 current_auc = 0.7500000000000001
User 27567 AUC after training: 0.7500000000000001
User 27567 does not improve AUC. Reverting changes.
Training on augumented user 48581 39/50 current_auc = 0.7500000000000001
User 48581 AUC after training: 0.7476190476190477
User 48581 does not improve AUC. Reverting changes.
Training on augumented user 10418 40/50 current_auc = 0.7500000000000001
User 10418 AUC after training: 0.7500000000000001
User 10418 does not improve AUC. Reverting changes.
Training on augumented user 78787 41/50 current_auc = 0.7500000000000001
User 78787 AUC after training: 0.7476190476190477
User 78787 does not improve AUC. Reverting changes.
Training on augumented user 114680 42/50 current_auc = 0.7500000000000001
User 114680 AUC after training: 0.7500000000000001
User 114680 does not improve AUC. Reverting changes.
Training on augumented user 93113 43/50 current_auc = 0.7500000000000001
User 93113 AUC after training: 0.7500000000000001
User 93113 does not improve AUC. Reverting changes.
Training on augumented user 4219 44/50 current_auc = 0.7500000000000001
User 4219 AUC after training: 0.7500000000000001
User 4219 does not improve AUC. Reverting changes.
Training on augumented user 15072 45/50 current_auc = 0.7500000000000001
User 15072 AUC after training: 0.7476190476190477
User 15072 does not improve AUC. Reverting changes.
Training on augumented user 11220 46/50 current_auc = 0.7500000000000001
User 11220 AUC after training: 0.7500000000000001
User 11220 does not improve AUC. Reverting changes.
Training on augumented user 946 47/50 current_auc = 0.7500000000000001
User 946 AUC after training: 0.7476190476190477
User 946 does not improve AUC. Reverting changes.
Training on augumented user 38081 48/50 current_auc = 0.7500000000000001
User 38081 AUC after training: 0.7500000000000001
User 38081 does not improve AUC. Reverting changes.
Training on augumented user 98692 49/50 current_auc = 0.7500000000000001
User 98692 AUC after training: 0.7476190476190477
User 98692 does not improve AUC. Reverting changes.
[2024-12-02 18:42:20.333118] start test user 16589 118/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:20.996146] start test user 16589 118/568 recall augumented users by random, augumented_users = [117337, 130513, 83132, 14352, 44779, 33609, 21389, 11578, 85331, 8229, 105617, 61872, 100929, 52772, 116129, 103557, 89383, 79627, 4235, 99331, 129569, 3227, 53674, 26261, 23359, 126806, 77554, 21798, 136413, 128675, 34901, 3450, 124798, 137275, 87981, 28450, 130015, 89989, 41216, 60301, 99751, 79942, 15325, 29491, 52981, 56772, 127463, 117353, 25625, 67526]
[2024-12-02 18:42:21.013412] user = 16589 Cloud 118/568
[2024-12-02 18:42:21.025540] user = 16589 Local 118/568
[2024-12-02 18:42:21.056932] user = 16589 Local+ 118/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:23.439097] user = 16589 MPDA- 118/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7254901960784315
Training on augumented user 117337 0/50 current_auc = 0.7254901960784315
User 117337 AUC after training: 0.7156862745098039
User 117337 does not improve AUC. Reverting changes.
Training on augumented user 130513 1/50 current_auc = 0.7254901960784315
User 130513 AUC after training: 0.7156862745098039
User 130513 does not improve AUC. Reverting changes.
Training on augumented user 83132 2/50 current_auc = 0.7254901960784315
User 83132 AUC after training: 0.7254901960784315
User 83132 does not improve AUC. Reverting changes.
Training on augumented user 14352 3/50 current_auc = 0.7254901960784315
User 14352 AUC after training: 0.7156862745098039
User 14352 does not improve AUC. Reverting changes.
Training on augumented user 44779 4/50 current_auc = 0.7254901960784315
User 44779 AUC after training: 0.7254901960784313
User 44779 does not improve AUC. Reverting changes.
Training on augumented user 33609 5/50 current_auc = 0.7254901960784315
User 33609 AUC after training: 0.7352941176470588
User 33609 improves AUC. Keeping the model.
Training on augumented user 21389 6/50 current_auc = 0.7352941176470588
User 21389 AUC after training: 0.7450980392156863
User 21389 improves AUC. Keeping the model.
Training on augumented user 11578 7/50 current_auc = 0.7450980392156863
User 11578 AUC after training: 0.7254901960784315
User 11578 does not improve AUC. Reverting changes.
Training on augumented user 85331 8/50 current_auc = 0.7450980392156863
User 85331 AUC after training: 0.7450980392156863
User 85331 does not improve AUC. Reverting changes.
Training on augumented user 8229 9/50 current_auc = 0.7450980392156863
User 8229 AUC after training: 0.7352941176470588
User 8229 does not improve AUC. Reverting changes.
Training on augumented user 105617 10/50 current_auc = 0.7450980392156863
User 105617 AUC after training: 0.7352941176470589
User 105617 does not improve AUC. Reverting changes.
Training on augumented user 61872 11/50 current_auc = 0.7450980392156863
User 61872 AUC after training: 0.7254901960784315
User 61872 does not improve AUC. Reverting changes.
Training on augumented user 100929 12/50 current_auc = 0.7450980392156863
User 100929 AUC after training: 0.7352941176470588
User 100929 does not improve AUC. Reverting changes.
Training on augumented user 52772 13/50 current_auc = 0.7450980392156863
User 52772 AUC after training: 0.7352941176470589
User 52772 does not improve AUC. Reverting changes.
Training on augumented user 116129 14/50 current_auc = 0.7450980392156863
User 116129 AUC after training: 0.7254901960784315
User 116129 does not improve AUC. Reverting changes.
Training on augumented user 103557 15/50 current_auc = 0.7450980392156863
User 103557 AUC after training: 0.7254901960784315
User 103557 does not improve AUC. Reverting changes.
Training on augumented user 89383 16/50 current_auc = 0.7450980392156863
User 89383 AUC after training: 0.7254901960784315
User 89383 does not improve AUC. Reverting changes.
Training on augumented user 79627 17/50 current_auc = 0.7450980392156863
User 79627 AUC after training: 0.7352941176470589
User 79627 does not improve AUC. Reverting changes.
Training on augumented user 4235 18/50 current_auc = 0.7450980392156863
User 4235 AUC after training: 0.7156862745098039
User 4235 does not improve AUC. Reverting changes.
Training on augumented user 99331 19/50 current_auc = 0.7450980392156863
User 99331 AUC after training: 0.7254901960784315
User 99331 does not improve AUC. Reverting changes.
Training on augumented user 129569 20/50 current_auc = 0.7450980392156863
User 129569 AUC after training: 0.7254901960784315
User 129569 does not improve AUC. Reverting changes.
Training on augumented user 3227 21/50 current_auc = 0.7450980392156863
User 3227 AUC after training: 0.7352941176470588
User 3227 does not improve AUC. Reverting changes.
Training on augumented user 53674 22/50 current_auc = 0.7450980392156863
User 53674 AUC after training: 0.7254901960784315
User 53674 does not improve AUC. Reverting changes.
Training on augumented user 26261 23/50 current_auc = 0.7450980392156863
User 26261 AUC after training: 0.7352941176470588
User 26261 does not improve AUC. Reverting changes.
Training on augumented user 23359 24/50 current_auc = 0.7450980392156863
User 23359 AUC after training: 0.7352941176470589
User 23359 does not improve AUC. Reverting changes.
Training on augumented user 126806 25/50 current_auc = 0.7450980392156863
User 126806 AUC after training: 0.7450980392156863
User 126806 does not improve AUC. Reverting changes.
Training on augumented user 77554 26/50 current_auc = 0.7450980392156863
User 77554 AUC after training: 0.7254901960784315
User 77554 does not improve AUC. Reverting changes.
Training on augumented user 21798 27/50 current_auc = 0.7450980392156863
User 21798 AUC after training: 0.7352941176470589
User 21798 does not improve AUC. Reverting changes.
Training on augumented user 136413 28/50 current_auc = 0.7450980392156863
User 136413 AUC after training: 0.7254901960784315
User 136413 does not improve AUC. Reverting changes.
Training on augumented user 128675 29/50 current_auc = 0.7450980392156863
User 128675 AUC after training: 0.7450980392156863
User 128675 does not improve AUC. Reverting changes.
Training on augumented user 34901 30/50 current_auc = 0.7450980392156863
User 34901 AUC after training: 0.7352941176470589
User 34901 does not improve AUC. Reverting changes.
Training on augumented user 3450 31/50 current_auc = 0.7450980392156863
User 3450 AUC after training: 0.7254901960784313
User 3450 does not improve AUC. Reverting changes.
Training on augumented user 124798 32/50 current_auc = 0.7450980392156863
User 124798 AUC after training: 0.7156862745098039
User 124798 does not improve AUC. Reverting changes.
Training on augumented user 137275 33/50 current_auc = 0.7450980392156863
User 137275 AUC after training: 0.7254901960784315
User 137275 does not improve AUC. Reverting changes.
Training on augumented user 87981 34/50 current_auc = 0.7450980392156863
User 87981 AUC after training: 0.7254901960784315
User 87981 does not improve AUC. Reverting changes.
Training on augumented user 28450 35/50 current_auc = 0.7450980392156863
User 28450 AUC after training: 0.7254901960784315
User 28450 does not improve AUC. Reverting changes.
Training on augumented user 130015 36/50 current_auc = 0.7450980392156863
User 130015 AUC after training: 0.7254901960784315
User 130015 does not improve AUC. Reverting changes.
Training on augumented user 89989 37/50 current_auc = 0.7450980392156863
User 89989 AUC after training: 0.7352941176470588
User 89989 does not improve AUC. Reverting changes.
Training on augumented user 41216 38/50 current_auc = 0.7450980392156863
User 41216 AUC after training: 0.7352941176470588
User 41216 does not improve AUC. Reverting changes.
Training on augumented user 60301 39/50 current_auc = 0.7450980392156863
User 60301 AUC after training: 0.7254901960784313
User 60301 does not improve AUC. Reverting changes.
Training on augumented user 99751 40/50 current_auc = 0.7450980392156863
User 99751 AUC after training: 0.7254901960784315
User 99751 does not improve AUC. Reverting changes.
Training on augumented user 79942 41/50 current_auc = 0.7450980392156863
User 79942 AUC after training: 0.7156862745098039
User 79942 does not improve AUC. Reverting changes.
Training on augumented user 15325 42/50 current_auc = 0.7450980392156863
User 15325 AUC after training: 0.7450980392156863
User 15325 does not improve AUC. Reverting changes.
Training on augumented user 29491 43/50 current_auc = 0.7450980392156863
User 29491 AUC after training: 0.696078431372549
User 29491 does not improve AUC. Reverting changes.
Training on augumented user 52981 44/50 current_auc = 0.7450980392156863
User 52981 AUC after training: 0.7352941176470588
User 52981 does not improve AUC. Reverting changes.
Training on augumented user 56772 45/50 current_auc = 0.7450980392156863
User 56772 AUC after training: 0.7352941176470589
User 56772 does not improve AUC. Reverting changes.
Training on augumented user 127463 46/50 current_auc = 0.7450980392156863
User 127463 AUC after training: 0.7352941176470588
User 127463 does not improve AUC. Reverting changes.
Training on augumented user 117353 47/50 current_auc = 0.7450980392156863
User 117353 AUC after training: 0.7450980392156863
User 117353 does not improve AUC. Reverting changes.
Training on augumented user 25625 48/50 current_auc = 0.7450980392156863
User 25625 AUC after training: 0.7450980392156863
User 25625 does not improve AUC. Reverting changes.
Training on augumented user 67526 49/50 current_auc = 0.7450980392156863
User 67526 AUC after training: 0.7254901960784315
User 67526 does not improve AUC. Reverting changes.
[2024-12-02 18:42:53.282513] start test user 16606 119/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:53.885616] start test user 16606 119/568 recall augumented users by random, augumented_users = [65425, 109701, 62660, 40475, 28270, 130831, 58577, 36165, 135762, 107913, 78258, 77439, 117659, 84992, 1867, 72669, 27379, 27100, 120882, 59778, 27328, 32981, 83507, 131341, 125240, 132778, 41449, 112552, 71077, 50685, 96159, 2326, 36421, 1640, 39406, 52126, 105074, 116716, 56056, 57551, 111150, 133733, 15631, 38588, 105100, 84019, 137020, 17786, 60842, 45681]
[2024-12-02 18:42:53.903170] user = 16606 Cloud 119/568
[2024-12-02 18:42:53.954641] user = 16606 Local 119/568
[2024-12-02 18:42:54.225329] user = 16606 Local+ 119/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:56.539772] user = 16606 MPDA- 119/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5854646021535207
Training on augumented user 65425 0/50 current_auc = 0.5854646021535207
User 65425 AUC after training: 0.5854039151769459
User 65425 does not improve AUC. Reverting changes.
Training on augumented user 109701 1/50 current_auc = 0.5854646021535207
User 109701 AUC after training: 0.5860194545107763
User 109701 improves AUC. Keeping the model.
Training on augumented user 62660 2/50 current_auc = 0.5860194545107763
User 62660 AUC after training: 0.5859414283980373
User 62660 does not improve AUC. Reverting changes.
Training on augumented user 40475 3/50 current_auc = 0.5860194545107763
User 40475 AUC after training: 0.5856986804917379
User 40475 does not improve AUC. Reverting changes.
Training on augumented user 28270 4/50 current_auc = 0.5860194545107763
User 28270 AUC after training: 0.5859500979661194
User 28270 does not improve AUC. Reverting changes.
Training on augumented user 130831 5/50 current_auc = 0.5860194545107763
User 130831 AUC after training: 0.5862275241447472
User 130831 improves AUC. Keeping the model.
Training on augumented user 58577 6/50 current_auc = 0.5862275241447472
User 58577 AUC after training: 0.5859110849097499
User 58577 does not improve AUC. Reverting changes.
Training on augumented user 36165 7/50 current_auc = 0.5862275241447472
User 36165 AUC after training: 0.5861364936798849
User 36165 does not improve AUC. Reverting changes.
Training on augumented user 135762 8/50 current_auc = 0.5862275241447472
User 135762 AUC after training: 0.5862968806894041
User 135762 improves AUC. Keeping the model.
Training on augumented user 107913 9/50 current_auc = 0.5862968806894041
User 107913 AUC after training: 0.5862882111213219
User 107913 does not improve AUC. Reverting changes.
Training on augumented user 78258 10/50 current_auc = 0.5862968806894041
User 78258 AUC after training: 0.5861668371681723
User 78258 does not improve AUC. Reverting changes.
Training on augumented user 77439 11/50 current_auc = 0.5862968806894041
User 77439 AUC after training: 0.5864399285627591
User 77439 improves AUC. Keeping the model.
Training on augumented user 117659 12/50 current_auc = 0.5864399285627591
User 117659 AUC after training: 0.5863835763702252
User 117659 does not improve AUC. Reverting changes.
Training on augumented user 84992 13/50 current_auc = 0.5864399285627591
User 84992 AUC after training: 0.5865309590276213
User 84992 improves AUC. Keeping the model.
Training on augumented user 1867 14/50 current_auc = 0.5865309590276213
User 1867 AUC after training: 0.5863575676659789
User 1867 does not improve AUC. Reverting changes.
Training on augumented user 72669 15/50 current_auc = 0.5865309590276213
User 72669 AUC after training: 0.586227524144747
User 72669 does not improve AUC. Reverting changes.
Training on augumented user 27379 16/50 current_auc = 0.5865309590276213
User 27379 AUC after training: 0.5864009155063894
User 27379 does not improve AUC. Reverting changes.
Training on augumented user 27100 17/50 current_auc = 0.5865309590276213
User 27100 AUC after training: 0.586582976436114
User 27100 improves AUC. Keeping the model.
Training on augumented user 120882 18/50 current_auc = 0.586582976436114
User 120882 AUC after training: 0.5864702720510464
User 120882 does not improve AUC. Reverting changes.
Training on augumented user 59778 19/50 current_auc = 0.586582976436114
User 59778 AUC after training: 0.5866696721169351
User 59778 improves AUC. Keeping the model.
Training on augumented user 27328 20/50 current_auc = 0.5866696721169351
User 27328 AUC after training: 0.5866696721169351
User 27328 does not improve AUC. Reverting changes.
Training on augumented user 32981 21/50 current_auc = 0.5866696721169351
User 32981 AUC after training: 0.5864962807552927
User 32981 does not improve AUC. Reverting changes.
Training on augumented user 83507 22/50 current_auc = 0.5866696721169351
User 83507 AUC after training: 0.5864182546425537
User 83507 does not improve AUC. Reverting changes.
Training on augumented user 131341 23/50 current_auc = 0.5866696721169351
User 131341 AUC after training: 0.5863835763702252
User 131341 does not improve AUC. Reverting changes.
Training on augumented user 125240 24/50 current_auc = 0.5866696721169351
User 125240 AUC after training: 0.5865829764361139
User 125240 does not improve AUC. Reverting changes.
Training on augumented user 132778 25/50 current_auc = 0.5866696721169351
User 132778 AUC after training: 0.5865006155393339
User 132778 does not improve AUC. Reverting changes.
Training on augumented user 41449 26/50 current_auc = 0.5866696721169351
User 41449 AUC after training: 0.5862275241447471
User 41449 does not improve AUC. Reverting changes.
Training on augumented user 112552 27/50 current_auc = 0.5866696721169351
User 112552 AUC after training: 0.5866740069009762
User 112552 improves AUC. Keeping the model.
Training on augumented user 71077 28/50 current_auc = 0.5866740069009762
User 71077 AUC after training: 0.5865743068680318
User 71077 does not improve AUC. Reverting changes.
Training on augumented user 50685 29/50 current_auc = 0.5866740069009762
User 50685 AUC after training: 0.5867867112860438
User 50685 improves AUC. Keeping the model.
Training on augumented user 96159 30/50 current_auc = 0.5867867112860438
User 96159 AUC after training: 0.5868213895583723
User 96159 improves AUC. Keeping the model.
Training on augumented user 2326 31/50 current_auc = 0.5868213895583723
User 2326 AUC after training: 0.5868300591264544
User 2326 improves AUC. Keeping the model.
Training on augumented user 36421 32/50 current_auc = 0.5868300591264544
User 36421 AUC after training: 0.5866436634126888
User 36421 does not improve AUC. Reverting changes.
Training on augumented user 1640 33/50 current_auc = 0.5868300591264544
User 1640 AUC after training: 0.586587311220155
User 1640 does not improve AUC. Reverting changes.
Training on augumented user 39406 34/50 current_auc = 0.5868300591264544
User 39406 AUC after training: 0.5866436634126888
User 39406 does not improve AUC. Reverting changes.
Training on augumented user 52126 35/50 current_auc = 0.5868300591264544
User 52126 AUC after training: 0.5868690721828239
User 52126 improves AUC. Keeping the model.
Training on augumented user 105074 36/50 current_auc = 0.5868690721828239
User 105074 AUC after training: 0.5869124200232344
User 105074 improves AUC. Keeping the model.
Training on augumented user 116716 37/50 current_auc = 0.5869124200232344
User 116716 AUC after training: 0.5868864113189881
User 116716 does not improve AUC. Reverting changes.
Training on augumented user 56056 38/50 current_auc = 0.5869124200232344
User 56056 AUC after training: 0.5869080852391934
User 56056 does not improve AUC. Reverting changes.
Training on augumented user 57551 39/50 current_auc = 0.5869124200232344
User 57551 AUC after training: 0.5868517330466596
User 57551 does not improve AUC. Reverting changes.
Training on augumented user 111150 40/50 current_auc = 0.5869124200232344
User 111150 AUC after training: 0.5870294591923431
User 111150 improves AUC. Keeping the model.
Training on augumented user 133733 41/50 current_auc = 0.5870294591923431
User 133733 AUC after training: 0.5869124200232345
User 133733 does not improve AUC. Reverting changes.
Training on augumented user 15631 42/50 current_auc = 0.5870294591923431
User 15631 AUC after training: 0.5872201896901497
User 15631 improves AUC. Keeping the model.
Training on augumented user 38588 43/50 current_auc = 0.5872201896901497
User 38588 AUC after training: 0.5873589027794636
User 38588 improves AUC. Keeping the model.
Training on augumented user 105100 44/50 current_auc = 0.5873589027794636
User 105100 AUC after training: 0.5871595027135749
User 105100 does not improve AUC. Reverting changes.
Training on augumented user 84019 45/50 current_auc = 0.5873589027794636
User 84019 AUC after training: 0.5871551679295337
User 84019 does not improve AUC. Reverting changes.
Training on augumented user 137020 46/50 current_auc = 0.5873589027794636
User 137020 AUC after training: 0.5875669724134344
User 137020 improves AUC. Keeping the model.
Training on augumented user 17786 47/50 current_auc = 0.5875669724134344
User 17786 AUC after training: 0.5872071853380265
User 17786 does not improve AUC. Reverting changes.
Training on augumented user 60842 48/50 current_auc = 0.5875669724134344
User 60842 AUC after training: 0.587168172281657
User 60842 does not improve AUC. Reverting changes.
Training on augumented user 45681 49/50 current_auc = 0.5875669724134344
User 45681 AUC after training: 0.5875106202209006
User 45681 does not improve AUC. Reverting changes.
[2024-12-02 18:43:29.655961] start test user 16670 120/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:30.290020] start test user 16670 120/568 recall augumented users by random, augumented_users = [20821, 105296, 32378, 79780, 134268, 53969, 15074, 41521, 73192, 74063, 74625, 103732, 113274, 19976, 21686, 128886, 19347, 64321, 59788, 81865, 22790, 34540, 8293, 12737, 55873, 93020, 14005, 70526, 110660, 118133, 50003, 25306, 7183, 115080, 36055, 103478, 118313, 47696, 40455, 54680, 103708, 111395, 120324, 122784, 29106, 19201, 44996, 138391, 72407, 48064]
[2024-12-02 18:43:30.305308] user = 16670 Cloud 120/568
[2024-12-02 18:43:30.314503] user = 16670 Local 120/568
[2024-12-02 18:43:30.458224] user = 16670 Local+ 120/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:32.881880] user = 16670 MPDA- 120/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.675
Training on augumented user 20821 0/50 current_auc = 0.675
User 20821 AUC after training: 0.675
User 20821 does not improve AUC. Reverting changes.
Training on augumented user 105296 1/50 current_auc = 0.675
User 105296 AUC after training: 0.675
User 105296 does not improve AUC. Reverting changes.
Training on augumented user 32378 2/50 current_auc = 0.675
User 32378 AUC after training: 0.675
User 32378 does not improve AUC. Reverting changes.
Training on augumented user 79780 3/50 current_auc = 0.675
User 79780 AUC after training: 0.675
User 79780 does not improve AUC. Reverting changes.
Training on augumented user 134268 4/50 current_auc = 0.675
User 134268 AUC after training: 0.675
User 134268 does not improve AUC. Reverting changes.
Training on augumented user 53969 5/50 current_auc = 0.675
User 53969 AUC after training: 0.675
User 53969 does not improve AUC. Reverting changes.
Training on augumented user 15074 6/50 current_auc = 0.675
User 15074 AUC after training: 0.675
User 15074 does not improve AUC. Reverting changes.
Training on augumented user 41521 7/50 current_auc = 0.675
User 41521 AUC after training: 0.675
User 41521 does not improve AUC. Reverting changes.
Training on augumented user 73192 8/50 current_auc = 0.675
User 73192 AUC after training: 0.675
User 73192 does not improve AUC. Reverting changes.
Training on augumented user 74063 9/50 current_auc = 0.675
User 74063 AUC after training: 0.675
User 74063 does not improve AUC. Reverting changes.
Training on augumented user 74625 10/50 current_auc = 0.675
User 74625 AUC after training: 0.675
User 74625 does not improve AUC. Reverting changes.
Training on augumented user 103732 11/50 current_auc = 0.675
User 103732 AUC after training: 0.675
User 103732 does not improve AUC. Reverting changes.
Training on augumented user 113274 12/50 current_auc = 0.675
User 113274 AUC after training: 0.675
User 113274 does not improve AUC. Reverting changes.
Training on augumented user 19976 13/50 current_auc = 0.675
User 19976 AUC after training: 0.675
User 19976 does not improve AUC. Reverting changes.
Training on augumented user 21686 14/50 current_auc = 0.675
User 21686 AUC after training: 0.675
User 21686 does not improve AUC. Reverting changes.
Training on augumented user 128886 15/50 current_auc = 0.675
User 128886 AUC after training: 0.675
User 128886 does not improve AUC. Reverting changes.
Training on augumented user 19347 16/50 current_auc = 0.675
User 19347 AUC after training: 0.675
User 19347 does not improve AUC. Reverting changes.
Training on augumented user 64321 17/50 current_auc = 0.675
User 64321 AUC after training: 0.675
User 64321 does not improve AUC. Reverting changes.
Training on augumented user 59788 18/50 current_auc = 0.675
User 59788 AUC after training: 0.675
User 59788 does not improve AUC. Reverting changes.
Training on augumented user 81865 19/50 current_auc = 0.675
User 81865 AUC after training: 0.675
User 81865 does not improve AUC. Reverting changes.
Training on augumented user 22790 20/50 current_auc = 0.675
User 22790 AUC after training: 0.675
User 22790 does not improve AUC. Reverting changes.
Training on augumented user 34540 21/50 current_auc = 0.675
User 34540 AUC after training: 0.675
User 34540 does not improve AUC. Reverting changes.
Training on augumented user 8293 22/50 current_auc = 0.675
User 8293 AUC after training: 0.675
User 8293 does not improve AUC. Reverting changes.
Training on augumented user 12737 23/50 current_auc = 0.675
User 12737 AUC after training: 0.675
User 12737 does not improve AUC. Reverting changes.
Training on augumented user 55873 24/50 current_auc = 0.675
User 55873 AUC after training: 0.675
User 55873 does not improve AUC. Reverting changes.
Training on augumented user 93020 25/50 current_auc = 0.675
User 93020 AUC after training: 0.675
User 93020 does not improve AUC. Reverting changes.
Training on augumented user 14005 26/50 current_auc = 0.675
User 14005 AUC after training: 0.675
User 14005 does not improve AUC. Reverting changes.
Training on augumented user 70526 27/50 current_auc = 0.675
User 70526 AUC after training: 0.675
User 70526 does not improve AUC. Reverting changes.
Training on augumented user 110660 28/50 current_auc = 0.675
User 110660 AUC after training: 0.675
User 110660 does not improve AUC. Reverting changes.
Training on augumented user 118133 29/50 current_auc = 0.675
User 118133 AUC after training: 0.675
User 118133 does not improve AUC. Reverting changes.
Training on augumented user 50003 30/50 current_auc = 0.675
User 50003 AUC after training: 0.675
User 50003 does not improve AUC. Reverting changes.
Training on augumented user 25306 31/50 current_auc = 0.675
User 25306 AUC after training: 0.675
User 25306 does not improve AUC. Reverting changes.
Training on augumented user 7183 32/50 current_auc = 0.675
User 7183 AUC after training: 0.675
User 7183 does not improve AUC. Reverting changes.
Training on augumented user 115080 33/50 current_auc = 0.675
User 115080 AUC after training: 0.675
User 115080 does not improve AUC. Reverting changes.
Training on augumented user 36055 34/50 current_auc = 0.675
User 36055 AUC after training: 0.675
User 36055 does not improve AUC. Reverting changes.
Training on augumented user 103478 35/50 current_auc = 0.675
User 103478 AUC after training: 0.675
User 103478 does not improve AUC. Reverting changes.
Training on augumented user 118313 36/50 current_auc = 0.675
User 118313 AUC after training: 0.675
User 118313 does not improve AUC. Reverting changes.
Training on augumented user 47696 37/50 current_auc = 0.675
User 47696 AUC after training: 0.675
User 47696 does not improve AUC. Reverting changes.
Training on augumented user 40455 38/50 current_auc = 0.675
User 40455 AUC after training: 0.675
User 40455 does not improve AUC. Reverting changes.
Training on augumented user 54680 39/50 current_auc = 0.675
User 54680 AUC after training: 0.675
User 54680 does not improve AUC. Reverting changes.
Training on augumented user 103708 40/50 current_auc = 0.675
User 103708 AUC after training: 0.675
User 103708 does not improve AUC. Reverting changes.
Training on augumented user 111395 41/50 current_auc = 0.675
User 111395 AUC after training: 0.675
User 111395 does not improve AUC. Reverting changes.
Training on augumented user 120324 42/50 current_auc = 0.675
User 120324 AUC after training: 0.675
User 120324 does not improve AUC. Reverting changes.
Training on augumented user 122784 43/50 current_auc = 0.675
User 122784 AUC after training: 0.675
User 122784 does not improve AUC. Reverting changes.
Training on augumented user 29106 44/50 current_auc = 0.675
User 29106 AUC after training: 0.675
User 29106 does not improve AUC. Reverting changes.
Training on augumented user 19201 45/50 current_auc = 0.675
User 19201 AUC after training: 0.675
User 19201 does not improve AUC. Reverting changes.
Training on augumented user 44996 46/50 current_auc = 0.675
User 44996 AUC after training: 0.675
User 44996 does not improve AUC. Reverting changes.
Training on augumented user 138391 47/50 current_auc = 0.675
User 138391 AUC after training: 0.675
User 138391 does not improve AUC. Reverting changes.
Training on augumented user 72407 48/50 current_auc = 0.675
User 72407 AUC after training: 0.675
User 72407 does not improve AUC. Reverting changes.
Training on augumented user 48064 49/50 current_auc = 0.675
User 48064 AUC after training: 0.675
User 48064 does not improve AUC. Reverting changes.
[2024-12-02 18:44:00.452450] start test user 16676 121/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:00.945765] start test user 16676 121/568 recall augumented users by random, augumented_users = [91783, 91156, 58471, 8114, 40650, 8030, 42316, 76535, 15599, 130354, 63925, 21453, 29042, 127581, 136562, 73465, 8757, 121816, 120530, 126136, 71304, 78267, 77720, 96751, 96310, 37045, 96333, 58926, 132636, 22068, 91343, 100484, 4993, 91664, 129634, 94902, 21554, 32537, 94096, 21081, 67333, 132151, 96869, 128488, 120878, 52835, 28130, 9174, 33289, 61370]
[2024-12-02 18:44:00.963826] user = 16676 Cloud 121/568
[2024-12-02 18:44:01.049992] user = 16676 Local 121/568
[2024-12-02 18:44:01.273740] user = 16676 Local+ 121/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:03.774405] user = 16676 MPDA- 121/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5289762734497134
Training on augumented user 91783 0/50 current_auc = 0.5289762734497134
User 91783 AUC after training: 0.5289416688379364
User 91783 does not improve AUC. Reverting changes.
Training on augumented user 91156 1/50 current_auc = 0.5289762734497134
User 91156 AUC after training: 0.5289457399687337
User 91156 does not improve AUC. Reverting changes.
Training on augumented user 58471 2/50 current_auc = 0.5289762734497134
User 58471 AUC after training: 0.5289620244919229
User 58471 does not improve AUC. Reverting changes.
Training on augumented user 8114 3/50 current_auc = 0.5289762734497134
User 8114 AUC after training: 0.5291085852006253
User 8114 improves AUC. Keeping the model.
Training on augumented user 40650 4/50 current_auc = 0.5291085852006253
User 40650 AUC after training: 0.5289131709223555
User 40650 does not improve AUC. Reverting changes.
Training on augumented user 8030 5/50 current_auc = 0.5291085852006253
User 8030 AUC after training: 0.5289579533611256
User 8030 does not improve AUC. Reverting changes.
Training on augumented user 42316 6/50 current_auc = 0.5291085852006253
User 42316 AUC after training: 0.5291981500781657
User 42316 improves AUC. Keeping the model.
Training on augumented user 76535 7/50 current_auc = 0.5291981500781657
User 76535 AUC after training: 0.5290515893694634
User 76535 does not improve AUC. Reverting changes.
Training on augumented user 15599 8/50 current_auc = 0.5291981500781657
User 15599 AUC after training: 0.5290353048462741
User 15599 does not improve AUC. Reverting changes.
Training on augumented user 130354 9/50 current_auc = 0.5291981500781657
User 130354 AUC after training: 0.5291839011203752
User 130354 does not improve AUC. Reverting changes.
Training on augumented user 63925 10/50 current_auc = 0.5291981500781657
User 63925 AUC after training: 0.5291004429390307
User 63925 does not improve AUC. Reverting changes.
Training on augumented user 21453 11/50 current_auc = 0.5291981500781657
User 21453 AUC after training: 0.5291370831162063
User 21453 does not improve AUC. Reverting changes.
Training on augumented user 29042 12/50 current_auc = 0.5291981500781657
User 29042 AUC after training: 0.5289905224075039
User 29042 does not improve AUC. Reverting changes.
Training on augumented user 127581 13/50 current_auc = 0.5291981500781657
User 127581 AUC after training: 0.5291533676393956
User 127581 does not improve AUC. Reverting changes.
Training on augumented user 136562 14/50 current_auc = 0.5291981500781657
User 136562 AUC after training: 0.5289823801459094
User 136562 does not improve AUC. Reverting changes.
Training on augumented user 73465 15/50 current_auc = 0.5291981500781657
User 73465 AUC after training: 0.5292266479937467
User 73465 improves AUC. Keeping the model.
Training on augumented user 8757 16/50 current_auc = 0.5292266479937467
User 8757 AUC after training: 0.5289620244919229
User 8757 does not improve AUC. Reverting changes.
Training on augumented user 121816 17/50 current_auc = 0.5292266479937467
User 121816 AUC after training: 0.5292999283480979
User 121816 improves AUC. Keeping the model.
Training on augumented user 120530 18/50 current_auc = 0.5292999283480979
User 120530 AUC after training: 0.529173723293382
User 120530 does not improve AUC. Reverting changes.
Training on augumented user 126136 19/50 current_auc = 0.5292999283480979
User 126136 AUC after training: 0.5292001856435644
User 126136 does not improve AUC. Reverting changes.
Training on augumented user 71304 20/50 current_auc = 0.5292999283480979
User 71304 AUC after training: 0.5286241206357478
User 71304 does not improve AUC. Reverting changes.
Training on augumented user 78267 21/50 current_auc = 0.5292999283480979
User 78267 AUC after training: 0.5293202840020844
User 78267 improves AUC. Keeping the model.
Training on augumented user 77720 22/50 current_auc = 0.5293202840020844
User 77720 AUC after training: 0.528990522407504
User 77720 does not improve AUC. Reverting changes.
Training on augumented user 96751 23/50 current_auc = 0.5293202840020844
User 96751 AUC after training: 0.5293182484366858
User 96751 does not improve AUC. Reverting changes.
Training on augumented user 96310 24/50 current_auc = 0.5293202840020844
User 96310 AUC after training: 0.529391528791037
User 96310 improves AUC. Keeping the model.
Training on augumented user 37045 25/50 current_auc = 0.529391528791037
User 37045 AUC after training: 0.5294587024491924
User 37045 improves AUC. Keeping the model.
Training on augumented user 96333 26/50 current_auc = 0.5294587024491924
User 96333 AUC after training: 0.5292103634705576
User 96333 does not improve AUC. Reverting changes.
Training on augumented user 58926 27/50 current_auc = 0.5294587024491924
User 58926 AUC after training: 0.5291126563314226
User 58926 does not improve AUC. Reverting changes.
Training on augumented user 132636 28/50 current_auc = 0.5294587024491924
User 132636 AUC after training: 0.5292368258207399
User 132636 does not improve AUC. Reverting changes.
Training on augumented user 22068 29/50 current_auc = 0.5294587024491924
User 22068 AUC after training: 0.5292144346013549
User 22068 does not improve AUC. Reverting changes.
Training on augumented user 91343 30/50 current_auc = 0.5294587024491924
User 91343 AUC after training: 0.5296093342886921
User 91343 improves AUC. Keeping the model.
Training on augumented user 100484 31/50 current_auc = 0.5296093342886921
User 100484 AUC after training: 0.529650045596665
User 100484 improves AUC. Keeping the model.
Training on augumented user 4993 32/50 current_auc = 0.529650045596665
User 4993 AUC after training: 0.5293874576602398
User 4993 does not improve AUC. Reverting changes.
Training on augumented user 91664 33/50 current_auc = 0.529650045596665
User 91664 AUC after training: 0.5293732087024492
User 91664 does not improve AUC. Reverting changes.
Training on augumented user 129634 34/50 current_auc = 0.529650045596665
User 129634 AUC after training: 0.5296459744658676
User 129634 does not improve AUC. Reverting changes.
Training on augumented user 94902 35/50 current_auc = 0.529650045596665
User 94902 AUC after training: 0.5289742378843147
User 94902 does not improve AUC. Reverting changes.
Training on augumented user 21554 36/50 current_auc = 0.529650045596665
User 21554 AUC after training: 0.5293935643564357
User 21554 does not improve AUC. Reverting changes.
Training on augumented user 32537 37/50 current_auc = 0.529650045596665
User 32537 AUC after training: 0.5293772798332465
User 32537 does not improve AUC. Reverting changes.
Training on augumented user 94096 38/50 current_auc = 0.529650045596665
User 94096 AUC after training: 0.5300693720687859
User 94096 improves AUC. Keeping the model.
Training on augumented user 21081 39/50 current_auc = 0.5300693720687859
User 21081 AUC after training: 0.5298780289213132
User 21081 does not improve AUC. Reverting changes.
Training on augumented user 67333 40/50 current_auc = 0.5300693720687859
User 67333 AUC after training: 0.5298454598749349
User 67333 does not improve AUC. Reverting changes.
Training on augumented user 132151 41/50 current_auc = 0.5300693720687859
User 132151 AUC after training: 0.529397635487233
User 132151 does not improve AUC. Reverting changes.
Training on augumented user 96869 42/50 current_auc = 0.5300693720687859
User 96869 AUC after training: 0.530120261203752
User 96869 improves AUC. Keeping the model.
Training on augumented user 128488 43/50 current_auc = 0.530120261203752
User 128488 AUC after training: 0.530205754950495
User 128488 improves AUC. Keeping the model.
Training on augumented user 120878 44/50 current_auc = 0.530205754950495
User 120878 AUC after training: 0.529959451537259
User 120878 does not improve AUC. Reverting changes.
Training on augumented user 52835 45/50 current_auc = 0.530205754950495
User 52835 AUC after training: 0.5290597316310579
User 52835 does not improve AUC. Reverting changes.
Training on augumented user 28130 46/50 current_auc = 0.530205754950495
User 28130 AUC after training: 0.5296948280354351
User 28130 does not improve AUC. Reverting changes.
Training on augumented user 9174 47/50 current_auc = 0.530205754950495
User 9174 AUC after training: 0.5296704012506515
User 9174 does not improve AUC. Reverting changes.
Training on augumented user 33289 48/50 current_auc = 0.530205754950495
User 33289 AUC after training: 0.5299635226680562
User 33289 does not improve AUC. Reverting changes.
Training on augumented user 61370 49/50 current_auc = 0.530205754950495
User 61370 AUC after training: 0.5296704012506515
User 61370 does not improve AUC. Reverting changes.
[2024-12-02 18:44:37.426143] start test user 16687 122/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:37.839763] start test user 16687 122/568 recall augumented users by random, augumented_users = [26695, 37174, 33053, 97008, 31932, 133648, 14639, 123638, 72079, 82818, 79915, 90744, 135327, 95265, 128639, 80125, 13912, 4443, 60442, 28639, 40473, 125443, 84368, 45827, 128929, 22982, 86404, 102631, 52744, 46568, 40986, 9340, 85612, 23415, 73581, 48262, 78120, 126859, 85509, 88995, 82373, 71638, 127493, 90362, 62247, 50513, 46341, 78416, 64224, 31687]
[2024-12-02 18:44:37.854493] user = 16687 Cloud 122/568
[2024-12-02 18:44:37.865778] user = 16687 Local 122/568
[2024-12-02 18:44:37.928698] user = 16687 Local+ 122/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:40.684412] user = 16687 MPDA- 122/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5483870967741935
Training on augumented user 26695 0/50 current_auc = 0.5483870967741935
User 26695 AUC after training: 0.5513196480938416
User 26695 improves AUC. Keeping the model.
Training on augumented user 37174 1/50 current_auc = 0.5513196480938416
User 37174 AUC after training: 0.5483870967741935
User 37174 does not improve AUC. Reverting changes.
Training on augumented user 33053 2/50 current_auc = 0.5513196480938416
User 33053 AUC after training: 0.5454545454545454
User 33053 does not improve AUC. Reverting changes.
Training on augumented user 97008 3/50 current_auc = 0.5513196480938416
User 97008 AUC after training: 0.5483870967741935
User 97008 does not improve AUC. Reverting changes.
Training on augumented user 31932 4/50 current_auc = 0.5513196480938416
User 31932 AUC after training: 0.5542521994134898
User 31932 improves AUC. Keeping the model.
Training on augumented user 133648 5/50 current_auc = 0.5542521994134898
User 133648 AUC after training: 0.5483870967741935
User 133648 does not improve AUC. Reverting changes.
Training on augumented user 14639 6/50 current_auc = 0.5542521994134898
User 14639 AUC after training: 0.5513196480938417
User 14639 does not improve AUC. Reverting changes.
Training on augumented user 123638 7/50 current_auc = 0.5542521994134898
User 123638 AUC after training: 0.5454545454545454
User 123638 does not improve AUC. Reverting changes.
Training on augumented user 72079 8/50 current_auc = 0.5542521994134898
User 72079 AUC after training: 0.5483870967741935
User 72079 does not improve AUC. Reverting changes.
Training on augumented user 82818 9/50 current_auc = 0.5542521994134898
User 82818 AUC after training: 0.5513196480938417
User 82818 does not improve AUC. Reverting changes.
Training on augumented user 79915 10/50 current_auc = 0.5542521994134898
User 79915 AUC after training: 0.5542521994134898
User 79915 does not improve AUC. Reverting changes.
Training on augumented user 90744 11/50 current_auc = 0.5542521994134898
User 90744 AUC after training: 0.5395894428152492
User 90744 does not improve AUC. Reverting changes.
Training on augumented user 135327 12/50 current_auc = 0.5542521994134898
User 135327 AUC after training: 0.5454545454545454
User 135327 does not improve AUC. Reverting changes.
Training on augumented user 95265 13/50 current_auc = 0.5542521994134898
User 95265 AUC after training: 0.5454545454545455
User 95265 does not improve AUC. Reverting changes.
Training on augumented user 128639 14/50 current_auc = 0.5542521994134898
User 128639 AUC after training: 0.5483870967741935
User 128639 does not improve AUC. Reverting changes.
Training on augumented user 80125 15/50 current_auc = 0.5542521994134898
User 80125 AUC after training: 0.5513196480938416
User 80125 does not improve AUC. Reverting changes.
Training on augumented user 13912 16/50 current_auc = 0.5542521994134898
User 13912 AUC after training: 0.5513196480938416
User 13912 does not improve AUC. Reverting changes.
Training on augumented user 4443 17/50 current_auc = 0.5542521994134898
User 4443 AUC after training: 0.5542521994134898
User 4443 does not improve AUC. Reverting changes.
Training on augumented user 60442 18/50 current_auc = 0.5542521994134898
User 60442 AUC after training: 0.5601173020527859
User 60442 improves AUC. Keeping the model.
Training on augumented user 28639 19/50 current_auc = 0.5601173020527859
User 28639 AUC after training: 0.5571847507331378
User 28639 does not improve AUC. Reverting changes.
Training on augumented user 40473 20/50 current_auc = 0.5601173020527859
User 40473 AUC after training: 0.5601173020527859
User 40473 does not improve AUC. Reverting changes.
Training on augumented user 125443 21/50 current_auc = 0.5601173020527859
User 125443 AUC after training: 0.5542521994134897
User 125443 does not improve AUC. Reverting changes.
Training on augumented user 84368 22/50 current_auc = 0.5601173020527859
User 84368 AUC after training: 0.5601173020527859
User 84368 does not improve AUC. Reverting changes.
Training on augumented user 45827 23/50 current_auc = 0.5601173020527859
User 45827 AUC after training: 0.5542521994134897
User 45827 does not improve AUC. Reverting changes.
Training on augumented user 128929 24/50 current_auc = 0.5601173020527859
User 128929 AUC after training: 0.5601173020527859
User 128929 does not improve AUC. Reverting changes.
Training on augumented user 22982 25/50 current_auc = 0.5601173020527859
User 22982 AUC after training: 0.5571847507331379
User 22982 does not improve AUC. Reverting changes.
Training on augumented user 86404 26/50 current_auc = 0.5601173020527859
User 86404 AUC after training: 0.5601173020527859
User 86404 does not improve AUC. Reverting changes.
Training on augumented user 102631 27/50 current_auc = 0.5601173020527859
User 102631 AUC after training: 0.5571847507331378
User 102631 does not improve AUC. Reverting changes.
Training on augumented user 52744 28/50 current_auc = 0.5601173020527859
User 52744 AUC after training: 0.5571847507331378
User 52744 does not improve AUC. Reverting changes.
Training on augumented user 46568 29/50 current_auc = 0.5601173020527859
User 46568 AUC after training: 0.5601173020527859
User 46568 does not improve AUC. Reverting changes.
Training on augumented user 40986 30/50 current_auc = 0.5601173020527859
User 40986 AUC after training: 0.5542521994134897
User 40986 does not improve AUC. Reverting changes.
Training on augumented user 9340 31/50 current_auc = 0.5601173020527859
User 9340 AUC after training: 0.5571847507331378
User 9340 does not improve AUC. Reverting changes.
Training on augumented user 85612 32/50 current_auc = 0.5601173020527859
User 85612 AUC after training: 0.5513196480938416
User 85612 does not improve AUC. Reverting changes.
Training on augumented user 23415 33/50 current_auc = 0.5601173020527859
User 23415 AUC after training: 0.563049853372434
User 23415 improves AUC. Keeping the model.
Training on augumented user 73581 34/50 current_auc = 0.563049853372434
User 73581 AUC after training: 0.5601173020527859
User 73581 does not improve AUC. Reverting changes.
Training on augumented user 48262 35/50 current_auc = 0.563049853372434
User 48262 AUC after training: 0.5542521994134898
User 48262 does not improve AUC. Reverting changes.
Training on augumented user 78120 36/50 current_auc = 0.563049853372434
User 78120 AUC after training: 0.5513196480938416
User 78120 does not improve AUC. Reverting changes.
Training on augumented user 126859 37/50 current_auc = 0.563049853372434
User 126859 AUC after training: 0.5601173020527859
User 126859 does not improve AUC. Reverting changes.
Training on augumented user 85509 38/50 current_auc = 0.563049853372434
User 85509 AUC after training: 0.560117302052786
User 85509 does not improve AUC. Reverting changes.
Training on augumented user 88995 39/50 current_auc = 0.563049853372434
User 88995 AUC after training: 0.563049853372434
User 88995 does not improve AUC. Reverting changes.
Training on augumented user 82373 40/50 current_auc = 0.563049853372434
User 82373 AUC after training: 0.563049853372434
User 82373 does not improve AUC. Reverting changes.
Training on augumented user 71638 41/50 current_auc = 0.563049853372434
User 71638 AUC after training: 0.5571847507331378
User 71638 does not improve AUC. Reverting changes.
Training on augumented user 127493 42/50 current_auc = 0.563049853372434
User 127493 AUC after training: 0.563049853372434
User 127493 does not improve AUC. Reverting changes.
Training on augumented user 90362 43/50 current_auc = 0.563049853372434
User 90362 AUC after training: 0.563049853372434
User 90362 does not improve AUC. Reverting changes.
Training on augumented user 62247 44/50 current_auc = 0.563049853372434
User 62247 AUC after training: 0.5601173020527859
User 62247 does not improve AUC. Reverting changes.
Training on augumented user 50513 45/50 current_auc = 0.563049853372434
User 50513 AUC after training: 0.5601173020527859
User 50513 does not improve AUC. Reverting changes.
Training on augumented user 46341 46/50 current_auc = 0.563049853372434
User 46341 AUC after training: 0.5601173020527859
User 46341 does not improve AUC. Reverting changes.
Training on augumented user 78416 47/50 current_auc = 0.563049853372434
User 78416 AUC after training: 0.5601173020527859
User 78416 does not improve AUC. Reverting changes.
Training on augumented user 64224 48/50 current_auc = 0.563049853372434
User 64224 AUC after training: 0.563049853372434
User 64224 does not improve AUC. Reverting changes.
Training on augumented user 31687 49/50 current_auc = 0.563049853372434
User 31687 AUC after training: 0.5601173020527859
User 31687 does not improve AUC. Reverting changes.
[2024-12-02 18:45:13.033511] start test user 16724 123/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:13.741953] start test user 16724 123/568 recall augumented users by random, augumented_users = [59869, 26469, 47524, 86524, 66286, 56999, 59345, 61944, 30029, 116863, 78009, 117677, 31877, 28274, 10279, 28021, 76770, 5613, 6347, 126706, 100753, 8933, 62365, 34365, 24407, 10605, 84774, 72186, 84592, 42419, 27084, 31041, 137023, 5827, 107326, 111603, 23377, 112332, 26835, 14836, 96574, 51208, 120072, 80119, 48348, 99992, 12661, 29841, 37420, 47899]
[2024-12-02 18:45:13.766258] user = 16724 Cloud 123/568
[2024-12-02 18:45:13.859595] user = 16724 Local 123/568
[2024-12-02 18:45:14.009807] user = 16724 Local+ 123/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:17.206665] user = 16724 MPDA- 123/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.63753313581787
Training on augumented user 59869 0/50 current_auc = 0.63753313581787
User 59869 AUC after training: 0.6376111024481522
User 59869 improves AUC. Keeping the model.
Training on augumented user 26469 1/50 current_auc = 0.6376111024481522
User 26469 AUC after training: 0.637845002338999
User 26469 improves AUC. Keeping the model.
Training on augumented user 47524 2/50 current_auc = 0.637845002338999
User 47524 AUC after training: 0.6392484016840791
User 47524 improves AUC. Keeping the model.
Training on augumented user 86524 3/50 current_auc = 0.6392484016840791
User 86524 AUC after training: 0.6397162014657727
User 86524 improves AUC. Keeping the model.
Training on augumented user 66286 4/50 current_auc = 0.6397162014657727
User 66286 AUC after training: 0.6405738343988774
User 66286 improves AUC. Keeping the model.
Training on augumented user 56999 5/50 current_auc = 0.6405738343988774
User 56999 AUC after training: 0.6395602682052082
User 56999 does not improve AUC. Reverting changes.
Training on augumented user 59345 6/50 current_auc = 0.6405738343988774
User 59345 AUC after training: 0.6376500857632934
User 59345 does not improve AUC. Reverting changes.
Training on augumented user 61944 7/50 current_auc = 0.6405738343988774
User 61944 AUC after training: 0.6397162014657727
User 61944 does not improve AUC. Reverting changes.
Training on augumented user 30029 8/50 current_auc = 0.6405738343988774
User 30029 AUC after training: 0.6403399345080306
User 30029 does not improve AUC. Reverting changes.
Training on augumented user 116863 9/50 current_auc = 0.6405738343988774
User 116863 AUC after training: 0.6399501013566193
User 116863 does not improve AUC. Reverting changes.
Training on augumented user 78009 10/50 current_auc = 0.6405738343988774
User 78009 AUC after training: 0.6404179011383129
User 78009 does not improve AUC. Reverting changes.
Training on augumented user 117677 11/50 current_auc = 0.6405738343988774
User 117677 AUC after training: 0.6396382348354904
User 117677 does not improve AUC. Reverting changes.
Training on augumented user 31877 12/50 current_auc = 0.6405738343988774
User 31877 AUC after training: 0.6404179011383128
User 31877 does not improve AUC. Reverting changes.
Training on augumented user 28274 13/50 current_auc = 0.6405738343988774
User 28274 AUC after training: 0.6383128021206923
User 28274 does not improve AUC. Reverting changes.
Training on augumented user 10279 14/50 current_auc = 0.6405738343988774
User 10279 AUC after training: 0.6398721347263372
User 10279 does not improve AUC. Reverting changes.
Training on augumented user 28021 15/50 current_auc = 0.6405738343988774
User 28021 AUC after training: 0.6418213004833931
User 28021 improves AUC. Keeping the model.
Training on augumented user 76770 16/50 current_auc = 0.6418213004833931
User 76770 AUC after training: 0.6405738343988773
User 76770 does not improve AUC. Reverting changes.
Training on augumented user 5613 17/50 current_auc = 0.6418213004833931
User 5613 AUC after training: 0.6388585685326681
User 5613 does not improve AUC. Reverting changes.
Training on augumented user 6347 18/50 current_auc = 0.6418213004833931
User 6347 AUC after training: 0.6406518010291595
User 6347 does not improve AUC. Reverting changes.
Training on augumented user 126706 19/50 current_auc = 0.6418213004833931
User 126706 AUC after training: 0.6430687665679091
User 126706 improves AUC. Keeping the model.
Training on augumented user 100753 20/50 current_auc = 0.6430687665679091
User 100753 AUC after training: 0.6415094339622641
User 100753 does not improve AUC. Reverting changes.
Training on augumented user 8933 21/50 current_auc = 0.6430687665679091
User 8933 AUC after training: 0.6404179011383129
User 8933 does not improve AUC. Reverting changes.
Training on augumented user 62365 22/50 current_auc = 0.6430687665679091
User 62365 AUC after training: 0.6406518010291595
User 62365 does not improve AUC. Reverting changes.
Training on augumented user 34365 23/50 current_auc = 0.6430687665679091
User 34365 AUC after training: 0.6429128333073445
User 34365 does not improve AUC. Reverting changes.
Training on augumented user 24407 24/50 current_auc = 0.6430687665679091
User 24407 AUC after training: 0.6418992671136754
User 24407 does not improve AUC. Reverting changes.
Training on augumented user 10605 25/50 current_auc = 0.6430687665679091
User 10605 AUC after training: 0.6422891002650865
User 10605 does not improve AUC. Reverting changes.
Training on augumented user 84774 26/50 current_auc = 0.6430687665679091
User 84774 AUC after training: 0.6432246998284735
User 84774 improves AUC. Keeping the model.
Training on augumented user 72186 27/50 current_auc = 0.6432246998284735
User 72186 AUC after training: 0.6429128333073444
User 72186 does not improve AUC. Reverting changes.
Training on augumented user 84592 28/50 current_auc = 0.6432246998284735
User 84592 AUC after training: 0.6433026664587557
User 84592 improves AUC. Keeping the model.
Training on augumented user 42419 29/50 current_auc = 0.6433026664587557
User 42419 AUC after training: 0.6435365663496024
User 42419 improves AUC. Keeping the model.
Training on augumented user 27084 30/50 current_auc = 0.6435365663496024
User 27084 AUC after training: 0.6415094339622642
User 27084 does not improve AUC. Reverting changes.
Training on augumented user 31041 31/50 current_auc = 0.6435365663496024
User 31041 AUC after training: 0.64275690004678
User 31041 does not improve AUC. Reverting changes.
Training on augumented user 137023 32/50 current_auc = 0.6435365663496024
User 137023 AUC after training: 0.6430687665679089
User 137023 does not improve AUC. Reverting changes.
Training on augumented user 5827 33/50 current_auc = 0.6435365663496024
User 5827 AUC after training: 0.642445033525651
User 5827 does not improve AUC. Reverting changes.
Training on augumented user 107326 34/50 current_auc = 0.6435365663496024
User 107326 AUC after training: 0.6389365351629502
User 107326 does not improve AUC. Reverting changes.
Training on augumented user 111603 35/50 current_auc = 0.6435365663496024
User 111603 AUC after training: 0.6425230001559332
User 111603 does not improve AUC. Reverting changes.
Training on augumented user 23377 36/50 current_auc = 0.6435365663496024
User 23377 AUC after training: 0.6427569000467799
User 23377 does not improve AUC. Reverting changes.
Training on augumented user 112332 37/50 current_auc = 0.6435365663496024
User 112332 AUC after training: 0.6416653672228286
User 112332 does not improve AUC. Reverting changes.
Training on augumented user 26835 38/50 current_auc = 0.6435365663496024
User 26835 AUC after training: 0.6397162014657726
User 26835 does not improve AUC. Reverting changes.
Training on augumented user 14836 39/50 current_auc = 0.6435365663496024
User 14836 AUC after training: 0.6390924684235146
User 14836 does not improve AUC. Reverting changes.
Training on augumented user 96574 40/50 current_auc = 0.6435365663496024
User 96574 AUC after training: 0.641119600810853
User 96574 does not improve AUC. Reverting changes.
Training on augumented user 51208 41/50 current_auc = 0.6435365663496024
User 51208 AUC after training: 0.6402619678777483
User 51208 does not improve AUC. Reverting changes.
Training on augumented user 120072 42/50 current_auc = 0.6435365663496024
User 120072 AUC after training: 0.6430687665679089
User 120072 does not improve AUC. Reverting changes.
Training on augumented user 80119 43/50 current_auc = 0.6435365663496024
User 80119 AUC after training: 0.6411975674411352
User 80119 does not improve AUC. Reverting changes.
Training on augumented user 48348 44/50 current_auc = 0.6435365663496024
User 48348 AUC after training: 0.6447840324341182
User 48348 improves AUC. Keeping the model.
Training on augumented user 99992 45/50 current_auc = 0.6447840324341182
User 99992 AUC after training: 0.6451738655855294
User 99992 improves AUC. Keeping the model.
Training on augumented user 12661 46/50 current_auc = 0.6451738655855294
User 12661 AUC after training: 0.6458755652580696
User 12661 improves AUC. Keeping the model.
Training on augumented user 29841 47/50 current_auc = 0.6458755652580696
User 29841 AUC after training: 0.6453297988460938
User 29841 does not improve AUC. Reverting changes.
Training on augumented user 37420 48/50 current_auc = 0.6458755652580696
User 37420 AUC after training: 0.6454857321066583
User 37420 does not improve AUC. Reverting changes.
Training on augumented user 47899 49/50 current_auc = 0.6458755652580696
User 47899 AUC after training: 0.6445501325432714
User 47899 does not improve AUC. Reverting changes.
[2024-12-02 18:45:45.858992] start test user 16734 124/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:46.300074] start test user 16734 124/568 recall augumented users by random, augumented_users = [84106, 128018, 81923, 120688, 33844, 106683, 65056, 69070, 30084, 821, 94886, 63446, 124271, 77143, 109308, 79787, 30326, 136181, 126613, 87911, 91762, 70837, 73818, 136364, 37962, 87331, 127116, 41513, 12647, 63502, 114803, 120866, 3524, 57639, 73817, 48963, 121737, 91058, 80850, 84735, 60684, 128859, 102231, 53147, 112912, 68480, 135923, 104767, 97569, 33883]
[2024-12-02 18:45:46.315728] user = 16734 Cloud 124/568
[2024-12-02 18:45:46.327667] user = 16734 Local 124/568
[2024-12-02 18:45:46.447378] user = 16734 Local+ 124/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:49.380754] user = 16734 MPDA- 124/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7925170068027211
Training on augumented user 84106 0/50 current_auc = 0.7925170068027211
User 84106 AUC after training: 0.7891156462585034
User 84106 does not improve AUC. Reverting changes.
Training on augumented user 128018 1/50 current_auc = 0.7925170068027211
User 128018 AUC after training: 0.7925170068027211
User 128018 does not improve AUC. Reverting changes.
Training on augumented user 81923 2/50 current_auc = 0.7925170068027211
User 81923 AUC after training: 0.7925170068027211
User 81923 does not improve AUC. Reverting changes.
Training on augumented user 120688 3/50 current_auc = 0.7925170068027211
User 120688 AUC after training: 0.7925170068027211
User 120688 does not improve AUC. Reverting changes.
Training on augumented user 33844 4/50 current_auc = 0.7925170068027211
User 33844 AUC after training: 0.7959183673469388
User 33844 improves AUC. Keeping the model.
Training on augumented user 106683 5/50 current_auc = 0.7959183673469388
User 106683 AUC after training: 0.7959183673469388
User 106683 does not improve AUC. Reverting changes.
Training on augumented user 65056 6/50 current_auc = 0.7959183673469388
User 65056 AUC after training: 0.7857142857142857
User 65056 does not improve AUC. Reverting changes.
Training on augumented user 69070 7/50 current_auc = 0.7959183673469388
User 69070 AUC after training: 0.7959183673469388
User 69070 does not improve AUC. Reverting changes.
Training on augumented user 30084 8/50 current_auc = 0.7959183673469388
User 30084 AUC after training: 0.7959183673469388
User 30084 does not improve AUC. Reverting changes.
Training on augumented user 821 9/50 current_auc = 0.7959183673469388
User 821 AUC after training: 0.7925170068027211
User 821 does not improve AUC. Reverting changes.
Training on augumented user 94886 10/50 current_auc = 0.7959183673469388
User 94886 AUC after training: 0.7959183673469388
User 94886 does not improve AUC. Reverting changes.
Training on augumented user 63446 11/50 current_auc = 0.7959183673469388
User 63446 AUC after training: 0.7925170068027211
User 63446 does not improve AUC. Reverting changes.
Training on augumented user 124271 12/50 current_auc = 0.7959183673469388
User 124271 AUC after training: 0.7959183673469388
User 124271 does not improve AUC. Reverting changes.
Training on augumented user 77143 13/50 current_auc = 0.7959183673469388
User 77143 AUC after training: 0.7959183673469388
User 77143 does not improve AUC. Reverting changes.
Training on augumented user 109308 14/50 current_auc = 0.7959183673469388
User 109308 AUC after training: 0.7925170068027211
User 109308 does not improve AUC. Reverting changes.
Training on augumented user 79787 15/50 current_auc = 0.7959183673469388
User 79787 AUC after training: 0.7959183673469388
User 79787 does not improve AUC. Reverting changes.
Training on augumented user 30326 16/50 current_auc = 0.7959183673469388
User 30326 AUC after training: 0.7959183673469388
User 30326 does not improve AUC. Reverting changes.
Training on augumented user 136181 17/50 current_auc = 0.7959183673469388
User 136181 AUC after training: 0.7959183673469388
User 136181 does not improve AUC. Reverting changes.
Training on augumented user 126613 18/50 current_auc = 0.7959183673469388
User 126613 AUC after training: 0.7959183673469388
User 126613 does not improve AUC. Reverting changes.
Training on augumented user 87911 19/50 current_auc = 0.7959183673469388
User 87911 AUC after training: 0.7925170068027211
User 87911 does not improve AUC. Reverting changes.
Training on augumented user 91762 20/50 current_auc = 0.7959183673469388
User 91762 AUC after training: 0.7891156462585034
User 91762 does not improve AUC. Reverting changes.
Training on augumented user 70837 21/50 current_auc = 0.7959183673469388
User 70837 AUC after training: 0.7891156462585034
User 70837 does not improve AUC. Reverting changes.
Training on augumented user 73818 22/50 current_auc = 0.7959183673469388
User 73818 AUC after training: 0.7959183673469388
User 73818 does not improve AUC. Reverting changes.
Training on augumented user 136364 23/50 current_auc = 0.7959183673469388
User 136364 AUC after training: 0.7925170068027211
User 136364 does not improve AUC. Reverting changes.
Training on augumented user 37962 24/50 current_auc = 0.7959183673469388
User 37962 AUC after training: 0.7925170068027211
User 37962 does not improve AUC. Reverting changes.
Training on augumented user 87331 25/50 current_auc = 0.7959183673469388
User 87331 AUC after training: 0.7959183673469388
User 87331 does not improve AUC. Reverting changes.
Training on augumented user 127116 26/50 current_auc = 0.7959183673469388
User 127116 AUC after training: 0.7857142857142857
User 127116 does not improve AUC. Reverting changes.
Training on augumented user 41513 27/50 current_auc = 0.7959183673469388
User 41513 AUC after training: 0.7959183673469388
User 41513 does not improve AUC. Reverting changes.
Training on augumented user 12647 28/50 current_auc = 0.7959183673469388
User 12647 AUC after training: 0.7959183673469388
User 12647 does not improve AUC. Reverting changes.
Training on augumented user 63502 29/50 current_auc = 0.7959183673469388
User 63502 AUC after training: 0.7925170068027211
User 63502 does not improve AUC. Reverting changes.
Training on augumented user 114803 30/50 current_auc = 0.7959183673469388
User 114803 AUC after training: 0.7959183673469388
User 114803 does not improve AUC. Reverting changes.
Training on augumented user 120866 31/50 current_auc = 0.7959183673469388
User 120866 AUC after training: 0.7959183673469388
User 120866 does not improve AUC. Reverting changes.
Training on augumented user 3524 32/50 current_auc = 0.7959183673469388
User 3524 AUC after training: 0.7925170068027211
User 3524 does not improve AUC. Reverting changes.
Training on augumented user 57639 33/50 current_auc = 0.7959183673469388
User 57639 AUC after training: 0.7959183673469388
User 57639 does not improve AUC. Reverting changes.
Training on augumented user 73817 34/50 current_auc = 0.7959183673469388
User 73817 AUC after training: 0.7959183673469388
User 73817 does not improve AUC. Reverting changes.
Training on augumented user 48963 35/50 current_auc = 0.7959183673469388
User 48963 AUC after training: 0.7959183673469388
User 48963 does not improve AUC. Reverting changes.
Training on augumented user 121737 36/50 current_auc = 0.7959183673469388
User 121737 AUC after training: 0.7959183673469388
User 121737 does not improve AUC. Reverting changes.
Training on augumented user 91058 37/50 current_auc = 0.7959183673469388
User 91058 AUC after training: 0.7925170068027211
User 91058 does not improve AUC. Reverting changes.
Training on augumented user 80850 38/50 current_auc = 0.7959183673469388
User 80850 AUC after training: 0.7925170068027211
User 80850 does not improve AUC. Reverting changes.
Training on augumented user 84735 39/50 current_auc = 0.7959183673469388
User 84735 AUC after training: 0.7857142857142857
User 84735 does not improve AUC. Reverting changes.
Training on augumented user 60684 40/50 current_auc = 0.7959183673469388
User 60684 AUC after training: 0.7959183673469388
User 60684 does not improve AUC. Reverting changes.
Training on augumented user 128859 41/50 current_auc = 0.7959183673469388
User 128859 AUC after training: 0.7959183673469388
User 128859 does not improve AUC. Reverting changes.
Training on augumented user 102231 42/50 current_auc = 0.7959183673469388
User 102231 AUC after training: 0.7925170068027211
User 102231 does not improve AUC. Reverting changes.
Training on augumented user 53147 43/50 current_auc = 0.7959183673469388
User 53147 AUC after training: 0.7959183673469388
User 53147 does not improve AUC. Reverting changes.
Training on augumented user 112912 44/50 current_auc = 0.7959183673469388
User 112912 AUC after training: 0.7925170068027211
User 112912 does not improve AUC. Reverting changes.
Training on augumented user 68480 45/50 current_auc = 0.7959183673469388
User 68480 AUC after training: 0.7959183673469388
User 68480 does not improve AUC. Reverting changes.
Training on augumented user 135923 46/50 current_auc = 0.7959183673469388
User 135923 AUC after training: 0.7959183673469388
User 135923 does not improve AUC. Reverting changes.
Training on augumented user 104767 47/50 current_auc = 0.7959183673469388
User 104767 AUC after training: 0.7959183673469388
User 104767 does not improve AUC. Reverting changes.
Training on augumented user 97569 48/50 current_auc = 0.7959183673469388
User 97569 AUC after training: 0.7959183673469388
User 97569 does not improve AUC. Reverting changes.
Training on augumented user 33883 49/50 current_auc = 0.7959183673469388
User 33883 AUC after training: 0.7959183673469388
User 33883 does not improve AUC. Reverting changes.
[2024-12-02 18:46:15.802722] start test user 16745 125/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:16.208542] start test user 16745 125/568 recall augumented users by random, augumented_users = [54972, 129290, 72125, 102513, 37314, 68719, 68422, 56685, 67311, 11173, 104619, 94577, 117384, 5543, 51755, 92226, 89128, 23929, 7252, 14312, 37410, 36406, 26797, 14759, 135386, 110688, 78432, 128032, 6882, 51035, 18105, 39181, 94988, 29153, 60746, 123341, 33851, 9033, 119585, 92311, 134172, 49554, 17611, 80528, 42876, 91281, 53516, 137978, 14432, 25432]
[2024-12-02 18:46:16.223282] user = 16745 Cloud 125/568
[2024-12-02 18:46:16.233828] user = 16745 Local 125/568
[2024-12-02 18:46:16.314615] user = 16745 Local+ 125/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:19.015628] user = 16745 MPDA- 125/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.441025641025641
Training on augumented user 54972 0/50 current_auc = 0.441025641025641
User 54972 AUC after training: 0.441025641025641
User 54972 does not improve AUC. Reverting changes.
Training on augumented user 129290 1/50 current_auc = 0.441025641025641
User 129290 AUC after training: 0.441025641025641
User 129290 does not improve AUC. Reverting changes.
Training on augumented user 72125 2/50 current_auc = 0.441025641025641
User 72125 AUC after training: 0.441025641025641
User 72125 does not improve AUC. Reverting changes.
Training on augumented user 102513 3/50 current_auc = 0.441025641025641
User 102513 AUC after training: 0.441025641025641
User 102513 does not improve AUC. Reverting changes.
Training on augumented user 37314 4/50 current_auc = 0.441025641025641
User 37314 AUC after training: 0.4358974358974359
User 37314 does not improve AUC. Reverting changes.
Training on augumented user 68719 5/50 current_auc = 0.441025641025641
User 68719 AUC after training: 0.441025641025641
User 68719 does not improve AUC. Reverting changes.
Training on augumented user 68422 6/50 current_auc = 0.441025641025641
User 68422 AUC after training: 0.441025641025641
User 68422 does not improve AUC. Reverting changes.
Training on augumented user 56685 7/50 current_auc = 0.441025641025641
User 56685 AUC after training: 0.4358974358974359
User 56685 does not improve AUC. Reverting changes.
Training on augumented user 67311 8/50 current_auc = 0.441025641025641
User 67311 AUC after training: 0.441025641025641
User 67311 does not improve AUC. Reverting changes.
Training on augumented user 11173 9/50 current_auc = 0.441025641025641
User 11173 AUC after training: 0.441025641025641
User 11173 does not improve AUC. Reverting changes.
Training on augumented user 104619 10/50 current_auc = 0.441025641025641
User 104619 AUC after training: 0.441025641025641
User 104619 does not improve AUC. Reverting changes.
Training on augumented user 94577 11/50 current_auc = 0.441025641025641
User 94577 AUC after training: 0.441025641025641
User 94577 does not improve AUC. Reverting changes.
Training on augumented user 117384 12/50 current_auc = 0.441025641025641
User 117384 AUC after training: 0.441025641025641
User 117384 does not improve AUC. Reverting changes.
Training on augumented user 5543 13/50 current_auc = 0.441025641025641
User 5543 AUC after training: 0.441025641025641
User 5543 does not improve AUC. Reverting changes.
Training on augumented user 51755 14/50 current_auc = 0.441025641025641
User 51755 AUC after training: 0.441025641025641
User 51755 does not improve AUC. Reverting changes.
Training on augumented user 92226 15/50 current_auc = 0.441025641025641
User 92226 AUC after training: 0.441025641025641
User 92226 does not improve AUC. Reverting changes.
Training on augumented user 89128 16/50 current_auc = 0.441025641025641
User 89128 AUC after training: 0.4358974358974359
User 89128 does not improve AUC. Reverting changes.
Training on augumented user 23929 17/50 current_auc = 0.441025641025641
User 23929 AUC after training: 0.441025641025641
User 23929 does not improve AUC. Reverting changes.
Training on augumented user 7252 18/50 current_auc = 0.441025641025641
User 7252 AUC after training: 0.441025641025641
User 7252 does not improve AUC. Reverting changes.
Training on augumented user 14312 19/50 current_auc = 0.441025641025641
User 14312 AUC after training: 0.4358974358974359
User 14312 does not improve AUC. Reverting changes.
Training on augumented user 37410 20/50 current_auc = 0.441025641025641
User 37410 AUC after training: 0.441025641025641
User 37410 does not improve AUC. Reverting changes.
Training on augumented user 36406 21/50 current_auc = 0.441025641025641
User 36406 AUC after training: 0.441025641025641
User 36406 does not improve AUC. Reverting changes.
Training on augumented user 26797 22/50 current_auc = 0.441025641025641
User 26797 AUC after training: 0.441025641025641
User 26797 does not improve AUC. Reverting changes.
Training on augumented user 14759 23/50 current_auc = 0.441025641025641
User 14759 AUC after training: 0.441025641025641
User 14759 does not improve AUC. Reverting changes.
Training on augumented user 135386 24/50 current_auc = 0.441025641025641
User 135386 AUC after training: 0.441025641025641
User 135386 does not improve AUC. Reverting changes.
Training on augumented user 110688 25/50 current_auc = 0.441025641025641
User 110688 AUC after training: 0.4358974358974359
User 110688 does not improve AUC. Reverting changes.
Training on augumented user 78432 26/50 current_auc = 0.441025641025641
User 78432 AUC after training: 0.441025641025641
User 78432 does not improve AUC. Reverting changes.
Training on augumented user 128032 27/50 current_auc = 0.441025641025641
User 128032 AUC after training: 0.441025641025641
User 128032 does not improve AUC. Reverting changes.
Training on augumented user 6882 28/50 current_auc = 0.441025641025641
User 6882 AUC after training: 0.441025641025641
User 6882 does not improve AUC. Reverting changes.
Training on augumented user 51035 29/50 current_auc = 0.441025641025641
User 51035 AUC after training: 0.441025641025641
User 51035 does not improve AUC. Reverting changes.
Training on augumented user 18105 30/50 current_auc = 0.441025641025641
User 18105 AUC after training: 0.441025641025641
User 18105 does not improve AUC. Reverting changes.
Training on augumented user 39181 31/50 current_auc = 0.441025641025641
User 39181 AUC after training: 0.441025641025641
User 39181 does not improve AUC. Reverting changes.
Training on augumented user 94988 32/50 current_auc = 0.441025641025641
User 94988 AUC after training: 0.441025641025641
User 94988 does not improve AUC. Reverting changes.
Training on augumented user 29153 33/50 current_auc = 0.441025641025641
User 29153 AUC after training: 0.4358974358974359
User 29153 does not improve AUC. Reverting changes.
Training on augumented user 60746 34/50 current_auc = 0.441025641025641
User 60746 AUC after training: 0.441025641025641
User 60746 does not improve AUC. Reverting changes.
Training on augumented user 123341 35/50 current_auc = 0.441025641025641
User 123341 AUC after training: 0.441025641025641
User 123341 does not improve AUC. Reverting changes.
Training on augumented user 33851 36/50 current_auc = 0.441025641025641
User 33851 AUC after training: 0.441025641025641
User 33851 does not improve AUC. Reverting changes.
Training on augumented user 9033 37/50 current_auc = 0.441025641025641
User 9033 AUC after training: 0.441025641025641
User 9033 does not improve AUC. Reverting changes.
Training on augumented user 119585 38/50 current_auc = 0.441025641025641
User 119585 AUC after training: 0.441025641025641
User 119585 does not improve AUC. Reverting changes.
Training on augumented user 92311 39/50 current_auc = 0.441025641025641
User 92311 AUC after training: 0.4358974358974359
User 92311 does not improve AUC. Reverting changes.
Training on augumented user 134172 40/50 current_auc = 0.441025641025641
User 134172 AUC after training: 0.441025641025641
User 134172 does not improve AUC. Reverting changes.
Training on augumented user 49554 41/50 current_auc = 0.441025641025641
User 49554 AUC after training: 0.4282051282051282
User 49554 does not improve AUC. Reverting changes.
Training on augumented user 17611 42/50 current_auc = 0.441025641025641
User 17611 AUC after training: 0.441025641025641
User 17611 does not improve AUC. Reverting changes.
Training on augumented user 80528 43/50 current_auc = 0.441025641025641
User 80528 AUC after training: 0.441025641025641
User 80528 does not improve AUC. Reverting changes.
Training on augumented user 42876 44/50 current_auc = 0.441025641025641
User 42876 AUC after training: 0.441025641025641
User 42876 does not improve AUC. Reverting changes.
Training on augumented user 91281 45/50 current_auc = 0.441025641025641
User 91281 AUC after training: 0.441025641025641
User 91281 does not improve AUC. Reverting changes.
Training on augumented user 53516 46/50 current_auc = 0.441025641025641
User 53516 AUC after training: 0.441025641025641
User 53516 does not improve AUC. Reverting changes.
Training on augumented user 137978 47/50 current_auc = 0.441025641025641
User 137978 AUC after training: 0.441025641025641
User 137978 does not improve AUC. Reverting changes.
Training on augumented user 14432 48/50 current_auc = 0.441025641025641
User 14432 AUC after training: 0.441025641025641
User 14432 does not improve AUC. Reverting changes.
Training on augumented user 25432 49/50 current_auc = 0.441025641025641
User 25432 AUC after training: 0.441025641025641
User 25432 does not improve AUC. Reverting changes.
[2024-12-02 18:46:52.381484] start test user 16771 126/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:52.991199] start test user 16771 126/568 recall augumented users by random, augumented_users = [63405, 109354, 89517, 94980, 133987, 54608, 39461, 132554, 4383, 102501, 58220, 104407, 88907, 78505, 7699, 89865, 132897, 81965, 44442, 87964, 25295, 44345, 59074, 95853, 99475, 49292, 119332, 51607, 42476, 99057, 60301, 136549, 109188, 30643, 61457, 92450, 27195, 93551, 107972, 52651, 21699, 3504, 4533, 120417, 35007, 62854, 4192, 37673, 105524, 102143]
[2024-12-02 18:46:53.007491] user = 16771 Cloud 126/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:46:53.014888] user = 16771 Local 126/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:46:53.066655] user = 16771 Local+ 126/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:46:55.584267] user = 16771 MPDA- 126/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 63405 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63405 AUC after training: 0.5
User 63405 does not improve AUC. Reverting changes.
Training on augumented user 109354 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109354 AUC after training: 0.5
User 109354 does not improve AUC. Reverting changes.
Training on augumented user 89517 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89517 AUC after training: 0.5
User 89517 does not improve AUC. Reverting changes.
Training on augumented user 94980 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94980 AUC after training: 0.5
User 94980 does not improve AUC. Reverting changes.
Training on augumented user 133987 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133987 AUC after training: 0.5
User 133987 does not improve AUC. Reverting changes.
Training on augumented user 54608 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54608 AUC after training: 0.5
User 54608 does not improve AUC. Reverting changes.
Training on augumented user 39461 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39461 AUC after training: 0.5
User 39461 does not improve AUC. Reverting changes.
Training on augumented user 132554 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132554 AUC after training: 0.5
User 132554 does not improve AUC. Reverting changes.
Training on augumented user 4383 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4383 AUC after training: 0.5
User 4383 does not improve AUC. Reverting changes.
Training on augumented user 102501 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102501 AUC after training: 0.5
User 102501 does not improve AUC. Reverting changes.
Training on augumented user 58220 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58220 AUC after training: 0.5
User 58220 does not improve AUC. Reverting changes.
Training on augumented user 104407 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104407 AUC after training: 0.5
User 104407 does not improve AUC. Reverting changes.
Training on augumented user 88907 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88907 AUC after training: 0.5
User 88907 does not improve AUC. Reverting changes.
Training on augumented user 78505 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78505 AUC after training: 0.5
User 78505 does not improve AUC. Reverting changes.
Training on augumented user 7699 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7699 AUC after training: 0.5
User 7699 does not improve AUC. Reverting changes.
Training on augumented user 89865 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89865 AUC after training: 0.5
User 89865 does not improve AUC. Reverting changes.
Training on augumented user 132897 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132897 AUC after training: 0.5
User 132897 does not improve AUC. Reverting changes.
Training on augumented user 81965 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81965 AUC after training: 0.5
User 81965 does not improve AUC. Reverting changes.
Training on augumented user 44442 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44442 AUC after training: 0.5
User 44442 does not improve AUC. Reverting changes.
Training on augumented user 87964 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87964 AUC after training: 0.5
User 87964 does not improve AUC. Reverting changes.
Training on augumented user 25295 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25295 AUC after training: 0.5
User 25295 does not improve AUC. Reverting changes.
Training on augumented user 44345 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44345 AUC after training: 0.5
User 44345 does not improve AUC. Reverting changes.
Training on augumented user 59074 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59074 AUC after training: 0.5
User 59074 does not improve AUC. Reverting changes.
Training on augumented user 95853 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95853 AUC after training: 0.5
User 95853 does not improve AUC. Reverting changes.
Training on augumented user 99475 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99475 AUC after training: 0.5
User 99475 does not improve AUC. Reverting changes.
Training on augumented user 49292 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49292 AUC after training: 0.5
User 49292 does not improve AUC. Reverting changes.
Training on augumented user 119332 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119332 AUC after training: 0.5
User 119332 does not improve AUC. Reverting changes.
Training on augumented user 51607 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51607 AUC after training: 0.5
User 51607 does not improve AUC. Reverting changes.
Training on augumented user 42476 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42476 AUC after training: 0.5
User 42476 does not improve AUC. Reverting changes.
Training on augumented user 99057 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99057 AUC after training: 0.5
User 99057 does not improve AUC. Reverting changes.
Training on augumented user 60301 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60301 AUC after training: 0.5
User 60301 does not improve AUC. Reverting changes.
Training on augumented user 136549 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136549 AUC after training: 0.5
User 136549 does not improve AUC. Reverting changes.
Training on augumented user 109188 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109188 AUC after training: 0.5
User 109188 does not improve AUC. Reverting changes.
Training on augumented user 30643 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30643 AUC after training: 0.5
User 30643 does not improve AUC. Reverting changes.
Training on augumented user 61457 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61457 AUC after training: 0.5
User 61457 does not improve AUC. Reverting changes.
Training on augumented user 92450 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92450 AUC after training: 0.5
User 92450 does not improve AUC. Reverting changes.
Training on augumented user 27195 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27195 AUC after training: 0.5
User 27195 does not improve AUC. Reverting changes.
Training on augumented user 93551 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93551 AUC after training: 0.5
User 93551 does not improve AUC. Reverting changes.
Training on augumented user 107972 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107972 AUC after training: 0.5
User 107972 does not improve AUC. Reverting changes.
Training on augumented user 52651 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52651 AUC after training: 0.5
User 52651 does not improve AUC. Reverting changes.
Training on augumented user 21699 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21699 AUC after training: 0.5
User 21699 does not improve AUC. Reverting changes.
Training on augumented user 3504 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3504 AUC after training: 0.5
User 3504 does not improve AUC. Reverting changes.
Training on augumented user 4533 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4533 AUC after training: 0.5
User 4533 does not improve AUC. Reverting changes.
Training on augumented user 120417 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120417 AUC after training: 0.5
User 120417 does not improve AUC. Reverting changes.
Training on augumented user 35007 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35007 AUC after training: 0.5
User 35007 does not improve AUC. Reverting changes.
Training on augumented user 62854 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62854 AUC after training: 0.5
User 62854 does not improve AUC. Reverting changes.
Training on augumented user 4192 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4192 AUC after training: 0.5
User 4192 does not improve AUC. Reverting changes.
Training on augumented user 37673 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37673 AUC after training: 0.5
User 37673 does not improve AUC. Reverting changes.
Training on augumented user 105524 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105524 AUC after training: 0.5
User 105524 does not improve AUC. Reverting changes.
Training on augumented user 102143 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102143 AUC after training: 0.5
User 102143 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:47:24.387116] start test user 16785 127/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:24.826538] start test user 16785 127/568 recall augumented users by random, augumented_users = [12801, 47518, 5480, 31331, 38953, 73870, 127840, 114669, 100558, 65986, 51953, 14956, 85002, 88155, 117578, 132244, 96050, 134652, 49953, 99238, 91126, 58962, 78662, 124611, 102769, 99684, 113035, 135185, 61581, 14679, 129029, 46867, 59832, 7151, 64348, 14249, 117286, 35894, 29820, 52174, 73018, 123559, 40745, 5861, 74033, 72219, 85173, 51046, 36183, 93851]
[2024-12-02 18:47:24.842951] user = 16785 Cloud 127/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:47:24.849126] user = 16785 Local 127/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:47:25.050161] user = 16785 Local+ 127/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:47:26.995780] user = 16785 MPDA- 127/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 12801 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12801 AUC after training: 0.5
User 12801 does not improve AUC. Reverting changes.
Training on augumented user 47518 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47518 AUC after training: 0.5
User 47518 does not improve AUC. Reverting changes.
Training on augumented user 5480 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5480 AUC after training: 0.5
User 5480 does not improve AUC. Reverting changes.
Training on augumented user 31331 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31331 AUC after training: 0.5
User 31331 does not improve AUC. Reverting changes.
Training on augumented user 38953 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38953 AUC after training: 0.5
User 38953 does not improve AUC. Reverting changes.
Training on augumented user 73870 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73870 AUC after training: 0.5
User 73870 does not improve AUC. Reverting changes.
Training on augumented user 127840 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127840 AUC after training: 0.5
User 127840 does not improve AUC. Reverting changes.
Training on augumented user 114669 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114669 AUC after training: 0.5
User 114669 does not improve AUC. Reverting changes.
Training on augumented user 100558 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100558 AUC after training: 0.5
User 100558 does not improve AUC. Reverting changes.
Training on augumented user 65986 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65986 AUC after training: 0.5
User 65986 does not improve AUC. Reverting changes.
Training on augumented user 51953 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51953 AUC after training: 0.5
User 51953 does not improve AUC. Reverting changes.
Training on augumented user 14956 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14956 AUC after training: 0.5
User 14956 does not improve AUC. Reverting changes.
Training on augumented user 85002 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85002 AUC after training: 0.5
User 85002 does not improve AUC. Reverting changes.
Training on augumented user 88155 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88155 AUC after training: 0.5
User 88155 does not improve AUC. Reverting changes.
Training on augumented user 117578 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117578 AUC after training: 0.5
User 117578 does not improve AUC. Reverting changes.
Training on augumented user 132244 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132244 AUC after training: 0.5
User 132244 does not improve AUC. Reverting changes.
Training on augumented user 96050 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96050 AUC after training: 0.5
User 96050 does not improve AUC. Reverting changes.
Training on augumented user 134652 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134652 AUC after training: 0.5
User 134652 does not improve AUC. Reverting changes.
Training on augumented user 49953 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49953 AUC after training: 0.5
User 49953 does not improve AUC. Reverting changes.
Training on augumented user 99238 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99238 AUC after training: 0.5
User 99238 does not improve AUC. Reverting changes.
Training on augumented user 91126 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91126 AUC after training: 0.5
User 91126 does not improve AUC. Reverting changes.
Training on augumented user 58962 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58962 AUC after training: 0.5
User 58962 does not improve AUC. Reverting changes.
Training on augumented user 78662 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78662 AUC after training: 0.5
User 78662 does not improve AUC. Reverting changes.
Training on augumented user 124611 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124611 AUC after training: 0.5
User 124611 does not improve AUC. Reverting changes.
Training on augumented user 102769 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102769 AUC after training: 0.5
User 102769 does not improve AUC. Reverting changes.
Training on augumented user 99684 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99684 AUC after training: 0.5
User 99684 does not improve AUC. Reverting changes.
Training on augumented user 113035 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113035 AUC after training: 0.5
User 113035 does not improve AUC. Reverting changes.
Training on augumented user 135185 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135185 AUC after training: 0.5
User 135185 does not improve AUC. Reverting changes.
Training on augumented user 61581 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61581 AUC after training: 0.5
User 61581 does not improve AUC. Reverting changes.
Training on augumented user 14679 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14679 AUC after training: 0.5
User 14679 does not improve AUC. Reverting changes.
Training on augumented user 129029 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129029 AUC after training: 0.5
User 129029 does not improve AUC. Reverting changes.
Training on augumented user 46867 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46867 AUC after training: 0.5
User 46867 does not improve AUC. Reverting changes.
Training on augumented user 59832 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59832 AUC after training: 0.5
User 59832 does not improve AUC. Reverting changes.
Training on augumented user 7151 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7151 AUC after training: 0.5
User 7151 does not improve AUC. Reverting changes.
Training on augumented user 64348 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64348 AUC after training: 0.5
User 64348 does not improve AUC. Reverting changes.
Training on augumented user 14249 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14249 AUC after training: 0.5
User 14249 does not improve AUC. Reverting changes.
Training on augumented user 117286 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117286 AUC after training: 0.5
User 117286 does not improve AUC. Reverting changes.
Training on augumented user 35894 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35894 AUC after training: 0.5
User 35894 does not improve AUC. Reverting changes.
Training on augumented user 29820 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29820 AUC after training: 0.5
User 29820 does not improve AUC. Reverting changes.
Training on augumented user 52174 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52174 AUC after training: 0.5
User 52174 does not improve AUC. Reverting changes.
Training on augumented user 73018 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73018 AUC after training: 0.5
User 73018 does not improve AUC. Reverting changes.
Training on augumented user 123559 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123559 AUC after training: 0.5
User 123559 does not improve AUC. Reverting changes.
Training on augumented user 40745 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40745 AUC after training: 0.5
User 40745 does not improve AUC. Reverting changes.
Training on augumented user 5861 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5861 AUC after training: 0.5
User 5861 does not improve AUC. Reverting changes.
Training on augumented user 74033 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74033 AUC after training: 0.5
User 74033 does not improve AUC. Reverting changes.
Training on augumented user 72219 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72219 AUC after training: 0.5
User 72219 does not improve AUC. Reverting changes.
Training on augumented user 85173 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85173 AUC after training: 0.5
User 85173 does not improve AUC. Reverting changes.
Training on augumented user 51046 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51046 AUC after training: 0.5
User 51046 does not improve AUC. Reverting changes.
Training on augumented user 36183 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36183 AUC after training: 0.5
User 36183 does not improve AUC. Reverting changes.
Training on augumented user 93851 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93851 AUC after training: 0.5
User 93851 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:47:53.587836] start test user 16865 128/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:53.987297] start test user 16865 128/568 recall augumented users by random, augumented_users = [87907, 80100, 38774, 122068, 39485, 69268, 14610, 8179, 85108, 133134, 16422, 47146, 58411, 127444, 78391, 109364, 36571, 129353, 89848, 130970, 26868, 6327, 36506, 110385, 80346, 19826, 60953, 76633, 70973, 49168, 121340, 92228, 76720, 38624, 74364, 121744, 52854, 77653, 112276, 43839, 94757, 99159, 48517, 19762, 23911, 69455, 48934, 57276, 9525, 7618]
[2024-12-02 18:47:54.004716] user = 16865 Cloud 128/568
[2024-12-02 18:47:54.015659] user = 16865 Local 128/568
[2024-12-02 18:47:54.399629] user = 16865 Local+ 128/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:56.929724] user = 16865 MPDA- 128/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5476190476190477
Training on augumented user 87907 0/50 current_auc = 0.5476190476190477
User 87907 AUC after training: 0.5476190476190477
User 87907 does not improve AUC. Reverting changes.
Training on augumented user 80100 1/50 current_auc = 0.5476190476190477
User 80100 AUC after training: 0.5476190476190477
User 80100 does not improve AUC. Reverting changes.
Training on augumented user 38774 2/50 current_auc = 0.5476190476190477
User 38774 AUC after training: 0.5476190476190477
User 38774 does not improve AUC. Reverting changes.
Training on augumented user 122068 3/50 current_auc = 0.5476190476190477
User 122068 AUC after training: 0.5476190476190477
User 122068 does not improve AUC. Reverting changes.
Training on augumented user 39485 4/50 current_auc = 0.5476190476190477
User 39485 AUC after training: 0.5476190476190477
User 39485 does not improve AUC. Reverting changes.
Training on augumented user 69268 5/50 current_auc = 0.5476190476190477
User 69268 AUC after training: 0.5476190476190477
User 69268 does not improve AUC. Reverting changes.
Training on augumented user 14610 6/50 current_auc = 0.5476190476190477
User 14610 AUC after training: 0.5476190476190477
User 14610 does not improve AUC. Reverting changes.
Training on augumented user 8179 7/50 current_auc = 0.5476190476190477
User 8179 AUC after training: 0.5476190476190477
User 8179 does not improve AUC. Reverting changes.
Training on augumented user 85108 8/50 current_auc = 0.5476190476190477
User 85108 AUC after training: 0.5476190476190477
User 85108 does not improve AUC. Reverting changes.
Training on augumented user 133134 9/50 current_auc = 0.5476190476190477
User 133134 AUC after training: 0.5476190476190477
User 133134 does not improve AUC. Reverting changes.
Training on augumented user 16422 10/50 current_auc = 0.5476190476190477
User 16422 AUC after training: 0.5476190476190477
User 16422 does not improve AUC. Reverting changes.
Training on augumented user 47146 11/50 current_auc = 0.5476190476190477
User 47146 AUC after training: 0.5476190476190477
User 47146 does not improve AUC. Reverting changes.
Training on augumented user 58411 12/50 current_auc = 0.5476190476190477
User 58411 AUC after training: 0.5476190476190477
User 58411 does not improve AUC. Reverting changes.
Training on augumented user 127444 13/50 current_auc = 0.5476190476190477
User 127444 AUC after training: 0.5476190476190477
User 127444 does not improve AUC. Reverting changes.
Training on augumented user 78391 14/50 current_auc = 0.5476190476190477
User 78391 AUC after training: 0.5476190476190477
User 78391 does not improve AUC. Reverting changes.
Training on augumented user 109364 15/50 current_auc = 0.5476190476190477
User 109364 AUC after training: 0.5476190476190477
User 109364 does not improve AUC. Reverting changes.
Training on augumented user 36571 16/50 current_auc = 0.5476190476190477
User 36571 AUC after training: 0.5476190476190477
User 36571 does not improve AUC. Reverting changes.
Training on augumented user 129353 17/50 current_auc = 0.5476190476190477
User 129353 AUC after training: 0.5476190476190477
User 129353 does not improve AUC. Reverting changes.
Training on augumented user 89848 18/50 current_auc = 0.5476190476190477
User 89848 AUC after training: 0.5238095238095238
User 89848 does not improve AUC. Reverting changes.
Training on augumented user 130970 19/50 current_auc = 0.5476190476190477
User 130970 AUC after training: 0.5476190476190477
User 130970 does not improve AUC. Reverting changes.
Training on augumented user 26868 20/50 current_auc = 0.5476190476190477
User 26868 AUC after training: 0.5476190476190477
User 26868 does not improve AUC. Reverting changes.
Training on augumented user 6327 21/50 current_auc = 0.5476190476190477
User 6327 AUC after training: 0.5476190476190477
User 6327 does not improve AUC. Reverting changes.
Training on augumented user 36506 22/50 current_auc = 0.5476190476190477
User 36506 AUC after training: 0.5476190476190477
User 36506 does not improve AUC. Reverting changes.
Training on augumented user 110385 23/50 current_auc = 0.5476190476190477
User 110385 AUC after training: 0.5476190476190477
User 110385 does not improve AUC. Reverting changes.
Training on augumented user 80346 24/50 current_auc = 0.5476190476190477
User 80346 AUC after training: 0.5476190476190477
User 80346 does not improve AUC. Reverting changes.
Training on augumented user 19826 25/50 current_auc = 0.5476190476190477
User 19826 AUC after training: 0.5476190476190477
User 19826 does not improve AUC. Reverting changes.
Training on augumented user 60953 26/50 current_auc = 0.5476190476190477
User 60953 AUC after training: 0.5476190476190477
User 60953 does not improve AUC. Reverting changes.
Training on augumented user 76633 27/50 current_auc = 0.5476190476190477
User 76633 AUC after training: 0.5476190476190477
User 76633 does not improve AUC. Reverting changes.
Training on augumented user 70973 28/50 current_auc = 0.5476190476190477
User 70973 AUC after training: 0.5476190476190477
User 70973 does not improve AUC. Reverting changes.
Training on augumented user 49168 29/50 current_auc = 0.5476190476190477
User 49168 AUC after training: 0.5476190476190477
User 49168 does not improve AUC. Reverting changes.
Training on augumented user 121340 30/50 current_auc = 0.5476190476190477
User 121340 AUC after training: 0.5476190476190477
User 121340 does not improve AUC. Reverting changes.
Training on augumented user 92228 31/50 current_auc = 0.5476190476190477
User 92228 AUC after training: 0.5476190476190477
User 92228 does not improve AUC. Reverting changes.
Training on augumented user 76720 32/50 current_auc = 0.5476190476190477
User 76720 AUC after training: 0.5476190476190477
User 76720 does not improve AUC. Reverting changes.
Training on augumented user 38624 33/50 current_auc = 0.5476190476190477
User 38624 AUC after training: 0.5476190476190477
User 38624 does not improve AUC. Reverting changes.
Training on augumented user 74364 34/50 current_auc = 0.5476190476190477
User 74364 AUC after training: 0.5476190476190477
User 74364 does not improve AUC. Reverting changes.
Training on augumented user 121744 35/50 current_auc = 0.5476190476190477
User 121744 AUC after training: 0.5476190476190477
User 121744 does not improve AUC. Reverting changes.
Training on augumented user 52854 36/50 current_auc = 0.5476190476190477
User 52854 AUC after training: 0.5476190476190477
User 52854 does not improve AUC. Reverting changes.
Training on augumented user 77653 37/50 current_auc = 0.5476190476190477
User 77653 AUC after training: 0.5476190476190477
User 77653 does not improve AUC. Reverting changes.
Training on augumented user 112276 38/50 current_auc = 0.5476190476190477
User 112276 AUC after training: 0.5476190476190477
User 112276 does not improve AUC. Reverting changes.
Training on augumented user 43839 39/50 current_auc = 0.5476190476190477
User 43839 AUC after training: 0.5476190476190477
User 43839 does not improve AUC. Reverting changes.
Training on augumented user 94757 40/50 current_auc = 0.5476190476190477
User 94757 AUC after training: 0.5476190476190477
User 94757 does not improve AUC. Reverting changes.
Training on augumented user 99159 41/50 current_auc = 0.5476190476190477
User 99159 AUC after training: 0.5476190476190477
User 99159 does not improve AUC. Reverting changes.
Training on augumented user 48517 42/50 current_auc = 0.5476190476190477
User 48517 AUC after training: 0.5476190476190477
User 48517 does not improve AUC. Reverting changes.
Training on augumented user 19762 43/50 current_auc = 0.5476190476190477
User 19762 AUC after training: 0.5476190476190477
User 19762 does not improve AUC. Reverting changes.
Training on augumented user 23911 44/50 current_auc = 0.5476190476190477
User 23911 AUC after training: 0.5476190476190477
User 23911 does not improve AUC. Reverting changes.
Training on augumented user 69455 45/50 current_auc = 0.5476190476190477
User 69455 AUC after training: 0.5476190476190477
User 69455 does not improve AUC. Reverting changes.
Training on augumented user 48934 46/50 current_auc = 0.5476190476190477
User 48934 AUC after training: 0.5476190476190477
User 48934 does not improve AUC. Reverting changes.
Training on augumented user 57276 47/50 current_auc = 0.5476190476190477
User 57276 AUC after training: 0.5476190476190477
User 57276 does not improve AUC. Reverting changes.
Training on augumented user 9525 48/50 current_auc = 0.5476190476190477
User 9525 AUC after training: 0.5476190476190477
User 9525 does not improve AUC. Reverting changes.
Training on augumented user 7618 49/50 current_auc = 0.5476190476190477
User 7618 AUC after training: 0.5476190476190477
User 7618 does not improve AUC. Reverting changes.
[2024-12-02 18:48:26.315938] start test user 16881 129/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:26.731985] start test user 16881 129/568 recall augumented users by random, augumented_users = [113020, 80770, 44325, 111002, 28061, 107820, 105399, 96858, 6700, 84350, 71751, 70474, 92393, 86421, 4799, 79374, 74033, 2605, 118548, 19545, 10638, 124612, 121499, 43873, 121845, 133069, 124806, 69140, 125084, 19728, 39614, 126190, 132381, 9583, 36111, 26148, 82229, 13528, 33552, 16699, 64747, 111600, 12004, 1450, 39450, 72982, 111867, 84862, 27459, 26078]
[2024-12-02 18:48:26.747459] user = 16881 Cloud 129/568
[2024-12-02 18:48:26.771410] user = 16881 Local 129/568
[2024-12-02 18:48:26.845882] user = 16881 Local+ 129/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:29.303127] user = 16881 MPDA- 129/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5969326290427208
Training on augumented user 113020 0/50 current_auc = 0.5969326290427208
User 113020 AUC after training: 0.5970252988601612
User 113020 improves AUC. Keeping the model.
Training on augumented user 80770 1/50 current_auc = 0.5970252988601612
User 80770 AUC after training: 0.5975813177648039
User 80770 improves AUC. Keeping the model.
Training on augumented user 44325 2/50 current_auc = 0.5975813177648039
User 44325 AUC after training: 0.5975813177648039
User 44325 does not improve AUC. Reverting changes.
Training on augumented user 111002 3/50 current_auc = 0.5975813177648039
User 111002 AUC after training: 0.5975349828560839
User 111002 does not improve AUC. Reverting changes.
Training on augumented user 28061 4/50 current_auc = 0.5975813177648039
User 28061 AUC after training: 0.5985543508479289
User 28061 improves AUC. Keeping the model.
Training on augumented user 107820 5/50 current_auc = 0.5985543508479289
User 107820 AUC after training: 0.5978129923084051
User 107820 does not improve AUC. Reverting changes.
Training on augumented user 105399 6/50 current_auc = 0.5985543508479289
User 105399 AUC after training: 0.598600685756649
User 105399 improves AUC. Keeping the model.
Training on augumented user 96858 7/50 current_auc = 0.598600685756649
User 96858 AUC after training: 0.598600685756649
User 96858 does not improve AUC. Reverting changes.
Training on augumented user 6700 8/50 current_auc = 0.598600685756649
User 6700 AUC after training: 0.5974886479473636
User 6700 does not improve AUC. Reverting changes.
Training on augumented user 84350 9/50 current_auc = 0.598600685756649
User 84350 AUC after training: 0.598183671578167
User 84350 does not improve AUC. Reverting changes.
Training on augumented user 71751 10/50 current_auc = 0.598600685756649
User 71751 AUC after training: 0.5976739875822444
User 71751 does not improve AUC. Reverting changes.
Training on augumented user 70474 11/50 current_auc = 0.598600685756649
User 70474 AUC after training: 0.5989250301176907
User 70474 improves AUC. Keeping the model.
Training on augumented user 92393 12/50 current_auc = 0.5989250301176907
User 92393 AUC after training: 0.5984616810304882
User 92393 does not improve AUC. Reverting changes.
Training on augumented user 86421 13/50 current_auc = 0.5989250301176907
User 86421 AUC after training: 0.5989250301176906
User 86421 does not improve AUC. Reverting changes.
Training on augumented user 4799 14/50 current_auc = 0.5989250301176907
User 4799 AUC after training: 0.5986470206653692
User 4799 does not improve AUC. Reverting changes.
Training on augumented user 79374 15/50 current_auc = 0.5989250301176907
User 79374 AUC after training: 0.5992030395700121
User 79374 improves AUC. Keeping the model.
Training on augumented user 74033 16/50 current_auc = 0.5992030395700121
User 74033 AUC after training: 0.6002224075618571
User 74033 improves AUC. Keeping the model.
Training on augumented user 2605 17/50 current_auc = 0.6002224075618571
User 2605 AUC after training: 0.5975349828560838
User 2605 does not improve AUC. Reverting changes.
Training on augumented user 118548 18/50 current_auc = 0.6002224075618571
User 118548 AUC after training: 0.6006857566490594
User 118548 improves AUC. Keeping the model.
Training on augumented user 19545 19/50 current_auc = 0.6006857566490594
User 19545 AUC after training: 0.6005004170141786
User 19545 does not improve AUC. Reverting changes.
Training on augumented user 10638 20/50 current_auc = 0.6006857566490594
User 10638 AUC after training: 0.6004077471967381
User 10638 does not improve AUC. Reverting changes.
Training on augumented user 124612 21/50 current_auc = 0.6006857566490594
User 124612 AUC after training: 0.6002224075618572
User 124612 does not improve AUC. Reverting changes.
Training on augumented user 121499 22/50 current_auc = 0.6006857566490594
User 121499 AUC after training: 0.6022611435455473
User 121499 improves AUC. Keeping the model.
Training on augumented user 43873 23/50 current_auc = 0.6022611435455473
User 43873 AUC after training: 0.6019831340932259
User 43873 does not improve AUC. Reverting changes.
Training on augumented user 121845 24/50 current_auc = 0.6022611435455473
User 121845 AUC after training: 0.6005930868316189
User 121845 does not improve AUC. Reverting changes.
Training on augumented user 133069 25/50 current_auc = 0.6022611435455473
User 133069 AUC after training: 0.6009637661013808
User 133069 does not improve AUC. Reverting changes.
Training on augumented user 124806 26/50 current_auc = 0.6022611435455473
User 124806 AUC after training: 0.6002224075618572
User 124806 does not improve AUC. Reverting changes.
Training on augumented user 69140 27/50 current_auc = 0.6022611435455473
User 69140 AUC after training: 0.6025391529978686
User 69140 improves AUC. Keeping the model.
Training on augumented user 125084 28/50 current_auc = 0.6025391529978686
User 125084 AUC after training: 0.598183671578167
User 125084 does not improve AUC. Reverting changes.
Training on augumented user 19728 29/50 current_auc = 0.6025391529978686
User 19728 AUC after training: 0.6017051246409045
User 19728 does not improve AUC. Reverting changes.
Training on augumented user 39614 30/50 current_auc = 0.6025391529978686
User 39614 AUC after training: 0.6026318228153091
User 39614 improves AUC. Keeping the model.
Training on augumented user 126190 31/50 current_auc = 0.6026318228153091
User 126190 AUC after training: 0.6018904642757854
User 126190 does not improve AUC. Reverting changes.
Training on augumented user 132381 32/50 current_auc = 0.6026318228153091
User 132381 AUC after training: 0.601612454823464
User 132381 does not improve AUC. Reverting changes.
Training on augumented user 9583 33/50 current_auc = 0.6026318228153091
User 9583 AUC after training: 0.601612454823464
User 9583 does not improve AUC. Reverting changes.
Training on augumented user 36111 34/50 current_auc = 0.6026318228153091
User 36111 AUC after training: 0.6018904642757854
User 36111 does not improve AUC. Reverting changes.
Training on augumented user 26148 35/50 current_auc = 0.6026318228153091
User 26148 AUC after training: 0.6006857566490594
User 26148 does not improve AUC. Reverting changes.
Training on augumented user 82229 36/50 current_auc = 0.6026318228153091
User 82229 AUC after training: 0.6022611435455473
User 82229 does not improve AUC. Reverting changes.
Training on augumented user 13528 37/50 current_auc = 0.6026318228153091
User 13528 AUC after training: 0.6025391529978686
User 13528 does not improve AUC. Reverting changes.
Training on augumented user 33552 38/50 current_auc = 0.6026318228153091
User 33552 AUC after training: 0.602631822815309
User 33552 does not improve AUC. Reverting changes.
Training on augumented user 16699 39/50 current_auc = 0.6026318228153091
User 16699 AUC after training: 0.6018904642757854
User 16699 does not improve AUC. Reverting changes.
Training on augumented user 64747 40/50 current_auc = 0.6026318228153091
User 64747 AUC after training: 0.6028171624501899
User 64747 improves AUC. Keeping the model.
Training on augumented user 111600 41/50 current_auc = 0.6028171624501899
User 111600 AUC after training: 0.6015197850060235
User 111600 does not improve AUC. Reverting changes.
Training on augumented user 12004 42/50 current_auc = 0.6028171624501899
User 12004 AUC after training: 0.6024464831804283
User 12004 does not improve AUC. Reverting changes.
Training on augumented user 1450 43/50 current_auc = 0.6028171624501899
User 1450 AUC after training: 0.6018904642757854
User 1450 does not improve AUC. Reverting changes.
Training on augumented user 39450 44/50 current_auc = 0.6028171624501899
User 39450 AUC after training: 0.6011491057362617
User 39450 does not improve AUC. Reverting changes.
Training on augumented user 72982 45/50 current_auc = 0.6028171624501899
User 72982 AUC after training: 0.6017977944583449
User 72982 does not improve AUC. Reverting changes.
Training on augumented user 111867 46/50 current_auc = 0.6028171624501899
User 111867 AUC after training: 0.6023538133629878
User 111867 does not improve AUC. Reverting changes.
Training on augumented user 84862 47/50 current_auc = 0.6028171624501899
User 84862 AUC after training: 0.6025391529978686
User 84862 does not improve AUC. Reverting changes.
Training on augumented user 27459 48/50 current_auc = 0.6028171624501899
User 27459 AUC after training: 0.6006857566490593
User 27459 does not improve AUC. Reverting changes.
Training on augumented user 26078 49/50 current_auc = 0.6028171624501899
User 26078 AUC after training: 0.6018904642757854
User 26078 does not improve AUC. Reverting changes.
[2024-12-02 18:48:59.081785] start test user 16883 130/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:59.846845] start test user 16883 130/568 recall augumented users by random, augumented_users = [66908, 25354, 66857, 49042, 126967, 55948, 22466, 126218, 79066, 121241, 75556, 97910, 88314, 88003, 93806, 14588, 76893, 33956, 129582, 24610, 116783, 9806, 108467, 59079, 26617, 114383, 57408, 104303, 97343, 7920, 91638, 83270, 67414, 119558, 20318, 68240, 66063, 37350, 69199, 48819, 86413, 79030, 83437, 99412, 103835, 56610, 42429, 6749, 38002, 111731]
[2024-12-02 18:48:59.871022] user = 16883 Cloud 130/568
[2024-12-02 18:48:59.895104] user = 16883 Local 130/568
[2024-12-02 18:49:00.021624] user = 16883 Local+ 130/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:02.425982] user = 16883 MPDA- 130/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.504312531709792
Training on augumented user 66908 0/50 current_auc = 0.504312531709792
User 66908 AUC after training: 0.504566210045662
User 66908 improves AUC. Keeping the model.
Training on augumented user 25354 1/50 current_auc = 0.504566210045662
User 25354 AUC after training: 0.5032978183663115
User 25354 does not improve AUC. Reverting changes.
Training on augumented user 66857 2/50 current_auc = 0.504566210045662
User 66857 AUC after training: 0.5038051750380518
User 66857 does not improve AUC. Reverting changes.
Training on augumented user 49042 3/50 current_auc = 0.504566210045662
User 49042 AUC after training: 0.504566210045662
User 49042 does not improve AUC. Reverting changes.
Training on augumented user 126967 4/50 current_auc = 0.504566210045662
User 126967 AUC after training: 0.5040588533739219
User 126967 does not improve AUC. Reverting changes.
Training on augumented user 55948 5/50 current_auc = 0.504566210045662
User 55948 AUC after training: 0.5038051750380518
User 55948 does not improve AUC. Reverting changes.
Training on augumented user 22466 6/50 current_auc = 0.504566210045662
User 22466 AUC after training: 0.5050735667174022
User 22466 improves AUC. Keeping the model.
Training on augumented user 126218 7/50 current_auc = 0.5050735667174022
User 126218 AUC after training: 0.5071029934043633
User 126218 improves AUC. Keeping the model.
Training on augumented user 79066 8/50 current_auc = 0.5071029934043633
User 79066 AUC after training: 0.5058346017250127
User 79066 does not improve AUC. Reverting changes.
Training on augumented user 121241 9/50 current_auc = 0.5071029934043633
User 121241 AUC after training: 0.5030441400304413
User 121241 does not improve AUC. Reverting changes.
Training on augumented user 75556 10/50 current_auc = 0.5071029934043633
User 75556 AUC after training: 0.5058346017250127
User 75556 does not improve AUC. Reverting changes.
Training on augumented user 97910 11/50 current_auc = 0.5071029934043633
User 97910 AUC after training: 0.5073566717402334
User 97910 improves AUC. Keeping the model.
Training on augumented user 88314 12/50 current_auc = 0.5073566717402334
User 88314 AUC after training: 0.5071029934043633
User 88314 does not improve AUC. Reverting changes.
Training on augumented user 88003 13/50 current_auc = 0.5073566717402334
User 88003 AUC after training: 0.5063419583967529
User 88003 does not improve AUC. Reverting changes.
Training on augumented user 93806 14/50 current_auc = 0.5073566717402334
User 93806 AUC after training: 0.5055809233891425
User 93806 does not improve AUC. Reverting changes.
Training on augumented user 14588 15/50 current_auc = 0.5073566717402334
User 14588 AUC after training: 0.5048198883815321
User 14588 does not improve AUC. Reverting changes.
Training on augumented user 76893 16/50 current_auc = 0.5073566717402334
User 76893 AUC after training: 0.5048198883815322
User 76893 does not improve AUC. Reverting changes.
Training on augumented user 33956 17/50 current_auc = 0.5073566717402334
User 33956 AUC after training: 0.5068493150684932
User 33956 does not improve AUC. Reverting changes.
Training on augumented user 129582 18/50 current_auc = 0.5073566717402334
User 129582 AUC after training: 0.506595636732623
User 129582 does not improve AUC. Reverting changes.
Training on augumented user 24610 19/50 current_auc = 0.5073566717402334
User 24610 AUC after training: 0.5050735667174022
User 24610 does not improve AUC. Reverting changes.
Training on augumented user 116783 20/50 current_auc = 0.5073566717402334
User 116783 AUC after training: 0.506595636732623
User 116783 does not improve AUC. Reverting changes.
Training on augumented user 9806 21/50 current_auc = 0.5073566717402334
User 9806 AUC after training: 0.5053272450532724
User 9806 does not improve AUC. Reverting changes.
Training on augumented user 108467 22/50 current_auc = 0.5073566717402334
User 108467 AUC after training: 0.5068493150684932
User 108467 does not improve AUC. Reverting changes.
Training on augumented user 59079 23/50 current_auc = 0.5073566717402334
User 59079 AUC after training: 0.5048198883815322
User 59079 does not improve AUC. Reverting changes.
Training on augumented user 26617 24/50 current_auc = 0.5073566717402334
User 26617 AUC after training: 0.5071029934043633
User 26617 does not improve AUC. Reverting changes.
Training on augumented user 114383 25/50 current_auc = 0.5073566717402334
User 114383 AUC after training: 0.5063419583967529
User 114383 does not improve AUC. Reverting changes.
Training on augumented user 57408 26/50 current_auc = 0.5073566717402334
User 57408 AUC after training: 0.5058346017250126
User 57408 does not improve AUC. Reverting changes.
Training on augumented user 104303 27/50 current_auc = 0.5073566717402334
User 104303 AUC after training: 0.5073566717402334
User 104303 does not improve AUC. Reverting changes.
Training on augumented user 97343 28/50 current_auc = 0.5073566717402334
User 97343 AUC after training: 0.506595636732623
User 97343 does not improve AUC. Reverting changes.
Training on augumented user 7920 29/50 current_auc = 0.5073566717402334
User 7920 AUC after training: 0.5071029934043633
User 7920 does not improve AUC. Reverting changes.
Training on augumented user 91638 30/50 current_auc = 0.5073566717402334
User 91638 AUC after training: 0.5076103500761034
User 91638 improves AUC. Keeping the model.
Training on augumented user 83270 31/50 current_auc = 0.5076103500761034
User 83270 AUC after training: 0.506595636732623
User 83270 does not improve AUC. Reverting changes.
Training on augumented user 67414 32/50 current_auc = 0.5076103500761034
User 67414 AUC after training: 0.5058346017250126
User 67414 does not improve AUC. Reverting changes.
Training on augumented user 119558 33/50 current_auc = 0.5076103500761034
User 119558 AUC after training: 0.506595636732623
User 119558 does not improve AUC. Reverting changes.
Training on augumented user 20318 34/50 current_auc = 0.5076103500761034
User 20318 AUC after training: 0.506595636732623
User 20318 does not improve AUC. Reverting changes.
Training on augumented user 68240 35/50 current_auc = 0.5076103500761034
User 68240 AUC after training: 0.5063419583967529
User 68240 does not improve AUC. Reverting changes.
Training on augumented user 66063 36/50 current_auc = 0.5076103500761034
User 66063 AUC after training: 0.5058346017250126
User 66063 does not improve AUC. Reverting changes.
Training on augumented user 37350 37/50 current_auc = 0.5076103500761034
User 37350 AUC after training: 0.5059614408929477
User 37350 does not improve AUC. Reverting changes.
Training on augumented user 69199 38/50 current_auc = 0.5076103500761034
User 69199 AUC after training: 0.5060882800608828
User 69199 does not improve AUC. Reverting changes.
Training on augumented user 48819 39/50 current_auc = 0.5076103500761034
User 48819 AUC after training: 0.5055809233891425
User 48819 does not improve AUC. Reverting changes.
Training on augumented user 86413 40/50 current_auc = 0.5076103500761034
User 86413 AUC after training: 0.5068493150684932
User 86413 does not improve AUC. Reverting changes.
Training on augumented user 79030 41/50 current_auc = 0.5076103500761034
User 79030 AUC after training: 0.5063419583967529
User 79030 does not improve AUC. Reverting changes.
Training on augumented user 83437 42/50 current_auc = 0.5076103500761034
User 83437 AUC after training: 0.5053272450532724
User 83437 does not improve AUC. Reverting changes.
Training on augumented user 99412 43/50 current_auc = 0.5076103500761034
User 99412 AUC after training: 0.5060882800608828
User 99412 does not improve AUC. Reverting changes.
Training on augumented user 103835 44/50 current_auc = 0.5076103500761034
User 103835 AUC after training: 0.5060882800608828
User 103835 does not improve AUC. Reverting changes.
Training on augumented user 56610 45/50 current_auc = 0.5076103500761034
User 56610 AUC after training: 0.506595636732623
User 56610 does not improve AUC. Reverting changes.
Training on augumented user 42429 46/50 current_auc = 0.5076103500761034
User 42429 AUC after training: 0.5060882800608828
User 42429 does not improve AUC. Reverting changes.
Training on augumented user 6749 47/50 current_auc = 0.5076103500761034
User 6749 AUC after training: 0.5058346017250126
User 6749 does not improve AUC. Reverting changes.
Training on augumented user 38002 48/50 current_auc = 0.5076103500761034
User 38002 AUC after training: 0.5073566717402334
User 38002 does not improve AUC. Reverting changes.
Training on augumented user 111731 49/50 current_auc = 0.5076103500761034
User 111731 AUC after training: 0.5068493150684932
User 111731 does not improve AUC. Reverting changes.
[2024-12-02 18:49:30.713442] start test user 16920 131/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:31.496593] start test user 16920 131/568 recall augumented users by random, augumented_users = [21203, 90070, 40781, 28323, 137255, 19119, 26548, 97116, 59756, 42210, 75537, 76904, 66165, 115324, 81911, 35862, 81488, 55163, 115443, 34623, 12878, 33194, 58539, 123774, 137753, 103171, 82461, 84316, 51056, 3765, 59404, 59617, 100675, 75418, 93562, 21758, 121651, 33039, 124507, 48104, 41834, 116901, 17474, 58775, 62080, 123709, 26821, 20689, 133338, 24419]
[2024-12-02 18:49:31.519081] user = 16920 Cloud 131/568
[2024-12-02 18:49:31.583361] user = 16920 Local 131/568
[2024-12-02 18:49:31.714126] user = 16920 Local+ 131/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:34.087585] user = 16920 MPDA- 131/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7203800298062593
Training on augumented user 21203 0/50 current_auc = 0.7203800298062593
User 21203 AUC after training: 0.7205663189269746
User 21203 improves AUC. Keeping the model.
Training on augumented user 90070 1/50 current_auc = 0.7205663189269746
User 90070 AUC after training: 0.7203800298062594
User 90070 does not improve AUC. Reverting changes.
Training on augumented user 40781 2/50 current_auc = 0.7205663189269746
User 40781 AUC after training: 0.72075260804769
User 40781 improves AUC. Keeping the model.
Training on augumented user 28323 3/50 current_auc = 0.72075260804769
User 28323 AUC after training: 0.7200074515648285
User 28323 does not improve AUC. Reverting changes.
Training on augumented user 137255 4/50 current_auc = 0.72075260804769
User 137255 AUC after training: 0.7179582712369598
User 137255 does not improve AUC. Reverting changes.
Training on augumented user 19119 5/50 current_auc = 0.72075260804769
User 19119 AUC after training: 0.7216840536512668
User 19119 improves AUC. Keeping the model.
Training on augumented user 26548 6/50 current_auc = 0.7216840536512668
User 26548 AUC after training: 0.7203800298062593
User 26548 does not improve AUC. Reverting changes.
Training on augumented user 97116 7/50 current_auc = 0.7216840536512668
User 97116 AUC after training: 0.7200074515648287
User 97116 does not improve AUC. Reverting changes.
Training on augumented user 59756 8/50 current_auc = 0.7216840536512668
User 59756 AUC after training: 0.7213114754098362
User 59756 does not improve AUC. Reverting changes.
Training on augumented user 42210 9/50 current_auc = 0.7216840536512668
User 42210 AUC after training: 0.7201937406855439
User 42210 does not improve AUC. Reverting changes.
Training on augumented user 75537 10/50 current_auc = 0.7216840536512668
User 75537 AUC after training: 0.7211251862891207
User 75537 does not improve AUC. Reverting changes.
Training on augumented user 76904 11/50 current_auc = 0.7216840536512668
User 76904 AUC after training: 0.7220566318926974
User 76904 improves AUC. Keeping the model.
Training on augumented user 66165 12/50 current_auc = 0.7220566318926974
User 66165 AUC after training: 0.7216840536512668
User 66165 does not improve AUC. Reverting changes.
Training on augumented user 115324 13/50 current_auc = 0.7220566318926974
User 115324 AUC after training: 0.7220566318926974
User 115324 does not improve AUC. Reverting changes.
Training on augumented user 81911 14/50 current_auc = 0.7220566318926974
User 81911 AUC after training: 0.721311475409836
User 81911 does not improve AUC. Reverting changes.
Training on augumented user 35862 15/50 current_auc = 0.7220566318926974
User 35862 AUC after training: 0.7220566318926974
User 35862 does not improve AUC. Reverting changes.
Training on augumented user 81488 16/50 current_auc = 0.7220566318926974
User 81488 AUC after training: 0.7216840536512668
User 81488 does not improve AUC. Reverting changes.
Training on augumented user 55163 17/50 current_auc = 0.7220566318926974
User 55163 AUC after training: 0.721870342771982
User 55163 does not improve AUC. Reverting changes.
Training on augumented user 115443 18/50 current_auc = 0.7220566318926974
User 115443 AUC after training: 0.7218703427719821
User 115443 does not improve AUC. Reverting changes.
Training on augumented user 34623 19/50 current_auc = 0.7220566318926974
User 34623 AUC after training: 0.72075260804769
User 34623 does not improve AUC. Reverting changes.
Training on augumented user 12878 20/50 current_auc = 0.7220566318926974
User 12878 AUC after training: 0.7224292101341281
User 12878 improves AUC. Keeping the model.
Training on augumented user 33194 21/50 current_auc = 0.7224292101341281
User 33194 AUC after training: 0.7218703427719821
User 33194 does not improve AUC. Reverting changes.
Training on augumented user 58539 22/50 current_auc = 0.7224292101341281
User 58539 AUC after training: 0.72075260804769
User 58539 does not improve AUC. Reverting changes.
Training on augumented user 123774 23/50 current_auc = 0.7224292101341281
User 123774 AUC after training: 0.7222429210134128
User 123774 does not improve AUC. Reverting changes.
Training on augumented user 137753 24/50 current_auc = 0.7224292101341281
User 137753 AUC after training: 0.7216840536512668
User 137753 does not improve AUC. Reverting changes.
Training on augumented user 103171 25/50 current_auc = 0.7224292101341281
User 103171 AUC after training: 0.7220566318926974
User 103171 does not improve AUC. Reverting changes.
Training on augumented user 82461 26/50 current_auc = 0.7224292101341281
User 82461 AUC after training: 0.7220566318926974
User 82461 does not improve AUC. Reverting changes.
Training on augumented user 84316 27/50 current_auc = 0.7224292101341281
User 84316 AUC after training: 0.7218703427719821
User 84316 does not improve AUC. Reverting changes.
Training on augumented user 51056 28/50 current_auc = 0.7224292101341281
User 51056 AUC after training: 0.7222429210134127
User 51056 does not improve AUC. Reverting changes.
Training on augumented user 3765 29/50 current_auc = 0.7224292101341281
User 3765 AUC after training: 0.72075260804769
User 3765 does not improve AUC. Reverting changes.
Training on augumented user 59404 30/50 current_auc = 0.7224292101341281
User 59404 AUC after training: 0.7214977645305514
User 59404 does not improve AUC. Reverting changes.
Training on augumented user 59617 31/50 current_auc = 0.7224292101341281
User 59617 AUC after training: 0.7218703427719821
User 59617 does not improve AUC. Reverting changes.
Training on augumented user 100675 32/50 current_auc = 0.7224292101341281
User 100675 AUC after training: 0.7222429210134128
User 100675 does not improve AUC. Reverting changes.
Training on augumented user 75418 33/50 current_auc = 0.7224292101341281
User 75418 AUC after training: 0.7222429210134128
User 75418 does not improve AUC. Reverting changes.
Training on augumented user 93562 34/50 current_auc = 0.7224292101341281
User 93562 AUC after training: 0.7218703427719821
User 93562 does not improve AUC. Reverting changes.
Training on augumented user 21758 35/50 current_auc = 0.7224292101341281
User 21758 AUC after training: 0.721311475409836
User 21758 does not improve AUC. Reverting changes.
Training on augumented user 121651 36/50 current_auc = 0.7224292101341281
User 121651 AUC after training: 0.7222429210134128
User 121651 does not improve AUC. Reverting changes.
Training on augumented user 33039 37/50 current_auc = 0.7224292101341281
User 33039 AUC after training: 0.7216840536512668
User 33039 does not improve AUC. Reverting changes.
Training on augumented user 124507 38/50 current_auc = 0.7224292101341281
User 124507 AUC after training: 0.7229880774962743
User 124507 improves AUC. Keeping the model.
Training on augumented user 48104 39/50 current_auc = 0.7229880774962743
User 48104 AUC after training: 0.7222429210134128
User 48104 does not improve AUC. Reverting changes.
Training on augumented user 41834 40/50 current_auc = 0.7229880774962743
User 41834 AUC after training: 0.7207526080476899
User 41834 does not improve AUC. Reverting changes.
Training on augumented user 116901 41/50 current_auc = 0.7229880774962743
User 116901 AUC after training: 0.7229880774962743
User 116901 does not improve AUC. Reverting changes.
Training on augumented user 17474 42/50 current_auc = 0.7229880774962743
User 17474 AUC after training: 0.7226154992548435
User 17474 does not improve AUC. Reverting changes.
Training on augumented user 58775 43/50 current_auc = 0.7229880774962743
User 58775 AUC after training: 0.7231743666169895
User 58775 improves AUC. Keeping the model.
Training on augumented user 62080 44/50 current_auc = 0.7231743666169895
User 62080 AUC after training: 0.723919523099851
User 62080 improves AUC. Keeping the model.
Training on augumented user 123709 45/50 current_auc = 0.723919523099851
User 123709 AUC after training: 0.7226154992548434
User 123709 does not improve AUC. Reverting changes.
Training on augumented user 26821 46/50 current_auc = 0.723919523099851
User 26821 AUC after training: 0.7200074515648287
User 26821 does not improve AUC. Reverting changes.
Training on augumented user 20689 47/50 current_auc = 0.723919523099851
User 20689 AUC after training: 0.7222429210134128
User 20689 does not improve AUC. Reverting changes.
Training on augumented user 133338 48/50 current_auc = 0.723919523099851
User 133338 AUC after training: 0.7229880774962741
User 133338 does not improve AUC. Reverting changes.
Training on augumented user 24419 49/50 current_auc = 0.723919523099851
User 24419 AUC after training: 0.7241058122205664
User 24419 improves AUC. Keeping the model.
[2024-12-02 18:50:03.257027] start test user 16936 132/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:03.980601] start test user 16936 132/568 recall augumented users by random, augumented_users = [83006, 1603, 78516, 22112, 15463, 53868, 13618, 79142, 107916, 16142, 57052, 8120, 60612, 72733, 100570, 39505, 102336, 92301, 76056, 125856, 43690, 9069, 3667, 6100, 86855, 64037, 75078, 70697, 22815, 66014, 18633, 14618, 77451, 56023, 106193, 81562, 120478, 43896, 9326, 76784, 106689, 50950, 43977, 130554, 97855, 28920, 31359, 53101, 133638, 113783]
[2024-12-02 18:50:04.010363] user = 16936 Cloud 132/568
[2024-12-02 18:50:04.038150] user = 16936 Local 132/568
[2024-12-02 18:50:04.155645] user = 16936 Local+ 132/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:06.859967] user = 16936 MPDA- 132/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6776960784313726
Training on augumented user 83006 0/50 current_auc = 0.6776960784313726
User 83006 AUC after training: 0.677389705882353
User 83006 does not improve AUC. Reverting changes.
Training on augumented user 1603 1/50 current_auc = 0.6776960784313726
User 1603 AUC after training: 0.6776960784313726
User 1603 does not improve AUC. Reverting changes.
Training on augumented user 78516 2/50 current_auc = 0.6776960784313726
User 78516 AUC after training: 0.677593954248366
User 78516 does not improve AUC. Reverting changes.
Training on augumented user 22112 3/50 current_auc = 0.6776960784313726
User 22112 AUC after training: 0.6772875816993464
User 22112 does not improve AUC. Reverting changes.
Training on augumented user 15463 4/50 current_auc = 0.6776960784313726
User 15463 AUC after training: 0.6777982026143791
User 15463 improves AUC. Keeping the model.
Training on augumented user 53868 5/50 current_auc = 0.6777982026143791
User 53868 AUC after training: 0.6780024509803921
User 53868 improves AUC. Keeping the model.
Training on augumented user 13618 6/50 current_auc = 0.6780024509803921
User 13618 AUC after training: 0.6773897058823529
User 13618 does not improve AUC. Reverting changes.
Training on augumented user 79142 7/50 current_auc = 0.6780024509803921
User 79142 AUC after training: 0.6780024509803921
User 79142 does not improve AUC. Reverting changes.
Training on augumented user 107916 8/50 current_auc = 0.6780024509803921
User 107916 AUC after training: 0.6780024509803921
User 107916 does not improve AUC. Reverting changes.
Training on augumented user 16142 9/50 current_auc = 0.6780024509803921
User 16142 AUC after training: 0.6767769607843137
User 16142 does not improve AUC. Reverting changes.
Training on augumented user 57052 10/50 current_auc = 0.6780024509803921
User 57052 AUC after training: 0.6781045751633987
User 57052 improves AUC. Keeping the model.
Training on augumented user 8120 11/50 current_auc = 0.6781045751633987
User 8120 AUC after training: 0.6766748366013071
User 8120 does not improve AUC. Reverting changes.
Training on augumented user 60612 12/50 current_auc = 0.6781045751633987
User 60612 AUC after training: 0.677593954248366
User 60612 does not improve AUC. Reverting changes.
Training on augumented user 72733 13/50 current_auc = 0.6781045751633987
User 72733 AUC after training: 0.677593954248366
User 72733 does not improve AUC. Reverting changes.
Training on augumented user 100570 14/50 current_auc = 0.6781045751633987
User 100570 AUC after training: 0.6780024509803921
User 100570 does not improve AUC. Reverting changes.
Training on augumented user 39505 15/50 current_auc = 0.6781045751633987
User 39505 AUC after training: 0.6780024509803921
User 39505 does not improve AUC. Reverting changes.
Training on augumented user 102336 16/50 current_auc = 0.6781045751633987
User 102336 AUC after training: 0.6781045751633987
User 102336 does not improve AUC. Reverting changes.
Training on augumented user 92301 17/50 current_auc = 0.6781045751633987
User 92301 AUC after training: 0.6780024509803921
User 92301 does not improve AUC. Reverting changes.
Training on augumented user 76056 18/50 current_auc = 0.6781045751633987
User 76056 AUC after training: 0.6780024509803921
User 76056 does not improve AUC. Reverting changes.
Training on augumented user 125856 19/50 current_auc = 0.6781045751633987
User 125856 AUC after training: 0.6779003267973855
User 125856 does not improve AUC. Reverting changes.
Training on augumented user 43690 20/50 current_auc = 0.6781045751633987
User 43690 AUC after training: 0.6780024509803921
User 43690 does not improve AUC. Reverting changes.
Training on augumented user 9069 21/50 current_auc = 0.6781045751633987
User 9069 AUC after training: 0.6777982026143791
User 9069 does not improve AUC. Reverting changes.
Training on augumented user 3667 22/50 current_auc = 0.6781045751633987
User 3667 AUC after training: 0.6758578431372548
User 3667 does not improve AUC. Reverting changes.
Training on augumented user 6100 23/50 current_auc = 0.6781045751633987
User 6100 AUC after training: 0.6782066993464052
User 6100 improves AUC. Keeping the model.
Training on augumented user 86855 24/50 current_auc = 0.6782066993464052
User 86855 AUC after training: 0.6782066993464052
User 86855 does not improve AUC. Reverting changes.
Training on augumented user 64037 25/50 current_auc = 0.6782066993464052
User 64037 AUC after training: 0.6780024509803921
User 64037 does not improve AUC. Reverting changes.
Training on augumented user 75078 26/50 current_auc = 0.6782066993464052
User 75078 AUC after training: 0.6782066993464052
User 75078 does not improve AUC. Reverting changes.
Training on augumented user 70697 27/50 current_auc = 0.6782066993464052
User 70697 AUC after training: 0.6783088235294117
User 70697 improves AUC. Keeping the model.
Training on augumented user 22815 28/50 current_auc = 0.6783088235294117
User 22815 AUC after training: 0.6779003267973855
User 22815 does not improve AUC. Reverting changes.
Training on augumented user 66014 29/50 current_auc = 0.6783088235294117
User 66014 AUC after training: 0.6780024509803921
User 66014 does not improve AUC. Reverting changes.
Training on augumented user 18633 30/50 current_auc = 0.6783088235294117
User 18633 AUC after training: 0.6776960784313726
User 18633 does not improve AUC. Reverting changes.
Training on augumented user 14618 31/50 current_auc = 0.6783088235294117
User 14618 AUC after training: 0.6777982026143792
User 14618 does not improve AUC. Reverting changes.
Training on augumented user 77451 32/50 current_auc = 0.6783088235294117
User 77451 AUC after training: 0.6767769607843137
User 77451 does not improve AUC. Reverting changes.
Training on augumented user 56023 33/50 current_auc = 0.6783088235294117
User 56023 AUC after training: 0.6770833333333333
User 56023 does not improve AUC. Reverting changes.
Training on augumented user 106193 34/50 current_auc = 0.6783088235294117
User 106193 AUC after training: 0.6780024509803921
User 106193 does not improve AUC. Reverting changes.
Training on augumented user 81562 35/50 current_auc = 0.6783088235294117
User 81562 AUC after training: 0.6780024509803921
User 81562 does not improve AUC. Reverting changes.
Training on augumented user 120478 36/50 current_auc = 0.6783088235294117
User 120478 AUC after training: 0.6781045751633987
User 120478 does not improve AUC. Reverting changes.
Training on augumented user 43896 37/50 current_auc = 0.6783088235294117
User 43896 AUC after training: 0.6784109477124183
User 43896 improves AUC. Keeping the model.
Training on augumented user 9326 38/50 current_auc = 0.6784109477124183
User 9326 AUC after training: 0.6782066993464052
User 9326 does not improve AUC. Reverting changes.
Training on augumented user 76784 39/50 current_auc = 0.6784109477124183
User 76784 AUC after training: 0.6776960784313726
User 76784 does not improve AUC. Reverting changes.
Training on augumented user 106689 40/50 current_auc = 0.6784109477124183
User 106689 AUC after training: 0.6780024509803921
User 106689 does not improve AUC. Reverting changes.
Training on augumented user 50950 41/50 current_auc = 0.6784109477124183
User 50950 AUC after training: 0.6776960784313726
User 50950 does not improve AUC. Reverting changes.
Training on augumented user 43977 42/50 current_auc = 0.6784109477124183
User 43977 AUC after training: 0.6780024509803921
User 43977 does not improve AUC. Reverting changes.
Training on augumented user 130554 43/50 current_auc = 0.6784109477124183
User 130554 AUC after training: 0.6766237745098039
User 130554 does not improve AUC. Reverting changes.
Training on augumented user 97855 44/50 current_auc = 0.6784109477124183
User 97855 AUC after training: 0.6780024509803921
User 97855 does not improve AUC. Reverting changes.
Training on augumented user 28920 45/50 current_auc = 0.6784109477124183
User 28920 AUC after training: 0.6774918300653594
User 28920 does not improve AUC. Reverting changes.
Training on augumented user 31359 46/50 current_auc = 0.6784109477124183
User 31359 AUC after training: 0.6782066993464052
User 31359 does not improve AUC. Reverting changes.
Training on augumented user 53101 47/50 current_auc = 0.6784109477124183
User 53101 AUC after training: 0.6780024509803921
User 53101 does not improve AUC. Reverting changes.
Training on augumented user 133638 48/50 current_auc = 0.6784109477124183
User 133638 AUC after training: 0.6783088235294117
User 133638 does not improve AUC. Reverting changes.
Training on augumented user 113783 49/50 current_auc = 0.6784109477124183
User 113783 AUC after training: 0.6779003267973857
User 113783 does not improve AUC. Reverting changes.
[2024-12-02 18:50:33.597104] start test user 16938 133/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:34.007747] start test user 16938 133/568 recall augumented users by random, augumented_users = [118543, 88983, 49720, 23879, 104173, 107641, 879, 60323, 1245, 4570, 54619, 137958, 70197, 89760, 15547, 66892, 34220, 6659, 64685, 67629, 102836, 19587, 50200, 74513, 112729, 62612, 38756, 95426, 52039, 76409, 92428, 99038, 24809, 2625, 93392, 64651, 92908, 33099, 32278, 50186, 22677, 80245, 63330, 47360, 110615, 99013, 65249, 111482, 98735, 66831]
[2024-12-02 18:50:34.025853] user = 16938 Cloud 133/568
[2024-12-02 18:50:34.042014] user = 16938 Local 133/568
[2024-12-02 18:50:34.705805] user = 16938 Local+ 133/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:37.569324] user = 16938 MPDA- 133/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.49761526232114467
Training on augumented user 118543 0/50 current_auc = 0.49761526232114467
User 118543 AUC after training: 0.49801271860095386
User 118543 improves AUC. Keeping the model.
Training on augumented user 88983 1/50 current_auc = 0.49801271860095386
User 88983 AUC after training: 0.5019872813990461
User 88983 improves AUC. Keeping the model.
Training on augumented user 49720 2/50 current_auc = 0.5019872813990461
User 49720 AUC after training: 0.5097376788553258
User 49720 improves AUC. Keeping the model.
Training on augumented user 23879 3/50 current_auc = 0.5097376788553258
User 23879 AUC after training: 0.5093402225755167
User 23879 does not improve AUC. Reverting changes.
Training on augumented user 104173 4/50 current_auc = 0.5097376788553258
User 104173 AUC after training: 0.5091414944356121
User 104173 does not improve AUC. Reverting changes.
Training on augumented user 107641 5/50 current_auc = 0.5097376788553258
User 107641 AUC after training: 0.5079491255961845
User 107641 does not improve AUC. Reverting changes.
Training on augumented user 879 6/50 current_auc = 0.5097376788553258
User 879 AUC after training: 0.5073529411764706
User 879 does not improve AUC. Reverting changes.
Training on augumented user 60323 7/50 current_auc = 0.5097376788553258
User 60323 AUC after training: 0.5093402225755167
User 60323 does not improve AUC. Reverting changes.
Training on augumented user 1245 8/50 current_auc = 0.5097376788553258
User 1245 AUC after training: 0.5077503974562798
User 1245 does not improve AUC. Reverting changes.
Training on augumented user 4570 9/50 current_auc = 0.5097376788553258
User 4570 AUC after training: 0.5007949125596185
User 4570 does not improve AUC. Reverting changes.
Training on augumented user 54619 10/50 current_auc = 0.5097376788553258
User 54619 AUC after training: 0.5101351351351351
User 54619 improves AUC. Keeping the model.
Training on augumented user 137958 11/50 current_auc = 0.5101351351351351
User 137958 AUC after training: 0.5073529411764706
User 137958 does not improve AUC. Reverting changes.
Training on augumented user 70197 12/50 current_auc = 0.5101351351351351
User 70197 AUC after training: 0.5067567567567567
User 70197 does not improve AUC. Reverting changes.
Training on augumented user 89760 13/50 current_auc = 0.5101351351351351
User 89760 AUC after training: 0.5103338632750397
User 89760 improves AUC. Keeping the model.
Training on augumented user 15547 14/50 current_auc = 0.5103338632750397
User 15547 AUC after training: 0.5085453100158982
User 15547 does not improve AUC. Reverting changes.
Training on augumented user 66892 15/50 current_auc = 0.5103338632750397
User 66892 AUC after training: 0.5083465818759936
User 66892 does not improve AUC. Reverting changes.
Training on augumented user 34220 16/50 current_auc = 0.5103338632750397
User 34220 AUC after training: 0.5023847376788553
User 34220 does not improve AUC. Reverting changes.
Training on augumented user 6659 17/50 current_auc = 0.5103338632750397
User 6659 AUC after training: 0.5093402225755167
User 6659 does not improve AUC. Reverting changes.
Training on augumented user 64685 18/50 current_auc = 0.5103338632750397
User 64685 AUC after training: 0.5041732909379968
User 64685 does not improve AUC. Reverting changes.
Training on augumented user 67629 19/50 current_auc = 0.5103338632750397
User 67629 AUC after training: 0.4968203497615262
User 67629 does not improve AUC. Reverting changes.
Training on augumented user 102836 20/50 current_auc = 0.5103338632750397
User 102836 AUC after training: 0.5109300476947536
User 102836 improves AUC. Keeping the model.
Training on augumented user 19587 21/50 current_auc = 0.5109300476947536
User 19587 AUC after training: 0.5057631160572338
User 19587 does not improve AUC. Reverting changes.
Training on augumented user 50200 22/50 current_auc = 0.5109300476947536
User 50200 AUC after training: 0.5073529411764707
User 50200 does not improve AUC. Reverting changes.
Training on augumented user 74513 23/50 current_auc = 0.5109300476947536
User 74513 AUC after training: 0.5081478537360891
User 74513 does not improve AUC. Reverting changes.
Training on augumented user 112729 24/50 current_auc = 0.5109300476947536
User 112729 AUC after training: 0.5031796502384738
User 112729 does not improve AUC. Reverting changes.
Training on augumented user 62612 25/50 current_auc = 0.5109300476947536
User 62612 AUC after training: 0.5089427662957076
User 62612 does not improve AUC. Reverting changes.
Training on augumented user 38756 26/50 current_auc = 0.5109300476947536
User 38756 AUC after training: 0.5043720190779014
User 38756 does not improve AUC. Reverting changes.
Training on augumented user 95426 27/50 current_auc = 0.5109300476947536
User 95426 AUC after training: 0.49602543720190784
User 95426 does not improve AUC. Reverting changes.
Training on augumented user 52039 28/50 current_auc = 0.5109300476947536
User 52039 AUC after training: 0.5073529411764706
User 52039 does not improve AUC. Reverting changes.
Training on augumented user 76409 29/50 current_auc = 0.5109300476947536
User 76409 AUC after training: 0.5057631160572338
User 76409 does not improve AUC. Reverting changes.
Training on augumented user 92428 30/50 current_auc = 0.5109300476947536
User 92428 AUC after training: 0.5065580286168522
User 92428 does not improve AUC. Reverting changes.
Training on augumented user 99038 31/50 current_auc = 0.5109300476947536
User 99038 AUC after training: 0.5073529411764706
User 99038 does not improve AUC. Reverting changes.
Training on augumented user 24809 32/50 current_auc = 0.5109300476947536
User 24809 AUC after training: 0.4976152623211447
User 24809 does not improve AUC. Reverting changes.
Training on augumented user 2625 33/50 current_auc = 0.5109300476947536
User 2625 AUC after training: 0.5063593004769475
User 2625 does not improve AUC. Reverting changes.
Training on augumented user 93392 34/50 current_auc = 0.5109300476947536
User 93392 AUC after training: 0.5065580286168521
User 93392 does not improve AUC. Reverting changes.
Training on augumented user 64651 35/50 current_auc = 0.5109300476947536
User 64651 AUC after training: 0.505564387917329
User 64651 does not improve AUC. Reverting changes.
Training on augumented user 92908 36/50 current_auc = 0.5109300476947536
User 92908 AUC after training: 0.5073529411764706
User 92908 does not improve AUC. Reverting changes.
Training on augumented user 33099 37/50 current_auc = 0.5109300476947536
User 33099 AUC after training: 0.5061605723370428
User 33099 does not improve AUC. Reverting changes.
Training on augumented user 32278 38/50 current_auc = 0.5109300476947536
User 32278 AUC after training: 0.5085453100158982
User 32278 does not improve AUC. Reverting changes.
Training on augumented user 50186 39/50 current_auc = 0.5109300476947536
User 50186 AUC after training: 0.5061605723370429
User 50186 does not improve AUC. Reverting changes.
Training on augumented user 22677 40/50 current_auc = 0.5109300476947536
User 22677 AUC after training: 0.5065580286168522
User 22677 does not improve AUC. Reverting changes.
Training on augumented user 80245 41/50 current_auc = 0.5109300476947536
User 80245 AUC after training: 0.5077503974562798
User 80245 does not improve AUC. Reverting changes.
Training on augumented user 63330 42/50 current_auc = 0.5109300476947536
User 63330 AUC after training: 0.5089427662957074
User 63330 does not improve AUC. Reverting changes.
Training on augumented user 47360 43/50 current_auc = 0.5109300476947536
User 47360 AUC after training: 0.5057631160572337
User 47360 does not improve AUC. Reverting changes.
Training on augumented user 110615 44/50 current_auc = 0.5109300476947536
User 110615 AUC after training: 0.498012718600954
User 110615 does not improve AUC. Reverting changes.
Training on augumented user 99013 45/50 current_auc = 0.5109300476947536
User 99013 AUC after training: 0.4984101748807631
User 99013 does not improve AUC. Reverting changes.
Training on augumented user 65249 46/50 current_auc = 0.5109300476947536
User 65249 AUC after training: 0.5063593004769475
User 65249 does not improve AUC. Reverting changes.
Training on augumented user 111482 47/50 current_auc = 0.5109300476947536
User 111482 AUC after training: 0.5065580286168522
User 111482 does not improve AUC. Reverting changes.
Training on augumented user 98735 48/50 current_auc = 0.5109300476947536
User 98735 AUC after training: 0.5089427662957076
User 98735 does not improve AUC. Reverting changes.
Training on augumented user 66831 49/50 current_auc = 0.5109300476947536
User 66831 AUC after training: 0.504570747217806
User 66831 does not improve AUC. Reverting changes.
[2024-12-02 18:51:12.454602] start test user 16943 134/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:13.150484] start test user 16943 134/568 recall augumented users by random, augumented_users = [87226, 44020, 138100, 88825, 97764, 58280, 49097, 49677, 50590, 19441, 49825, 19705, 87074, 130331, 128388, 57942, 1698, 115281, 56164, 49245, 2584, 117975, 98515, 39697, 32413, 10921, 106396, 112730, 93852, 15086, 116301, 37248, 74740, 55725, 118948, 5966, 100777, 93329, 61791, 21999, 81058, 84787, 129054, 107911, 34376, 135337, 93163, 122447, 68133, 109232]
[2024-12-02 18:51:13.166149] user = 16943 Cloud 134/568
[2024-12-02 18:51:13.202275] user = 16943 Local 134/568
[2024-12-02 18:51:13.329145] user = 16943 Local+ 134/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:15.390597] user = 16943 MPDA- 134/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6215355340448416
Training on augumented user 87226 0/50 current_auc = 0.6215355340448416
User 87226 AUC after training: 0.6228592702903947
User 87226 improves AUC. Keeping the model.
Training on augumented user 44020 1/50 current_auc = 0.6228592702903947
User 44020 AUC after training: 0.623438404897824
User 44020 improves AUC. Keeping the model.
Training on augumented user 138100 2/50 current_auc = 0.623438404897824
User 138100 AUC after training: 0.6231488375941094
User 138100 does not improve AUC. Reverting changes.
Training on augumented user 88825 3/50 current_auc = 0.623438404897824
User 88825 AUC after training: 0.621411433771821
User 88825 does not improve AUC. Reverting changes.
Training on augumented user 97764 4/50 current_auc = 0.623438404897824
User 97764 AUC after training: 0.6238107057168859
User 97764 improves AUC. Keeping the model.
Training on augumented user 58280 5/50 current_auc = 0.6238107057168859
User 58280 AUC after training: 0.6228592702903946
User 58280 does not improve AUC. Reverting changes.
Training on augumented user 49097 6/50 current_auc = 0.6238107057168859
User 49097 AUC after training: 0.6241416397782741
User 49097 improves AUC. Keeping the model.
Training on augumented user 49677 7/50 current_auc = 0.6241416397782741
User 49677 AUC after training: 0.6234384048978241
User 49677 does not improve AUC. Reverting changes.
Training on augumented user 50590 8/50 current_auc = 0.6241416397782741
User 50590 AUC after training: 0.6247621411433771
User 50590 improves AUC. Keeping the model.
Training on augumented user 19441 9/50 current_auc = 0.6247621411433771
User 19441 AUC after training: 0.6242243732936213
User 19441 does not improve AUC. Reverting changes.
Training on augumented user 49825 10/50 current_auc = 0.6247621411433771
User 49825 AUC after training: 0.6245139405973359
User 49825 does not improve AUC. Reverting changes.
Training on augumented user 19705 11/50 current_auc = 0.6247621411433771
User 19705 AUC after training: 0.6252171754777861
User 19705 improves AUC. Keeping the model.
Training on augumented user 87074 12/50 current_auc = 0.6252171754777861
User 87074 AUC after training: 0.6255481095391743
User 87074 improves AUC. Keeping the model.
Training on augumented user 130331 13/50 current_auc = 0.6255481095391743
User 130331 AUC after training: 0.6256308430545213
User 130331 improves AUC. Keeping the model.
Training on augumented user 128388 14/50 current_auc = 0.6256308430545213
User 128388 AUC after training: 0.6250517084470918
User 128388 does not improve AUC. Reverting changes.
Training on augumented user 57942 15/50 current_auc = 0.6256308430545213
User 57942 AUC after training: 0.6248448746587242
User 57942 does not improve AUC. Reverting changes.
Training on augumented user 1698 16/50 current_auc = 0.6256308430545213
User 1698 AUC after training: 0.6264168114503185
User 1698 improves AUC. Keeping the model.
Training on augumented user 115281 17/50 current_auc = 0.6264168114503185
User 115281 AUC after training: 0.6261272441466037
User 115281 does not improve AUC. Reverting changes.
Training on augumented user 56164 18/50 current_auc = 0.6264168114503185
User 56164 AUC after training: 0.6257135765698686
User 56164 does not improve AUC. Reverting changes.
Training on augumented user 49245 19/50 current_auc = 0.6264168114503185
User 49245 AUC after training: 0.6246794076280301
User 49245 does not improve AUC. Reverting changes.
Training on augumented user 2584 20/50 current_auc = 0.6264168114503185
User 2584 AUC after training: 0.6263754446926451
User 2584 does not improve AUC. Reverting changes.
Training on augumented user 117975 21/50 current_auc = 0.6264168114503185
User 117975 AUC after training: 0.6260858773889302
User 117975 does not improve AUC. Reverting changes.
Training on augumented user 98515 22/50 current_auc = 0.6264168114503185
User 98515 AUC after training: 0.626458178207992
User 98515 improves AUC. Keeping the model.
Training on augumented user 39697 23/50 current_auc = 0.626458178207992
User 39697 AUC after training: 0.6266236452386862
User 39697 improves AUC. Keeping the model.
Training on augumented user 32413 24/50 current_auc = 0.6266236452386862
User 32413 AUC after training: 0.6264581782079921
User 32413 does not improve AUC. Reverting changes.
Training on augumented user 10921 25/50 current_auc = 0.6266236452386862
User 10921 AUC after training: 0.6262513444196244
User 10921 does not improve AUC. Reverting changes.
Training on augumented user 106396 26/50 current_auc = 0.6266236452386862
User 106396 AUC after training: 0.6254240092661537
User 106396 does not improve AUC. Reverting changes.
Training on augumented user 112730 27/50 current_auc = 0.6266236452386862
User 112730 AUC after training: 0.6257135765698684
User 112730 does not improve AUC. Reverting changes.
Training on augumented user 93852 28/50 current_auc = 0.6266236452386862
User 93852 AUC after training: 0.6262927111772979
User 93852 does not improve AUC. Reverting changes.
Training on augumented user 15086 29/50 current_auc = 0.6266236452386862
User 15086 AUC after training: 0.6269545793000744
User 15086 improves AUC. Keeping the model.
Training on augumented user 116301 30/50 current_auc = 0.6269545793000744
User 116301 AUC after training: 0.6267063787540333
User 116301 does not improve AUC. Reverting changes.
Training on augumented user 37248 31/50 current_auc = 0.6269545793000744
User 37248 AUC after training: 0.6272027798461156
User 37248 improves AUC. Keeping the model.
Training on augumented user 74740 32/50 current_auc = 0.6272027798461156
User 74740 AUC after training: 0.6272027798461156
User 74740 does not improve AUC. Reverting changes.
Training on augumented user 55725 33/50 current_auc = 0.6272027798461156
User 55725 AUC after training: 0.6269545793000744
User 55725 does not improve AUC. Reverting changes.
Training on augumented user 118948 34/50 current_auc = 0.6272027798461156
User 118948 AUC after training: 0.6275337139075039
User 118948 improves AUC. Keeping the model.
Training on augumented user 5966 35/50 current_auc = 0.6275337139075039
User 5966 AUC after training: 0.6266236452386862
User 5966 does not improve AUC. Reverting changes.
Training on augumented user 100777 36/50 current_auc = 0.6275337139075039
User 100777 AUC after training: 0.6253826425084803
User 100777 does not improve AUC. Reverting changes.
Training on augumented user 93329 37/50 current_auc = 0.6275337139075039
User 93329 AUC after training: 0.6270786795730949
User 93329 does not improve AUC. Reverting changes.
Training on augumented user 61791 38/50 current_auc = 0.6275337139075039
User 61791 AUC after training: 0.6274923471498304
User 61791 does not improve AUC. Reverting changes.
Training on augumented user 21999 39/50 current_auc = 0.6275337139075039
User 21999 AUC after training: 0.627616447422851
User 21999 improves AUC. Keeping the model.
Training on augumented user 81058 40/50 current_auc = 0.627616447422851
User 81058 AUC after training: 0.6275750806651774
User 81058 does not improve AUC. Reverting changes.
Training on augumented user 84787 41/50 current_auc = 0.627616447422851
User 84787 AUC after training: 0.6272441466037891
User 84787 does not improve AUC. Reverting changes.
Training on augumented user 129054 42/50 current_auc = 0.627616447422851
User 129054 AUC after training: 0.6258790436005626
User 129054 does not improve AUC. Reverting changes.
Training on augumented user 107911 43/50 current_auc = 0.627616447422851
User 107911 AUC after training: 0.6272855133614628
User 107911 does not improve AUC. Reverting changes.
Training on augumented user 34376 44/50 current_auc = 0.627616447422851
User 34376 AUC after training: 0.6272441466037891
User 34376 does not improve AUC. Reverting changes.
Training on augumented user 135337 45/50 current_auc = 0.627616447422851
User 135337 AUC after training: 0.6264995449656655
User 135337 does not improve AUC. Reverting changes.
Training on augumented user 93163 46/50 current_auc = 0.627616447422851
User 93163 AUC after training: 0.6276991809381981
User 93163 improves AUC. Keeping the model.
Training on augumented user 122447 47/50 current_auc = 0.6276991809381981
User 122447 AUC after training: 0.6273268801191362
User 122447 does not improve AUC. Reverting changes.
Training on augumented user 68133 48/50 current_auc = 0.6276991809381981
User 68133 AUC after training: 0.6279060147265656
User 68133 improves AUC. Keeping the model.
Training on augumented user 109232 49/50 current_auc = 0.6279060147265656
User 109232 AUC after training: 0.6278646479688922
User 109232 does not improve AUC. Reverting changes.
[2024-12-02 18:51:44.182936] start test user 16965 135/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:44.610116] start test user 16965 135/568 recall augumented users by random, augumented_users = [84181, 64319, 8501, 13016, 34660, 113445, 7771, 25311, 55328, 55592, 30012, 137393, 129426, 20440, 4553, 40968, 76330, 117073, 113083, 39796, 91864, 75384, 48302, 94969, 132957, 59319, 94824, 128735, 108781, 67346, 113146, 43976, 59484, 54470, 62224, 7122, 44256, 114382, 63646, 57728, 35404, 39548, 66626, 114408, 42285, 117529, 66960, 29955, 106495, 41984]
[2024-12-02 18:51:44.625221] user = 16965 Cloud 135/568
[2024-12-02 18:51:44.635250] user = 16965 Local 135/568
[2024-12-02 18:51:44.667389] user = 16965 Local+ 135/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:48.524848] user = 16965 MPDA- 135/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3896103896103896
Training on augumented user 84181 0/50 current_auc = 0.3896103896103896
User 84181 AUC after training: 0.3896103896103896
User 84181 does not improve AUC. Reverting changes.
Training on augumented user 64319 1/50 current_auc = 0.3896103896103896
User 64319 AUC after training: 0.3896103896103896
User 64319 does not improve AUC. Reverting changes.
Training on augumented user 8501 2/50 current_auc = 0.3896103896103896
User 8501 AUC after training: 0.3896103896103896
User 8501 does not improve AUC. Reverting changes.
Training on augumented user 13016 3/50 current_auc = 0.3896103896103896
User 13016 AUC after training: 0.3896103896103896
User 13016 does not improve AUC. Reverting changes.
Training on augumented user 34660 4/50 current_auc = 0.3896103896103896
User 34660 AUC after training: 0.3896103896103896
User 34660 does not improve AUC. Reverting changes.
Training on augumented user 113445 5/50 current_auc = 0.3896103896103896
User 113445 AUC after training: 0.3896103896103896
User 113445 does not improve AUC. Reverting changes.
Training on augumented user 7771 6/50 current_auc = 0.3896103896103896
User 7771 AUC after training: 0.3896103896103896
User 7771 does not improve AUC. Reverting changes.
Training on augumented user 25311 7/50 current_auc = 0.3896103896103896
User 25311 AUC after training: 0.3896103896103896
User 25311 does not improve AUC. Reverting changes.
Training on augumented user 55328 8/50 current_auc = 0.3896103896103896
User 55328 AUC after training: 0.3896103896103896
User 55328 does not improve AUC. Reverting changes.
Training on augumented user 55592 9/50 current_auc = 0.3896103896103896
User 55592 AUC after training: 0.3896103896103896
User 55592 does not improve AUC. Reverting changes.
Training on augumented user 30012 10/50 current_auc = 0.3896103896103896
User 30012 AUC after training: 0.3896103896103896
User 30012 does not improve AUC. Reverting changes.
Training on augumented user 137393 11/50 current_auc = 0.3896103896103896
User 137393 AUC after training: 0.3896103896103896
User 137393 does not improve AUC. Reverting changes.
Training on augumented user 129426 12/50 current_auc = 0.3896103896103896
User 129426 AUC after training: 0.3896103896103896
User 129426 does not improve AUC. Reverting changes.
Training on augumented user 20440 13/50 current_auc = 0.3896103896103896
User 20440 AUC after training: 0.3896103896103896
User 20440 does not improve AUC. Reverting changes.
Training on augumented user 4553 14/50 current_auc = 0.3896103896103896
User 4553 AUC after training: 0.3896103896103896
User 4553 does not improve AUC. Reverting changes.
Training on augumented user 40968 15/50 current_auc = 0.3896103896103896
User 40968 AUC after training: 0.4025974025974026
User 40968 improves AUC. Keeping the model.
Training on augumented user 76330 16/50 current_auc = 0.4025974025974026
User 76330 AUC after training: 0.3896103896103896
User 76330 does not improve AUC. Reverting changes.
Training on augumented user 117073 17/50 current_auc = 0.4025974025974026
User 117073 AUC after training: 0.4025974025974026
User 117073 does not improve AUC. Reverting changes.
Training on augumented user 113083 18/50 current_auc = 0.4025974025974026
User 113083 AUC after training: 0.4025974025974026
User 113083 does not improve AUC. Reverting changes.
Training on augumented user 39796 19/50 current_auc = 0.4025974025974026
User 39796 AUC after training: 0.3896103896103896
User 39796 does not improve AUC. Reverting changes.
Training on augumented user 91864 20/50 current_auc = 0.4025974025974026
User 91864 AUC after training: 0.4025974025974026
User 91864 does not improve AUC. Reverting changes.
Training on augumented user 75384 21/50 current_auc = 0.4025974025974026
User 75384 AUC after training: 0.4025974025974026
User 75384 does not improve AUC. Reverting changes.
Training on augumented user 48302 22/50 current_auc = 0.4025974025974026
User 48302 AUC after training: 0.3896103896103896
User 48302 does not improve AUC. Reverting changes.
Training on augumented user 94969 23/50 current_auc = 0.4025974025974026
User 94969 AUC after training: 0.4025974025974026
User 94969 does not improve AUC. Reverting changes.
Training on augumented user 132957 24/50 current_auc = 0.4025974025974026
User 132957 AUC after training: 0.3896103896103896
User 132957 does not improve AUC. Reverting changes.
Training on augumented user 59319 25/50 current_auc = 0.4025974025974026
User 59319 AUC after training: 0.3896103896103896
User 59319 does not improve AUC. Reverting changes.
Training on augumented user 94824 26/50 current_auc = 0.4025974025974026
User 94824 AUC after training: 0.4025974025974026
User 94824 does not improve AUC. Reverting changes.
Training on augumented user 128735 27/50 current_auc = 0.4025974025974026
User 128735 AUC after training: 0.4025974025974026
User 128735 does not improve AUC. Reverting changes.
Training on augumented user 108781 28/50 current_auc = 0.4025974025974026
User 108781 AUC after training: 0.3896103896103896
User 108781 does not improve AUC. Reverting changes.
Training on augumented user 67346 29/50 current_auc = 0.4025974025974026
User 67346 AUC after training: 0.35064935064935066
User 67346 does not improve AUC. Reverting changes.
Training on augumented user 113146 30/50 current_auc = 0.4025974025974026
User 113146 AUC after training: 0.4025974025974026
User 113146 does not improve AUC. Reverting changes.
Training on augumented user 43976 31/50 current_auc = 0.4025974025974026
User 43976 AUC after training: 0.4025974025974026
User 43976 does not improve AUC. Reverting changes.
Training on augumented user 59484 32/50 current_auc = 0.4025974025974026
User 59484 AUC after training: 0.3896103896103896
User 59484 does not improve AUC. Reverting changes.
Training on augumented user 54470 33/50 current_auc = 0.4025974025974026
User 54470 AUC after training: 0.4025974025974026
User 54470 does not improve AUC. Reverting changes.
Training on augumented user 62224 34/50 current_auc = 0.4025974025974026
User 62224 AUC after training: 0.4025974025974026
User 62224 does not improve AUC. Reverting changes.
Training on augumented user 7122 35/50 current_auc = 0.4025974025974026
User 7122 AUC after training: 0.4025974025974026
User 7122 does not improve AUC. Reverting changes.
Training on augumented user 44256 36/50 current_auc = 0.4025974025974026
User 44256 AUC after training: 0.4025974025974026
User 44256 does not improve AUC. Reverting changes.
Training on augumented user 114382 37/50 current_auc = 0.4025974025974026
User 114382 AUC after training: 0.4025974025974026
User 114382 does not improve AUC. Reverting changes.
Training on augumented user 63646 38/50 current_auc = 0.4025974025974026
User 63646 AUC after training: 0.3896103896103896
User 63646 does not improve AUC. Reverting changes.
Training on augumented user 57728 39/50 current_auc = 0.4025974025974026
User 57728 AUC after training: 0.4025974025974026
User 57728 does not improve AUC. Reverting changes.
Training on augumented user 35404 40/50 current_auc = 0.4025974025974026
User 35404 AUC after training: 0.3896103896103896
User 35404 does not improve AUC. Reverting changes.
Training on augumented user 39548 41/50 current_auc = 0.4025974025974026
User 39548 AUC after training: 0.3896103896103896
User 39548 does not improve AUC. Reverting changes.
Training on augumented user 66626 42/50 current_auc = 0.4025974025974026
User 66626 AUC after training: 0.3896103896103896
User 66626 does not improve AUC. Reverting changes.
Training on augumented user 114408 43/50 current_auc = 0.4025974025974026
User 114408 AUC after training: 0.3896103896103896
User 114408 does not improve AUC. Reverting changes.
Training on augumented user 42285 44/50 current_auc = 0.4025974025974026
User 42285 AUC after training: 0.4025974025974026
User 42285 does not improve AUC. Reverting changes.
Training on augumented user 117529 45/50 current_auc = 0.4025974025974026
User 117529 AUC after training: 0.4025974025974026
User 117529 does not improve AUC. Reverting changes.
Training on augumented user 66960 46/50 current_auc = 0.4025974025974026
User 66960 AUC after training: 0.4025974025974026
User 66960 does not improve AUC. Reverting changes.
Training on augumented user 29955 47/50 current_auc = 0.4025974025974026
User 29955 AUC after training: 0.4025974025974026
User 29955 does not improve AUC. Reverting changes.
Training on augumented user 106495 48/50 current_auc = 0.4025974025974026
User 106495 AUC after training: 0.3896103896103896
User 106495 does not improve AUC. Reverting changes.
Training on augumented user 41984 49/50 current_auc = 0.4025974025974026
User 41984 AUC after training: 0.4025974025974026
User 41984 does not improve AUC. Reverting changes.
[2024-12-02 18:52:13.811995] start test user 16972 136/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:14.357939] start test user 16972 136/568 recall augumented users by random, augumented_users = [69573, 40292, 92993, 130050, 60475, 91936, 124866, 92192, 118434, 2942, 56879, 4221, 21666, 19064, 136453, 52643, 966, 132514, 2428, 125657, 39462, 124600, 68202, 126675, 109342, 20772, 92606, 46545, 120750, 93461, 80971, 130428, 2036, 98525, 44260, 138073, 7441, 115770, 102671, 133459, 128661, 112610, 22363, 138114, 19429, 30022, 1689, 134123, 134444, 133364]
[2024-12-02 18:52:14.372831] user = 16972 Cloud 136/568
[2024-12-02 18:52:14.381577] user = 16972 Local 136/568
[2024-12-02 18:52:14.419006] user = 16972 Local+ 136/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:16.849747] user = 16972 MPDA- 136/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666666
Training on augumented user 69573 0/50 current_auc = 0.6666666666666666
User 69573 AUC after training: 0.6666666666666666
User 69573 does not improve AUC. Reverting changes.
Training on augumented user 40292 1/50 current_auc = 0.6666666666666666
User 40292 AUC after training: 0.6666666666666666
User 40292 does not improve AUC. Reverting changes.
Training on augumented user 92993 2/50 current_auc = 0.6666666666666666
User 92993 AUC after training: 0.6666666666666666
User 92993 does not improve AUC. Reverting changes.
Training on augumented user 130050 3/50 current_auc = 0.6666666666666666
User 130050 AUC after training: 0.6666666666666666
User 130050 does not improve AUC. Reverting changes.
Training on augumented user 60475 4/50 current_auc = 0.6666666666666666
User 60475 AUC after training: 0.6666666666666666
User 60475 does not improve AUC. Reverting changes.
Training on augumented user 91936 5/50 current_auc = 0.6666666666666666
User 91936 AUC after training: 0.6666666666666666
User 91936 does not improve AUC. Reverting changes.
Training on augumented user 124866 6/50 current_auc = 0.6666666666666666
User 124866 AUC after training: 0.6666666666666666
User 124866 does not improve AUC. Reverting changes.
Training on augumented user 92192 7/50 current_auc = 0.6666666666666666
User 92192 AUC after training: 0.6666666666666666
User 92192 does not improve AUC. Reverting changes.
Training on augumented user 118434 8/50 current_auc = 0.6666666666666666
User 118434 AUC after training: 0.6666666666666666
User 118434 does not improve AUC. Reverting changes.
Training on augumented user 2942 9/50 current_auc = 0.6666666666666666
User 2942 AUC after training: 0.6666666666666666
User 2942 does not improve AUC. Reverting changes.
Training on augumented user 56879 10/50 current_auc = 0.6666666666666666
User 56879 AUC after training: 0.6666666666666666
User 56879 does not improve AUC. Reverting changes.
Training on augumented user 4221 11/50 current_auc = 0.6666666666666666
User 4221 AUC after training: 0.6666666666666666
User 4221 does not improve AUC. Reverting changes.
Training on augumented user 21666 12/50 current_auc = 0.6666666666666666
User 21666 AUC after training: 0.6666666666666666
User 21666 does not improve AUC. Reverting changes.
Training on augumented user 19064 13/50 current_auc = 0.6666666666666666
User 19064 AUC after training: 0.6666666666666666
User 19064 does not improve AUC. Reverting changes.
Training on augumented user 136453 14/50 current_auc = 0.6666666666666666
User 136453 AUC after training: 0.6666666666666666
User 136453 does not improve AUC. Reverting changes.
Training on augumented user 52643 15/50 current_auc = 0.6666666666666666
User 52643 AUC after training: 0.6666666666666666
User 52643 does not improve AUC. Reverting changes.
Training on augumented user 966 16/50 current_auc = 0.6666666666666666
User 966 AUC after training: 0.6666666666666666
User 966 does not improve AUC. Reverting changes.
Training on augumented user 132514 17/50 current_auc = 0.6666666666666666
User 132514 AUC after training: 0.6666666666666666
User 132514 does not improve AUC. Reverting changes.
Training on augumented user 2428 18/50 current_auc = 0.6666666666666666
User 2428 AUC after training: 0.6666666666666666
User 2428 does not improve AUC. Reverting changes.
Training on augumented user 125657 19/50 current_auc = 0.6666666666666666
User 125657 AUC after training: 0.6666666666666666
User 125657 does not improve AUC. Reverting changes.
Training on augumented user 39462 20/50 current_auc = 0.6666666666666666
User 39462 AUC after training: 0.6666666666666666
User 39462 does not improve AUC. Reverting changes.
Training on augumented user 124600 21/50 current_auc = 0.6666666666666666
User 124600 AUC after training: 0.6666666666666666
User 124600 does not improve AUC. Reverting changes.
Training on augumented user 68202 22/50 current_auc = 0.6666666666666666
User 68202 AUC after training: 0.6666666666666666
User 68202 does not improve AUC. Reverting changes.
Training on augumented user 126675 23/50 current_auc = 0.6666666666666666
User 126675 AUC after training: 0.6666666666666666
User 126675 does not improve AUC. Reverting changes.
Training on augumented user 109342 24/50 current_auc = 0.6666666666666666
User 109342 AUC after training: 0.6666666666666666
User 109342 does not improve AUC. Reverting changes.
Training on augumented user 20772 25/50 current_auc = 0.6666666666666666
User 20772 AUC after training: 0.6666666666666666
User 20772 does not improve AUC. Reverting changes.
Training on augumented user 92606 26/50 current_auc = 0.6666666666666666
User 92606 AUC after training: 0.6666666666666666
User 92606 does not improve AUC. Reverting changes.
Training on augumented user 46545 27/50 current_auc = 0.6666666666666666
User 46545 AUC after training: 0.6666666666666666
User 46545 does not improve AUC. Reverting changes.
Training on augumented user 120750 28/50 current_auc = 0.6666666666666666
User 120750 AUC after training: 0.6666666666666666
User 120750 does not improve AUC. Reverting changes.
Training on augumented user 93461 29/50 current_auc = 0.6666666666666666
User 93461 AUC after training: 0.6666666666666666
User 93461 does not improve AUC. Reverting changes.
Training on augumented user 80971 30/50 current_auc = 0.6666666666666666
User 80971 AUC after training: 0.6666666666666666
User 80971 does not improve AUC. Reverting changes.
Training on augumented user 130428 31/50 current_auc = 0.6666666666666666
User 130428 AUC after training: 0.6666666666666666
User 130428 does not improve AUC. Reverting changes.
Training on augumented user 2036 32/50 current_auc = 0.6666666666666666
User 2036 AUC after training: 0.6666666666666666
User 2036 does not improve AUC. Reverting changes.
Training on augumented user 98525 33/50 current_auc = 0.6666666666666666
User 98525 AUC after training: 0.6666666666666666
User 98525 does not improve AUC. Reverting changes.
Training on augumented user 44260 34/50 current_auc = 0.6666666666666666
User 44260 AUC after training: 0.6666666666666666
User 44260 does not improve AUC. Reverting changes.
Training on augumented user 138073 35/50 current_auc = 0.6666666666666666
User 138073 AUC after training: 0.6666666666666666
User 138073 does not improve AUC. Reverting changes.
Training on augumented user 7441 36/50 current_auc = 0.6666666666666666
User 7441 AUC after training: 0.6666666666666666
User 7441 does not improve AUC. Reverting changes.
Training on augumented user 115770 37/50 current_auc = 0.6666666666666666
User 115770 AUC after training: 0.6666666666666666
User 115770 does not improve AUC. Reverting changes.
Training on augumented user 102671 38/50 current_auc = 0.6666666666666666
User 102671 AUC after training: 0.6666666666666666
User 102671 does not improve AUC. Reverting changes.
Training on augumented user 133459 39/50 current_auc = 0.6666666666666666
User 133459 AUC after training: 0.6666666666666666
User 133459 does not improve AUC. Reverting changes.
Training on augumented user 128661 40/50 current_auc = 0.6666666666666666
User 128661 AUC after training: 0.6666666666666666
User 128661 does not improve AUC. Reverting changes.
Training on augumented user 112610 41/50 current_auc = 0.6666666666666666
User 112610 AUC after training: 0.6666666666666666
User 112610 does not improve AUC. Reverting changes.
Training on augumented user 22363 42/50 current_auc = 0.6666666666666666
User 22363 AUC after training: 0.6666666666666666
User 22363 does not improve AUC. Reverting changes.
Training on augumented user 138114 43/50 current_auc = 0.6666666666666666
User 138114 AUC after training: 0.6666666666666666
User 138114 does not improve AUC. Reverting changes.
Training on augumented user 19429 44/50 current_auc = 0.6666666666666666
User 19429 AUC after training: 0.6666666666666666
User 19429 does not improve AUC. Reverting changes.
Training on augumented user 30022 45/50 current_auc = 0.6666666666666666
User 30022 AUC after training: 0.6666666666666666
User 30022 does not improve AUC. Reverting changes.
Training on augumented user 1689 46/50 current_auc = 0.6666666666666666
User 1689 AUC after training: 0.6666666666666666
User 1689 does not improve AUC. Reverting changes.
Training on augumented user 134123 47/50 current_auc = 0.6666666666666666
User 134123 AUC after training: 0.6666666666666666
User 134123 does not improve AUC. Reverting changes.
Training on augumented user 134444 48/50 current_auc = 0.6666666666666666
User 134444 AUC after training: 0.6666666666666666
User 134444 does not improve AUC. Reverting changes.
Training on augumented user 133364 49/50 current_auc = 0.6666666666666666
User 133364 AUC after training: 0.6666666666666666
User 133364 does not improve AUC. Reverting changes.
[2024-12-02 18:52:42.634162] start test user 16975 137/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:43.185704] start test user 16975 137/568 recall augumented users by random, augumented_users = [125781, 40121, 43288, 959, 67047, 107666, 41594, 71170, 30361, 52881, 90407, 107318, 53524, 111339, 22388, 74228, 127111, 135742, 27482, 59656, 56915, 40255, 25573, 118013, 81433, 37913, 61661, 9470, 120194, 60571, 133050, 31100, 35743, 11864, 69640, 94227, 54372, 3748, 109900, 134228, 88319, 46321, 18056, 103555, 99741, 34727, 73551, 576, 11711, 95442]
[2024-12-02 18:52:43.200761] user = 16975 Cloud 137/568
[2024-12-02 18:52:43.212201] user = 16975 Local 137/568
[2024-12-02 18:52:43.237694] user = 16975 Local+ 137/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:45.917202] user = 16975 MPDA- 137/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 125781 0/50 current_auc = 1.0
User 125781 AUC after training: 1.0
User 125781 does not improve AUC. Reverting changes.
Training on augumented user 40121 1/50 current_auc = 1.0
User 40121 AUC after training: 1.0
User 40121 does not improve AUC. Reverting changes.
Training on augumented user 43288 2/50 current_auc = 1.0
User 43288 AUC after training: 1.0
User 43288 does not improve AUC. Reverting changes.
Training on augumented user 959 3/50 current_auc = 1.0
User 959 AUC after training: 1.0
User 959 does not improve AUC. Reverting changes.
Training on augumented user 67047 4/50 current_auc = 1.0
User 67047 AUC after training: 1.0
User 67047 does not improve AUC. Reverting changes.
Training on augumented user 107666 5/50 current_auc = 1.0
User 107666 AUC after training: 1.0
User 107666 does not improve AUC. Reverting changes.
Training on augumented user 41594 6/50 current_auc = 1.0
User 41594 AUC after training: 1.0
User 41594 does not improve AUC. Reverting changes.
Training on augumented user 71170 7/50 current_auc = 1.0
User 71170 AUC after training: 1.0
User 71170 does not improve AUC. Reverting changes.
Training on augumented user 30361 8/50 current_auc = 1.0
User 30361 AUC after training: 1.0
User 30361 does not improve AUC. Reverting changes.
Training on augumented user 52881 9/50 current_auc = 1.0
User 52881 AUC after training: 1.0
User 52881 does not improve AUC. Reverting changes.
Training on augumented user 90407 10/50 current_auc = 1.0
User 90407 AUC after training: 1.0
User 90407 does not improve AUC. Reverting changes.
Training on augumented user 107318 11/50 current_auc = 1.0
User 107318 AUC after training: 1.0
User 107318 does not improve AUC. Reverting changes.
Training on augumented user 53524 12/50 current_auc = 1.0
User 53524 AUC after training: 1.0
User 53524 does not improve AUC. Reverting changes.
Training on augumented user 111339 13/50 current_auc = 1.0
User 111339 AUC after training: 1.0
User 111339 does not improve AUC. Reverting changes.
Training on augumented user 22388 14/50 current_auc = 1.0
User 22388 AUC after training: 1.0
User 22388 does not improve AUC. Reverting changes.
Training on augumented user 74228 15/50 current_auc = 1.0
User 74228 AUC after training: 1.0
User 74228 does not improve AUC. Reverting changes.
Training on augumented user 127111 16/50 current_auc = 1.0
User 127111 AUC after training: 1.0
User 127111 does not improve AUC. Reverting changes.
Training on augumented user 135742 17/50 current_auc = 1.0
User 135742 AUC after training: 1.0
User 135742 does not improve AUC. Reverting changes.
Training on augumented user 27482 18/50 current_auc = 1.0
User 27482 AUC after training: 1.0
User 27482 does not improve AUC. Reverting changes.
Training on augumented user 59656 19/50 current_auc = 1.0
User 59656 AUC after training: 1.0
User 59656 does not improve AUC. Reverting changes.
Training on augumented user 56915 20/50 current_auc = 1.0
User 56915 AUC after training: 1.0
User 56915 does not improve AUC. Reverting changes.
Training on augumented user 40255 21/50 current_auc = 1.0
User 40255 AUC after training: 1.0
User 40255 does not improve AUC. Reverting changes.
Training on augumented user 25573 22/50 current_auc = 1.0
User 25573 AUC after training: 1.0
User 25573 does not improve AUC. Reverting changes.
Training on augumented user 118013 23/50 current_auc = 1.0
User 118013 AUC after training: 1.0
User 118013 does not improve AUC. Reverting changes.
Training on augumented user 81433 24/50 current_auc = 1.0
User 81433 AUC after training: 1.0
User 81433 does not improve AUC. Reverting changes.
Training on augumented user 37913 25/50 current_auc = 1.0
User 37913 AUC after training: 1.0
User 37913 does not improve AUC. Reverting changes.
Training on augumented user 61661 26/50 current_auc = 1.0
User 61661 AUC after training: 1.0
User 61661 does not improve AUC. Reverting changes.
Training on augumented user 9470 27/50 current_auc = 1.0
User 9470 AUC after training: 1.0
User 9470 does not improve AUC. Reverting changes.
Training on augumented user 120194 28/50 current_auc = 1.0
User 120194 AUC after training: 1.0
User 120194 does not improve AUC. Reverting changes.
Training on augumented user 60571 29/50 current_auc = 1.0
User 60571 AUC after training: 1.0
User 60571 does not improve AUC. Reverting changes.
Training on augumented user 133050 30/50 current_auc = 1.0
User 133050 AUC after training: 1.0
User 133050 does not improve AUC. Reverting changes.
Training on augumented user 31100 31/50 current_auc = 1.0
User 31100 AUC after training: 1.0
User 31100 does not improve AUC. Reverting changes.
Training on augumented user 35743 32/50 current_auc = 1.0
User 35743 AUC after training: 1.0
User 35743 does not improve AUC. Reverting changes.
Training on augumented user 11864 33/50 current_auc = 1.0
User 11864 AUC after training: 1.0
User 11864 does not improve AUC. Reverting changes.
Training on augumented user 69640 34/50 current_auc = 1.0
User 69640 AUC after training: 1.0
User 69640 does not improve AUC. Reverting changes.
Training on augumented user 94227 35/50 current_auc = 1.0
User 94227 AUC after training: 1.0
User 94227 does not improve AUC. Reverting changes.
Training on augumented user 54372 36/50 current_auc = 1.0
User 54372 AUC after training: 1.0
User 54372 does not improve AUC. Reverting changes.
Training on augumented user 3748 37/50 current_auc = 1.0
User 3748 AUC after training: 1.0
User 3748 does not improve AUC. Reverting changes.
Training on augumented user 109900 38/50 current_auc = 1.0
User 109900 AUC after training: 1.0
User 109900 does not improve AUC. Reverting changes.
Training on augumented user 134228 39/50 current_auc = 1.0
User 134228 AUC after training: 1.0
User 134228 does not improve AUC. Reverting changes.
Training on augumented user 88319 40/50 current_auc = 1.0
User 88319 AUC after training: 1.0
User 88319 does not improve AUC. Reverting changes.
Training on augumented user 46321 41/50 current_auc = 1.0
User 46321 AUC after training: 1.0
User 46321 does not improve AUC. Reverting changes.
Training on augumented user 18056 42/50 current_auc = 1.0
User 18056 AUC after training: 1.0
User 18056 does not improve AUC. Reverting changes.
Training on augumented user 103555 43/50 current_auc = 1.0
User 103555 AUC after training: 1.0
User 103555 does not improve AUC. Reverting changes.
Training on augumented user 99741 44/50 current_auc = 1.0
User 99741 AUC after training: 1.0
User 99741 does not improve AUC. Reverting changes.
Training on augumented user 34727 45/50 current_auc = 1.0
User 34727 AUC after training: 1.0
User 34727 does not improve AUC. Reverting changes.
Training on augumented user 73551 46/50 current_auc = 1.0
User 73551 AUC after training: 1.0
User 73551 does not improve AUC. Reverting changes.
Training on augumented user 576 47/50 current_auc = 1.0
User 576 AUC after training: 1.0
User 576 does not improve AUC. Reverting changes.
Training on augumented user 11711 48/50 current_auc = 1.0
User 11711 AUC after training: 1.0
User 11711 does not improve AUC. Reverting changes.
Training on augumented user 95442 49/50 current_auc = 1.0
User 95442 AUC after training: 1.0
User 95442 does not improve AUC. Reverting changes.
[2024-12-02 18:53:18.819403] start test user 17014 138/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:19.622232] start test user 17014 138/568 recall augumented users by random, augumented_users = [67553, 46983, 71941, 88928, 5067, 60941, 3783, 129393, 8496, 3304, 67303, 118225, 108747, 137484, 88845, 14323, 67937, 63908, 92029, 83865, 69398, 105107, 7079, 64369, 97295, 118918, 121396, 128406, 53338, 1820, 86423, 95549, 125370, 103673, 105308, 108059, 70263, 53001, 87920, 15008, 831, 8978, 130593, 862, 14661, 89477, 66134, 21342, 34007, 122449]
[2024-12-02 18:53:19.640445] user = 17014 Cloud 138/568
[2024-12-02 18:53:19.669478] user = 17014 Local 138/568
[2024-12-02 18:53:20.067906] user = 17014 Local+ 138/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:23.608519] user = 17014 MPDA- 138/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6111111111111112
Training on augumented user 67553 0/50 current_auc = 0.6111111111111112
User 67553 AUC after training: 0.6107966457023061
User 67553 does not improve AUC. Reverting changes.
Training on augumented user 46983 1/50 current_auc = 0.6111111111111112
User 46983 AUC after training: 0.610691823899371
User 46983 does not improve AUC. Reverting changes.
Training on augumented user 71941 2/50 current_auc = 0.6111111111111112
User 71941 AUC after training: 0.6117924528301888
User 71941 improves AUC. Keeping the model.
Training on augumented user 88928 3/50 current_auc = 0.6117924528301888
User 88928 AUC after training: 0.6111635220125786
User 88928 does not improve AUC. Reverting changes.
Training on augumented user 5067 4/50 current_auc = 0.6117924528301888
User 5067 AUC after training: 0.6108490566037736
User 5067 does not improve AUC. Reverting changes.
Training on augumented user 60941 5/50 current_auc = 0.6117924528301888
User 60941 AUC after training: 0.6107442348008385
User 60941 does not improve AUC. Reverting changes.
Training on augumented user 3783 6/50 current_auc = 0.6117924528301888
User 3783 AUC after training: 0.6111635220125786
User 3783 does not improve AUC. Reverting changes.
Training on augumented user 129393 7/50 current_auc = 0.6117924528301888
User 129393 AUC after training: 0.6106394129979036
User 129393 does not improve AUC. Reverting changes.
Training on augumented user 8496 8/50 current_auc = 0.6117924528301888
User 8496 AUC after training: 0.6116352201257861
User 8496 does not improve AUC. Reverting changes.
Training on augumented user 3304 9/50 current_auc = 0.6117924528301888
User 3304 AUC after training: 0.610901467505241
User 3304 does not improve AUC. Reverting changes.
Training on augumented user 67303 10/50 current_auc = 0.6117924528301888
User 67303 AUC after training: 0.6101153039832286
User 67303 does not improve AUC. Reverting changes.
Training on augumented user 118225 11/50 current_auc = 0.6117924528301888
User 118225 AUC after training: 0.6114255765199161
User 118225 does not improve AUC. Reverting changes.
Training on augumented user 108747 12/50 current_auc = 0.6117924528301888
User 108747 AUC after training: 0.6108490566037735
User 108747 does not improve AUC. Reverting changes.
Training on augumented user 137484 13/50 current_auc = 0.6117924528301888
User 137484 AUC after training: 0.6119496855345912
User 137484 improves AUC. Keeping the model.
Training on augumented user 88845 14/50 current_auc = 0.6119496855345912
User 88845 AUC after training: 0.6115828092243186
User 88845 does not improve AUC. Reverting changes.
Training on augumented user 14323 15/50 current_auc = 0.6119496855345912
User 14323 AUC after training: 0.610587002096436
User 14323 does not improve AUC. Reverting changes.
Training on augumented user 67937 16/50 current_auc = 0.6119496855345912
User 67937 AUC after training: 0.6113731656184486
User 67937 does not improve AUC. Reverting changes.
Training on augumented user 63908 17/50 current_auc = 0.6119496855345912
User 63908 AUC after training: 0.6106394129979036
User 63908 does not improve AUC. Reverting changes.
Training on augumented user 92029 18/50 current_auc = 0.6119496855345912
User 92029 AUC after training: 0.6091719077568133
User 92029 does not improve AUC. Reverting changes.
Training on augumented user 83865 19/50 current_auc = 0.6119496855345912
User 83865 AUC after training: 0.6105345911949687
User 83865 does not improve AUC. Reverting changes.
Training on augumented user 69398 20/50 current_auc = 0.6119496855345912
User 69398 AUC after training: 0.6112159329140461
User 69398 does not improve AUC. Reverting changes.
Training on augumented user 105107 21/50 current_auc = 0.6119496855345912
User 105107 AUC after training: 0.6114779874213836
User 105107 does not improve AUC. Reverting changes.
Training on augumented user 7079 22/50 current_auc = 0.6119496855345912
User 7079 AUC after training: 0.6110062893081761
User 7079 does not improve AUC. Reverting changes.
Training on augumented user 64369 23/50 current_auc = 0.6119496855345912
User 64369 AUC after training: 0.6109014675052411
User 64369 does not improve AUC. Reverting changes.
Training on augumented user 97295 24/50 current_auc = 0.6119496855345912
User 97295 AUC after training: 0.6095911949685534
User 97295 does not improve AUC. Reverting changes.
Training on augumented user 118918 25/50 current_auc = 0.6119496855345912
User 118918 AUC after training: 0.6094339622641508
User 118918 does not improve AUC. Reverting changes.
Training on augumented user 121396 26/50 current_auc = 0.6119496855345912
User 121396 AUC after training: 0.6116876310272537
User 121396 does not improve AUC. Reverting changes.
Training on augumented user 128406 27/50 current_auc = 0.6119496855345912
User 128406 AUC after training: 0.6106394129979036
User 128406 does not improve AUC. Reverting changes.
Training on augumented user 53338 28/50 current_auc = 0.6119496855345912
User 53338 AUC after training: 0.610691823899371
User 53338 does not improve AUC. Reverting changes.
Training on augumented user 1820 29/50 current_auc = 0.6119496855345912
User 1820 AUC after training: 0.6107442348008386
User 1820 does not improve AUC. Reverting changes.
Training on augumented user 86423 30/50 current_auc = 0.6119496855345912
User 86423 AUC after training: 0.6107442348008385
User 86423 does not improve AUC. Reverting changes.
Training on augumented user 95549 31/50 current_auc = 0.6119496855345912
User 95549 AUC after training: 0.6099056603773585
User 95549 does not improve AUC. Reverting changes.
Training on augumented user 125370 32/50 current_auc = 0.6119496855345912
User 125370 AUC after training: 0.6106394129979036
User 125370 does not improve AUC. Reverting changes.
Training on augumented user 103673 33/50 current_auc = 0.6119496855345912
User 103673 AUC after training: 0.6107966457023062
User 103673 does not improve AUC. Reverting changes.
Training on augumented user 105308 34/50 current_auc = 0.6119496855345912
User 105308 AUC after training: 0.6061320754716981
User 105308 does not improve AUC. Reverting changes.
Training on augumented user 108059 35/50 current_auc = 0.6119496855345912
User 108059 AUC after training: 0.6114779874213836
User 108059 does not improve AUC. Reverting changes.
Training on augumented user 70263 36/50 current_auc = 0.6119496855345912
User 70263 AUC after training: 0.6100104821802934
User 70263 does not improve AUC. Reverting changes.
Training on augumented user 53001 37/50 current_auc = 0.6119496855345912
User 53001 AUC after training: 0.611111111111111
User 53001 does not improve AUC. Reverting changes.
Training on augumented user 87920 38/50 current_auc = 0.6119496855345912
User 87920 AUC after training: 0.6109538784067087
User 87920 does not improve AUC. Reverting changes.
Training on augumented user 15008 39/50 current_auc = 0.6119496855345912
User 15008 AUC after training: 0.6118972746331237
User 15008 does not improve AUC. Reverting changes.
Training on augumented user 831 40/50 current_auc = 0.6119496855345912
User 831 AUC after training: 0.6111635220125785
User 831 does not improve AUC. Reverting changes.
Training on augumented user 8978 41/50 current_auc = 0.6119496855345912
User 8978 AUC after training: 0.6117400419287211
User 8978 does not improve AUC. Reverting changes.
Training on augumented user 130593 42/50 current_auc = 0.6119496855345912
User 130593 AUC after training: 0.6104821802935011
User 130593 does not improve AUC. Reverting changes.
Training on augumented user 862 43/50 current_auc = 0.6119496855345912
User 862 AUC after training: 0.6107442348008386
User 862 does not improve AUC. Reverting changes.
Training on augumented user 14661 44/50 current_auc = 0.6119496855345912
User 14661 AUC after training: 0.610691823899371
User 14661 does not improve AUC. Reverting changes.
Training on augumented user 89477 45/50 current_auc = 0.6119496855345912
User 89477 AUC after training: 0.6107966457023062
User 89477 does not improve AUC. Reverting changes.
Training on augumented user 66134 46/50 current_auc = 0.6119496855345912
User 66134 AUC after training: 0.6110062893081761
User 66134 does not improve AUC. Reverting changes.
Training on augumented user 21342 47/50 current_auc = 0.6119496855345912
User 21342 AUC after training: 0.6096960167714885
User 21342 does not improve AUC. Reverting changes.
Training on augumented user 34007 48/50 current_auc = 0.6119496855345912
User 34007 AUC after training: 0.6087526205450734
User 34007 does not improve AUC. Reverting changes.
Training on augumented user 122449 49/50 current_auc = 0.6119496855345912
User 122449 AUC after training: 0.6109014675052411
User 122449 does not improve AUC. Reverting changes.
[2024-12-02 18:53:56.860617] start test user 17022 139/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:57.538862] start test user 17022 139/568 recall augumented users by random, augumented_users = [9723, 99995, 134372, 27262, 70899, 110656, 93634, 53772, 63853, 5029, 115324, 100432, 130502, 38766, 41903, 117177, 49844, 32842, 46993, 15344, 32968, 96048, 107660, 108371, 136814, 47118, 75633, 20781, 8872, 125564, 94899, 25095, 18326, 8867, 8296, 630, 62645, 11184, 52988, 39502, 7467, 70530, 27102, 23680, 15220, 38005, 23937, 84097, 76992, 45851]
[2024-12-02 18:53:57.554419] user = 17022 Cloud 139/568
[2024-12-02 18:53:57.567854] user = 17022 Local 139/568
[2024-12-02 18:53:57.691604] user = 17022 Local+ 139/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:00.823040] user = 17022 MPDA- 139/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8297872340425532
Training on augumented user 9723 0/50 current_auc = 0.8297872340425532
User 9723 AUC after training: 0.8307543520309478
User 9723 improves AUC. Keeping the model.
Training on augumented user 99995 1/50 current_auc = 0.8307543520309478
User 99995 AUC after training: 0.8297872340425532
User 99995 does not improve AUC. Reverting changes.
Training on augumented user 134372 2/50 current_auc = 0.8307543520309478
User 134372 AUC after training: 0.8297872340425532
User 134372 does not improve AUC. Reverting changes.
Training on augumented user 27262 3/50 current_auc = 0.8307543520309478
User 27262 AUC after training: 0.8307543520309478
User 27262 does not improve AUC. Reverting changes.
Training on augumented user 70899 4/50 current_auc = 0.8307543520309478
User 70899 AUC after training: 0.8307543520309478
User 70899 does not improve AUC. Reverting changes.
Training on augumented user 110656 5/50 current_auc = 0.8307543520309478
User 110656 AUC after training: 0.8336557059961316
User 110656 improves AUC. Keeping the model.
Training on augumented user 93634 6/50 current_auc = 0.8336557059961316
User 93634 AUC after training: 0.834622823984526
User 93634 improves AUC. Keeping the model.
Training on augumented user 53772 7/50 current_auc = 0.834622823984526
User 53772 AUC after training: 0.8365570599613154
User 53772 improves AUC. Keeping the model.
Training on augumented user 63853 8/50 current_auc = 0.8365570599613154
User 63853 AUC after training: 0.8355899419729207
User 63853 does not improve AUC. Reverting changes.
Training on augumented user 5029 9/50 current_auc = 0.8365570599613154
User 5029 AUC after training: 0.8346228239845261
User 5029 does not improve AUC. Reverting changes.
Training on augumented user 115324 10/50 current_auc = 0.8365570599613154
User 115324 AUC after training: 0.8336557059961315
User 115324 does not improve AUC. Reverting changes.
Training on augumented user 100432 11/50 current_auc = 0.8365570599613154
User 100432 AUC after training: 0.834622823984526
User 100432 does not improve AUC. Reverting changes.
Training on augumented user 130502 12/50 current_auc = 0.8365570599613154
User 130502 AUC after training: 0.834622823984526
User 130502 does not improve AUC. Reverting changes.
Training on augumented user 38766 13/50 current_auc = 0.8365570599613154
User 38766 AUC after training: 0.8355899419729208
User 38766 does not improve AUC. Reverting changes.
Training on augumented user 41903 14/50 current_auc = 0.8365570599613154
User 41903 AUC after training: 0.8355899419729207
User 41903 does not improve AUC. Reverting changes.
Training on augumented user 117177 15/50 current_auc = 0.8365570599613154
User 117177 AUC after training: 0.8365570599613154
User 117177 does not improve AUC. Reverting changes.
Training on augumented user 49844 16/50 current_auc = 0.8365570599613154
User 49844 AUC after training: 0.8365570599613154
User 49844 does not improve AUC. Reverting changes.
Training on augumented user 32842 17/50 current_auc = 0.8365570599613154
User 32842 AUC after training: 0.8355899419729207
User 32842 does not improve AUC. Reverting changes.
Training on augumented user 46993 18/50 current_auc = 0.8365570599613154
User 46993 AUC after training: 0.8375241779497098
User 46993 improves AUC. Keeping the model.
Training on augumented user 15344 19/50 current_auc = 0.8375241779497098
User 15344 AUC after training: 0.8355899419729207
User 15344 does not improve AUC. Reverting changes.
Training on augumented user 32968 20/50 current_auc = 0.8375241779497098
User 32968 AUC after training: 0.8375241779497098
User 32968 does not improve AUC. Reverting changes.
Training on augumented user 96048 21/50 current_auc = 0.8375241779497098
User 96048 AUC after training: 0.8355899419729207
User 96048 does not improve AUC. Reverting changes.
Training on augumented user 107660 22/50 current_auc = 0.8375241779497098
User 107660 AUC after training: 0.8365570599613154
User 107660 does not improve AUC. Reverting changes.
Training on augumented user 108371 23/50 current_auc = 0.8375241779497098
User 108371 AUC after training: 0.8336557059961315
User 108371 does not improve AUC. Reverting changes.
Training on augumented user 136814 24/50 current_auc = 0.8375241779497098
User 136814 AUC after training: 0.8355899419729207
User 136814 does not improve AUC. Reverting changes.
Training on augumented user 47118 25/50 current_auc = 0.8375241779497098
User 47118 AUC after training: 0.8355899419729207
User 47118 does not improve AUC. Reverting changes.
Training on augumented user 75633 26/50 current_auc = 0.8375241779497098
User 75633 AUC after training: 0.8346228239845261
User 75633 does not improve AUC. Reverting changes.
Training on augumented user 20781 27/50 current_auc = 0.8375241779497098
User 20781 AUC after training: 0.8365570599613152
User 20781 does not improve AUC. Reverting changes.
Training on augumented user 8872 28/50 current_auc = 0.8375241779497098
User 8872 AUC after training: 0.8336557059961315
User 8872 does not improve AUC. Reverting changes.
Training on augumented user 125564 29/50 current_auc = 0.8375241779497098
User 125564 AUC after training: 0.8336557059961316
User 125564 does not improve AUC. Reverting changes.
Training on augumented user 94899 30/50 current_auc = 0.8375241779497098
User 94899 AUC after training: 0.8336557059961315
User 94899 does not improve AUC. Reverting changes.
Training on augumented user 25095 31/50 current_auc = 0.8375241779497098
User 25095 AUC after training: 0.834622823984526
User 25095 does not improve AUC. Reverting changes.
Training on augumented user 18326 32/50 current_auc = 0.8375241779497098
User 18326 AUC after training: 0.8346228239845261
User 18326 does not improve AUC. Reverting changes.
Training on augumented user 8867 33/50 current_auc = 0.8375241779497098
User 8867 AUC after training: 0.8355899419729207
User 8867 does not improve AUC. Reverting changes.
Training on augumented user 8296 34/50 current_auc = 0.8375241779497098
User 8296 AUC after training: 0.8355899419729207
User 8296 does not improve AUC. Reverting changes.
Training on augumented user 630 35/50 current_auc = 0.8375241779497098
User 630 AUC after training: 0.8365570599613152
User 630 does not improve AUC. Reverting changes.
Training on augumented user 62645 36/50 current_auc = 0.8375241779497098
User 62645 AUC after training: 0.8355899419729207
User 62645 does not improve AUC. Reverting changes.
Training on augumented user 11184 37/50 current_auc = 0.8375241779497098
User 11184 AUC after training: 0.8336557059961316
User 11184 does not improve AUC. Reverting changes.
Training on augumented user 52988 38/50 current_auc = 0.8375241779497098
User 52988 AUC after training: 0.8336557059961316
User 52988 does not improve AUC. Reverting changes.
Training on augumented user 39502 39/50 current_auc = 0.8375241779497098
User 39502 AUC after training: 0.8336557059961315
User 39502 does not improve AUC. Reverting changes.
Training on augumented user 7467 40/50 current_auc = 0.8375241779497098
User 7467 AUC after training: 0.8336557059961316
User 7467 does not improve AUC. Reverting changes.
Training on augumented user 70530 41/50 current_auc = 0.8375241779497098
User 70530 AUC after training: 0.8346228239845261
User 70530 does not improve AUC. Reverting changes.
Training on augumented user 27102 42/50 current_auc = 0.8375241779497098
User 27102 AUC after training: 0.8336557059961315
User 27102 does not improve AUC. Reverting changes.
Training on augumented user 23680 43/50 current_auc = 0.8375241779497098
User 23680 AUC after training: 0.8375241779497098
User 23680 does not improve AUC. Reverting changes.
Training on augumented user 15220 44/50 current_auc = 0.8375241779497098
User 15220 AUC after training: 0.8355899419729207
User 15220 does not improve AUC. Reverting changes.
Training on augumented user 38005 45/50 current_auc = 0.8375241779497098
User 38005 AUC after training: 0.834622823984526
User 38005 does not improve AUC. Reverting changes.
Training on augumented user 23937 46/50 current_auc = 0.8375241779497098
User 23937 AUC after training: 0.834622823984526
User 23937 does not improve AUC. Reverting changes.
Training on augumented user 84097 47/50 current_auc = 0.8375241779497098
User 84097 AUC after training: 0.834622823984526
User 84097 does not improve AUC. Reverting changes.
Training on augumented user 76992 48/50 current_auc = 0.8375241779497098
User 76992 AUC after training: 0.8346228239845261
User 76992 does not improve AUC. Reverting changes.
Training on augumented user 45851 49/50 current_auc = 0.8375241779497098
User 45851 AUC after training: 0.8365570599613154
User 45851 does not improve AUC. Reverting changes.
[2024-12-02 18:54:31.371363] start test user 17029 140/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:31.778757] start test user 17029 140/568 recall augumented users by random, augumented_users = [70595, 122934, 17439, 85844, 35475, 132699, 126463, 39189, 111239, 131686, 93628, 84586, 53369, 98671, 110104, 134891, 64631, 77195, 33921, 30616, 78998, 130860, 120422, 7085, 53044, 132667, 112532, 85180, 73300, 111742, 118663, 42455, 78190, 40895, 122779, 53228, 90656, 2556, 54201, 92658, 125704, 120455, 50756, 45113, 80830, 80300, 69649, 48186, 136728, 97210]
[2024-12-02 18:54:31.792937] user = 17029 Cloud 140/568
[2024-12-02 18:54:31.819314] user = 17029 Local 140/568
[2024-12-02 18:54:31.849489] user = 17029 Local+ 140/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:34.674670] user = 17029 MPDA- 140/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.565330060010911
Training on augumented user 70595 0/50 current_auc = 0.565330060010911
User 70595 AUC after training: 0.5656028368794326
User 70595 improves AUC. Keeping the model.
Training on augumented user 122934 1/50 current_auc = 0.5656028368794326
User 122934 AUC after training: 0.5658756137479541
User 122934 improves AUC. Keeping the model.
Training on augumented user 17439 2/50 current_auc = 0.5658756137479541
User 17439 AUC after training: 0.5679214402618658
User 17439 improves AUC. Keeping the model.
Training on augumented user 85844 3/50 current_auc = 0.5679214402618658
User 85844 AUC after training: 0.5668303327877796
User 85844 does not improve AUC. Reverting changes.
Training on augumented user 35475 4/50 current_auc = 0.5679214402618658
User 35475 AUC after training: 0.567239498090562
User 35475 does not improve AUC. Reverting changes.
Training on augumented user 132699 5/50 current_auc = 0.5679214402618658
User 132699 AUC after training: 0.5677850518276051
User 132699 does not improve AUC. Reverting changes.
Training on augumented user 126463 6/50 current_auc = 0.5679214402618658
User 126463 AUC after training: 0.5664211674849973
User 126463 does not improve AUC. Reverting changes.
Training on augumented user 39189 7/50 current_auc = 0.5679214402618658
User 39189 AUC after training: 0.5679214402618659
User 39189 improves AUC. Keeping the model.
Training on augumented user 111239 8/50 current_auc = 0.5679214402618659
User 111239 AUC after training: 0.568466993998909
User 111239 improves AUC. Keeping the model.
Training on augumented user 131686 9/50 current_auc = 0.568466993998909
User 131686 AUC after training: 0.5673758865248226
User 131686 does not improve AUC. Reverting changes.
Training on augumented user 93628 10/50 current_auc = 0.568466993998909
User 93628 AUC after training: 0.5676486633933443
User 93628 does not improve AUC. Reverting changes.
Training on augumented user 84586 11/50 current_auc = 0.568466993998909
User 84586 AUC after training: 0.5684669939989089
User 84586 does not improve AUC. Reverting changes.
Training on augumented user 53369 12/50 current_auc = 0.568466993998909
User 53369 AUC after training: 0.5679214402618659
User 53369 does not improve AUC. Reverting changes.
Training on augumented user 98671 13/50 current_auc = 0.568466993998909
User 98671 AUC after training: 0.5683306055646481
User 98671 does not improve AUC. Reverting changes.
Training on augumented user 110104 14/50 current_auc = 0.568466993998909
User 110104 AUC after training: 0.5680578286961266
User 110104 does not improve AUC. Reverting changes.
Training on augumented user 134891 15/50 current_auc = 0.568466993998909
User 134891 AUC after training: 0.5676486633933443
User 134891 does not improve AUC. Reverting changes.
Training on augumented user 64631 16/50 current_auc = 0.568466993998909
User 64631 AUC after training: 0.5680578286961266
User 64631 does not improve AUC. Reverting changes.
Training on augumented user 77195 17/50 current_auc = 0.568466993998909
User 77195 AUC after training: 0.567239498090562
User 77195 does not improve AUC. Reverting changes.
Training on augumented user 33921 18/50 current_auc = 0.568466993998909
User 33921 AUC after training: 0.5683987997817784
User 33921 does not improve AUC. Reverting changes.
Training on augumented user 30616 19/50 current_auc = 0.568466993998909
User 30616 AUC after training: 0.5681942171303873
User 30616 does not improve AUC. Reverting changes.
Training on augumented user 78998 20/50 current_auc = 0.568466993998909
User 78998 AUC after training: 0.5683306055646481
User 78998 does not improve AUC. Reverting changes.
Training on augumented user 130860 21/50 current_auc = 0.568466993998909
User 130860 AUC after training: 0.5683306055646481
User 130860 does not improve AUC. Reverting changes.
Training on augumented user 120422 22/50 current_auc = 0.568466993998909
User 120422 AUC after training: 0.5680578286961266
User 120422 does not improve AUC. Reverting changes.
Training on augumented user 7085 23/50 current_auc = 0.568466993998909
User 7085 AUC after training: 0.5684669939989089
User 7085 does not improve AUC. Reverting changes.
Training on augumented user 53044 24/50 current_auc = 0.568466993998909
User 53044 AUC after training: 0.568466993998909
User 53044 does not improve AUC. Reverting changes.
Training on augumented user 132667 25/50 current_auc = 0.568466993998909
User 132667 AUC after training: 0.5683987997817784
User 132667 does not improve AUC. Reverting changes.
Training on augumented user 112532 26/50 current_auc = 0.568466993998909
User 112532 AUC after training: 0.5683306055646482
User 112532 does not improve AUC. Reverting changes.
Training on augumented user 85180 27/50 current_auc = 0.568466993998909
User 85180 AUC after training: 0.5684669939989089
User 85180 does not improve AUC. Reverting changes.
Training on augumented user 73300 28/50 current_auc = 0.568466993998909
User 73300 AUC after training: 0.5681942171303874
User 73300 does not improve AUC. Reverting changes.
Training on augumented user 111742 29/50 current_auc = 0.568466993998909
User 111742 AUC after training: 0.5688761593016913
User 111742 improves AUC. Keeping the model.
Training on augumented user 118663 30/50 current_auc = 0.5688761593016913
User 118663 AUC after training: 0.5683306055646482
User 118663 does not improve AUC. Reverting changes.
Training on augumented user 42455 31/50 current_auc = 0.5688761593016913
User 42455 AUC after training: 0.5685351882160392
User 42455 does not improve AUC. Reverting changes.
Training on augumented user 78190 32/50 current_auc = 0.5688761593016913
User 78190 AUC after training: 0.5671031096563012
User 78190 does not improve AUC. Reverting changes.
Training on augumented user 40895 33/50 current_auc = 0.5688761593016913
User 40895 AUC after training: 0.5683987997817785
User 40895 does not improve AUC. Reverting changes.
Training on augumented user 122779 34/50 current_auc = 0.5688761593016913
User 122779 AUC after training: 0.5684669939989088
User 122779 does not improve AUC. Reverting changes.
Training on augumented user 53228 35/50 current_auc = 0.5688761593016913
User 53228 AUC after training: 0.5685351882160392
User 53228 does not improve AUC. Reverting changes.
Training on augumented user 90656 36/50 current_auc = 0.5688761593016913
User 90656 AUC after training: 0.569012547735952
User 90656 improves AUC. Keeping the model.
Training on augumented user 2556 37/50 current_auc = 0.569012547735952
User 2556 AUC after training: 0.568126022913257
User 2556 does not improve AUC. Reverting changes.
Training on augumented user 54201 38/50 current_auc = 0.569012547735952
User 54201 AUC after training: 0.5678532460447354
User 54201 does not improve AUC. Reverting changes.
Training on augumented user 92658 39/50 current_auc = 0.569012547735952
User 92658 AUC after training: 0.5679896344789962
User 92658 does not improve AUC. Reverting changes.
Training on augumented user 125704 40/50 current_auc = 0.569012547735952
User 125704 AUC after training: 0.5669667212220404
User 125704 does not improve AUC. Reverting changes.
Training on augumented user 120455 41/50 current_auc = 0.569012547735952
User 120455 AUC after training: 0.5675804691762139
User 120455 does not improve AUC. Reverting changes.
Training on augumented user 50756 42/50 current_auc = 0.569012547735952
User 50756 AUC after training: 0.569012547735952
User 50756 does not improve AUC. Reverting changes.
Training on augumented user 45113 43/50 current_auc = 0.569012547735952
User 45113 AUC after training: 0.5686033824331697
User 45113 does not improve AUC. Reverting changes.
Training on augumented user 80830 44/50 current_auc = 0.569012547735952
User 80830 AUC after training: 0.569353518821604
User 80830 improves AUC. Keeping the model.
Training on augumented user 80300 45/50 current_auc = 0.569353518821604
User 80300 AUC after training: 0.5690807419530824
User 80300 does not improve AUC. Reverting changes.
Training on augumented user 69649 46/50 current_auc = 0.569353518821604
User 69649 AUC after training: 0.5675122749590834
User 69649 does not improve AUC. Reverting changes.
Training on augumented user 48186 47/50 current_auc = 0.569353518821604
User 48186 AUC after training: 0.5685351882160393
User 48186 does not improve AUC. Reverting changes.
Training on augumented user 136728 48/50 current_auc = 0.569353518821604
User 136728 AUC after training: 0.5690807419530823
User 136728 does not improve AUC. Reverting changes.
Training on augumented user 97210 49/50 current_auc = 0.569353518821604
User 97210 AUC after training: 0.5687397708674304
User 97210 does not improve AUC. Reverting changes.
[2024-12-02 18:55:04.139612] start test user 17030 141/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:04.570516] start test user 17030 141/568 recall augumented users by random, augumented_users = [18886, 13890, 70663, 102609, 71332, 124784, 78854, 54327, 9988, 31734, 110233, 107405, 89884, 81144, 58226, 1412, 36058, 87733, 118641, 29653, 122543, 51974, 63651, 83983, 18515, 88936, 3672, 32203, 124641, 102994, 115806, 98850, 131674, 4994, 56098, 17598, 112633, 18980, 92407, 46849, 56404, 45748, 72502, 91649, 19265, 110328, 132237, 81072, 81679, 94616]
[2024-12-02 18:55:04.586874] user = 17030 Cloud 141/568
[2024-12-02 18:55:04.597043] user = 17030 Local 141/568
[2024-12-02 18:55:04.664878] user = 17030 Local+ 141/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:07.409665] user = 17030 MPDA- 141/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7777777777777778
Training on augumented user 18886 0/50 current_auc = 0.7777777777777778
User 18886 AUC after training: 0.7555555555555555
User 18886 does not improve AUC. Reverting changes.
Training on augumented user 13890 1/50 current_auc = 0.7777777777777778
User 13890 AUC after training: 0.7777777777777778
User 13890 does not improve AUC. Reverting changes.
Training on augumented user 70663 2/50 current_auc = 0.7777777777777778
User 70663 AUC after training: 0.7777777777777778
User 70663 does not improve AUC. Reverting changes.
Training on augumented user 102609 3/50 current_auc = 0.7777777777777778
User 102609 AUC after training: 0.7555555555555555
User 102609 does not improve AUC. Reverting changes.
Training on augumented user 71332 4/50 current_auc = 0.7777777777777778
User 71332 AUC after training: 0.7777777777777778
User 71332 does not improve AUC. Reverting changes.
Training on augumented user 124784 5/50 current_auc = 0.7777777777777778
User 124784 AUC after training: 0.7777777777777778
User 124784 does not improve AUC. Reverting changes.
Training on augumented user 78854 6/50 current_auc = 0.7777777777777778
User 78854 AUC after training: 0.7555555555555555
User 78854 does not improve AUC. Reverting changes.
Training on augumented user 54327 7/50 current_auc = 0.7777777777777778
User 54327 AUC after training: 0.7555555555555555
User 54327 does not improve AUC. Reverting changes.
Training on augumented user 9988 8/50 current_auc = 0.7777777777777778
User 9988 AUC after training: 0.7555555555555555
User 9988 does not improve AUC. Reverting changes.
Training on augumented user 31734 9/50 current_auc = 0.7777777777777778
User 31734 AUC after training: 0.7555555555555555
User 31734 does not improve AUC. Reverting changes.
Training on augumented user 110233 10/50 current_auc = 0.7777777777777778
User 110233 AUC after training: 0.7777777777777778
User 110233 does not improve AUC. Reverting changes.
Training on augumented user 107405 11/50 current_auc = 0.7777777777777778
User 107405 AUC after training: 0.7555555555555555
User 107405 does not improve AUC. Reverting changes.
Training on augumented user 89884 12/50 current_auc = 0.7777777777777778
User 89884 AUC after training: 0.7555555555555555
User 89884 does not improve AUC. Reverting changes.
Training on augumented user 81144 13/50 current_auc = 0.7777777777777778
User 81144 AUC after training: 0.7555555555555555
User 81144 does not improve AUC. Reverting changes.
Training on augumented user 58226 14/50 current_auc = 0.7777777777777778
User 58226 AUC after training: 0.7555555555555555
User 58226 does not improve AUC. Reverting changes.
Training on augumented user 1412 15/50 current_auc = 0.7777777777777778
User 1412 AUC after training: 0.7777777777777778
User 1412 does not improve AUC. Reverting changes.
Training on augumented user 36058 16/50 current_auc = 0.7777777777777778
User 36058 AUC after training: 0.7555555555555555
User 36058 does not improve AUC. Reverting changes.
Training on augumented user 87733 17/50 current_auc = 0.7777777777777778
User 87733 AUC after training: 0.7777777777777778
User 87733 does not improve AUC. Reverting changes.
Training on augumented user 118641 18/50 current_auc = 0.7777777777777778
User 118641 AUC after training: 0.7777777777777778
User 118641 does not improve AUC. Reverting changes.
Training on augumented user 29653 19/50 current_auc = 0.7777777777777778
User 29653 AUC after training: 0.7777777777777778
User 29653 does not improve AUC. Reverting changes.
Training on augumented user 122543 20/50 current_auc = 0.7777777777777778
User 122543 AUC after training: 0.7777777777777778
User 122543 does not improve AUC. Reverting changes.
Training on augumented user 51974 21/50 current_auc = 0.7777777777777778
User 51974 AUC after training: 0.7777777777777778
User 51974 does not improve AUC. Reverting changes.
Training on augumented user 63651 22/50 current_auc = 0.7777777777777778
User 63651 AUC after training: 0.7777777777777778
User 63651 does not improve AUC. Reverting changes.
Training on augumented user 83983 23/50 current_auc = 0.7777777777777778
User 83983 AUC after training: 0.7777777777777778
User 83983 does not improve AUC. Reverting changes.
Training on augumented user 18515 24/50 current_auc = 0.7777777777777778
User 18515 AUC after training: 0.8
User 18515 improves AUC. Keeping the model.
Training on augumented user 88936 25/50 current_auc = 0.8
User 88936 AUC after training: 0.8
User 88936 does not improve AUC. Reverting changes.
Training on augumented user 3672 26/50 current_auc = 0.8
User 3672 AUC after training: 0.7777777777777778
User 3672 does not improve AUC. Reverting changes.
Training on augumented user 32203 27/50 current_auc = 0.8
User 32203 AUC after training: 0.7777777777777778
User 32203 does not improve AUC. Reverting changes.
Training on augumented user 124641 28/50 current_auc = 0.8
User 124641 AUC after training: 0.8
User 124641 does not improve AUC. Reverting changes.
Training on augumented user 102994 29/50 current_auc = 0.8
User 102994 AUC after training: 0.7777777777777778
User 102994 does not improve AUC. Reverting changes.
Training on augumented user 115806 30/50 current_auc = 0.8
User 115806 AUC after training: 0.8
User 115806 does not improve AUC. Reverting changes.
Training on augumented user 98850 31/50 current_auc = 0.8
User 98850 AUC after training: 0.8
User 98850 does not improve AUC. Reverting changes.
Training on augumented user 131674 32/50 current_auc = 0.8
User 131674 AUC after training: 0.8
User 131674 does not improve AUC. Reverting changes.
Training on augumented user 4994 33/50 current_auc = 0.8
User 4994 AUC after training: 0.8
User 4994 does not improve AUC. Reverting changes.
Training on augumented user 56098 34/50 current_auc = 0.8
User 56098 AUC after training: 0.7777777777777778
User 56098 does not improve AUC. Reverting changes.
Training on augumented user 17598 35/50 current_auc = 0.8
User 17598 AUC after training: 0.8
User 17598 does not improve AUC. Reverting changes.
Training on augumented user 112633 36/50 current_auc = 0.8
User 112633 AUC after training: 0.7777777777777778
User 112633 does not improve AUC. Reverting changes.
Training on augumented user 18980 37/50 current_auc = 0.8
User 18980 AUC after training: 0.7777777777777778
User 18980 does not improve AUC. Reverting changes.
Training on augumented user 92407 38/50 current_auc = 0.8
User 92407 AUC after training: 0.7777777777777778
User 92407 does not improve AUC. Reverting changes.
Training on augumented user 46849 39/50 current_auc = 0.8
User 46849 AUC after training: 0.7777777777777778
User 46849 does not improve AUC. Reverting changes.
Training on augumented user 56404 40/50 current_auc = 0.8
User 56404 AUC after training: 0.8
User 56404 does not improve AUC. Reverting changes.
Training on augumented user 45748 41/50 current_auc = 0.8
User 45748 AUC after training: 0.7777777777777778
User 45748 does not improve AUC. Reverting changes.
Training on augumented user 72502 42/50 current_auc = 0.8
User 72502 AUC after training: 0.8
User 72502 does not improve AUC. Reverting changes.
Training on augumented user 91649 43/50 current_auc = 0.8
User 91649 AUC after training: 0.8
User 91649 does not improve AUC. Reverting changes.
Training on augumented user 19265 44/50 current_auc = 0.8
User 19265 AUC after training: 0.8
User 19265 does not improve AUC. Reverting changes.
Training on augumented user 110328 45/50 current_auc = 0.8
User 110328 AUC after training: 0.8
User 110328 does not improve AUC. Reverting changes.
Training on augumented user 132237 46/50 current_auc = 0.8
User 132237 AUC after training: 0.7777777777777778
User 132237 does not improve AUC. Reverting changes.
Training on augumented user 81072 47/50 current_auc = 0.8
User 81072 AUC after training: 0.8
User 81072 does not improve AUC. Reverting changes.
Training on augumented user 81679 48/50 current_auc = 0.8
User 81679 AUC after training: 0.7777777777777778
User 81679 does not improve AUC. Reverting changes.
Training on augumented user 94616 49/50 current_auc = 0.8
User 94616 AUC after training: 0.7777777777777778
User 94616 does not improve AUC. Reverting changes.
[2024-12-02 18:55:32.994413] start test user 17035 142/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:33.408250] start test user 17035 142/568 recall augumented users by random, augumented_users = [136572, 72049, 43005, 11267, 72396, 36187, 103322, 128363, 53725, 70247, 41342, 28976, 59613, 104021, 43757, 87374, 9640, 121632, 78146, 124938, 122369, 73045, 47801, 81108, 102100, 118647, 56948, 58195, 121936, 7270, 121414, 86604, 127702, 103473, 108228, 119180, 2359, 68046, 91040, 104060, 76333, 108986, 101216, 27699, 136913, 10492, 99373, 119804, 77352, 132662]
[2024-12-02 18:55:33.423635] user = 17035 Cloud 142/568
[2024-12-02 18:55:33.433824] user = 17035 Local 142/568
[2024-12-02 18:55:33.521757] user = 17035 Local+ 142/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:36.307517] user = 17035 MPDA- 142/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5259259259259259
Training on augumented user 136572 0/50 current_auc = 0.5259259259259259
User 136572 AUC after training: 0.5185185185185186
User 136572 does not improve AUC. Reverting changes.
Training on augumented user 72049 1/50 current_auc = 0.5259259259259259
User 72049 AUC after training: 0.5259259259259259
User 72049 does not improve AUC. Reverting changes.
Training on augumented user 43005 2/50 current_auc = 0.5259259259259259
User 43005 AUC after training: 0.5185185185185186
User 43005 does not improve AUC. Reverting changes.
Training on augumented user 11267 3/50 current_auc = 0.5259259259259259
User 11267 AUC after training: 0.5259259259259259
User 11267 does not improve AUC. Reverting changes.
Training on augumented user 72396 4/50 current_auc = 0.5259259259259259
User 72396 AUC after training: 0.5259259259259259
User 72396 does not improve AUC. Reverting changes.
Training on augumented user 36187 5/50 current_auc = 0.5259259259259259
User 36187 AUC after training: 0.5259259259259259
User 36187 does not improve AUC. Reverting changes.
Training on augumented user 103322 6/50 current_auc = 0.5259259259259259
User 103322 AUC after training: 0.5259259259259259
User 103322 does not improve AUC. Reverting changes.
Training on augumented user 128363 7/50 current_auc = 0.5259259259259259
User 128363 AUC after training: 0.5259259259259259
User 128363 does not improve AUC. Reverting changes.
Training on augumented user 53725 8/50 current_auc = 0.5259259259259259
User 53725 AUC after training: 0.5259259259259259
User 53725 does not improve AUC. Reverting changes.
Training on augumented user 70247 9/50 current_auc = 0.5259259259259259
User 70247 AUC after training: 0.5259259259259259
User 70247 does not improve AUC. Reverting changes.
Training on augumented user 41342 10/50 current_auc = 0.5259259259259259
User 41342 AUC after training: 0.5259259259259259
User 41342 does not improve AUC. Reverting changes.
Training on augumented user 28976 11/50 current_auc = 0.5259259259259259
User 28976 AUC after training: 0.5259259259259259
User 28976 does not improve AUC. Reverting changes.
Training on augumented user 59613 12/50 current_auc = 0.5259259259259259
User 59613 AUC after training: 0.5259259259259259
User 59613 does not improve AUC. Reverting changes.
Training on augumented user 104021 13/50 current_auc = 0.5259259259259259
User 104021 AUC after training: 0.5259259259259259
User 104021 does not improve AUC. Reverting changes.
Training on augumented user 43757 14/50 current_auc = 0.5259259259259259
User 43757 AUC after training: 0.5333333333333333
User 43757 improves AUC. Keeping the model.
Training on augumented user 87374 15/50 current_auc = 0.5333333333333333
User 87374 AUC after training: 0.5259259259259259
User 87374 does not improve AUC. Reverting changes.
Training on augumented user 9640 16/50 current_auc = 0.5333333333333333
User 9640 AUC after training: 0.5333333333333333
User 9640 does not improve AUC. Reverting changes.
Training on augumented user 121632 17/50 current_auc = 0.5333333333333333
User 121632 AUC after training: 0.5333333333333333
User 121632 does not improve AUC. Reverting changes.
Training on augumented user 78146 18/50 current_auc = 0.5333333333333333
User 78146 AUC after training: 0.5333333333333333
User 78146 does not improve AUC. Reverting changes.
Training on augumented user 124938 19/50 current_auc = 0.5333333333333333
User 124938 AUC after training: 0.5333333333333333
User 124938 does not improve AUC. Reverting changes.
Training on augumented user 122369 20/50 current_auc = 0.5333333333333333
User 122369 AUC after training: 0.5333333333333333
User 122369 does not improve AUC. Reverting changes.
Training on augumented user 73045 21/50 current_auc = 0.5333333333333333
User 73045 AUC after training: 0.5333333333333333
User 73045 does not improve AUC. Reverting changes.
Training on augumented user 47801 22/50 current_auc = 0.5333333333333333
User 47801 AUC after training: 0.5333333333333333
User 47801 does not improve AUC. Reverting changes.
Training on augumented user 81108 23/50 current_auc = 0.5333333333333333
User 81108 AUC after training: 0.5333333333333333
User 81108 does not improve AUC. Reverting changes.
Training on augumented user 102100 24/50 current_auc = 0.5333333333333333
User 102100 AUC after training: 0.5333333333333333
User 102100 does not improve AUC. Reverting changes.
Training on augumented user 118647 25/50 current_auc = 0.5333333333333333
User 118647 AUC after training: 0.5259259259259259
User 118647 does not improve AUC. Reverting changes.
Training on augumented user 56948 26/50 current_auc = 0.5333333333333333
User 56948 AUC after training: 0.5333333333333333
User 56948 does not improve AUC. Reverting changes.
Training on augumented user 58195 27/50 current_auc = 0.5333333333333333
User 58195 AUC after training: 0.5333333333333333
User 58195 does not improve AUC. Reverting changes.
Training on augumented user 121936 28/50 current_auc = 0.5333333333333333
User 121936 AUC after training: 0.5333333333333333
User 121936 does not improve AUC. Reverting changes.
Training on augumented user 7270 29/50 current_auc = 0.5333333333333333
User 7270 AUC after training: 0.5333333333333333
User 7270 does not improve AUC. Reverting changes.
Training on augumented user 121414 30/50 current_auc = 0.5333333333333333
User 121414 AUC after training: 0.5333333333333333
User 121414 does not improve AUC. Reverting changes.
Training on augumented user 86604 31/50 current_auc = 0.5333333333333333
User 86604 AUC after training: 0.5333333333333333
User 86604 does not improve AUC. Reverting changes.
Training on augumented user 127702 32/50 current_auc = 0.5333333333333333
User 127702 AUC after training: 0.5333333333333333
User 127702 does not improve AUC. Reverting changes.
Training on augumented user 103473 33/50 current_auc = 0.5333333333333333
User 103473 AUC after training: 0.5333333333333333
User 103473 does not improve AUC. Reverting changes.
Training on augumented user 108228 34/50 current_auc = 0.5333333333333333
User 108228 AUC after training: 0.5333333333333333
User 108228 does not improve AUC. Reverting changes.
Training on augumented user 119180 35/50 current_auc = 0.5333333333333333
User 119180 AUC after training: 0.5259259259259259
User 119180 does not improve AUC. Reverting changes.
Training on augumented user 2359 36/50 current_auc = 0.5333333333333333
User 2359 AUC after training: 0.5333333333333333
User 2359 does not improve AUC. Reverting changes.
Training on augumented user 68046 37/50 current_auc = 0.5333333333333333
User 68046 AUC after training: 0.5333333333333333
User 68046 does not improve AUC. Reverting changes.
Training on augumented user 91040 38/50 current_auc = 0.5333333333333333
User 91040 AUC after training: 0.5259259259259259
User 91040 does not improve AUC. Reverting changes.
Training on augumented user 104060 39/50 current_auc = 0.5333333333333333
User 104060 AUC after training: 0.5333333333333333
User 104060 does not improve AUC. Reverting changes.
Training on augumented user 76333 40/50 current_auc = 0.5333333333333333
User 76333 AUC after training: 0.5333333333333333
User 76333 does not improve AUC. Reverting changes.
Training on augumented user 108986 41/50 current_auc = 0.5333333333333333
User 108986 AUC after training: 0.5333333333333333
User 108986 does not improve AUC. Reverting changes.
Training on augumented user 101216 42/50 current_auc = 0.5333333333333333
User 101216 AUC after training: 0.5333333333333333
User 101216 does not improve AUC. Reverting changes.
Training on augumented user 27699 43/50 current_auc = 0.5333333333333333
User 27699 AUC after training: 0.5333333333333333
User 27699 does not improve AUC. Reverting changes.
Training on augumented user 136913 44/50 current_auc = 0.5333333333333333
User 136913 AUC after training: 0.5333333333333333
User 136913 does not improve AUC. Reverting changes.
Training on augumented user 10492 45/50 current_auc = 0.5333333333333333
User 10492 AUC after training: 0.5333333333333333
User 10492 does not improve AUC. Reverting changes.
Training on augumented user 99373 46/50 current_auc = 0.5333333333333333
User 99373 AUC after training: 0.5333333333333333
User 99373 does not improve AUC. Reverting changes.
Training on augumented user 119804 47/50 current_auc = 0.5333333333333333
User 119804 AUC after training: 0.5259259259259259
User 119804 does not improve AUC. Reverting changes.
Training on augumented user 77352 48/50 current_auc = 0.5333333333333333
User 77352 AUC after training: 0.5333333333333333
User 77352 does not improve AUC. Reverting changes.
Training on augumented user 132662 49/50 current_auc = 0.5333333333333333
User 132662 AUC after training: 0.5333333333333333
User 132662 does not improve AUC. Reverting changes.
[2024-12-02 18:56:02.123863] start test user 17040 143/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:02.532773] start test user 17040 143/568 recall augumented users by random, augumented_users = [1466, 107197, 6275, 54130, 82839, 54328, 67368, 41702, 24015, 26833, 79364, 41611, 92447, 31543, 48609, 59507, 85999, 53310, 100223, 34767, 59510, 55735, 135009, 25414, 35880, 96323, 40941, 51240, 97182, 51253, 22005, 15141, 40728, 62662, 37981, 40149, 75130, 93174, 66398, 19327, 130592, 103284, 68265, 63592, 101309, 120928, 1689, 15980, 3774, 14941]
[2024-12-02 18:56:02.551381] user = 17040 Cloud 143/568
[2024-12-02 18:56:02.613604] user = 17040 Local 143/568
[2024-12-02 18:56:03.043441] user = 17040 Local+ 143/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:05.726473] user = 17040 MPDA- 143/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5633631468673259
Training on augumented user 1466 0/50 current_auc = 0.5633631468673259
User 1466 AUC after training: 0.5633180886295537
User 1466 does not improve AUC. Reverting changes.
Training on augumented user 107197 1/50 current_auc = 0.5633631468673259
User 107197 AUC after training: 0.5634870570211999
User 107197 improves AUC. Keeping the model.
Training on augumented user 6275 2/50 current_auc = 0.5634870570211999
User 6275 AUC after training: 0.5633518823078829
User 6275 does not improve AUC. Reverting changes.
Training on augumented user 54130 3/50 current_auc = 0.5634870570211999
User 54130 AUC after training: 0.5635884380561876
User 54130 improves AUC. Keeping the model.
Training on augumented user 82839 4/50 current_auc = 0.5635884380561876
User 82839 AUC after training: 0.5635264829792507
User 82839 does not improve AUC. Reverting changes.
Training on augumented user 54328 5/50 current_auc = 0.5635884380561876
User 54328 AUC after training: 0.5638475229233785
User 54328 improves AUC. Keeping the model.
Training on augumented user 67368 6/50 current_auc = 0.5638475229233785
User 67368 AUC after training: 0.5638587874828216
User 67368 improves AUC. Keeping the model.
Training on augumented user 41702 7/50 current_auc = 0.5638587874828216
User 41702 AUC after training: 0.5639826976366954
User 41702 improves AUC. Keeping the model.
Training on augumented user 24015 8/50 current_auc = 0.5639826976366954
User 24015 AUC after training: 0.5630646360420843
User 24015 does not improve AUC. Reverting changes.
Training on augumented user 26833 9/50 current_auc = 0.5639826976366954
User 26833 AUC after training: 0.5640953432311262
User 26833 improves AUC. Keeping the model.
Training on augumented user 79364 10/50 current_auc = 0.5640953432311262
User 79364 AUC after training: 0.5638813166017077
User 79364 does not improve AUC. Reverting changes.
Training on augumented user 41611 11/50 current_auc = 0.5640953432311262
User 41611 AUC after training: 0.5641629305877848
User 41611 improves AUC. Keeping the model.
Training on augumented user 92447 12/50 current_auc = 0.5641629305877848
User 92447 AUC after training: 0.5641404014688985
User 92447 does not improve AUC. Reverting changes.
Training on augumented user 31543 13/50 current_auc = 0.5641629305877848
User 31543 AUC after training: 0.5638925811611508
User 31543 does not improve AUC. Reverting changes.
Training on augumented user 48609 14/50 current_auc = 0.5641629305877848
User 48609 AUC after training: 0.5639376393989232
User 48609 does not improve AUC. Reverting changes.
Training on augumented user 59507 15/50 current_auc = 0.5641629305877848
User 59507 AUC after training: 0.5641404014688985
User 59507 does not improve AUC. Reverting changes.
Training on augumented user 85999 16/50 current_auc = 0.5641629305877848
User 85999 AUC after training: 0.563937639398923
User 85999 does not improve AUC. Reverting changes.
Training on augumented user 53310 17/50 current_auc = 0.5641629305877848
User 53310 AUC after training: 0.5639151102800368
User 53310 does not improve AUC. Reverting changes.
Training on augumented user 100223 18/50 current_auc = 0.5641629305877848
User 100223 AUC after training: 0.5641404014688985
User 100223 does not improve AUC. Reverting changes.
Training on augumented user 34767 19/50 current_auc = 0.5641629305877848
User 34767 AUC after training: 0.5636898190911754
User 34767 does not improve AUC. Reverting changes.
Training on augumented user 59510 20/50 current_auc = 0.5641629305877848
User 59510 AUC after training: 0.5640277558744677
User 59510 does not improve AUC. Reverting changes.
Training on augumented user 55735 21/50 current_auc = 0.5641629305877848
User 55735 AUC after training: 0.5641066077905693
User 55735 does not improve AUC. Reverting changes.
Training on augumented user 135009 22/50 current_auc = 0.5641629305877848
User 135009 AUC after training: 0.5638249938044924
User 135009 does not improve AUC. Reverting changes.
Training on augumented user 25414 23/50 current_auc = 0.5641629305877848
User 25414 AUC after training: 0.5634532633428707
User 25414 does not improve AUC. Reverting changes.
Training on augumented user 35880 24/50 current_auc = 0.5641629305877848
User 35880 AUC after training: 0.5640390204339109
User 35880 does not improve AUC. Reverting changes.
Training on augumented user 96323 25/50 current_auc = 0.5641629305877848
User 96323 AUC after training: 0.5641516660283417
User 96323 does not improve AUC. Reverting changes.
Training on augumented user 40941 26/50 current_auc = 0.5641629305877848
User 40941 AUC after training: 0.564050284993354
User 40941 does not improve AUC. Reverting changes.
Training on augumented user 51240 27/50 current_auc = 0.5641629305877848
User 51240 AUC after training: 0.563988329916417
User 51240 does not improve AUC. Reverting changes.
Training on augumented user 97182 28/50 current_auc = 0.5641629305877848
User 97182 AUC after training: 0.5637686710072769
User 97182 does not improve AUC. Reverting changes.
Training on augumented user 51253 29/50 current_auc = 0.5641629305877848
User 51253 AUC after training: 0.5639601685178093
User 51253 does not improve AUC. Reverting changes.
Training on augumented user 22005 30/50 current_auc = 0.5641629305877848
User 22005 AUC after training: 0.5641854597066709
User 22005 improves AUC. Keeping the model.
Training on augumented user 15141 31/50 current_auc = 0.5641854597066709
User 15141 AUC after training: 0.5641066077905693
User 15141 does not improve AUC. Reverting changes.
Training on augumented user 40728 32/50 current_auc = 0.5641854597066709
User 40728 AUC after training: 0.5644051186158109
User 40728 improves AUC. Keeping the model.
Training on augumented user 62662 33/50 current_auc = 0.5644051186158109
User 62662 AUC after training: 0.5640390204339107
User 62662 does not improve AUC. Reverting changes.
Training on augumented user 37981 34/50 current_auc = 0.5644051186158109
User 37981 AUC after training: 0.5642361502241647
User 37981 does not improve AUC. Reverting changes.
Training on augumented user 40149 35/50 current_auc = 0.5644051186158109
User 40149 AUC after training: 0.5642192533850001
User 40149 does not improve AUC. Reverting changes.
Training on augumented user 75130 36/50 current_auc = 0.5644051186158109
User 75130 AUC after training: 0.5643037375808232
User 75130 does not improve AUC. Reverting changes.
Training on augumented user 93174 37/50 current_auc = 0.5644051186158109
User 93174 AUC after training: 0.5641798274269493
User 93174 does not improve AUC. Reverting changes.
Training on augumented user 66398 38/50 current_auc = 0.5644051186158109
User 66398 AUC after training: 0.5642136211052786
User 66398 does not improve AUC. Reverting changes.
Training on augumented user 19327 39/50 current_auc = 0.5644051186158109
User 19327 AUC after training: 0.5643037375808233
User 19327 does not improve AUC. Reverting changes.
Training on augumented user 130592 40/50 current_auc = 0.5644051186158109
User 130592 AUC after training: 0.5644896028116341
User 130592 improves AUC. Keeping the model.
Training on augumented user 103284 41/50 current_auc = 0.5644896028116341
User 103284 AUC after training: 0.5644445445738617
User 103284 does not improve AUC. Reverting changes.
Training on augumented user 68265 42/50 current_auc = 0.5644896028116341
User 68265 AUC after training: 0.5643318989794309
User 68265 does not improve AUC. Reverting changes.
Training on augumented user 63592 43/50 current_auc = 0.5644896028116341
User 63592 AUC after training: 0.5643206344199878
User 63592 does not improve AUC. Reverting changes.
Training on augumented user 101309 44/50 current_auc = 0.5644896028116341
User 101309 AUC after training: 0.5643318989794309
User 101309 does not improve AUC. Reverting changes.
Training on augumented user 120928 45/50 current_auc = 0.5644896028116341
User 120928 AUC after training: 0.5645233964899633
User 120928 improves AUC. Keeping the model.
Training on augumented user 1689 46/50 current_auc = 0.5645233964899633
User 1689 AUC after training: 0.5642023565458355
User 1689 does not improve AUC. Reverting changes.
Training on augumented user 15980 47/50 current_auc = 0.5645233964899633
User 15980 AUC after training: 0.5643882217766463
User 15980 does not improve AUC. Reverting changes.
Training on augumented user 3774 48/50 current_auc = 0.5645233964899633
User 3774 AUC after training: 0.5645797192871786
User 3774 improves AUC. Keeping the model.
Training on augumented user 14941 49/50 current_auc = 0.5645797192871786
User 14941 AUC after training: 0.5651429472593327
User 14941 improves AUC. Keeping the model.
[2024-12-02 18:56:31.865930] start test user 17062 144/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:32.451646] start test user 17062 144/568 recall augumented users by random, augumented_users = [138349, 114496, 38621, 102865, 198, 90759, 10857, 137155, 103573, 82234, 79028, 34236, 17353, 87146, 708, 38879, 46416, 50063, 58218, 109856, 25476, 127744, 36732, 116300, 128789, 51359, 34623, 79889, 21333, 102391, 40098, 14874, 2378, 47488, 52712, 125766, 101942, 47133, 69090, 121235, 41224, 118100, 88071, 32599, 76278, 13299, 69294, 94026, 138472, 38409]
[2024-12-02 18:56:32.481755] user = 17062 Cloud 144/568
[2024-12-02 18:56:32.539498] user = 17062 Local 144/568
[2024-12-02 18:56:32.687569] user = 17062 Local+ 144/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:35.020792] user = 17062 MPDA- 144/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7372461975110982
Training on augumented user 138349 0/50 current_auc = 0.7372461975110982
User 138349 AUC after training: 0.7372461975110981
User 138349 does not improve AUC. Reverting changes.
Training on augumented user 114496 1/50 current_auc = 0.7372461975110982
User 114496 AUC after training: 0.7373553598719162
User 114496 improves AUC. Keeping the model.
Training on augumented user 38621 2/50 current_auc = 0.7373553598719162
User 38621 AUC after training: 0.7371370351502802
User 38621 does not improve AUC. Reverting changes.
Training on augumented user 102865 3/50 current_auc = 0.7373553598719162
User 102865 AUC after training: 0.7371006476966743
User 102865 does not improve AUC. Reverting changes.
Training on augumented user 198 4/50 current_auc = 0.7373553598719162
User 198 AUC after training: 0.7373917473255222
User 198 improves AUC. Keeping the model.
Training on augumented user 90759 5/50 current_auc = 0.7373917473255222
User 90759 AUC after training: 0.7371734226038863
User 90759 does not improve AUC. Reverting changes.
Training on augumented user 10857 6/50 current_auc = 0.7373917473255222
User 10857 AUC after training: 0.7381740775780511
User 10857 improves AUC. Keeping the model.
Training on augumented user 137155 7/50 current_auc = 0.7381740775780511
User 137155 AUC after training: 0.7381194963976421
User 137155 does not improve AUC. Reverting changes.
Training on augumented user 103573 8/50 current_auc = 0.7381740775780511
User 103573 AUC after training: 0.7385743395677171
User 103573 improves AUC. Keeping the model.
Training on augumented user 82234 9/50 current_auc = 0.7385743395677171
User 82234 AUC after training: 0.7381376901244451
User 82234 does not improve AUC. Reverting changes.
Training on augumented user 79028 10/50 current_auc = 0.7385743395677171
User 79028 AUC after training: 0.7385015646605051
User 79028 does not improve AUC. Reverting changes.
Training on augumented user 34236 11/50 current_auc = 0.7385743395677171
User 34236 AUC after training: 0.7389018266501711
User 34236 improves AUC. Keeping the model.
Training on augumented user 17353 12/50 current_auc = 0.7389018266501711
User 17353 AUC after training: 0.7387380831089442
User 17353 does not improve AUC. Reverting changes.
Training on augumented user 87146 13/50 current_auc = 0.7389018266501711
User 87146 AUC after training: 0.7388836329233681
User 87146 does not improve AUC. Reverting changes.
Training on augumented user 708 14/50 current_auc = 0.7389018266501711
User 708 AUC after training: 0.7387562768357471
User 708 does not improve AUC. Reverting changes.
Training on augumented user 38879 15/50 current_auc = 0.7389018266501711
User 38879 AUC after training: 0.7388290517429591
User 38879 does not improve AUC. Reverting changes.
Training on augumented user 46416 16/50 current_auc = 0.7389018266501711
User 46416 AUC after training: 0.7382650462120661
User 46416 does not improve AUC. Reverting changes.
Training on augumented user 50063 17/50 current_auc = 0.7389018266501711
User 50063 AUC after training: 0.7385197583873081
User 50063 does not improve AUC. Reverting changes.
Training on augumented user 58218 18/50 current_auc = 0.7389018266501711
User 58218 AUC after training: 0.7387198893821411
User 58218 does not improve AUC. Reverting changes.
Training on augumented user 109856 19/50 current_auc = 0.7389018266501711
User 109856 AUC after training: 0.7379375591296121
User 109856 does not improve AUC. Reverting changes.
Training on augumented user 25476 20/50 current_auc = 0.7389018266501711
User 25476 AUC after training: 0.7387926642893531
User 25476 does not improve AUC. Reverting changes.
Training on augumented user 127744 21/50 current_auc = 0.7389018266501711
User 127744 AUC after training: 0.7385379521141111
User 127744 does not improve AUC. Reverting changes.
Training on augumented user 36732 22/50 current_auc = 0.7389018266501711
User 36732 AUC after training: 0.738683501928535
User 36732 does not improve AUC. Reverting changes.
Training on augumented user 116300 23/50 current_auc = 0.7389018266501711
User 116300 AUC after training: 0.738610727021323
User 116300 does not improve AUC. Reverting changes.
Training on augumented user 128789 24/50 current_auc = 0.7389018266501711
User 128789 AUC after training: 0.7387562768357471
User 128789 does not improve AUC. Reverting changes.
Training on augumented user 51359 25/50 current_auc = 0.7389018266501711
User 51359 AUC after training: 0.7383742085728842
User 51359 does not improve AUC. Reverting changes.
Training on augumented user 34623 26/50 current_auc = 0.7389018266501711
User 34623 AUC after training: 0.738883632923368
User 34623 does not improve AUC. Reverting changes.
Training on augumented user 79889 27/50 current_auc = 0.7389018266501711
User 79889 AUC after training: 0.7387744705625501
User 79889 does not improve AUC. Reverting changes.
Training on augumented user 21333 28/50 current_auc = 0.7389018266501711
User 21333 AUC after training: 0.738810858016156
User 21333 does not improve AUC. Reverting changes.
Training on augumented user 102391 29/50 current_auc = 0.7389018266501711
User 102391 AUC after training: 0.7387926642893531
User 102391 does not improve AUC. Reverting changes.
Training on augumented user 40098 30/50 current_auc = 0.7389018266501711
User 40098 AUC after training: 0.7383560148460812
User 40098 does not improve AUC. Reverting changes.
Training on augumented user 14874 31/50 current_auc = 0.7389018266501711
User 14874 AUC after training: 0.7388290517429591
User 14874 does not improve AUC. Reverting changes.
Training on augumented user 2378 32/50 current_auc = 0.7389018266501711
User 2378 AUC after training: 0.7383742085728842
User 2378 does not improve AUC. Reverting changes.
Training on augumented user 47488 33/50 current_auc = 0.7389018266501711
User 47488 AUC after training: 0.7389200203769741
User 47488 improves AUC. Keeping the model.
Training on augumented user 52712 34/50 current_auc = 0.7389200203769741
User 52712 AUC after training: 0.738628920748126
User 52712 does not improve AUC. Reverting changes.
Training on augumented user 125766 35/50 current_auc = 0.7389200203769741
User 125766 AUC after training: 0.7388836329233681
User 125766 does not improve AUC. Reverting changes.
Training on augumented user 101942 36/50 current_auc = 0.7389200203769741
User 101942 AUC after training: 0.7388472454697621
User 101942 does not improve AUC. Reverting changes.
Training on augumented user 47133 37/50 current_auc = 0.7389200203769741
User 47133 AUC after training: 0.7390655701913981
User 47133 improves AUC. Keeping the model.
Training on augumented user 69090 38/50 current_auc = 0.7390655701913981
User 69090 AUC after training: 0.7388108580161561
User 69090 does not improve AUC. Reverting changes.
Training on augumented user 121235 39/50 current_auc = 0.7390655701913981
User 121235 AUC after training: 0.7388654391965651
User 121235 does not improve AUC. Reverting changes.
Training on augumented user 41224 40/50 current_auc = 0.7390655701913981
User 41224 AUC after training: 0.73913834509861
User 41224 improves AUC. Keeping the model.
Training on augumented user 118100 41/50 current_auc = 0.73913834509861
User 118100 AUC after training: 0.7386471144749291
User 118100 does not improve AUC. Reverting changes.
Training on augumented user 88071 42/50 current_auc = 0.73913834509861
User 88071 AUC after training: 0.7388472454697621
User 88071 does not improve AUC. Reverting changes.
Training on augumented user 32599 43/50 current_auc = 0.73913834509861
User 32599 AUC after training: 0.738883632923368
User 32599 does not improve AUC. Reverting changes.
Training on augumented user 76278 44/50 current_auc = 0.73913834509861
User 76278 AUC after training: 0.738847245469762
User 76278 does not improve AUC. Reverting changes.
Training on augumented user 13299 45/50 current_auc = 0.73913834509861
User 13299 AUC after training: 0.7390291827377922
User 13299 does not improve AUC. Reverting changes.
Training on augumented user 69294 46/50 current_auc = 0.73913834509861
User 69294 AUC after training: 0.7393748635470491
User 69294 improves AUC. Keeping the model.
Training on augumented user 94026 47/50 current_auc = 0.7393748635470491
User 94026 AUC after training: 0.7387016956553382
User 94026 does not improve AUC. Reverting changes.
Training on augumented user 138472 48/50 current_auc = 0.7393748635470491
User 138472 AUC after training: 0.739156538825413
User 138472 does not improve AUC. Reverting changes.
Training on augumented user 38409 49/50 current_auc = 0.7393748635470491
User 38409 AUC after training: 0.739010989010989
User 38409 does not improve AUC. Reverting changes.
[2024-12-02 18:57:07.339557] start test user 17078 145/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:08.042416] start test user 17078 145/568 recall augumented users by random, augumented_users = [99494, 133858, 12590, 23130, 116752, 7713, 44658, 86085, 47571, 7015, 6456, 108865, 50093, 65069, 107033, 54426, 118890, 114544, 38608, 46710, 82032, 3132, 56406, 1859, 8647, 76092, 66461, 11224, 41382, 67908, 113088, 131928, 69641, 100958, 124060, 24102, 22746, 88061, 93950, 104132, 108459, 36678, 42631, 122188, 60435, 97172, 51701, 78215, 15026, 12729]
[2024-12-02 18:57:08.070839] user = 17078 Cloud 145/568
[2024-12-02 18:57:08.096372] user = 17078 Local 145/568
[2024-12-02 18:57:08.176364] user = 17078 Local+ 145/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:10.892052] user = 17078 MPDA- 145/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5845309381237525
Training on augumented user 99494 0/50 current_auc = 0.5845309381237525
User 99494 AUC after training: 0.5850299401197605
User 99494 improves AUC. Keeping the model.
Training on augumented user 133858 1/50 current_auc = 0.5850299401197605
User 133858 AUC after training: 0.5849800399201596
User 133858 does not improve AUC. Reverting changes.
Training on augumented user 12590 2/50 current_auc = 0.5850299401197605
User 12590 AUC after training: 0.5848303393213573
User 12590 does not improve AUC. Reverting changes.
Training on augumented user 23130 3/50 current_auc = 0.5850299401197605
User 23130 AUC after training: 0.5856287425149701
User 23130 improves AUC. Keeping the model.
Training on augumented user 116752 4/50 current_auc = 0.5856287425149701
User 116752 AUC after training: 0.5860279441117765
User 116752 improves AUC. Keeping the model.
Training on augumented user 7713 5/50 current_auc = 0.5860279441117765
User 7713 AUC after training: 0.5859780439121757
User 7713 does not improve AUC. Reverting changes.
Training on augumented user 44658 6/50 current_auc = 0.5860279441117765
User 44658 AUC after training: 0.5859780439121757
User 44658 does not improve AUC. Reverting changes.
Training on augumented user 86085 7/50 current_auc = 0.5860279441117765
User 86085 AUC after training: 0.5863273453093812
User 86085 improves AUC. Keeping the model.
Training on augumented user 47571 8/50 current_auc = 0.5863273453093812
User 47571 AUC after training: 0.5864770459081836
User 47571 improves AUC. Keeping the model.
Training on augumented user 7015 9/50 current_auc = 0.5864770459081836
User 7015 AUC after training: 0.5868263473053893
User 7015 improves AUC. Keeping the model.
Training on augumented user 6456 10/50 current_auc = 0.5868263473053893
User 6456 AUC after training: 0.5867764471057884
User 6456 does not improve AUC. Reverting changes.
Training on augumented user 108865 11/50 current_auc = 0.5868263473053893
User 108865 AUC after training: 0.58687624750499
User 108865 improves AUC. Keeping the model.
Training on augumented user 50093 12/50 current_auc = 0.58687624750499
User 50093 AUC after training: 0.5866766467065868
User 50093 does not improve AUC. Reverting changes.
Training on augumented user 65069 13/50 current_auc = 0.58687624750499
User 65069 AUC after training: 0.5866766467065869
User 65069 does not improve AUC. Reverting changes.
Training on augumented user 107033 14/50 current_auc = 0.58687624750499
User 107033 AUC after training: 0.5865269461077844
User 107033 does not improve AUC. Reverting changes.
Training on augumented user 54426 15/50 current_auc = 0.58687624750499
User 54426 AUC after training: 0.585878243512974
User 54426 does not improve AUC. Reverting changes.
Training on augumented user 118890 16/50 current_auc = 0.58687624750499
User 118890 AUC after training: 0.5864271457085829
User 118890 does not improve AUC. Reverting changes.
Training on augumented user 114544 17/50 current_auc = 0.58687624750499
User 114544 AUC after training: 0.5854790419161676
User 114544 does not improve AUC. Reverting changes.
Training on augumented user 38608 18/50 current_auc = 0.58687624750499
User 38608 AUC after training: 0.5866766467065869
User 38608 does not improve AUC. Reverting changes.
Training on augumented user 46710 19/50 current_auc = 0.58687624750499
User 46710 AUC after training: 0.5859780439121757
User 46710 does not improve AUC. Reverting changes.
Training on augumented user 82032 20/50 current_auc = 0.58687624750499
User 82032 AUC after training: 0.5867764471057885
User 82032 does not improve AUC. Reverting changes.
Training on augumented user 3132 21/50 current_auc = 0.58687624750499
User 3132 AUC after training: 0.5862774451097804
User 3132 does not improve AUC. Reverting changes.
Training on augumented user 56406 22/50 current_auc = 0.58687624750499
User 56406 AUC after training: 0.5868263473053892
User 56406 does not improve AUC. Reverting changes.
Training on augumented user 1859 23/50 current_auc = 0.58687624750499
User 1859 AUC after training: 0.5867265469061876
User 1859 does not improve AUC. Reverting changes.
Training on augumented user 8647 24/50 current_auc = 0.58687624750499
User 8647 AUC after training: 0.5860279441117765
User 8647 does not improve AUC. Reverting changes.
Training on augumented user 76092 25/50 current_auc = 0.58687624750499
User 76092 AUC after training: 0.58625249500998
User 76092 does not improve AUC. Reverting changes.
Training on augumented user 66461 26/50 current_auc = 0.58687624750499
User 66461 AUC after training: 0.5868263473053893
User 66461 does not improve AUC. Reverting changes.
Training on augumented user 11224 27/50 current_auc = 0.58687624750499
User 11224 AUC after training: 0.5867265469061876
User 11224 does not improve AUC. Reverting changes.
Training on augumented user 41382 28/50 current_auc = 0.58687624750499
User 41382 AUC after training: 0.5862774451097804
User 41382 does not improve AUC. Reverting changes.
Training on augumented user 67908 29/50 current_auc = 0.58687624750499
User 67908 AUC after training: 0.5866766467065868
User 67908 does not improve AUC. Reverting changes.
Training on augumented user 113088 30/50 current_auc = 0.58687624750499
User 113088 AUC after training: 0.58687624750499
User 113088 does not improve AUC. Reverting changes.
Training on augumented user 131928 31/50 current_auc = 0.58687624750499
User 131928 AUC after training: 0.5866267465069861
User 131928 does not improve AUC. Reverting changes.
Training on augumented user 69641 32/50 current_auc = 0.58687624750499
User 69641 AUC after training: 0.58687624750499
User 69641 does not improve AUC. Reverting changes.
Training on augumented user 100958 33/50 current_auc = 0.58687624750499
User 100958 AUC after training: 0.5866766467065868
User 100958 does not improve AUC. Reverting changes.
Training on augumented user 124060 34/50 current_auc = 0.58687624750499
User 124060 AUC after training: 0.58687624750499
User 124060 does not improve AUC. Reverting changes.
Training on augumented user 24102 35/50 current_auc = 0.58687624750499
User 24102 AUC after training: 0.5867764471057884
User 24102 does not improve AUC. Reverting changes.
Training on augumented user 22746 36/50 current_auc = 0.58687624750499
User 22746 AUC after training: 0.5859780439121757
User 22746 does not improve AUC. Reverting changes.
Training on augumented user 88061 37/50 current_auc = 0.58687624750499
User 88061 AUC after training: 0.5865269461077846
User 88061 does not improve AUC. Reverting changes.
Training on augumented user 93950 38/50 current_auc = 0.58687624750499
User 93950 AUC after training: 0.5863273453093812
User 93950 does not improve AUC. Reverting changes.
Training on augumented user 104132 39/50 current_auc = 0.58687624750499
User 104132 AUC after training: 0.5867265469061876
User 104132 does not improve AUC. Reverting changes.
Training on augumented user 108459 40/50 current_auc = 0.58687624750499
User 108459 AUC after training: 0.5866766467065868
User 108459 does not improve AUC. Reverting changes.
Training on augumented user 36678 41/50 current_auc = 0.58687624750499
User 36678 AUC after training: 0.5865768463073853
User 36678 does not improve AUC. Reverting changes.
Training on augumented user 42631 42/50 current_auc = 0.58687624750499
User 42631 AUC after training: 0.5865768463073854
User 42631 does not improve AUC. Reverting changes.
Training on augumented user 122188 43/50 current_auc = 0.58687624750499
User 122188 AUC after training: 0.5865768463073852
User 122188 does not improve AUC. Reverting changes.
Training on augumented user 60435 44/50 current_auc = 0.58687624750499
User 60435 AUC after training: 0.5868263473053892
User 60435 does not improve AUC. Reverting changes.
Training on augumented user 97172 45/50 current_auc = 0.58687624750499
User 97172 AUC after training: 0.5867764471057885
User 97172 does not improve AUC. Reverting changes.
Training on augumented user 51701 46/50 current_auc = 0.58687624750499
User 51701 AUC after training: 0.586926147704591
User 51701 improves AUC. Keeping the model.
Training on augumented user 78215 47/50 current_auc = 0.586926147704591
User 78215 AUC after training: 0.5867265469061876
User 78215 does not improve AUC. Reverting changes.
Training on augumented user 15026 48/50 current_auc = 0.586926147704591
User 15026 AUC after training: 0.5863772455089821
User 15026 does not improve AUC. Reverting changes.
Training on augumented user 12729 49/50 current_auc = 0.586926147704591
User 12729 AUC after training: 0.5865768463073853
User 12729 does not improve AUC. Reverting changes.
[2024-12-02 18:57:42.450280] start test user 17106 146/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:42.910863] start test user 17106 146/568 recall augumented users by random, augumented_users = [22229, 113793, 98948, 88419, 106553, 125484, 65163, 116983, 110458, 51227, 41525, 34592, 2274, 24895, 1658, 31675, 10953, 60319, 84050, 62185, 93668, 21452, 62252, 3124, 77824, 46995, 134455, 127101, 41037, 20293, 6343, 11952, 98719, 125613, 21447, 136633, 94170, 115498, 128040, 71047, 39019, 66741, 49298, 116661, 87829, 731, 111001, 100096, 92858, 104564]
[2024-12-02 18:57:42.925436] user = 17106 Cloud 146/568
[2024-12-02 18:57:42.934712] user = 17106 Local 146/568
[2024-12-02 18:57:42.954373] user = 17106 Local+ 146/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:45.258493] user = 17106 MPDA- 146/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8095238095238095
Training on augumented user 22229 0/50 current_auc = 0.8095238095238095
User 22229 AUC after training: 0.8095238095238095
User 22229 does not improve AUC. Reverting changes.
Training on augumented user 113793 1/50 current_auc = 0.8095238095238095
User 113793 AUC after training: 0.8095238095238095
User 113793 does not improve AUC. Reverting changes.
Training on augumented user 98948 2/50 current_auc = 0.8095238095238095
User 98948 AUC after training: 0.8095238095238095
User 98948 does not improve AUC. Reverting changes.
Training on augumented user 88419 3/50 current_auc = 0.8095238095238095
User 88419 AUC after training: 0.8095238095238095
User 88419 does not improve AUC. Reverting changes.
Training on augumented user 106553 4/50 current_auc = 0.8095238095238095
User 106553 AUC after training: 0.8095238095238095
User 106553 does not improve AUC. Reverting changes.
Training on augumented user 125484 5/50 current_auc = 0.8095238095238095
User 125484 AUC after training: 0.8095238095238095
User 125484 does not improve AUC. Reverting changes.
Training on augumented user 65163 6/50 current_auc = 0.8095238095238095
User 65163 AUC after training: 0.8253968253968254
User 65163 improves AUC. Keeping the model.
Training on augumented user 116983 7/50 current_auc = 0.8253968253968254
User 116983 AUC after training: 0.8253968253968254
User 116983 does not improve AUC. Reverting changes.
Training on augumented user 110458 8/50 current_auc = 0.8253968253968254
User 110458 AUC after training: 0.8253968253968254
User 110458 does not improve AUC. Reverting changes.
Training on augumented user 51227 9/50 current_auc = 0.8253968253968254
User 51227 AUC after training: 0.8253968253968254
User 51227 does not improve AUC. Reverting changes.
Training on augumented user 41525 10/50 current_auc = 0.8253968253968254
User 41525 AUC after training: 0.8253968253968254
User 41525 does not improve AUC. Reverting changes.
Training on augumented user 34592 11/50 current_auc = 0.8253968253968254
User 34592 AUC after training: 0.8253968253968254
User 34592 does not improve AUC. Reverting changes.
Training on augumented user 2274 12/50 current_auc = 0.8253968253968254
User 2274 AUC after training: 0.8253968253968254
User 2274 does not improve AUC. Reverting changes.
Training on augumented user 24895 13/50 current_auc = 0.8253968253968254
User 24895 AUC after training: 0.8095238095238095
User 24895 does not improve AUC. Reverting changes.
Training on augumented user 1658 14/50 current_auc = 0.8253968253968254
User 1658 AUC after training: 0.8253968253968254
User 1658 does not improve AUC. Reverting changes.
Training on augumented user 31675 15/50 current_auc = 0.8253968253968254
User 31675 AUC after training: 0.8253968253968254
User 31675 does not improve AUC. Reverting changes.
Training on augumented user 10953 16/50 current_auc = 0.8253968253968254
User 10953 AUC after training: 0.8253968253968254
User 10953 does not improve AUC. Reverting changes.
Training on augumented user 60319 17/50 current_auc = 0.8253968253968254
User 60319 AUC after training: 0.8253968253968254
User 60319 does not improve AUC. Reverting changes.
Training on augumented user 84050 18/50 current_auc = 0.8253968253968254
User 84050 AUC after training: 0.8095238095238095
User 84050 does not improve AUC. Reverting changes.
Training on augumented user 62185 19/50 current_auc = 0.8253968253968254
User 62185 AUC after training: 0.8253968253968254
User 62185 does not improve AUC. Reverting changes.
Training on augumented user 93668 20/50 current_auc = 0.8253968253968254
User 93668 AUC after training: 0.8253968253968254
User 93668 does not improve AUC. Reverting changes.
Training on augumented user 21452 21/50 current_auc = 0.8253968253968254
User 21452 AUC after training: 0.8253968253968254
User 21452 does not improve AUC. Reverting changes.
Training on augumented user 62252 22/50 current_auc = 0.8253968253968254
User 62252 AUC after training: 0.8253968253968254
User 62252 does not improve AUC. Reverting changes.
Training on augumented user 3124 23/50 current_auc = 0.8253968253968254
User 3124 AUC after training: 0.8253968253968254
User 3124 does not improve AUC. Reverting changes.
Training on augumented user 77824 24/50 current_auc = 0.8253968253968254
User 77824 AUC after training: 0.8253968253968254
User 77824 does not improve AUC. Reverting changes.
Training on augumented user 46995 25/50 current_auc = 0.8253968253968254
User 46995 AUC after training: 0.8095238095238095
User 46995 does not improve AUC. Reverting changes.
Training on augumented user 134455 26/50 current_auc = 0.8253968253968254
User 134455 AUC after training: 0.8253968253968254
User 134455 does not improve AUC. Reverting changes.
Training on augumented user 127101 27/50 current_auc = 0.8253968253968254
User 127101 AUC after training: 0.8253968253968254
User 127101 does not improve AUC. Reverting changes.
Training on augumented user 41037 28/50 current_auc = 0.8253968253968254
User 41037 AUC after training: 0.8253968253968254
User 41037 does not improve AUC. Reverting changes.
Training on augumented user 20293 29/50 current_auc = 0.8253968253968254
User 20293 AUC after training: 0.8253968253968254
User 20293 does not improve AUC. Reverting changes.
Training on augumented user 6343 30/50 current_auc = 0.8253968253968254
User 6343 AUC after training: 0.8253968253968254
User 6343 does not improve AUC. Reverting changes.
Training on augumented user 11952 31/50 current_auc = 0.8253968253968254
User 11952 AUC after training: 0.8253968253968254
User 11952 does not improve AUC. Reverting changes.
Training on augumented user 98719 32/50 current_auc = 0.8253968253968254
User 98719 AUC after training: 0.8253968253968254
User 98719 does not improve AUC. Reverting changes.
Training on augumented user 125613 33/50 current_auc = 0.8253968253968254
User 125613 AUC after training: 0.8253968253968254
User 125613 does not improve AUC. Reverting changes.
Training on augumented user 21447 34/50 current_auc = 0.8253968253968254
User 21447 AUC after training: 0.8253968253968254
User 21447 does not improve AUC. Reverting changes.
Training on augumented user 136633 35/50 current_auc = 0.8253968253968254
User 136633 AUC after training: 0.8253968253968254
User 136633 does not improve AUC. Reverting changes.
Training on augumented user 94170 36/50 current_auc = 0.8253968253968254
User 94170 AUC after training: 0.8253968253968254
User 94170 does not improve AUC. Reverting changes.
Training on augumented user 115498 37/50 current_auc = 0.8253968253968254
User 115498 AUC after training: 0.8253968253968254
User 115498 does not improve AUC. Reverting changes.
Training on augumented user 128040 38/50 current_auc = 0.8253968253968254
User 128040 AUC after training: 0.8253968253968254
User 128040 does not improve AUC. Reverting changes.
Training on augumented user 71047 39/50 current_auc = 0.8253968253968254
User 71047 AUC after training: 0.8253968253968254
User 71047 does not improve AUC. Reverting changes.
Training on augumented user 39019 40/50 current_auc = 0.8253968253968254
User 39019 AUC after training: 0.8253968253968254
User 39019 does not improve AUC. Reverting changes.
Training on augumented user 66741 41/50 current_auc = 0.8253968253968254
User 66741 AUC after training: 0.8095238095238095
User 66741 does not improve AUC. Reverting changes.
Training on augumented user 49298 42/50 current_auc = 0.8253968253968254
User 49298 AUC after training: 0.8253968253968254
User 49298 does not improve AUC. Reverting changes.
Training on augumented user 116661 43/50 current_auc = 0.8253968253968254
User 116661 AUC after training: 0.8253968253968254
User 116661 does not improve AUC. Reverting changes.
Training on augumented user 87829 44/50 current_auc = 0.8253968253968254
User 87829 AUC after training: 0.8253968253968254
User 87829 does not improve AUC. Reverting changes.
Training on augumented user 731 45/50 current_auc = 0.8253968253968254
User 731 AUC after training: 0.8253968253968254
User 731 does not improve AUC. Reverting changes.
Training on augumented user 111001 46/50 current_auc = 0.8253968253968254
User 111001 AUC after training: 0.8253968253968254
User 111001 does not improve AUC. Reverting changes.
Training on augumented user 100096 47/50 current_auc = 0.8253968253968254
User 100096 AUC after training: 0.8253968253968254
User 100096 does not improve AUC. Reverting changes.
Training on augumented user 92858 48/50 current_auc = 0.8253968253968254
User 92858 AUC after training: 0.8253968253968254
User 92858 does not improve AUC. Reverting changes.
Training on augumented user 104564 49/50 current_auc = 0.8253968253968254
User 104564 AUC after training: 0.8253968253968254
User 104564 does not improve AUC. Reverting changes.
[2024-12-02 18:58:10.542160] start test user 17115 147/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:10.946850] start test user 17115 147/568 recall augumented users by random, augumented_users = [127810, 121849, 24680, 60705, 3108, 66884, 56883, 26312, 99366, 35743, 47413, 6696, 13528, 66241, 123243, 50, 123351, 814, 124364, 92507, 124052, 69042, 136060, 34017, 28361, 32181, 131868, 38109, 96777, 34814, 38355, 3745, 132596, 56704, 126509, 101963, 28676, 107104, 76595, 45622, 49377, 18931, 61337, 25652, 75210, 14564, 59653, 2940, 124104, 58139]
[2024-12-02 18:58:10.961636] user = 17115 Cloud 147/568
[2024-12-02 18:58:10.973932] user = 17115 Local 147/568
[2024-12-02 18:58:11.027499] user = 17115 Local+ 147/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:13.739768] user = 17115 MPDA- 147/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.562753036437247
Training on augumented user 127810 0/50 current_auc = 0.562753036437247
User 127810 AUC after training: 0.5668016194331984
User 127810 improves AUC. Keeping the model.
Training on augumented user 121849 1/50 current_auc = 0.5668016194331984
User 121849 AUC after training: 0.5668016194331984
User 121849 does not improve AUC. Reverting changes.
Training on augumented user 24680 2/50 current_auc = 0.5668016194331984
User 24680 AUC after training: 0.5688259109311742
User 24680 improves AUC. Keeping the model.
Training on augumented user 60705 3/50 current_auc = 0.5688259109311742
User 60705 AUC after training: 0.5668016194331984
User 60705 does not improve AUC. Reverting changes.
Training on augumented user 3108 4/50 current_auc = 0.5688259109311742
User 3108 AUC after training: 0.5607287449392713
User 3108 does not improve AUC. Reverting changes.
Training on augumented user 66884 5/50 current_auc = 0.5688259109311742
User 66884 AUC after training: 0.5627530364372471
User 66884 does not improve AUC. Reverting changes.
Training on augumented user 56883 6/50 current_auc = 0.5688259109311742
User 56883 AUC after training: 0.5668016194331984
User 56883 does not improve AUC. Reverting changes.
Training on augumented user 26312 7/50 current_auc = 0.5688259109311742
User 26312 AUC after training: 0.5688259109311742
User 26312 does not improve AUC. Reverting changes.
Training on augumented user 99366 8/50 current_auc = 0.5688259109311742
User 99366 AUC after training: 0.5668016194331984
User 99366 does not improve AUC. Reverting changes.
Training on augumented user 35743 9/50 current_auc = 0.5688259109311742
User 35743 AUC after training: 0.5668016194331984
User 35743 does not improve AUC. Reverting changes.
Training on augumented user 47413 10/50 current_auc = 0.5688259109311742
User 47413 AUC after training: 0.5668016194331984
User 47413 does not improve AUC. Reverting changes.
Training on augumented user 6696 11/50 current_auc = 0.5688259109311742
User 6696 AUC after training: 0.5668016194331984
User 6696 does not improve AUC. Reverting changes.
Training on augumented user 13528 12/50 current_auc = 0.5688259109311742
User 13528 AUC after training: 0.5647773279352227
User 13528 does not improve AUC. Reverting changes.
Training on augumented user 66241 13/50 current_auc = 0.5688259109311742
User 66241 AUC after training: 0.5647773279352227
User 66241 does not improve AUC. Reverting changes.
Training on augumented user 123243 14/50 current_auc = 0.5688259109311742
User 123243 AUC after training: 0.5668016194331984
User 123243 does not improve AUC. Reverting changes.
Training on augumented user 50 15/50 current_auc = 0.5688259109311742
User 50 AUC after training: 0.562753036437247
User 50 does not improve AUC. Reverting changes.
Training on augumented user 123351 16/50 current_auc = 0.5688259109311742
User 123351 AUC after training: 0.5627530364372471
User 123351 does not improve AUC. Reverting changes.
Training on augumented user 814 17/50 current_auc = 0.5688259109311742
User 814 AUC after training: 0.5688259109311742
User 814 does not improve AUC. Reverting changes.
Training on augumented user 124364 18/50 current_auc = 0.5688259109311742
User 124364 AUC after training: 0.5668016194331984
User 124364 does not improve AUC. Reverting changes.
Training on augumented user 92507 19/50 current_auc = 0.5688259109311742
User 92507 AUC after training: 0.5668016194331984
User 92507 does not improve AUC. Reverting changes.
Training on augumented user 124052 20/50 current_auc = 0.5688259109311742
User 124052 AUC after training: 0.5647773279352227
User 124052 does not improve AUC. Reverting changes.
Training on augumented user 69042 21/50 current_auc = 0.5688259109311742
User 69042 AUC after training: 0.5647773279352227
User 69042 does not improve AUC. Reverting changes.
Training on augumented user 136060 22/50 current_auc = 0.5688259109311742
User 136060 AUC after training: 0.5647773279352227
User 136060 does not improve AUC. Reverting changes.
Training on augumented user 34017 23/50 current_auc = 0.5688259109311742
User 34017 AUC after training: 0.562753036437247
User 34017 does not improve AUC. Reverting changes.
Training on augumented user 28361 24/50 current_auc = 0.5688259109311742
User 28361 AUC after training: 0.5668016194331984
User 28361 does not improve AUC. Reverting changes.
Training on augumented user 32181 25/50 current_auc = 0.5688259109311742
User 32181 AUC after training: 0.5647773279352227
User 32181 does not improve AUC. Reverting changes.
Training on augumented user 131868 26/50 current_auc = 0.5688259109311742
User 131868 AUC after training: 0.562753036437247
User 131868 does not improve AUC. Reverting changes.
Training on augumented user 38109 27/50 current_auc = 0.5688259109311742
User 38109 AUC after training: 0.5668016194331984
User 38109 does not improve AUC. Reverting changes.
Training on augumented user 96777 28/50 current_auc = 0.5688259109311742
User 96777 AUC after training: 0.5647773279352227
User 96777 does not improve AUC. Reverting changes.
Training on augumented user 34814 29/50 current_auc = 0.5688259109311742
User 34814 AUC after training: 0.5668016194331984
User 34814 does not improve AUC. Reverting changes.
Training on augumented user 38355 30/50 current_auc = 0.5688259109311742
User 38355 AUC after training: 0.5668016194331984
User 38355 does not improve AUC. Reverting changes.
Training on augumented user 3745 31/50 current_auc = 0.5688259109311742
User 3745 AUC after training: 0.5688259109311741
User 3745 does not improve AUC. Reverting changes.
Training on augumented user 132596 32/50 current_auc = 0.5688259109311742
User 132596 AUC after training: 0.5668016194331984
User 132596 does not improve AUC. Reverting changes.
Training on augumented user 56704 33/50 current_auc = 0.5688259109311742
User 56704 AUC after training: 0.5688259109311742
User 56704 does not improve AUC. Reverting changes.
Training on augumented user 126509 34/50 current_auc = 0.5688259109311742
User 126509 AUC after training: 0.5688259109311741
User 126509 does not improve AUC. Reverting changes.
Training on augumented user 101963 35/50 current_auc = 0.5688259109311742
User 101963 AUC after training: 0.5647773279352226
User 101963 does not improve AUC. Reverting changes.
Training on augumented user 28676 36/50 current_auc = 0.5688259109311742
User 28676 AUC after training: 0.5668016194331984
User 28676 does not improve AUC. Reverting changes.
Training on augumented user 107104 37/50 current_auc = 0.5688259109311742
User 107104 AUC after training: 0.5688259109311742
User 107104 does not improve AUC. Reverting changes.
Training on augumented user 76595 38/50 current_auc = 0.5688259109311742
User 76595 AUC after training: 0.5627530364372471
User 76595 does not improve AUC. Reverting changes.
Training on augumented user 45622 39/50 current_auc = 0.5688259109311742
User 45622 AUC after training: 0.5647773279352227
User 45622 does not improve AUC. Reverting changes.
Training on augumented user 49377 40/50 current_auc = 0.5688259109311742
User 49377 AUC after training: 0.5668016194331984
User 49377 does not improve AUC. Reverting changes.
Training on augumented user 18931 41/50 current_auc = 0.5688259109311742
User 18931 AUC after training: 0.5688259109311742
User 18931 does not improve AUC. Reverting changes.
Training on augumented user 61337 42/50 current_auc = 0.5688259109311742
User 61337 AUC after training: 0.5668016194331984
User 61337 does not improve AUC. Reverting changes.
Training on augumented user 25652 43/50 current_auc = 0.5688259109311742
User 25652 AUC after training: 0.5647773279352227
User 25652 does not improve AUC. Reverting changes.
Training on augumented user 75210 44/50 current_auc = 0.5688259109311742
User 75210 AUC after training: 0.5647773279352226
User 75210 does not improve AUC. Reverting changes.
Training on augumented user 14564 45/50 current_auc = 0.5688259109311742
User 14564 AUC after training: 0.5668016194331984
User 14564 does not improve AUC. Reverting changes.
Training on augumented user 59653 46/50 current_auc = 0.5688259109311742
User 59653 AUC after training: 0.5647773279352227
User 59653 does not improve AUC. Reverting changes.
Training on augumented user 2940 47/50 current_auc = 0.5688259109311742
User 2940 AUC after training: 0.5668016194331984
User 2940 does not improve AUC. Reverting changes.
Training on augumented user 124104 48/50 current_auc = 0.5688259109311742
User 124104 AUC after training: 0.5748987854251013
User 124104 improves AUC. Keeping the model.
Training on augumented user 58139 49/50 current_auc = 0.5748987854251013
User 58139 AUC after training: 0.5708502024291499
User 58139 does not improve AUC. Reverting changes.
[2024-12-02 18:58:46.328447] start test user 17136 148/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:46.750816] start test user 17136 148/568 recall augumented users by random, augumented_users = [50984, 26372, 115308, 83028, 105685, 71868, 17805, 14042, 129018, 6508, 83160, 124702, 102407, 12220, 37170, 13114, 20436, 108591, 82092, 58986, 22336, 138219, 43528, 82940, 110819, 76679, 76972, 104133, 55727, 49447, 13761, 2252, 33854, 91833, 64621, 35382, 19418, 127628, 34456, 23753, 15466, 31152, 128822, 27940, 48166, 89033, 95804, 11420, 80532, 103847]
[2024-12-02 18:58:46.765475] user = 17136 Cloud 148/568
[2024-12-02 18:58:46.785894] user = 17136 Local 148/568
[2024-12-02 18:58:46.869913] user = 17136 Local+ 148/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:49.408051] user = 17136 MPDA- 148/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7276134122287968
Training on augumented user 50984 0/50 current_auc = 0.7276134122287968
User 50984 AUC after training: 0.7276134122287968
User 50984 does not improve AUC. Reverting changes.
Training on augumented user 26372 1/50 current_auc = 0.7276134122287968
User 26372 AUC after training: 0.7272189349112426
User 26372 does not improve AUC. Reverting changes.
Training on augumented user 115308 2/50 current_auc = 0.7276134122287968
User 115308 AUC after training: 0.7276134122287968
User 115308 does not improve AUC. Reverting changes.
Training on augumented user 83028 3/50 current_auc = 0.7276134122287968
User 83028 AUC after training: 0.7280078895463511
User 83028 improves AUC. Keeping the model.
Training on augumented user 105685 4/50 current_auc = 0.7280078895463511
User 105685 AUC after training: 0.7272189349112426
User 105685 does not improve AUC. Reverting changes.
Training on augumented user 71868 5/50 current_auc = 0.7280078895463511
User 71868 AUC after training: 0.7291913214990138
User 71868 improves AUC. Keeping the model.
Training on augumented user 17805 6/50 current_auc = 0.7291913214990138
User 17805 AUC after training: 0.7289940828402367
User 17805 does not improve AUC. Reverting changes.
Training on augumented user 14042 7/50 current_auc = 0.7291913214990138
User 14042 AUC after training: 0.7291913214990138
User 14042 does not improve AUC. Reverting changes.
Training on augumented user 129018 8/50 current_auc = 0.7291913214990138
User 129018 AUC after training: 0.7272189349112426
User 129018 does not improve AUC. Reverting changes.
Training on augumented user 6508 9/50 current_auc = 0.7291913214990138
User 6508 AUC after training: 0.7291913214990138
User 6508 does not improve AUC. Reverting changes.
Training on augumented user 83160 10/50 current_auc = 0.7291913214990138
User 83160 AUC after training: 0.7280078895463511
User 83160 does not improve AUC. Reverting changes.
Training on augumented user 124702 11/50 current_auc = 0.7291913214990138
User 124702 AUC after training: 0.7287968441814596
User 124702 does not improve AUC. Reverting changes.
Training on augumented user 102407 12/50 current_auc = 0.7291913214990138
User 102407 AUC after training: 0.7284023668639052
User 102407 does not improve AUC. Reverting changes.
Training on augumented user 12220 13/50 current_auc = 0.7291913214990138
User 12220 AUC after training: 0.7272189349112426
User 12220 does not improve AUC. Reverting changes.
Training on augumented user 37170 14/50 current_auc = 0.7291913214990138
User 37170 AUC after training: 0.7289940828402367
User 37170 does not improve AUC. Reverting changes.
Training on augumented user 13114 15/50 current_auc = 0.7291913214990138
User 13114 AUC after training: 0.7287968441814596
User 13114 does not improve AUC. Reverting changes.
Training on augumented user 20436 16/50 current_auc = 0.7291913214990138
User 20436 AUC after training: 0.7278106508875739
User 20436 does not improve AUC. Reverting changes.
Training on augumented user 108591 17/50 current_auc = 0.7291913214990138
User 108591 AUC after training: 0.7291913214990138
User 108591 does not improve AUC. Reverting changes.
Training on augumented user 82092 18/50 current_auc = 0.7291913214990138
User 82092 AUC after training: 0.7284023668639054
User 82092 does not improve AUC. Reverting changes.
Training on augumented user 58986 19/50 current_auc = 0.7291913214990138
User 58986 AUC after training: 0.7280078895463511
User 58986 does not improve AUC. Reverting changes.
Training on augumented user 22336 20/50 current_auc = 0.7291913214990138
User 22336 AUC after training: 0.7291913214990138
User 22336 does not improve AUC. Reverting changes.
Training on augumented user 138219 21/50 current_auc = 0.7291913214990138
User 138219 AUC after training: 0.7305719921104536
User 138219 improves AUC. Keeping the model.
Training on augumented user 43528 22/50 current_auc = 0.7305719921104536
User 43528 AUC after training: 0.7297830374753451
User 43528 does not improve AUC. Reverting changes.
Training on augumented user 82940 23/50 current_auc = 0.7305719921104536
User 82940 AUC after training: 0.7297830374753451
User 82940 does not improve AUC. Reverting changes.
Training on augumented user 110819 24/50 current_auc = 0.7305719921104536
User 110819 AUC after training: 0.729585798816568
User 110819 does not improve AUC. Reverting changes.
Training on augumented user 76679 25/50 current_auc = 0.7305719921104536
User 76679 AUC after training: 0.7305719921104536
User 76679 does not improve AUC. Reverting changes.
Training on augumented user 76972 26/50 current_auc = 0.7305719921104536
User 76972 AUC after training: 0.7285996055226824
User 76972 does not improve AUC. Reverting changes.
Training on augumented user 104133 27/50 current_auc = 0.7305719921104536
User 104133 AUC after training: 0.7301775147928995
User 104133 does not improve AUC. Reverting changes.
Training on augumented user 55727 28/50 current_auc = 0.7305719921104536
User 55727 AUC after training: 0.7309664694280078
User 55727 improves AUC. Keeping the model.
Training on augumented user 49447 29/50 current_auc = 0.7309664694280078
User 49447 AUC after training: 0.7299802761341223
User 49447 does not improve AUC. Reverting changes.
Training on augumented user 13761 30/50 current_auc = 0.7309664694280078
User 13761 AUC after training: 0.7291913214990138
User 13761 does not improve AUC. Reverting changes.
Training on augumented user 2252 31/50 current_auc = 0.7309664694280078
User 2252 AUC after training: 0.7299802761341223
User 2252 does not improve AUC. Reverting changes.
Training on augumented user 33854 32/50 current_auc = 0.7309664694280078
User 33854 AUC after training: 0.7276134122287969
User 33854 does not improve AUC. Reverting changes.
Training on augumented user 91833 33/50 current_auc = 0.7309664694280078
User 91833 AUC after training: 0.7303747534516766
User 91833 does not improve AUC. Reverting changes.
Training on augumented user 64621 34/50 current_auc = 0.7309664694280078
User 64621 AUC after training: 0.7285996055226824
User 64621 does not improve AUC. Reverting changes.
Training on augumented user 35382 35/50 current_auc = 0.7309664694280078
User 35382 AUC after training: 0.7307692307692308
User 35382 does not improve AUC. Reverting changes.
Training on augumented user 19418 36/50 current_auc = 0.7309664694280078
User 19418 AUC after training: 0.7305719921104536
User 19418 does not improve AUC. Reverting changes.
Training on augumented user 127628 37/50 current_auc = 0.7309664694280078
User 127628 AUC after training: 0.7299802761341223
User 127628 does not improve AUC. Reverting changes.
Training on augumented user 34456 38/50 current_auc = 0.7309664694280078
User 34456 AUC after training: 0.7313609467455622
User 34456 improves AUC. Keeping the model.
Training on augumented user 23753 39/50 current_auc = 0.7313609467455622
User 23753 AUC after training: 0.7266272189349112
User 23753 does not improve AUC. Reverting changes.
Training on augumented user 15466 40/50 current_auc = 0.7313609467455622
User 15466 AUC after training: 0.7285996055226824
User 15466 does not improve AUC. Reverting changes.
Training on augumented user 31152 41/50 current_auc = 0.7313609467455622
User 31152 AUC after training: 0.7280078895463511
User 31152 does not improve AUC. Reverting changes.
Training on augumented user 128822 42/50 current_auc = 0.7313609467455622
User 128822 AUC after training: 0.7301775147928994
User 128822 does not improve AUC. Reverting changes.
Training on augumented user 27940 43/50 current_auc = 0.7313609467455622
User 27940 AUC after training: 0.7301775147928994
User 27940 does not improve AUC. Reverting changes.
Training on augumented user 48166 44/50 current_auc = 0.7313609467455622
User 48166 AUC after training: 0.7305719921104536
User 48166 does not improve AUC. Reverting changes.
Training on augumented user 89033 45/50 current_auc = 0.7313609467455622
User 89033 AUC after training: 0.7289940828402367
User 89033 does not improve AUC. Reverting changes.
Training on augumented user 95804 46/50 current_auc = 0.7313609467455622
User 95804 AUC after training: 0.7282051282051282
User 95804 does not improve AUC. Reverting changes.
Training on augumented user 11420 47/50 current_auc = 0.7313609467455622
User 11420 AUC after training: 0.7299802761341223
User 11420 does not improve AUC. Reverting changes.
Training on augumented user 80532 48/50 current_auc = 0.7313609467455622
User 80532 AUC after training: 0.7297830374753451
User 80532 does not improve AUC. Reverting changes.
Training on augumented user 103847 49/50 current_auc = 0.7313609467455622
User 103847 AUC after training: 0.7297830374753452
User 103847 does not improve AUC. Reverting changes.
[2024-12-02 18:59:22.313979] start test user 17163 149/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:22.751848] start test user 17163 149/568 recall augumented users by random, augumented_users = [35342, 48270, 79460, 125893, 92862, 52266, 130738, 127122, 3171, 91022, 98763, 82930, 21738, 106833, 3473, 103917, 1156, 7873, 124101, 116252, 115322, 89491, 46511, 11354, 24438, 34979, 108862, 113784, 115059, 125423, 114012, 35660, 83962, 108795, 45056, 94471, 86721, 31943, 18550, 92351, 39376, 39910, 1435, 87541, 1081, 73468, 117868, 77986, 45351, 6589]
[2024-12-02 18:59:22.767261] user = 17163 Cloud 149/568
[2024-12-02 18:59:22.785229] user = 17163 Local 149/568
[2024-12-02 18:59:22.900565] user = 17163 Local+ 149/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:25.721323] user = 17163 MPDA- 149/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6019896193771627
Training on augumented user 35342 0/50 current_auc = 0.6019896193771627
User 35342 AUC after training: 0.6040657439446367
User 35342 improves AUC. Keeping the model.
Training on augumented user 48270 1/50 current_auc = 0.6040657439446367
User 48270 AUC after training: 0.6051038062283737
User 48270 improves AUC. Keeping the model.
Training on augumented user 79460 2/50 current_auc = 0.6051038062283737
User 79460 AUC after training: 0.6025951557093426
User 79460 does not improve AUC. Reverting changes.
Training on augumented user 125893 3/50 current_auc = 0.6051038062283737
User 125893 AUC after training: 0.6051038062283737
User 125893 does not improve AUC. Reverting changes.
Training on augumented user 92862 4/50 current_auc = 0.6051038062283737
User 92862 AUC after training: 0.605363321799308
User 92862 improves AUC. Keeping the model.
Training on augumented user 52266 5/50 current_auc = 0.605363321799308
User 52266 AUC after training: 0.6034602076124568
User 52266 does not improve AUC. Reverting changes.
Training on augumented user 130738 6/50 current_auc = 0.605363321799308
User 130738 AUC after training: 0.6051903114186851
User 130738 does not improve AUC. Reverting changes.
Training on augumented user 127122 7/50 current_auc = 0.605363321799308
User 127122 AUC after training: 0.6072664359861591
User 127122 improves AUC. Keeping the model.
Training on augumented user 3171 8/50 current_auc = 0.6072664359861591
User 3171 AUC after training: 0.6073529411764705
User 3171 improves AUC. Keeping the model.
Training on augumented user 91022 9/50 current_auc = 0.6073529411764705
User 91022 AUC after training: 0.6059688581314878
User 91022 does not improve AUC. Reverting changes.
Training on augumented user 98763 10/50 current_auc = 0.6073529411764705
User 98763 AUC after training: 0.6059688581314879
User 98763 does not improve AUC. Reverting changes.
Training on augumented user 82930 11/50 current_auc = 0.6073529411764705
User 82930 AUC after training: 0.6070069204152249
User 82930 does not improve AUC. Reverting changes.
Training on augumented user 21738 12/50 current_auc = 0.6073529411764705
User 21738 AUC after training: 0.6075259515570933
User 21738 improves AUC. Keeping the model.
Training on augumented user 106833 13/50 current_auc = 0.6075259515570933
User 106833 AUC after training: 0.6084775086505191
User 106833 improves AUC. Keeping the model.
Training on augumented user 3473 14/50 current_auc = 0.6084775086505191
User 3473 AUC after training: 0.6078719723183391
User 3473 does not improve AUC. Reverting changes.
Training on augumented user 103917 15/50 current_auc = 0.6084775086505191
User 103917 AUC after training: 0.6081314878892734
User 103917 does not improve AUC. Reverting changes.
Training on augumented user 1156 16/50 current_auc = 0.6084775086505191
User 1156 AUC after training: 0.6083910034602076
User 1156 does not improve AUC. Reverting changes.
Training on augumented user 7873 17/50 current_auc = 0.6084775086505191
User 7873 AUC after training: 0.6087370242214533
User 7873 improves AUC. Keeping the model.
Training on augumented user 124101 18/50 current_auc = 0.6087370242214533
User 124101 AUC after training: 0.6087370242214533
User 124101 does not improve AUC. Reverting changes.
Training on augumented user 116252 19/50 current_auc = 0.6087370242214533
User 116252 AUC after training: 0.6086505190311419
User 116252 does not improve AUC. Reverting changes.
Training on augumented user 115322 20/50 current_auc = 0.6087370242214533
User 115322 AUC after training: 0.6086505190311419
User 115322 does not improve AUC. Reverting changes.
Training on augumented user 89491 21/50 current_auc = 0.6087370242214533
User 89491 AUC after training: 0.6086505190311419
User 89491 does not improve AUC. Reverting changes.
Training on augumented user 46511 22/50 current_auc = 0.6087370242214533
User 46511 AUC after training: 0.6091695501730103
User 46511 improves AUC. Keeping the model.
Training on augumented user 11354 23/50 current_auc = 0.6091695501730103
User 11354 AUC after training: 0.6089965397923875
User 11354 does not improve AUC. Reverting changes.
Training on augumented user 24438 24/50 current_auc = 0.6091695501730103
User 24438 AUC after training: 0.6093425605536332
User 24438 improves AUC. Keeping the model.
Training on augumented user 34979 25/50 current_auc = 0.6093425605536332
User 34979 AUC after training: 0.6056228373702423
User 34979 does not improve AUC. Reverting changes.
Training on augumented user 108862 26/50 current_auc = 0.6093425605536332
User 108862 AUC after training: 0.6055363321799309
User 108862 does not improve AUC. Reverting changes.
Training on augumented user 113784 27/50 current_auc = 0.6093425605536332
User 113784 AUC after training: 0.6086505190311419
User 113784 does not improve AUC. Reverting changes.
Training on augumented user 115059 28/50 current_auc = 0.6093425605536332
User 115059 AUC after training: 0.6103806228373703
User 115059 improves AUC. Keeping the model.
Training on augumented user 125423 29/50 current_auc = 0.6103806228373703
User 125423 AUC after training: 0.6103806228373703
User 125423 does not improve AUC. Reverting changes.
Training on augumented user 114012 30/50 current_auc = 0.6103806228373703
User 114012 AUC after training: 0.6100346020761246
User 114012 does not improve AUC. Reverting changes.
Training on augumented user 35660 31/50 current_auc = 0.6103806228373703
User 35660 AUC after training: 0.610726643598616
User 35660 improves AUC. Keeping the model.
Training on augumented user 83962 32/50 current_auc = 0.610726643598616
User 83962 AUC after training: 0.6108996539792387
User 83962 improves AUC. Keeping the model.
Training on augumented user 108795 33/50 current_auc = 0.6108996539792387
User 108795 AUC after training: 0.6100346020761246
User 108795 does not improve AUC. Reverting changes.
Training on augumented user 45056 34/50 current_auc = 0.6108996539792387
User 45056 AUC after training: 0.6115916955017301
User 45056 improves AUC. Keeping the model.
Training on augumented user 94471 35/50 current_auc = 0.6115916955017301
User 94471 AUC after training: 0.6115916955017301
User 94471 does not improve AUC. Reverting changes.
Training on augumented user 86721 36/50 current_auc = 0.6115916955017301
User 86721 AUC after training: 0.6114186851211073
User 86721 does not improve AUC. Reverting changes.
Training on augumented user 31943 37/50 current_auc = 0.6115916955017301
User 31943 AUC after training: 0.6122837370242215
User 31943 improves AUC. Keeping the model.
Training on augumented user 18550 38/50 current_auc = 0.6122837370242215
User 18550 AUC after training: 0.6124567474048442
User 18550 improves AUC. Keeping the model.
Training on augumented user 92351 39/50 current_auc = 0.6124567474048442
User 92351 AUC after training: 0.6129757785467128
User 92351 improves AUC. Keeping the model.
Training on augumented user 39376 40/50 current_auc = 0.6129757785467128
User 39376 AUC after training: 0.6133217993079585
User 39376 improves AUC. Keeping the model.
Training on augumented user 39910 41/50 current_auc = 0.6133217993079585
User 39910 AUC after training: 0.6121107266435987
User 39910 does not improve AUC. Reverting changes.
Training on augumented user 1435 42/50 current_auc = 0.6133217993079585
User 1435 AUC after training: 0.6140138408304499
User 1435 improves AUC. Keeping the model.
Training on augumented user 87541 43/50 current_auc = 0.6140138408304499
User 87541 AUC after training: 0.6140138408304499
User 87541 does not improve AUC. Reverting changes.
Training on augumented user 1081 44/50 current_auc = 0.6140138408304499
User 1081 AUC after training: 0.6122837370242215
User 1081 does not improve AUC. Reverting changes.
Training on augumented user 73468 45/50 current_auc = 0.6140138408304499
User 73468 AUC after training: 0.6133217993079586
User 73468 does not improve AUC. Reverting changes.
Training on augumented user 117868 46/50 current_auc = 0.6140138408304499
User 117868 AUC after training: 0.613840830449827
User 117868 does not improve AUC. Reverting changes.
Training on augumented user 77986 47/50 current_auc = 0.6140138408304499
User 77986 AUC after training: 0.6129757785467128
User 77986 does not improve AUC. Reverting changes.
Training on augumented user 45351 48/50 current_auc = 0.6140138408304499
User 45351 AUC after training: 0.6145328719723184
User 45351 improves AUC. Keeping the model.
Training on augumented user 6589 49/50 current_auc = 0.6145328719723184
User 6589 AUC after training: 0.614878892733564
User 6589 improves AUC. Keeping the model.
[2024-12-02 18:59:57.642153] start test user 17176 150/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:58.101590] start test user 17176 150/568 recall augumented users by random, augumented_users = [107067, 37212, 64374, 112782, 88820, 9662, 7151, 62646, 1578, 82739, 48011, 19602, 117969, 17535, 19660, 21172, 1275, 57756, 17903, 119334, 82940, 18517, 29783, 8429, 1674, 111144, 11219, 60764, 57470, 53839, 94353, 131935, 27006, 65667, 93905, 114513, 69767, 78123, 112526, 66408, 28303, 77130, 60603, 38293, 10002, 9750, 18573, 40766, 86672, 109562]
[2024-12-02 18:59:58.118396] user = 17176 Cloud 150/568
[2024-12-02 18:59:58.221863] user = 17176 Local 150/568
[2024-12-02 18:59:58.828068] user = 17176 Local+ 150/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:04.428902] user = 17176 MPDA- 150/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.647271849348141
Training on augumented user 107067 0/50 current_auc = 0.647271849348141
User 107067 AUC after training: 0.6473171173346209
User 107067 improves AUC. Keeping the model.
Training on augumented user 37212 1/50 current_auc = 0.6473171173346209
User 37212 AUC after training: 0.6471360453887012
User 37212 does not improve AUC. Reverting changes.
Training on augumented user 64374 2/50 current_auc = 0.6473171173346209
User 64374 AUC after training: 0.647317117334621
User 64374 improves AUC. Keeping the model.
Training on augumented user 112782 3/50 current_auc = 0.647317117334621
User 112782 AUC after training: 0.6470002414292612
User 112782 does not improve AUC. Reverting changes.
Training on augumented user 88820 4/50 current_auc = 0.647317117334621
User 88820 AUC after training: 0.649716320618059
User 88820 improves AUC. Keeping the model.
Training on augumented user 9662 5/50 current_auc = 0.649716320618059
User 9662 AUC after training: 0.650229357798165
User 9662 improves AUC. Keeping the model.
Training on augumented user 7151 6/50 current_auc = 0.650229357798165
User 7151 AUC after training: 0.6500784645098986
User 7151 does not improve AUC. Reverting changes.
Training on augumented user 62646 7/50 current_auc = 0.650229357798165
User 62646 AUC after training: 0.6501690004828584
User 62646 does not improve AUC. Reverting changes.
Training on augumented user 1578 8/50 current_auc = 0.650229357798165
User 1578 AUC after training: 0.6496559633027523
User 1578 does not improve AUC. Reverting changes.
Training on augumented user 82739 9/50 current_auc = 0.650229357798165
User 82739 AUC after training: 0.6498672139063254
User 82739 does not improve AUC. Reverting changes.
Training on augumented user 48011 10/50 current_auc = 0.650229357798165
User 48011 AUC after training: 0.6497464992757123
User 48011 does not improve AUC. Reverting changes.
Training on augumented user 19602 11/50 current_auc = 0.650229357798165
User 19602 AUC after training: 0.6496408739739257
User 19602 does not improve AUC. Reverting changes.
Training on augumented user 117969 12/50 current_auc = 0.650229357798165
User 117969 AUC after training: 0.6504406084017382
User 117969 improves AUC. Keeping the model.
Training on augumented user 17535 13/50 current_auc = 0.6504406084017382
User 17535 AUC after training: 0.650319893771125
User 17535 does not improve AUC. Reverting changes.
Training on augumented user 19660 14/50 current_auc = 0.6504406084017382
User 19660 AUC after training: 0.650229357798165
User 19660 does not improve AUC. Reverting changes.
Training on augumented user 21172 15/50 current_auc = 0.6504406084017382
User 21172 AUC after training: 0.6503500724287784
User 21172 does not improve AUC. Reverting changes.
Training on augumented user 1275 16/50 current_auc = 0.6504406084017382
User 1275 AUC after training: 0.6502293577981652
User 1275 does not improve AUC. Reverting changes.
Training on augumented user 57756 17/50 current_auc = 0.6504406084017382
User 57756 AUC after training: 0.6502293577981652
User 57756 does not improve AUC. Reverting changes.
Training on augumented user 17903 18/50 current_auc = 0.6504406084017382
User 17903 AUC after training: 0.6501690004828584
User 17903 does not improve AUC. Reverting changes.
Training on augumented user 119334 19/50 current_auc = 0.6504406084017382
User 119334 AUC after training: 0.6503500724287783
User 119334 does not improve AUC. Reverting changes.
Training on augumented user 82940 20/50 current_auc = 0.6504406084017382
User 82940 AUC after training: 0.6498370352486721
User 82940 does not improve AUC. Reverting changes.
Training on augumented user 18517 21/50 current_auc = 0.6504406084017382
User 18517 AUC after training: 0.6500482858522452
User 18517 does not improve AUC. Reverting changes.
Training on augumented user 29783 22/50 current_auc = 0.6504406084017382
User 29783 AUC after training: 0.6490825688073395
User 29783 does not improve AUC. Reverting changes.
Training on augumented user 8429 23/50 current_auc = 0.6504406084017382
User 8429 AUC after training: 0.649927571221632
User 8429 does not improve AUC. Reverting changes.
Training on augumented user 1674 24/50 current_auc = 0.6504406084017382
User 1674 AUC after training: 0.6497464992757123
User 1674 does not improve AUC. Reverting changes.
Training on augumented user 111144 25/50 current_auc = 0.6504406084017382
User 111144 AUC after training: 0.6502595364558184
User 111144 does not improve AUC. Reverting changes.
Training on augumented user 11219 26/50 current_auc = 0.6504406084017382
User 11219 AUC after training: 0.6500181071945921
User 11219 does not improve AUC. Reverting changes.
Training on augumented user 60764 27/50 current_auc = 0.6504406084017382
User 60764 AUC after training: 0.6500482858522453
User 60764 does not improve AUC. Reverting changes.
Training on augumented user 57470 28/50 current_auc = 0.6504406084017382
User 57470 AUC after training: 0.6502595364558184
User 57470 does not improve AUC. Reverting changes.
Training on augumented user 53839 29/50 current_auc = 0.6504406084017382
User 53839 AUC after training: 0.649625784645099
User 53839 does not improve AUC. Reverting changes.
Training on augumented user 94353 30/50 current_auc = 0.6504406084017382
User 94353 AUC after training: 0.6505613230323515
User 94353 improves AUC. Keeping the model.
Training on augumented user 131935 31/50 current_auc = 0.6505613230323515
User 131935 AUC after training: 0.6505311443746983
User 131935 does not improve AUC. Reverting changes.
Training on augumented user 27006 32/50 current_auc = 0.6505613230323515
User 27006 AUC after training: 0.6505009657170449
User 27006 does not improve AUC. Reverting changes.
Training on augumented user 65667 33/50 current_auc = 0.6505613230323515
User 65667 AUC after training: 0.6502595364558184
User 65667 does not improve AUC. Reverting changes.
Training on augumented user 93905 34/50 current_auc = 0.6505613230323515
User 93905 AUC after training: 0.6499879285369388
User 93905 does not improve AUC. Reverting changes.
Training on augumented user 114513 35/50 current_auc = 0.6505613230323515
User 114513 AUC after training: 0.650500965717045
User 114513 does not improve AUC. Reverting changes.
Training on augumented user 69767 36/50 current_auc = 0.6505613230323515
User 69767 AUC after training: 0.6502595364558185
User 69767 does not improve AUC. Reverting changes.
Training on augumented user 78123 37/50 current_auc = 0.6505613230323515
User 78123 AUC after training: 0.6500784645098985
User 78123 does not improve AUC. Reverting changes.
Training on augumented user 112526 38/50 current_auc = 0.6505613230323515
User 112526 AUC after training: 0.6503802510864316
User 112526 does not improve AUC. Reverting changes.
Training on augumented user 66408 39/50 current_auc = 0.6505613230323515
User 66408 AUC after training: 0.6499577498792853
User 66408 does not improve AUC. Reverting changes.
Training on augumented user 28303 40/50 current_auc = 0.6505613230323515
User 28303 AUC after training: 0.6505613230323516
User 28303 improves AUC. Keeping the model.
Training on augumented user 77130 41/50 current_auc = 0.6505613230323516
User 77130 AUC after training: 0.650712216320618
User 77130 improves AUC. Keeping the model.
Training on augumented user 60603 42/50 current_auc = 0.650712216320618
User 60603 AUC after training: 0.650802752293578
User 60603 improves AUC. Keeping the model.
Training on augumented user 38293 43/50 current_auc = 0.650802752293578
User 38293 AUC after training: 0.6499124818928055
User 38293 does not improve AUC. Reverting changes.
Training on augumented user 10002 44/50 current_auc = 0.650802752293578
User 10002 AUC after training: 0.6506518590053114
User 10002 does not improve AUC. Reverting changes.
Training on augumented user 9750 45/50 current_auc = 0.650802752293578
User 9750 AUC after training: 0.650018107194592
User 9750 does not improve AUC. Reverting changes.
Training on augumented user 18573 46/50 current_auc = 0.650802752293578
User 18573 AUC after training: 0.6510441815548045
User 18573 improves AUC. Keeping the model.
Training on augumented user 40766 47/50 current_auc = 0.6510441815548045
User 40766 AUC after training: 0.6507423949782714
User 40766 does not improve AUC. Reverting changes.
Training on augumented user 86672 48/50 current_auc = 0.6510441815548045
User 86672 AUC after training: 0.6494748913568325
User 86672 does not improve AUC. Reverting changes.
Training on augumented user 109562 49/50 current_auc = 0.6510441815548045
User 109562 AUC after training: 0.6507423949782714
User 109562 does not improve AUC. Reverting changes.
[2024-12-02 19:00:32.649608] start test user 17179 151/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:33.246485] start test user 17179 151/568 recall augumented users by random, augumented_users = [83389, 130392, 23602, 10068, 121421, 8467, 28875, 59999, 91131, 86564, 27859, 51948, 104795, 53912, 56034, 63444, 111537, 85099, 31752, 3170, 128085, 135761, 46594, 2850, 77381, 10823, 37465, 97760, 114343, 39303, 109541, 10774, 33983, 55166, 40247, 128002, 108403, 122680, 111515, 56967, 37530, 122163, 80663, 78968, 13401, 77361, 46558, 3472, 67871, 137412]
[2024-12-02 19:00:33.260952] user = 17179 Cloud 151/568
[2024-12-02 19:00:33.278084] user = 17179 Local 151/568
[2024-12-02 19:00:33.342990] user = 17179 Local+ 151/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:35.775541] user = 17179 MPDA- 151/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.63648753894081
Training on augumented user 83389 0/50 current_auc = 0.63648753894081
User 83389 AUC after training: 0.6357087227414331
User 83389 does not improve AUC. Reverting changes.
Training on augumented user 130392 1/50 current_auc = 0.63648753894081
User 130392 AUC after training: 0.6368769470404985
User 130392 improves AUC. Keeping the model.
Training on augumented user 23602 2/50 current_auc = 0.6368769470404985
User 23602 AUC after training: 0.63648753894081
User 23602 does not improve AUC. Reverting changes.
Training on augumented user 10068 3/50 current_auc = 0.6368769470404985
User 10068 AUC after training: 0.6376557632398754
User 10068 improves AUC. Keeping the model.
Training on augumented user 121421 4/50 current_auc = 0.6376557632398754
User 121421 AUC after training: 0.63648753894081
User 121421 does not improve AUC. Reverting changes.
Training on augumented user 8467 5/50 current_auc = 0.6376557632398754
User 8467 AUC after training: 0.6357087227414331
User 8467 does not improve AUC. Reverting changes.
Training on augumented user 28875 6/50 current_auc = 0.6376557632398754
User 28875 AUC after training: 0.6368769470404985
User 28875 does not improve AUC. Reverting changes.
Training on augumented user 59999 7/50 current_auc = 0.6376557632398754
User 59999 AUC after training: 0.6376557632398754
User 59999 does not improve AUC. Reverting changes.
Training on augumented user 91131 8/50 current_auc = 0.6376557632398754
User 91131 AUC after training: 0.6368769470404985
User 91131 does not improve AUC. Reverting changes.
Training on augumented user 86564 9/50 current_auc = 0.6376557632398754
User 86564 AUC after training: 0.6376557632398755
User 86564 improves AUC. Keeping the model.
Training on augumented user 27859 10/50 current_auc = 0.6376557632398755
User 27859 AUC after training: 0.6372663551401869
User 27859 does not improve AUC. Reverting changes.
Training on augumented user 51948 11/50 current_auc = 0.6376557632398755
User 51948 AUC after training: 0.6368769470404986
User 51948 does not improve AUC. Reverting changes.
Training on augumented user 104795 12/50 current_auc = 0.6376557632398755
User 104795 AUC after training: 0.6380451713395638
User 104795 improves AUC. Keeping the model.
Training on augumented user 53912 13/50 current_auc = 0.6380451713395638
User 53912 AUC after training: 0.6388239875389408
User 53912 improves AUC. Keeping the model.
Training on augumented user 56034 14/50 current_auc = 0.6388239875389408
User 56034 AUC after training: 0.6380451713395638
User 56034 does not improve AUC. Reverting changes.
Training on augumented user 63444 15/50 current_auc = 0.6388239875389408
User 63444 AUC after training: 0.6407710280373832
User 63444 improves AUC. Keeping the model.
Training on augumented user 111537 16/50 current_auc = 0.6407710280373832
User 111537 AUC after training: 0.6403816199376948
User 111537 does not improve AUC. Reverting changes.
Training on augumented user 85099 17/50 current_auc = 0.6407710280373832
User 85099 AUC after training: 0.6403816199376947
User 85099 does not improve AUC. Reverting changes.
Training on augumented user 31752 18/50 current_auc = 0.6407710280373832
User 31752 AUC after training: 0.6403816199376948
User 31752 does not improve AUC. Reverting changes.
Training on augumented user 3170 19/50 current_auc = 0.6407710280373832
User 3170 AUC after training: 0.6399922118380064
User 3170 does not improve AUC. Reverting changes.
Training on augumented user 128085 20/50 current_auc = 0.6407710280373832
User 128085 AUC after training: 0.6392133956386292
User 128085 does not improve AUC. Reverting changes.
Training on augumented user 135761 21/50 current_auc = 0.6407710280373832
User 135761 AUC after training: 0.6407710280373832
User 135761 does not improve AUC. Reverting changes.
Training on augumented user 46594 22/50 current_auc = 0.6407710280373832
User 46594 AUC after training: 0.6399922118380063
User 46594 does not improve AUC. Reverting changes.
Training on augumented user 2850 23/50 current_auc = 0.6407710280373832
User 2850 AUC after training: 0.6399922118380063
User 2850 does not improve AUC. Reverting changes.
Training on augumented user 77381 24/50 current_auc = 0.6407710280373832
User 77381 AUC after training: 0.6403816199376948
User 77381 does not improve AUC. Reverting changes.
Training on augumented user 10823 25/50 current_auc = 0.6407710280373832
User 10823 AUC after training: 0.6403816199376947
User 10823 does not improve AUC. Reverting changes.
Training on augumented user 37465 26/50 current_auc = 0.6407710280373832
User 37465 AUC after training: 0.6396028037383178
User 37465 does not improve AUC. Reverting changes.
Training on augumented user 97760 27/50 current_auc = 0.6407710280373832
User 97760 AUC after training: 0.638045171339564
User 97760 does not improve AUC. Reverting changes.
Training on augumented user 114343 28/50 current_auc = 0.6407710280373832
User 114343 AUC after training: 0.6407710280373832
User 114343 does not improve AUC. Reverting changes.
Training on augumented user 39303 29/50 current_auc = 0.6407710280373832
User 39303 AUC after training: 0.6399922118380063
User 39303 does not improve AUC. Reverting changes.
Training on augumented user 109541 30/50 current_auc = 0.6407710280373832
User 109541 AUC after training: 0.6407710280373832
User 109541 does not improve AUC. Reverting changes.
Training on augumented user 10774 31/50 current_auc = 0.6407710280373832
User 10774 AUC after training: 0.6392133956386293
User 10774 does not improve AUC. Reverting changes.
Training on augumented user 33983 32/50 current_auc = 0.6407710280373832
User 33983 AUC after training: 0.6411604361370716
User 33983 improves AUC. Keeping the model.
Training on augumented user 55166 33/50 current_auc = 0.6411604361370716
User 55166 AUC after training: 0.6403816199376947
User 55166 does not improve AUC. Reverting changes.
Training on augumented user 40247 34/50 current_auc = 0.6411604361370716
User 40247 AUC after training: 0.6407710280373833
User 40247 does not improve AUC. Reverting changes.
Training on augumented user 128002 35/50 current_auc = 0.6411604361370716
User 128002 AUC after training: 0.6399922118380063
User 128002 does not improve AUC. Reverting changes.
Training on augumented user 108403 36/50 current_auc = 0.6411604361370716
User 108403 AUC after training: 0.6392133956386293
User 108403 does not improve AUC. Reverting changes.
Training on augumented user 122680 37/50 current_auc = 0.6411604361370716
User 122680 AUC after training: 0.6407710280373833
User 122680 does not improve AUC. Reverting changes.
Training on augumented user 111515 38/50 current_auc = 0.6411604361370716
User 111515 AUC after training: 0.6399922118380064
User 111515 does not improve AUC. Reverting changes.
Training on augumented user 56967 39/50 current_auc = 0.6411604361370716
User 56967 AUC after training: 0.6403816199376948
User 56967 does not improve AUC. Reverting changes.
Training on augumented user 37530 40/50 current_auc = 0.6411604361370716
User 37530 AUC after training: 0.6376557632398754
User 37530 does not improve AUC. Reverting changes.
Training on augumented user 122163 41/50 current_auc = 0.6411604361370716
User 122163 AUC after training: 0.6399922118380063
User 122163 does not improve AUC. Reverting changes.
Training on augumented user 80663 42/50 current_auc = 0.6411604361370716
User 80663 AUC after training: 0.6407710280373833
User 80663 does not improve AUC. Reverting changes.
Training on augumented user 78968 43/50 current_auc = 0.6411604361370716
User 78968 AUC after training: 0.6407710280373833
User 78968 does not improve AUC. Reverting changes.
Training on augumented user 13401 44/50 current_auc = 0.6411604361370716
User 13401 AUC after training: 0.6403816199376946
User 13401 does not improve AUC. Reverting changes.
Training on augumented user 77361 45/50 current_auc = 0.6411604361370716
User 77361 AUC after training: 0.6403816199376948
User 77361 does not improve AUC. Reverting changes.
Training on augumented user 46558 46/50 current_auc = 0.6411604361370716
User 46558 AUC after training: 0.6407710280373832
User 46558 does not improve AUC. Reverting changes.
Training on augumented user 3472 47/50 current_auc = 0.6411604361370716
User 3472 AUC after training: 0.6407710280373832
User 3472 does not improve AUC. Reverting changes.
Training on augumented user 67871 48/50 current_auc = 0.6411604361370716
User 67871 AUC after training: 0.6399922118380064
User 67871 does not improve AUC. Reverting changes.
Training on augumented user 137412 49/50 current_auc = 0.6411604361370716
User 137412 AUC after training: 0.6396028037383177
User 137412 does not improve AUC. Reverting changes.
[2024-12-02 19:01:10.045335] start test user 17242 152/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:10.480665] start test user 17242 152/568 recall augumented users by random, augumented_users = [14095, 119165, 70713, 45263, 50816, 15320, 127373, 71333, 71326, 65722, 108148, 135490, 60177, 32075, 104171, 22534, 25634, 73817, 29586, 83098, 132561, 76089, 20048, 7158, 92380, 43633, 134518, 80424, 55164, 28893, 85681, 84005, 49142, 35724, 17846, 15791, 81533, 100930, 117378, 130952, 54989, 66973, 123294, 111435, 12963, 2344, 98510, 117005, 119916, 119235]
[2024-12-02 19:01:10.495812] user = 17242 Cloud 152/568
[2024-12-02 19:01:10.517870] user = 17242 Local 152/568
[2024-12-02 19:01:10.613761] user = 17242 Local+ 152/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:14.680148] user = 17242 MPDA- 152/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.761904761904762
Training on augumented user 14095 0/50 current_auc = 0.761904761904762
User 14095 AUC after training: 0.761904761904762
User 14095 does not improve AUC. Reverting changes.
Training on augumented user 119165 1/50 current_auc = 0.761904761904762
User 119165 AUC after training: 0.761904761904762
User 119165 does not improve AUC. Reverting changes.
Training on augumented user 70713 2/50 current_auc = 0.761904761904762
User 70713 AUC after training: 0.761904761904762
User 70713 does not improve AUC. Reverting changes.
Training on augumented user 45263 3/50 current_auc = 0.761904761904762
User 45263 AUC after training: 0.761904761904762
User 45263 does not improve AUC. Reverting changes.
Training on augumented user 50816 4/50 current_auc = 0.761904761904762
User 50816 AUC after training: 0.761904761904762
User 50816 does not improve AUC. Reverting changes.
Training on augumented user 15320 5/50 current_auc = 0.761904761904762
User 15320 AUC after training: 0.761904761904762
User 15320 does not improve AUC. Reverting changes.
Training on augumented user 127373 6/50 current_auc = 0.761904761904762
User 127373 AUC after training: 0.761904761904762
User 127373 does not improve AUC. Reverting changes.
Training on augumented user 71333 7/50 current_auc = 0.761904761904762
User 71333 AUC after training: 0.761904761904762
User 71333 does not improve AUC. Reverting changes.
Training on augumented user 71326 8/50 current_auc = 0.761904761904762
User 71326 AUC after training: 0.761904761904762
User 71326 does not improve AUC. Reverting changes.
Training on augumented user 65722 9/50 current_auc = 0.761904761904762
User 65722 AUC after training: 0.761904761904762
User 65722 does not improve AUC. Reverting changes.
Training on augumented user 108148 10/50 current_auc = 0.761904761904762
User 108148 AUC after training: 0.761904761904762
User 108148 does not improve AUC. Reverting changes.
Training on augumented user 135490 11/50 current_auc = 0.761904761904762
User 135490 AUC after training: 0.761904761904762
User 135490 does not improve AUC. Reverting changes.
Training on augumented user 60177 12/50 current_auc = 0.761904761904762
User 60177 AUC after training: 0.761904761904762
User 60177 does not improve AUC. Reverting changes.
Training on augumented user 32075 13/50 current_auc = 0.761904761904762
User 32075 AUC after training: 0.761904761904762
User 32075 does not improve AUC. Reverting changes.
Training on augumented user 104171 14/50 current_auc = 0.761904761904762
User 104171 AUC after training: 0.761904761904762
User 104171 does not improve AUC. Reverting changes.
Training on augumented user 22534 15/50 current_auc = 0.761904761904762
User 22534 AUC after training: 0.761904761904762
User 22534 does not improve AUC. Reverting changes.
Training on augumented user 25634 16/50 current_auc = 0.761904761904762
User 25634 AUC after training: 0.761904761904762
User 25634 does not improve AUC. Reverting changes.
Training on augumented user 73817 17/50 current_auc = 0.761904761904762
User 73817 AUC after training: 0.761904761904762
User 73817 does not improve AUC. Reverting changes.
Training on augumented user 29586 18/50 current_auc = 0.761904761904762
User 29586 AUC after training: 0.761904761904762
User 29586 does not improve AUC. Reverting changes.
Training on augumented user 83098 19/50 current_auc = 0.761904761904762
User 83098 AUC after training: 0.761904761904762
User 83098 does not improve AUC. Reverting changes.
Training on augumented user 132561 20/50 current_auc = 0.761904761904762
User 132561 AUC after training: 0.761904761904762
User 132561 does not improve AUC. Reverting changes.
Training on augumented user 76089 21/50 current_auc = 0.761904761904762
User 76089 AUC after training: 0.761904761904762
User 76089 does not improve AUC. Reverting changes.
Training on augumented user 20048 22/50 current_auc = 0.761904761904762
User 20048 AUC after training: 0.761904761904762
User 20048 does not improve AUC. Reverting changes.
Training on augumented user 7158 23/50 current_auc = 0.761904761904762
User 7158 AUC after training: 0.761904761904762
User 7158 does not improve AUC. Reverting changes.
Training on augumented user 92380 24/50 current_auc = 0.761904761904762
User 92380 AUC after training: 0.761904761904762
User 92380 does not improve AUC. Reverting changes.
Training on augumented user 43633 25/50 current_auc = 0.761904761904762
User 43633 AUC after training: 0.761904761904762
User 43633 does not improve AUC. Reverting changes.
Training on augumented user 134518 26/50 current_auc = 0.761904761904762
User 134518 AUC after training: 0.761904761904762
User 134518 does not improve AUC. Reverting changes.
Training on augumented user 80424 27/50 current_auc = 0.761904761904762
User 80424 AUC after training: 0.761904761904762
User 80424 does not improve AUC. Reverting changes.
Training on augumented user 55164 28/50 current_auc = 0.761904761904762
User 55164 AUC after training: 0.761904761904762
User 55164 does not improve AUC. Reverting changes.
Training on augumented user 28893 29/50 current_auc = 0.761904761904762
User 28893 AUC after training: 0.761904761904762
User 28893 does not improve AUC. Reverting changes.
Training on augumented user 85681 30/50 current_auc = 0.761904761904762
User 85681 AUC after training: 0.761904761904762
User 85681 does not improve AUC. Reverting changes.
Training on augumented user 84005 31/50 current_auc = 0.761904761904762
User 84005 AUC after training: 0.761904761904762
User 84005 does not improve AUC. Reverting changes.
Training on augumented user 49142 32/50 current_auc = 0.761904761904762
User 49142 AUC after training: 0.761904761904762
User 49142 does not improve AUC. Reverting changes.
Training on augumented user 35724 33/50 current_auc = 0.761904761904762
User 35724 AUC after training: 0.761904761904762
User 35724 does not improve AUC. Reverting changes.
Training on augumented user 17846 34/50 current_auc = 0.761904761904762
User 17846 AUC after training: 0.761904761904762
User 17846 does not improve AUC. Reverting changes.
Training on augumented user 15791 35/50 current_auc = 0.761904761904762
User 15791 AUC after training: 0.761904761904762
User 15791 does not improve AUC. Reverting changes.
Training on augumented user 81533 36/50 current_auc = 0.761904761904762
User 81533 AUC after training: 0.761904761904762
User 81533 does not improve AUC. Reverting changes.
Training on augumented user 100930 37/50 current_auc = 0.761904761904762
User 100930 AUC after training: 0.761904761904762
User 100930 does not improve AUC. Reverting changes.
Training on augumented user 117378 38/50 current_auc = 0.761904761904762
User 117378 AUC after training: 0.761904761904762
User 117378 does not improve AUC. Reverting changes.
Training on augumented user 130952 39/50 current_auc = 0.761904761904762
User 130952 AUC after training: 0.761904761904762
User 130952 does not improve AUC. Reverting changes.
Training on augumented user 54989 40/50 current_auc = 0.761904761904762
User 54989 AUC after training: 0.761904761904762
User 54989 does not improve AUC. Reverting changes.
Training on augumented user 66973 41/50 current_auc = 0.761904761904762
User 66973 AUC after training: 0.761904761904762
User 66973 does not improve AUC. Reverting changes.
Training on augumented user 123294 42/50 current_auc = 0.761904761904762
User 123294 AUC after training: 0.761904761904762
User 123294 does not improve AUC. Reverting changes.
Training on augumented user 111435 43/50 current_auc = 0.761904761904762
User 111435 AUC after training: 0.761904761904762
User 111435 does not improve AUC. Reverting changes.
Training on augumented user 12963 44/50 current_auc = 0.761904761904762
User 12963 AUC after training: 0.761904761904762
User 12963 does not improve AUC. Reverting changes.
Training on augumented user 2344 45/50 current_auc = 0.761904761904762
User 2344 AUC after training: 0.761904761904762
User 2344 does not improve AUC. Reverting changes.
Training on augumented user 98510 46/50 current_auc = 0.761904761904762
User 98510 AUC after training: 0.761904761904762
User 98510 does not improve AUC. Reverting changes.
Training on augumented user 117005 47/50 current_auc = 0.761904761904762
User 117005 AUC after training: 0.761904761904762
User 117005 does not improve AUC. Reverting changes.
Training on augumented user 119916 48/50 current_auc = 0.761904761904762
User 119916 AUC after training: 0.761904761904762
User 119916 does not improve AUC. Reverting changes.
Training on augumented user 119235 49/50 current_auc = 0.761904761904762
User 119235 AUC after training: 0.761904761904762
User 119235 does not improve AUC. Reverting changes.
[2024-12-02 19:01:45.227686] start test user 17301 153/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:46.039880] start test user 17301 153/568 recall augumented users by random, augumented_users = [50520, 35057, 114784, 7156, 112376, 94635, 108389, 83652, 86819, 1921, 31176, 68958, 66139, 69734, 108959, 39884, 97510, 133810, 51554, 3360, 110947, 126259, 34199, 38968, 56360, 86181, 102766, 1030, 24396, 93088, 46061, 122480, 135496, 119506, 88028, 54022, 105130, 115511, 67773, 51090, 37615, 100275, 70934, 55556, 121384, 2763, 41905, 112299, 122818, 129815]
[2024-12-02 19:01:46.054324] user = 17301 Cloud 153/568
[2024-12-02 19:01:46.063554] user = 17301 Local 153/568
[2024-12-02 19:01:46.090763] user = 17301 Local+ 153/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:48.812857] user = 17301 MPDA- 153/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6857142857142857
Training on augumented user 50520 0/50 current_auc = 0.6857142857142857
User 50520 AUC after training: 0.6857142857142857
User 50520 does not improve AUC. Reverting changes.
Training on augumented user 35057 1/50 current_auc = 0.6857142857142857
User 35057 AUC after training: 0.6857142857142857
User 35057 does not improve AUC. Reverting changes.
Training on augumented user 114784 2/50 current_auc = 0.6857142857142857
User 114784 AUC after training: 0.6857142857142857
User 114784 does not improve AUC. Reverting changes.
Training on augumented user 7156 3/50 current_auc = 0.6857142857142857
User 7156 AUC after training: 0.6857142857142857
User 7156 does not improve AUC. Reverting changes.
Training on augumented user 112376 4/50 current_auc = 0.6857142857142857
User 112376 AUC after training: 0.6857142857142857
User 112376 does not improve AUC. Reverting changes.
Training on augumented user 94635 5/50 current_auc = 0.6857142857142857
User 94635 AUC after training: 0.6714285714285714
User 94635 does not improve AUC. Reverting changes.
Training on augumented user 108389 6/50 current_auc = 0.6857142857142857
User 108389 AUC after training: 0.6714285714285714
User 108389 does not improve AUC. Reverting changes.
Training on augumented user 83652 7/50 current_auc = 0.6857142857142857
User 83652 AUC after training: 0.6571428571428571
User 83652 does not improve AUC. Reverting changes.
Training on augumented user 86819 8/50 current_auc = 0.6857142857142857
User 86819 AUC after training: 0.6857142857142857
User 86819 does not improve AUC. Reverting changes.
Training on augumented user 1921 9/50 current_auc = 0.6857142857142857
User 1921 AUC after training: 0.6857142857142857
User 1921 does not improve AUC. Reverting changes.
Training on augumented user 31176 10/50 current_auc = 0.6857142857142857
User 31176 AUC after training: 0.6714285714285715
User 31176 does not improve AUC. Reverting changes.
Training on augumented user 68958 11/50 current_auc = 0.6857142857142857
User 68958 AUC after training: 0.6857142857142857
User 68958 does not improve AUC. Reverting changes.
Training on augumented user 66139 12/50 current_auc = 0.6857142857142857
User 66139 AUC after training: 0.6857142857142857
User 66139 does not improve AUC. Reverting changes.
Training on augumented user 69734 13/50 current_auc = 0.6857142857142857
User 69734 AUC after training: 0.6857142857142857
User 69734 does not improve AUC. Reverting changes.
Training on augumented user 108959 14/50 current_auc = 0.6857142857142857
User 108959 AUC after training: 0.6857142857142857
User 108959 does not improve AUC. Reverting changes.
Training on augumented user 39884 15/50 current_auc = 0.6857142857142857
User 39884 AUC after training: 0.6857142857142857
User 39884 does not improve AUC. Reverting changes.
Training on augumented user 97510 16/50 current_auc = 0.6857142857142857
User 97510 AUC after training: 0.6857142857142857
User 97510 does not improve AUC. Reverting changes.
Training on augumented user 133810 17/50 current_auc = 0.6857142857142857
User 133810 AUC after training: 0.6857142857142857
User 133810 does not improve AUC. Reverting changes.
Training on augumented user 51554 18/50 current_auc = 0.6857142857142857
User 51554 AUC after training: 0.6857142857142857
User 51554 does not improve AUC. Reverting changes.
Training on augumented user 3360 19/50 current_auc = 0.6857142857142857
User 3360 AUC after training: 0.6857142857142857
User 3360 does not improve AUC. Reverting changes.
Training on augumented user 110947 20/50 current_auc = 0.6857142857142857
User 110947 AUC after training: 0.6714285714285714
User 110947 does not improve AUC. Reverting changes.
Training on augumented user 126259 21/50 current_auc = 0.6857142857142857
User 126259 AUC after training: 0.6857142857142857
User 126259 does not improve AUC. Reverting changes.
Training on augumented user 34199 22/50 current_auc = 0.6857142857142857
User 34199 AUC after training: 0.6857142857142857
User 34199 does not improve AUC. Reverting changes.
Training on augumented user 38968 23/50 current_auc = 0.6857142857142857
User 38968 AUC after training: 0.6857142857142857
User 38968 does not improve AUC. Reverting changes.
Training on augumented user 56360 24/50 current_auc = 0.6857142857142857
User 56360 AUC after training: 0.6857142857142857
User 56360 does not improve AUC. Reverting changes.
Training on augumented user 86181 25/50 current_auc = 0.6857142857142857
User 86181 AUC after training: 0.6857142857142857
User 86181 does not improve AUC. Reverting changes.
Training on augumented user 102766 26/50 current_auc = 0.6857142857142857
User 102766 AUC after training: 0.6857142857142857
User 102766 does not improve AUC. Reverting changes.
Training on augumented user 1030 27/50 current_auc = 0.6857142857142857
User 1030 AUC after training: 0.6714285714285715
User 1030 does not improve AUC. Reverting changes.
Training on augumented user 24396 28/50 current_auc = 0.6857142857142857
User 24396 AUC after training: 0.6857142857142857
User 24396 does not improve AUC. Reverting changes.
Training on augumented user 93088 29/50 current_auc = 0.6857142857142857
User 93088 AUC after training: 0.6857142857142857
User 93088 does not improve AUC. Reverting changes.
Training on augumented user 46061 30/50 current_auc = 0.6857142857142857
User 46061 AUC after training: 0.6857142857142857
User 46061 does not improve AUC. Reverting changes.
Training on augumented user 122480 31/50 current_auc = 0.6857142857142857
User 122480 AUC after training: 0.6857142857142857
User 122480 does not improve AUC. Reverting changes.
Training on augumented user 135496 32/50 current_auc = 0.6857142857142857
User 135496 AUC after training: 0.6857142857142857
User 135496 does not improve AUC. Reverting changes.
Training on augumented user 119506 33/50 current_auc = 0.6857142857142857
User 119506 AUC after training: 0.6714285714285714
User 119506 does not improve AUC. Reverting changes.
Training on augumented user 88028 34/50 current_auc = 0.6857142857142857
User 88028 AUC after training: 0.6857142857142857
User 88028 does not improve AUC. Reverting changes.
Training on augumented user 54022 35/50 current_auc = 0.6857142857142857
User 54022 AUC after training: 0.6857142857142857
User 54022 does not improve AUC. Reverting changes.
Training on augumented user 105130 36/50 current_auc = 0.6857142857142857
User 105130 AUC after training: 0.6857142857142857
User 105130 does not improve AUC. Reverting changes.
Training on augumented user 115511 37/50 current_auc = 0.6857142857142857
User 115511 AUC after training: 0.6857142857142857
User 115511 does not improve AUC. Reverting changes.
Training on augumented user 67773 38/50 current_auc = 0.6857142857142857
User 67773 AUC after training: 0.6857142857142857
User 67773 does not improve AUC. Reverting changes.
Training on augumented user 51090 39/50 current_auc = 0.6857142857142857
User 51090 AUC after training: 0.6857142857142857
User 51090 does not improve AUC. Reverting changes.
Training on augumented user 37615 40/50 current_auc = 0.6857142857142857
User 37615 AUC after training: 0.6857142857142857
User 37615 does not improve AUC. Reverting changes.
Training on augumented user 100275 41/50 current_auc = 0.6857142857142857
User 100275 AUC after training: 0.6857142857142857
User 100275 does not improve AUC. Reverting changes.
Training on augumented user 70934 42/50 current_auc = 0.6857142857142857
User 70934 AUC after training: 0.6857142857142857
User 70934 does not improve AUC. Reverting changes.
Training on augumented user 55556 43/50 current_auc = 0.6857142857142857
User 55556 AUC after training: 0.6714285714285714
User 55556 does not improve AUC. Reverting changes.
Training on augumented user 121384 44/50 current_auc = 0.6857142857142857
User 121384 AUC after training: 0.6857142857142857
User 121384 does not improve AUC. Reverting changes.
Training on augumented user 2763 45/50 current_auc = 0.6857142857142857
User 2763 AUC after training: 0.6857142857142857
User 2763 does not improve AUC. Reverting changes.
Training on augumented user 41905 46/50 current_auc = 0.6857142857142857
User 41905 AUC after training: 0.6857142857142857
User 41905 does not improve AUC. Reverting changes.
Training on augumented user 112299 47/50 current_auc = 0.6857142857142857
User 112299 AUC after training: 0.6857142857142857
User 112299 does not improve AUC. Reverting changes.
Training on augumented user 122818 48/50 current_auc = 0.6857142857142857
User 122818 AUC after training: 0.6714285714285714
User 122818 does not improve AUC. Reverting changes.
Training on augumented user 129815 49/50 current_auc = 0.6857142857142857
User 129815 AUC after training: 0.6857142857142857
User 129815 does not improve AUC. Reverting changes.
[2024-12-02 19:02:16.468692] start test user 17304 154/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:16.914929] start test user 17304 154/568 recall augumented users by random, augumented_users = [56138, 112020, 87411, 24076, 60641, 57165, 111325, 45925, 111678, 109188, 17373, 137551, 59415, 137987, 125901, 67944, 81682, 58481, 27211, 77208, 125765, 72742, 80929, 2398, 2127, 112093, 19189, 120257, 67552, 3060, 20655, 37905, 84911, 21889, 105241, 61977, 58233, 19307, 57880, 73013, 58927, 85468, 21101, 133898, 58751, 30986, 88316, 55750, 15539, 84963]
[2024-12-02 19:02:16.929593] user = 17304 Cloud 154/568
[2024-12-02 19:02:16.951694] user = 17304 Local 154/568
[2024-12-02 19:02:17.012957] user = 17304 Local+ 154/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:19.372059] user = 17304 MPDA- 154/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5555555555555556
Training on augumented user 56138 0/50 current_auc = 0.5555555555555556
User 56138 AUC after training: 0.5555555555555556
User 56138 does not improve AUC. Reverting changes.
Training on augumented user 112020 1/50 current_auc = 0.5555555555555556
User 112020 AUC after training: 0.5555555555555556
User 112020 does not improve AUC. Reverting changes.
Training on augumented user 87411 2/50 current_auc = 0.5555555555555556
User 87411 AUC after training: 0.5555555555555556
User 87411 does not improve AUC. Reverting changes.
Training on augumented user 24076 3/50 current_auc = 0.5555555555555556
User 24076 AUC after training: 0.5555555555555556
User 24076 does not improve AUC. Reverting changes.
Training on augumented user 60641 4/50 current_auc = 0.5555555555555556
User 60641 AUC after training: 0.5555555555555556
User 60641 does not improve AUC. Reverting changes.
Training on augumented user 57165 5/50 current_auc = 0.5555555555555556
User 57165 AUC after training: 0.5555555555555556
User 57165 does not improve AUC. Reverting changes.
Training on augumented user 111325 6/50 current_auc = 0.5555555555555556
User 111325 AUC after training: 0.5555555555555556
User 111325 does not improve AUC. Reverting changes.
Training on augumented user 45925 7/50 current_auc = 0.5555555555555556
User 45925 AUC after training: 0.5555555555555556
User 45925 does not improve AUC. Reverting changes.
Training on augumented user 111678 8/50 current_auc = 0.5555555555555556
User 111678 AUC after training: 0.5555555555555556
User 111678 does not improve AUC. Reverting changes.
Training on augumented user 109188 9/50 current_auc = 0.5555555555555556
User 109188 AUC after training: 0.5555555555555556
User 109188 does not improve AUC. Reverting changes.
Training on augumented user 17373 10/50 current_auc = 0.5555555555555556
User 17373 AUC after training: 0.5555555555555556
User 17373 does not improve AUC. Reverting changes.
Training on augumented user 137551 11/50 current_auc = 0.5555555555555556
User 137551 AUC after training: 0.5555555555555556
User 137551 does not improve AUC. Reverting changes.
Training on augumented user 59415 12/50 current_auc = 0.5555555555555556
User 59415 AUC after training: 0.5555555555555556
User 59415 does not improve AUC. Reverting changes.
Training on augumented user 137987 13/50 current_auc = 0.5555555555555556
User 137987 AUC after training: 0.5555555555555556
User 137987 does not improve AUC. Reverting changes.
Training on augumented user 125901 14/50 current_auc = 0.5555555555555556
User 125901 AUC after training: 0.5555555555555556
User 125901 does not improve AUC. Reverting changes.
Training on augumented user 67944 15/50 current_auc = 0.5555555555555556
User 67944 AUC after training: 0.5555555555555556
User 67944 does not improve AUC. Reverting changes.
Training on augumented user 81682 16/50 current_auc = 0.5555555555555556
User 81682 AUC after training: 0.5555555555555556
User 81682 does not improve AUC. Reverting changes.
Training on augumented user 58481 17/50 current_auc = 0.5555555555555556
User 58481 AUC after training: 0.5555555555555556
User 58481 does not improve AUC. Reverting changes.
Training on augumented user 27211 18/50 current_auc = 0.5555555555555556
User 27211 AUC after training: 0.5555555555555556
User 27211 does not improve AUC. Reverting changes.
Training on augumented user 77208 19/50 current_auc = 0.5555555555555556
User 77208 AUC after training: 0.5555555555555556
User 77208 does not improve AUC. Reverting changes.
Training on augumented user 125765 20/50 current_auc = 0.5555555555555556
User 125765 AUC after training: 0.5555555555555556
User 125765 does not improve AUC. Reverting changes.
Training on augumented user 72742 21/50 current_auc = 0.5555555555555556
User 72742 AUC after training: 0.5555555555555556
User 72742 does not improve AUC. Reverting changes.
Training on augumented user 80929 22/50 current_auc = 0.5555555555555556
User 80929 AUC after training: 0.5555555555555556
User 80929 does not improve AUC. Reverting changes.
Training on augumented user 2398 23/50 current_auc = 0.5555555555555556
User 2398 AUC after training: 0.5873015873015874
User 2398 improves AUC. Keeping the model.
Training on augumented user 2127 24/50 current_auc = 0.5873015873015874
User 2127 AUC after training: 0.5873015873015874
User 2127 does not improve AUC. Reverting changes.
Training on augumented user 112093 25/50 current_auc = 0.5873015873015874
User 112093 AUC after training: 0.5714285714285715
User 112093 does not improve AUC. Reverting changes.
Training on augumented user 19189 26/50 current_auc = 0.5873015873015874
User 19189 AUC after training: 0.5873015873015874
User 19189 does not improve AUC. Reverting changes.
Training on augumented user 120257 27/50 current_auc = 0.5873015873015874
User 120257 AUC after training: 0.5714285714285715
User 120257 does not improve AUC. Reverting changes.
Training on augumented user 67552 28/50 current_auc = 0.5873015873015874
User 67552 AUC after training: 0.5714285714285715
User 67552 does not improve AUC. Reverting changes.
Training on augumented user 3060 29/50 current_auc = 0.5873015873015874
User 3060 AUC after training: 0.5555555555555556
User 3060 does not improve AUC. Reverting changes.
Training on augumented user 20655 30/50 current_auc = 0.5873015873015874
User 20655 AUC after training: 0.5873015873015874
User 20655 does not improve AUC. Reverting changes.
Training on augumented user 37905 31/50 current_auc = 0.5873015873015874
User 37905 AUC after training: 0.5873015873015874
User 37905 does not improve AUC. Reverting changes.
Training on augumented user 84911 32/50 current_auc = 0.5873015873015874
User 84911 AUC after training: 0.5714285714285715
User 84911 does not improve AUC. Reverting changes.
Training on augumented user 21889 33/50 current_auc = 0.5873015873015874
User 21889 AUC after training: 0.5873015873015874
User 21889 does not improve AUC. Reverting changes.
Training on augumented user 105241 34/50 current_auc = 0.5873015873015874
User 105241 AUC after training: 0.5873015873015874
User 105241 does not improve AUC. Reverting changes.
Training on augumented user 61977 35/50 current_auc = 0.5873015873015874
User 61977 AUC after training: 0.5714285714285715
User 61977 does not improve AUC. Reverting changes.
Training on augumented user 58233 36/50 current_auc = 0.5873015873015874
User 58233 AUC after training: 0.5555555555555556
User 58233 does not improve AUC. Reverting changes.
Training on augumented user 19307 37/50 current_auc = 0.5873015873015874
User 19307 AUC after training: 0.5873015873015874
User 19307 does not improve AUC. Reverting changes.
Training on augumented user 57880 38/50 current_auc = 0.5873015873015874
User 57880 AUC after training: 0.5714285714285715
User 57880 does not improve AUC. Reverting changes.
Training on augumented user 73013 39/50 current_auc = 0.5873015873015874
User 73013 AUC after training: 0.5873015873015874
User 73013 does not improve AUC. Reverting changes.
Training on augumented user 58927 40/50 current_auc = 0.5873015873015874
User 58927 AUC after training: 0.5714285714285715
User 58927 does not improve AUC. Reverting changes.
Training on augumented user 85468 41/50 current_auc = 0.5873015873015874
User 85468 AUC after training: 0.5714285714285715
User 85468 does not improve AUC. Reverting changes.
Training on augumented user 21101 42/50 current_auc = 0.5873015873015874
User 21101 AUC after training: 0.5873015873015874
User 21101 does not improve AUC. Reverting changes.
Training on augumented user 133898 43/50 current_auc = 0.5873015873015874
User 133898 AUC after training: 0.5555555555555556
User 133898 does not improve AUC. Reverting changes.
Training on augumented user 58751 44/50 current_auc = 0.5873015873015874
User 58751 AUC after training: 0.5714285714285715
User 58751 does not improve AUC. Reverting changes.
Training on augumented user 30986 45/50 current_auc = 0.5873015873015874
User 30986 AUC after training: 0.5714285714285715
User 30986 does not improve AUC. Reverting changes.
Training on augumented user 88316 46/50 current_auc = 0.5873015873015874
User 88316 AUC after training: 0.5714285714285715
User 88316 does not improve AUC. Reverting changes.
Training on augumented user 55750 47/50 current_auc = 0.5873015873015874
User 55750 AUC after training: 0.5873015873015874
User 55750 does not improve AUC. Reverting changes.
Training on augumented user 15539 48/50 current_auc = 0.5873015873015874
User 15539 AUC after training: 0.5873015873015874
User 15539 does not improve AUC. Reverting changes.
Training on augumented user 84963 49/50 current_auc = 0.5873015873015874
User 84963 AUC after training: 0.5873015873015874
User 84963 does not improve AUC. Reverting changes.
[2024-12-02 19:02:45.284871] start test user 17318 155/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:45.889488] start test user 17318 155/568 recall augumented users by random, augumented_users = [41066, 18600, 24817, 75996, 113798, 100213, 111948, 40604, 77349, 51333, 31780, 88206, 100723, 1748, 66680, 65459, 86317, 4740, 12801, 132090, 132317, 48237, 73323, 67588, 44863, 12045, 43328, 111423, 41614, 51250, 98809, 120457, 30100, 69252, 43124, 70958, 26566, 112581, 59721, 70974, 14638, 54819, 6070, 111152, 103302, 133260, 9958, 58060, 38144, 72774]
[2024-12-02 19:02:45.942630] user = 17318 Cloud 155/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:02:45.949278] user = 17318 Local 155/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:02:46.035164] user = 17318 Local+ 155/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:02:48.994237] user = 17318 MPDA- 155/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 41066 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41066 AUC after training: 0.5
User 41066 does not improve AUC. Reverting changes.
Training on augumented user 18600 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18600 AUC after training: 0.5
User 18600 does not improve AUC. Reverting changes.
Training on augumented user 24817 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24817 AUC after training: 0.5
User 24817 does not improve AUC. Reverting changes.
Training on augumented user 75996 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75996 AUC after training: 0.5
User 75996 does not improve AUC. Reverting changes.
Training on augumented user 113798 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113798 AUC after training: 0.5
User 113798 does not improve AUC. Reverting changes.
Training on augumented user 100213 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100213 AUC after training: 0.5
User 100213 does not improve AUC. Reverting changes.
Training on augumented user 111948 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111948 AUC after training: 0.5
User 111948 does not improve AUC. Reverting changes.
Training on augumented user 40604 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40604 AUC after training: 0.5
User 40604 does not improve AUC. Reverting changes.
Training on augumented user 77349 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77349 AUC after training: 0.5
User 77349 does not improve AUC. Reverting changes.
Training on augumented user 51333 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51333 AUC after training: 0.5
User 51333 does not improve AUC. Reverting changes.
Training on augumented user 31780 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31780 AUC after training: 0.5
User 31780 does not improve AUC. Reverting changes.
Training on augumented user 88206 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88206 AUC after training: 0.5
User 88206 does not improve AUC. Reverting changes.
Training on augumented user 100723 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100723 AUC after training: 0.5
User 100723 does not improve AUC. Reverting changes.
Training on augumented user 1748 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1748 AUC after training: 0.5
User 1748 does not improve AUC. Reverting changes.
Training on augumented user 66680 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66680 AUC after training: 0.5
User 66680 does not improve AUC. Reverting changes.
Training on augumented user 65459 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65459 AUC after training: 0.5
User 65459 does not improve AUC. Reverting changes.
Training on augumented user 86317 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86317 AUC after training: 0.5
User 86317 does not improve AUC. Reverting changes.
Training on augumented user 4740 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4740 AUC after training: 0.5
User 4740 does not improve AUC. Reverting changes.
Training on augumented user 12801 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12801 AUC after training: 0.5
User 12801 does not improve AUC. Reverting changes.
Training on augumented user 132090 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132090 AUC after training: 0.5
User 132090 does not improve AUC. Reverting changes.
Training on augumented user 132317 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132317 AUC after training: 0.5
User 132317 does not improve AUC. Reverting changes.
Training on augumented user 48237 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48237 AUC after training: 0.5
User 48237 does not improve AUC. Reverting changes.
Training on augumented user 73323 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73323 AUC after training: 0.5
User 73323 does not improve AUC. Reverting changes.
Training on augumented user 67588 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67588 AUC after training: 0.5
User 67588 does not improve AUC. Reverting changes.
Training on augumented user 44863 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44863 AUC after training: 0.5
User 44863 does not improve AUC. Reverting changes.
Training on augumented user 12045 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12045 AUC after training: 0.5
User 12045 does not improve AUC. Reverting changes.
Training on augumented user 43328 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43328 AUC after training: 0.5
User 43328 does not improve AUC. Reverting changes.
Training on augumented user 111423 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111423 AUC after training: 0.5
User 111423 does not improve AUC. Reverting changes.
Training on augumented user 41614 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41614 AUC after training: 0.5
User 41614 does not improve AUC. Reverting changes.
Training on augumented user 51250 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51250 AUC after training: 0.5
User 51250 does not improve AUC. Reverting changes.
Training on augumented user 98809 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98809 AUC after training: 0.5
User 98809 does not improve AUC. Reverting changes.
Training on augumented user 120457 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120457 AUC after training: 0.5
User 120457 does not improve AUC. Reverting changes.
Training on augumented user 30100 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30100 AUC after training: 0.5
User 30100 does not improve AUC. Reverting changes.
Training on augumented user 69252 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69252 AUC after training: 0.5
User 69252 does not improve AUC. Reverting changes.
Training on augumented user 43124 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43124 AUC after training: 0.5
User 43124 does not improve AUC. Reverting changes.
Training on augumented user 70958 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70958 AUC after training: 0.5
User 70958 does not improve AUC. Reverting changes.
Training on augumented user 26566 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26566 AUC after training: 0.5
User 26566 does not improve AUC. Reverting changes.
Training on augumented user 112581 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112581 AUC after training: 0.5
User 112581 does not improve AUC. Reverting changes.
Training on augumented user 59721 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59721 AUC after training: 0.5
User 59721 does not improve AUC. Reverting changes.
Training on augumented user 70974 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70974 AUC after training: 0.5
User 70974 does not improve AUC. Reverting changes.
Training on augumented user 14638 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14638 AUC after training: 0.5
User 14638 does not improve AUC. Reverting changes.
Training on augumented user 54819 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54819 AUC after training: 0.5
User 54819 does not improve AUC. Reverting changes.
Training on augumented user 6070 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6070 AUC after training: 0.5
User 6070 does not improve AUC. Reverting changes.
Training on augumented user 111152 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111152 AUC after training: 0.5
User 111152 does not improve AUC. Reverting changes.
Training on augumented user 103302 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103302 AUC after training: 0.5
User 103302 does not improve AUC. Reverting changes.
Training on augumented user 133260 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133260 AUC after training: 0.5
User 133260 does not improve AUC. Reverting changes.
Training on augumented user 9958 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9958 AUC after training: 0.5
User 9958 does not improve AUC. Reverting changes.
Training on augumented user 58060 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58060 AUC after training: 0.5
User 58060 does not improve AUC. Reverting changes.
Training on augumented user 38144 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38144 AUC after training: 0.5
User 38144 does not improve AUC. Reverting changes.
Training on augumented user 72774 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72774 AUC after training: 0.5
User 72774 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:03:18.832898] start test user 17319 156/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:19.274960] start test user 17319 156/568 recall augumented users by random, augumented_users = [36243, 117777, 39187, 93215, 105675, 39594, 19633, 99896, 22860, 125208, 134596, 18195, 10430, 104905, 65930, 1991, 105403, 79053, 83532, 129569, 65525, 77160, 135374, 11789, 58280, 135922, 35241, 63039, 120338, 77132, 38099, 37965, 49581, 130970, 6785, 37413, 121614, 79829, 58105, 106226, 107007, 20781, 83798, 37998, 21682, 130081, 56834, 129857, 75628, 59671]
[2024-12-02 19:03:19.304967] user = 17319 Cloud 156/568
[2024-12-02 19:03:19.332262] user = 17319 Local 156/568
[2024-12-02 19:03:19.436166] user = 17319 Local+ 156/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:21.969849] user = 17319 MPDA- 156/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5111416361416361
Training on augumented user 36243 0/50 current_auc = 0.5111416361416361
User 36243 AUC after training: 0.5114468864468864
User 36243 improves AUC. Keeping the model.
Training on augumented user 117777 1/50 current_auc = 0.5114468864468864
User 117777 AUC after training: 0.5126678876678877
User 117777 improves AUC. Keeping the model.
Training on augumented user 39187 2/50 current_auc = 0.5126678876678877
User 39187 AUC after training: 0.5137362637362638
User 39187 improves AUC. Keeping the model.
Training on augumented user 93215 3/50 current_auc = 0.5137362637362638
User 93215 AUC after training: 0.5137362637362637
User 93215 does not improve AUC. Reverting changes.
Training on augumented user 105675 4/50 current_auc = 0.5137362637362638
User 105675 AUC after training: 0.5138888888888888
User 105675 improves AUC. Keeping the model.
Training on augumented user 39594 5/50 current_auc = 0.5138888888888888
User 39594 AUC after training: 0.5134310134310134
User 39594 does not improve AUC. Reverting changes.
Training on augumented user 19633 6/50 current_auc = 0.5138888888888888
User 19633 AUC after training: 0.5126678876678876
User 19633 does not improve AUC. Reverting changes.
Training on augumented user 99896 7/50 current_auc = 0.5138888888888888
User 99896 AUC after training: 0.5131257631257631
User 99896 does not improve AUC. Reverting changes.
Training on augumented user 22860 8/50 current_auc = 0.5138888888888888
User 22860 AUC after training: 0.5137362637362637
User 22860 does not improve AUC. Reverting changes.
Training on augumented user 125208 9/50 current_auc = 0.5138888888888888
User 125208 AUC after training: 0.5135836385836385
User 125208 does not improve AUC. Reverting changes.
Training on augumented user 134596 10/50 current_auc = 0.5138888888888888
User 134596 AUC after training: 0.5138888888888888
User 134596 does not improve AUC. Reverting changes.
Training on augumented user 18195 11/50 current_auc = 0.5138888888888888
User 18195 AUC after training: 0.5128205128205128
User 18195 does not improve AUC. Reverting changes.
Training on augumented user 10430 12/50 current_auc = 0.5138888888888888
User 10430 AUC after training: 0.5155677655677656
User 10430 improves AUC. Keeping the model.
Training on augumented user 104905 13/50 current_auc = 0.5155677655677656
User 104905 AUC after training: 0.5152625152625152
User 104905 does not improve AUC. Reverting changes.
Training on augumented user 65930 14/50 current_auc = 0.5155677655677656
User 65930 AUC after training: 0.5149572649572649
User 65930 does not improve AUC. Reverting changes.
Training on augumented user 1991 15/50 current_auc = 0.5155677655677656
User 1991 AUC after training: 0.5151098901098902
User 1991 does not improve AUC. Reverting changes.
Training on augumented user 105403 16/50 current_auc = 0.5155677655677656
User 105403 AUC after training: 0.5155677655677656
User 105403 does not improve AUC. Reverting changes.
Training on augumented user 79053 17/50 current_auc = 0.5155677655677656
User 79053 AUC after training: 0.516025641025641
User 79053 improves AUC. Keeping the model.
Training on augumented user 83532 18/50 current_auc = 0.516025641025641
User 83532 AUC after training: 0.5143467643467643
User 83532 does not improve AUC. Reverting changes.
Training on augumented user 129569 19/50 current_auc = 0.516025641025641
User 129569 AUC after training: 0.5167887667887667
User 129569 improves AUC. Keeping the model.
Training on augumented user 65525 20/50 current_auc = 0.5167887667887667
User 65525 AUC after training: 0.5187728937728937
User 65525 improves AUC. Keeping the model.
Training on augumented user 77160 21/50 current_auc = 0.5187728937728937
User 77160 AUC after training: 0.518925518925519
User 77160 improves AUC. Keeping the model.
Training on augumented user 135374 22/50 current_auc = 0.518925518925519
User 135374 AUC after training: 0.5196886446886446
User 135374 improves AUC. Keeping the model.
Training on augumented user 11789 23/50 current_auc = 0.5196886446886446
User 11789 AUC after training: 0.5169413919413919
User 11789 does not improve AUC. Reverting changes.
Training on augumented user 58280 24/50 current_auc = 0.5196886446886446
User 58280 AUC after training: 0.518925518925519
User 58280 does not improve AUC. Reverting changes.
Training on augumented user 135922 25/50 current_auc = 0.5196886446886446
User 135922 AUC after training: 0.5187728937728937
User 135922 does not improve AUC. Reverting changes.
Training on augumented user 35241 26/50 current_auc = 0.5196886446886446
User 35241 AUC after training: 0.5173992673992674
User 35241 does not improve AUC. Reverting changes.
Training on augumented user 63039 27/50 current_auc = 0.5196886446886446
User 63039 AUC after training: 0.5190781440781441
User 63039 does not improve AUC. Reverting changes.
Training on augumented user 120338 28/50 current_auc = 0.5196886446886446
User 120338 AUC after training: 0.5187728937728937
User 120338 does not improve AUC. Reverting changes.
Training on augumented user 77132 29/50 current_auc = 0.5196886446886446
User 77132 AUC after training: 0.5184676434676434
User 77132 does not improve AUC. Reverting changes.
Training on augumented user 38099 30/50 current_auc = 0.5196886446886446
User 38099 AUC after training: 0.5193833943833944
User 38099 does not improve AUC. Reverting changes.
Training on augumented user 37965 31/50 current_auc = 0.5196886446886446
User 37965 AUC after training: 0.5186202686202687
User 37965 does not improve AUC. Reverting changes.
Training on augumented user 49581 32/50 current_auc = 0.5196886446886446
User 49581 AUC after training: 0.5192307692307692
User 49581 does not improve AUC. Reverting changes.
Training on augumented user 130970 33/50 current_auc = 0.5196886446886446
User 130970 AUC after training: 0.5196886446886447
User 130970 improves AUC. Keeping the model.
Training on augumented user 6785 34/50 current_auc = 0.5196886446886447
User 6785 AUC after training: 0.519078144078144
User 6785 does not improve AUC. Reverting changes.
Training on augumented user 37413 35/50 current_auc = 0.5196886446886447
User 37413 AUC after training: 0.5193833943833943
User 37413 does not improve AUC. Reverting changes.
Training on augumented user 121614 36/50 current_auc = 0.5196886446886447
User 121614 AUC after training: 0.5192307692307692
User 121614 does not improve AUC. Reverting changes.
Training on augumented user 79829 37/50 current_auc = 0.5196886446886447
User 79829 AUC after training: 0.5202991452991452
User 79829 improves AUC. Keeping the model.
Training on augumented user 58105 38/50 current_auc = 0.5202991452991452
User 58105 AUC after training: 0.5201465201465202
User 58105 does not improve AUC. Reverting changes.
Training on augumented user 106226 39/50 current_auc = 0.5202991452991452
User 106226 AUC after training: 0.5201465201465202
User 106226 does not improve AUC. Reverting changes.
Training on augumented user 107007 40/50 current_auc = 0.5202991452991452
User 107007 AUC after training: 0.5192307692307692
User 107007 does not improve AUC. Reverting changes.
Training on augumented user 20781 41/50 current_auc = 0.5202991452991452
User 20781 AUC after training: 0.5206043956043955
User 20781 improves AUC. Keeping the model.
Training on augumented user 83798 42/50 current_auc = 0.5206043956043955
User 83798 AUC after training: 0.5198412698412699
User 83798 does not improve AUC. Reverting changes.
Training on augumented user 37998 43/50 current_auc = 0.5206043956043955
User 37998 AUC after training: 0.5187728937728937
User 37998 does not improve AUC. Reverting changes.
Training on augumented user 21682 44/50 current_auc = 0.5206043956043955
User 21682 AUC after training: 0.5202991452991452
User 21682 does not improve AUC. Reverting changes.
Training on augumented user 130081 45/50 current_auc = 0.5206043956043955
User 130081 AUC after training: 0.5202991452991453
User 130081 does not improve AUC. Reverting changes.
Training on augumented user 56834 46/50 current_auc = 0.5206043956043955
User 56834 AUC after training: 0.5207570207570208
User 56834 improves AUC. Keeping the model.
Training on augumented user 129857 47/50 current_auc = 0.5207570207570208
User 129857 AUC after training: 0.5196886446886446
User 129857 does not improve AUC. Reverting changes.
Training on augumented user 75628 48/50 current_auc = 0.5207570207570208
User 75628 AUC after training: 0.5212148962148963
User 75628 improves AUC. Keeping the model.
Training on augumented user 59671 49/50 current_auc = 0.5212148962148963
User 59671 AUC after training: 0.5222832722832723
User 59671 improves AUC. Keeping the model.
[2024-12-02 19:03:53.417684] start test user 17333 157/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:53.933853] start test user 17333 157/568 recall augumented users by random, augumented_users = [10071, 18828, 47734, 90655, 22334, 22587, 49800, 107105, 64933, 81753, 45471, 35682, 56835, 10718, 78464, 54337, 69257, 59599, 8603, 37413, 62299, 110888, 8239, 91227, 73488, 128572, 121635, 59429, 105628, 69297, 125784, 110233, 4016, 132321, 98965, 54849, 137350, 29220, 126302, 42636, 66238, 44174, 33375, 58699, 4663, 112856, 32879, 8662, 64005, 103783]
[2024-12-02 19:03:53.951602] user = 17333 Cloud 157/568
[2024-12-02 19:03:54.006730] user = 17333 Local 157/568
[2024-12-02 19:03:54.562878] user = 17333 Local+ 157/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:56.791895] user = 17333 MPDA- 157/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.654925800107277
Training on augumented user 10071 0/50 current_auc = 0.654925800107277
User 10071 AUC after training: 0.6544788128017165
User 10071 does not improve AUC. Reverting changes.
Training on augumented user 18828 1/50 current_auc = 0.654925800107277
User 18828 AUC after training: 0.6556409797961738
User 18828 improves AUC. Keeping the model.
Training on augumented user 47734 2/50 current_auc = 0.6556409797961738
User 47734 AUC after training: 0.6555515823350617
User 47734 does not improve AUC. Reverting changes.
Training on augumented user 90655 3/50 current_auc = 0.6556409797961738
User 90655 AUC after training: 0.6560879671017343
User 90655 improves AUC. Keeping the model.
Training on augumented user 22334 4/50 current_auc = 0.6560879671017343
User 22334 AUC after training: 0.6563561594850706
User 22334 improves AUC. Keeping the model.
Training on augumented user 22587 5/50 current_auc = 0.6563561594850706
User 22587 AUC after training: 0.6561773645628464
User 22587 does not improve AUC. Reverting changes.
Training on augumented user 49800 6/50 current_auc = 0.6563561594850706
User 49800 AUC after training: 0.6564455569461828
User 49800 improves AUC. Keeping the model.
Training on augumented user 107105 7/50 current_auc = 0.6564455569461828
User 107105 AUC after training: 0.6564455569461828
User 107105 does not improve AUC. Reverting changes.
Training on augumented user 64933 8/50 current_auc = 0.6564455569461828
User 64933 AUC after training: 0.6567137493295191
User 64933 improves AUC. Keeping the model.
Training on augumented user 81753 9/50 current_auc = 0.6567137493295191
User 81753 AUC after training: 0.6572501340961917
User 81753 improves AUC. Keeping the model.
Training on augumented user 45471 10/50 current_auc = 0.6572501340961917
User 45471 AUC after training: 0.6569819417128553
User 45471 does not improve AUC. Reverting changes.
Training on augumented user 35682 11/50 current_auc = 0.6572501340961917
User 35682 AUC after training: 0.6569819417128554
User 35682 does not improve AUC. Reverting changes.
Training on augumented user 56835 12/50 current_auc = 0.6572501340961917
User 56835 AUC after training: 0.6569819417128554
User 56835 does not improve AUC. Reverting changes.
Training on augumented user 10718 13/50 current_auc = 0.6572501340961917
User 10718 AUC after training: 0.6568031467906312
User 10718 does not improve AUC. Reverting changes.
Training on augumented user 78464 14/50 current_auc = 0.6572501340961917
User 78464 AUC after training: 0.6565349544072948
User 78464 does not improve AUC. Reverting changes.
Training on augumented user 54337 15/50 current_auc = 0.6572501340961917
User 54337 AUC after training: 0.6567137493295191
User 54337 does not improve AUC. Reverting changes.
Training on augumented user 69257 16/50 current_auc = 0.6572501340961917
User 69257 AUC after training: 0.6566243518684068
User 69257 does not improve AUC. Reverting changes.
Training on augumented user 59599 17/50 current_auc = 0.6572501340961917
User 59599 AUC after training: 0.6572501340961917
User 59599 does not improve AUC. Reverting changes.
Training on augumented user 8603 18/50 current_auc = 0.6572501340961917
User 8603 AUC after training: 0.6572501340961917
User 8603 does not improve AUC. Reverting changes.
Training on augumented user 37413 19/50 current_auc = 0.6572501340961917
User 37413 AUC after training: 0.6545235115322725
User 37413 does not improve AUC. Reverting changes.
Training on augumented user 62299 20/50 current_auc = 0.6572501340961917
User 62299 AUC after training: 0.6571607366350796
User 62299 does not improve AUC. Reverting changes.
Training on augumented user 110888 21/50 current_auc = 0.6572501340961917
User 110888 AUC after training: 0.6571607366350796
User 110888 does not improve AUC. Reverting changes.
Training on augumented user 8239 22/50 current_auc = 0.6572501340961917
User 8239 AUC after training: 0.6569819417128553
User 8239 does not improve AUC. Reverting changes.
Training on augumented user 91227 23/50 current_auc = 0.6572501340961917
User 91227 AUC after training: 0.6573395315573038
User 91227 improves AUC. Keeping the model.
Training on augumented user 73488 24/50 current_auc = 0.6573395315573038
User 73488 AUC after training: 0.6571607366350796
User 73488 does not improve AUC. Reverting changes.
Training on augumented user 128572 25/50 current_auc = 0.6573395315573038
User 128572 AUC after training: 0.6573395315573038
User 128572 does not improve AUC. Reverting changes.
Training on augumented user 121635 26/50 current_auc = 0.6573395315573038
User 121635 AUC after training: 0.6567137493295191
User 121635 does not improve AUC. Reverting changes.
Training on augumented user 59429 27/50 current_auc = 0.6573395315573038
User 59429 AUC after training: 0.6572501340961916
User 59429 does not improve AUC. Reverting changes.
Training on augumented user 105628 28/50 current_auc = 0.6573395315573038
User 105628 AUC after training: 0.65760772394064
User 105628 improves AUC. Keeping the model.
Training on augumented user 69297 29/50 current_auc = 0.65760772394064
User 69297 AUC after training: 0.6572501340961917
User 69297 does not improve AUC. Reverting changes.
Training on augumented user 125784 30/50 current_auc = 0.65760772394064
User 125784 AUC after training: 0.6572501340961917
User 125784 does not improve AUC. Reverting changes.
Training on augumented user 110233 31/50 current_auc = 0.65760772394064
User 110233 AUC after training: 0.6574289290184159
User 110233 does not improve AUC. Reverting changes.
Training on augumented user 4016 32/50 current_auc = 0.65760772394064
User 4016 AUC after training: 0.6579653137850885
User 4016 improves AUC. Keeping the model.
Training on augumented user 132321 33/50 current_auc = 0.6579653137850885
User 132321 AUC after training: 0.6560879671017342
User 132321 does not improve AUC. Reverting changes.
Training on augumented user 98965 34/50 current_auc = 0.6579653137850885
User 98965 AUC after training: 0.6578759163239762
User 98965 does not improve AUC. Reverting changes.
Training on augumented user 54849 35/50 current_auc = 0.6579653137850885
User 54849 AUC after training: 0.65760772394064
User 54849 does not improve AUC. Reverting changes.
Training on augumented user 137350 36/50 current_auc = 0.6579653137850885
User 137350 AUC after training: 0.6577865188628642
User 137350 does not improve AUC. Reverting changes.
Training on augumented user 29220 37/50 current_auc = 0.6579653137850885
User 29220 AUC after training: 0.6578759163239764
User 29220 does not improve AUC. Reverting changes.
Training on augumented user 126302 38/50 current_auc = 0.6579653137850885
User 126302 AUC after training: 0.6576971214017522
User 126302 does not improve AUC. Reverting changes.
Training on augumented user 42636 39/50 current_auc = 0.6579653137850885
User 42636 AUC after training: 0.6579653137850885
User 42636 does not improve AUC. Reverting changes.
Training on augumented user 66238 40/50 current_auc = 0.6579653137850885
User 66238 AUC after training: 0.6577865188628642
User 66238 does not improve AUC. Reverting changes.
Training on augumented user 44174 41/50 current_auc = 0.6579653137850885
User 44174 AUC after training: 0.6573395315573037
User 44174 does not improve AUC. Reverting changes.
Training on augumented user 33375 42/50 current_auc = 0.6579653137850885
User 33375 AUC after training: 0.6574289290184159
User 33375 does not improve AUC. Reverting changes.
Training on augumented user 58699 43/50 current_auc = 0.6579653137850885
User 58699 AUC after training: 0.6578759163239764
User 58699 does not improve AUC. Reverting changes.
Training on augumented user 4663 44/50 current_auc = 0.6579653137850885
User 4663 AUC after training: 0.6578759163239762
User 4663 does not improve AUC. Reverting changes.
Training on augumented user 112856 45/50 current_auc = 0.6579653137850885
User 112856 AUC after training: 0.6576077239406402
User 112856 does not improve AUC. Reverting changes.
Training on augumented user 32879 46/50 current_auc = 0.6579653137850885
User 32879 AUC after training: 0.6553727874128376
User 32879 does not improve AUC. Reverting changes.
Training on augumented user 8662 47/50 current_auc = 0.6579653137850885
User 8662 AUC after training: 0.6575183264795279
User 8662 does not improve AUC. Reverting changes.
Training on augumented user 64005 48/50 current_auc = 0.6579653137850885
User 64005 AUC after training: 0.6577865188628643
User 64005 does not improve AUC. Reverting changes.
Training on augumented user 103783 49/50 current_auc = 0.6579653137850885
User 103783 AUC after training: 0.6578759163239764
User 103783 does not improve AUC. Reverting changes.
[2024-12-02 19:04:21.106269] start test user 17348 158/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:21.828461] start test user 17348 158/568 recall augumented users by random, augumented_users = [100108, 112218, 89629, 133931, 80563, 128853, 11741, 40243, 6049, 79240, 16121, 112608, 76965, 85752, 24686, 5356, 8218, 11527, 110312, 113568, 84548, 83357, 63261, 128476, 100586, 103074, 42318, 130203, 61833, 114836, 8551, 78742, 129374, 14322, 30336, 130112, 100270, 89336, 43145, 91631, 125652, 39627, 67687, 93169, 66675, 88796, 14003, 16266, 19427, 89880]
[2024-12-02 19:04:21.843669] user = 17348 Cloud 158/568
[2024-12-02 19:04:21.870530] user = 17348 Local 158/568
[2024-12-02 19:04:22.011807] user = 17348 Local+ 158/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:24.644103] user = 17348 MPDA- 158/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4666666666666667
Training on augumented user 100108 0/50 current_auc = 0.4666666666666667
User 100108 AUC after training: 0.4666666666666667
User 100108 does not improve AUC. Reverting changes.
Training on augumented user 112218 1/50 current_auc = 0.4666666666666667
User 112218 AUC after training: 0.43333333333333335
User 112218 does not improve AUC. Reverting changes.
Training on augumented user 89629 2/50 current_auc = 0.4666666666666667
User 89629 AUC after training: 0.43333333333333335
User 89629 does not improve AUC. Reverting changes.
Training on augumented user 133931 3/50 current_auc = 0.4666666666666667
User 133931 AUC after training: 0.4666666666666667
User 133931 does not improve AUC. Reverting changes.
Training on augumented user 80563 4/50 current_auc = 0.4666666666666667
User 80563 AUC after training: 0.4666666666666667
User 80563 does not improve AUC. Reverting changes.
Training on augumented user 128853 5/50 current_auc = 0.4666666666666667
User 128853 AUC after training: 0.43333333333333335
User 128853 does not improve AUC. Reverting changes.
Training on augumented user 11741 6/50 current_auc = 0.4666666666666667
User 11741 AUC after training: 0.43333333333333335
User 11741 does not improve AUC. Reverting changes.
Training on augumented user 40243 7/50 current_auc = 0.4666666666666667
User 40243 AUC after training: 0.43333333333333335
User 40243 does not improve AUC. Reverting changes.
Training on augumented user 6049 8/50 current_auc = 0.4666666666666667
User 6049 AUC after training: 0.4666666666666667
User 6049 does not improve AUC. Reverting changes.
Training on augumented user 79240 9/50 current_auc = 0.4666666666666667
User 79240 AUC after training: 0.4666666666666667
User 79240 does not improve AUC. Reverting changes.
Training on augumented user 16121 10/50 current_auc = 0.4666666666666667
User 16121 AUC after training: 0.4666666666666667
User 16121 does not improve AUC. Reverting changes.
Training on augumented user 112608 11/50 current_auc = 0.4666666666666667
User 112608 AUC after training: 0.4666666666666667
User 112608 does not improve AUC. Reverting changes.
Training on augumented user 76965 12/50 current_auc = 0.4666666666666667
User 76965 AUC after training: 0.4666666666666667
User 76965 does not improve AUC. Reverting changes.
Training on augumented user 85752 13/50 current_auc = 0.4666666666666667
User 85752 AUC after training: 0.4666666666666667
User 85752 does not improve AUC. Reverting changes.
Training on augumented user 24686 14/50 current_auc = 0.4666666666666667
User 24686 AUC after training: 0.4666666666666667
User 24686 does not improve AUC. Reverting changes.
Training on augumented user 5356 15/50 current_auc = 0.4666666666666667
User 5356 AUC after training: 0.4
User 5356 does not improve AUC. Reverting changes.
Training on augumented user 8218 16/50 current_auc = 0.4666666666666667
User 8218 AUC after training: 0.4
User 8218 does not improve AUC. Reverting changes.
Training on augumented user 11527 17/50 current_auc = 0.4666666666666667
User 11527 AUC after training: 0.43333333333333335
User 11527 does not improve AUC. Reverting changes.
Training on augumented user 110312 18/50 current_auc = 0.4666666666666667
User 110312 AUC after training: 0.43333333333333335
User 110312 does not improve AUC. Reverting changes.
Training on augumented user 113568 19/50 current_auc = 0.4666666666666667
User 113568 AUC after training: 0.4666666666666667
User 113568 does not improve AUC. Reverting changes.
Training on augumented user 84548 20/50 current_auc = 0.4666666666666667
User 84548 AUC after training: 0.4666666666666667
User 84548 does not improve AUC. Reverting changes.
Training on augumented user 83357 21/50 current_auc = 0.4666666666666667
User 83357 AUC after training: 0.4666666666666667
User 83357 does not improve AUC. Reverting changes.
Training on augumented user 63261 22/50 current_auc = 0.4666666666666667
User 63261 AUC after training: 0.4666666666666667
User 63261 does not improve AUC. Reverting changes.
Training on augumented user 128476 23/50 current_auc = 0.4666666666666667
User 128476 AUC after training: 0.43333333333333335
User 128476 does not improve AUC. Reverting changes.
Training on augumented user 100586 24/50 current_auc = 0.4666666666666667
User 100586 AUC after training: 0.43333333333333335
User 100586 does not improve AUC. Reverting changes.
Training on augumented user 103074 25/50 current_auc = 0.4666666666666667
User 103074 AUC after training: 0.43333333333333335
User 103074 does not improve AUC. Reverting changes.
Training on augumented user 42318 26/50 current_auc = 0.4666666666666667
User 42318 AUC after training: 0.43333333333333335
User 42318 does not improve AUC. Reverting changes.
Training on augumented user 130203 27/50 current_auc = 0.4666666666666667
User 130203 AUC after training: 0.43333333333333335
User 130203 does not improve AUC. Reverting changes.
Training on augumented user 61833 28/50 current_auc = 0.4666666666666667
User 61833 AUC after training: 0.4666666666666667
User 61833 does not improve AUC. Reverting changes.
Training on augumented user 114836 29/50 current_auc = 0.4666666666666667
User 114836 AUC after training: 0.4666666666666667
User 114836 does not improve AUC. Reverting changes.
Training on augumented user 8551 30/50 current_auc = 0.4666666666666667
User 8551 AUC after training: 0.4666666666666667
User 8551 does not improve AUC. Reverting changes.
Training on augumented user 78742 31/50 current_auc = 0.4666666666666667
User 78742 AUC after training: 0.4666666666666667
User 78742 does not improve AUC. Reverting changes.
Training on augumented user 129374 32/50 current_auc = 0.4666666666666667
User 129374 AUC after training: 0.43333333333333335
User 129374 does not improve AUC. Reverting changes.
Training on augumented user 14322 33/50 current_auc = 0.4666666666666667
User 14322 AUC after training: 0.43333333333333335
User 14322 does not improve AUC. Reverting changes.
Training on augumented user 30336 34/50 current_auc = 0.4666666666666667
User 30336 AUC after training: 0.4666666666666667
User 30336 does not improve AUC. Reverting changes.
Training on augumented user 130112 35/50 current_auc = 0.4666666666666667
User 130112 AUC after training: 0.43333333333333335
User 130112 does not improve AUC. Reverting changes.
Training on augumented user 100270 36/50 current_auc = 0.4666666666666667
User 100270 AUC after training: 0.43333333333333335
User 100270 does not improve AUC. Reverting changes.
Training on augumented user 89336 37/50 current_auc = 0.4666666666666667
User 89336 AUC after training: 0.43333333333333335
User 89336 does not improve AUC. Reverting changes.
Training on augumented user 43145 38/50 current_auc = 0.4666666666666667
User 43145 AUC after training: 0.4666666666666667
User 43145 does not improve AUC. Reverting changes.
Training on augumented user 91631 39/50 current_auc = 0.4666666666666667
User 91631 AUC after training: 0.4
User 91631 does not improve AUC. Reverting changes.
Training on augumented user 125652 40/50 current_auc = 0.4666666666666667
User 125652 AUC after training: 0.4666666666666667
User 125652 does not improve AUC. Reverting changes.
Training on augumented user 39627 41/50 current_auc = 0.4666666666666667
User 39627 AUC after training: 0.4666666666666667
User 39627 does not improve AUC. Reverting changes.
Training on augumented user 67687 42/50 current_auc = 0.4666666666666667
User 67687 AUC after training: 0.43333333333333335
User 67687 does not improve AUC. Reverting changes.
Training on augumented user 93169 43/50 current_auc = 0.4666666666666667
User 93169 AUC after training: 0.4666666666666667
User 93169 does not improve AUC. Reverting changes.
Training on augumented user 66675 44/50 current_auc = 0.4666666666666667
User 66675 AUC after training: 0.43333333333333335
User 66675 does not improve AUC. Reverting changes.
Training on augumented user 88796 45/50 current_auc = 0.4666666666666667
User 88796 AUC after training: 0.4666666666666667
User 88796 does not improve AUC. Reverting changes.
Training on augumented user 14003 46/50 current_auc = 0.4666666666666667
User 14003 AUC after training: 0.4666666666666667
User 14003 does not improve AUC. Reverting changes.
Training on augumented user 16266 47/50 current_auc = 0.4666666666666667
User 16266 AUC after training: 0.4666666666666667
User 16266 does not improve AUC. Reverting changes.
Training on augumented user 19427 48/50 current_auc = 0.4666666666666667
User 19427 AUC after training: 0.4666666666666667
User 19427 does not improve AUC. Reverting changes.
Training on augumented user 89880 49/50 current_auc = 0.4666666666666667
User 89880 AUC after training: 0.43333333333333335
User 89880 does not improve AUC. Reverting changes.
[2024-12-02 19:04:53.474038] start test user 17357 159/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:53.901193] start test user 17357 159/568 recall augumented users by random, augumented_users = [65201, 35676, 120059, 125826, 64859, 73520, 43444, 80825, 27857, 113247, 99081, 23148, 112306, 53269, 12228, 81956, 104348, 134115, 118601, 19135, 35497, 37216, 17722, 64205, 90211, 38782, 1775, 55378, 60424, 60226, 76671, 120315, 47208, 115797, 63024, 27112, 69892, 79628, 91809, 45865, 105212, 112426, 74453, 69514, 11320, 120888, 91161, 3669, 30689, 35688]
[2024-12-02 19:04:53.916769] user = 17357 Cloud 159/568
[2024-12-02 19:04:53.935809] user = 17357 Local 159/568
[2024-12-02 19:04:54.039548] user = 17357 Local+ 159/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:56.578103] user = 17357 MPDA- 159/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.29185185185185186
Training on augumented user 65201 0/50 current_auc = 0.29185185185185186
User 65201 AUC after training: 0.2874074074074074
User 65201 does not improve AUC. Reverting changes.
Training on augumented user 35676 1/50 current_auc = 0.29185185185185186
User 35676 AUC after training: 0.28888888888888886
User 35676 does not improve AUC. Reverting changes.
Training on augumented user 120059 2/50 current_auc = 0.29185185185185186
User 120059 AUC after training: 0.2962962962962963
User 120059 improves AUC. Keeping the model.
Training on augumented user 125826 3/50 current_auc = 0.2962962962962963
User 125826 AUC after training: 0.29185185185185186
User 125826 does not improve AUC. Reverting changes.
Training on augumented user 64859 4/50 current_auc = 0.2962962962962963
User 64859 AUC after training: 0.3037037037037037
User 64859 improves AUC. Keeping the model.
Training on augumented user 73520 5/50 current_auc = 0.3037037037037037
User 73520 AUC after training: 0.29333333333333333
User 73520 does not improve AUC. Reverting changes.
Training on augumented user 43444 6/50 current_auc = 0.3037037037037037
User 43444 AUC after training: 0.29333333333333333
User 43444 does not improve AUC. Reverting changes.
Training on augumented user 80825 7/50 current_auc = 0.3037037037037037
User 80825 AUC after training: 0.2992592592592593
User 80825 does not improve AUC. Reverting changes.
Training on augumented user 27857 8/50 current_auc = 0.3037037037037037
User 27857 AUC after training: 0.3022222222222222
User 27857 does not improve AUC. Reverting changes.
Training on augumented user 113247 9/50 current_auc = 0.3037037037037037
User 113247 AUC after training: 0.3051851851851852
User 113247 improves AUC. Keeping the model.
Training on augumented user 99081 10/50 current_auc = 0.3051851851851852
User 99081 AUC after training: 0.3037037037037037
User 99081 does not improve AUC. Reverting changes.
Training on augumented user 23148 11/50 current_auc = 0.3051851851851852
User 23148 AUC after training: 0.3051851851851852
User 23148 does not improve AUC. Reverting changes.
Training on augumented user 112306 12/50 current_auc = 0.3051851851851852
User 112306 AUC after training: 0.3022222222222222
User 112306 does not improve AUC. Reverting changes.
Training on augumented user 53269 13/50 current_auc = 0.3051851851851852
User 53269 AUC after training: 0.30370370370370375
User 53269 does not improve AUC. Reverting changes.
Training on augumented user 12228 14/50 current_auc = 0.3051851851851852
User 12228 AUC after training: 0.3051851851851852
User 12228 does not improve AUC. Reverting changes.
Training on augumented user 81956 15/50 current_auc = 0.3051851851851852
User 81956 AUC after training: 0.3022222222222222
User 81956 does not improve AUC. Reverting changes.
Training on augumented user 104348 16/50 current_auc = 0.3051851851851852
User 104348 AUC after training: 0.31259259259259264
User 104348 improves AUC. Keeping the model.
Training on augumented user 134115 17/50 current_auc = 0.31259259259259264
User 134115 AUC after training: 0.3096296296296296
User 134115 does not improve AUC. Reverting changes.
Training on augumented user 118601 18/50 current_auc = 0.31259259259259264
User 118601 AUC after training: 0.30814814814814817
User 118601 does not improve AUC. Reverting changes.
Training on augumented user 19135 19/50 current_auc = 0.31259259259259264
User 19135 AUC after training: 0.3214814814814815
User 19135 improves AUC. Keeping the model.
Training on augumented user 35497 20/50 current_auc = 0.3214814814814815
User 35497 AUC after training: 0.322962962962963
User 35497 improves AUC. Keeping the model.
Training on augumented user 37216 21/50 current_auc = 0.322962962962963
User 37216 AUC after training: 0.30814814814814817
User 37216 does not improve AUC. Reverting changes.
Training on augumented user 17722 22/50 current_auc = 0.322962962962963
User 17722 AUC after training: 0.3244444444444445
User 17722 improves AUC. Keeping the model.
Training on augumented user 64205 23/50 current_auc = 0.3244444444444445
User 64205 AUC after training: 0.31703703703703706
User 64205 does not improve AUC. Reverting changes.
Training on augumented user 90211 24/50 current_auc = 0.3244444444444445
User 90211 AUC after training: 0.3244444444444445
User 90211 does not improve AUC. Reverting changes.
Training on augumented user 38782 25/50 current_auc = 0.3244444444444445
User 38782 AUC after training: 0.3244444444444445
User 38782 does not improve AUC. Reverting changes.
Training on augumented user 1775 26/50 current_auc = 0.3244444444444445
User 1775 AUC after training: 0.32296296296296295
User 1775 does not improve AUC. Reverting changes.
Training on augumented user 55378 27/50 current_auc = 0.3244444444444445
User 55378 AUC after training: 0.33037037037037037
User 55378 improves AUC. Keeping the model.
Training on augumented user 60424 28/50 current_auc = 0.33037037037037037
User 60424 AUC after training: 0.32592592592592595
User 60424 does not improve AUC. Reverting changes.
Training on augumented user 60226 29/50 current_auc = 0.33037037037037037
User 60226 AUC after training: 0.3362962962962963
User 60226 improves AUC. Keeping the model.
Training on augumented user 76671 30/50 current_auc = 0.3362962962962963
User 76671 AUC after training: 0.3274074074074074
User 76671 does not improve AUC. Reverting changes.
Training on augumented user 120315 31/50 current_auc = 0.3362962962962963
User 120315 AUC after training: 0.33333333333333337
User 120315 does not improve AUC. Reverting changes.
Training on augumented user 47208 32/50 current_auc = 0.3362962962962963
User 47208 AUC after training: 0.3288888888888889
User 47208 does not improve AUC. Reverting changes.
Training on augumented user 115797 33/50 current_auc = 0.3362962962962963
User 115797 AUC after training: 0.3362962962962963
User 115797 does not improve AUC. Reverting changes.
Training on augumented user 63024 34/50 current_auc = 0.3362962962962963
User 63024 AUC after training: 0.33185185185185184
User 63024 does not improve AUC. Reverting changes.
Training on augumented user 27112 35/50 current_auc = 0.3362962962962963
User 27112 AUC after training: 0.3348148148148148
User 27112 does not improve AUC. Reverting changes.
Training on augumented user 69892 36/50 current_auc = 0.3362962962962963
User 69892 AUC after training: 0.34074074074074073
User 69892 improves AUC. Keeping the model.
Training on augumented user 79628 37/50 current_auc = 0.34074074074074073
User 79628 AUC after training: 0.34074074074074073
User 79628 does not improve AUC. Reverting changes.
Training on augumented user 91809 38/50 current_auc = 0.34074074074074073
User 91809 AUC after training: 0.3333333333333333
User 91809 does not improve AUC. Reverting changes.
Training on augumented user 45865 39/50 current_auc = 0.34074074074074073
User 45865 AUC after training: 0.34222222222222226
User 45865 improves AUC. Keeping the model.
Training on augumented user 105212 40/50 current_auc = 0.34222222222222226
User 105212 AUC after training: 0.34074074074074073
User 105212 does not improve AUC. Reverting changes.
Training on augumented user 112426 41/50 current_auc = 0.34222222222222226
User 112426 AUC after training: 0.34370370370370373
User 112426 improves AUC. Keeping the model.
Training on augumented user 74453 42/50 current_auc = 0.34370370370370373
User 74453 AUC after training: 0.3422222222222222
User 74453 does not improve AUC. Reverting changes.
Training on augumented user 69514 43/50 current_auc = 0.34370370370370373
User 69514 AUC after training: 0.34370370370370373
User 69514 does not improve AUC. Reverting changes.
Training on augumented user 11320 44/50 current_auc = 0.34370370370370373
User 11320 AUC after training: 0.34370370370370373
User 11320 does not improve AUC. Reverting changes.
Training on augumented user 120888 45/50 current_auc = 0.34370370370370373
User 120888 AUC after training: 0.34074074074074073
User 120888 does not improve AUC. Reverting changes.
Training on augumented user 91161 46/50 current_auc = 0.34370370370370373
User 91161 AUC after training: 0.34370370370370373
User 91161 does not improve AUC. Reverting changes.
Training on augumented user 3669 47/50 current_auc = 0.34370370370370373
User 3669 AUC after training: 0.3422222222222222
User 3669 does not improve AUC. Reverting changes.
Training on augumented user 30689 48/50 current_auc = 0.34370370370370373
User 30689 AUC after training: 0.3422222222222222
User 30689 does not improve AUC. Reverting changes.
Training on augumented user 35688 49/50 current_auc = 0.34370370370370373
User 35688 AUC after training: 0.34518518518518515
User 35688 improves AUC. Keeping the model.
[2024-12-02 19:05:28.848748] start test user 17362 160/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:29.402998] start test user 17362 160/568 recall augumented users by random, augumented_users = [112775, 133086, 97948, 111590, 36253, 19448, 77918, 135932, 53981, 134854, 74168, 82159, 55863, 7267, 64008, 115507, 1866, 89423, 66062, 65279, 31124, 35989, 47371, 104126, 44649, 45991, 58228, 88252, 24229, 79786, 7416, 91792, 137215, 2313, 84478, 131703, 85331, 117284, 82754, 59386, 3404, 124915, 8267, 17427, 81504, 113814, 61342, 122309, 111166, 136744]
[2024-12-02 19:05:29.417476] user = 17362 Cloud 160/568
[2024-12-02 19:05:29.427031] user = 17362 Local 160/568
[2024-12-02 19:05:29.452441] user = 17362 Local+ 160/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:31.272843] user = 17362 MPDA- 160/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5982142857142857
Training on augumented user 112775 0/50 current_auc = 0.5982142857142857
User 112775 AUC after training: 0.5982142857142857
User 112775 does not improve AUC. Reverting changes.
Training on augumented user 133086 1/50 current_auc = 0.5982142857142857
User 133086 AUC after training: 0.5982142857142857
User 133086 does not improve AUC. Reverting changes.
Training on augumented user 97948 2/50 current_auc = 0.5982142857142857
User 97948 AUC after training: 0.5982142857142857
User 97948 does not improve AUC. Reverting changes.
Training on augumented user 111590 3/50 current_auc = 0.5982142857142857
User 111590 AUC after training: 0.5982142857142857
User 111590 does not improve AUC. Reverting changes.
Training on augumented user 36253 4/50 current_auc = 0.5982142857142857
User 36253 AUC after training: 0.5982142857142857
User 36253 does not improve AUC. Reverting changes.
Training on augumented user 19448 5/50 current_auc = 0.5982142857142857
User 19448 AUC after training: 0.5982142857142857
User 19448 does not improve AUC. Reverting changes.
Training on augumented user 77918 6/50 current_auc = 0.5982142857142857
User 77918 AUC after training: 0.5982142857142857
User 77918 does not improve AUC. Reverting changes.
Training on augumented user 135932 7/50 current_auc = 0.5982142857142857
User 135932 AUC after training: 0.5982142857142857
User 135932 does not improve AUC. Reverting changes.
Training on augumented user 53981 8/50 current_auc = 0.5982142857142857
User 53981 AUC after training: 0.5982142857142857
User 53981 does not improve AUC. Reverting changes.
Training on augumented user 134854 9/50 current_auc = 0.5982142857142857
User 134854 AUC after training: 0.5982142857142857
User 134854 does not improve AUC. Reverting changes.
Training on augumented user 74168 10/50 current_auc = 0.5982142857142857
User 74168 AUC after training: 0.5982142857142857
User 74168 does not improve AUC. Reverting changes.
Training on augumented user 82159 11/50 current_auc = 0.5982142857142857
User 82159 AUC after training: 0.5982142857142857
User 82159 does not improve AUC. Reverting changes.
Training on augumented user 55863 12/50 current_auc = 0.5982142857142857
User 55863 AUC after training: 0.5982142857142857
User 55863 does not improve AUC. Reverting changes.
Training on augumented user 7267 13/50 current_auc = 0.5982142857142857
User 7267 AUC after training: 0.5982142857142857
User 7267 does not improve AUC. Reverting changes.
Training on augumented user 64008 14/50 current_auc = 0.5982142857142857
User 64008 AUC after training: 0.6160714285714286
User 64008 improves AUC. Keeping the model.
Training on augumented user 115507 15/50 current_auc = 0.6160714285714286
User 115507 AUC after training: 0.6071428571428571
User 115507 does not improve AUC. Reverting changes.
Training on augumented user 1866 16/50 current_auc = 0.6160714285714286
User 1866 AUC after training: 0.6160714285714286
User 1866 does not improve AUC. Reverting changes.
Training on augumented user 89423 17/50 current_auc = 0.6160714285714286
User 89423 AUC after training: 0.6160714285714286
User 89423 does not improve AUC. Reverting changes.
Training on augumented user 66062 18/50 current_auc = 0.6160714285714286
User 66062 AUC after training: 0.5982142857142857
User 66062 does not improve AUC. Reverting changes.
Training on augumented user 65279 19/50 current_auc = 0.6160714285714286
User 65279 AUC after training: 0.5982142857142857
User 65279 does not improve AUC. Reverting changes.
Training on augumented user 31124 20/50 current_auc = 0.6160714285714286
User 31124 AUC after training: 0.6160714285714286
User 31124 does not improve AUC. Reverting changes.
Training on augumented user 35989 21/50 current_auc = 0.6160714285714286
User 35989 AUC after training: 0.6160714285714286
User 35989 does not improve AUC. Reverting changes.
Training on augumented user 47371 22/50 current_auc = 0.6160714285714286
User 47371 AUC after training: 0.6071428571428571
User 47371 does not improve AUC. Reverting changes.
Training on augumented user 104126 23/50 current_auc = 0.6160714285714286
User 104126 AUC after training: 0.6071428571428571
User 104126 does not improve AUC. Reverting changes.
Training on augumented user 44649 24/50 current_auc = 0.6160714285714286
User 44649 AUC after training: 0.6071428571428571
User 44649 does not improve AUC. Reverting changes.
Training on augumented user 45991 25/50 current_auc = 0.6160714285714286
User 45991 AUC after training: 0.6071428571428571
User 45991 does not improve AUC. Reverting changes.
Training on augumented user 58228 26/50 current_auc = 0.6160714285714286
User 58228 AUC after training: 0.5892857142857143
User 58228 does not improve AUC. Reverting changes.
Training on augumented user 88252 27/50 current_auc = 0.6160714285714286
User 88252 AUC after training: 0.6160714285714286
User 88252 does not improve AUC. Reverting changes.
Training on augumented user 24229 28/50 current_auc = 0.6160714285714286
User 24229 AUC after training: 0.6160714285714286
User 24229 does not improve AUC. Reverting changes.
Training on augumented user 79786 29/50 current_auc = 0.6160714285714286
User 79786 AUC after training: 0.6071428571428571
User 79786 does not improve AUC. Reverting changes.
Training on augumented user 7416 30/50 current_auc = 0.6160714285714286
User 7416 AUC after training: 0.6071428571428571
User 7416 does not improve AUC. Reverting changes.
Training on augumented user 91792 31/50 current_auc = 0.6160714285714286
User 91792 AUC after training: 0.6071428571428571
User 91792 does not improve AUC. Reverting changes.
Training on augumented user 137215 32/50 current_auc = 0.6160714285714286
User 137215 AUC after training: 0.6071428571428571
User 137215 does not improve AUC. Reverting changes.
Training on augumented user 2313 33/50 current_auc = 0.6160714285714286
User 2313 AUC after training: 0.5982142857142857
User 2313 does not improve AUC. Reverting changes.
Training on augumented user 84478 34/50 current_auc = 0.6160714285714286
User 84478 AUC after training: 0.6071428571428571
User 84478 does not improve AUC. Reverting changes.
Training on augumented user 131703 35/50 current_auc = 0.6160714285714286
User 131703 AUC after training: 0.6160714285714286
User 131703 does not improve AUC. Reverting changes.
Training on augumented user 85331 36/50 current_auc = 0.6160714285714286
User 85331 AUC after training: 0.6160714285714286
User 85331 does not improve AUC. Reverting changes.
Training on augumented user 117284 37/50 current_auc = 0.6160714285714286
User 117284 AUC after training: 0.6160714285714286
User 117284 does not improve AUC. Reverting changes.
Training on augumented user 82754 38/50 current_auc = 0.6160714285714286
User 82754 AUC after training: 0.6071428571428571
User 82754 does not improve AUC. Reverting changes.
Training on augumented user 59386 39/50 current_auc = 0.6160714285714286
User 59386 AUC after training: 0.6071428571428571
User 59386 does not improve AUC. Reverting changes.
Training on augumented user 3404 40/50 current_auc = 0.6160714285714286
User 3404 AUC after training: 0.6160714285714286
User 3404 does not improve AUC. Reverting changes.
Training on augumented user 124915 41/50 current_auc = 0.6160714285714286
User 124915 AUC after training: 0.5982142857142857
User 124915 does not improve AUC. Reverting changes.
Training on augumented user 8267 42/50 current_auc = 0.6160714285714286
User 8267 AUC after training: 0.6160714285714286
User 8267 does not improve AUC. Reverting changes.
Training on augumented user 17427 43/50 current_auc = 0.6160714285714286
User 17427 AUC after training: 0.6071428571428571
User 17427 does not improve AUC. Reverting changes.
Training on augumented user 81504 44/50 current_auc = 0.6160714285714286
User 81504 AUC after training: 0.5982142857142857
User 81504 does not improve AUC. Reverting changes.
Training on augumented user 113814 45/50 current_auc = 0.6160714285714286
User 113814 AUC after training: 0.6160714285714286
User 113814 does not improve AUC. Reverting changes.
Training on augumented user 61342 46/50 current_auc = 0.6160714285714286
User 61342 AUC after training: 0.6071428571428571
User 61342 does not improve AUC. Reverting changes.
Training on augumented user 122309 47/50 current_auc = 0.6160714285714286
User 122309 AUC after training: 0.6160714285714286
User 122309 does not improve AUC. Reverting changes.
Training on augumented user 111166 48/50 current_auc = 0.6160714285714286
User 111166 AUC after training: 0.6071428571428571
User 111166 does not improve AUC. Reverting changes.
Training on augumented user 136744 49/50 current_auc = 0.6160714285714286
User 136744 AUC after training: 0.6160714285714286
User 136744 does not improve AUC. Reverting changes.
[2024-12-02 19:05:56.747136] start test user 17437 161/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:57.195717] start test user 17437 161/568 recall augumented users by random, augumented_users = [9192, 83060, 106063, 66560, 63349, 42248, 8713, 68316, 69910, 886, 5386, 96048, 57516, 65158, 132388, 40106, 54468, 89396, 93242, 133436, 86960, 122312, 44380, 68237, 31142, 76352, 56595, 11722, 137132, 99669, 136158, 119471, 120181, 81780, 28182, 89007, 89624, 48928, 4952, 3843, 15762, 86342, 132312, 53254, 53413, 60170, 14894, 57533, 5015, 73979]
[2024-12-02 19:05:57.210795] user = 17437 Cloud 161/568
[2024-12-02 19:05:57.233354] user = 17437 Local 161/568
[2024-12-02 19:05:57.281292] user = 17437 Local+ 161/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:59.387612] user = 17437 MPDA- 161/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7155475619504397
Training on augumented user 9192 0/50 current_auc = 0.7155475619504397
User 9192 AUC after training: 0.7153876898481215
User 9192 does not improve AUC. Reverting changes.
Training on augumented user 83060 1/50 current_auc = 0.7155475619504397
User 83060 AUC after training: 0.7147881694644285
User 83060 does not improve AUC. Reverting changes.
Training on augumented user 106063 2/50 current_auc = 0.7155475619504397
User 106063 AUC after training: 0.7167466027178258
User 106063 improves AUC. Keeping the model.
Training on augumented user 66560 3/50 current_auc = 0.7167466027178258
User 66560 AUC after training: 0.716466826538769
User 66560 does not improve AUC. Reverting changes.
Training on augumented user 63349 4/50 current_auc = 0.7167466027178258
User 63349 AUC after training: 0.7166266986410871
User 63349 does not improve AUC. Reverting changes.
Training on augumented user 42248 5/50 current_auc = 0.7167466027178258
User 42248 AUC after training: 0.715867306155076
User 42248 does not improve AUC. Reverting changes.
Training on augumented user 8713 6/50 current_auc = 0.7167466027178258
User 8713 AUC after training: 0.7176258992805755
User 8713 improves AUC. Keeping the model.
Training on augumented user 68316 7/50 current_auc = 0.7176258992805755
User 68316 AUC after training: 0.7167066346922462
User 68316 does not improve AUC. Reverting changes.
Training on augumented user 69910 8/50 current_auc = 0.7176258992805755
User 69910 AUC after training: 0.7145483613109512
User 69910 does not improve AUC. Reverting changes.
Training on augumented user 886 9/50 current_auc = 0.7176258992805755
User 886 AUC after training: 0.7182653876898482
User 886 improves AUC. Keeping the model.
Training on augumented user 5386 10/50 current_auc = 0.7182653876898482
User 5386 AUC after training: 0.7189848121502798
User 5386 improves AUC. Keeping the model.
Training on augumented user 96048 11/50 current_auc = 0.7189848121502798
User 96048 AUC after training: 0.71810551558753
User 96048 does not improve AUC. Reverting changes.
Training on augumented user 57516 12/50 current_auc = 0.7189848121502798
User 57516 AUC after training: 0.7170263788968824
User 57516 does not improve AUC. Reverting changes.
Training on augumented user 65158 13/50 current_auc = 0.7189848121502798
User 65158 AUC after training: 0.7188249400479615
User 65158 does not improve AUC. Reverting changes.
Training on augumented user 132388 14/50 current_auc = 0.7189848121502798
User 132388 AUC after training: 0.7188649080735413
User 132388 does not improve AUC. Reverting changes.
Training on augumented user 40106 15/50 current_auc = 0.7189848121502798
User 40106 AUC after training: 0.7181454836131096
User 40106 does not improve AUC. Reverting changes.
Training on augumented user 54468 16/50 current_auc = 0.7189848121502798
User 54468 AUC after training: 0.7187450039968024
User 54468 does not improve AUC. Reverting changes.
Training on augumented user 89396 17/50 current_auc = 0.7189848121502798
User 89396 AUC after training: 0.7187849720223821
User 89396 does not improve AUC. Reverting changes.
Training on augumented user 93242 18/50 current_auc = 0.7189848121502798
User 93242 AUC after training: 0.7179456434852118
User 93242 does not improve AUC. Reverting changes.
Training on augumented user 133436 19/50 current_auc = 0.7189848121502798
User 133436 AUC after training: 0.7191846522781774
User 133436 improves AUC. Keeping the model.
Training on augumented user 86960 20/50 current_auc = 0.7191846522781774
User 86960 AUC after training: 0.7187849720223821
User 86960 does not improve AUC. Reverting changes.
Training on augumented user 122312 21/50 current_auc = 0.7191846522781774
User 122312 AUC after training: 0.7203037569944044
User 122312 improves AUC. Keeping the model.
Training on augumented user 44380 22/50 current_auc = 0.7203037569944044
User 44380 AUC after training: 0.7195843325339728
User 44380 does not improve AUC. Reverting changes.
Training on augumented user 68237 23/50 current_auc = 0.7203037569944044
User 68237 AUC after training: 0.7206235011990407
User 68237 improves AUC. Keeping the model.
Training on augumented user 31142 24/50 current_auc = 0.7206235011990407
User 31142 AUC after training: 0.7204636290967226
User 31142 does not improve AUC. Reverting changes.
Training on augumented user 76352 25/50 current_auc = 0.7206235011990407
User 76352 AUC after training: 0.7168665067945644
User 76352 does not improve AUC. Reverting changes.
Training on augumented user 56595 26/50 current_auc = 0.7206235011990407
User 56595 AUC after training: 0.7185051958433252
User 56595 does not improve AUC. Reverting changes.
Training on augumented user 11722 27/50 current_auc = 0.7206235011990407
User 11722 AUC after training: 0.7205435651478816
User 11722 does not improve AUC. Reverting changes.
Training on augumented user 137132 28/50 current_auc = 0.7206235011990407
User 137132 AUC after training: 0.7213429256594724
User 137132 improves AUC. Keeping the model.
Training on augumented user 99669 29/50 current_auc = 0.7213429256594724
User 99669 AUC after training: 0.7221422861710631
User 99669 improves AUC. Keeping the model.
Training on augumented user 136158 30/50 current_auc = 0.7221422861710631
User 136158 AUC after training: 0.7208633093525181
User 136158 does not improve AUC. Reverting changes.
Training on augumented user 119471 31/50 current_auc = 0.7221422861710631
User 119471 AUC after training: 0.7218225419664268
User 119471 does not improve AUC. Reverting changes.
Training on augumented user 120181 32/50 current_auc = 0.7221422861710631
User 120181 AUC after training: 0.7209832134292566
User 120181 does not improve AUC. Reverting changes.
Training on augumented user 81780 33/50 current_auc = 0.7221422861710631
User 81780 AUC after training: 0.7216626698641087
User 81780 does not improve AUC. Reverting changes.
Training on augumented user 28182 34/50 current_auc = 0.7221422861710631
User 28182 AUC after training: 0.7199440447641886
User 28182 does not improve AUC. Reverting changes.
Training on augumented user 89007 35/50 current_auc = 0.7221422861710631
User 89007 AUC after training: 0.7215827338129497
User 89007 does not improve AUC. Reverting changes.
Training on augumented user 89624 36/50 current_auc = 0.7221422861710631
User 89624 AUC after training: 0.7211830535571542
User 89624 does not improve AUC. Reverting changes.
Training on augumented user 48928 37/50 current_auc = 0.7221422861710631
User 48928 AUC after training: 0.7211031175059951
User 48928 does not improve AUC. Reverting changes.
Training on augumented user 4952 38/50 current_auc = 0.7221422861710631
User 4952 AUC after training: 0.7217426059152677
User 4952 does not improve AUC. Reverting changes.
Training on augumented user 3843 39/50 current_auc = 0.7221422861710631
User 3843 AUC after training: 0.7223820943245404
User 3843 improves AUC. Keeping the model.
Training on augumented user 15762 40/50 current_auc = 0.7223820943245404
User 15762 AUC after training: 0.7223021582733813
User 15762 does not improve AUC. Reverting changes.
Training on augumented user 86342 41/50 current_auc = 0.7223820943245404
User 86342 AUC after training: 0.7225419664268585
User 86342 improves AUC. Keeping the model.
Training on augumented user 132312 42/50 current_auc = 0.7225419664268585
User 132312 AUC after training: 0.7221422861710631
User 132312 does not improve AUC. Reverting changes.
Training on augumented user 53254 43/50 current_auc = 0.7225419664268585
User 53254 AUC after training: 0.723181454836131
User 53254 improves AUC. Keeping the model.
Training on augumented user 53413 44/50 current_auc = 0.723181454836131
User 53413 AUC after training: 0.7242206235011991
User 53413 improves AUC. Keeping the model.
Training on augumented user 60170 45/50 current_auc = 0.7242206235011991
User 60170 AUC after training: 0.723181454836131
User 60170 does not improve AUC. Reverting changes.
Training on augumented user 14894 46/50 current_auc = 0.7242206235011991
User 14894 AUC after training: 0.7233413269384492
User 14894 does not improve AUC. Reverting changes.
Training on augumented user 57533 47/50 current_auc = 0.7242206235011991
User 57533 AUC after training: 0.723101518784972
User 57533 does not improve AUC. Reverting changes.
Training on augumented user 5015 48/50 current_auc = 0.7242206235011991
User 5015 AUC after training: 0.7221422861710631
User 5015 does not improve AUC. Reverting changes.
Training on augumented user 73979 49/50 current_auc = 0.7242206235011991
User 73979 AUC after training: 0.7240607513988808
User 73979 does not improve AUC. Reverting changes.
[2024-12-02 19:06:24.943111] start test user 17444 162/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:25.554102] start test user 17444 162/568 recall augumented users by random, augumented_users = [133809, 96000, 23216, 42298, 86476, 41775, 10610, 97713, 13784, 69014, 89776, 1827, 6236, 90733, 105255, 137786, 103354, 22602, 42735, 77239, 62091, 116193, 20143, 135185, 69454, 51511, 79236, 30633, 93205, 74798, 15713, 104404, 89668, 15529, 30429, 16165, 68484, 38307, 4369, 130598, 129683, 47728, 27818, 9002, 64296, 63111, 78503, 31704, 99180, 24120]
[2024-12-02 19:06:25.576471] user = 17444 Cloud 162/568
[2024-12-02 19:06:25.586417] user = 17444 Local 162/568
[2024-12-02 19:06:25.691634] user = 17444 Local+ 162/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:27.946331] user = 17444 MPDA- 162/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5287356321839081
Training on augumented user 133809 0/50 current_auc = 0.5287356321839081
User 133809 AUC after training: 0.5402298850574713
User 133809 improves AUC. Keeping the model.
Training on augumented user 96000 1/50 current_auc = 0.5402298850574713
User 96000 AUC after training: 0.5402298850574713
User 96000 does not improve AUC. Reverting changes.
Training on augumented user 23216 2/50 current_auc = 0.5402298850574713
User 23216 AUC after training: 0.5402298850574713
User 23216 does not improve AUC. Reverting changes.
Training on augumented user 42298 3/50 current_auc = 0.5402298850574713
User 42298 AUC after training: 0.5402298850574713
User 42298 does not improve AUC. Reverting changes.
Training on augumented user 86476 4/50 current_auc = 0.5402298850574713
User 86476 AUC after training: 0.5402298850574713
User 86476 does not improve AUC. Reverting changes.
Training on augumented user 41775 5/50 current_auc = 0.5402298850574713
User 41775 AUC after training: 0.5402298850574713
User 41775 does not improve AUC. Reverting changes.
Training on augumented user 10610 6/50 current_auc = 0.5402298850574713
User 10610 AUC after training: 0.5402298850574713
User 10610 does not improve AUC. Reverting changes.
Training on augumented user 97713 7/50 current_auc = 0.5402298850574713
User 97713 AUC after training: 0.5402298850574713
User 97713 does not improve AUC. Reverting changes.
Training on augumented user 13784 8/50 current_auc = 0.5402298850574713
User 13784 AUC after training: 0.5402298850574713
User 13784 does not improve AUC. Reverting changes.
Training on augumented user 69014 9/50 current_auc = 0.5402298850574713
User 69014 AUC after training: 0.5402298850574713
User 69014 does not improve AUC. Reverting changes.
Training on augumented user 89776 10/50 current_auc = 0.5402298850574713
User 89776 AUC after training: 0.5402298850574713
User 89776 does not improve AUC. Reverting changes.
Training on augumented user 1827 11/50 current_auc = 0.5402298850574713
User 1827 AUC after training: 0.5402298850574713
User 1827 does not improve AUC. Reverting changes.
Training on augumented user 6236 12/50 current_auc = 0.5402298850574713
User 6236 AUC after training: 0.5402298850574713
User 6236 does not improve AUC. Reverting changes.
Training on augumented user 90733 13/50 current_auc = 0.5402298850574713
User 90733 AUC after training: 0.5402298850574713
User 90733 does not improve AUC. Reverting changes.
Training on augumented user 105255 14/50 current_auc = 0.5402298850574713
User 105255 AUC after training: 0.5402298850574713
User 105255 does not improve AUC. Reverting changes.
Training on augumented user 137786 15/50 current_auc = 0.5402298850574713
User 137786 AUC after training: 0.5402298850574713
User 137786 does not improve AUC. Reverting changes.
Training on augumented user 103354 16/50 current_auc = 0.5402298850574713
User 103354 AUC after training: 0.5402298850574713
User 103354 does not improve AUC. Reverting changes.
Training on augumented user 22602 17/50 current_auc = 0.5402298850574713
User 22602 AUC after training: 0.5402298850574713
User 22602 does not improve AUC. Reverting changes.
Training on augumented user 42735 18/50 current_auc = 0.5402298850574713
User 42735 AUC after training: 0.5402298850574713
User 42735 does not improve AUC. Reverting changes.
Training on augumented user 77239 19/50 current_auc = 0.5402298850574713
User 77239 AUC after training: 0.5517241379310345
User 77239 improves AUC. Keeping the model.
Training on augumented user 62091 20/50 current_auc = 0.5517241379310345
User 62091 AUC after training: 0.5517241379310345
User 62091 does not improve AUC. Reverting changes.
Training on augumented user 116193 21/50 current_auc = 0.5517241379310345
User 116193 AUC after training: 0.5402298850574713
User 116193 does not improve AUC. Reverting changes.
Training on augumented user 20143 22/50 current_auc = 0.5517241379310345
User 20143 AUC after training: 0.5402298850574713
User 20143 does not improve AUC. Reverting changes.
Training on augumented user 135185 23/50 current_auc = 0.5517241379310345
User 135185 AUC after training: 0.5402298850574713
User 135185 does not improve AUC. Reverting changes.
Training on augumented user 69454 24/50 current_auc = 0.5517241379310345
User 69454 AUC after training: 0.5402298850574713
User 69454 does not improve AUC. Reverting changes.
Training on augumented user 51511 25/50 current_auc = 0.5517241379310345
User 51511 AUC after training: 0.5517241379310345
User 51511 does not improve AUC. Reverting changes.
Training on augumented user 79236 26/50 current_auc = 0.5517241379310345
User 79236 AUC after training: 0.5517241379310345
User 79236 does not improve AUC. Reverting changes.
Training on augumented user 30633 27/50 current_auc = 0.5517241379310345
User 30633 AUC after training: 0.5517241379310345
User 30633 does not improve AUC. Reverting changes.
Training on augumented user 93205 28/50 current_auc = 0.5517241379310345
User 93205 AUC after training: 0.5402298850574713
User 93205 does not improve AUC. Reverting changes.
Training on augumented user 74798 29/50 current_auc = 0.5517241379310345
User 74798 AUC after training: 0.5402298850574713
User 74798 does not improve AUC. Reverting changes.
Training on augumented user 15713 30/50 current_auc = 0.5517241379310345
User 15713 AUC after training: 0.5402298850574713
User 15713 does not improve AUC. Reverting changes.
Training on augumented user 104404 31/50 current_auc = 0.5517241379310345
User 104404 AUC after training: 0.5402298850574713
User 104404 does not improve AUC. Reverting changes.
Training on augumented user 89668 32/50 current_auc = 0.5517241379310345
User 89668 AUC after training: 0.5517241379310345
User 89668 does not improve AUC. Reverting changes.
Training on augumented user 15529 33/50 current_auc = 0.5517241379310345
User 15529 AUC after training: 0.5517241379310345
User 15529 does not improve AUC. Reverting changes.
Training on augumented user 30429 34/50 current_auc = 0.5517241379310345
User 30429 AUC after training: 0.5402298850574713
User 30429 does not improve AUC. Reverting changes.
Training on augumented user 16165 35/50 current_auc = 0.5517241379310345
User 16165 AUC after training: 0.5517241379310345
User 16165 does not improve AUC. Reverting changes.
Training on augumented user 68484 36/50 current_auc = 0.5517241379310345
User 68484 AUC after training: 0.5402298850574713
User 68484 does not improve AUC. Reverting changes.
Training on augumented user 38307 37/50 current_auc = 0.5517241379310345
User 38307 AUC after training: 0.5517241379310345
User 38307 does not improve AUC. Reverting changes.
Training on augumented user 4369 38/50 current_auc = 0.5517241379310345
User 4369 AUC after training: 0.5517241379310345
User 4369 does not improve AUC. Reverting changes.
Training on augumented user 130598 39/50 current_auc = 0.5517241379310345
User 130598 AUC after training: 0.5517241379310345
User 130598 does not improve AUC. Reverting changes.
Training on augumented user 129683 40/50 current_auc = 0.5517241379310345
User 129683 AUC after training: 0.5402298850574713
User 129683 does not improve AUC. Reverting changes.
Training on augumented user 47728 41/50 current_auc = 0.5517241379310345
User 47728 AUC after training: 0.5517241379310345
User 47728 does not improve AUC. Reverting changes.
Training on augumented user 27818 42/50 current_auc = 0.5517241379310345
User 27818 AUC after training: 0.5402298850574713
User 27818 does not improve AUC. Reverting changes.
Training on augumented user 9002 43/50 current_auc = 0.5517241379310345
User 9002 AUC after training: 0.5517241379310345
User 9002 does not improve AUC. Reverting changes.
Training on augumented user 64296 44/50 current_auc = 0.5517241379310345
User 64296 AUC after training: 0.5517241379310345
User 64296 does not improve AUC. Reverting changes.
Training on augumented user 63111 45/50 current_auc = 0.5517241379310345
User 63111 AUC after training: 0.5402298850574713
User 63111 does not improve AUC. Reverting changes.
Training on augumented user 78503 46/50 current_auc = 0.5517241379310345
User 78503 AUC after training: 0.5517241379310345
User 78503 does not improve AUC. Reverting changes.
Training on augumented user 31704 47/50 current_auc = 0.5517241379310345
User 31704 AUC after training: 0.5517241379310345
User 31704 does not improve AUC. Reverting changes.
Training on augumented user 99180 48/50 current_auc = 0.5517241379310345
User 99180 AUC after training: 0.5402298850574713
User 99180 does not improve AUC. Reverting changes.
Training on augumented user 24120 49/50 current_auc = 0.5517241379310345
User 24120 AUC after training: 0.5517241379310345
User 24120 does not improve AUC. Reverting changes.
[2024-12-02 19:06:55.017218] start test user 17454 163/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:55.689255] start test user 17454 163/568 recall augumented users by random, augumented_users = [31182, 110021, 274, 36796, 127680, 68508, 66143, 72520, 74696, 14821, 78745, 42803, 11953, 62288, 57513, 123817, 110324, 50555, 16853, 128287, 39709, 30181, 19346, 36457, 62799, 25003, 79063, 33551, 52671, 114163, 30156, 16957, 82375, 1985, 120452, 33780, 28516, 45072, 90742, 116261, 125499, 38683, 78297, 47537, 107682, 14513, 14152, 68086, 26999, 76564]
[2024-12-02 19:06:55.720041] user = 17454 Cloud 163/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:06:55.744587] user = 17454 Local 163/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:06:55.770195] user = 17454 Local+ 163/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:06:59.937919] user = 17454 MPDA- 163/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 31182 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31182 AUC after training: 0.5
User 31182 does not improve AUC. Reverting changes.
Training on augumented user 110021 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110021 AUC after training: 0.5
User 110021 does not improve AUC. Reverting changes.
Training on augumented user 274 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 274 AUC after training: 0.5
User 274 does not improve AUC. Reverting changes.
Training on augumented user 36796 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36796 AUC after training: 0.5
User 36796 does not improve AUC. Reverting changes.
Training on augumented user 127680 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127680 AUC after training: 0.5
User 127680 does not improve AUC. Reverting changes.
Training on augumented user 68508 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68508 AUC after training: 0.5
User 68508 does not improve AUC. Reverting changes.
Training on augumented user 66143 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66143 AUC after training: 0.5
User 66143 does not improve AUC. Reverting changes.
Training on augumented user 72520 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72520 AUC after training: 0.5
User 72520 does not improve AUC. Reverting changes.
Training on augumented user 74696 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74696 AUC after training: 0.5
User 74696 does not improve AUC. Reverting changes.
Training on augumented user 14821 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14821 AUC after training: 0.5
User 14821 does not improve AUC. Reverting changes.
Training on augumented user 78745 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78745 AUC after training: 0.5
User 78745 does not improve AUC. Reverting changes.
Training on augumented user 42803 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42803 AUC after training: 0.5
User 42803 does not improve AUC. Reverting changes.
Training on augumented user 11953 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11953 AUC after training: 0.5
User 11953 does not improve AUC. Reverting changes.
Training on augumented user 62288 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62288 AUC after training: 0.5
User 62288 does not improve AUC. Reverting changes.
Training on augumented user 57513 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57513 AUC after training: 0.5
User 57513 does not improve AUC. Reverting changes.
Training on augumented user 123817 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123817 AUC after training: 0.5
User 123817 does not improve AUC. Reverting changes.
Training on augumented user 110324 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110324 AUC after training: 0.5
User 110324 does not improve AUC. Reverting changes.
Training on augumented user 50555 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50555 AUC after training: 0.5
User 50555 does not improve AUC. Reverting changes.
Training on augumented user 16853 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16853 AUC after training: 0.5
User 16853 does not improve AUC. Reverting changes.
Training on augumented user 128287 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128287 AUC after training: 0.5
User 128287 does not improve AUC. Reverting changes.
Training on augumented user 39709 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39709 AUC after training: 0.5
User 39709 does not improve AUC. Reverting changes.
Training on augumented user 30181 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30181 AUC after training: 0.5
User 30181 does not improve AUC. Reverting changes.
Training on augumented user 19346 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19346 AUC after training: 0.5
User 19346 does not improve AUC. Reverting changes.
Training on augumented user 36457 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36457 AUC after training: 0.5
User 36457 does not improve AUC. Reverting changes.
Training on augumented user 62799 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62799 AUC after training: 0.5
User 62799 does not improve AUC. Reverting changes.
Training on augumented user 25003 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25003 AUC after training: 0.5
User 25003 does not improve AUC. Reverting changes.
Training on augumented user 79063 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79063 AUC after training: 0.5
User 79063 does not improve AUC. Reverting changes.
Training on augumented user 33551 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33551 AUC after training: 0.5
User 33551 does not improve AUC. Reverting changes.
Training on augumented user 52671 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52671 AUC after training: 0.5
User 52671 does not improve AUC. Reverting changes.
Training on augumented user 114163 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114163 AUC after training: 0.5
User 114163 does not improve AUC. Reverting changes.
Training on augumented user 30156 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30156 AUC after training: 0.5
User 30156 does not improve AUC. Reverting changes.
Training on augumented user 16957 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16957 AUC after training: 0.5
User 16957 does not improve AUC. Reverting changes.
Training on augumented user 82375 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82375 AUC after training: 0.5
User 82375 does not improve AUC. Reverting changes.
Training on augumented user 1985 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1985 AUC after training: 0.5
User 1985 does not improve AUC. Reverting changes.
Training on augumented user 120452 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120452 AUC after training: 0.5
User 120452 does not improve AUC. Reverting changes.
Training on augumented user 33780 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33780 AUC after training: 0.5
User 33780 does not improve AUC. Reverting changes.
Training on augumented user 28516 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28516 AUC after training: 0.5
User 28516 does not improve AUC. Reverting changes.
Training on augumented user 45072 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45072 AUC after training: 0.5
User 45072 does not improve AUC. Reverting changes.
Training on augumented user 90742 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90742 AUC after training: 0.5
User 90742 does not improve AUC. Reverting changes.
Training on augumented user 116261 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116261 AUC after training: 0.5
User 116261 does not improve AUC. Reverting changes.
Training on augumented user 125499 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125499 AUC after training: 0.5
User 125499 does not improve AUC. Reverting changes.
Training on augumented user 38683 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38683 AUC after training: 0.5
User 38683 does not improve AUC. Reverting changes.
Training on augumented user 78297 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78297 AUC after training: 0.5
User 78297 does not improve AUC. Reverting changes.
Training on augumented user 47537 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47537 AUC after training: 0.5
User 47537 does not improve AUC. Reverting changes.
Training on augumented user 107682 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107682 AUC after training: 0.5
User 107682 does not improve AUC. Reverting changes.
Training on augumented user 14513 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14513 AUC after training: 0.5
User 14513 does not improve AUC. Reverting changes.
Training on augumented user 14152 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14152 AUC after training: 0.5
User 14152 does not improve AUC. Reverting changes.
Training on augumented user 68086 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68086 AUC after training: 0.5
User 68086 does not improve AUC. Reverting changes.
Training on augumented user 26999 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26999 AUC after training: 0.5
User 26999 does not improve AUC. Reverting changes.
Training on augumented user 76564 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76564 AUC after training: 0.5
User 76564 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:07:26.187928] start test user 17475 164/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:26.610932] start test user 17475 164/568 recall augumented users by random, augumented_users = [94879, 25516, 110787, 77240, 100156, 7340, 15945, 2386, 55271, 74746, 100123, 115278, 43162, 113877, 117315, 15668, 132987, 52596, 63681, 47901, 64325, 101924, 66704, 24832, 137460, 88964, 111391, 29027, 132381, 66644, 40641, 59418, 46339, 55458, 71443, 4234, 117924, 66684, 51284, 57951, 110015, 76174, 127272, 32491, 69687, 116644, 32338, 125674, 110436, 85353]
[2024-12-02 19:07:26.625602] user = 17475 Cloud 164/568
[2024-12-02 19:07:26.646540] user = 17475 Local 164/568
[2024-12-02 19:07:26.688831] user = 17475 Local+ 164/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:29.090592] user = 17475 MPDA- 164/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5439642324888226
Training on augumented user 94879 0/50 current_auc = 0.5439642324888226
User 94879 AUC after training: 0.5434223005012871
User 94879 does not improve AUC. Reverting changes.
Training on augumented user 25516 1/50 current_auc = 0.5439642324888226
User 25516 AUC after training: 0.5457255114483133
User 25516 improves AUC. Keeping the model.
Training on augumented user 110787 2/50 current_auc = 0.5457255114483133
User 110787 AUC after training: 0.5447771304701261
User 110787 does not improve AUC. Reverting changes.
Training on augumented user 77240 3/50 current_auc = 0.5457255114483133
User 77240 AUC after training: 0.546131960438965
User 77240 improves AUC. Keeping the model.
Training on augumented user 100156 4/50 current_auc = 0.546131960438965
User 100156 AUC after training: 0.5469448584202683
User 100156 improves AUC. Keeping the model.
Training on augumented user 7340 5/50 current_auc = 0.5469448584202683
User 7340 AUC after training: 0.5482996883891073
User 7340 improves AUC. Keeping the model.
Training on augumented user 15945 6/50 current_auc = 0.5482996883891073
User 15945 AUC after training: 0.5492480693672944
User 15945 improves AUC. Keeping the model.
Training on augumented user 2386 7/50 current_auc = 0.5492480693672944
User 2386 AUC after training: 0.5493835523641782
User 2386 improves AUC. Keeping the model.
Training on augumented user 55271 8/50 current_auc = 0.5493835523641782
User 55271 AUC after training: 0.5480287223953394
User 55271 does not improve AUC. Reverting changes.
Training on augumented user 74746 9/50 current_auc = 0.5493835523641782
User 74746 AUC after training: 0.5488416203766427
User 74746 does not improve AUC. Reverting changes.
Training on augumented user 100123 10/50 current_auc = 0.5493835523641782
User 100123 AUC after training: 0.5477577564015716
User 100123 does not improve AUC. Reverting changes.
Training on augumented user 115278 11/50 current_auc = 0.5493835523641782
User 115278 AUC after training: 0.5491125863704105
User 115278 does not improve AUC. Reverting changes.
Training on augumented user 43162 12/50 current_auc = 0.5493835523641782
User 43162 AUC after training: 0.5497900013548299
User 43162 improves AUC. Keeping the model.
Training on augumented user 113877 13/50 current_auc = 0.5497900013548299
User 113877 AUC after training: 0.5506028993361333
User 113877 improves AUC. Keeping the model.
Training on augumented user 117315 14/50 current_auc = 0.5506028993361333
User 117315 AUC after training: 0.5489771033735266
User 117315 does not improve AUC. Reverting changes.
Training on augumented user 15668 15/50 current_auc = 0.5506028993361333
User 15668 AUC after training: 0.5492480693672944
User 15668 does not improve AUC. Reverting changes.
Training on augumented user 132987 16/50 current_auc = 0.5506028993361333
User 132987 AUC after training: 0.5514157973174366
User 132987 improves AUC. Keeping the model.
Training on augumented user 52596 17/50 current_auc = 0.5514157973174366
User 52596 AUC after training: 0.5495190353610622
User 52596 does not improve AUC. Reverting changes.
Training on augumented user 63681 18/50 current_auc = 0.5514157973174366
User 63681 AUC after training: 0.5507383823330172
User 63681 does not improve AUC. Reverting changes.
Training on augumented user 47901 19/50 current_auc = 0.5514157973174366
User 47901 AUC after training: 0.5466738924265004
User 47901 does not improve AUC. Reverting changes.
Training on augumented user 64325 20/50 current_auc = 0.5514157973174366
User 64325 AUC after training: 0.5507383823330172
User 64325 does not improve AUC. Reverting changes.
Training on augumented user 101924 21/50 current_auc = 0.5514157973174366
User 101924 AUC after training: 0.5503319333423654
User 101924 does not improve AUC. Reverting changes.
Training on augumented user 66704 22/50 current_auc = 0.5514157973174366
User 66704 AUC after training: 0.548570654382875
User 66704 does not improve AUC. Reverting changes.
Training on augumented user 24832 23/50 current_auc = 0.5514157973174366
User 24832 AUC after training: 0.5487061373797587
User 24832 does not improve AUC. Reverting changes.
Training on augumented user 137460 24/50 current_auc = 0.5514157973174366
User 137460 AUC after training: 0.5501964503454817
User 137460 does not improve AUC. Reverting changes.
Training on augumented user 88964 25/50 current_auc = 0.5514157973174366
User 88964 AUC after training: 0.5488416203766427
User 88964 does not improve AUC. Reverting changes.
Training on augumented user 111391 26/50 current_auc = 0.5514157973174366
User 111391 AUC after training: 0.5503319333423654
User 111391 does not improve AUC. Reverting changes.
Training on augumented user 29027 27/50 current_auc = 0.5514157973174366
User 29027 AUC after training: 0.5510093483267849
User 29027 does not improve AUC. Reverting changes.
Training on augumented user 132381 28/50 current_auc = 0.5514157973174366
User 132381 AUC after training: 0.552093212301856
User 132381 improves AUC. Keeping the model.
Training on augumented user 66644 29/50 current_auc = 0.552093212301856
User 66644 AUC after training: 0.5522286952987401
User 66644 improves AUC. Keeping the model.
Training on augumented user 40641 30/50 current_auc = 0.5522286952987401
User 40641 AUC after training: 0.552093212301856
User 40641 does not improve AUC. Reverting changes.
Training on augumented user 59418 31/50 current_auc = 0.5522286952987401
User 59418 AUC after training: 0.5526351442893918
User 59418 improves AUC. Keeping the model.
Training on augumented user 46339 32/50 current_auc = 0.5526351442893918
User 46339 AUC after training: 0.5519577293049722
User 46339 does not improve AUC. Reverting changes.
Training on augumented user 55458 33/50 current_auc = 0.5526351442893918
User 55458 AUC after training: 0.55222869529874
User 55458 does not improve AUC. Reverting changes.
Training on augumented user 71443 34/50 current_auc = 0.5526351442893918
User 71443 AUC after training: 0.5530415932800434
User 71443 improves AUC. Keeping the model.
Training on augumented user 4234 35/50 current_auc = 0.5530415932800434
User 4234 AUC after training: 0.5512803143205528
User 4234 does not improve AUC. Reverting changes.
Training on augumented user 117924 36/50 current_auc = 0.5530415932800434
User 117924 AUC after training: 0.55222869529874
User 117924 does not improve AUC. Reverting changes.
Training on augumented user 66684 37/50 current_auc = 0.5530415932800434
User 66684 AUC after training: 0.5529061102831595
User 66684 does not improve AUC. Reverting changes.
Training on augumented user 51284 38/50 current_auc = 0.5530415932800434
User 51284 AUC after training: 0.5523641782956239
User 51284 does not improve AUC. Reverting changes.
Training on augumented user 57951 39/50 current_auc = 0.5530415932800434
User 57951 AUC after training: 0.5527706272862756
User 57951 does not improve AUC. Reverting changes.
Training on augumented user 110015 40/50 current_auc = 0.5530415932800434
User 110015 AUC after training: 0.5531770762769272
User 110015 improves AUC. Keeping the model.
Training on augumented user 76174 41/50 current_auc = 0.5531770762769272
User 76174 AUC after training: 0.5529061102831595
User 76174 does not improve AUC. Reverting changes.
Training on augumented user 127272 42/50 current_auc = 0.5531770762769272
User 127272 AUC after training: 0.5526351442893918
User 127272 does not improve AUC. Reverting changes.
Training on augumented user 32491 43/50 current_auc = 0.5531770762769272
User 32491 AUC after training: 0.5529061102831594
User 32491 does not improve AUC. Reverting changes.
Training on augumented user 69687 44/50 current_auc = 0.5531770762769272
User 69687 AUC after training: 0.5527706272862756
User 69687 does not improve AUC. Reverting changes.
Training on augumented user 116644 45/50 current_auc = 0.5531770762769272
User 116644 AUC after training: 0.5529061102831595
User 116644 does not improve AUC. Reverting changes.
Training on augumented user 32338 46/50 current_auc = 0.5531770762769272
User 32338 AUC after training: 0.5527706272862756
User 32338 does not improve AUC. Reverting changes.
Training on augumented user 125674 47/50 current_auc = 0.5531770762769272
User 125674 AUC after training: 0.552093212301856
User 125674 does not improve AUC. Reverting changes.
Training on augumented user 110436 48/50 current_auc = 0.5531770762769272
User 110436 AUC after training: 0.5527706272862756
User 110436 does not improve AUC. Reverting changes.
Training on augumented user 85353 49/50 current_auc = 0.5531770762769272
User 85353 AUC after training: 0.5526351442893918
User 85353 does not improve AUC. Reverting changes.
[2024-12-02 19:07:55.633673] start test user 17479 165/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:56.403619] start test user 17479 165/568 recall augumented users by random, augumented_users = [64476, 67045, 54522, 100523, 59236, 18445, 130264, 20383, 2393, 121778, 44306, 56521, 84177, 129533, 39883, 24660, 58983, 37454, 17310, 103815, 134360, 113475, 104862, 21544, 85444, 53361, 13073, 120530, 104456, 16672, 27065, 18482, 44293, 67903, 7442, 14499, 30402, 67602, 131150, 1152, 16880, 22359, 75742, 80915, 137058, 108051, 36578, 133197, 3111, 6812]
[2024-12-02 19:07:56.419134] user = 17479 Cloud 165/568
[2024-12-02 19:07:56.441625] user = 17479 Local 165/568
[2024-12-02 19:07:56.529506] user = 17479 Local+ 165/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:58.904475] user = 17479 MPDA- 165/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5271164021164021
Training on augumented user 64476 0/50 current_auc = 0.5271164021164021
User 64476 AUC after training: 0.5251322751322751
User 64476 does not improve AUC. Reverting changes.
Training on augumented user 67045 1/50 current_auc = 0.5271164021164021
User 67045 AUC after training: 0.5264550264550264
User 67045 does not improve AUC. Reverting changes.
Training on augumented user 54522 2/50 current_auc = 0.5271164021164021
User 54522 AUC after training: 0.5257936507936508
User 54522 does not improve AUC. Reverting changes.
Training on augumented user 100523 3/50 current_auc = 0.5271164021164021
User 100523 AUC after training: 0.5271164021164021
User 100523 does not improve AUC. Reverting changes.
Training on augumented user 59236 4/50 current_auc = 0.5271164021164021
User 59236 AUC after training: 0.5271164021164021
User 59236 does not improve AUC. Reverting changes.
Training on augumented user 18445 5/50 current_auc = 0.5271164021164021
User 18445 AUC after training: 0.5251322751322751
User 18445 does not improve AUC. Reverting changes.
Training on augumented user 130264 6/50 current_auc = 0.5271164021164021
User 130264 AUC after training: 0.5277777777777778
User 130264 improves AUC. Keeping the model.
Training on augumented user 20383 7/50 current_auc = 0.5277777777777778
User 20383 AUC after training: 0.5284391534391535
User 20383 improves AUC. Keeping the model.
Training on augumented user 2393 8/50 current_auc = 0.5284391534391535
User 2393 AUC after training: 0.5304232804232805
User 2393 improves AUC. Keeping the model.
Training on augumented user 121778 9/50 current_auc = 0.5304232804232805
User 121778 AUC after training: 0.5304232804232805
User 121778 does not improve AUC. Reverting changes.
Training on augumented user 44306 10/50 current_auc = 0.5304232804232805
User 44306 AUC after training: 0.5304232804232805
User 44306 does not improve AUC. Reverting changes.
Training on augumented user 56521 11/50 current_auc = 0.5304232804232805
User 56521 AUC after training: 0.533068783068783
User 56521 improves AUC. Keeping the model.
Training on augumented user 84177 12/50 current_auc = 0.533068783068783
User 84177 AUC after training: 0.533068783068783
User 84177 does not improve AUC. Reverting changes.
Training on augumented user 129533 13/50 current_auc = 0.533068783068783
User 129533 AUC after training: 0.5337301587301587
User 129533 improves AUC. Keeping the model.
Training on augumented user 39883 14/50 current_auc = 0.5337301587301587
User 39883 AUC after training: 0.53505291005291
User 39883 improves AUC. Keeping the model.
Training on augumented user 24660 15/50 current_auc = 0.53505291005291
User 24660 AUC after training: 0.5343915343915344
User 24660 does not improve AUC. Reverting changes.
Training on augumented user 58983 16/50 current_auc = 0.53505291005291
User 58983 AUC after training: 0.5337301587301587
User 58983 does not improve AUC. Reverting changes.
Training on augumented user 37454 17/50 current_auc = 0.53505291005291
User 37454 AUC after training: 0.53505291005291
User 37454 does not improve AUC. Reverting changes.
Training on augumented user 17310 18/50 current_auc = 0.53505291005291
User 17310 AUC after training: 0.53505291005291
User 17310 does not improve AUC. Reverting changes.
Training on augumented user 103815 19/50 current_auc = 0.53505291005291
User 103815 AUC after training: 0.5337301587301587
User 103815 does not improve AUC. Reverting changes.
Training on augumented user 134360 20/50 current_auc = 0.53505291005291
User 134360 AUC after training: 0.53505291005291
User 134360 does not improve AUC. Reverting changes.
Training on augumented user 113475 21/50 current_auc = 0.53505291005291
User 113475 AUC after training: 0.5343915343915344
User 113475 does not improve AUC. Reverting changes.
Training on augumented user 104862 22/50 current_auc = 0.53505291005291
User 104862 AUC after training: 0.53505291005291
User 104862 does not improve AUC. Reverting changes.
Training on augumented user 21544 23/50 current_auc = 0.53505291005291
User 21544 AUC after training: 0.5337301587301587
User 21544 does not improve AUC. Reverting changes.
Training on augumented user 85444 24/50 current_auc = 0.53505291005291
User 85444 AUC after training: 0.5343915343915344
User 85444 does not improve AUC. Reverting changes.
Training on augumented user 53361 25/50 current_auc = 0.53505291005291
User 53361 AUC after training: 0.5357142857142857
User 53361 improves AUC. Keeping the model.
Training on augumented user 13073 26/50 current_auc = 0.5357142857142857
User 13073 AUC after training: 0.53505291005291
User 13073 does not improve AUC. Reverting changes.
Training on augumented user 120530 27/50 current_auc = 0.5357142857142857
User 120530 AUC after training: 0.53505291005291
User 120530 does not improve AUC. Reverting changes.
Training on augumented user 104456 28/50 current_auc = 0.5357142857142857
User 104456 AUC after training: 0.53505291005291
User 104456 does not improve AUC. Reverting changes.
Training on augumented user 16672 29/50 current_auc = 0.5357142857142857
User 16672 AUC after training: 0.5357142857142857
User 16672 does not improve AUC. Reverting changes.
Training on augumented user 27065 30/50 current_auc = 0.5357142857142857
User 27065 AUC after training: 0.53505291005291
User 27065 does not improve AUC. Reverting changes.
Training on augumented user 18482 31/50 current_auc = 0.5357142857142857
User 18482 AUC after training: 0.53505291005291
User 18482 does not improve AUC. Reverting changes.
Training on augumented user 44293 32/50 current_auc = 0.5357142857142857
User 44293 AUC after training: 0.5357142857142857
User 44293 does not improve AUC. Reverting changes.
Training on augumented user 67903 33/50 current_auc = 0.5357142857142857
User 67903 AUC after training: 0.533068783068783
User 67903 does not improve AUC. Reverting changes.
Training on augumented user 7442 34/50 current_auc = 0.5357142857142857
User 7442 AUC after training: 0.53505291005291
User 7442 does not improve AUC. Reverting changes.
Training on augumented user 14499 35/50 current_auc = 0.5357142857142857
User 14499 AUC after training: 0.53505291005291
User 14499 does not improve AUC. Reverting changes.
Training on augumented user 30402 36/50 current_auc = 0.5357142857142857
User 30402 AUC after training: 0.53505291005291
User 30402 does not improve AUC. Reverting changes.
Training on augumented user 67602 37/50 current_auc = 0.5357142857142857
User 67602 AUC after training: 0.5357142857142857
User 67602 does not improve AUC. Reverting changes.
Training on augumented user 131150 38/50 current_auc = 0.5357142857142857
User 131150 AUC after training: 0.5337301587301587
User 131150 does not improve AUC. Reverting changes.
Training on augumented user 1152 39/50 current_auc = 0.5357142857142857
User 1152 AUC after training: 0.5357142857142857
User 1152 does not improve AUC. Reverting changes.
Training on augumented user 16880 40/50 current_auc = 0.5357142857142857
User 16880 AUC after training: 0.5343915343915344
User 16880 does not improve AUC. Reverting changes.
Training on augumented user 22359 41/50 current_auc = 0.5357142857142857
User 22359 AUC after training: 0.53505291005291
User 22359 does not improve AUC. Reverting changes.
Training on augumented user 75742 42/50 current_auc = 0.5357142857142857
User 75742 AUC after training: 0.5337301587301587
User 75742 does not improve AUC. Reverting changes.
Training on augumented user 80915 43/50 current_auc = 0.5357142857142857
User 80915 AUC after training: 0.53505291005291
User 80915 does not improve AUC. Reverting changes.
Training on augumented user 137058 44/50 current_auc = 0.5357142857142857
User 137058 AUC after training: 0.53505291005291
User 137058 does not improve AUC. Reverting changes.
Training on augumented user 108051 45/50 current_auc = 0.5357142857142857
User 108051 AUC after training: 0.5363756613756614
User 108051 improves AUC. Keeping the model.
Training on augumented user 36578 46/50 current_auc = 0.5363756613756614
User 36578 AUC after training: 0.5337301587301587
User 36578 does not improve AUC. Reverting changes.
Training on augumented user 133197 47/50 current_auc = 0.5363756613756614
User 133197 AUC after training: 0.533068783068783
User 133197 does not improve AUC. Reverting changes.
Training on augumented user 3111 48/50 current_auc = 0.5363756613756614
User 3111 AUC after training: 0.53505291005291
User 3111 does not improve AUC. Reverting changes.
Training on augumented user 6812 49/50 current_auc = 0.5363756613756614
User 6812 AUC after training: 0.5357142857142857
User 6812 does not improve AUC. Reverting changes.
[2024-12-02 19:08:27.064425] start test user 17488 166/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:27.948813] start test user 17488 166/568 recall augumented users by random, augumented_users = [41397, 86156, 113532, 110392, 31045, 91999, 58319, 107113, 45309, 57178, 97492, 126945, 58591, 65414, 130208, 61437, 93813, 105137, 135460, 42512, 36968, 119976, 58666, 131359, 60098, 27096, 97951, 45658, 7251, 35701, 96830, 21886, 35818, 6709, 116743, 8941, 24533, 47374, 120202, 67151, 48165, 54725, 7267, 133389, 34989, 44687, 40465, 75147, 42167, 84780]
[2024-12-02 19:08:27.964567] user = 17488 Cloud 166/568
[2024-12-02 19:08:27.996616] user = 17488 Local 166/568
[2024-12-02 19:08:28.178038] user = 17488 Local+ 166/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:30.820091] user = 17488 MPDA- 166/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6481632653061224
Training on augumented user 41397 0/50 current_auc = 0.6481632653061224
User 41397 AUC after training: 0.6477551020408163
User 41397 does not improve AUC. Reverting changes.
Training on augumented user 86156 1/50 current_auc = 0.6481632653061224
User 86156 AUC after training: 0.6499999999999999
User 86156 improves AUC. Keeping the model.
Training on augumented user 113532 2/50 current_auc = 0.6499999999999999
User 113532 AUC after training: 0.6491836734693879
User 113532 does not improve AUC. Reverting changes.
Training on augumented user 110392 3/50 current_auc = 0.6499999999999999
User 110392 AUC after training: 0.6487755102040816
User 110392 does not improve AUC. Reverting changes.
Training on augumented user 31045 4/50 current_auc = 0.6499999999999999
User 31045 AUC after training: 0.6493877551020408
User 31045 does not improve AUC. Reverting changes.
Training on augumented user 91999 5/50 current_auc = 0.6499999999999999
User 91999 AUC after training: 0.6483673469387755
User 91999 does not improve AUC. Reverting changes.
Training on augumented user 58319 6/50 current_auc = 0.6499999999999999
User 58319 AUC after training: 0.6489795918367347
User 58319 does not improve AUC. Reverting changes.
Training on augumented user 107113 7/50 current_auc = 0.6499999999999999
User 107113 AUC after training: 0.6489795918367347
User 107113 does not improve AUC. Reverting changes.
Training on augumented user 45309 8/50 current_auc = 0.6499999999999999
User 45309 AUC after training: 0.6493877551020408
User 45309 does not improve AUC. Reverting changes.
Training on augumented user 57178 9/50 current_auc = 0.6499999999999999
User 57178 AUC after training: 0.6485714285714286
User 57178 does not improve AUC. Reverting changes.
Training on augumented user 97492 10/50 current_auc = 0.6499999999999999
User 97492 AUC after training: 0.6485714285714286
User 97492 does not improve AUC. Reverting changes.
Training on augumented user 126945 11/50 current_auc = 0.6499999999999999
User 126945 AUC after training: 0.6487755102040815
User 126945 does not improve AUC. Reverting changes.
Training on augumented user 58591 12/50 current_auc = 0.6499999999999999
User 58591 AUC after training: 0.6487755102040816
User 58591 does not improve AUC. Reverting changes.
Training on augumented user 65414 13/50 current_auc = 0.6499999999999999
User 65414 AUC after training: 0.6493877551020408
User 65414 does not improve AUC. Reverting changes.
Training on augumented user 130208 14/50 current_auc = 0.6499999999999999
User 130208 AUC after training: 0.6491836734693878
User 130208 does not improve AUC. Reverting changes.
Training on augumented user 61437 15/50 current_auc = 0.6499999999999999
User 61437 AUC after training: 0.6479591836734694
User 61437 does not improve AUC. Reverting changes.
Training on augumented user 93813 16/50 current_auc = 0.6499999999999999
User 93813 AUC after training: 0.6481632653061224
User 93813 does not improve AUC. Reverting changes.
Training on augumented user 105137 17/50 current_auc = 0.6499999999999999
User 105137 AUC after training: 0.6491836734693877
User 105137 does not improve AUC. Reverting changes.
Training on augumented user 135460 18/50 current_auc = 0.6499999999999999
User 135460 AUC after training: 0.6495918367346938
User 135460 does not improve AUC. Reverting changes.
Training on augumented user 42512 19/50 current_auc = 0.6499999999999999
User 42512 AUC after training: 0.6506122448979592
User 42512 improves AUC. Keeping the model.
Training on augumented user 36968 20/50 current_auc = 0.6506122448979592
User 36968 AUC after training: 0.6518367346938776
User 36968 improves AUC. Keeping the model.
Training on augumented user 119976 21/50 current_auc = 0.6518367346938776
User 119976 AUC after training: 0.6512244897959183
User 119976 does not improve AUC. Reverting changes.
Training on augumented user 58666 22/50 current_auc = 0.6518367346938776
User 58666 AUC after training: 0.6487755102040816
User 58666 does not improve AUC. Reverting changes.
Training on augumented user 131359 23/50 current_auc = 0.6518367346938776
User 131359 AUC after training: 0.6504081632653061
User 131359 does not improve AUC. Reverting changes.
Training on augumented user 60098 24/50 current_auc = 0.6518367346938776
User 60098 AUC after training: 0.6506122448979592
User 60098 does not improve AUC. Reverting changes.
Training on augumented user 27096 25/50 current_auc = 0.6518367346938776
User 27096 AUC after training: 0.6512244897959184
User 27096 does not improve AUC. Reverting changes.
Training on augumented user 97951 26/50 current_auc = 0.6518367346938776
User 97951 AUC after training: 0.6514285714285715
User 97951 does not improve AUC. Reverting changes.
Training on augumented user 45658 27/50 current_auc = 0.6518367346938776
User 45658 AUC after training: 0.6502040816326531
User 45658 does not improve AUC. Reverting changes.
Training on augumented user 7251 28/50 current_auc = 0.6518367346938776
User 7251 AUC after training: 0.6514285714285714
User 7251 does not improve AUC. Reverting changes.
Training on augumented user 35701 29/50 current_auc = 0.6518367346938776
User 35701 AUC after training: 0.6495918367346939
User 35701 does not improve AUC. Reverting changes.
Training on augumented user 96830 30/50 current_auc = 0.6518367346938776
User 96830 AUC after training: 0.6514285714285714
User 96830 does not improve AUC. Reverting changes.
Training on augumented user 21886 31/50 current_auc = 0.6518367346938776
User 21886 AUC after training: 0.65
User 21886 does not improve AUC. Reverting changes.
Training on augumented user 35818 32/50 current_auc = 0.6518367346938776
User 35818 AUC after training: 0.6508163265306122
User 35818 does not improve AUC. Reverting changes.
Training on augumented user 6709 33/50 current_auc = 0.6518367346938776
User 6709 AUC after training: 0.6491836734693877
User 6709 does not improve AUC. Reverting changes.
Training on augumented user 116743 34/50 current_auc = 0.6518367346938776
User 116743 AUC after training: 0.6506122448979592
User 116743 does not improve AUC. Reverting changes.
Training on augumented user 8941 35/50 current_auc = 0.6518367346938776
User 8941 AUC after training: 0.6510204081632652
User 8941 does not improve AUC. Reverting changes.
Training on augumented user 24533 36/50 current_auc = 0.6518367346938776
User 24533 AUC after training: 0.6508163265306122
User 24533 does not improve AUC. Reverting changes.
Training on augumented user 47374 37/50 current_auc = 0.6518367346938776
User 47374 AUC after training: 0.6516326530612245
User 47374 does not improve AUC. Reverting changes.
Training on augumented user 120202 38/50 current_auc = 0.6518367346938776
User 120202 AUC after training: 0.6502040816326531
User 120202 does not improve AUC. Reverting changes.
Training on augumented user 67151 39/50 current_auc = 0.6518367346938776
User 67151 AUC after training: 0.6514285714285714
User 67151 does not improve AUC. Reverting changes.
Training on augumented user 48165 40/50 current_auc = 0.6518367346938776
User 48165 AUC after training: 0.6512244897959184
User 48165 does not improve AUC. Reverting changes.
Training on augumented user 54725 41/50 current_auc = 0.6518367346938776
User 54725 AUC after training: 0.6508163265306122
User 54725 does not improve AUC. Reverting changes.
Training on augumented user 7267 42/50 current_auc = 0.6518367346938776
User 7267 AUC after training: 0.6510204081632652
User 7267 does not improve AUC. Reverting changes.
Training on augumented user 133389 43/50 current_auc = 0.6518367346938776
User 133389 AUC after training: 0.6485714285714286
User 133389 does not improve AUC. Reverting changes.
Training on augumented user 34989 44/50 current_auc = 0.6518367346938776
User 34989 AUC after training: 0.6510204081632653
User 34989 does not improve AUC. Reverting changes.
Training on augumented user 44687 45/50 current_auc = 0.6518367346938776
User 44687 AUC after training: 0.6514285714285714
User 44687 does not improve AUC. Reverting changes.
Training on augumented user 40465 46/50 current_auc = 0.6518367346938776
User 40465 AUC after training: 0.6516326530612245
User 40465 does not improve AUC. Reverting changes.
Training on augumented user 75147 47/50 current_auc = 0.6518367346938776
User 75147 AUC after training: 0.6510204081632653
User 75147 does not improve AUC. Reverting changes.
Training on augumented user 42167 48/50 current_auc = 0.6518367346938776
User 42167 AUC after training: 0.6510204081632653
User 42167 does not improve AUC. Reverting changes.
Training on augumented user 84780 49/50 current_auc = 0.6518367346938776
User 84780 AUC after training: 0.6512244897959183
User 84780 does not improve AUC. Reverting changes.
[2024-12-02 19:09:05.319195] start test user 17503 167/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:06.157969] start test user 17503 167/568 recall augumented users by random, augumented_users = [26944, 58294, 59292, 36689, 128691, 116634, 7259, 87235, 5889, 92570, 75482, 109575, 80785, 51718, 62760, 81975, 59423, 133249, 37553, 54255, 66658, 58380, 118614, 76253, 19839, 129686, 28210, 33520, 81555, 3131, 21497, 24913, 88681, 84133, 71856, 20480, 101117, 67987, 23198, 121832, 44462, 12643, 75839, 26240, 59298, 55085, 37901, 51880, 25583, 25865]
[2024-12-02 19:09:06.174619] user = 17503 Cloud 167/568
[2024-12-02 19:09:06.189402] user = 17503 Local 167/568
[2024-12-02 19:09:06.440824] user = 17503 Local+ 167/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:08.517095] user = 17503 MPDA- 167/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6030612244897959
Training on augumented user 26944 0/50 current_auc = 0.6030612244897959
User 26944 AUC after training: 0.6066326530612245
User 26944 improves AUC. Keeping the model.
Training on augumented user 58294 1/50 current_auc = 0.6066326530612245
User 58294 AUC after training: 0.6051020408163266
User 58294 does not improve AUC. Reverting changes.
Training on augumented user 59292 2/50 current_auc = 0.6066326530612245
User 59292 AUC after training: 0.6061224489795919
User 59292 does not improve AUC. Reverting changes.
Training on augumented user 36689 3/50 current_auc = 0.6066326530612245
User 36689 AUC after training: 0.6056122448979592
User 36689 does not improve AUC. Reverting changes.
Training on augumented user 128691 4/50 current_auc = 0.6066326530612245
User 128691 AUC after training: 0.6061224489795918
User 128691 does not improve AUC. Reverting changes.
Training on augumented user 116634 5/50 current_auc = 0.6066326530612245
User 116634 AUC after training: 0.601530612244898
User 116634 does not improve AUC. Reverting changes.
Training on augumented user 7259 6/50 current_auc = 0.6066326530612245
User 7259 AUC after training: 0.6056122448979593
User 7259 does not improve AUC. Reverting changes.
Training on augumented user 87235 7/50 current_auc = 0.6066326530612245
User 87235 AUC after training: 0.6045918367346939
User 87235 does not improve AUC. Reverting changes.
Training on augumented user 5889 8/50 current_auc = 0.6066326530612245
User 5889 AUC after training: 0.6045918367346939
User 5889 does not improve AUC. Reverting changes.
Training on augumented user 92570 9/50 current_auc = 0.6066326530612245
User 92570 AUC after training: 0.598469387755102
User 92570 does not improve AUC. Reverting changes.
Training on augumented user 75482 10/50 current_auc = 0.6066326530612245
User 75482 AUC after training: 0.6051020408163266
User 75482 does not improve AUC. Reverting changes.
Training on augumented user 109575 11/50 current_auc = 0.6066326530612245
User 109575 AUC after training: 0.6051020408163266
User 109575 does not improve AUC. Reverting changes.
Training on augumented user 80785 12/50 current_auc = 0.6066326530612245
User 80785 AUC after training: 0.6056122448979592
User 80785 does not improve AUC. Reverting changes.
Training on augumented user 51718 13/50 current_auc = 0.6066326530612245
User 51718 AUC after training: 0.6056122448979593
User 51718 does not improve AUC. Reverting changes.
Training on augumented user 62760 14/50 current_auc = 0.6066326530612245
User 62760 AUC after training: 0.6076530612244898
User 62760 improves AUC. Keeping the model.
Training on augumented user 81975 15/50 current_auc = 0.6076530612244898
User 81975 AUC after training: 0.6056122448979592
User 81975 does not improve AUC. Reverting changes.
Training on augumented user 59423 16/50 current_auc = 0.6076530612244898
User 59423 AUC after training: 0.6076530612244898
User 59423 does not improve AUC. Reverting changes.
Training on augumented user 133249 17/50 current_auc = 0.6076530612244898
User 133249 AUC after training: 0.6081632653061224
User 133249 improves AUC. Keeping the model.
Training on augumented user 37553 18/50 current_auc = 0.6081632653061224
User 37553 AUC after training: 0.6112244897959184
User 37553 improves AUC. Keeping the model.
Training on augumented user 54255 19/50 current_auc = 0.6112244897959184
User 54255 AUC after training: 0.6117346938775511
User 54255 improves AUC. Keeping the model.
Training on augumented user 66658 20/50 current_auc = 0.6117346938775511
User 66658 AUC after training: 0.6137755102040816
User 66658 improves AUC. Keeping the model.
Training on augumented user 58380 21/50 current_auc = 0.6137755102040816
User 58380 AUC after training: 0.6153061224489796
User 58380 improves AUC. Keeping the model.
Training on augumented user 118614 22/50 current_auc = 0.6153061224489796
User 118614 AUC after training: 0.6147959183673469
User 118614 does not improve AUC. Reverting changes.
Training on augumented user 76253 23/50 current_auc = 0.6153061224489796
User 76253 AUC after training: 0.6158163265306122
User 76253 improves AUC. Keeping the model.
Training on augumented user 19839 24/50 current_auc = 0.6158163265306122
User 19839 AUC after training: 0.6142857142857143
User 19839 does not improve AUC. Reverting changes.
Training on augumented user 129686 25/50 current_auc = 0.6158163265306122
User 129686 AUC after training: 0.6137755102040816
User 129686 does not improve AUC. Reverting changes.
Training on augumented user 28210 26/50 current_auc = 0.6158163265306122
User 28210 AUC after training: 0.6168367346938776
User 28210 improves AUC. Keeping the model.
Training on augumented user 33520 27/50 current_auc = 0.6168367346938776
User 33520 AUC after training: 0.6178571428571429
User 33520 improves AUC. Keeping the model.
Training on augumented user 81555 28/50 current_auc = 0.6178571428571429
User 81555 AUC after training: 0.6209183673469387
User 81555 improves AUC. Keeping the model.
Training on augumented user 3131 29/50 current_auc = 0.6209183673469387
User 3131 AUC after training: 0.621938775510204
User 3131 improves AUC. Keeping the model.
Training on augumented user 21497 30/50 current_auc = 0.621938775510204
User 21497 AUC after training: 0.6198979591836735
User 21497 does not improve AUC. Reverting changes.
Training on augumented user 24913 31/50 current_auc = 0.621938775510204
User 24913 AUC after training: 0.6239795918367347
User 24913 improves AUC. Keeping the model.
Training on augumented user 88681 32/50 current_auc = 0.6239795918367347
User 88681 AUC after training: 0.6239795918367347
User 88681 does not improve AUC. Reverting changes.
Training on augumented user 84133 33/50 current_auc = 0.6239795918367347
User 84133 AUC after training: 0.6198979591836735
User 84133 does not improve AUC. Reverting changes.
Training on augumented user 71856 34/50 current_auc = 0.6239795918367347
User 71856 AUC after training: 0.6183673469387755
User 71856 does not improve AUC. Reverting changes.
Training on augumented user 20480 35/50 current_auc = 0.6239795918367347
User 20480 AUC after training: 0.6204081632653061
User 20480 does not improve AUC. Reverting changes.
Training on augumented user 101117 36/50 current_auc = 0.6239795918367347
User 101117 AUC after training: 0.623469387755102
User 101117 does not improve AUC. Reverting changes.
Training on augumented user 67987 37/50 current_auc = 0.6239795918367347
User 67987 AUC after training: 0.6204081632653061
User 67987 does not improve AUC. Reverting changes.
Training on augumented user 23198 38/50 current_auc = 0.6239795918367347
User 23198 AUC after training: 0.6198979591836735
User 23198 does not improve AUC. Reverting changes.
Training on augumented user 121832 39/50 current_auc = 0.6239795918367347
User 121832 AUC after training: 0.6224489795918368
User 121832 does not improve AUC. Reverting changes.
Training on augumented user 44462 40/50 current_auc = 0.6239795918367347
User 44462 AUC after training: 0.621938775510204
User 44462 does not improve AUC. Reverting changes.
Training on augumented user 12643 41/50 current_auc = 0.6239795918367347
User 12643 AUC after training: 0.621938775510204
User 12643 does not improve AUC. Reverting changes.
Training on augumented user 75839 42/50 current_auc = 0.6239795918367347
User 75839 AUC after training: 0.6173469387755103
User 75839 does not improve AUC. Reverting changes.
Training on augumented user 26240 43/50 current_auc = 0.6239795918367347
User 26240 AUC after training: 0.6239795918367347
User 26240 does not improve AUC. Reverting changes.
Training on augumented user 59298 44/50 current_auc = 0.6239795918367347
User 59298 AUC after training: 0.6224489795918368
User 59298 does not improve AUC. Reverting changes.
Training on augumented user 55085 45/50 current_auc = 0.6239795918367347
User 55085 AUC after training: 0.6224489795918366
User 55085 does not improve AUC. Reverting changes.
Training on augumented user 37901 46/50 current_auc = 0.6239795918367347
User 37901 AUC after training: 0.6244897959183673
User 37901 improves AUC. Keeping the model.
Training on augumented user 51880 47/50 current_auc = 0.6244897959183673
User 51880 AUC after training: 0.621938775510204
User 51880 does not improve AUC. Reverting changes.
Training on augumented user 25583 48/50 current_auc = 0.6244897959183673
User 25583 AUC after training: 0.6209183673469388
User 25583 does not improve AUC. Reverting changes.
Training on augumented user 25865 49/50 current_auc = 0.6244897959183673
User 25865 AUC after training: 0.616326530612245
User 25865 does not improve AUC. Reverting changes.
[2024-12-02 19:09:37.525310] start test user 17508 168/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:38.173595] start test user 17508 168/568 recall augumented users by random, augumented_users = [120260, 83311, 110723, 95485, 68711, 76452, 13322, 11782, 91461, 83537, 93543, 26025, 138061, 35750, 43026, 89268, 793, 48918, 109576, 87174, 20608, 121255, 11292, 56034, 66961, 32066, 126809, 47946, 103046, 106772, 138074, 50470, 35475, 80132, 37389, 19712, 92384, 31462, 113177, 64376, 119038, 77541, 92525, 41642, 42334, 7036, 122722, 99469, 127310, 86046]
[2024-12-02 19:09:38.188626] user = 17508 Cloud 168/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:09:38.194798] user = 17508 Local 168/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:09:38.229707] user = 17508 Local+ 168/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:09:39.846234] user = 17508 MPDA- 168/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 120260 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120260 AUC after training: 0.5
User 120260 does not improve AUC. Reverting changes.
Training on augumented user 83311 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83311 AUC after training: 0.5
User 83311 does not improve AUC. Reverting changes.
Training on augumented user 110723 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110723 AUC after training: 0.5
User 110723 does not improve AUC. Reverting changes.
Training on augumented user 95485 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95485 AUC after training: 0.5
User 95485 does not improve AUC. Reverting changes.
Training on augumented user 68711 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68711 AUC after training: 0.5
User 68711 does not improve AUC. Reverting changes.
Training on augumented user 76452 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76452 AUC after training: 0.5
User 76452 does not improve AUC. Reverting changes.
Training on augumented user 13322 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13322 AUC after training: 0.5
User 13322 does not improve AUC. Reverting changes.
Training on augumented user 11782 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11782 AUC after training: 0.5
User 11782 does not improve AUC. Reverting changes.
Training on augumented user 91461 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91461 AUC after training: 0.5
User 91461 does not improve AUC. Reverting changes.
Training on augumented user 83537 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83537 AUC after training: 0.5
User 83537 does not improve AUC. Reverting changes.
Training on augumented user 93543 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93543 AUC after training: 0.5
User 93543 does not improve AUC. Reverting changes.
Training on augumented user 26025 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26025 AUC after training: 0.5
User 26025 does not improve AUC. Reverting changes.
Training on augumented user 138061 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138061 AUC after training: 0.5
User 138061 does not improve AUC. Reverting changes.
Training on augumented user 35750 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35750 AUC after training: 0.5
User 35750 does not improve AUC. Reverting changes.
Training on augumented user 43026 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43026 AUC after training: 0.5
User 43026 does not improve AUC. Reverting changes.
Training on augumented user 89268 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89268 AUC after training: 0.5
User 89268 does not improve AUC. Reverting changes.
Training on augumented user 793 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 793 AUC after training: 0.5
User 793 does not improve AUC. Reverting changes.
Training on augumented user 48918 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48918 AUC after training: 0.5
User 48918 does not improve AUC. Reverting changes.
Training on augumented user 109576 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109576 AUC after training: 0.5
User 109576 does not improve AUC. Reverting changes.
Training on augumented user 87174 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87174 AUC after training: 0.5
User 87174 does not improve AUC. Reverting changes.
Training on augumented user 20608 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20608 AUC after training: 0.5
User 20608 does not improve AUC. Reverting changes.
Training on augumented user 121255 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121255 AUC after training: 0.5
User 121255 does not improve AUC. Reverting changes.
Training on augumented user 11292 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11292 AUC after training: 0.5
User 11292 does not improve AUC. Reverting changes.
Training on augumented user 56034 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56034 AUC after training: 0.5
User 56034 does not improve AUC. Reverting changes.
Training on augumented user 66961 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66961 AUC after training: 0.5
User 66961 does not improve AUC. Reverting changes.
Training on augumented user 32066 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32066 AUC after training: 0.5
User 32066 does not improve AUC. Reverting changes.
Training on augumented user 126809 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126809 AUC after training: 0.5
User 126809 does not improve AUC. Reverting changes.
Training on augumented user 47946 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47946 AUC after training: 0.5
User 47946 does not improve AUC. Reverting changes.
Training on augumented user 103046 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103046 AUC after training: 0.5
User 103046 does not improve AUC. Reverting changes.
Training on augumented user 106772 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106772 AUC after training: 0.5
User 106772 does not improve AUC. Reverting changes.
Training on augumented user 138074 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138074 AUC after training: 0.5
User 138074 does not improve AUC. Reverting changes.
Training on augumented user 50470 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50470 AUC after training: 0.5
User 50470 does not improve AUC. Reverting changes.
Training on augumented user 35475 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35475 AUC after training: 0.5
User 35475 does not improve AUC. Reverting changes.
Training on augumented user 80132 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80132 AUC after training: 0.5
User 80132 does not improve AUC. Reverting changes.
Training on augumented user 37389 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37389 AUC after training: 0.5
User 37389 does not improve AUC. Reverting changes.
Training on augumented user 19712 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19712 AUC after training: 0.5
User 19712 does not improve AUC. Reverting changes.
Training on augumented user 92384 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92384 AUC after training: 0.5
User 92384 does not improve AUC. Reverting changes.
Training on augumented user 31462 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31462 AUC after training: 0.5
User 31462 does not improve AUC. Reverting changes.
Training on augumented user 113177 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113177 AUC after training: 0.5
User 113177 does not improve AUC. Reverting changes.
Training on augumented user 64376 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64376 AUC after training: 0.5
User 64376 does not improve AUC. Reverting changes.
Training on augumented user 119038 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119038 AUC after training: 0.5
User 119038 does not improve AUC. Reverting changes.
Training on augumented user 77541 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77541 AUC after training: 0.5
User 77541 does not improve AUC. Reverting changes.
Training on augumented user 92525 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92525 AUC after training: 0.5
User 92525 does not improve AUC. Reverting changes.
Training on augumented user 41642 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41642 AUC after training: 0.5
User 41642 does not improve AUC. Reverting changes.
Training on augumented user 42334 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42334 AUC after training: 0.5
User 42334 does not improve AUC. Reverting changes.
Training on augumented user 7036 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7036 AUC after training: 0.5
User 7036 does not improve AUC. Reverting changes.
Training on augumented user 122722 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122722 AUC after training: 0.5
User 122722 does not improve AUC. Reverting changes.
Training on augumented user 99469 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99469 AUC after training: 0.5
User 99469 does not improve AUC. Reverting changes.
Training on augumented user 127310 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127310 AUC after training: 0.5
User 127310 does not improve AUC. Reverting changes.
Training on augumented user 86046 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86046 AUC after training: 0.5
User 86046 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:10:09.276736] start test user 17510 169/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:10.119205] start test user 17510 169/568 recall augumented users by random, augumented_users = [117577, 124658, 65175, 22516, 62009, 72006, 61354, 59593, 35995, 46463, 64707, 16202, 75161, 34157, 58395, 25713, 59634, 43032, 74160, 93080, 137135, 50558, 137943, 71349, 19910, 136850, 38045, 42159, 33868, 80749, 36942, 33047, 42715, 119227, 89419, 72642, 78397, 39634, 84057, 109516, 5157, 47394, 75110, 11921, 131319, 132695, 55284, 47132, 103717, 115159]
[2024-12-02 19:10:10.134827] user = 17510 Cloud 169/568
[2024-12-02 19:10:10.188488] user = 17510 Local 169/568
[2024-12-02 19:10:10.229893] user = 17510 Local+ 169/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:12.987720] user = 17510 MPDA- 169/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6574367088607596
Training on augumented user 117577 0/50 current_auc = 0.6574367088607596
User 117577 AUC after training: 0.6579951600893522
User 117577 improves AUC. Keeping the model.
Training on augumented user 124658 1/50 current_auc = 0.6579951600893522
User 124658 AUC after training: 0.6584139985107967
User 124658 improves AUC. Keeping the model.
Training on augumented user 65175 2/50 current_auc = 0.6584139985107967
User 65175 AUC after training: 0.6582743857036485
User 65175 does not improve AUC. Reverting changes.
Training on augumented user 22516 3/50 current_auc = 0.6584139985107967
User 22516 AUC after training: 0.6579951600893521
User 22516 does not improve AUC. Reverting changes.
Training on augumented user 62009 4/50 current_auc = 0.6584139985107967
User 62009 AUC after training: 0.6594378257632166
User 62009 improves AUC. Keeping the model.
Training on augumented user 72006 5/50 current_auc = 0.6594378257632166
User 72006 AUC after training: 0.6578090096798214
User 72006 does not improve AUC. Reverting changes.
Training on augumented user 61354 6/50 current_auc = 0.6594378257632166
User 61354 AUC after training: 0.6591586001489204
User 61354 does not improve AUC. Reverting changes.
Training on augumented user 59593 7/50 current_auc = 0.6594378257632166
User 59593 AUC after training: 0.6589259121370067
User 59593 does not improve AUC. Reverting changes.
Training on augumented user 35995 8/50 current_auc = 0.6594378257632166
User 35995 AUC after training: 0.6593912881608339
User 35995 does not improve AUC. Reverting changes.
Training on augumented user 46463 9/50 current_auc = 0.6594378257632166
User 46463 AUC after training: 0.6588328369322413
User 46463 does not improve AUC. Reverting changes.
Training on augumented user 64707 10/50 current_auc = 0.6594378257632166
User 64707 AUC after training: 0.6576228592702904
User 64707 does not improve AUC. Reverting changes.
Training on augumented user 16202 11/50 current_auc = 0.6594378257632166
User 16202 AUC after training: 0.6590655249441549
User 16202 does not improve AUC. Reverting changes.
Training on augumented user 75161 12/50 current_auc = 0.6594378257632166
User 75161 AUC after training: 0.6591120625465375
User 75161 does not improve AUC. Reverting changes.
Training on augumented user 34157 13/50 current_auc = 0.6594378257632166
User 34157 AUC after training: 0.6600893521965748
User 34157 improves AUC. Keeping the model.
Training on augumented user 58395 14/50 current_auc = 0.6600893521965748
User 58395 AUC after training: 0.6591120625465376
User 58395 does not improve AUC. Reverting changes.
Training on augumented user 25713 15/50 current_auc = 0.6600893521965748
User 25713 AUC after training: 0.6587397617274758
User 25713 does not improve AUC. Reverting changes.
Training on augumented user 59634 16/50 current_auc = 0.6600893521965748
User 59634 AUC after training: 0.6600893521965748
User 59634 does not improve AUC. Reverting changes.
Training on augumented user 43032 17/50 current_auc = 0.6600893521965748
User 43032 AUC after training: 0.6602755026061057
User 43032 improves AUC. Keeping the model.
Training on augumented user 74160 18/50 current_auc = 0.6602755026061057
User 74160 AUC after training: 0.6581347728965004
User 74160 does not improve AUC. Reverting changes.
Training on augumented user 93080 19/50 current_auc = 0.6602755026061057
User 93080 AUC after training: 0.6598566641846612
User 93080 does not improve AUC. Reverting changes.
Training on augumented user 137135 20/50 current_auc = 0.6602755026061057
User 137135 AUC after training: 0.6602755026061057
User 137135 does not improve AUC. Reverting changes.
Training on augumented user 50558 21/50 current_auc = 0.6602755026061057
User 50558 AUC after training: 0.6595309009679821
User 50558 does not improve AUC. Reverting changes.
Training on augumented user 137943 22/50 current_auc = 0.6602755026061057
User 137943 AUC after training: 0.6600893521965748
User 137943 does not improve AUC. Reverting changes.
Training on augumented user 71349 23/50 current_auc = 0.6602755026061057
User 71349 AUC after training: 0.6599962769918094
User 71349 does not improve AUC. Reverting changes.
Training on augumented user 19910 24/50 current_auc = 0.6602755026061057
User 19910 AUC after training: 0.6594378257632167
User 19910 does not improve AUC. Reverting changes.
Training on augumented user 136850 25/50 current_auc = 0.6602755026061057
User 136850 AUC after training: 0.659717051377513
User 136850 does not improve AUC. Reverting changes.
Training on augumented user 38045 26/50 current_auc = 0.6602755026061057
User 38045 AUC after training: 0.6599032017870439
User 38045 does not improve AUC. Reverting changes.
Training on augumented user 42159 27/50 current_auc = 0.6602755026061057
User 42159 AUC after training: 0.6586466865227104
User 42159 does not improve AUC. Reverting changes.
Training on augumented user 33868 28/50 current_auc = 0.6602755026061057
User 33868 AUC after training: 0.6590189873417721
User 33868 does not improve AUC. Reverting changes.
Training on augumented user 80749 29/50 current_auc = 0.6602755026061057
User 80749 AUC after training: 0.6597635889798957
User 80749 does not improve AUC. Reverting changes.
Training on augumented user 36942 30/50 current_auc = 0.6602755026061057
User 36942 AUC after training: 0.6601824274013403
User 36942 does not improve AUC. Reverting changes.
Training on augumented user 33047 31/50 current_auc = 0.6602755026061057
User 33047 AUC after training: 0.659717051377513
User 33047 does not improve AUC. Reverting changes.
Training on augumented user 42715 32/50 current_auc = 0.6602755026061057
User 42715 AUC after training: 0.6602755026061057
User 42715 does not improve AUC. Reverting changes.
Training on augumented user 119227 33/50 current_auc = 0.6602755026061057
User 119227 AUC after training: 0.6601824274013403
User 119227 does not improve AUC. Reverting changes.
Training on augumented user 89419 34/50 current_auc = 0.6602755026061057
User 89419 AUC after training: 0.6584605361131795
User 89419 does not improve AUC. Reverting changes.
Training on augumented user 72642 35/50 current_auc = 0.6602755026061057
User 72642 AUC after training: 0.6594378257632166
User 72642 does not improve AUC. Reverting changes.
Training on augumented user 78397 36/50 current_auc = 0.6602755026061057
User 78397 AUC after training: 0.6602755026061057
User 78397 does not improve AUC. Reverting changes.
Training on augumented user 39634 37/50 current_auc = 0.6602755026061057
User 39634 AUC after training: 0.6605547282204021
User 39634 improves AUC. Keeping the model.
Training on augumented user 84057 38/50 current_auc = 0.6605547282204021
User 84057 AUC after training: 0.6599962769918094
User 84057 does not improve AUC. Reverting changes.
Training on augumented user 109516 39/50 current_auc = 0.6605547282204021
User 109516 AUC after training: 0.6602755026061057
User 109516 does not improve AUC. Reverting changes.
Training on augumented user 5157 40/50 current_auc = 0.6605547282204021
User 5157 AUC after training: 0.6584139985107967
User 5157 does not improve AUC. Reverting changes.
Training on augumented user 47394 41/50 current_auc = 0.6605547282204021
User 47394 AUC after training: 0.660740878629933
User 47394 improves AUC. Keeping the model.
Training on augumented user 75110 42/50 current_auc = 0.660740878629933
User 75110 AUC after training: 0.6598101265822786
User 75110 does not improve AUC. Reverting changes.
Training on augumented user 11921 43/50 current_auc = 0.660740878629933
User 11921 AUC after training: 0.6592516753536858
User 11921 does not improve AUC. Reverting changes.
Training on augumented user 131319 44/50 current_auc = 0.660740878629933
User 131319 AUC after training: 0.6599962769918094
User 131319 does not improve AUC. Reverting changes.
Training on augumented user 132695 45/50 current_auc = 0.660740878629933
User 132695 AUC after training: 0.6605547282204022
User 132695 does not improve AUC. Reverting changes.
Training on augumented user 55284 46/50 current_auc = 0.660740878629933
User 55284 AUC after training: 0.6603685778108711
User 55284 does not improve AUC. Reverting changes.
Training on augumented user 47132 47/50 current_auc = 0.660740878629933
User 47132 AUC after training: 0.6601824274013403
User 47132 does not improve AUC. Reverting changes.
Training on augumented user 103717 48/50 current_auc = 0.660740878629933
User 103717 AUC after training: 0.6595774385703649
User 103717 does not improve AUC. Reverting changes.
Training on augumented user 115159 49/50 current_auc = 0.660740878629933
User 115159 AUC after training: 0.6591586001489204
User 115159 does not improve AUC. Reverting changes.
[2024-12-02 19:10:43.314991] start test user 17516 170/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:43.726026] start test user 17516 170/568 recall augumented users by random, augumented_users = [132941, 63425, 63918, 54847, 22514, 79983, 24086, 104199, 72533, 4500, 21766, 78, 32143, 114374, 20568, 40277, 111190, 121800, 446, 86142, 81163, 118460, 116246, 67801, 63266, 136093, 36447, 61906, 82952, 34834, 129267, 103807, 88586, 1497, 40339, 23237, 5027, 136242, 104277, 97344, 25891, 106770, 8721, 53737, 79207, 36139, 49668, 91471, 27483, 70327]
[2024-12-02 19:10:43.741292] user = 17516 Cloud 170/568
[2024-12-02 19:10:43.750833] user = 17516 Local 170/568
[2024-12-02 19:10:43.854429] user = 17516 Local+ 170/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:46.262229] user = 17516 MPDA- 170/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 132941 0/50 current_auc = 0.5
User 132941 AUC after training: 0.5
User 132941 does not improve AUC. Reverting changes.
Training on augumented user 63425 1/50 current_auc = 0.5
User 63425 AUC after training: 0.5
User 63425 does not improve AUC. Reverting changes.
Training on augumented user 63918 2/50 current_auc = 0.5
User 63918 AUC after training: 0.5
User 63918 does not improve AUC. Reverting changes.
Training on augumented user 54847 3/50 current_auc = 0.5
User 54847 AUC after training: 0.5
User 54847 does not improve AUC. Reverting changes.
Training on augumented user 22514 4/50 current_auc = 0.5
User 22514 AUC after training: 0.5
User 22514 does not improve AUC. Reverting changes.
Training on augumented user 79983 5/50 current_auc = 0.5
User 79983 AUC after training: 0.5
User 79983 does not improve AUC. Reverting changes.
Training on augumented user 24086 6/50 current_auc = 0.5
User 24086 AUC after training: 0.5
User 24086 does not improve AUC. Reverting changes.
Training on augumented user 104199 7/50 current_auc = 0.5
User 104199 AUC after training: 0.5
User 104199 does not improve AUC. Reverting changes.
Training on augumented user 72533 8/50 current_auc = 0.5
User 72533 AUC after training: 0.5
User 72533 does not improve AUC. Reverting changes.
Training on augumented user 4500 9/50 current_auc = 0.5
User 4500 AUC after training: 0.5
User 4500 does not improve AUC. Reverting changes.
Training on augumented user 21766 10/50 current_auc = 0.5
User 21766 AUC after training: 0.5
User 21766 does not improve AUC. Reverting changes.
Training on augumented user 78 11/50 current_auc = 0.5
User 78 AUC after training: 0.5
User 78 does not improve AUC. Reverting changes.
Training on augumented user 32143 12/50 current_auc = 0.5
User 32143 AUC after training: 0.5
User 32143 does not improve AUC. Reverting changes.
Training on augumented user 114374 13/50 current_auc = 0.5
User 114374 AUC after training: 0.5
User 114374 does not improve AUC. Reverting changes.
Training on augumented user 20568 14/50 current_auc = 0.5
User 20568 AUC after training: 0.5
User 20568 does not improve AUC. Reverting changes.
Training on augumented user 40277 15/50 current_auc = 0.5
User 40277 AUC after training: 0.5
User 40277 does not improve AUC. Reverting changes.
Training on augumented user 111190 16/50 current_auc = 0.5
User 111190 AUC after training: 0.5
User 111190 does not improve AUC. Reverting changes.
Training on augumented user 121800 17/50 current_auc = 0.5
User 121800 AUC after training: 0.5
User 121800 does not improve AUC. Reverting changes.
Training on augumented user 446 18/50 current_auc = 0.5
User 446 AUC after training: 0.5
User 446 does not improve AUC. Reverting changes.
Training on augumented user 86142 19/50 current_auc = 0.5
User 86142 AUC after training: 0.5
User 86142 does not improve AUC. Reverting changes.
Training on augumented user 81163 20/50 current_auc = 0.5
User 81163 AUC after training: 0.5
User 81163 does not improve AUC. Reverting changes.
Training on augumented user 118460 21/50 current_auc = 0.5
User 118460 AUC after training: 0.5
User 118460 does not improve AUC. Reverting changes.
Training on augumented user 116246 22/50 current_auc = 0.5
User 116246 AUC after training: 0.5
User 116246 does not improve AUC. Reverting changes.
Training on augumented user 67801 23/50 current_auc = 0.5
User 67801 AUC after training: 0.5
User 67801 does not improve AUC. Reverting changes.
Training on augumented user 63266 24/50 current_auc = 0.5
User 63266 AUC after training: 0.5
User 63266 does not improve AUC. Reverting changes.
Training on augumented user 136093 25/50 current_auc = 0.5
User 136093 AUC after training: 0.5
User 136093 does not improve AUC. Reverting changes.
Training on augumented user 36447 26/50 current_auc = 0.5
User 36447 AUC after training: 0.5
User 36447 does not improve AUC. Reverting changes.
Training on augumented user 61906 27/50 current_auc = 0.5
User 61906 AUC after training: 0.5
User 61906 does not improve AUC. Reverting changes.
Training on augumented user 82952 28/50 current_auc = 0.5
User 82952 AUC after training: 0.5
User 82952 does not improve AUC. Reverting changes.
Training on augumented user 34834 29/50 current_auc = 0.5
User 34834 AUC after training: 0.5
User 34834 does not improve AUC. Reverting changes.
Training on augumented user 129267 30/50 current_auc = 0.5
User 129267 AUC after training: 0.5
User 129267 does not improve AUC. Reverting changes.
Training on augumented user 103807 31/50 current_auc = 0.5
User 103807 AUC after training: 0.5
User 103807 does not improve AUC. Reverting changes.
Training on augumented user 88586 32/50 current_auc = 0.5
User 88586 AUC after training: 0.5
User 88586 does not improve AUC. Reverting changes.
Training on augumented user 1497 33/50 current_auc = 0.5
User 1497 AUC after training: 0.5
User 1497 does not improve AUC. Reverting changes.
Training on augumented user 40339 34/50 current_auc = 0.5
User 40339 AUC after training: 0.5
User 40339 does not improve AUC. Reverting changes.
Training on augumented user 23237 35/50 current_auc = 0.5
User 23237 AUC after training: 0.5
User 23237 does not improve AUC. Reverting changes.
Training on augumented user 5027 36/50 current_auc = 0.5
User 5027 AUC after training: 0.5
User 5027 does not improve AUC. Reverting changes.
Training on augumented user 136242 37/50 current_auc = 0.5
User 136242 AUC after training: 0.5
User 136242 does not improve AUC. Reverting changes.
Training on augumented user 104277 38/50 current_auc = 0.5
User 104277 AUC after training: 0.5
User 104277 does not improve AUC. Reverting changes.
Training on augumented user 97344 39/50 current_auc = 0.5
User 97344 AUC after training: 0.5
User 97344 does not improve AUC. Reverting changes.
Training on augumented user 25891 40/50 current_auc = 0.5
User 25891 AUC after training: 0.5
User 25891 does not improve AUC. Reverting changes.
Training on augumented user 106770 41/50 current_auc = 0.5
User 106770 AUC after training: 0.5
User 106770 does not improve AUC. Reverting changes.
Training on augumented user 8721 42/50 current_auc = 0.5
User 8721 AUC after training: 0.5
User 8721 does not improve AUC. Reverting changes.
Training on augumented user 53737 43/50 current_auc = 0.5
User 53737 AUC after training: 0.5
User 53737 does not improve AUC. Reverting changes.
Training on augumented user 79207 44/50 current_auc = 0.5
User 79207 AUC after training: 0.5
User 79207 does not improve AUC. Reverting changes.
Training on augumented user 36139 45/50 current_auc = 0.5
User 36139 AUC after training: 0.5
User 36139 does not improve AUC. Reverting changes.
Training on augumented user 49668 46/50 current_auc = 0.5
User 49668 AUC after training: 0.5
User 49668 does not improve AUC. Reverting changes.
Training on augumented user 91471 47/50 current_auc = 0.5
User 91471 AUC after training: 0.5
User 91471 does not improve AUC. Reverting changes.
Training on augumented user 27483 48/50 current_auc = 0.5
User 27483 AUC after training: 0.5
User 27483 does not improve AUC. Reverting changes.
Training on augumented user 70327 49/50 current_auc = 0.5
User 70327 AUC after training: 0.5
User 70327 does not improve AUC. Reverting changes.
[2024-12-02 19:11:15.566731] start test user 17540 171/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:15.980539] start test user 17540 171/568 recall augumented users by random, augumented_users = [20556, 76258, 76732, 100145, 132338, 16174, 13759, 19870, 86161, 120267, 59624, 116547, 114694, 49970, 127727, 71505, 95672, 82850, 21785, 10605, 74997, 93174, 58734, 103974, 3228, 126062, 124088, 4622, 60205, 33075, 35892, 9092, 69413, 67016, 125409, 25298, 51137, 114830, 60679, 11053, 116709, 31065, 128939, 84629, 14113, 128659, 38081, 48010, 24573, 42934]
[2024-12-02 19:11:15.995470] user = 17540 Cloud 171/568
[2024-12-02 19:11:16.010191] user = 17540 Local 171/568
[2024-12-02 19:11:16.122092] user = 17540 Local+ 171/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:18.200404] user = 17540 MPDA- 171/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5798969072164948
Training on augumented user 20556 0/50 current_auc = 0.5798969072164948
User 20556 AUC after training: 0.5798969072164948
User 20556 does not improve AUC. Reverting changes.
Training on augumented user 76258 1/50 current_auc = 0.5798969072164948
User 76258 AUC after training: 0.5798969072164948
User 76258 does not improve AUC. Reverting changes.
Training on augumented user 76732 2/50 current_auc = 0.5798969072164948
User 76732 AUC after training: 0.5824742268041238
User 76732 improves AUC. Keeping the model.
Training on augumented user 100145 3/50 current_auc = 0.5824742268041238
User 100145 AUC after training: 0.5876288659793815
User 100145 improves AUC. Keeping the model.
Training on augumented user 132338 4/50 current_auc = 0.5876288659793815
User 132338 AUC after training: 0.5695876288659794
User 132338 does not improve AUC. Reverting changes.
Training on augumented user 16174 5/50 current_auc = 0.5876288659793815
User 16174 AUC after training: 0.5876288659793815
User 16174 does not improve AUC. Reverting changes.
Training on augumented user 13759 6/50 current_auc = 0.5876288659793815
User 13759 AUC after training: 0.5850515463917526
User 13759 does not improve AUC. Reverting changes.
Training on augumented user 19870 7/50 current_auc = 0.5876288659793815
User 19870 AUC after training: 0.5850515463917526
User 19870 does not improve AUC. Reverting changes.
Training on augumented user 86161 8/50 current_auc = 0.5876288659793815
User 86161 AUC after training: 0.5876288659793815
User 86161 does not improve AUC. Reverting changes.
Training on augumented user 120267 9/50 current_auc = 0.5876288659793815
User 120267 AUC after training: 0.5876288659793814
User 120267 does not improve AUC. Reverting changes.
Training on augumented user 59624 10/50 current_auc = 0.5876288659793815
User 59624 AUC after training: 0.5850515463917526
User 59624 does not improve AUC. Reverting changes.
Training on augumented user 116547 11/50 current_auc = 0.5876288659793815
User 116547 AUC after training: 0.5850515463917526
User 116547 does not improve AUC. Reverting changes.
Training on augumented user 114694 12/50 current_auc = 0.5876288659793815
User 114694 AUC after training: 0.5876288659793815
User 114694 does not improve AUC. Reverting changes.
Training on augumented user 49970 13/50 current_auc = 0.5876288659793815
User 49970 AUC after training: 0.5902061855670103
User 49970 improves AUC. Keeping the model.
Training on augumented user 127727 14/50 current_auc = 0.5902061855670103
User 127727 AUC after training: 0.5902061855670103
User 127727 does not improve AUC. Reverting changes.
Training on augumented user 71505 15/50 current_auc = 0.5902061855670103
User 71505 AUC after training: 0.5876288659793815
User 71505 does not improve AUC. Reverting changes.
Training on augumented user 95672 16/50 current_auc = 0.5902061855670103
User 95672 AUC after training: 0.5876288659793815
User 95672 does not improve AUC. Reverting changes.
Training on augumented user 82850 17/50 current_auc = 0.5902061855670103
User 82850 AUC after training: 0.5876288659793814
User 82850 does not improve AUC. Reverting changes.
Training on augumented user 21785 18/50 current_auc = 0.5902061855670103
User 21785 AUC after training: 0.5902061855670103
User 21785 does not improve AUC. Reverting changes.
Training on augumented user 10605 19/50 current_auc = 0.5902061855670103
User 10605 AUC after training: 0.5850515463917526
User 10605 does not improve AUC. Reverting changes.
Training on augumented user 74997 20/50 current_auc = 0.5902061855670103
User 74997 AUC after training: 0.5902061855670103
User 74997 does not improve AUC. Reverting changes.
Training on augumented user 93174 21/50 current_auc = 0.5902061855670103
User 93174 AUC after training: 0.5902061855670103
User 93174 does not improve AUC. Reverting changes.
Training on augumented user 58734 22/50 current_auc = 0.5902061855670103
User 58734 AUC after training: 0.5902061855670103
User 58734 does not improve AUC. Reverting changes.
Training on augumented user 103974 23/50 current_auc = 0.5902061855670103
User 103974 AUC after training: 0.5902061855670103
User 103974 does not improve AUC. Reverting changes.
Training on augumented user 3228 24/50 current_auc = 0.5902061855670103
User 3228 AUC after training: 0.5876288659793814
User 3228 does not improve AUC. Reverting changes.
Training on augumented user 126062 25/50 current_auc = 0.5902061855670103
User 126062 AUC after training: 0.5876288659793815
User 126062 does not improve AUC. Reverting changes.
Training on augumented user 124088 26/50 current_auc = 0.5902061855670103
User 124088 AUC after training: 0.5876288659793815
User 124088 does not improve AUC. Reverting changes.
Training on augumented user 4622 27/50 current_auc = 0.5902061855670103
User 4622 AUC after training: 0.5876288659793815
User 4622 does not improve AUC. Reverting changes.
Training on augumented user 60205 28/50 current_auc = 0.5902061855670103
User 60205 AUC after training: 0.5876288659793815
User 60205 does not improve AUC. Reverting changes.
Training on augumented user 33075 29/50 current_auc = 0.5902061855670103
User 33075 AUC after training: 0.5850515463917526
User 33075 does not improve AUC. Reverting changes.
Training on augumented user 35892 30/50 current_auc = 0.5902061855670103
User 35892 AUC after training: 0.5876288659793814
User 35892 does not improve AUC. Reverting changes.
Training on augumented user 9092 31/50 current_auc = 0.5902061855670103
User 9092 AUC after training: 0.5927835051546391
User 9092 improves AUC. Keeping the model.
Training on augumented user 69413 32/50 current_auc = 0.5927835051546391
User 69413 AUC after training: 0.5979381443298969
User 69413 improves AUC. Keeping the model.
Training on augumented user 67016 33/50 current_auc = 0.5979381443298969
User 67016 AUC after training: 0.5979381443298969
User 67016 does not improve AUC. Reverting changes.
Training on augumented user 125409 34/50 current_auc = 0.5979381443298969
User 125409 AUC after training: 0.5979381443298969
User 125409 does not improve AUC. Reverting changes.
Training on augumented user 25298 35/50 current_auc = 0.5979381443298969
User 25298 AUC after training: 0.5876288659793814
User 25298 does not improve AUC. Reverting changes.
Training on augumented user 51137 36/50 current_auc = 0.5979381443298969
User 51137 AUC after training: 0.5979381443298969
User 51137 does not improve AUC. Reverting changes.
Training on augumented user 114830 37/50 current_auc = 0.5979381443298969
User 114830 AUC after training: 0.5979381443298969
User 114830 does not improve AUC. Reverting changes.
Training on augumented user 60679 38/50 current_auc = 0.5979381443298969
User 60679 AUC after training: 0.5979381443298969
User 60679 does not improve AUC. Reverting changes.
Training on augumented user 11053 39/50 current_auc = 0.5979381443298969
User 11053 AUC after training: 0.5979381443298969
User 11053 does not improve AUC. Reverting changes.
Training on augumented user 116709 40/50 current_auc = 0.5979381443298969
User 116709 AUC after training: 0.5979381443298969
User 116709 does not improve AUC. Reverting changes.
Training on augumented user 31065 41/50 current_auc = 0.5979381443298969
User 31065 AUC after training: 0.5953608247422679
User 31065 does not improve AUC. Reverting changes.
Training on augumented user 128939 42/50 current_auc = 0.5979381443298969
User 128939 AUC after training: 0.5953608247422679
User 128939 does not improve AUC. Reverting changes.
Training on augumented user 84629 43/50 current_auc = 0.5979381443298969
User 84629 AUC after training: 0.5902061855670103
User 84629 does not improve AUC. Reverting changes.
Training on augumented user 14113 44/50 current_auc = 0.5979381443298969
User 14113 AUC after training: 0.5979381443298969
User 14113 does not improve AUC. Reverting changes.
Training on augumented user 128659 45/50 current_auc = 0.5979381443298969
User 128659 AUC after training: 0.5979381443298969
User 128659 does not improve AUC. Reverting changes.
Training on augumented user 38081 46/50 current_auc = 0.5979381443298969
User 38081 AUC after training: 0.5927835051546392
User 38081 does not improve AUC. Reverting changes.
Training on augumented user 48010 47/50 current_auc = 0.5979381443298969
User 48010 AUC after training: 0.5850515463917525
User 48010 does not improve AUC. Reverting changes.
Training on augumented user 24573 48/50 current_auc = 0.5979381443298969
User 24573 AUC after training: 0.5850515463917526
User 24573 does not improve AUC. Reverting changes.
Training on augumented user 42934 49/50 current_auc = 0.5979381443298969
User 42934 AUC after training: 0.5979381443298969
User 42934 does not improve AUC. Reverting changes.
[2024-12-02 19:11:41.891925] start test user 17561 172/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:42.286969] start test user 17561 172/568 recall augumented users by random, augumented_users = [16928, 74589, 53809, 105334, 5278, 64224, 120838, 84415, 20580, 12387, 103627, 25779, 58314, 72964, 69455, 102485, 92401, 23916, 15823, 38321, 92574, 111348, 69907, 90659, 124967, 132678, 45842, 45764, 42477, 43823, 55376, 39107, 52559, 674, 85028, 13571, 21969, 14754, 7377, 92589, 38415, 7519, 81083, 10545, 28198, 29319, 50930, 10947, 71113, 13938]
[2024-12-02 19:11:42.300959] user = 17561 Cloud 172/568
[2024-12-02 19:11:42.309478] user = 17561 Local 172/568
[2024-12-02 19:11:42.327576] user = 17561 Local+ 172/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:44.727221] user = 17561 MPDA- 172/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 16928 0/50 current_auc = 1.0
User 16928 AUC after training: 1.0
User 16928 does not improve AUC. Reverting changes.
Training on augumented user 74589 1/50 current_auc = 1.0
User 74589 AUC after training: 1.0
User 74589 does not improve AUC. Reverting changes.
Training on augumented user 53809 2/50 current_auc = 1.0
User 53809 AUC after training: 1.0
User 53809 does not improve AUC. Reverting changes.
Training on augumented user 105334 3/50 current_auc = 1.0
User 105334 AUC after training: 1.0
User 105334 does not improve AUC. Reverting changes.
Training on augumented user 5278 4/50 current_auc = 1.0
User 5278 AUC after training: 1.0
User 5278 does not improve AUC. Reverting changes.
Training on augumented user 64224 5/50 current_auc = 1.0
User 64224 AUC after training: 1.0
User 64224 does not improve AUC. Reverting changes.
Training on augumented user 120838 6/50 current_auc = 1.0
User 120838 AUC after training: 1.0
User 120838 does not improve AUC. Reverting changes.
Training on augumented user 84415 7/50 current_auc = 1.0
User 84415 AUC after training: 1.0
User 84415 does not improve AUC. Reverting changes.
Training on augumented user 20580 8/50 current_auc = 1.0
User 20580 AUC after training: 1.0
User 20580 does not improve AUC. Reverting changes.
Training on augumented user 12387 9/50 current_auc = 1.0
User 12387 AUC after training: 1.0
User 12387 does not improve AUC. Reverting changes.
Training on augumented user 103627 10/50 current_auc = 1.0
User 103627 AUC after training: 1.0
User 103627 does not improve AUC. Reverting changes.
Training on augumented user 25779 11/50 current_auc = 1.0
User 25779 AUC after training: 1.0
User 25779 does not improve AUC. Reverting changes.
Training on augumented user 58314 12/50 current_auc = 1.0
User 58314 AUC after training: 1.0
User 58314 does not improve AUC. Reverting changes.
Training on augumented user 72964 13/50 current_auc = 1.0
User 72964 AUC after training: 1.0
User 72964 does not improve AUC. Reverting changes.
Training on augumented user 69455 14/50 current_auc = 1.0
User 69455 AUC after training: 1.0
User 69455 does not improve AUC. Reverting changes.
Training on augumented user 102485 15/50 current_auc = 1.0
User 102485 AUC after training: 1.0
User 102485 does not improve AUC. Reverting changes.
Training on augumented user 92401 16/50 current_auc = 1.0
User 92401 AUC after training: 1.0
User 92401 does not improve AUC. Reverting changes.
Training on augumented user 23916 17/50 current_auc = 1.0
User 23916 AUC after training: 1.0
User 23916 does not improve AUC. Reverting changes.
Training on augumented user 15823 18/50 current_auc = 1.0
User 15823 AUC after training: 1.0
User 15823 does not improve AUC. Reverting changes.
Training on augumented user 38321 19/50 current_auc = 1.0
User 38321 AUC after training: 1.0
User 38321 does not improve AUC. Reverting changes.
Training on augumented user 92574 20/50 current_auc = 1.0
User 92574 AUC after training: 1.0
User 92574 does not improve AUC. Reverting changes.
Training on augumented user 111348 21/50 current_auc = 1.0
User 111348 AUC after training: 1.0
User 111348 does not improve AUC. Reverting changes.
Training on augumented user 69907 22/50 current_auc = 1.0
User 69907 AUC after training: 1.0
User 69907 does not improve AUC. Reverting changes.
Training on augumented user 90659 23/50 current_auc = 1.0
User 90659 AUC after training: 1.0
User 90659 does not improve AUC. Reverting changes.
Training on augumented user 124967 24/50 current_auc = 1.0
User 124967 AUC after training: 1.0
User 124967 does not improve AUC. Reverting changes.
Training on augumented user 132678 25/50 current_auc = 1.0
User 132678 AUC after training: 1.0
User 132678 does not improve AUC. Reverting changes.
Training on augumented user 45842 26/50 current_auc = 1.0
User 45842 AUC after training: 1.0
User 45842 does not improve AUC. Reverting changes.
Training on augumented user 45764 27/50 current_auc = 1.0
User 45764 AUC after training: 1.0
User 45764 does not improve AUC. Reverting changes.
Training on augumented user 42477 28/50 current_auc = 1.0
User 42477 AUC after training: 1.0
User 42477 does not improve AUC. Reverting changes.
Training on augumented user 43823 29/50 current_auc = 1.0
User 43823 AUC after training: 1.0
User 43823 does not improve AUC. Reverting changes.
Training on augumented user 55376 30/50 current_auc = 1.0
User 55376 AUC after training: 1.0
User 55376 does not improve AUC. Reverting changes.
Training on augumented user 39107 31/50 current_auc = 1.0
User 39107 AUC after training: 1.0
User 39107 does not improve AUC. Reverting changes.
Training on augumented user 52559 32/50 current_auc = 1.0
User 52559 AUC after training: 1.0
User 52559 does not improve AUC. Reverting changes.
Training on augumented user 674 33/50 current_auc = 1.0
User 674 AUC after training: 1.0
User 674 does not improve AUC. Reverting changes.
Training on augumented user 85028 34/50 current_auc = 1.0
User 85028 AUC after training: 1.0
User 85028 does not improve AUC. Reverting changes.
Training on augumented user 13571 35/50 current_auc = 1.0
User 13571 AUC after training: 1.0
User 13571 does not improve AUC. Reverting changes.
Training on augumented user 21969 36/50 current_auc = 1.0
User 21969 AUC after training: 1.0
User 21969 does not improve AUC. Reverting changes.
Training on augumented user 14754 37/50 current_auc = 1.0
User 14754 AUC after training: 1.0
User 14754 does not improve AUC. Reverting changes.
Training on augumented user 7377 38/50 current_auc = 1.0
User 7377 AUC after training: 1.0
User 7377 does not improve AUC. Reverting changes.
Training on augumented user 92589 39/50 current_auc = 1.0
User 92589 AUC after training: 1.0
User 92589 does not improve AUC. Reverting changes.
Training on augumented user 38415 40/50 current_auc = 1.0
User 38415 AUC after training: 1.0
User 38415 does not improve AUC. Reverting changes.
Training on augumented user 7519 41/50 current_auc = 1.0
User 7519 AUC after training: 1.0
User 7519 does not improve AUC. Reverting changes.
Training on augumented user 81083 42/50 current_auc = 1.0
User 81083 AUC after training: 1.0
User 81083 does not improve AUC. Reverting changes.
Training on augumented user 10545 43/50 current_auc = 1.0
User 10545 AUC after training: 1.0
User 10545 does not improve AUC. Reverting changes.
Training on augumented user 28198 44/50 current_auc = 1.0
User 28198 AUC after training: 1.0
User 28198 does not improve AUC. Reverting changes.
Training on augumented user 29319 45/50 current_auc = 1.0
User 29319 AUC after training: 1.0
User 29319 does not improve AUC. Reverting changes.
Training on augumented user 50930 46/50 current_auc = 1.0
User 50930 AUC after training: 1.0
User 50930 does not improve AUC. Reverting changes.
Training on augumented user 10947 47/50 current_auc = 1.0
User 10947 AUC after training: 1.0
User 10947 does not improve AUC. Reverting changes.
Training on augumented user 71113 48/50 current_auc = 1.0
User 71113 AUC after training: 1.0
User 71113 does not improve AUC. Reverting changes.
Training on augumented user 13938 49/50 current_auc = 1.0
User 13938 AUC after training: 1.0
User 13938 does not improve AUC. Reverting changes.
[2024-12-02 19:12:11.058282] start test user 17571 173/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:11.823521] start test user 17571 173/568 recall augumented users by random, augumented_users = [30059, 38975, 3445, 92499, 18323, 124457, 25010, 69190, 91993, 12695, 62671, 40609, 74643, 92011, 85954, 55975, 61465, 72839, 125102, 108076, 80770, 97023, 64848, 74225, 137367, 43823, 66818, 99133, 6393, 65759, 112809, 121957, 128371, 24213, 9386, 120854, 92505, 48838, 48738, 51721, 36009, 136458, 54769, 85404, 86682, 131575, 38953, 55479, 138421, 65233]
[2024-12-02 19:12:11.852255] user = 17571 Cloud 173/568
[2024-12-02 19:12:11.893979] user = 17571 Local 173/568
[2024-12-02 19:12:12.058539] user = 17571 Local+ 173/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:15.801427] user = 17571 MPDA- 173/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5779021724643476
Training on augumented user 30059 0/50 current_auc = 0.5779021724643476
User 30059 AUC after training: 0.5776356124216979
User 30059 does not improve AUC. Reverting changes.
Training on augumented user 38975 1/50 current_auc = 0.5779021724643476
User 38975 AUC after training: 0.5780354524856725
User 38975 improves AUC. Keeping the model.
Training on augumented user 3445 2/50 current_auc = 0.5780354524856725
User 3445 AUC after training: 0.5779021724643476
User 3445 does not improve AUC. Reverting changes.
Training on augumented user 92499 3/50 current_auc = 0.5780354524856725
User 92499 AUC after training: 0.5804344928695189
User 92499 improves AUC. Keeping the model.
Training on augumented user 18323 4/50 current_auc = 0.5804344928695189
User 18323 AUC after training: 0.580301212848194
User 18323 does not improve AUC. Reverting changes.
Training on augumented user 124457 5/50 current_auc = 0.5804344928695189
User 124457 AUC after training: 0.5795015327202452
User 124457 does not improve AUC. Reverting changes.
Training on augumented user 25010 6/50 current_auc = 0.5804344928695189
User 25010 AUC after training: 0.5808343329334933
User 25010 improves AUC. Keeping the model.
Training on augumented user 69190 7/50 current_auc = 0.5808343329334933
User 69190 AUC after training: 0.5797680927628949
User 69190 does not improve AUC. Reverting changes.
Training on augumented user 91993 8/50 current_auc = 0.5808343329334933
User 91993 AUC after training: 0.5803012128481941
User 91993 does not improve AUC. Reverting changes.
Training on augumented user 12695 9/50 current_auc = 0.5808343329334933
User 12695 AUC after training: 0.5812341729974677
User 12695 improves AUC. Keeping the model.
Training on augumented user 62671 10/50 current_auc = 0.5812341729974677
User 62671 AUC after training: 0.5807010529121684
User 62671 does not improve AUC. Reverting changes.
Training on augumented user 40609 11/50 current_auc = 0.5812341729974677
User 40609 AUC after training: 0.580967612954818
User 40609 does not improve AUC. Reverting changes.
Training on augumented user 74643 12/50 current_auc = 0.5812341729974677
User 74643 AUC after training: 0.5813674530187924
User 74643 improves AUC. Keeping the model.
Training on augumented user 92011 13/50 current_auc = 0.5813674530187924
User 92011 AUC after training: 0.5779021724643476
User 92011 does not improve AUC. Reverting changes.
Training on augumented user 85954 14/50 current_auc = 0.5813674530187924
User 85954 AUC after training: 0.5807010529121686
User 85954 does not improve AUC. Reverting changes.
Training on augumented user 55975 15/50 current_auc = 0.5813674530187924
User 55975 AUC after training: 0.5811008929761429
User 55975 does not improve AUC. Reverting changes.
Training on augumented user 61465 16/50 current_auc = 0.5813674530187924
User 61465 AUC after training: 0.5811008929761429
User 61465 does not improve AUC. Reverting changes.
Training on augumented user 72839 17/50 current_auc = 0.5813674530187924
User 72839 AUC after training: 0.5815007330401173
User 72839 improves AUC. Keeping the model.
Training on augumented user 125102 18/50 current_auc = 0.5815007330401173
User 125102 AUC after training: 0.5812341729974677
User 125102 does not improve AUC. Reverting changes.
Training on augumented user 108076 19/50 current_auc = 0.5815007330401173
User 108076 AUC after training: 0.580967612954818
User 108076 does not improve AUC. Reverting changes.
Training on augumented user 80770 20/50 current_auc = 0.5815007330401173
User 80770 AUC after training: 0.5819005731040917
User 80770 improves AUC. Keeping the model.
Training on augumented user 97023 21/50 current_auc = 0.5819005731040917
User 97023 AUC after training: 0.5817672930827669
User 97023 does not improve AUC. Reverting changes.
Training on augumented user 64848 22/50 current_auc = 0.5819005731040917
User 64848 AUC after training: 0.5821671331467413
User 64848 improves AUC. Keeping the model.
Training on augumented user 74225 23/50 current_auc = 0.5821671331467413
User 74225 AUC after training: 0.5811008929761429
User 74225 does not improve AUC. Reverting changes.
Training on augumented user 137367 24/50 current_auc = 0.5821671331467413
User 137367 AUC after training: 0.5815007330401174
User 137367 does not improve AUC. Reverting changes.
Training on augumented user 43823 25/50 current_auc = 0.5821671331467413
User 43823 AUC after training: 0.5820338531254164
User 43823 does not improve AUC. Reverting changes.
Training on augumented user 66818 26/50 current_auc = 0.5821671331467413
User 66818 AUC after training: 0.5804344928695189
User 66818 does not improve AUC. Reverting changes.
Training on augumented user 99133 27/50 current_auc = 0.5821671331467413
User 99133 AUC after training: 0.5816340130614421
User 99133 does not improve AUC. Reverting changes.
Training on augumented user 6393 28/50 current_auc = 0.5821671331467413
User 6393 AUC after training: 0.5812341729974677
User 6393 does not improve AUC. Reverting changes.
Training on augumented user 65759 29/50 current_auc = 0.5821671331467413
User 65759 AUC after training: 0.5791016926562709
User 65759 does not improve AUC. Reverting changes.
Training on augumented user 112809 30/50 current_auc = 0.5821671331467413
User 112809 AUC after training: 0.5820338531254166
User 112809 does not improve AUC. Reverting changes.
Training on augumented user 121957 31/50 current_auc = 0.5821671331467413
User 121957 AUC after training: 0.5821671331467413
User 121957 does not improve AUC. Reverting changes.
Training on augumented user 128371 32/50 current_auc = 0.5821671331467413
User 128371 AUC after training: 0.5815007330401173
User 128371 does not improve AUC. Reverting changes.
Training on augumented user 24213 33/50 current_auc = 0.5821671331467413
User 24213 AUC after training: 0.5813674530187924
User 24213 does not improve AUC. Reverting changes.
Training on augumented user 9386 34/50 current_auc = 0.5821671331467413
User 9386 AUC after training: 0.5808343329334933
User 9386 does not improve AUC. Reverting changes.
Training on augumented user 120854 35/50 current_auc = 0.5821671331467413
User 120854 AUC after training: 0.580967612954818
User 120854 does not improve AUC. Reverting changes.
Training on augumented user 92505 36/50 current_auc = 0.5821671331467413
User 92505 AUC after training: 0.5819005731040917
User 92505 does not improve AUC. Reverting changes.
Training on augumented user 48838 37/50 current_auc = 0.5821671331467413
User 48838 AUC after training: 0.5797680927628948
User 48838 does not improve AUC. Reverting changes.
Training on augumented user 48738 38/50 current_auc = 0.5821671331467413
User 48738 AUC after training: 0.5813674530187924
User 48738 does not improve AUC. Reverting changes.
Training on augumented user 51721 39/50 current_auc = 0.5821671331467413
User 51721 AUC after training: 0.5808343329334933
User 51721 does not improve AUC. Reverting changes.
Training on augumented user 36009 40/50 current_auc = 0.5821671331467413
User 36009 AUC after training: 0.5816340130614421
User 36009 does not improve AUC. Reverting changes.
Training on augumented user 136458 41/50 current_auc = 0.5821671331467413
User 136458 AUC after training: 0.5811008929761429
User 136458 does not improve AUC. Reverting changes.
Training on augumented user 54769 42/50 current_auc = 0.5821671331467413
User 54769 AUC after training: 0.5820338531254166
User 54769 does not improve AUC. Reverting changes.
Training on augumented user 85404 43/50 current_auc = 0.5821671331467413
User 85404 AUC after training: 0.5819005731040917
User 85404 does not improve AUC. Reverting changes.
Training on augumented user 86682 44/50 current_auc = 0.5821671331467413
User 86682 AUC after training: 0.5819005731040917
User 86682 does not improve AUC. Reverting changes.
Training on augumented user 131575 45/50 current_auc = 0.5821671331467413
User 131575 AUC after training: 0.5820338531254166
User 131575 does not improve AUC. Reverting changes.
Training on augumented user 38953 46/50 current_auc = 0.5821671331467413
User 38953 AUC after training: 0.5816340130614421
User 38953 does not improve AUC. Reverting changes.
Training on augumented user 55479 47/50 current_auc = 0.5821671331467413
User 55479 AUC after training: 0.5807010529121686
User 55479 does not improve AUC. Reverting changes.
Training on augumented user 138421 48/50 current_auc = 0.5821671331467413
User 138421 AUC after training: 0.5817672930827669
User 138421 does not improve AUC. Reverting changes.
Training on augumented user 65233 49/50 current_auc = 0.5821671331467413
User 65233 AUC after training: 0.5817672930827669
User 65233 does not improve AUC. Reverting changes.
[2024-12-02 19:12:44.057972] start test user 17623 174/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:44.489446] start test user 17623 174/568 recall augumented users by random, augumented_users = [46784, 56178, 17413, 103174, 118938, 137013, 34126, 52854, 133923, 93195, 17721, 7307, 85874, 49200, 70069, 16167, 50408, 86778, 75949, 53813, 112875, 108134, 43421, 57533, 129899, 50648, 88188, 128377, 105158, 111189, 53611, 99182, 92032, 35167, 36372, 122683, 67767, 5516, 86962, 32756, 116653, 133834, 32260, 19094, 132294, 69463, 49356, 74939, 59981, 126808]
[2024-12-02 19:12:44.503904] user = 17623 Cloud 174/568
[2024-12-02 19:12:44.512990] user = 17623 Local 174/568
[2024-12-02 19:12:44.538569] user = 17623 Local+ 174/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:46.837940] user = 17623 MPDA- 174/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 46784 0/50 current_auc = 0.5
User 46784 AUC after training: 0.5
User 46784 does not improve AUC. Reverting changes.
Training on augumented user 56178 1/50 current_auc = 0.5
User 56178 AUC after training: 0.5
User 56178 does not improve AUC. Reverting changes.
Training on augumented user 17413 2/50 current_auc = 0.5
User 17413 AUC after training: 0.5
User 17413 does not improve AUC. Reverting changes.
Training on augumented user 103174 3/50 current_auc = 0.5
User 103174 AUC after training: 0.5
User 103174 does not improve AUC. Reverting changes.
Training on augumented user 118938 4/50 current_auc = 0.5
User 118938 AUC after training: 0.5
User 118938 does not improve AUC. Reverting changes.
Training on augumented user 137013 5/50 current_auc = 0.5
User 137013 AUC after training: 0.5
User 137013 does not improve AUC. Reverting changes.
Training on augumented user 34126 6/50 current_auc = 0.5
User 34126 AUC after training: 0.5
User 34126 does not improve AUC. Reverting changes.
Training on augumented user 52854 7/50 current_auc = 0.5
User 52854 AUC after training: 0.5
User 52854 does not improve AUC. Reverting changes.
Training on augumented user 133923 8/50 current_auc = 0.5
User 133923 AUC after training: 0.5
User 133923 does not improve AUC. Reverting changes.
Training on augumented user 93195 9/50 current_auc = 0.5
User 93195 AUC after training: 0.5
User 93195 does not improve AUC. Reverting changes.
Training on augumented user 17721 10/50 current_auc = 0.5
User 17721 AUC after training: 0.5
User 17721 does not improve AUC. Reverting changes.
Training on augumented user 7307 11/50 current_auc = 0.5
User 7307 AUC after training: 0.5
User 7307 does not improve AUC. Reverting changes.
Training on augumented user 85874 12/50 current_auc = 0.5
User 85874 AUC after training: 0.5
User 85874 does not improve AUC. Reverting changes.
Training on augumented user 49200 13/50 current_auc = 0.5
User 49200 AUC after training: 0.5
User 49200 does not improve AUC. Reverting changes.
Training on augumented user 70069 14/50 current_auc = 0.5
User 70069 AUC after training: 0.5
User 70069 does not improve AUC. Reverting changes.
Training on augumented user 16167 15/50 current_auc = 0.5
User 16167 AUC after training: 0.5
User 16167 does not improve AUC. Reverting changes.
Training on augumented user 50408 16/50 current_auc = 0.5
User 50408 AUC after training: 0.5
User 50408 does not improve AUC. Reverting changes.
Training on augumented user 86778 17/50 current_auc = 0.5
User 86778 AUC after training: 0.5
User 86778 does not improve AUC. Reverting changes.
Training on augumented user 75949 18/50 current_auc = 0.5
User 75949 AUC after training: 0.5
User 75949 does not improve AUC. Reverting changes.
Training on augumented user 53813 19/50 current_auc = 0.5
User 53813 AUC after training: 0.5
User 53813 does not improve AUC. Reverting changes.
Training on augumented user 112875 20/50 current_auc = 0.5
User 112875 AUC after training: 0.5
User 112875 does not improve AUC. Reverting changes.
Training on augumented user 108134 21/50 current_auc = 0.5
User 108134 AUC after training: 0.5
User 108134 does not improve AUC. Reverting changes.
Training on augumented user 43421 22/50 current_auc = 0.5
User 43421 AUC after training: 0.5
User 43421 does not improve AUC. Reverting changes.
Training on augumented user 57533 23/50 current_auc = 0.5
User 57533 AUC after training: 0.5
User 57533 does not improve AUC. Reverting changes.
Training on augumented user 129899 24/50 current_auc = 0.5
User 129899 AUC after training: 0.5
User 129899 does not improve AUC. Reverting changes.
Training on augumented user 50648 25/50 current_auc = 0.5
User 50648 AUC after training: 0.5
User 50648 does not improve AUC. Reverting changes.
Training on augumented user 88188 26/50 current_auc = 0.5
User 88188 AUC after training: 0.5
User 88188 does not improve AUC. Reverting changes.
Training on augumented user 128377 27/50 current_auc = 0.5
User 128377 AUC after training: 0.5
User 128377 does not improve AUC. Reverting changes.
Training on augumented user 105158 28/50 current_auc = 0.5
User 105158 AUC after training: 0.5
User 105158 does not improve AUC. Reverting changes.
Training on augumented user 111189 29/50 current_auc = 0.5
User 111189 AUC after training: 0.5
User 111189 does not improve AUC. Reverting changes.
Training on augumented user 53611 30/50 current_auc = 0.5
User 53611 AUC after training: 0.5
User 53611 does not improve AUC. Reverting changes.
Training on augumented user 99182 31/50 current_auc = 0.5
User 99182 AUC after training: 0.5
User 99182 does not improve AUC. Reverting changes.
Training on augumented user 92032 32/50 current_auc = 0.5
User 92032 AUC after training: 0.5
User 92032 does not improve AUC. Reverting changes.
Training on augumented user 35167 33/50 current_auc = 0.5
User 35167 AUC after training: 0.5
User 35167 does not improve AUC. Reverting changes.
Training on augumented user 36372 34/50 current_auc = 0.5
User 36372 AUC after training: 0.5
User 36372 does not improve AUC. Reverting changes.
Training on augumented user 122683 35/50 current_auc = 0.5
User 122683 AUC after training: 0.5
User 122683 does not improve AUC. Reverting changes.
Training on augumented user 67767 36/50 current_auc = 0.5
User 67767 AUC after training: 0.5
User 67767 does not improve AUC. Reverting changes.
Training on augumented user 5516 37/50 current_auc = 0.5
User 5516 AUC after training: 0.5
User 5516 does not improve AUC. Reverting changes.
Training on augumented user 86962 38/50 current_auc = 0.5
User 86962 AUC after training: 0.5
User 86962 does not improve AUC. Reverting changes.
Training on augumented user 32756 39/50 current_auc = 0.5
User 32756 AUC after training: 0.5
User 32756 does not improve AUC. Reverting changes.
Training on augumented user 116653 40/50 current_auc = 0.5
User 116653 AUC after training: 0.5
User 116653 does not improve AUC. Reverting changes.
Training on augumented user 133834 41/50 current_auc = 0.5
User 133834 AUC after training: 0.5
User 133834 does not improve AUC. Reverting changes.
Training on augumented user 32260 42/50 current_auc = 0.5
User 32260 AUC after training: 0.5
User 32260 does not improve AUC. Reverting changes.
Training on augumented user 19094 43/50 current_auc = 0.5
User 19094 AUC after training: 0.5
User 19094 does not improve AUC. Reverting changes.
Training on augumented user 132294 44/50 current_auc = 0.5
User 132294 AUC after training: 0.5
User 132294 does not improve AUC. Reverting changes.
Training on augumented user 69463 45/50 current_auc = 0.5
User 69463 AUC after training: 0.5
User 69463 does not improve AUC. Reverting changes.
Training on augumented user 49356 46/50 current_auc = 0.5
User 49356 AUC after training: 0.5
User 49356 does not improve AUC. Reverting changes.
Training on augumented user 74939 47/50 current_auc = 0.5
User 74939 AUC after training: 0.5
User 74939 does not improve AUC. Reverting changes.
Training on augumented user 59981 48/50 current_auc = 0.5
User 59981 AUC after training: 0.5
User 59981 does not improve AUC. Reverting changes.
Training on augumented user 126808 49/50 current_auc = 0.5
User 126808 AUC after training: 0.5
User 126808 does not improve AUC. Reverting changes.
[2024-12-02 19:13:10.770044] start test user 17635 175/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:11.169661] start test user 17635 175/568 recall augumented users by random, augumented_users = [8614, 68536, 105199, 82409, 71264, 76189, 92128, 117787, 38491, 8783, 49965, 8565, 1407, 51736, 116300, 101026, 36736, 100720, 72435, 100425, 112591, 86626, 110527, 70728, 50427, 65494, 113598, 42131, 3503, 32223, 95440, 45923, 99636, 111763, 93591, 52757, 52399, 136536, 17599, 63353, 135454, 59654, 107309, 107647, 48438, 100693, 40322, 74933, 102622, 57823]
[2024-12-02 19:13:11.185893] user = 17635 Cloud 175/568
[2024-12-02 19:13:11.201123] user = 17635 Local 175/568
[2024-12-02 19:13:11.404671] user = 17635 Local+ 175/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:13.799154] user = 17635 MPDA- 175/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6464646464646465
Training on augumented user 8614 0/50 current_auc = 0.6464646464646465
User 8614 AUC after training: 0.646761734997029
User 8614 improves AUC. Keeping the model.
Training on augumented user 68536 1/50 current_auc = 0.646761734997029
User 68536 AUC after training: 0.6473559120617943
User 68536 improves AUC. Keeping the model.
Training on augumented user 105199 2/50 current_auc = 0.6473559120617943
User 105199 AUC after training: 0.6467617349970292
User 105199 does not improve AUC. Reverting changes.
Training on augumented user 82409 3/50 current_auc = 0.6473559120617943
User 82409 AUC after training: 0.6467617349970292
User 82409 does not improve AUC. Reverting changes.
Training on augumented user 71264 4/50 current_auc = 0.6473559120617943
User 71264 AUC after training: 0.6446821152703506
User 71264 does not improve AUC. Reverting changes.
Training on augumented user 76189 5/50 current_auc = 0.6473559120617943
User 76189 AUC after training: 0.6473559120617944
User 76189 improves AUC. Keeping the model.
Training on augumented user 92128 6/50 current_auc = 0.6473559120617944
User 92128 AUC after training: 0.646761734997029
User 92128 does not improve AUC. Reverting changes.
Training on augumented user 117787 7/50 current_auc = 0.6473559120617944
User 117787 AUC after training: 0.6473559120617944
User 117787 does not improve AUC. Reverting changes.
Training on augumented user 38491 8/50 current_auc = 0.6473559120617944
User 38491 AUC after training: 0.6467617349970292
User 38491 does not improve AUC. Reverting changes.
Training on augumented user 8783 9/50 current_auc = 0.6473559120617944
User 8783 AUC after training: 0.6467617349970292
User 8783 does not improve AUC. Reverting changes.
Training on augumented user 49965 10/50 current_auc = 0.6473559120617944
User 49965 AUC after training: 0.6446821152703506
User 49965 does not improve AUC. Reverting changes.
Training on augumented user 8565 11/50 current_auc = 0.6473559120617944
User 8565 AUC after training: 0.6476530005941771
User 8565 improves AUC. Keeping the model.
Training on augumented user 1407 12/50 current_auc = 0.6476530005941771
User 1407 AUC after training: 0.6479500891265597
User 1407 improves AUC. Keeping the model.
Training on augumented user 51736 13/50 current_auc = 0.6479500891265597
User 51736 AUC after training: 0.6479500891265597
User 51736 does not improve AUC. Reverting changes.
Training on augumented user 116300 14/50 current_auc = 0.6479500891265597
User 116300 AUC after training: 0.6467617349970292
User 116300 does not improve AUC. Reverting changes.
Training on augumented user 101026 15/50 current_auc = 0.6479500891265597
User 101026 AUC after training: 0.6473559120617944
User 101026 does not improve AUC. Reverting changes.
Training on augumented user 36736 16/50 current_auc = 0.6479500891265597
User 36736 AUC after training: 0.6482471776589422
User 36736 improves AUC. Keeping the model.
Training on augumented user 100720 17/50 current_auc = 0.6482471776589422
User 100720 AUC after training: 0.647653000594177
User 100720 does not improve AUC. Reverting changes.
Training on augumented user 72435 18/50 current_auc = 0.6482471776589422
User 72435 AUC after training: 0.6491384432560903
User 72435 improves AUC. Keeping the model.
Training on augumented user 100425 19/50 current_auc = 0.6491384432560903
User 100425 AUC after training: 0.6482471776589424
User 100425 does not improve AUC. Reverting changes.
Training on augumented user 112591 20/50 current_auc = 0.6491384432560903
User 112591 AUC after training: 0.648544266191325
User 112591 does not improve AUC. Reverting changes.
Training on augumented user 86626 21/50 current_auc = 0.6491384432560903
User 86626 AUC after training: 0.6476530005941771
User 86626 does not improve AUC. Reverting changes.
Training on augumented user 110527 22/50 current_auc = 0.6491384432560903
User 110527 AUC after training: 0.6497326203208555
User 110527 improves AUC. Keeping the model.
Training on augumented user 70728 23/50 current_auc = 0.6497326203208555
User 70728 AUC after training: 0.6458704693998811
User 70728 does not improve AUC. Reverting changes.
Training on augumented user 50427 24/50 current_auc = 0.6497326203208555
User 50427 AUC after training: 0.6488413547237076
User 50427 does not improve AUC. Reverting changes.
Training on augumented user 65494 25/50 current_auc = 0.6497326203208555
User 65494 AUC after training: 0.6458704693998811
User 65494 does not improve AUC. Reverting changes.
Training on augumented user 113598 26/50 current_auc = 0.6497326203208555
User 113598 AUC after training: 0.6491384432560903
User 113598 does not improve AUC. Reverting changes.
Training on augumented user 42131 27/50 current_auc = 0.6497326203208555
User 42131 AUC after training: 0.6488413547237076
User 42131 does not improve AUC. Reverting changes.
Training on augumented user 3503 28/50 current_auc = 0.6497326203208555
User 3503 AUC after training: 0.6473559120617944
User 3503 does not improve AUC. Reverting changes.
Training on augumented user 32223 29/50 current_auc = 0.6497326203208555
User 32223 AUC after training: 0.6473559120617943
User 32223 does not improve AUC. Reverting changes.
Training on augumented user 95440 30/50 current_auc = 0.6497326203208555
User 95440 AUC after training: 0.647653000594177
User 95440 does not improve AUC. Reverting changes.
Training on augumented user 45923 31/50 current_auc = 0.6497326203208555
User 45923 AUC after training: 0.6494355317884729
User 45923 does not improve AUC. Reverting changes.
Training on augumented user 99636 32/50 current_auc = 0.6497326203208555
User 99636 AUC after training: 0.6491384432560903
User 99636 does not improve AUC. Reverting changes.
Training on augumented user 111763 33/50 current_auc = 0.6497326203208555
User 111763 AUC after training: 0.6473559120617944
User 111763 does not improve AUC. Reverting changes.
Training on augumented user 93591 34/50 current_auc = 0.6497326203208555
User 93591 AUC after training: 0.6470588235294117
User 93591 does not improve AUC. Reverting changes.
Training on augumented user 52757 35/50 current_auc = 0.6497326203208555
User 52757 AUC after training: 0.6479500891265597
User 52757 does not improve AUC. Reverting changes.
Training on augumented user 52399 36/50 current_auc = 0.6497326203208555
User 52399 AUC after training: 0.649435531788473
User 52399 does not improve AUC. Reverting changes.
Training on augumented user 136536 37/50 current_auc = 0.6497326203208555
User 136536 AUC after training: 0.6488413547237076
User 136536 does not improve AUC. Reverting changes.
Training on augumented user 17599 38/50 current_auc = 0.6497326203208555
User 17599 AUC after training: 0.6482471776589424
User 17599 does not improve AUC. Reverting changes.
Training on augumented user 63353 39/50 current_auc = 0.6497326203208555
User 63353 AUC after training: 0.6503267973856209
User 63353 improves AUC. Keeping the model.
Training on augumented user 135454 40/50 current_auc = 0.6503267973856209
User 135454 AUC after training: 0.6473559120617943
User 135454 does not improve AUC. Reverting changes.
Training on augumented user 59654 41/50 current_auc = 0.6503267973856209
User 59654 AUC after training: 0.6506238859180036
User 59654 improves AUC. Keeping the model.
Training on augumented user 107309 42/50 current_auc = 0.6506238859180036
User 107309 AUC after training: 0.6506238859180035
User 107309 does not improve AUC. Reverting changes.
Training on augumented user 107647 43/50 current_auc = 0.6506238859180036
User 107647 AUC after training: 0.6461675579322638
User 107647 does not improve AUC. Reverting changes.
Training on augumented user 48438 44/50 current_auc = 0.6506238859180036
User 48438 AUC after training: 0.651218062982769
User 48438 improves AUC. Keeping the model.
Training on augumented user 100693 45/50 current_auc = 0.651218062982769
User 100693 AUC after training: 0.6500297088532382
User 100693 does not improve AUC. Reverting changes.
Training on augumented user 40322 46/50 current_auc = 0.651218062982769
User 40322 AUC after training: 0.6512180629827689
User 40322 does not improve AUC. Reverting changes.
Training on augumented user 74933 47/50 current_auc = 0.651218062982769
User 74933 AUC after training: 0.6515151515151515
User 74933 improves AUC. Keeping the model.
Training on augumented user 102622 48/50 current_auc = 0.6515151515151515
User 102622 AUC after training: 0.6509209744503862
User 102622 does not improve AUC. Reverting changes.
Training on augumented user 57823 49/50 current_auc = 0.6515151515151515
User 57823 AUC after training: 0.6503267973856209
User 57823 does not improve AUC. Reverting changes.
[2024-12-02 19:13:43.422853] start test user 17640 176/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:44.081792] start test user 17640 176/568 recall augumented users by random, augumented_users = [71177, 109133, 104957, 133259, 122013, 80929, 17930, 77453, 33014, 52586, 33127, 53128, 121478, 111001, 98302, 117059, 108543, 8600, 55083, 89781, 98121, 81423, 3621, 55180, 18113, 107337, 94844, 24129, 47803, 25402, 48969, 119227, 95910, 97764, 117030, 65312, 64790, 123122, 74630, 61596, 120716, 27659, 1716, 81583, 87235, 130003, 578, 50429, 10073, 49207]
[2024-12-02 19:13:44.095834] user = 17640 Cloud 176/568
[2024-12-02 19:13:44.208892] user = 17640 Local 176/568
[2024-12-02 19:13:44.350735] user = 17640 Local+ 176/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:46.970931] user = 17640 MPDA- 176/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8917377049180328
Training on augumented user 71177 0/50 current_auc = 0.8917377049180328
User 71177 AUC after training: 0.8920281030444964
User 71177 improves AUC. Keeping the model.
Training on augumented user 109133 1/50 current_auc = 0.8920281030444964
User 109133 AUC after training: 0.8921967213114753
User 109133 improves AUC. Keeping the model.
Training on augumented user 104957 2/50 current_auc = 0.8921967213114753
User 104957 AUC after training: 0.8920843091334895
User 104957 does not improve AUC. Reverting changes.
Training on augumented user 133259 3/50 current_auc = 0.8921967213114753
User 133259 AUC after training: 0.8922903981264637
User 133259 improves AUC. Keeping the model.
Training on augumented user 122013 4/50 current_auc = 0.8922903981264637
User 122013 AUC after training: 0.892271662763466
User 122013 does not improve AUC. Reverting changes.
Training on augumented user 80929 5/50 current_auc = 0.8922903981264637
User 80929 AUC after training: 0.8920093676814989
User 80929 does not improve AUC. Reverting changes.
Training on augumented user 17930 6/50 current_auc = 0.8922903981264637
User 17930 AUC after training: 0.8915878220140515
User 17930 does not improve AUC. Reverting changes.
Training on augumented user 77453 7/50 current_auc = 0.8922903981264637
User 77453 AUC after training: 0.8922529274004684
User 77453 does not improve AUC. Reverting changes.
Training on augumented user 33014 8/50 current_auc = 0.8922903981264637
User 33014 AUC after training: 0.8920562060889929
User 33014 does not improve AUC. Reverting changes.
Training on augumented user 52586 9/50 current_auc = 0.8922903981264637
User 52586 AUC after training: 0.8917751756440281
User 52586 does not improve AUC. Reverting changes.
Training on augumented user 33127 10/50 current_auc = 0.8922903981264637
User 33127 AUC after training: 0.8921779859484777
User 33127 does not improve AUC. Reverting changes.
Training on augumented user 53128 11/50 current_auc = 0.8922903981264637
User 53128 AUC after training: 0.8921217798594847
User 53128 does not improve AUC. Reverting changes.
Training on augumented user 121478 12/50 current_auc = 0.8922903981264637
User 121478 AUC after training: 0.8923466042154566
User 121478 improves AUC. Keeping the model.
Training on augumented user 111001 13/50 current_auc = 0.8923466042154566
User 111001 AUC after training: 0.8919718969555035
User 111001 does not improve AUC. Reverting changes.
Training on augumented user 98302 14/50 current_auc = 0.8923466042154566
User 98302 AUC after training: 0.8918407494145199
User 98302 does not improve AUC. Reverting changes.
Training on augumented user 117059 15/50 current_auc = 0.8923466042154566
User 117059 AUC after training: 0.891831381733021
User 117059 does not improve AUC. Reverting changes.
Training on augumented user 108543 16/50 current_auc = 0.8923466042154566
User 108543 AUC after training: 0.892215456674473
User 108543 does not improve AUC. Reverting changes.
Training on augumented user 8600 17/50 current_auc = 0.8923466042154566
User 8600 AUC after training: 0.8920468384074941
User 8600 does not improve AUC. Reverting changes.
Training on augumented user 55083 18/50 current_auc = 0.8923466042154566
User 55083 AUC after training: 0.892
User 55083 does not improve AUC. Reverting changes.
Training on augumented user 89781 19/50 current_auc = 0.8923466042154566
User 89781 AUC after training: 0.8924777517564403
User 89781 improves AUC. Keeping the model.
Training on augumented user 98121 20/50 current_auc = 0.8924777517564403
User 98121 AUC after training: 0.8919718969555035
User 98121 does not improve AUC. Reverting changes.
Training on augumented user 81423 21/50 current_auc = 0.8924777517564403
User 81423 AUC after training: 0.8922903981264636
User 81423 does not improve AUC. Reverting changes.
Training on augumented user 3621 22/50 current_auc = 0.8924777517564403
User 3621 AUC after training: 0.8921967213114754
User 3621 does not improve AUC. Reverting changes.
Training on augumented user 55180 23/50 current_auc = 0.8924777517564403
User 55180 AUC after training: 0.8927587822014051
User 55180 improves AUC. Keeping the model.
Training on augumented user 18113 24/50 current_auc = 0.8927587822014051
User 18113 AUC after training: 0.8930023419203748
User 18113 improves AUC. Keeping the model.
Training on augumented user 107337 25/50 current_auc = 0.8930023419203748
User 107337 AUC after training: 0.8928524590163934
User 107337 does not improve AUC. Reverting changes.
Training on augumented user 94844 26/50 current_auc = 0.8930023419203748
User 94844 AUC after training: 0.8930117096018735
User 94844 improves AUC. Keeping the model.
Training on augumented user 24129 27/50 current_auc = 0.8930117096018735
User 24129 AUC after training: 0.8919344262295082
User 24129 does not improve AUC. Reverting changes.
Training on augumented user 47803 28/50 current_auc = 0.8930117096018735
User 47803 AUC after training: 0.8929648711943794
User 47803 does not improve AUC. Reverting changes.
Training on augumented user 25402 29/50 current_auc = 0.8930117096018735
User 25402 AUC after training: 0.8929461358313817
User 25402 does not improve AUC. Reverting changes.
Training on augumented user 48969 30/50 current_auc = 0.8930117096018735
User 48969 AUC after training: 0.8928337236533959
User 48969 does not improve AUC. Reverting changes.
Training on augumented user 119227 31/50 current_auc = 0.8930117096018735
User 119227 AUC after training: 0.8930960187353629
User 119227 improves AUC. Keeping the model.
Training on augumented user 95910 32/50 current_auc = 0.8930960187353629
User 95910 AUC after training: 0.8928524590163934
User 95910 does not improve AUC. Reverting changes.
Training on augumented user 97764 33/50 current_auc = 0.8930960187353629
User 97764 AUC after training: 0.8932271662763466
User 97764 improves AUC. Keeping the model.
Training on augumented user 117030 34/50 current_auc = 0.8932271662763466
User 117030 AUC after training: 0.8932833723653396
User 117030 improves AUC. Keeping the model.
Training on augumented user 65312 35/50 current_auc = 0.8932833723653396
User 65312 AUC after training: 0.8937330210772834
User 65312 improves AUC. Keeping the model.
Training on augumented user 64790 36/50 current_auc = 0.8937330210772834
User 64790 AUC after training: 0.8935081967213115
User 64790 does not improve AUC. Reverting changes.
Training on augumented user 123122 37/50 current_auc = 0.8937330210772834
User 123122 AUC after training: 0.893152224824356
User 123122 does not improve AUC. Reverting changes.
Training on augumented user 74630 38/50 current_auc = 0.8937330210772834
User 74630 AUC after training: 0.8936018735362997
User 74630 does not improve AUC. Reverting changes.
Training on augumented user 61596 39/50 current_auc = 0.8937330210772834
User 61596 AUC after training: 0.8939765807962529
User 61596 improves AUC. Keeping the model.
Training on augumented user 120716 40/50 current_auc = 0.8939765807962529
User 120716 AUC after training: 0.8928524590163934
User 120716 does not improve AUC. Reverting changes.
Training on augumented user 27659 41/50 current_auc = 0.8939765807962529
User 27659 AUC after training: 0.8933583138173302
User 27659 does not improve AUC. Reverting changes.
Training on augumented user 1716 42/50 current_auc = 0.8939765807962529
User 1716 AUC after training: 0.8936861826697893
User 1716 does not improve AUC. Reverting changes.
Training on augumented user 81583 43/50 current_auc = 0.8939765807962529
User 81583 AUC after training: 0.8929648711943794
User 81583 does not improve AUC. Reverting changes.
Training on augumented user 87235 44/50 current_auc = 0.8939765807962529
User 87235 AUC after training: 0.8937330210772833
User 87235 does not improve AUC. Reverting changes.
Training on augumented user 130003 45/50 current_auc = 0.8939765807962529
User 130003 AUC after training: 0.8938829039812646
User 130003 does not improve AUC. Reverting changes.
Training on augumented user 578 46/50 current_auc = 0.8939765807962529
User 578 AUC after training: 0.8934707259953162
User 578 does not improve AUC. Reverting changes.
Training on augumented user 50429 47/50 current_auc = 0.8939765807962529
User 50429 AUC after training: 0.8935269320843091
User 50429 does not improve AUC. Reverting changes.
Training on augumented user 10073 48/50 current_auc = 0.8939765807962529
User 10073 AUC after training: 0.893807962529274
User 10073 does not improve AUC. Reverting changes.
Training on augumented user 49207 49/50 current_auc = 0.8939765807962529
User 49207 AUC after training: 0.8925995316159251
User 49207 does not improve AUC. Reverting changes.
[2024-12-02 19:14:15.813715] start test user 17683 177/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:16.378053] start test user 17683 177/568 recall augumented users by random, augumented_users = [45765, 77962, 115810, 77193, 19182, 78345, 557, 38839, 82557, 74592, 18840, 115409, 101625, 42981, 76404, 28577, 77613, 28984, 8344, 114462, 120082, 21386, 47554, 129647, 67333, 101223, 38829, 45762, 42505, 118541, 67967, 39403, 41125, 86868, 47587, 68352, 136534, 50443, 93109, 19990, 95298, 117791, 135474, 87775, 132944, 13025, 13679, 107975, 125872, 68388]
[2024-12-02 19:14:16.400955] user = 17683 Cloud 177/568
[2024-12-02 19:14:16.494079] user = 17683 Local 177/568
[2024-12-02 19:14:16.693836] user = 17683 Local+ 177/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:19.079664] user = 17683 MPDA- 177/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6604951991465149
Training on augumented user 45765 0/50 current_auc = 0.6604951991465149
User 45765 AUC after training: 0.6610990101944049
User 45765 improves AUC. Keeping the model.
Training on augumented user 77962 1/50 current_auc = 0.6610990101944049
User 77962 AUC after training: 0.6613249762920816
User 77962 improves AUC. Keeping the model.
Training on augumented user 115810 2/50 current_auc = 0.6613249762920816
User 115810 AUC after training: 0.6605841038406828
User 115810 does not improve AUC. Reverting changes.
Training on augumented user 77193 3/50 current_auc = 0.6613249762920816
User 77193 AUC after training: 0.6607545045045045
User 77193 does not improve AUC. Reverting changes.
Training on augumented user 19182 4/50 current_auc = 0.6613249762920816
User 19182 AUC after training: 0.6613731330014224
User 19182 improves AUC. Keeping the model.
Training on augumented user 78345 5/50 current_auc = 0.6613731330014224
User 78345 AUC after training: 0.6606804172593647
User 78345 does not improve AUC. Reverting changes.
Training on augumented user 557 6/50 current_auc = 0.6613731330014224
User 557 AUC after training: 0.6614027678994784
User 557 improves AUC. Keeping the model.
Training on augumented user 38839 7/50 current_auc = 0.6614027678994784
User 38839 AUC after training: 0.6608248873873873
User 38839 does not improve AUC. Reverting changes.
Training on augumented user 82557 8/50 current_auc = 0.6614027678994784
User 82557 AUC after training: 0.6611545756282597
User 82557 does not improve AUC. Reverting changes.
Training on augumented user 74592 9/50 current_auc = 0.6614027678994784
User 74592 AUC after training: 0.661639847083926
User 74592 improves AUC. Keeping the model.
Training on augumented user 18840 10/50 current_auc = 0.661639847083926
User 18840 AUC after training: 0.6617398648648649
User 18840 improves AUC. Keeping the model.
Training on augumented user 115409 11/50 current_auc = 0.6617398648648649
User 115409 AUC after training: 0.6617398648648649
User 115409 does not improve AUC. Reverting changes.
Training on augumented user 101625 12/50 current_auc = 0.6617398648648649
User 101625 AUC after training: 0.6615990990990991
User 101625 does not improve AUC. Reverting changes.
Training on augumented user 42981 13/50 current_auc = 0.6617398648648649
User 42981 AUC after training: 0.6617139343290659
User 42981 does not improve AUC. Reverting changes.
Training on augumented user 76404 14/50 current_auc = 0.6617398648648649
User 76404 AUC after training: 0.661665777619725
User 76404 does not improve AUC. Reverting changes.
Training on augumented user 28577 15/50 current_auc = 0.6617398648648649
User 28577 AUC after training: 0.6618435870080607
User 28577 improves AUC. Keeping the model.
Training on augumented user 77613 16/50 current_auc = 0.6618435870080607
User 77613 AUC after training: 0.6607433914177335
User 77613 does not improve AUC. Reverting changes.
Training on augumented user 28984 17/50 current_auc = 0.6618435870080607
User 28984 AUC after training: 0.6618435870080607
User 28984 does not improve AUC. Reverting changes.
Training on augumented user 8344 18/50 current_auc = 0.6618435870080607
User 8344 AUC after training: 0.6619769440493125
User 8344 improves AUC. Keeping the model.
Training on augumented user 114462 19/50 current_auc = 0.6619769440493125
User 114462 AUC after training: 0.659865457562826
User 114462 does not improve AUC. Reverting changes.
Training on augumented user 120082 20/50 current_auc = 0.6619769440493125
User 120082 AUC after training: 0.6606137387387387
User 120082 does not improve AUC. Reverting changes.
Training on augumented user 21386 21/50 current_auc = 0.6619769440493125
User 21386 AUC after training: 0.6613101588430536
User 21386 does not improve AUC. Reverting changes.
Training on augumented user 47554 22/50 current_auc = 0.6619769440493125
User 47554 AUC after training: 0.6610286273115221
User 47554 does not improve AUC. Reverting changes.
Training on augumented user 129647 23/50 current_auc = 0.6619769440493125
User 129647 AUC after training: 0.661636142721669
User 129647 does not improve AUC. Reverting changes.
Training on augumented user 67333 24/50 current_auc = 0.6619769440493125
User 67333 AUC after training: 0.6607693219535324
User 67333 does not improve AUC. Reverting changes.
Training on augumented user 101223 25/50 current_auc = 0.6619769440493125
User 101223 AUC after training: 0.6619028568041727
User 101223 does not improve AUC. Reverting changes.
Training on augumented user 38829 26/50 current_auc = 0.6619769440493125
User 38829 AUC after training: 0.6611323494547179
User 38829 does not improve AUC. Reverting changes.
Training on augumented user 45762 27/50 current_auc = 0.6619769440493125
User 45762 AUC after training: 0.6611916192508298
User 45762 does not improve AUC. Reverting changes.
Training on augumented user 42505 28/50 current_auc = 0.6619769440493125
User 42505 AUC after training: 0.6614879682313892
User 42505 does not improve AUC. Reverting changes.
Training on augumented user 118541 29/50 current_auc = 0.6619769440493125
User 118541 AUC after training: 0.6597543266951162
User 118541 does not improve AUC. Reverting changes.
Training on augumented user 67967 30/50 current_auc = 0.6619769440493125
User 67967 AUC after training: 0.6617398648648649
User 67967 does not improve AUC. Reverting changes.
Training on augumented user 39403 31/50 current_auc = 0.6619769440493125
User 39403 AUC after training: 0.6611545756282599
User 39403 does not improve AUC. Reverting changes.
Training on augumented user 41125 32/50 current_auc = 0.6619769440493125
User 41125 AUC after training: 0.6612545934091986
User 41125 does not improve AUC. Reverting changes.
Training on augumented user 86868 33/50 current_auc = 0.6619769440493125
User 86868 AUC after training: 0.6609249051683262
User 86868 does not improve AUC. Reverting changes.
Training on augumented user 47587 34/50 current_auc = 0.6619769440493125
User 47587 AUC after training: 0.6608137743006164
User 47587 does not improve AUC. Reverting changes.
Training on augumented user 68352 35/50 current_auc = 0.6619769440493125
User 68352 AUC after training: 0.6617546823138928
User 68352 does not improve AUC. Reverting changes.
Training on augumented user 136534 36/50 current_auc = 0.6619769440493125
User 136534 AUC after training: 0.661680595068753
User 136534 does not improve AUC. Reverting changes.
Training on augumented user 50443 37/50 current_auc = 0.6619769440493125
User 50443 AUC after training: 0.6617176386913229
User 50443 does not improve AUC. Reverting changes.
Training on augumented user 93109 38/50 current_auc = 0.6619769440493125
User 93109 AUC after training: 0.661665777619725
User 93109 does not improve AUC. Reverting changes.
Training on augumented user 19990 39/50 current_auc = 0.6619769440493125
User 19990 AUC after training: 0.6611768018018018
User 19990 does not improve AUC. Reverting changes.
Training on augumented user 95298 40/50 current_auc = 0.6619769440493125
User 95298 AUC after training: 0.6611360538169749
User 95298 does not improve AUC. Reverting changes.
Training on augumented user 117791 41/50 current_auc = 0.6619769440493125
User 117791 AUC after training: 0.661680595068753
User 117791 does not improve AUC. Reverting changes.
Training on augumented user 135474 42/50 current_auc = 0.6619769440493125
User 135474 AUC after training: 0.6613916548127075
User 135474 does not improve AUC. Reverting changes.
Training on augumented user 87775 43/50 current_auc = 0.6619769440493125
User 87775 AUC after training: 0.6614657420578474
User 87775 does not improve AUC. Reverting changes.
Training on augumented user 132944 44/50 current_auc = 0.6619769440493125
User 132944 AUC after training: 0.6611175320056899
User 132944 does not improve AUC. Reverting changes.
Training on augumented user 13025 45/50 current_auc = 0.6619769440493125
User 13025 AUC after training: 0.6609804706021811
User 13025 does not improve AUC. Reverting changes.
Training on augumented user 13679 46/50 current_auc = 0.6619769440493125
User 13679 AUC after training: 0.6613768373636795
User 13679 does not improve AUC. Reverting changes.
Training on augumented user 107975 47/50 current_auc = 0.6619769440493125
User 107975 AUC after training: 0.661695412517781
User 107975 does not improve AUC. Reverting changes.
Training on augumented user 125872 48/50 current_auc = 0.6619769440493125
User 125872 AUC after training: 0.6613990635372214
User 125872 does not improve AUC. Reverting changes.
Training on augumented user 68388 49/50 current_auc = 0.6619769440493125
User 68388 AUC after training: 0.6610434447605501
User 68388 does not improve AUC. Reverting changes.
[2024-12-02 19:14:46.471785] start test user 17738 178/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:46.886288] start test user 17738 178/568 recall augumented users by random, augumented_users = [100926, 116175, 89648, 42084, 19716, 75931, 121713, 73682, 90079, 44307, 48715, 56443, 96563, 52765, 103418, 33371, 88504, 111910, 67138, 131722, 138412, 44470, 17053, 8209, 13375, 85077, 51321, 121574, 61559, 137605, 121640, 32083, 53359, 59764, 91838, 49993, 12425, 138390, 55592, 46267, 9853, 128125, 108244, 67653, 49114, 2286, 68128, 78401, 10257, 68061]
[2024-12-02 19:14:46.901252] user = 17738 Cloud 178/568
[2024-12-02 19:14:46.912744] user = 17738 Local 178/568
[2024-12-02 19:14:46.960678] user = 17738 Local+ 178/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:49.346354] user = 17738 MPDA- 178/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5390625
Training on augumented user 100926 0/50 current_auc = 0.5390625
User 100926 AUC after training: 0.5390625
User 100926 does not improve AUC. Reverting changes.
Training on augumented user 116175 1/50 current_auc = 0.5390625
User 116175 AUC after training: 0.5390625
User 116175 does not improve AUC. Reverting changes.
Training on augumented user 89648 2/50 current_auc = 0.5390625
User 89648 AUC after training: 0.5390625
User 89648 does not improve AUC. Reverting changes.
Training on augumented user 42084 3/50 current_auc = 0.5390625
User 42084 AUC after training: 0.5390625
User 42084 does not improve AUC. Reverting changes.
Training on augumented user 19716 4/50 current_auc = 0.5390625
User 19716 AUC after training: 0.5390625
User 19716 does not improve AUC. Reverting changes.
Training on augumented user 75931 5/50 current_auc = 0.5390625
User 75931 AUC after training: 0.5390625
User 75931 does not improve AUC. Reverting changes.
Training on augumented user 121713 6/50 current_auc = 0.5390625
User 121713 AUC after training: 0.5390625
User 121713 does not improve AUC. Reverting changes.
Training on augumented user 73682 7/50 current_auc = 0.5390625
User 73682 AUC after training: 0.53125
User 73682 does not improve AUC. Reverting changes.
Training on augumented user 90079 8/50 current_auc = 0.5390625
User 90079 AUC after training: 0.5390625
User 90079 does not improve AUC. Reverting changes.
Training on augumented user 44307 9/50 current_auc = 0.5390625
User 44307 AUC after training: 0.5390625
User 44307 does not improve AUC. Reverting changes.
Training on augumented user 48715 10/50 current_auc = 0.5390625
User 48715 AUC after training: 0.5390625
User 48715 does not improve AUC. Reverting changes.
Training on augumented user 56443 11/50 current_auc = 0.5390625
User 56443 AUC after training: 0.5390625
User 56443 does not improve AUC. Reverting changes.
Training on augumented user 96563 12/50 current_auc = 0.5390625
User 96563 AUC after training: 0.5390625
User 96563 does not improve AUC. Reverting changes.
Training on augumented user 52765 13/50 current_auc = 0.5390625
User 52765 AUC after training: 0.5390625
User 52765 does not improve AUC. Reverting changes.
Training on augumented user 103418 14/50 current_auc = 0.5390625
User 103418 AUC after training: 0.5390625
User 103418 does not improve AUC. Reverting changes.
Training on augumented user 33371 15/50 current_auc = 0.5390625
User 33371 AUC after training: 0.5390625
User 33371 does not improve AUC. Reverting changes.
Training on augumented user 88504 16/50 current_auc = 0.5390625
User 88504 AUC after training: 0.5390625
User 88504 does not improve AUC. Reverting changes.
Training on augumented user 111910 17/50 current_auc = 0.5390625
User 111910 AUC after training: 0.5390625
User 111910 does not improve AUC. Reverting changes.
Training on augumented user 67138 18/50 current_auc = 0.5390625
User 67138 AUC after training: 0.5390625
User 67138 does not improve AUC. Reverting changes.
Training on augumented user 131722 19/50 current_auc = 0.5390625
User 131722 AUC after training: 0.5390625
User 131722 does not improve AUC. Reverting changes.
Training on augumented user 138412 20/50 current_auc = 0.5390625
User 138412 AUC after training: 0.53125
User 138412 does not improve AUC. Reverting changes.
Training on augumented user 44470 21/50 current_auc = 0.5390625
User 44470 AUC after training: 0.5390625
User 44470 does not improve AUC. Reverting changes.
Training on augumented user 17053 22/50 current_auc = 0.5390625
User 17053 AUC after training: 0.5390625
User 17053 does not improve AUC. Reverting changes.
Training on augumented user 8209 23/50 current_auc = 0.5390625
User 8209 AUC after training: 0.5390625
User 8209 does not improve AUC. Reverting changes.
Training on augumented user 13375 24/50 current_auc = 0.5390625
User 13375 AUC after training: 0.5390625
User 13375 does not improve AUC. Reverting changes.
Training on augumented user 85077 25/50 current_auc = 0.5390625
User 85077 AUC after training: 0.5390625
User 85077 does not improve AUC. Reverting changes.
Training on augumented user 51321 26/50 current_auc = 0.5390625
User 51321 AUC after training: 0.5390625
User 51321 does not improve AUC. Reverting changes.
Training on augumented user 121574 27/50 current_auc = 0.5390625
User 121574 AUC after training: 0.5390625
User 121574 does not improve AUC. Reverting changes.
Training on augumented user 61559 28/50 current_auc = 0.5390625
User 61559 AUC after training: 0.5390625
User 61559 does not improve AUC. Reverting changes.
Training on augumented user 137605 29/50 current_auc = 0.5390625
User 137605 AUC after training: 0.5390625
User 137605 does not improve AUC. Reverting changes.
Training on augumented user 121640 30/50 current_auc = 0.5390625
User 121640 AUC after training: 0.5390625
User 121640 does not improve AUC. Reverting changes.
Training on augumented user 32083 31/50 current_auc = 0.5390625
User 32083 AUC after training: 0.5390625
User 32083 does not improve AUC. Reverting changes.
Training on augumented user 53359 32/50 current_auc = 0.5390625
User 53359 AUC after training: 0.5390625
User 53359 does not improve AUC. Reverting changes.
Training on augumented user 59764 33/50 current_auc = 0.5390625
User 59764 AUC after training: 0.5390625
User 59764 does not improve AUC. Reverting changes.
Training on augumented user 91838 34/50 current_auc = 0.5390625
User 91838 AUC after training: 0.5390625
User 91838 does not improve AUC. Reverting changes.
Training on augumented user 49993 35/50 current_auc = 0.5390625
User 49993 AUC after training: 0.53125
User 49993 does not improve AUC. Reverting changes.
Training on augumented user 12425 36/50 current_auc = 0.5390625
User 12425 AUC after training: 0.5390625
User 12425 does not improve AUC. Reverting changes.
Training on augumented user 138390 37/50 current_auc = 0.5390625
User 138390 AUC after training: 0.5390625
User 138390 does not improve AUC. Reverting changes.
Training on augumented user 55592 38/50 current_auc = 0.5390625
User 55592 AUC after training: 0.5390625
User 55592 does not improve AUC. Reverting changes.
Training on augumented user 46267 39/50 current_auc = 0.5390625
User 46267 AUC after training: 0.5390625
User 46267 does not improve AUC. Reverting changes.
Training on augumented user 9853 40/50 current_auc = 0.5390625
User 9853 AUC after training: 0.5390625
User 9853 does not improve AUC. Reverting changes.
Training on augumented user 128125 41/50 current_auc = 0.5390625
User 128125 AUC after training: 0.5390625
User 128125 does not improve AUC. Reverting changes.
Training on augumented user 108244 42/50 current_auc = 0.5390625
User 108244 AUC after training: 0.5390625
User 108244 does not improve AUC. Reverting changes.
Training on augumented user 67653 43/50 current_auc = 0.5390625
User 67653 AUC after training: 0.5390625
User 67653 does not improve AUC. Reverting changes.
Training on augumented user 49114 44/50 current_auc = 0.5390625
User 49114 AUC after training: 0.5390625
User 49114 does not improve AUC. Reverting changes.
Training on augumented user 2286 45/50 current_auc = 0.5390625
User 2286 AUC after training: 0.5390625
User 2286 does not improve AUC. Reverting changes.
Training on augumented user 68128 46/50 current_auc = 0.5390625
User 68128 AUC after training: 0.5390625
User 68128 does not improve AUC. Reverting changes.
Training on augumented user 78401 47/50 current_auc = 0.5390625
User 78401 AUC after training: 0.53125
User 78401 does not improve AUC. Reverting changes.
Training on augumented user 10257 48/50 current_auc = 0.5390625
User 10257 AUC after training: 0.5390625
User 10257 does not improve AUC. Reverting changes.
Training on augumented user 68061 49/50 current_auc = 0.5390625
User 68061 AUC after training: 0.5390625
User 68061 does not improve AUC. Reverting changes.
[2024-12-02 19:15:20.467043] start test user 17763 179/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:20.870124] start test user 17763 179/568 recall augumented users by random, augumented_users = [70854, 113060, 79129, 77943, 85627, 29657, 4991, 7990, 29603, 65480, 82073, 119447, 120578, 131332, 23062, 126434, 76610, 43366, 18242, 98045, 117427, 70245, 39730, 136076, 86447, 64610, 111164, 128954, 104181, 121222, 32523, 134877, 117605, 89083, 57031, 57358, 130129, 45837, 57451, 128514, 97781, 135716, 24478, 114087, 22885, 95968, 91597, 117519, 54967, 16425]
[2024-12-02 19:15:20.885094] user = 17763 Cloud 179/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:15:20.892095] user = 17763 Local 179/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:15:20.927024] user = 17763 Local+ 179/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:15:23.101408] user = 17763 MPDA- 179/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 70854 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70854 AUC after training: 0.5
User 70854 does not improve AUC. Reverting changes.
Training on augumented user 113060 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113060 AUC after training: 0.5
User 113060 does not improve AUC. Reverting changes.
Training on augumented user 79129 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79129 AUC after training: 0.5
User 79129 does not improve AUC. Reverting changes.
Training on augumented user 77943 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77943 AUC after training: 0.5
User 77943 does not improve AUC. Reverting changes.
Training on augumented user 85627 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85627 AUC after training: 0.5
User 85627 does not improve AUC. Reverting changes.
Training on augumented user 29657 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29657 AUC after training: 0.5
User 29657 does not improve AUC. Reverting changes.
Training on augumented user 4991 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4991 AUC after training: 0.5
User 4991 does not improve AUC. Reverting changes.
Training on augumented user 7990 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7990 AUC after training: 0.5
User 7990 does not improve AUC. Reverting changes.
Training on augumented user 29603 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29603 AUC after training: 0.5
User 29603 does not improve AUC. Reverting changes.
Training on augumented user 65480 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65480 AUC after training: 0.5
User 65480 does not improve AUC. Reverting changes.
Training on augumented user 82073 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82073 AUC after training: 0.5
User 82073 does not improve AUC. Reverting changes.
Training on augumented user 119447 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119447 AUC after training: 0.5
User 119447 does not improve AUC. Reverting changes.
Training on augumented user 120578 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120578 AUC after training: 0.5
User 120578 does not improve AUC. Reverting changes.
Training on augumented user 131332 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131332 AUC after training: 0.5
User 131332 does not improve AUC. Reverting changes.
Training on augumented user 23062 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23062 AUC after training: 0.5
User 23062 does not improve AUC. Reverting changes.
Training on augumented user 126434 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126434 AUC after training: 0.5
User 126434 does not improve AUC. Reverting changes.
Training on augumented user 76610 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76610 AUC after training: 0.5
User 76610 does not improve AUC. Reverting changes.
Training on augumented user 43366 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43366 AUC after training: 0.5
User 43366 does not improve AUC. Reverting changes.
Training on augumented user 18242 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18242 AUC after training: 0.5
User 18242 does not improve AUC. Reverting changes.
Training on augumented user 98045 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98045 AUC after training: 0.5
User 98045 does not improve AUC. Reverting changes.
Training on augumented user 117427 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117427 AUC after training: 0.5
User 117427 does not improve AUC. Reverting changes.
Training on augumented user 70245 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70245 AUC after training: 0.5
User 70245 does not improve AUC. Reverting changes.
Training on augumented user 39730 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39730 AUC after training: 0.5
User 39730 does not improve AUC. Reverting changes.
Training on augumented user 136076 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136076 AUC after training: 0.5
User 136076 does not improve AUC. Reverting changes.
Training on augumented user 86447 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86447 AUC after training: 0.5
User 86447 does not improve AUC. Reverting changes.
Training on augumented user 64610 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64610 AUC after training: 0.5
User 64610 does not improve AUC. Reverting changes.
Training on augumented user 111164 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111164 AUC after training: 0.5
User 111164 does not improve AUC. Reverting changes.
Training on augumented user 128954 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128954 AUC after training: 0.5
User 128954 does not improve AUC. Reverting changes.
Training on augumented user 104181 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104181 AUC after training: 0.5
User 104181 does not improve AUC. Reverting changes.
Training on augumented user 121222 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121222 AUC after training: 0.5
User 121222 does not improve AUC. Reverting changes.
Training on augumented user 32523 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32523 AUC after training: 0.5
User 32523 does not improve AUC. Reverting changes.
Training on augumented user 134877 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134877 AUC after training: 0.5
User 134877 does not improve AUC. Reverting changes.
Training on augumented user 117605 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117605 AUC after training: 0.5
User 117605 does not improve AUC. Reverting changes.
Training on augumented user 89083 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89083 AUC after training: 0.5
User 89083 does not improve AUC. Reverting changes.
Training on augumented user 57031 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57031 AUC after training: 0.5
User 57031 does not improve AUC. Reverting changes.
Training on augumented user 57358 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57358 AUC after training: 0.5
User 57358 does not improve AUC. Reverting changes.
Training on augumented user 130129 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130129 AUC after training: 0.5
User 130129 does not improve AUC. Reverting changes.
Training on augumented user 45837 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45837 AUC after training: 0.5
User 45837 does not improve AUC. Reverting changes.
Training on augumented user 57451 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57451 AUC after training: 0.5
User 57451 does not improve AUC. Reverting changes.
Training on augumented user 128514 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128514 AUC after training: 0.5
User 128514 does not improve AUC. Reverting changes.
Training on augumented user 97781 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97781 AUC after training: 0.5
User 97781 does not improve AUC. Reverting changes.
Training on augumented user 135716 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135716 AUC after training: 0.5
User 135716 does not improve AUC. Reverting changes.
Training on augumented user 24478 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24478 AUC after training: 0.5
User 24478 does not improve AUC. Reverting changes.
Training on augumented user 114087 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114087 AUC after training: 0.5
User 114087 does not improve AUC. Reverting changes.
Training on augumented user 22885 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22885 AUC after training: 0.5
User 22885 does not improve AUC. Reverting changes.
Training on augumented user 95968 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95968 AUC after training: 0.5
User 95968 does not improve AUC. Reverting changes.
Training on augumented user 91597 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91597 AUC after training: 0.5
User 91597 does not improve AUC. Reverting changes.
Training on augumented user 117519 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117519 AUC after training: 0.5
User 117519 does not improve AUC. Reverting changes.
Training on augumented user 54967 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54967 AUC after training: 0.5
User 54967 does not improve AUC. Reverting changes.
Training on augumented user 16425 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16425 AUC after training: 0.5
User 16425 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:15:49.017048] start test user 17764 180/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:49.679529] start test user 17764 180/568 recall augumented users by random, augumented_users = [95517, 89124, 135742, 85933, 5484, 78592, 125021, 82831, 110536, 62481, 24021, 100038, 36696, 128864, 10497, 103639, 98459, 46567, 37326, 105269, 99208, 43684, 75776, 109612, 117364, 32446, 75633, 93007, 92063, 49555, 20110, 120898, 18165, 111340, 17688, 71226, 122085, 67359, 41288, 68044, 124709, 50854, 46234, 110568, 62649, 42911, 109836, 116000, 120239, 64108]
[2024-12-02 19:15:49.701351] user = 17764 Cloud 180/568
[2024-12-02 19:15:49.736120] user = 17764 Local 180/568
[2024-12-02 19:15:49.792020] user = 17764 Local+ 180/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:52.078725] user = 17764 MPDA- 180/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.48723856788372916
Training on augumented user 95517 0/50 current_auc = 0.48723856788372916
User 95517 AUC after training: 0.4881247784473591
User 95517 improves AUC. Keeping the model.
Training on augumented user 89124 1/50 current_auc = 0.4881247784473591
User 89124 AUC after training: 0.4870613257710032
User 89124 does not improve AUC. Reverting changes.
Training on augumented user 135742 2/50 current_auc = 0.4881247784473591
User 135742 AUC after training: 0.48582063098192135
User 135742 does not improve AUC. Reverting changes.
Training on augumented user 85933 3/50 current_auc = 0.4881247784473591
User 85933 AUC after training: 0.4883020205600851
User 85933 improves AUC. Keeping the model.
Training on augumented user 5484 4/50 current_auc = 0.4883020205600851
User 5484 AUC after training: 0.48812477844735913
User 5484 does not improve AUC. Reverting changes.
Training on augumented user 78592 5/50 current_auc = 0.4883020205600851
User 78592 AUC after training: 0.48901098901098905
User 78592 improves AUC. Keeping the model.
Training on augumented user 125021 6/50 current_auc = 0.48901098901098905
User 125021 AUC after training: 0.4879475363346331
User 125021 does not improve AUC. Reverting changes.
Training on augumented user 82831 7/50 current_auc = 0.48901098901098905
User 82831 AUC after training: 0.4877702942219071
User 82831 does not improve AUC. Reverting changes.
Training on augumented user 110536 8/50 current_auc = 0.48901098901098905
User 110536 AUC after training: 0.488656504785537
User 110536 does not improve AUC. Reverting changes.
Training on augumented user 62481 9/50 current_auc = 0.48901098901098905
User 62481 AUC after training: 0.489365473236441
User 62481 improves AUC. Keeping the model.
Training on augumented user 24021 10/50 current_auc = 0.489365473236441
User 24021 AUC after training: 0.48847926267281105
User 24021 does not improve AUC. Reverting changes.
Training on augumented user 100038 11/50 current_auc = 0.489365473236441
User 100038 AUC after training: 0.4872385678837292
User 100038 does not improve AUC. Reverting changes.
Training on augumented user 36696 12/50 current_auc = 0.489365473236441
User 36696 AUC after training: 0.48989719957461897
User 36696 improves AUC. Keeping the model.
Training on augumented user 128864 13/50 current_auc = 0.48989719957461897
User 128864 AUC after training: 0.489010989010989
User 128864 does not improve AUC. Reverting changes.
Training on augumented user 10497 14/50 current_auc = 0.48989719957461897
User 10497 AUC after training: 0.48883374689826303
User 10497 does not improve AUC. Reverting changes.
Training on augumented user 103639 15/50 current_auc = 0.48989719957461897
User 103639 AUC after training: 0.4883020205600851
User 103639 does not improve AUC. Reverting changes.
Training on augumented user 98459 16/50 current_auc = 0.48989719957461897
User 98459 AUC after training: 0.48865650478553707
User 98459 does not improve AUC. Reverting changes.
Training on augumented user 46567 17/50 current_auc = 0.48989719957461897
User 46567 AUC after training: 0.48971995746189295
User 46567 does not improve AUC. Reverting changes.
Training on augumented user 37326 18/50 current_auc = 0.48989719957461897
User 37326 AUC after training: 0.4898971995746189
User 37326 does not improve AUC. Reverting changes.
Training on augumented user 105269 19/50 current_auc = 0.48989719957461897
User 105269 AUC after training: 0.489188231123715
User 105269 does not improve AUC. Reverting changes.
Training on augumented user 99208 20/50 current_auc = 0.48989719957461897
User 99208 AUC after training: 0.48511166253101745
User 99208 does not improve AUC. Reverting changes.
Training on augumented user 43684 21/50 current_auc = 0.48989719957461897
User 43684 AUC after training: 0.4877702942219071
User 43684 does not improve AUC. Reverting changes.
Training on augumented user 75776 22/50 current_auc = 0.48989719957461897
User 75776 AUC after training: 0.489365473236441
User 75776 does not improve AUC. Reverting changes.
Training on augumented user 109612 23/50 current_auc = 0.48989719957461897
User 109612 AUC after training: 0.489188231123715
User 109612 does not improve AUC. Reverting changes.
Training on augumented user 117364 24/50 current_auc = 0.48989719957461897
User 117364 AUC after training: 0.488656504785537
User 117364 does not improve AUC. Reverting changes.
Training on augumented user 32446 25/50 current_auc = 0.48989719957461897
User 32446 AUC after training: 0.48440269408011344
User 32446 does not improve AUC. Reverting changes.
Training on augumented user 75633 26/50 current_auc = 0.48989719957461897
User 75633 AUC after training: 0.4898971995746189
User 75633 does not improve AUC. Reverting changes.
Training on augumented user 93007 27/50 current_auc = 0.48989719957461897
User 93007 AUC after training: 0.4913151364764268
User 93007 improves AUC. Keeping the model.
Training on augumented user 92063 28/50 current_auc = 0.4913151364764268
User 92063 AUC after training: 0.49078341013824883
User 92063 does not improve AUC. Reverting changes.
Training on augumented user 49555 29/50 current_auc = 0.4913151364764268
User 49555 AUC after training: 0.49255583126550867
User 49555 improves AUC. Keeping the model.
Training on augumented user 20110 30/50 current_auc = 0.49255583126550867
User 20110 AUC after training: 0.49042892591279685
User 20110 does not improve AUC. Reverting changes.
Training on augumented user 120898 31/50 current_auc = 0.49255583126550867
User 120898 AUC after training: 0.48989719957461897
User 120898 does not improve AUC. Reverting changes.
Training on augumented user 18165 32/50 current_auc = 0.49255583126550867
User 18165 AUC after training: 0.48847926267281105
User 18165 does not improve AUC. Reverting changes.
Training on augumented user 111340 33/50 current_auc = 0.49255583126550867
User 111340 AUC after training: 0.4927330733782347
User 111340 improves AUC. Keeping the model.
Training on augumented user 17688 34/50 current_auc = 0.4927330733782347
User 17688 AUC after training: 0.4913151364764268
User 17688 does not improve AUC. Reverting changes.
Training on augumented user 71226 35/50 current_auc = 0.4927330733782347
User 71226 AUC after training: 0.4923785891527827
User 71226 does not improve AUC. Reverting changes.
Training on augumented user 122085 36/50 current_auc = 0.4927330733782347
User 122085 AUC after training: 0.4923785891527827
User 122085 does not improve AUC. Reverting changes.
Training on augumented user 67359 37/50 current_auc = 0.4927330733782347
User 67359 AUC after training: 0.4918468628146047
User 67359 does not improve AUC. Reverting changes.
Training on augumented user 41288 38/50 current_auc = 0.4927330733782347
User 41288 AUC after training: 0.4913151364764268
User 41288 does not improve AUC. Reverting changes.
Training on augumented user 68044 39/50 current_auc = 0.4927330733782347
User 68044 AUC after training: 0.4922013470400567
User 68044 does not improve AUC. Reverting changes.
Training on augumented user 124709 40/50 current_auc = 0.4927330733782347
User 124709 AUC after training: 0.49096065225097485
User 124709 does not improve AUC. Reverting changes.
Training on augumented user 50854 41/50 current_auc = 0.4927330733782347
User 50854 AUC after training: 0.4888337468982631
User 50854 does not improve AUC. Reverting changes.
Training on augumented user 46234 42/50 current_auc = 0.4927330733782347
User 46234 AUC after training: 0.49202410492733073
User 46234 does not improve AUC. Reverting changes.
Training on augumented user 110568 43/50 current_auc = 0.4927330733782347
User 110568 AUC after training: 0.49308755760368667
User 110568 improves AUC. Keeping the model.
Training on augumented user 62649 44/50 current_auc = 0.49308755760368667
User 62649 AUC after training: 0.4913151364764268
User 62649 does not improve AUC. Reverting changes.
Training on augumented user 42911 45/50 current_auc = 0.49308755760368667
User 42911 AUC after training: 0.4914923785891528
User 42911 does not improve AUC. Reverting changes.
Training on augumented user 109836 46/50 current_auc = 0.49308755760368667
User 109836 AUC after training: 0.4922013470400567
User 109836 does not improve AUC. Reverting changes.
Training on augumented user 116000 47/50 current_auc = 0.49308755760368667
User 116000 AUC after training: 0.48989719957461886
User 116000 does not improve AUC. Reverting changes.
Training on augumented user 120239 48/50 current_auc = 0.49308755760368667
User 120239 AUC after training: 0.49060616802552287
User 120239 does not improve AUC. Reverting changes.
Training on augumented user 64108 49/50 current_auc = 0.49308755760368667
User 64108 AUC after training: 0.49220134704005675
User 64108 does not improve AUC. Reverting changes.
[2024-12-02 19:16:18.878665] start test user 17784 181/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:19.373323] start test user 17784 181/568 recall augumented users by random, augumented_users = [122936, 60411, 98705, 112770, 54600, 51412, 125967, 93964, 6320, 372, 91972, 12691, 38426, 104118, 134035, 48274, 132685, 100417, 128183, 81645, 48261, 114785, 86640, 71969, 89210, 47082, 73568, 6502, 25127, 11820, 104909, 82919, 117944, 132079, 3935, 73025, 6584, 117851, 58312, 91926, 43231, 25283, 20354, 1760, 75041, 9644, 39086, 127237, 34269, 44029]
[2024-12-02 19:16:19.388764] user = 17784 Cloud 181/568
[2024-12-02 19:16:19.398948] user = 17784 Local 181/568
[2024-12-02 19:16:19.459015] user = 17784 Local+ 181/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:21.319785] user = 17784 MPDA- 181/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5384615384615384
Training on augumented user 122936 0/50 current_auc = 0.5384615384615384
User 122936 AUC after training: 0.5384615384615384
User 122936 does not improve AUC. Reverting changes.
Training on augumented user 60411 1/50 current_auc = 0.5384615384615384
User 60411 AUC after training: 0.5384615384615384
User 60411 does not improve AUC. Reverting changes.
Training on augumented user 98705 2/50 current_auc = 0.5384615384615384
User 98705 AUC after training: 0.5384615384615384
User 98705 does not improve AUC. Reverting changes.
Training on augumented user 112770 3/50 current_auc = 0.5384615384615384
User 112770 AUC after training: 0.5384615384615384
User 112770 does not improve AUC. Reverting changes.
Training on augumented user 54600 4/50 current_auc = 0.5384615384615384
User 54600 AUC after training: 0.5384615384615384
User 54600 does not improve AUC. Reverting changes.
Training on augumented user 51412 5/50 current_auc = 0.5384615384615384
User 51412 AUC after training: 0.5384615384615384
User 51412 does not improve AUC. Reverting changes.
Training on augumented user 125967 6/50 current_auc = 0.5384615384615384
User 125967 AUC after training: 0.5384615384615384
User 125967 does not improve AUC. Reverting changes.
Training on augumented user 93964 7/50 current_auc = 0.5384615384615384
User 93964 AUC after training: 0.5384615384615384
User 93964 does not improve AUC. Reverting changes.
Training on augumented user 6320 8/50 current_auc = 0.5384615384615384
User 6320 AUC after training: 0.5384615384615384
User 6320 does not improve AUC. Reverting changes.
Training on augumented user 372 9/50 current_auc = 0.5384615384615384
User 372 AUC after training: 0.5384615384615384
User 372 does not improve AUC. Reverting changes.
Training on augumented user 91972 10/50 current_auc = 0.5384615384615384
User 91972 AUC after training: 0.5384615384615384
User 91972 does not improve AUC. Reverting changes.
Training on augumented user 12691 11/50 current_auc = 0.5384615384615384
User 12691 AUC after training: 0.5384615384615384
User 12691 does not improve AUC. Reverting changes.
Training on augumented user 38426 12/50 current_auc = 0.5384615384615384
User 38426 AUC after training: 0.5384615384615384
User 38426 does not improve AUC. Reverting changes.
Training on augumented user 104118 13/50 current_auc = 0.5384615384615384
User 104118 AUC after training: 0.5384615384615384
User 104118 does not improve AUC. Reverting changes.
Training on augumented user 134035 14/50 current_auc = 0.5384615384615384
User 134035 AUC after training: 0.5384615384615384
User 134035 does not improve AUC. Reverting changes.
Training on augumented user 48274 15/50 current_auc = 0.5384615384615384
User 48274 AUC after training: 0.5384615384615384
User 48274 does not improve AUC. Reverting changes.
Training on augumented user 132685 16/50 current_auc = 0.5384615384615384
User 132685 AUC after training: 0.5384615384615384
User 132685 does not improve AUC. Reverting changes.
Training on augumented user 100417 17/50 current_auc = 0.5384615384615384
User 100417 AUC after training: 0.5384615384615384
User 100417 does not improve AUC. Reverting changes.
Training on augumented user 128183 18/50 current_auc = 0.5384615384615384
User 128183 AUC after training: 0.5384615384615384
User 128183 does not improve AUC. Reverting changes.
Training on augumented user 81645 19/50 current_auc = 0.5384615384615384
User 81645 AUC after training: 0.5384615384615384
User 81645 does not improve AUC. Reverting changes.
Training on augumented user 48261 20/50 current_auc = 0.5384615384615384
User 48261 AUC after training: 0.5384615384615384
User 48261 does not improve AUC. Reverting changes.
Training on augumented user 114785 21/50 current_auc = 0.5384615384615384
User 114785 AUC after training: 0.5384615384615384
User 114785 does not improve AUC. Reverting changes.
Training on augumented user 86640 22/50 current_auc = 0.5384615384615384
User 86640 AUC after training: 0.5384615384615384
User 86640 does not improve AUC. Reverting changes.
Training on augumented user 71969 23/50 current_auc = 0.5384615384615384
User 71969 AUC after training: 0.5384615384615384
User 71969 does not improve AUC. Reverting changes.
Training on augumented user 89210 24/50 current_auc = 0.5384615384615384
User 89210 AUC after training: 0.5384615384615384
User 89210 does not improve AUC. Reverting changes.
Training on augumented user 47082 25/50 current_auc = 0.5384615384615384
User 47082 AUC after training: 0.5384615384615384
User 47082 does not improve AUC. Reverting changes.
Training on augumented user 73568 26/50 current_auc = 0.5384615384615384
User 73568 AUC after training: 0.5384615384615384
User 73568 does not improve AUC. Reverting changes.
Training on augumented user 6502 27/50 current_auc = 0.5384615384615384
User 6502 AUC after training: 0.5384615384615384
User 6502 does not improve AUC. Reverting changes.
Training on augumented user 25127 28/50 current_auc = 0.5384615384615384
User 25127 AUC after training: 0.5384615384615384
User 25127 does not improve AUC. Reverting changes.
Training on augumented user 11820 29/50 current_auc = 0.5384615384615384
User 11820 AUC after training: 0.5384615384615384
User 11820 does not improve AUC. Reverting changes.
Training on augumented user 104909 30/50 current_auc = 0.5384615384615384
User 104909 AUC after training: 0.5384615384615384
User 104909 does not improve AUC. Reverting changes.
Training on augumented user 82919 31/50 current_auc = 0.5384615384615384
User 82919 AUC after training: 0.5384615384615384
User 82919 does not improve AUC. Reverting changes.
Training on augumented user 117944 32/50 current_auc = 0.5384615384615384
User 117944 AUC after training: 0.5384615384615384
User 117944 does not improve AUC. Reverting changes.
Training on augumented user 132079 33/50 current_auc = 0.5384615384615384
User 132079 AUC after training: 0.5384615384615384
User 132079 does not improve AUC. Reverting changes.
Training on augumented user 3935 34/50 current_auc = 0.5384615384615384
User 3935 AUC after training: 0.5384615384615384
User 3935 does not improve AUC. Reverting changes.
Training on augumented user 73025 35/50 current_auc = 0.5384615384615384
User 73025 AUC after training: 0.5384615384615384
User 73025 does not improve AUC. Reverting changes.
Training on augumented user 6584 36/50 current_auc = 0.5384615384615384
User 6584 AUC after training: 0.5384615384615384
User 6584 does not improve AUC. Reverting changes.
Training on augumented user 117851 37/50 current_auc = 0.5384615384615384
User 117851 AUC after training: 0.5384615384615384
User 117851 does not improve AUC. Reverting changes.
Training on augumented user 58312 38/50 current_auc = 0.5384615384615384
User 58312 AUC after training: 0.5384615384615384
User 58312 does not improve AUC. Reverting changes.
Training on augumented user 91926 39/50 current_auc = 0.5384615384615384
User 91926 AUC after training: 0.5384615384615384
User 91926 does not improve AUC. Reverting changes.
Training on augumented user 43231 40/50 current_auc = 0.5384615384615384
User 43231 AUC after training: 0.5384615384615384
User 43231 does not improve AUC. Reverting changes.
Training on augumented user 25283 41/50 current_auc = 0.5384615384615384
User 25283 AUC after training: 0.5384615384615384
User 25283 does not improve AUC. Reverting changes.
Training on augumented user 20354 42/50 current_auc = 0.5384615384615384
User 20354 AUC after training: 0.5384615384615384
User 20354 does not improve AUC. Reverting changes.
Training on augumented user 1760 43/50 current_auc = 0.5384615384615384
User 1760 AUC after training: 0.5384615384615384
User 1760 does not improve AUC. Reverting changes.
Training on augumented user 75041 44/50 current_auc = 0.5384615384615384
User 75041 AUC after training: 0.5384615384615384
User 75041 does not improve AUC. Reverting changes.
Training on augumented user 9644 45/50 current_auc = 0.5384615384615384
User 9644 AUC after training: 0.5384615384615384
User 9644 does not improve AUC. Reverting changes.
Training on augumented user 39086 46/50 current_auc = 0.5384615384615384
User 39086 AUC after training: 0.5384615384615384
User 39086 does not improve AUC. Reverting changes.
Training on augumented user 127237 47/50 current_auc = 0.5384615384615384
User 127237 AUC after training: 0.5384615384615384
User 127237 does not improve AUC. Reverting changes.
Training on augumented user 34269 48/50 current_auc = 0.5384615384615384
User 34269 AUC after training: 0.5384615384615384
User 34269 does not improve AUC. Reverting changes.
Training on augumented user 44029 49/50 current_auc = 0.5384615384615384
User 44029 AUC after training: 0.5384615384615384
User 44029 does not improve AUC. Reverting changes.
[2024-12-02 19:16:50.140781] start test user 17838 182/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:50.627145] start test user 17838 182/568 recall augumented users by random, augumented_users = [8760, 93126, 116086, 60632, 117582, 41060, 95846, 130284, 97779, 78301, 16180, 108839, 97755, 108109, 4895, 120339, 69513, 136107, 98312, 9330, 100666, 133606, 133941, 37965, 132744, 80957, 72887, 6587, 14854, 18949, 113100, 23013, 123817, 104081, 42001, 62577, 87021, 99842, 104414, 101293, 112811, 27149, 88344, 102926, 38976, 12988, 103571, 100673, 8505, 137086]
[2024-12-02 19:16:50.643032] user = 17838 Cloud 182/568
[2024-12-02 19:16:50.658536] user = 17838 Local 182/568
[2024-12-02 19:16:50.755220] user = 17838 Local+ 182/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:53.690511] user = 17838 MPDA- 182/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5993914807302232
Training on augumented user 8760 0/50 current_auc = 0.5993914807302232
User 8760 AUC after training: 0.601419878296146
User 8760 improves AUC. Keeping the model.
Training on augumented user 93126 1/50 current_auc = 0.601419878296146
User 93126 AUC after training: 0.6004056795131846
User 93126 does not improve AUC. Reverting changes.
Training on augumented user 116086 2/50 current_auc = 0.601419878296146
User 116086 AUC after training: 0.6054766734279919
User 116086 improves AUC. Keeping the model.
Training on augumented user 60632 3/50 current_auc = 0.6054766734279919
User 60632 AUC after training: 0.6029411764705883
User 60632 does not improve AUC. Reverting changes.
Training on augumented user 117582 4/50 current_auc = 0.6054766734279919
User 117582 AUC after training: 0.6009127789046653
User 117582 does not improve AUC. Reverting changes.
Training on augumented user 41060 5/50 current_auc = 0.6054766734279919
User 41060 AUC after training: 0.6080121703853956
User 41060 improves AUC. Keeping the model.
Training on augumented user 95846 6/50 current_auc = 0.6080121703853956
User 95846 AUC after training: 0.6095334685598377
User 95846 improves AUC. Keeping the model.
Training on augumented user 130284 7/50 current_auc = 0.6095334685598377
User 130284 AUC after training: 0.6095334685598377
User 130284 does not improve AUC. Reverting changes.
Training on augumented user 97779 8/50 current_auc = 0.6095334685598377
User 97779 AUC after training: 0.6085192697768762
User 97779 does not improve AUC. Reverting changes.
Training on augumented user 78301 9/50 current_auc = 0.6095334685598377
User 78301 AUC after training: 0.6090263691683571
User 78301 does not improve AUC. Reverting changes.
Training on augumented user 16180 10/50 current_auc = 0.6095334685598377
User 16180 AUC after training: 0.6075050709939148
User 16180 does not improve AUC. Reverting changes.
Training on augumented user 108839 11/50 current_auc = 0.6095334685598377
User 108839 AUC after training: 0.6039553752535497
User 108839 does not improve AUC. Reverting changes.
Training on augumented user 97755 12/50 current_auc = 0.6095334685598377
User 97755 AUC after training: 0.6095334685598377
User 97755 does not improve AUC. Reverting changes.
Training on augumented user 108109 13/50 current_auc = 0.6095334685598377
User 108109 AUC after training: 0.6064908722109533
User 108109 does not improve AUC. Reverting changes.
Training on augumented user 4895 14/50 current_auc = 0.6095334685598377
User 4895 AUC after training: 0.6100405679513186
User 4895 improves AUC. Keeping the model.
Training on augumented user 120339 15/50 current_auc = 0.6100405679513186
User 120339 AUC after training: 0.6064908722109534
User 120339 does not improve AUC. Reverting changes.
Training on augumented user 69513 16/50 current_auc = 0.6100405679513186
User 69513 AUC after training: 0.6085192697768763
User 69513 does not improve AUC. Reverting changes.
Training on augumented user 136107 17/50 current_auc = 0.6100405679513186
User 136107 AUC after training: 0.6105476673427992
User 136107 improves AUC. Keeping the model.
Training on augumented user 98312 18/50 current_auc = 0.6105476673427992
User 98312 AUC after training: 0.6075050709939148
User 98312 does not improve AUC. Reverting changes.
Training on augumented user 9330 19/50 current_auc = 0.6105476673427992
User 9330 AUC after training: 0.6069979716024341
User 9330 does not improve AUC. Reverting changes.
Training on augumented user 100666 20/50 current_auc = 0.6105476673427992
User 100666 AUC after training: 0.6080121703853956
User 100666 does not improve AUC. Reverting changes.
Training on augumented user 133606 21/50 current_auc = 0.6105476673427992
User 133606 AUC after training: 0.6105476673427992
User 133606 does not improve AUC. Reverting changes.
Training on augumented user 133941 22/50 current_auc = 0.6105476673427992
User 133941 AUC after training: 0.6049695740365112
User 133941 does not improve AUC. Reverting changes.
Training on augumented user 37965 23/50 current_auc = 0.6105476673427992
User 37965 AUC after training: 0.6085192697768763
User 37965 does not improve AUC. Reverting changes.
Training on augumented user 132744 24/50 current_auc = 0.6105476673427992
User 132744 AUC after training: 0.6090263691683571
User 132744 does not improve AUC. Reverting changes.
Training on augumented user 80957 25/50 current_auc = 0.6105476673427992
User 80957 AUC after training: 0.6075050709939149
User 80957 does not improve AUC. Reverting changes.
Training on augumented user 72887 26/50 current_auc = 0.6105476673427992
User 72887 AUC after training: 0.6105476673427992
User 72887 does not improve AUC. Reverting changes.
Training on augumented user 6587 27/50 current_auc = 0.6105476673427992
User 6587 AUC after training: 0.6044624746450304
User 6587 does not improve AUC. Reverting changes.
Training on augumented user 14854 28/50 current_auc = 0.6105476673427992
User 14854 AUC after training: 0.6069979716024341
User 14854 does not improve AUC. Reverting changes.
Training on augumented user 18949 29/50 current_auc = 0.6105476673427992
User 18949 AUC after training: 0.6085192697768762
User 18949 does not improve AUC. Reverting changes.
Training on augumented user 113100 30/50 current_auc = 0.6105476673427992
User 113100 AUC after training: 0.6090263691683571
User 113100 does not improve AUC. Reverting changes.
Training on augumented user 23013 31/50 current_auc = 0.6105476673427992
User 23013 AUC after training: 0.6110547667342799
User 23013 improves AUC. Keeping the model.
Training on augumented user 123817 32/50 current_auc = 0.6110547667342799
User 123817 AUC after training: 0.6095334685598377
User 123817 does not improve AUC. Reverting changes.
Training on augumented user 104081 33/50 current_auc = 0.6110547667342799
User 104081 AUC after training: 0.6115618661257607
User 104081 improves AUC. Keeping the model.
Training on augumented user 42001 34/50 current_auc = 0.6115618661257607
User 42001 AUC after training: 0.6095334685598377
User 42001 does not improve AUC. Reverting changes.
Training on augumented user 62577 35/50 current_auc = 0.6115618661257607
User 62577 AUC after training: 0.6115618661257607
User 62577 does not improve AUC. Reverting changes.
Training on augumented user 87021 36/50 current_auc = 0.6115618661257607
User 87021 AUC after training: 0.6115618661257607
User 87021 does not improve AUC. Reverting changes.
Training on augumented user 99842 37/50 current_auc = 0.6115618661257607
User 99842 AUC after training: 0.6100405679513186
User 99842 does not improve AUC. Reverting changes.
Training on augumented user 104414 38/50 current_auc = 0.6115618661257607
User 104414 AUC after training: 0.6059837728194726
User 104414 does not improve AUC. Reverting changes.
Training on augumented user 101293 39/50 current_auc = 0.6115618661257607
User 101293 AUC after training: 0.6080121703853956
User 101293 does not improve AUC. Reverting changes.
Training on augumented user 112811 40/50 current_auc = 0.6115618661257607
User 112811 AUC after training: 0.6064908722109534
User 112811 does not improve AUC. Reverting changes.
Training on augumented user 27149 41/50 current_auc = 0.6115618661257607
User 27149 AUC after training: 0.6069979716024341
User 27149 does not improve AUC. Reverting changes.
Training on augumented user 88344 42/50 current_auc = 0.6115618661257607
User 88344 AUC after training: 0.6110547667342799
User 88344 does not improve AUC. Reverting changes.
Training on augumented user 102926 43/50 current_auc = 0.6115618661257607
User 102926 AUC after training: 0.6085192697768762
User 102926 does not improve AUC. Reverting changes.
Training on augumented user 38976 44/50 current_auc = 0.6115618661257607
User 38976 AUC after training: 0.6090263691683571
User 38976 does not improve AUC. Reverting changes.
Training on augumented user 12988 45/50 current_auc = 0.6115618661257607
User 12988 AUC after training: 0.6115618661257607
User 12988 does not improve AUC. Reverting changes.
Training on augumented user 103571 46/50 current_auc = 0.6115618661257607
User 103571 AUC after training: 0.6080121703853956
User 103571 does not improve AUC. Reverting changes.
Training on augumented user 100673 47/50 current_auc = 0.6115618661257607
User 100673 AUC after training: 0.6069979716024341
User 100673 does not improve AUC. Reverting changes.
Training on augumented user 8505 48/50 current_auc = 0.6115618661257607
User 8505 AUC after training: 0.6085192697768763
User 8505 does not improve AUC. Reverting changes.
Training on augumented user 137086 49/50 current_auc = 0.6115618661257607
User 137086 AUC after training: 0.6029411764705883
User 137086 does not improve AUC. Reverting changes.
[2024-12-02 19:17:19.745289] start test user 17871 183/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:20.266950] start test user 17871 183/568 recall augumented users by random, augumented_users = [13576, 7840, 25463, 66659, 110219, 64739, 61618, 11993, 3920, 15359, 56360, 45351, 26167, 81768, 85511, 69811, 14552, 75128, 25206, 125259, 132860, 89634, 87544, 135801, 92950, 117791, 116750, 124542, 113651, 129483, 85812, 11016, 91824, 109941, 119878, 118422, 59434, 48041, 63453, 86797, 124756, 26997, 51104, 115969, 132334, 63214, 79722, 72491, 84755, 123169]
[2024-12-02 19:17:20.283114] user = 17871 Cloud 183/568
[2024-12-02 19:17:20.298118] user = 17871 Local 183/568
[2024-12-02 19:17:20.415878] user = 17871 Local+ 183/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:22.363977] user = 17871 MPDA- 183/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5300680272108844
Training on augumented user 13576 0/50 current_auc = 0.5300680272108844
User 13576 AUC after training: 0.5297959183673469
User 13576 does not improve AUC. Reverting changes.
Training on augumented user 7840 1/50 current_auc = 0.5300680272108844
User 7840 AUC after training: 0.5306122448979591
User 7840 improves AUC. Keeping the model.
Training on augumented user 25463 2/50 current_auc = 0.5306122448979591
User 25463 AUC after training: 0.5306122448979591
User 25463 does not improve AUC. Reverting changes.
Training on augumented user 66659 3/50 current_auc = 0.5306122448979591
User 66659 AUC after training: 0.531156462585034
User 66659 improves AUC. Keeping the model.
Training on augumented user 110219 4/50 current_auc = 0.531156462585034
User 110219 AUC after training: 0.5308843537414965
User 110219 does not improve AUC. Reverting changes.
Training on augumented user 64739 5/50 current_auc = 0.531156462585034
User 64739 AUC after training: 0.5306122448979592
User 64739 does not improve AUC. Reverting changes.
Training on augumented user 61618 6/50 current_auc = 0.531156462585034
User 61618 AUC after training: 0.5297959183673469
User 61618 does not improve AUC. Reverting changes.
Training on augumented user 11993 7/50 current_auc = 0.531156462585034
User 11993 AUC after training: 0.5306122448979592
User 11993 does not improve AUC. Reverting changes.
Training on augumented user 3920 8/50 current_auc = 0.531156462585034
User 3920 AUC after training: 0.531156462585034
User 3920 does not improve AUC. Reverting changes.
Training on augumented user 15359 9/50 current_auc = 0.531156462585034
User 15359 AUC after training: 0.5317006802721087
User 15359 improves AUC. Keeping the model.
Training on augumented user 56360 10/50 current_auc = 0.5317006802721087
User 56360 AUC after training: 0.5317006802721088
User 56360 improves AUC. Keeping the model.
Training on augumented user 45351 11/50 current_auc = 0.5317006802721088
User 45351 AUC after training: 0.5303401360544218
User 45351 does not improve AUC. Reverting changes.
Training on augumented user 26167 12/50 current_auc = 0.5317006802721088
User 26167 AUC after training: 0.5322448979591836
User 26167 improves AUC. Keeping the model.
Training on augumented user 81768 13/50 current_auc = 0.5322448979591836
User 81768 AUC after training: 0.5314285714285715
User 81768 does not improve AUC. Reverting changes.
Training on augumented user 85511 14/50 current_auc = 0.5322448979591836
User 85511 AUC after training: 0.5319727891156463
User 85511 does not improve AUC. Reverting changes.
Training on augumented user 69811 15/50 current_auc = 0.5322448979591836
User 69811 AUC after training: 0.5322448979591836
User 69811 does not improve AUC. Reverting changes.
Training on augumented user 14552 16/50 current_auc = 0.5322448979591836
User 14552 AUC after training: 0.5303401360544218
User 14552 does not improve AUC. Reverting changes.
Training on augumented user 75128 17/50 current_auc = 0.5322448979591836
User 75128 AUC after training: 0.5317006802721088
User 75128 does not improve AUC. Reverting changes.
Training on augumented user 25206 18/50 current_auc = 0.5322448979591836
User 25206 AUC after training: 0.5319727891156463
User 25206 does not improve AUC. Reverting changes.
Training on augumented user 125259 19/50 current_auc = 0.5322448979591836
User 125259 AUC after training: 0.531156462585034
User 125259 does not improve AUC. Reverting changes.
Training on augumented user 132860 20/50 current_auc = 0.5322448979591836
User 132860 AUC after training: 0.5314285714285714
User 132860 does not improve AUC. Reverting changes.
Training on augumented user 89634 21/50 current_auc = 0.5322448979591836
User 89634 AUC after training: 0.5319727891156463
User 89634 does not improve AUC. Reverting changes.
Training on augumented user 87544 22/50 current_auc = 0.5322448979591836
User 87544 AUC after training: 0.5297959183673469
User 87544 does not improve AUC. Reverting changes.
Training on augumented user 135801 23/50 current_auc = 0.5322448979591836
User 135801 AUC after training: 0.5322448979591836
User 135801 does not improve AUC. Reverting changes.
Training on augumented user 92950 24/50 current_auc = 0.5322448979591836
User 92950 AUC after training: 0.5327891156462585
User 92950 improves AUC. Keeping the model.
Training on augumented user 117791 25/50 current_auc = 0.5327891156462585
User 117791 AUC after training: 0.5333333333333332
User 117791 improves AUC. Keeping the model.
Training on augumented user 116750 26/50 current_auc = 0.5333333333333332
User 116750 AUC after training: 0.5336054421768708
User 116750 improves AUC. Keeping the model.
Training on augumented user 124542 27/50 current_auc = 0.5336054421768708
User 124542 AUC after training: 0.5341496598639455
User 124542 improves AUC. Keeping the model.
Training on augumented user 113651 28/50 current_auc = 0.5341496598639455
User 113651 AUC after training: 0.5333333333333333
User 113651 does not improve AUC. Reverting changes.
Training on augumented user 129483 29/50 current_auc = 0.5341496598639455
User 129483 AUC after training: 0.5341496598639455
User 129483 does not improve AUC. Reverting changes.
Training on augumented user 85812 30/50 current_auc = 0.5341496598639455
User 85812 AUC after training: 0.5330612244897959
User 85812 does not improve AUC. Reverting changes.
Training on augumented user 11016 31/50 current_auc = 0.5341496598639455
User 11016 AUC after training: 0.5322448979591836
User 11016 does not improve AUC. Reverting changes.
Training on augumented user 91824 32/50 current_auc = 0.5341496598639455
User 91824 AUC after training: 0.5322448979591836
User 91824 does not improve AUC. Reverting changes.
Training on augumented user 109941 33/50 current_auc = 0.5341496598639455
User 109941 AUC after training: 0.5330612244897959
User 109941 does not improve AUC. Reverting changes.
Training on augumented user 119878 34/50 current_auc = 0.5341496598639455
User 119878 AUC after training: 0.5341496598639456
User 119878 improves AUC. Keeping the model.
Training on augumented user 118422 35/50 current_auc = 0.5341496598639456
User 118422 AUC after training: 0.5333333333333333
User 118422 does not improve AUC. Reverting changes.
Training on augumented user 59434 36/50 current_auc = 0.5341496598639456
User 59434 AUC after training: 0.5341496598639455
User 59434 does not improve AUC. Reverting changes.
Training on augumented user 48041 37/50 current_auc = 0.5341496598639456
User 48041 AUC after training: 0.5338775510204081
User 48041 does not improve AUC. Reverting changes.
Training on augumented user 63453 38/50 current_auc = 0.5341496598639456
User 63453 AUC after training: 0.5327891156462585
User 63453 does not improve AUC. Reverting changes.
Training on augumented user 86797 39/50 current_auc = 0.5341496598639456
User 86797 AUC after training: 0.5333333333333332
User 86797 does not improve AUC. Reverting changes.
Training on augumented user 124756 40/50 current_auc = 0.5341496598639456
User 124756 AUC after training: 0.5349659863945577
User 124756 improves AUC. Keeping the model.
Training on augumented user 26997 41/50 current_auc = 0.5349659863945577
User 26997 AUC after training: 0.5330612244897959
User 26997 does not improve AUC. Reverting changes.
Training on augumented user 51104 42/50 current_auc = 0.5349659863945577
User 51104 AUC after training: 0.5352380952380953
User 51104 improves AUC. Keeping the model.
Training on augumented user 115969 43/50 current_auc = 0.5352380952380953
User 115969 AUC after training: 0.5349659863945578
User 115969 does not improve AUC. Reverting changes.
Training on augumented user 132334 44/50 current_auc = 0.5352380952380953
User 132334 AUC after training: 0.5346938775510204
User 132334 does not improve AUC. Reverting changes.
Training on augumented user 63214 45/50 current_auc = 0.5352380952380953
User 63214 AUC after training: 0.5330612244897959
User 63214 does not improve AUC. Reverting changes.
Training on augumented user 79722 46/50 current_auc = 0.5352380952380953
User 79722 AUC after training: 0.5349659863945578
User 79722 does not improve AUC. Reverting changes.
Training on augumented user 72491 47/50 current_auc = 0.5352380952380953
User 72491 AUC after training: 0.5352380952380953
User 72491 does not improve AUC. Reverting changes.
Training on augumented user 84755 48/50 current_auc = 0.5352380952380953
User 84755 AUC after training: 0.5355102040816326
User 84755 improves AUC. Keeping the model.
Training on augumented user 123169 49/50 current_auc = 0.5355102040816326
User 123169 AUC after training: 0.5352380952380952
User 123169 does not improve AUC. Reverting changes.
[2024-12-02 19:17:46.634468] start test user 17888 184/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:47.289554] start test user 17888 184/568 recall augumented users by random, augumented_users = [1307, 32763, 45918, 83953, 13679, 100295, 79117, 132164, 97155, 114269, 71054, 37076, 10802, 128244, 4729, 5368, 105263, 87416, 114726, 37491, 100220, 29449, 113239, 78741, 24179, 47083, 32102, 103484, 38807, 4558, 78630, 92468, 129493, 15588, 83585, 59836, 36372, 55151, 101079, 119109, 119912, 53938, 76714, 64481, 43988, 93804, 1952, 115004, 96480, 70516]
[2024-12-02 19:17:47.305372] user = 17888 Cloud 184/568
[2024-12-02 19:17:47.348094] user = 17888 Local 184/568
[2024-12-02 19:17:47.429808] user = 17888 Local+ 184/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:50.110171] user = 17888 MPDA- 184/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6665052996331022
Training on augumented user 1307 0/50 current_auc = 0.6665052996331022
User 1307 AUC after training: 0.6666326946596004
User 1307 improves AUC. Keeping the model.
Training on augumented user 32763 1/50 current_auc = 0.6666326946596004
User 32763 AUC after training: 0.6670658377496942
User 32763 improves AUC. Keeping the model.
Training on augumented user 45918 2/50 current_auc = 0.6670658377496942
User 45918 AUC after training: 0.6665307786384018
User 45918 does not improve AUC. Reverting changes.
Training on augumented user 83953 3/50 current_auc = 0.6670658377496942
User 83953 AUC after training: 0.6671932327761925
User 83953 improves AUC. Keeping the model.
Training on augumented user 13679 4/50 current_auc = 0.6671932327761925
User 13679 AUC after training: 0.6671677537708928
User 13679 does not improve AUC. Reverting changes.
Training on augumented user 100295 5/50 current_auc = 0.6671932327761925
User 100295 AUC after training: 0.6670658377496943
User 100295 does not improve AUC. Reverting changes.
Training on augumented user 79117 6/50 current_auc = 0.6671932327761925
User 79117 AUC after training: 0.6671167957602935
User 79117 does not improve AUC. Reverting changes.
Training on augumented user 132164 7/50 current_auc = 0.6671932327761925
User 132164 AUC after training: 0.6671167957602935
User 132164 does not improve AUC. Reverting changes.
Training on augumented user 97155 8/50 current_auc = 0.6671932327761925
User 97155 AUC after training: 0.6672187117814921
User 97155 improves AUC. Keeping the model.
Training on augumented user 114269 9/50 current_auc = 0.6672187117814921
User 114269 AUC after training: 0.6671167957602936
User 114269 does not improve AUC. Reverting changes.
Training on augumented user 71054 10/50 current_auc = 0.6672187117814921
User 71054 AUC after training: 0.6673461068079903
User 71054 improves AUC. Keeping the model.
Training on augumented user 37076 11/50 current_auc = 0.6673461068079903
User 37076 AUC after training: 0.6673206278026905
User 37076 does not improve AUC. Reverting changes.
Training on augumented user 10802 12/50 current_auc = 0.6673461068079903
User 10802 AUC after training: 0.6695373012637587
User 10802 improves AUC. Keeping the model.
Training on augumented user 128244 13/50 current_auc = 0.6695373012637587
User 128244 AUC after training: 0.6696646962902567
User 128244 improves AUC. Keeping the model.
Training on augumented user 4729 14/50 current_auc = 0.6696646962902567
User 4729 AUC after training: 0.6695118222584591
User 4729 does not improve AUC. Reverting changes.
Training on augumented user 5368 15/50 current_auc = 0.6696646962902567
User 5368 AUC after training: 0.6696264777823074
User 5368 does not improve AUC. Reverting changes.
Training on augumented user 105263 16/50 current_auc = 0.6696646962902567
User 105263 AUC after training: 0.6694863432531593
User 105263 does not improve AUC. Reverting changes.
Training on augumented user 87416 17/50 current_auc = 0.6696646962902567
User 87416 AUC after training: 0.6690786791683652
User 87416 does not improve AUC. Reverting changes.
Training on augumented user 114726 18/50 current_auc = 0.6696646962902567
User 114726 AUC after training: 0.6694353852425601
User 114726 does not improve AUC. Reverting changes.
Training on augumented user 37491 19/50 current_auc = 0.6696646962902567
User 37491 AUC after training: 0.6698430493273542
User 37491 improves AUC. Keeping the model.
Training on augumented user 100220 20/50 current_auc = 0.6698430493273542
User 100220 AUC after training: 0.6695627802690584
User 100220 does not improve AUC. Reverting changes.
Training on augumented user 29449 21/50 current_auc = 0.6698430493273542
User 29449 AUC after training: 0.669715654300856
User 29449 does not improve AUC. Reverting changes.
Training on augumented user 113239 22/50 current_auc = 0.6698430493273542
User 113239 AUC after training: 0.6699449653485527
User 113239 improves AUC. Keeping the model.
Training on augumented user 78741 23/50 current_auc = 0.6699449653485527
User 78741 AUC after training: 0.6696646962902567
User 78741 does not improve AUC. Reverting changes.
Training on augumented user 24179 24/50 current_auc = 0.6699449653485527
User 24179 AUC after training: 0.6696137382796575
User 24179 does not improve AUC. Reverting changes.
Training on augumented user 47083 25/50 current_auc = 0.6699449653485527
User 47083 AUC after training: 0.6686710150835711
User 47083 does not improve AUC. Reverting changes.
Training on augumented user 32102 26/50 current_auc = 0.6699449653485527
User 32102 AUC after training: 0.6697793518141052
User 32102 does not improve AUC. Reverting changes.
Training on augumented user 103484 27/50 current_auc = 0.6699449653485527
User 103484 AUC after training: 0.6698685283326539
User 103484 does not improve AUC. Reverting changes.
Training on augumented user 38807 28/50 current_auc = 0.6699449653485527
User 38807 AUC after training: 0.669868528332654
User 38807 does not improve AUC. Reverting changes.
Training on augumented user 4558 29/50 current_auc = 0.6699449653485527
User 4558 AUC after training: 0.6689767631471667
User 4558 does not improve AUC. Reverting changes.
Training on augumented user 78630 30/50 current_auc = 0.6699449653485527
User 78630 AUC after training: 0.669524561761109
User 78630 does not improve AUC. Reverting changes.
Training on augumented user 92468 31/50 current_auc = 0.6699449653485527
User 92468 AUC after training: 0.6697793518141051
User 92468 does not improve AUC. Reverting changes.
Training on augumented user 129493 32/50 current_auc = 0.6699449653485527
User 129493 AUC after training: 0.6697029147982063
User 129493 does not improve AUC. Reverting changes.
Training on augumented user 15588 33/50 current_auc = 0.6699449653485527
User 15588 AUC after training: 0.669715654300856
User 15588 does not improve AUC. Reverting changes.
Training on augumented user 83585 34/50 current_auc = 0.6699449653485527
User 83585 AUC after training: 0.6694863432531594
User 83585 does not improve AUC. Reverting changes.
Training on augumented user 59836 35/50 current_auc = 0.6699449653485527
User 59836 AUC after training: 0.6697920913167549
User 59836 does not improve AUC. Reverting changes.
Training on augumented user 36372 36/50 current_auc = 0.6699449653485527
User 36372 AUC after training: 0.669715654300856
User 36372 does not improve AUC. Reverting changes.
Training on augumented user 55151 37/50 current_auc = 0.6699449653485527
User 55151 AUC after training: 0.6698048308194049
User 55151 does not improve AUC. Reverting changes.
Training on augumented user 101079 38/50 current_auc = 0.6699449653485527
User 101079 AUC after training: 0.6696392172849572
User 101079 does not improve AUC. Reverting changes.
Training on augumented user 119109 39/50 current_auc = 0.6699449653485527
User 119109 AUC after training: 0.669715654300856
User 119109 does not improve AUC. Reverting changes.
Training on augumented user 119912 40/50 current_auc = 0.6699449653485527
User 119912 AUC after training: 0.6698048308194048
User 119912 does not improve AUC. Reverting changes.
Training on augumented user 53938 41/50 current_auc = 0.6699449653485527
User 53938 AUC after training: 0.6694353852425601
User 53938 does not improve AUC. Reverting changes.
Training on augumented user 76714 42/50 current_auc = 0.6699449653485527
User 76714 AUC after training: 0.6693844272319608
User 76714 does not improve AUC. Reverting changes.
Training on augumented user 64481 43/50 current_auc = 0.6699449653485527
User 64481 AUC after training: 0.6695118222584591
User 64481 does not improve AUC. Reverting changes.
Training on augumented user 43988 44/50 current_auc = 0.6699449653485527
User 43988 AUC after training: 0.6688621076233184
User 43988 does not improve AUC. Reverting changes.
Training on augumented user 93804 45/50 current_auc = 0.6699449653485527
User 93804 AUC after training: 0.6698175703220545
User 93804 does not improve AUC. Reverting changes.
Training on augumented user 1952 46/50 current_auc = 0.6699449653485527
User 1952 AUC after training: 0.6697411333061557
User 1952 does not improve AUC. Reverting changes.
Training on augumented user 115004 47/50 current_auc = 0.6699449653485527
User 115004 AUC after training: 0.6697538728088055
User 115004 does not improve AUC. Reverting changes.
Training on augumented user 96480 48/50 current_auc = 0.6699449653485527
User 96480 AUC after training: 0.6694990827558092
User 96480 does not improve AUC. Reverting changes.
Training on augumented user 70516 49/50 current_auc = 0.6699449653485527
User 70516 AUC after training: 0.669651956787607
User 70516 does not improve AUC. Reverting changes.
[2024-12-02 19:18:20.835917] start test user 17996 185/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:21.257001] start test user 17996 185/568 recall augumented users by random, augumented_users = [42959, 47403, 87568, 22021, 26236, 41813, 49121, 16902, 113245, 49719, 14071, 10649, 134204, 20716, 83602, 4161, 92713, 14917, 106741, 3835, 97061, 26929, 99706, 81, 57973, 134579, 62660, 9414, 105908, 88995, 78740, 73102, 74639, 130544, 46834, 132514, 122781, 124303, 27876, 58755, 2199, 29256, 96938, 27751, 31947, 87258, 32534, 38282, 4601, 68556]
[2024-12-02 19:18:21.272157] user = 17996 Cloud 185/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:18:21.289143] user = 17996 Local 185/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:18:21.384013] user = 17996 Local+ 185/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:18:24.325009] user = 17996 MPDA- 185/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 42959 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42959 AUC after training: 0.5
User 42959 does not improve AUC. Reverting changes.
Training on augumented user 47403 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47403 AUC after training: 0.5
User 47403 does not improve AUC. Reverting changes.
Training on augumented user 87568 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87568 AUC after training: 0.5
User 87568 does not improve AUC. Reverting changes.
Training on augumented user 22021 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22021 AUC after training: 0.5
User 22021 does not improve AUC. Reverting changes.
Training on augumented user 26236 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26236 AUC after training: 0.5
User 26236 does not improve AUC. Reverting changes.
Training on augumented user 41813 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41813 AUC after training: 0.5
User 41813 does not improve AUC. Reverting changes.
Training on augumented user 49121 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49121 AUC after training: 0.5
User 49121 does not improve AUC. Reverting changes.
Training on augumented user 16902 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16902 AUC after training: 0.5
User 16902 does not improve AUC. Reverting changes.
Training on augumented user 113245 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113245 AUC after training: 0.5
User 113245 does not improve AUC. Reverting changes.
Training on augumented user 49719 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49719 AUC after training: 0.5
User 49719 does not improve AUC. Reverting changes.
Training on augumented user 14071 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14071 AUC after training: 0.5
User 14071 does not improve AUC. Reverting changes.
Training on augumented user 10649 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10649 AUC after training: 0.5
User 10649 does not improve AUC. Reverting changes.
Training on augumented user 134204 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134204 AUC after training: 0.5
User 134204 does not improve AUC. Reverting changes.
Training on augumented user 20716 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20716 AUC after training: 0.5
User 20716 does not improve AUC. Reverting changes.
Training on augumented user 83602 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83602 AUC after training: 0.5
User 83602 does not improve AUC. Reverting changes.
Training on augumented user 4161 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4161 AUC after training: 0.5
User 4161 does not improve AUC. Reverting changes.
Training on augumented user 92713 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92713 AUC after training: 0.5
User 92713 does not improve AUC. Reverting changes.
Training on augumented user 14917 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14917 AUC after training: 0.5
User 14917 does not improve AUC. Reverting changes.
Training on augumented user 106741 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106741 AUC after training: 0.5
User 106741 does not improve AUC. Reverting changes.
Training on augumented user 3835 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3835 AUC after training: 0.5
User 3835 does not improve AUC. Reverting changes.
Training on augumented user 97061 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97061 AUC after training: 0.5
User 97061 does not improve AUC. Reverting changes.
Training on augumented user 26929 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26929 AUC after training: 0.5
User 26929 does not improve AUC. Reverting changes.
Training on augumented user 99706 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99706 AUC after training: 0.5
User 99706 does not improve AUC. Reverting changes.
Training on augumented user 81 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81 AUC after training: 0.5
User 81 does not improve AUC. Reverting changes.
Training on augumented user 57973 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57973 AUC after training: 0.5
User 57973 does not improve AUC. Reverting changes.
Training on augumented user 134579 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134579 AUC after training: 0.5
User 134579 does not improve AUC. Reverting changes.
Training on augumented user 62660 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62660 AUC after training: 0.5
User 62660 does not improve AUC. Reverting changes.
Training on augumented user 9414 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9414 AUC after training: 0.5
User 9414 does not improve AUC. Reverting changes.
Training on augumented user 105908 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105908 AUC after training: 0.5
User 105908 does not improve AUC. Reverting changes.
Training on augumented user 88995 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88995 AUC after training: 0.5
User 88995 does not improve AUC. Reverting changes.
Training on augumented user 78740 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78740 AUC after training: 0.5
User 78740 does not improve AUC. Reverting changes.
Training on augumented user 73102 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73102 AUC after training: 0.5
User 73102 does not improve AUC. Reverting changes.
Training on augumented user 74639 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74639 AUC after training: 0.5
User 74639 does not improve AUC. Reverting changes.
Training on augumented user 130544 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130544 AUC after training: 0.5
User 130544 does not improve AUC. Reverting changes.
Training on augumented user 46834 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46834 AUC after training: 0.5
User 46834 does not improve AUC. Reverting changes.
Training on augumented user 132514 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132514 AUC after training: 0.5
User 132514 does not improve AUC. Reverting changes.
Training on augumented user 122781 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122781 AUC after training: 0.5
User 122781 does not improve AUC. Reverting changes.
Training on augumented user 124303 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124303 AUC after training: 0.5
User 124303 does not improve AUC. Reverting changes.
Training on augumented user 27876 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27876 AUC after training: 0.5
User 27876 does not improve AUC. Reverting changes.
Training on augumented user 58755 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58755 AUC after training: 0.5
User 58755 does not improve AUC. Reverting changes.
Training on augumented user 2199 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2199 AUC after training: 0.5
User 2199 does not improve AUC. Reverting changes.
Training on augumented user 29256 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29256 AUC after training: 0.5
User 29256 does not improve AUC. Reverting changes.
Training on augumented user 96938 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96938 AUC after training: 0.5
User 96938 does not improve AUC. Reverting changes.
Training on augumented user 27751 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27751 AUC after training: 0.5
User 27751 does not improve AUC. Reverting changes.
Training on augumented user 31947 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31947 AUC after training: 0.5
User 31947 does not improve AUC. Reverting changes.
Training on augumented user 87258 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87258 AUC after training: 0.5
User 87258 does not improve AUC. Reverting changes.
Training on augumented user 32534 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32534 AUC after training: 0.5
User 32534 does not improve AUC. Reverting changes.
Training on augumented user 38282 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38282 AUC after training: 0.5
User 38282 does not improve AUC. Reverting changes.
Training on augumented user 4601 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4601 AUC after training: 0.5
User 4601 does not improve AUC. Reverting changes.
Training on augumented user 68556 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68556 AUC after training: 0.5
User 68556 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:18:50.055486] start test user 18010 186/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:50.469988] start test user 18010 186/568 recall augumented users by random, augumented_users = [95035, 130541, 69922, 108532, 43028, 32099, 35085, 96317, 44864, 120130, 59637, 17237, 84948, 108718, 38690, 17980, 29036, 125318, 59057, 93173, 45349, 53184, 117241, 92082, 86071, 38735, 81379, 30956, 89578, 64751, 77781, 32571, 95049, 117859, 125527, 47934, 37406, 78825, 76340, 64507, 109504, 53975, 49563, 38583, 20817, 16594, 121468, 29656, 2116, 66443]
[2024-12-02 19:18:50.485135] user = 18010 Cloud 186/568
[2024-12-02 19:18:50.514189] user = 18010 Local 186/568
[2024-12-02 19:18:50.603414] user = 18010 Local+ 186/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:52.654646] user = 18010 MPDA- 186/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7643975829325442
Training on augumented user 95035 0/50 current_auc = 0.7643975829325442
User 95035 AUC after training: 0.7647058823529412
User 95035 improves AUC. Keeping the model.
Training on augumented user 130541 1/50 current_auc = 0.7647058823529412
User 130541 AUC after training: 0.7647058823529411
User 130541 does not improve AUC. Reverting changes.
Training on augumented user 69922 2/50 current_auc = 0.7647058823529412
User 69922 AUC after training: 0.7648292021211001
User 69922 improves AUC. Keeping the model.
Training on augumented user 108532 3/50 current_auc = 0.7648292021211001
User 108532 AUC after training: 0.7644592428166235
User 108532 does not improve AUC. Reverting changes.
Training on augumented user 43028 4/50 current_auc = 0.7648292021211001
User 43028 AUC after training: 0.764089283512147
User 43028 does not improve AUC. Reverting changes.
Training on augumented user 32099 5/50 current_auc = 0.7648292021211001
User 32099 AUC after training: 0.7648908620051795
User 32099 improves AUC. Keeping the model.
Training on augumented user 35085 6/50 current_auc = 0.7648908620051795
User 35085 AUC after training: 0.7647058823529413
User 35085 does not improve AUC. Reverting changes.
Training on augumented user 96317 7/50 current_auc = 0.7648908620051795
User 96317 AUC after training: 0.765045011715378
User 96317 improves AUC. Keeping the model.
Training on augumented user 44864 8/50 current_auc = 0.765045011715378
User 44864 AUC after training: 0.7649216919472192
User 44864 does not improve AUC. Reverting changes.
Training on augumented user 120130 9/50 current_auc = 0.765045011715378
User 120130 AUC after training: 0.7645517326427427
User 120130 does not improve AUC. Reverting changes.
Training on augumented user 59637 10/50 current_auc = 0.765045011715378
User 59637 AUC after training: 0.765045011715378
User 59637 does not improve AUC. Reverting changes.
Training on augumented user 17237 11/50 current_auc = 0.765045011715378
User 17237 AUC after training: 0.7653533111357751
User 17237 improves AUC. Keeping the model.
Training on augumented user 84948 12/50 current_auc = 0.7653533111357751
User 84948 AUC after training: 0.7651683314835368
User 84948 does not improve AUC. Reverting changes.
Training on augumented user 108718 13/50 current_auc = 0.7653533111357751
User 108718 AUC after training: 0.7648600320631398
User 108718 does not improve AUC. Reverting changes.
Training on augumented user 38690 14/50 current_auc = 0.7653533111357751
User 38690 AUC after training: 0.7647983721790603
User 38690 does not improve AUC. Reverting changes.
Training on augumented user 17980 15/50 current_auc = 0.7653533111357751
User 17980 AUC after training: 0.7646750524109014
User 17980 does not improve AUC. Reverting changes.
Training on augumented user 29036 16/50 current_auc = 0.7653533111357751
User 29036 AUC after training: 0.7647367122949809
User 29036 does not improve AUC. Reverting changes.
Training on augumented user 125318 17/50 current_auc = 0.7653533111357751
User 125318 AUC after training: 0.7649216919472192
User 125318 does not improve AUC. Reverting changes.
Training on augumented user 59057 18/50 current_auc = 0.7653533111357751
User 59057 AUC after training: 0.7654149710198546
User 59057 improves AUC. Keeping the model.
Training on augumented user 93173 19/50 current_auc = 0.7654149710198546
User 93173 AUC after training: 0.7648292021211001
User 93173 does not improve AUC. Reverting changes.
Training on augumented user 45349 20/50 current_auc = 0.7654149710198546
User 45349 AUC after training: 0.7645825625847824
User 45349 does not improve AUC. Reverting changes.
Training on augumented user 53184 21/50 current_auc = 0.7654149710198546
User 53184 AUC after training: 0.7652916512516956
User 53184 does not improve AUC. Reverting changes.
Training on augumented user 117241 22/50 current_auc = 0.7654149710198546
User 117241 AUC after training: 0.765045011715378
User 117241 does not improve AUC. Reverting changes.
Training on augumented user 92082 23/50 current_auc = 0.7654149710198546
User 92082 AUC after training: 0.7652916512516958
User 92082 does not improve AUC. Reverting changes.
Training on augumented user 86071 24/50 current_auc = 0.7654149710198546
User 86071 AUC after training: 0.7647675422370206
User 86071 does not improve AUC. Reverting changes.
Training on augumented user 38735 25/50 current_auc = 0.7654149710198546
User 38735 AUC after training: 0.7645209027007028
User 38735 does not improve AUC. Reverting changes.
Training on augumented user 81379 26/50 current_auc = 0.7654149710198546
User 81379 AUC after training: 0.7647983721790603
User 81379 does not improve AUC. Reverting changes.
Training on augumented user 30956 27/50 current_auc = 0.7654149710198546
User 30956 AUC after training: 0.764952521889259
User 30956 does not improve AUC. Reverting changes.
Training on augumented user 89578 28/50 current_auc = 0.7654149710198546
User 89578 AUC after training: 0.7648600320631398
User 89578 does not improve AUC. Reverting changes.
Training on augumented user 64751 29/50 current_auc = 0.7654149710198546
User 64751 AUC after training: 0.7649525218892589
User 64751 does not improve AUC. Reverting changes.
Training on augumented user 77781 30/50 current_auc = 0.7654149710198546
User 77781 AUC after training: 0.7652299913676164
User 77781 does not improve AUC. Reverting changes.
Training on augumented user 32571 31/50 current_auc = 0.7654149710198546
User 32571 AUC after training: 0.7652299913676164
User 32571 does not improve AUC. Reverting changes.
Training on augumented user 95049 32/50 current_auc = 0.7654149710198546
User 95049 AUC after training: 0.7644592428166235
User 95049 does not improve AUC. Reverting changes.
Training on augumented user 117859 33/50 current_auc = 0.7654149710198546
User 117859 AUC after training: 0.7647675422370206
User 117859 does not improve AUC. Reverting changes.
Training on augumented user 125527 34/50 current_auc = 0.7654149710198546
User 125527 AUC after training: 0.7649216919472192
User 125527 does not improve AUC. Reverting changes.
Training on augumented user 47934 35/50 current_auc = 0.7654149710198546
User 47934 AUC after training: 0.7650758416574177
User 47934 does not improve AUC. Reverting changes.
Training on augumented user 37406 36/50 current_auc = 0.7654149710198546
User 37406 AUC after training: 0.7649216919472193
User 37406 does not improve AUC. Reverting changes.
Training on augumented user 78825 37/50 current_auc = 0.7654149710198546
User 78825 AUC after training: 0.7664323591071649
User 78825 improves AUC. Keeping the model.
Training on augumented user 76340 38/50 current_auc = 0.7664323591071649
User 76340 AUC after training: 0.7665865088173633
User 76340 improves AUC. Keeping the model.
Training on augumented user 64507 39/50 current_auc = 0.7665865088173633
User 64507 AUC after training: 0.766740658527562
User 64507 improves AUC. Keeping the model.
Training on augumented user 109504 40/50 current_auc = 0.766740658527562
User 109504 AUC after training: 0.7666173387594032
User 109504 does not improve AUC. Reverting changes.
Training on augumented user 53975 41/50 current_auc = 0.766740658527562
User 53975 AUC after training: 0.766740658527562
User 53975 does not improve AUC. Reverting changes.
Training on augumented user 49563 42/50 current_auc = 0.766740658527562
User 49563 AUC after training: 0.7668639782957208
User 49563 improves AUC. Keeping the model.
Training on augumented user 38583 43/50 current_auc = 0.7668639782957208
User 38583 AUC after training: 0.7665556788753237
User 38583 does not improve AUC. Reverting changes.
Training on augumented user 20817 44/50 current_auc = 0.7668639782957208
User 20817 AUC after training: 0.7670489579479591
User 20817 improves AUC. Keeping the model.
Training on augumented user 16594 45/50 current_auc = 0.7670489579479591
User 16594 AUC after training: 0.7669256381798002
User 16594 does not improve AUC. Reverting changes.
Training on augumented user 121468 46/50 current_auc = 0.7670489579479591
User 121468 AUC after training: 0.7667098285855223
User 121468 does not improve AUC. Reverting changes.
Training on augumented user 29656 47/50 current_auc = 0.7670489579479591
User 29656 AUC after training: 0.7665556788753238
User 29656 does not improve AUC. Reverting changes.
Training on augumented user 2116 48/50 current_auc = 0.7670489579479591
User 2116 AUC after training: 0.7668331483536812
User 2116 does not improve AUC. Reverting changes.
Training on augumented user 66443 49/50 current_auc = 0.7670489579479591
User 66443 AUC after training: 0.767048957947959
User 66443 does not improve AUC. Reverting changes.
[2024-12-02 19:19:20.351497] start test user 18013 187/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:20.981872] start test user 18013 187/568 recall augumented users by random, augumented_users = [22154, 51971, 82827, 33624, 103966, 103665, 63957, 45033, 80673, 98884, 14496, 85243, 64697, 30602, 28457, 26614, 17505, 82318, 94466, 77001, 105726, 24643, 65952, 82882, 28692, 60896, 99191, 73117, 110748, 118789, 74128, 109152, 88333, 67842, 97815, 36733, 13428, 126275, 67298, 101028, 68787, 62510, 125733, 109825, 101481, 41739, 5336, 99764, 136544, 136229]
[2024-12-02 19:19:20.996433] user = 18013 Cloud 187/568
[2024-12-02 19:19:21.005873] user = 18013 Local 187/568
[2024-12-02 19:19:21.125580] user = 18013 Local+ 187/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:23.471483] user = 18013 MPDA- 187/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5416666666666667
Training on augumented user 22154 0/50 current_auc = 0.5416666666666667
User 22154 AUC after training: 0.5416666666666667
User 22154 does not improve AUC. Reverting changes.
Training on augumented user 51971 1/50 current_auc = 0.5416666666666667
User 51971 AUC after training: 0.5416666666666667
User 51971 does not improve AUC. Reverting changes.
Training on augumented user 82827 2/50 current_auc = 0.5416666666666667
User 82827 AUC after training: 0.5416666666666667
User 82827 does not improve AUC. Reverting changes.
Training on augumented user 33624 3/50 current_auc = 0.5416666666666667
User 33624 AUC after training: 0.5416666666666667
User 33624 does not improve AUC. Reverting changes.
Training on augumented user 103966 4/50 current_auc = 0.5416666666666667
User 103966 AUC after training: 0.5416666666666667
User 103966 does not improve AUC. Reverting changes.
Training on augumented user 103665 5/50 current_auc = 0.5416666666666667
User 103665 AUC after training: 0.5416666666666667
User 103665 does not improve AUC. Reverting changes.
Training on augumented user 63957 6/50 current_auc = 0.5416666666666667
User 63957 AUC after training: 0.5416666666666667
User 63957 does not improve AUC. Reverting changes.
Training on augumented user 45033 7/50 current_auc = 0.5416666666666667
User 45033 AUC after training: 0.5416666666666667
User 45033 does not improve AUC. Reverting changes.
Training on augumented user 80673 8/50 current_auc = 0.5416666666666667
User 80673 AUC after training: 0.5416666666666667
User 80673 does not improve AUC. Reverting changes.
Training on augumented user 98884 9/50 current_auc = 0.5416666666666667
User 98884 AUC after training: 0.5416666666666667
User 98884 does not improve AUC. Reverting changes.
Training on augumented user 14496 10/50 current_auc = 0.5416666666666667
User 14496 AUC after training: 0.5416666666666667
User 14496 does not improve AUC. Reverting changes.
Training on augumented user 85243 11/50 current_auc = 0.5416666666666667
User 85243 AUC after training: 0.5555555555555556
User 85243 improves AUC. Keeping the model.
Training on augumented user 64697 12/50 current_auc = 0.5555555555555556
User 64697 AUC after training: 0.5555555555555556
User 64697 does not improve AUC. Reverting changes.
Training on augumented user 30602 13/50 current_auc = 0.5555555555555556
User 30602 AUC after training: 0.5555555555555556
User 30602 does not improve AUC. Reverting changes.
Training on augumented user 28457 14/50 current_auc = 0.5555555555555556
User 28457 AUC after training: 0.5555555555555556
User 28457 does not improve AUC. Reverting changes.
Training on augumented user 26614 15/50 current_auc = 0.5555555555555556
User 26614 AUC after training: 0.5416666666666667
User 26614 does not improve AUC. Reverting changes.
Training on augumented user 17505 16/50 current_auc = 0.5555555555555556
User 17505 AUC after training: 0.5555555555555556
User 17505 does not improve AUC. Reverting changes.
Training on augumented user 82318 17/50 current_auc = 0.5555555555555556
User 82318 AUC after training: 0.5555555555555556
User 82318 does not improve AUC. Reverting changes.
Training on augumented user 94466 18/50 current_auc = 0.5555555555555556
User 94466 AUC after training: 0.5416666666666667
User 94466 does not improve AUC. Reverting changes.
Training on augumented user 77001 19/50 current_auc = 0.5555555555555556
User 77001 AUC after training: 0.5555555555555556
User 77001 does not improve AUC. Reverting changes.
Training on augumented user 105726 20/50 current_auc = 0.5555555555555556
User 105726 AUC after training: 0.5555555555555556
User 105726 does not improve AUC. Reverting changes.
Training on augumented user 24643 21/50 current_auc = 0.5555555555555556
User 24643 AUC after training: 0.5416666666666667
User 24643 does not improve AUC. Reverting changes.
Training on augumented user 65952 22/50 current_auc = 0.5555555555555556
User 65952 AUC after training: 0.5555555555555556
User 65952 does not improve AUC. Reverting changes.
Training on augumented user 82882 23/50 current_auc = 0.5555555555555556
User 82882 AUC after training: 0.5416666666666667
User 82882 does not improve AUC. Reverting changes.
Training on augumented user 28692 24/50 current_auc = 0.5555555555555556
User 28692 AUC after training: 0.5555555555555556
User 28692 does not improve AUC. Reverting changes.
Training on augumented user 60896 25/50 current_auc = 0.5555555555555556
User 60896 AUC after training: 0.5555555555555556
User 60896 does not improve AUC. Reverting changes.
Training on augumented user 99191 26/50 current_auc = 0.5555555555555556
User 99191 AUC after training: 0.5555555555555556
User 99191 does not improve AUC. Reverting changes.
Training on augumented user 73117 27/50 current_auc = 0.5555555555555556
User 73117 AUC after training: 0.5555555555555556
User 73117 does not improve AUC. Reverting changes.
Training on augumented user 110748 28/50 current_auc = 0.5555555555555556
User 110748 AUC after training: 0.5555555555555556
User 110748 does not improve AUC. Reverting changes.
Training on augumented user 118789 29/50 current_auc = 0.5555555555555556
User 118789 AUC after training: 0.5555555555555556
User 118789 does not improve AUC. Reverting changes.
Training on augumented user 74128 30/50 current_auc = 0.5555555555555556
User 74128 AUC after training: 0.5555555555555556
User 74128 does not improve AUC. Reverting changes.
Training on augumented user 109152 31/50 current_auc = 0.5555555555555556
User 109152 AUC after training: 0.5416666666666667
User 109152 does not improve AUC. Reverting changes.
Training on augumented user 88333 32/50 current_auc = 0.5555555555555556
User 88333 AUC after training: 0.5555555555555556
User 88333 does not improve AUC. Reverting changes.
Training on augumented user 67842 33/50 current_auc = 0.5555555555555556
User 67842 AUC after training: 0.5416666666666667
User 67842 does not improve AUC. Reverting changes.
Training on augumented user 97815 34/50 current_auc = 0.5555555555555556
User 97815 AUC after training: 0.5555555555555556
User 97815 does not improve AUC. Reverting changes.
Training on augumented user 36733 35/50 current_auc = 0.5555555555555556
User 36733 AUC after training: 0.5416666666666667
User 36733 does not improve AUC. Reverting changes.
Training on augumented user 13428 36/50 current_auc = 0.5555555555555556
User 13428 AUC after training: 0.5555555555555556
User 13428 does not improve AUC. Reverting changes.
Training on augumented user 126275 37/50 current_auc = 0.5555555555555556
User 126275 AUC after training: 0.5416666666666667
User 126275 does not improve AUC. Reverting changes.
Training on augumented user 67298 38/50 current_auc = 0.5555555555555556
User 67298 AUC after training: 0.5555555555555556
User 67298 does not improve AUC. Reverting changes.
Training on augumented user 101028 39/50 current_auc = 0.5555555555555556
User 101028 AUC after training: 0.5416666666666667
User 101028 does not improve AUC. Reverting changes.
Training on augumented user 68787 40/50 current_auc = 0.5555555555555556
User 68787 AUC after training: 0.5416666666666667
User 68787 does not improve AUC. Reverting changes.
Training on augumented user 62510 41/50 current_auc = 0.5555555555555556
User 62510 AUC after training: 0.5555555555555556
User 62510 does not improve AUC. Reverting changes.
Training on augumented user 125733 42/50 current_auc = 0.5555555555555556
User 125733 AUC after training: 0.5555555555555556
User 125733 does not improve AUC. Reverting changes.
Training on augumented user 109825 43/50 current_auc = 0.5555555555555556
User 109825 AUC after training: 0.5416666666666667
User 109825 does not improve AUC. Reverting changes.
Training on augumented user 101481 44/50 current_auc = 0.5555555555555556
User 101481 AUC after training: 0.5555555555555556
User 101481 does not improve AUC. Reverting changes.
Training on augumented user 41739 45/50 current_auc = 0.5555555555555556
User 41739 AUC after training: 0.5555555555555556
User 41739 does not improve AUC. Reverting changes.
Training on augumented user 5336 46/50 current_auc = 0.5555555555555556
User 5336 AUC after training: 0.5555555555555556
User 5336 does not improve AUC. Reverting changes.
Training on augumented user 99764 47/50 current_auc = 0.5555555555555556
User 99764 AUC after training: 0.5416666666666667
User 99764 does not improve AUC. Reverting changes.
Training on augumented user 136544 48/50 current_auc = 0.5555555555555556
User 136544 AUC after training: 0.5555555555555556
User 136544 does not improve AUC. Reverting changes.
Training on augumented user 136229 49/50 current_auc = 0.5555555555555556
User 136229 AUC after training: 0.5416666666666667
User 136229 does not improve AUC. Reverting changes.
[2024-12-02 19:19:55.145263] start test user 18029 188/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:55.867641] start test user 18029 188/568 recall augumented users by random, augumented_users = [76566, 41897, 38594, 4456, 42172, 79134, 72229, 25941, 120264, 136738, 78935, 67569, 32961, 2755, 47895, 93933, 42562, 107497, 128274, 22081, 64140, 75961, 16043, 73972, 4837, 9915, 95812, 34816, 10176, 43994, 109334, 117380, 53011, 60926, 74405, 108064, 61018, 14150, 37189, 42751, 74660, 61786, 105067, 64233, 127024, 101651, 116444, 82188, 73558, 8118]
[2024-12-02 19:19:55.889236] user = 18029 Cloud 188/568
[2024-12-02 19:19:55.951167] user = 18029 Local 188/568
[2024-12-02 19:19:56.011995] user = 18029 Local+ 188/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:57.845541] user = 18029 MPDA- 188/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6343400837988826
Training on augumented user 76566 0/50 current_auc = 0.6343400837988826
User 76566 AUC after training: 0.6339909217877094
User 76566 does not improve AUC. Reverting changes.
Training on augumented user 41897 1/50 current_auc = 0.6343400837988826
User 41897 AUC after training: 0.6346892458100559
User 41897 improves AUC. Keeping the model.
Training on augumented user 38594 2/50 current_auc = 0.6346892458100559
User 38594 AUC after training: 0.6342527932960894
User 38594 does not improve AUC. Reverting changes.
Training on augumented user 4456 3/50 current_auc = 0.6346892458100559
User 4456 AUC after training: 0.635169343575419
User 4456 improves AUC. Keeping the model.
Training on augumented user 42172 4/50 current_auc = 0.635169343575419
User 42172 AUC after training: 0.6336417597765364
User 42172 does not improve AUC. Reverting changes.
Training on augumented user 79134 5/50 current_auc = 0.635169343575419
User 79134 AUC after training: 0.6357367318435754
User 79134 improves AUC. Keeping the model.
Training on augumented user 72229 6/50 current_auc = 0.6357367318435754
User 72229 AUC after training: 0.6361295391061452
User 72229 improves AUC. Keeping the model.
Training on augumented user 25941 7/50 current_auc = 0.6361295391061452
User 25941 AUC after training: 0.6362168296089385
User 25941 improves AUC. Keeping the model.
Training on augumented user 120264 8/50 current_auc = 0.6362168296089385
User 120264 AUC after training: 0.6359986033519553
User 120264 does not improve AUC. Reverting changes.
Training on augumented user 136738 9/50 current_auc = 0.6362168296089385
User 136738 AUC after training: 0.6365223463687151
User 136738 improves AUC. Keeping the model.
Training on augumented user 78935 10/50 current_auc = 0.6365223463687151
User 78935 AUC after training: 0.6366096368715084
User 78935 improves AUC. Keeping the model.
Training on augumented user 67569 11/50 current_auc = 0.6366096368715084
User 67569 AUC after training: 0.6374388966480447
User 67569 improves AUC. Keeping the model.
Training on augumented user 32961 12/50 current_auc = 0.6374388966480447
User 32961 AUC after training: 0.6374825418994413
User 32961 improves AUC. Keeping the model.
Training on augumented user 2755 13/50 current_auc = 0.6374825418994413
User 2755 AUC after training: 0.6366969273743016
User 2755 does not improve AUC. Reverting changes.
Training on augumented user 47895 14/50 current_auc = 0.6374825418994413
User 47895 AUC after training: 0.6384863826815642
User 47895 improves AUC. Keeping the model.
Training on augumented user 93933 15/50 current_auc = 0.6384863826815642
User 93933 AUC after training: 0.6392283519553073
User 93933 improves AUC. Keeping the model.
Training on augumented user 42562 16/50 current_auc = 0.6392283519553073
User 42562 AUC after training: 0.6392283519553073
User 42562 does not improve AUC. Reverting changes.
Training on augumented user 107497 17/50 current_auc = 0.6392283519553073
User 107497 AUC after training: 0.6390537709497206
User 107497 does not improve AUC. Reverting changes.
Training on augumented user 128274 18/50 current_auc = 0.6392283519553073
User 128274 AUC after training: 0.6386173184357542
User 128274 does not improve AUC. Reverting changes.
Training on augumented user 22081 19/50 current_auc = 0.6392283519553073
User 22081 AUC after training: 0.6391410614525139
User 22081 does not improve AUC. Reverting changes.
Training on augumented user 64140 20/50 current_auc = 0.6392283519553073
User 64140 AUC after training: 0.638268156424581
User 64140 does not improve AUC. Reverting changes.
Training on augumented user 75961 21/50 current_auc = 0.6392283519553073
User 75961 AUC after training: 0.6387046089385475
User 75961 does not improve AUC. Reverting changes.
Training on augumented user 16043 22/50 current_auc = 0.6392283519553073
User 16043 AUC after training: 0.6393156424581006
User 16043 improves AUC. Keeping the model.
Training on augumented user 73972 23/50 current_auc = 0.6393156424581006
User 73972 AUC after training: 0.6387046089385475
User 73972 does not improve AUC. Reverting changes.
Training on augumented user 4837 24/50 current_auc = 0.6393156424581006
User 4837 AUC after training: 0.6388355446927374
User 4837 does not improve AUC. Reverting changes.
Training on augumented user 9915 25/50 current_auc = 0.6393156424581006
User 9915 AUC after training: 0.6393156424581006
User 9915 does not improve AUC. Reverting changes.
Training on augumented user 95812 26/50 current_auc = 0.6393156424581006
User 95812 AUC after training: 0.6395775139664804
User 95812 improves AUC. Keeping the model.
Training on augumented user 34816 27/50 current_auc = 0.6395775139664804
User 34816 AUC after training: 0.6393156424581006
User 34816 does not improve AUC. Reverting changes.
Training on augumented user 10176 28/50 current_auc = 0.6395775139664804
User 10176 AUC after training: 0.6383554469273743
User 10176 does not improve AUC. Reverting changes.
Training on augumented user 43994 29/50 current_auc = 0.6395775139664804
User 43994 AUC after training: 0.6393156424581006
User 43994 does not improve AUC. Reverting changes.
Training on augumented user 109334 30/50 current_auc = 0.6395775139664804
User 109334 AUC after training: 0.6394902234636871
User 109334 does not improve AUC. Reverting changes.
Training on augumented user 117380 31/50 current_auc = 0.6395775139664804
User 117380 AUC after training: 0.6395775139664804
User 117380 does not improve AUC. Reverting changes.
Training on augumented user 53011 32/50 current_auc = 0.6395775139664804
User 53011 AUC after training: 0.6389664804469273
User 53011 does not improve AUC. Reverting changes.
Training on augumented user 60926 33/50 current_auc = 0.6395775139664804
User 60926 AUC after training: 0.6394029329608939
User 60926 does not improve AUC. Reverting changes.
Training on augumented user 74405 34/50 current_auc = 0.6395775139664804
User 74405 AUC after training: 0.6388791899441341
User 74405 does not improve AUC. Reverting changes.
Training on augumented user 108064 35/50 current_auc = 0.6395775139664804
User 108064 AUC after training: 0.6390537709497207
User 108064 does not improve AUC. Reverting changes.
Training on augumented user 61018 36/50 current_auc = 0.6395775139664804
User 61018 AUC after training: 0.6392283519553073
User 61018 does not improve AUC. Reverting changes.
Training on augumented user 14150 37/50 current_auc = 0.6395775139664804
User 14150 AUC after training: 0.6394465782122905
User 14150 does not improve AUC. Reverting changes.
Training on augumented user 37189 38/50 current_auc = 0.6395775139664804
User 37189 AUC after training: 0.6394902234636872
User 37189 does not improve AUC. Reverting changes.
Training on augumented user 42751 39/50 current_auc = 0.6395775139664804
User 42751 AUC after training: 0.6371770251396647
User 42751 does not improve AUC. Reverting changes.
Training on augumented user 74660 40/50 current_auc = 0.6395775139664804
User 74660 AUC after training: 0.6395775139664804
User 74660 does not improve AUC. Reverting changes.
Training on augumented user 61786 41/50 current_auc = 0.6395775139664804
User 61786 AUC after training: 0.6394465782122905
User 61786 does not improve AUC. Reverting changes.
Training on augumented user 105067 42/50 current_auc = 0.6395775139664804
User 105067 AUC after training: 0.6394029329608938
User 105067 does not improve AUC. Reverting changes.
Training on augumented user 64233 43/50 current_auc = 0.6395775139664804
User 64233 AUC after training: 0.6375698324022346
User 64233 does not improve AUC. Reverting changes.
Training on augumented user 127024 44/50 current_auc = 0.6395775139664804
User 127024 AUC after training: 0.6398393854748603
User 127024 improves AUC. Keeping the model.
Training on augumented user 101651 45/50 current_auc = 0.6398393854748603
User 101651 AUC after training: 0.6389664804469274
User 101651 does not improve AUC. Reverting changes.
Training on augumented user 116444 46/50 current_auc = 0.6398393854748603
User 116444 AUC after training: 0.6396648044692738
User 116444 does not improve AUC. Reverting changes.
Training on augumented user 82188 47/50 current_auc = 0.6398393854748603
User 82188 AUC after training: 0.6368715083798883
User 82188 does not improve AUC. Reverting changes.
Training on augumented user 73558 48/50 current_auc = 0.6398393854748603
User 73558 AUC after training: 0.6396648044692738
User 73558 does not improve AUC. Reverting changes.
Training on augumented user 8118 49/50 current_auc = 0.6398393854748603
User 8118 AUC after training: 0.6394029329608939
User 8118 does not improve AUC. Reverting changes.
[2024-12-02 19:20:29.980402] start test user 18059 189/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:30.510002] start test user 18059 189/568 recall augumented users by random, augumented_users = [59323, 63604, 28329, 7125, 123005, 92549, 24270, 99751, 109248, 122766, 42333, 12092, 50481, 134077, 51348, 78656, 1144, 8160, 7000, 40498, 74471, 2304, 81750, 46466, 58860, 62366, 9048, 73388, 122945, 105288, 93622, 6489, 14208, 136756, 80663, 98574, 127655, 226, 55092, 138461, 72839, 83556, 115230, 7171, 9633, 60398, 84653, 103627, 97228, 113927]
[2024-12-02 19:20:30.525812] user = 18059 Cloud 189/568
[2024-12-02 19:20:30.541300] user = 18059 Local 189/568
[2024-12-02 19:20:30.611839] user = 18059 Local+ 189/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:32.867797] user = 18059 MPDA- 189/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6130536130536131
Training on augumented user 59323 0/50 current_auc = 0.6130536130536131
User 59323 AUC after training: 0.6153846153846154
User 59323 improves AUC. Keeping the model.
Training on augumented user 63604 1/50 current_auc = 0.6153846153846154
User 63604 AUC after training: 0.6130536130536131
User 63604 does not improve AUC. Reverting changes.
Training on augumented user 28329 2/50 current_auc = 0.6153846153846154
User 28329 AUC after training: 0.6118881118881119
User 28329 does not improve AUC. Reverting changes.
Training on augumented user 7125 3/50 current_auc = 0.6153846153846154
User 7125 AUC after training: 0.6130536130536131
User 7125 does not improve AUC. Reverting changes.
Training on augumented user 123005 4/50 current_auc = 0.6153846153846154
User 123005 AUC after training: 0.6142191142191142
User 123005 does not improve AUC. Reverting changes.
Training on augumented user 92549 5/50 current_auc = 0.6153846153846154
User 92549 AUC after training: 0.6107226107226107
User 92549 does not improve AUC. Reverting changes.
Training on augumented user 24270 6/50 current_auc = 0.6153846153846154
User 24270 AUC after training: 0.6153846153846153
User 24270 does not improve AUC. Reverting changes.
Training on augumented user 99751 7/50 current_auc = 0.6153846153846154
User 99751 AUC after training: 0.6142191142191142
User 99751 does not improve AUC. Reverting changes.
Training on augumented user 109248 8/50 current_auc = 0.6153846153846154
User 109248 AUC after training: 0.6130536130536131
User 109248 does not improve AUC. Reverting changes.
Training on augumented user 122766 9/50 current_auc = 0.6153846153846154
User 122766 AUC after training: 0.6153846153846154
User 122766 does not improve AUC. Reverting changes.
Training on augumented user 42333 10/50 current_auc = 0.6153846153846154
User 42333 AUC after training: 0.6153846153846154
User 42333 does not improve AUC. Reverting changes.
Training on augumented user 12092 11/50 current_auc = 0.6153846153846154
User 12092 AUC after training: 0.6072261072261071
User 12092 does not improve AUC. Reverting changes.
Training on augumented user 50481 12/50 current_auc = 0.6153846153846154
User 50481 AUC after training: 0.6060606060606061
User 50481 does not improve AUC. Reverting changes.
Training on augumented user 134077 13/50 current_auc = 0.6153846153846154
User 134077 AUC after training: 0.6153846153846154
User 134077 does not improve AUC. Reverting changes.
Training on augumented user 51348 14/50 current_auc = 0.6153846153846154
User 51348 AUC after training: 0.6118881118881119
User 51348 does not improve AUC. Reverting changes.
Training on augumented user 78656 15/50 current_auc = 0.6153846153846154
User 78656 AUC after training: 0.6153846153846154
User 78656 does not improve AUC. Reverting changes.
Training on augumented user 1144 16/50 current_auc = 0.6153846153846154
User 1144 AUC after training: 0.6153846153846154
User 1144 does not improve AUC. Reverting changes.
Training on augumented user 8160 17/50 current_auc = 0.6153846153846154
User 8160 AUC after training: 0.6142191142191142
User 8160 does not improve AUC. Reverting changes.
Training on augumented user 7000 18/50 current_auc = 0.6153846153846154
User 7000 AUC after training: 0.6142191142191142
User 7000 does not improve AUC. Reverting changes.
Training on augumented user 40498 19/50 current_auc = 0.6153846153846154
User 40498 AUC after training: 0.6153846153846154
User 40498 does not improve AUC. Reverting changes.
Training on augumented user 74471 20/50 current_auc = 0.6153846153846154
User 74471 AUC after training: 0.6165501165501165
User 74471 improves AUC. Keeping the model.
Training on augumented user 2304 21/50 current_auc = 0.6165501165501165
User 2304 AUC after training: 0.6165501165501165
User 2304 does not improve AUC. Reverting changes.
Training on augumented user 81750 22/50 current_auc = 0.6165501165501165
User 81750 AUC after training: 0.6142191142191142
User 81750 does not improve AUC. Reverting changes.
Training on augumented user 46466 23/50 current_auc = 0.6165501165501165
User 46466 AUC after training: 0.6165501165501165
User 46466 does not improve AUC. Reverting changes.
Training on augumented user 58860 24/50 current_auc = 0.6165501165501165
User 58860 AUC after training: 0.6153846153846154
User 58860 does not improve AUC. Reverting changes.
Training on augumented user 62366 25/50 current_auc = 0.6165501165501165
User 62366 AUC after training: 0.6153846153846153
User 62366 does not improve AUC. Reverting changes.
Training on augumented user 9048 26/50 current_auc = 0.6165501165501165
User 9048 AUC after training: 0.6142191142191142
User 9048 does not improve AUC. Reverting changes.
Training on augumented user 73388 27/50 current_auc = 0.6165501165501165
User 73388 AUC after training: 0.6165501165501165
User 73388 does not improve AUC. Reverting changes.
Training on augumented user 122945 28/50 current_auc = 0.6165501165501165
User 122945 AUC after training: 0.6165501165501165
User 122945 does not improve AUC. Reverting changes.
Training on augumented user 105288 29/50 current_auc = 0.6165501165501165
User 105288 AUC after training: 0.6142191142191142
User 105288 does not improve AUC. Reverting changes.
Training on augumented user 93622 30/50 current_auc = 0.6165501165501165
User 93622 AUC after training: 0.6142191142191142
User 93622 does not improve AUC. Reverting changes.
Training on augumented user 6489 31/50 current_auc = 0.6165501165501165
User 6489 AUC after training: 0.6142191142191142
User 6489 does not improve AUC. Reverting changes.
Training on augumented user 14208 32/50 current_auc = 0.6165501165501165
User 14208 AUC after training: 0.6153846153846153
User 14208 does not improve AUC. Reverting changes.
Training on augumented user 136756 33/50 current_auc = 0.6165501165501165
User 136756 AUC after training: 0.6142191142191142
User 136756 does not improve AUC. Reverting changes.
Training on augumented user 80663 34/50 current_auc = 0.6165501165501165
User 80663 AUC after training: 0.6142191142191142
User 80663 does not improve AUC. Reverting changes.
Training on augumented user 98574 35/50 current_auc = 0.6165501165501165
User 98574 AUC after training: 0.6130536130536131
User 98574 does not improve AUC. Reverting changes.
Training on augumented user 127655 36/50 current_auc = 0.6165501165501165
User 127655 AUC after training: 0.6153846153846153
User 127655 does not improve AUC. Reverting changes.
Training on augumented user 226 37/50 current_auc = 0.6165501165501165
User 226 AUC after training: 0.6165501165501165
User 226 does not improve AUC. Reverting changes.
Training on augumented user 55092 38/50 current_auc = 0.6165501165501165
User 55092 AUC after training: 0.6153846153846154
User 55092 does not improve AUC. Reverting changes.
Training on augumented user 138461 39/50 current_auc = 0.6165501165501165
User 138461 AUC after training: 0.6142191142191142
User 138461 does not improve AUC. Reverting changes.
Training on augumented user 72839 40/50 current_auc = 0.6165501165501165
User 72839 AUC after training: 0.6107226107226107
User 72839 does not improve AUC. Reverting changes.
Training on augumented user 83556 41/50 current_auc = 0.6165501165501165
User 83556 AUC after training: 0.6153846153846154
User 83556 does not improve AUC. Reverting changes.
Training on augumented user 115230 42/50 current_auc = 0.6165501165501165
User 115230 AUC after training: 0.6165501165501165
User 115230 does not improve AUC. Reverting changes.
Training on augumented user 7171 43/50 current_auc = 0.6165501165501165
User 7171 AUC after training: 0.6153846153846154
User 7171 does not improve AUC. Reverting changes.
Training on augumented user 9633 44/50 current_auc = 0.6165501165501165
User 9633 AUC after training: 0.6153846153846153
User 9633 does not improve AUC. Reverting changes.
Training on augumented user 60398 45/50 current_auc = 0.6165501165501165
User 60398 AUC after training: 0.6130536130536131
User 60398 does not improve AUC. Reverting changes.
Training on augumented user 84653 46/50 current_auc = 0.6165501165501165
User 84653 AUC after training: 0.6118881118881119
User 84653 does not improve AUC. Reverting changes.
Training on augumented user 103627 47/50 current_auc = 0.6165501165501165
User 103627 AUC after training: 0.6142191142191142
User 103627 does not improve AUC. Reverting changes.
Training on augumented user 97228 48/50 current_auc = 0.6165501165501165
User 97228 AUC after training: 0.6165501165501165
User 97228 does not improve AUC. Reverting changes.
Training on augumented user 113927 49/50 current_auc = 0.6165501165501165
User 113927 AUC after training: 0.6118881118881119
User 113927 does not improve AUC. Reverting changes.
[2024-12-02 19:21:05.401604] start test user 18069 190/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:05.829309] start test user 18069 190/568 recall augumented users by random, augumented_users = [3680, 80201, 131880, 113666, 67929, 130595, 47217, 30563, 62998, 8515, 119313, 108073, 16293, 50962, 9713, 106558, 55580, 103087, 92989, 114005, 116688, 41481, 49287, 96032, 41188, 106704, 121151, 38863, 117594, 42627, 86879, 24737, 43932, 138432, 107633, 63507, 45435, 65517, 108421, 13214, 102227, 47331, 29795, 48581, 110169, 115517, 104537, 52348, 16064, 33945]
[2024-12-02 19:21:05.845943] user = 18069 Cloud 190/568
[2024-12-02 19:21:05.856734] user = 18069 Local 190/568
[2024-12-02 19:21:06.074195] user = 18069 Local+ 190/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:08.534539] user = 18069 MPDA- 190/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6749999999999999
Training on augumented user 3680 0/50 current_auc = 0.6749999999999999
User 3680 AUC after training: 0.6749999999999999
User 3680 does not improve AUC. Reverting changes.
Training on augumented user 80201 1/50 current_auc = 0.6749999999999999
User 80201 AUC after training: 0.6749999999999999
User 80201 does not improve AUC. Reverting changes.
Training on augumented user 131880 2/50 current_auc = 0.6749999999999999
User 131880 AUC after training: 0.675
User 131880 improves AUC. Keeping the model.
Training on augumented user 113666 3/50 current_auc = 0.675
User 113666 AUC after training: 0.675
User 113666 does not improve AUC. Reverting changes.
Training on augumented user 67929 4/50 current_auc = 0.675
User 67929 AUC after training: 0.675
User 67929 does not improve AUC. Reverting changes.
Training on augumented user 130595 5/50 current_auc = 0.675
User 130595 AUC after training: 0.675
User 130595 does not improve AUC. Reverting changes.
Training on augumented user 47217 6/50 current_auc = 0.675
User 47217 AUC after training: 0.6749999999999999
User 47217 does not improve AUC. Reverting changes.
Training on augumented user 30563 7/50 current_auc = 0.675
User 30563 AUC after training: 0.675
User 30563 does not improve AUC. Reverting changes.
Training on augumented user 62998 8/50 current_auc = 0.675
User 62998 AUC after training: 0.675
User 62998 does not improve AUC. Reverting changes.
Training on augumented user 8515 9/50 current_auc = 0.675
User 8515 AUC after training: 0.675
User 8515 does not improve AUC. Reverting changes.
Training on augumented user 119313 10/50 current_auc = 0.675
User 119313 AUC after training: 0.675
User 119313 does not improve AUC. Reverting changes.
Training on augumented user 108073 11/50 current_auc = 0.675
User 108073 AUC after training: 0.675
User 108073 does not improve AUC. Reverting changes.
Training on augumented user 16293 12/50 current_auc = 0.675
User 16293 AUC after training: 0.675
User 16293 does not improve AUC. Reverting changes.
Training on augumented user 50962 13/50 current_auc = 0.675
User 50962 AUC after training: 0.675
User 50962 does not improve AUC. Reverting changes.
Training on augumented user 9713 14/50 current_auc = 0.675
User 9713 AUC after training: 0.675
User 9713 does not improve AUC. Reverting changes.
Training on augumented user 106558 15/50 current_auc = 0.675
User 106558 AUC after training: 0.675
User 106558 does not improve AUC. Reverting changes.
Training on augumented user 55580 16/50 current_auc = 0.675
User 55580 AUC after training: 0.675
User 55580 does not improve AUC. Reverting changes.
Training on augumented user 103087 17/50 current_auc = 0.675
User 103087 AUC after training: 0.675
User 103087 does not improve AUC. Reverting changes.
Training on augumented user 92989 18/50 current_auc = 0.675
User 92989 AUC after training: 0.675
User 92989 does not improve AUC. Reverting changes.
Training on augumented user 114005 19/50 current_auc = 0.675
User 114005 AUC after training: 0.675
User 114005 does not improve AUC. Reverting changes.
Training on augumented user 116688 20/50 current_auc = 0.675
User 116688 AUC after training: 0.675
User 116688 does not improve AUC. Reverting changes.
Training on augumented user 41481 21/50 current_auc = 0.675
User 41481 AUC after training: 0.675
User 41481 does not improve AUC. Reverting changes.
Training on augumented user 49287 22/50 current_auc = 0.675
User 49287 AUC after training: 0.6749999999999999
User 49287 does not improve AUC. Reverting changes.
Training on augumented user 96032 23/50 current_auc = 0.675
User 96032 AUC after training: 0.675
User 96032 does not improve AUC. Reverting changes.
Training on augumented user 41188 24/50 current_auc = 0.675
User 41188 AUC after training: 0.675
User 41188 does not improve AUC. Reverting changes.
Training on augumented user 106704 25/50 current_auc = 0.675
User 106704 AUC after training: 0.675
User 106704 does not improve AUC. Reverting changes.
Training on augumented user 121151 26/50 current_auc = 0.675
User 121151 AUC after training: 0.675
User 121151 does not improve AUC. Reverting changes.
Training on augumented user 38863 27/50 current_auc = 0.675
User 38863 AUC after training: 0.675
User 38863 does not improve AUC. Reverting changes.
Training on augumented user 117594 28/50 current_auc = 0.675
User 117594 AUC after training: 0.675
User 117594 does not improve AUC. Reverting changes.
Training on augumented user 42627 29/50 current_auc = 0.675
User 42627 AUC after training: 0.675
User 42627 does not improve AUC. Reverting changes.
Training on augumented user 86879 30/50 current_auc = 0.675
User 86879 AUC after training: 0.675
User 86879 does not improve AUC. Reverting changes.
Training on augumented user 24737 31/50 current_auc = 0.675
User 24737 AUC after training: 0.675
User 24737 does not improve AUC. Reverting changes.
Training on augumented user 43932 32/50 current_auc = 0.675
User 43932 AUC after training: 0.675
User 43932 does not improve AUC. Reverting changes.
Training on augumented user 138432 33/50 current_auc = 0.675
User 138432 AUC after training: 0.675
User 138432 does not improve AUC. Reverting changes.
Training on augumented user 107633 34/50 current_auc = 0.675
User 107633 AUC after training: 0.675
User 107633 does not improve AUC. Reverting changes.
Training on augumented user 63507 35/50 current_auc = 0.675
User 63507 AUC after training: 0.675
User 63507 does not improve AUC. Reverting changes.
Training on augumented user 45435 36/50 current_auc = 0.675
User 45435 AUC after training: 0.675
User 45435 does not improve AUC. Reverting changes.
Training on augumented user 65517 37/50 current_auc = 0.675
User 65517 AUC after training: 0.675
User 65517 does not improve AUC. Reverting changes.
Training on augumented user 108421 38/50 current_auc = 0.675
User 108421 AUC after training: 0.675
User 108421 does not improve AUC. Reverting changes.
Training on augumented user 13214 39/50 current_auc = 0.675
User 13214 AUC after training: 0.675
User 13214 does not improve AUC. Reverting changes.
Training on augumented user 102227 40/50 current_auc = 0.675
User 102227 AUC after training: 0.675
User 102227 does not improve AUC. Reverting changes.
Training on augumented user 47331 41/50 current_auc = 0.675
User 47331 AUC after training: 0.675
User 47331 does not improve AUC. Reverting changes.
Training on augumented user 29795 42/50 current_auc = 0.675
User 29795 AUC after training: 0.675
User 29795 does not improve AUC. Reverting changes.
Training on augumented user 48581 43/50 current_auc = 0.675
User 48581 AUC after training: 0.675
User 48581 does not improve AUC. Reverting changes.
Training on augumented user 110169 44/50 current_auc = 0.675
User 110169 AUC after training: 0.675
User 110169 does not improve AUC. Reverting changes.
Training on augumented user 115517 45/50 current_auc = 0.675
User 115517 AUC after training: 0.675
User 115517 does not improve AUC. Reverting changes.
Training on augumented user 104537 46/50 current_auc = 0.675
User 104537 AUC after training: 0.675
User 104537 does not improve AUC. Reverting changes.
Training on augumented user 52348 47/50 current_auc = 0.675
User 52348 AUC after training: 0.675
User 52348 does not improve AUC. Reverting changes.
Training on augumented user 16064 48/50 current_auc = 0.675
User 16064 AUC after training: 0.675
User 16064 does not improve AUC. Reverting changes.
Training on augumented user 33945 49/50 current_auc = 0.675
User 33945 AUC after training: 0.675
User 33945 does not improve AUC. Reverting changes.
[2024-12-02 19:21:34.794908] start test user 18080 191/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:35.197669] start test user 18080 191/568 recall augumented users by random, augumented_users = [122085, 41394, 80920, 76733, 30824, 32613, 34781, 93324, 112952, 56493, 78128, 102843, 10536, 133861, 125426, 17026, 42367, 65785, 18260, 92411, 2221, 112104, 75874, 17220, 30136, 93078, 86337, 82080, 114249, 121262, 125741, 101416, 52772, 110812, 44078, 122007, 124867, 81123, 16826, 34913, 93309, 114726, 5358, 89413, 72915, 8962, 24462, 42768, 18274, 10853]
[2024-12-02 19:21:35.212886] user = 18080 Cloud 191/568
[2024-12-02 19:21:35.223507] user = 18080 Local 191/568
[2024-12-02 19:21:35.324450] user = 18080 Local+ 191/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:37.748164] user = 18080 MPDA- 191/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8804347826086957
Training on augumented user 122085 0/50 current_auc = 0.8804347826086957
User 122085 AUC after training: 0.8804347826086957
User 122085 does not improve AUC. Reverting changes.
Training on augumented user 41394 1/50 current_auc = 0.8804347826086957
User 41394 AUC after training: 0.8804347826086957
User 41394 does not improve AUC. Reverting changes.
Training on augumented user 80920 2/50 current_auc = 0.8804347826086957
User 80920 AUC after training: 0.8835403726708074
User 80920 improves AUC. Keeping the model.
Training on augumented user 76733 3/50 current_auc = 0.8835403726708074
User 76733 AUC after training: 0.8850931677018633
User 76733 improves AUC. Keeping the model.
Training on augumented user 30824 4/50 current_auc = 0.8850931677018633
User 30824 AUC after training: 0.8835403726708074
User 30824 does not improve AUC. Reverting changes.
Training on augumented user 32613 5/50 current_auc = 0.8850931677018633
User 32613 AUC after training: 0.8804347826086956
User 32613 does not improve AUC. Reverting changes.
Training on augumented user 34781 6/50 current_auc = 0.8850931677018633
User 34781 AUC after training: 0.8850931677018633
User 34781 does not improve AUC. Reverting changes.
Training on augumented user 93324 7/50 current_auc = 0.8850931677018633
User 93324 AUC after training: 0.8835403726708074
User 93324 does not improve AUC. Reverting changes.
Training on augumented user 112952 8/50 current_auc = 0.8850931677018633
User 112952 AUC after training: 0.8850931677018633
User 112952 does not improve AUC. Reverting changes.
Training on augumented user 56493 9/50 current_auc = 0.8850931677018633
User 56493 AUC after training: 0.8850931677018633
User 56493 does not improve AUC. Reverting changes.
Training on augumented user 78128 10/50 current_auc = 0.8850931677018633
User 78128 AUC after training: 0.8835403726708074
User 78128 does not improve AUC. Reverting changes.
Training on augumented user 102843 11/50 current_auc = 0.8850931677018633
User 102843 AUC after training: 0.8866459627329192
User 102843 improves AUC. Keeping the model.
Training on augumented user 10536 12/50 current_auc = 0.8866459627329192
User 10536 AUC after training: 0.8866459627329192
User 10536 does not improve AUC. Reverting changes.
Training on augumented user 133861 13/50 current_auc = 0.8866459627329192
User 133861 AUC after training: 0.8835403726708074
User 133861 does not improve AUC. Reverting changes.
Training on augumented user 125426 14/50 current_auc = 0.8866459627329192
User 125426 AUC after training: 0.8866459627329192
User 125426 does not improve AUC. Reverting changes.
Training on augumented user 17026 15/50 current_auc = 0.8866459627329192
User 17026 AUC after training: 0.8866459627329192
User 17026 does not improve AUC. Reverting changes.
Training on augumented user 42367 16/50 current_auc = 0.8866459627329192
User 42367 AUC after training: 0.8881987577639752
User 42367 improves AUC. Keeping the model.
Training on augumented user 65785 17/50 current_auc = 0.8881987577639752
User 65785 AUC after training: 0.8881987577639752
User 65785 does not improve AUC. Reverting changes.
Training on augumented user 18260 18/50 current_auc = 0.8881987577639752
User 18260 AUC after training: 0.8866459627329193
User 18260 does not improve AUC. Reverting changes.
Training on augumented user 92411 19/50 current_auc = 0.8881987577639752
User 92411 AUC after training: 0.8866459627329193
User 92411 does not improve AUC. Reverting changes.
Training on augumented user 2221 20/50 current_auc = 0.8881987577639752
User 2221 AUC after training: 0.8881987577639752
User 2221 does not improve AUC. Reverting changes.
Training on augumented user 112104 21/50 current_auc = 0.8881987577639752
User 112104 AUC after training: 0.8881987577639752
User 112104 does not improve AUC. Reverting changes.
Training on augumented user 75874 22/50 current_auc = 0.8881987577639752
User 75874 AUC after training: 0.889751552795031
User 75874 improves AUC. Keeping the model.
Training on augumented user 17220 23/50 current_auc = 0.889751552795031
User 17220 AUC after training: 0.8835403726708075
User 17220 does not improve AUC. Reverting changes.
Training on augumented user 30136 24/50 current_auc = 0.889751552795031
User 30136 AUC after training: 0.8850931677018634
User 30136 does not improve AUC. Reverting changes.
Training on augumented user 93078 25/50 current_auc = 0.889751552795031
User 93078 AUC after training: 0.8881987577639752
User 93078 does not improve AUC. Reverting changes.
Training on augumented user 86337 26/50 current_auc = 0.889751552795031
User 86337 AUC after training: 0.889751552795031
User 86337 does not improve AUC. Reverting changes.
Training on augumented user 82080 27/50 current_auc = 0.889751552795031
User 82080 AUC after training: 0.8881987577639752
User 82080 does not improve AUC. Reverting changes.
Training on augumented user 114249 28/50 current_auc = 0.889751552795031
User 114249 AUC after training: 0.889751552795031
User 114249 does not improve AUC. Reverting changes.
Training on augumented user 121262 29/50 current_auc = 0.889751552795031
User 121262 AUC after training: 0.889751552795031
User 121262 does not improve AUC. Reverting changes.
Training on augumented user 125741 30/50 current_auc = 0.889751552795031
User 125741 AUC after training: 0.8866459627329193
User 125741 does not improve AUC. Reverting changes.
Training on augumented user 101416 31/50 current_auc = 0.889751552795031
User 101416 AUC after training: 0.889751552795031
User 101416 does not improve AUC. Reverting changes.
Training on augumented user 52772 32/50 current_auc = 0.889751552795031
User 52772 AUC after training: 0.889751552795031
User 52772 does not improve AUC. Reverting changes.
Training on augumented user 110812 33/50 current_auc = 0.889751552795031
User 110812 AUC after training: 0.8881987577639752
User 110812 does not improve AUC. Reverting changes.
Training on augumented user 44078 34/50 current_auc = 0.889751552795031
User 44078 AUC after training: 0.8866459627329193
User 44078 does not improve AUC. Reverting changes.
Training on augumented user 122007 35/50 current_auc = 0.889751552795031
User 122007 AUC after training: 0.8881987577639752
User 122007 does not improve AUC. Reverting changes.
Training on augumented user 124867 36/50 current_auc = 0.889751552795031
User 124867 AUC after training: 0.8881987577639752
User 124867 does not improve AUC. Reverting changes.
Training on augumented user 81123 37/50 current_auc = 0.889751552795031
User 81123 AUC after training: 0.889751552795031
User 81123 does not improve AUC. Reverting changes.
Training on augumented user 16826 38/50 current_auc = 0.889751552795031
User 16826 AUC after training: 0.8881987577639752
User 16826 does not improve AUC. Reverting changes.
Training on augumented user 34913 39/50 current_auc = 0.889751552795031
User 34913 AUC after training: 0.889751552795031
User 34913 does not improve AUC. Reverting changes.
Training on augumented user 93309 40/50 current_auc = 0.889751552795031
User 93309 AUC after training: 0.8866459627329193
User 93309 does not improve AUC. Reverting changes.
Training on augumented user 114726 41/50 current_auc = 0.889751552795031
User 114726 AUC after training: 0.8881987577639752
User 114726 does not improve AUC. Reverting changes.
Training on augumented user 5358 42/50 current_auc = 0.889751552795031
User 5358 AUC after training: 0.8881987577639752
User 5358 does not improve AUC. Reverting changes.
Training on augumented user 89413 43/50 current_auc = 0.889751552795031
User 89413 AUC after training: 0.889751552795031
User 89413 does not improve AUC. Reverting changes.
Training on augumented user 72915 44/50 current_auc = 0.889751552795031
User 72915 AUC after training: 0.889751552795031
User 72915 does not improve AUC. Reverting changes.
Training on augumented user 8962 45/50 current_auc = 0.889751552795031
User 8962 AUC after training: 0.8913043478260869
User 8962 improves AUC. Keeping the model.
Training on augumented user 24462 46/50 current_auc = 0.8913043478260869
User 24462 AUC after training: 0.8913043478260869
User 24462 does not improve AUC. Reverting changes.
Training on augumented user 42768 47/50 current_auc = 0.8913043478260869
User 42768 AUC after training: 0.8913043478260869
User 42768 does not improve AUC. Reverting changes.
Training on augumented user 18274 48/50 current_auc = 0.8913043478260869
User 18274 AUC after training: 0.889751552795031
User 18274 does not improve AUC. Reverting changes.
Training on augumented user 10853 49/50 current_auc = 0.8913043478260869
User 10853 AUC after training: 0.889751552795031
User 10853 does not improve AUC. Reverting changes.
[2024-12-02 19:22:06.889716] start test user 18104 192/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:07.426396] start test user 18104 192/568 recall augumented users by random, augumented_users = [93800, 118661, 90106, 104042, 76760, 66355, 11407, 77660, 30435, 1571, 46193, 97725, 10509, 93316, 50015, 18068, 47947, 75646, 47243, 59266, 125603, 45884, 53411, 74951, 104870, 29549, 112347, 50590, 18873, 130162, 7693, 111508, 61174, 111129, 102936, 102219, 101365, 69155, 6416, 122473, 102745, 40052, 63290, 136291, 121922, 64748, 25288, 127849, 91650, 75834]
[2024-12-02 19:22:07.444249] user = 18104 Cloud 192/568
[2024-12-02 19:22:07.455648] user = 18104 Local 192/568
[2024-12-02 19:22:07.506067] user = 18104 Local+ 192/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:10.138516] user = 18104 MPDA- 192/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5555555555555556
Training on augumented user 93800 0/50 current_auc = 0.5555555555555556
User 93800 AUC after training: 0.5555555555555556
User 93800 does not improve AUC. Reverting changes.
Training on augumented user 118661 1/50 current_auc = 0.5555555555555556
User 118661 AUC after training: 0.5555555555555556
User 118661 does not improve AUC. Reverting changes.
Training on augumented user 90106 2/50 current_auc = 0.5555555555555556
User 90106 AUC after training: 0.5555555555555556
User 90106 does not improve AUC. Reverting changes.
Training on augumented user 104042 3/50 current_auc = 0.5555555555555556
User 104042 AUC after training: 0.5555555555555556
User 104042 does not improve AUC. Reverting changes.
Training on augumented user 76760 4/50 current_auc = 0.5555555555555556
User 76760 AUC after training: 0.5555555555555556
User 76760 does not improve AUC. Reverting changes.
Training on augumented user 66355 5/50 current_auc = 0.5555555555555556
User 66355 AUC after training: 0.5555555555555556
User 66355 does not improve AUC. Reverting changes.
Training on augumented user 11407 6/50 current_auc = 0.5555555555555556
User 11407 AUC after training: 0.5555555555555556
User 11407 does not improve AUC. Reverting changes.
Training on augumented user 77660 7/50 current_auc = 0.5555555555555556
User 77660 AUC after training: 0.5555555555555556
User 77660 does not improve AUC. Reverting changes.
Training on augumented user 30435 8/50 current_auc = 0.5555555555555556
User 30435 AUC after training: 0.5555555555555556
User 30435 does not improve AUC. Reverting changes.
Training on augumented user 1571 9/50 current_auc = 0.5555555555555556
User 1571 AUC after training: 0.5
User 1571 does not improve AUC. Reverting changes.
Training on augumented user 46193 10/50 current_auc = 0.5555555555555556
User 46193 AUC after training: 0.5555555555555556
User 46193 does not improve AUC. Reverting changes.
Training on augumented user 97725 11/50 current_auc = 0.5555555555555556
User 97725 AUC after training: 0.5555555555555556
User 97725 does not improve AUC. Reverting changes.
Training on augumented user 10509 12/50 current_auc = 0.5555555555555556
User 10509 AUC after training: 0.5555555555555556
User 10509 does not improve AUC. Reverting changes.
Training on augumented user 93316 13/50 current_auc = 0.5555555555555556
User 93316 AUC after training: 0.5
User 93316 does not improve AUC. Reverting changes.
Training on augumented user 50015 14/50 current_auc = 0.5555555555555556
User 50015 AUC after training: 0.5555555555555556
User 50015 does not improve AUC. Reverting changes.
Training on augumented user 18068 15/50 current_auc = 0.5555555555555556
User 18068 AUC after training: 0.5555555555555556
User 18068 does not improve AUC. Reverting changes.
Training on augumented user 47947 16/50 current_auc = 0.5555555555555556
User 47947 AUC after training: 0.5555555555555556
User 47947 does not improve AUC. Reverting changes.
Training on augumented user 75646 17/50 current_auc = 0.5555555555555556
User 75646 AUC after training: 0.5555555555555556
User 75646 does not improve AUC. Reverting changes.
Training on augumented user 47243 18/50 current_auc = 0.5555555555555556
User 47243 AUC after training: 0.5555555555555556
User 47243 does not improve AUC. Reverting changes.
Training on augumented user 59266 19/50 current_auc = 0.5555555555555556
User 59266 AUC after training: 0.5555555555555556
User 59266 does not improve AUC. Reverting changes.
Training on augumented user 125603 20/50 current_auc = 0.5555555555555556
User 125603 AUC after training: 0.5555555555555556
User 125603 does not improve AUC. Reverting changes.
Training on augumented user 45884 21/50 current_auc = 0.5555555555555556
User 45884 AUC after training: 0.5555555555555556
User 45884 does not improve AUC. Reverting changes.
Training on augumented user 53411 22/50 current_auc = 0.5555555555555556
User 53411 AUC after training: 0.5555555555555556
User 53411 does not improve AUC. Reverting changes.
Training on augumented user 74951 23/50 current_auc = 0.5555555555555556
User 74951 AUC after training: 0.5555555555555556
User 74951 does not improve AUC. Reverting changes.
Training on augumented user 104870 24/50 current_auc = 0.5555555555555556
User 104870 AUC after training: 0.5555555555555556
User 104870 does not improve AUC. Reverting changes.
Training on augumented user 29549 25/50 current_auc = 0.5555555555555556
User 29549 AUC after training: 0.5555555555555556
User 29549 does not improve AUC. Reverting changes.
Training on augumented user 112347 26/50 current_auc = 0.5555555555555556
User 112347 AUC after training: 0.5555555555555556
User 112347 does not improve AUC. Reverting changes.
Training on augumented user 50590 27/50 current_auc = 0.5555555555555556
User 50590 AUC after training: 0.5555555555555556
User 50590 does not improve AUC. Reverting changes.
Training on augumented user 18873 28/50 current_auc = 0.5555555555555556
User 18873 AUC after training: 0.5555555555555556
User 18873 does not improve AUC. Reverting changes.
Training on augumented user 130162 29/50 current_auc = 0.5555555555555556
User 130162 AUC after training: 0.5555555555555556
User 130162 does not improve AUC. Reverting changes.
Training on augumented user 7693 30/50 current_auc = 0.5555555555555556
User 7693 AUC after training: 0.5555555555555556
User 7693 does not improve AUC. Reverting changes.
Training on augumented user 111508 31/50 current_auc = 0.5555555555555556
User 111508 AUC after training: 0.5555555555555556
User 111508 does not improve AUC. Reverting changes.
Training on augumented user 61174 32/50 current_auc = 0.5555555555555556
User 61174 AUC after training: 0.5555555555555556
User 61174 does not improve AUC. Reverting changes.
Training on augumented user 111129 33/50 current_auc = 0.5555555555555556
User 111129 AUC after training: 0.5555555555555556
User 111129 does not improve AUC. Reverting changes.
Training on augumented user 102936 34/50 current_auc = 0.5555555555555556
User 102936 AUC after training: 0.5555555555555556
User 102936 does not improve AUC. Reverting changes.
Training on augumented user 102219 35/50 current_auc = 0.5555555555555556
User 102219 AUC after training: 0.5555555555555556
User 102219 does not improve AUC. Reverting changes.
Training on augumented user 101365 36/50 current_auc = 0.5555555555555556
User 101365 AUC after training: 0.5555555555555556
User 101365 does not improve AUC. Reverting changes.
Training on augumented user 69155 37/50 current_auc = 0.5555555555555556
User 69155 AUC after training: 0.5555555555555556
User 69155 does not improve AUC. Reverting changes.
Training on augumented user 6416 38/50 current_auc = 0.5555555555555556
User 6416 AUC after training: 0.5555555555555556
User 6416 does not improve AUC. Reverting changes.
Training on augumented user 122473 39/50 current_auc = 0.5555555555555556
User 122473 AUC after training: 0.5555555555555556
User 122473 does not improve AUC. Reverting changes.
Training on augumented user 102745 40/50 current_auc = 0.5555555555555556
User 102745 AUC after training: 0.5555555555555556
User 102745 does not improve AUC. Reverting changes.
Training on augumented user 40052 41/50 current_auc = 0.5555555555555556
User 40052 AUC after training: 0.5555555555555556
User 40052 does not improve AUC. Reverting changes.
Training on augumented user 63290 42/50 current_auc = 0.5555555555555556
User 63290 AUC after training: 0.5555555555555556
User 63290 does not improve AUC. Reverting changes.
Training on augumented user 136291 43/50 current_auc = 0.5555555555555556
User 136291 AUC after training: 0.5555555555555556
User 136291 does not improve AUC. Reverting changes.
Training on augumented user 121922 44/50 current_auc = 0.5555555555555556
User 121922 AUC after training: 0.5555555555555556
User 121922 does not improve AUC. Reverting changes.
Training on augumented user 64748 45/50 current_auc = 0.5555555555555556
User 64748 AUC after training: 0.5555555555555556
User 64748 does not improve AUC. Reverting changes.
Training on augumented user 25288 46/50 current_auc = 0.5555555555555556
User 25288 AUC after training: 0.5555555555555556
User 25288 does not improve AUC. Reverting changes.
Training on augumented user 127849 47/50 current_auc = 0.5555555555555556
User 127849 AUC after training: 0.5555555555555556
User 127849 does not improve AUC. Reverting changes.
Training on augumented user 91650 48/50 current_auc = 0.5555555555555556
User 91650 AUC after training: 0.5555555555555556
User 91650 does not improve AUC. Reverting changes.
Training on augumented user 75834 49/50 current_auc = 0.5555555555555556
User 75834 AUC after training: 0.5555555555555556
User 75834 does not improve AUC. Reverting changes.
[2024-12-02 19:22:41.860824] start test user 18105 193/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:42.384385] start test user 18105 193/568 recall augumented users by random, augumented_users = [37032, 61495, 84025, 63031, 72766, 61959, 42464, 59790, 77782, 125507, 134596, 90938, 94494, 15320, 131070, 13018, 93339, 22841, 24325, 55007, 131081, 46739, 114004, 12655, 77390, 31988, 102113, 17446, 111534, 136295, 28921, 22422, 77110, 15536, 130336, 103123, 73728, 126291, 114804, 129038, 8381, 92102, 26639, 66563, 113650, 118427, 18609, 31293, 49114, 46245]
[2024-12-02 19:22:42.406283] user = 18105 Cloud 193/568
[2024-12-02 19:22:42.415662] user = 18105 Local 193/568
[2024-12-02 19:22:42.524043] user = 18105 Local+ 193/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:45.091800] user = 18105 MPDA- 193/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.45000000000000007
Training on augumented user 37032 0/50 current_auc = 0.45000000000000007
User 37032 AUC after training: 0.45000000000000007
User 37032 does not improve AUC. Reverting changes.
Training on augumented user 61495 1/50 current_auc = 0.45000000000000007
User 61495 AUC after training: 0.45000000000000007
User 61495 does not improve AUC. Reverting changes.
Training on augumented user 84025 2/50 current_auc = 0.45000000000000007
User 84025 AUC after training: 0.45000000000000007
User 84025 does not improve AUC. Reverting changes.
Training on augumented user 63031 3/50 current_auc = 0.45000000000000007
User 63031 AUC after training: 0.45000000000000007
User 63031 does not improve AUC. Reverting changes.
Training on augumented user 72766 4/50 current_auc = 0.45000000000000007
User 72766 AUC after training: 0.45000000000000007
User 72766 does not improve AUC. Reverting changes.
Training on augumented user 61959 5/50 current_auc = 0.45000000000000007
User 61959 AUC after training: 0.45000000000000007
User 61959 does not improve AUC. Reverting changes.
Training on augumented user 42464 6/50 current_auc = 0.45000000000000007
User 42464 AUC after training: 0.45000000000000007
User 42464 does not improve AUC. Reverting changes.
Training on augumented user 59790 7/50 current_auc = 0.45000000000000007
User 59790 AUC after training: 0.45000000000000007
User 59790 does not improve AUC. Reverting changes.
Training on augumented user 77782 8/50 current_auc = 0.45000000000000007
User 77782 AUC after training: 0.45000000000000007
User 77782 does not improve AUC. Reverting changes.
Training on augumented user 125507 9/50 current_auc = 0.45000000000000007
User 125507 AUC after training: 0.45000000000000007
User 125507 does not improve AUC. Reverting changes.
Training on augumented user 134596 10/50 current_auc = 0.45000000000000007
User 134596 AUC after training: 0.45000000000000007
User 134596 does not improve AUC. Reverting changes.
Training on augumented user 90938 11/50 current_auc = 0.45000000000000007
User 90938 AUC after training: 0.45000000000000007
User 90938 does not improve AUC. Reverting changes.
Training on augumented user 94494 12/50 current_auc = 0.45000000000000007
User 94494 AUC after training: 0.45000000000000007
User 94494 does not improve AUC. Reverting changes.
Training on augumented user 15320 13/50 current_auc = 0.45000000000000007
User 15320 AUC after training: 0.45000000000000007
User 15320 does not improve AUC. Reverting changes.
Training on augumented user 131070 14/50 current_auc = 0.45000000000000007
User 131070 AUC after training: 0.45000000000000007
User 131070 does not improve AUC. Reverting changes.
Training on augumented user 13018 15/50 current_auc = 0.45000000000000007
User 13018 AUC after training: 0.45000000000000007
User 13018 does not improve AUC. Reverting changes.
Training on augumented user 93339 16/50 current_auc = 0.45000000000000007
User 93339 AUC after training: 0.45000000000000007
User 93339 does not improve AUC. Reverting changes.
Training on augumented user 22841 17/50 current_auc = 0.45000000000000007
User 22841 AUC after training: 0.45000000000000007
User 22841 does not improve AUC. Reverting changes.
Training on augumented user 24325 18/50 current_auc = 0.45000000000000007
User 24325 AUC after training: 0.45000000000000007
User 24325 does not improve AUC. Reverting changes.
Training on augumented user 55007 19/50 current_auc = 0.45000000000000007
User 55007 AUC after training: 0.45000000000000007
User 55007 does not improve AUC. Reverting changes.
Training on augumented user 131081 20/50 current_auc = 0.45000000000000007
User 131081 AUC after training: 0.45000000000000007
User 131081 does not improve AUC. Reverting changes.
Training on augumented user 46739 21/50 current_auc = 0.45000000000000007
User 46739 AUC after training: 0.45000000000000007
User 46739 does not improve AUC. Reverting changes.
Training on augumented user 114004 22/50 current_auc = 0.45000000000000007
User 114004 AUC after training: 0.45000000000000007
User 114004 does not improve AUC. Reverting changes.
Training on augumented user 12655 23/50 current_auc = 0.45000000000000007
User 12655 AUC after training: 0.45000000000000007
User 12655 does not improve AUC. Reverting changes.
Training on augumented user 77390 24/50 current_auc = 0.45000000000000007
User 77390 AUC after training: 0.45000000000000007
User 77390 does not improve AUC. Reverting changes.
Training on augumented user 31988 25/50 current_auc = 0.45000000000000007
User 31988 AUC after training: 0.45000000000000007
User 31988 does not improve AUC. Reverting changes.
Training on augumented user 102113 26/50 current_auc = 0.45000000000000007
User 102113 AUC after training: 0.45000000000000007
User 102113 does not improve AUC. Reverting changes.
Training on augumented user 17446 27/50 current_auc = 0.45000000000000007
User 17446 AUC after training: 0.45000000000000007
User 17446 does not improve AUC. Reverting changes.
Training on augumented user 111534 28/50 current_auc = 0.45000000000000007
User 111534 AUC after training: 0.45000000000000007
User 111534 does not improve AUC. Reverting changes.
Training on augumented user 136295 29/50 current_auc = 0.45000000000000007
User 136295 AUC after training: 0.45000000000000007
User 136295 does not improve AUC. Reverting changes.
Training on augumented user 28921 30/50 current_auc = 0.45000000000000007
User 28921 AUC after training: 0.45000000000000007
User 28921 does not improve AUC. Reverting changes.
Training on augumented user 22422 31/50 current_auc = 0.45000000000000007
User 22422 AUC after training: 0.45000000000000007
User 22422 does not improve AUC. Reverting changes.
Training on augumented user 77110 32/50 current_auc = 0.45000000000000007
User 77110 AUC after training: 0.45000000000000007
User 77110 does not improve AUC. Reverting changes.
Training on augumented user 15536 33/50 current_auc = 0.45000000000000007
User 15536 AUC after training: 0.45000000000000007
User 15536 does not improve AUC. Reverting changes.
Training on augumented user 130336 34/50 current_auc = 0.45000000000000007
User 130336 AUC after training: 0.45000000000000007
User 130336 does not improve AUC. Reverting changes.
Training on augumented user 103123 35/50 current_auc = 0.45000000000000007
User 103123 AUC after training: 0.45000000000000007
User 103123 does not improve AUC. Reverting changes.
Training on augumented user 73728 36/50 current_auc = 0.45000000000000007
User 73728 AUC after training: 0.45000000000000007
User 73728 does not improve AUC. Reverting changes.
Training on augumented user 126291 37/50 current_auc = 0.45000000000000007
User 126291 AUC after training: 0.45000000000000007
User 126291 does not improve AUC. Reverting changes.
Training on augumented user 114804 38/50 current_auc = 0.45000000000000007
User 114804 AUC after training: 0.45000000000000007
User 114804 does not improve AUC. Reverting changes.
Training on augumented user 129038 39/50 current_auc = 0.45000000000000007
User 129038 AUC after training: 0.45000000000000007
User 129038 does not improve AUC. Reverting changes.
Training on augumented user 8381 40/50 current_auc = 0.45000000000000007
User 8381 AUC after training: 0.45000000000000007
User 8381 does not improve AUC. Reverting changes.
Training on augumented user 92102 41/50 current_auc = 0.45000000000000007
User 92102 AUC after training: 0.45000000000000007
User 92102 does not improve AUC. Reverting changes.
Training on augumented user 26639 42/50 current_auc = 0.45000000000000007
User 26639 AUC after training: 0.45000000000000007
User 26639 does not improve AUC. Reverting changes.
Training on augumented user 66563 43/50 current_auc = 0.45000000000000007
User 66563 AUC after training: 0.45000000000000007
User 66563 does not improve AUC. Reverting changes.
Training on augumented user 113650 44/50 current_auc = 0.45000000000000007
User 113650 AUC after training: 0.45000000000000007
User 113650 does not improve AUC. Reverting changes.
Training on augumented user 118427 45/50 current_auc = 0.45000000000000007
User 118427 AUC after training: 0.45000000000000007
User 118427 does not improve AUC. Reverting changes.
Training on augumented user 18609 46/50 current_auc = 0.45000000000000007
User 18609 AUC after training: 0.45000000000000007
User 18609 does not improve AUC. Reverting changes.
Training on augumented user 31293 47/50 current_auc = 0.45000000000000007
User 31293 AUC after training: 0.45000000000000007
User 31293 does not improve AUC. Reverting changes.
Training on augumented user 49114 48/50 current_auc = 0.45000000000000007
User 49114 AUC after training: 0.45000000000000007
User 49114 does not improve AUC. Reverting changes.
Training on augumented user 46245 49/50 current_auc = 0.45000000000000007
User 46245 AUC after training: 0.45000000000000007
User 46245 does not improve AUC. Reverting changes.
[2024-12-02 19:23:14.968658] start test user 18115 194/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:15.387833] start test user 18115 194/568 recall augumented users by random, augumented_users = [41513, 65069, 127764, 99301, 104736, 70974, 135664, 50383, 96486, 3923, 1814, 104083, 33690, 117823, 76946, 51263, 128581, 125361, 60516, 112287, 117501, 137525, 38941, 124166, 82252, 112791, 40083, 1859, 110157, 44397, 59632, 11393, 132017, 56429, 73608, 125844, 78395, 7444, 101720, 101438, 93868, 128227, 108182, 26389, 97905, 54999, 118534, 47650, 80354, 129624]
[2024-12-02 19:23:15.403789] user = 18115 Cloud 194/568
[2024-12-02 19:23:15.448511] user = 18115 Local 194/568
[2024-12-02 19:23:15.594024] user = 18115 Local+ 194/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:17.783588] user = 18115 MPDA- 194/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5971551261406334
Training on augumented user 41513 0/50 current_auc = 0.5971551261406334
User 41513 AUC after training: 0.5974086002266357
User 41513 improves AUC. Keeping the model.
Training on augumented user 65069 1/50 current_auc = 0.5974086002266357
User 65069 AUC after training: 0.5971700363809865
User 65069 does not improve AUC. Reverting changes.
Training on augumented user 127764 2/50 current_auc = 0.5974086002266357
User 127764 AUC after training: 0.5979155483986403
User 127764 improves AUC. Keeping the model.
Training on augumented user 99301 3/50 current_auc = 0.5979155483986403
User 99301 AUC after training: 0.5982137532057017
User 99301 improves AUC. Keeping the model.
Training on augumented user 104736 4/50 current_auc = 0.5982137532057017
User 104736 AUC after training: 0.5986759706566469
User 104736 improves AUC. Keeping the model.
Training on augumented user 70974 5/50 current_auc = 0.5986759706566469
User 70974 AUC after training: 0.5980199200811117
User 70974 does not improve AUC. Reverting changes.
Training on augumented user 135664 6/50 current_auc = 0.5986759706566469
User 135664 AUC after training: 0.5984075863302917
User 135664 does not improve AUC. Reverting changes.
Training on augumented user 50383 7/50 current_auc = 0.5986759706566469
User 50383 AUC after training: 0.5989145345022961
User 50383 improves AUC. Keeping the model.
Training on augumented user 96486 8/50 current_auc = 0.5989145345022961
User 96486 AUC after training: 0.5989890857040616
User 96486 improves AUC. Keeping the model.
Training on augumented user 3923 9/50 current_auc = 0.5989890857040616
User 3923 AUC after training: 0.5991381881075923
User 3923 improves AUC. Keeping the model.
Training on augumented user 1814 10/50 current_auc = 0.5991381881075923
User 1814 AUC after training: 0.5985865092145286
User 1814 does not improve AUC. Reverting changes.
Training on augumented user 104083 11/50 current_auc = 0.5991381881075923
User 104083 AUC after training: 0.5982212083258782
User 104083 does not improve AUC. Reverting changes.
Training on augumented user 33690 12/50 current_auc = 0.5991381881075923
User 33690 AUC after training: 0.5981839327249955
User 33690 does not improve AUC. Reverting changes.
Training on augumented user 117823 13/50 current_auc = 0.5991381881075923
User 117823 AUC after training: 0.5991083676268862
User 117823 does not improve AUC. Reverting changes.
Training on augumented user 76946 14/50 current_auc = 0.5991381881075923
User 76946 AUC after training: 0.5983628556092324
User 76946 does not improve AUC. Reverting changes.
Training on augumented user 51263 15/50 current_auc = 0.5991381881075923
User 51263 AUC after training: 0.598467227291704
User 51263 does not improve AUC. Reverting changes.
Training on augumented user 128581 16/50 current_auc = 0.5991381881075923
User 128581 AUC after training: 0.5960964990755651
User 128581 does not improve AUC. Reverting changes.
Training on augumented user 125361 17/50 current_auc = 0.5991381881075923
User 125361 AUC after training: 0.598288304407467
User 125361 does not improve AUC. Reverting changes.
Training on augumented user 60516 18/50 current_auc = 0.5991381881075923
User 60516 AUC after training: 0.5994513031550069
User 60516 improves AUC. Keeping the model.
Training on augumented user 112287 19/50 current_auc = 0.5994513031550069
User 112287 AUC after training: 0.5990561817856503
User 112287 does not improve AUC. Reverting changes.
Training on augumented user 117501 20/50 current_auc = 0.5994513031550069
User 117501 AUC after training: 0.5991083676268861
User 117501 does not improve AUC. Reverting changes.
Training on augumented user 137525 21/50 current_auc = 0.5994513031550069
User 137525 AUC after training: 0.5983330351285263
User 137525 does not improve AUC. Reverting changes.
Training on augumented user 38941 22/50 current_auc = 0.5994513031550069
User 38941 AUC after training: 0.5993022007514761
User 38941 does not improve AUC. Reverting changes.
Training on augumented user 124166 23/50 current_auc = 0.5994513031550069
User 124166 AUC after training: 0.599063636905827
User 124166 does not improve AUC. Reverting changes.
Training on augumented user 82252 24/50 current_auc = 0.5994513031550069
User 82252 AUC after training: 0.5990487266654738
User 82252 does not improve AUC. Reverting changes.
Training on augumented user 112791 25/50 current_auc = 0.5994513031550069
User 112791 AUC after training: 0.5995854953181845
User 112791 improves AUC. Keeping the model.
Training on augumented user 40083 26/50 current_auc = 0.5995854953181845
User 40083 AUC after training: 0.5995109441164191
User 40083 does not improve AUC. Reverting changes.
Training on augumented user 1859 27/50 current_auc = 0.5995854953181845
User 1859 AUC after training: 0.5989741754637086
User 1859 does not improve AUC. Reverting changes.
Training on augumented user 110157 28/50 current_auc = 0.5995854953181845
User 110157 AUC after training: 0.5990487266654738
User 110157 does not improve AUC. Reverting changes.
Training on augumented user 44397 29/50 current_auc = 0.5995854953181845
User 44397 AUC after training: 0.5995407645971254
User 44397 does not improve AUC. Reverting changes.
Training on augumented user 59632 30/50 current_auc = 0.5995854953181845
User 59632 AUC after training: 0.5996749567603029
User 59632 improves AUC. Keeping the model.
Training on augumented user 11393 31/50 current_auc = 0.5996749567603029
User 11393 AUC after training: 0.6005695711814875
User 11393 improves AUC. Keeping the model.
Training on augumented user 132017 32/50 current_auc = 0.6005695711814875
User 132017 AUC after training: 0.6005397507007814
User 132017 does not improve AUC. Reverting changes.
Training on augumented user 56429 33/50 current_auc = 0.6005695711814875
User 56429 AUC after training: 0.6005546609411343
User 56429 does not improve AUC. Reverting changes.
Training on augumented user 73608 34/50 current_auc = 0.6005695711814875
User 73608 AUC after training: 0.6004651994990159
User 73608 does not improve AUC. Reverting changes.
Training on augumented user 125844 35/50 current_auc = 0.6005695711814875
User 125844 AUC after training: 0.6004055585376036
User 125844 does not improve AUC. Reverting changes.
Training on augumented user 78395 36/50 current_auc = 0.6005695711814875
User 78395 AUC after training: 0.600465199499016
User 78395 does not improve AUC. Reverting changes.
Training on augumented user 7444 37/50 current_auc = 0.6005695711814875
User 7444 AUC after training: 0.600673942863959
User 7444 improves AUC. Keeping the model.
Training on augumented user 101720 38/50 current_auc = 0.600673942863959
User 101720 AUC after training: 0.6006888531043121
User 101720 improves AUC. Keeping the model.
Training on augumented user 101438 39/50 current_auc = 0.6006888531043121
User 101438 AUC after training: 0.6014492753623188
User 101438 improves AUC. Keeping the model.
Training on augumented user 93868 40/50 current_auc = 0.6014492753623188
User 93868 AUC after training: 0.6015089163237312
User 93868 improves AUC. Keeping the model.
Training on augumented user 128227 41/50 current_auc = 0.6015089163237312
User 128227 AUC after training: 0.6003310073358382
User 128227 does not improve AUC. Reverting changes.
Training on augumented user 108182 42/50 current_auc = 0.6015089163237312
User 108182 AUC after training: 0.6013747241605535
User 108182 does not improve AUC. Reverting changes.
Training on augumented user 26389 43/50 current_auc = 0.6015089163237312
User 26389 AUC after training: 0.601479095843025
User 26389 does not improve AUC. Reverting changes.
Training on augumented user 97905 44/50 current_auc = 0.6015089163237312
User 97905 AUC after training: 0.6015983777658496
User 97905 improves AUC. Keeping the model.
Training on augumented user 54999 45/50 current_auc = 0.6015983777658496
User 54999 AUC after training: 0.6015536470447904
User 54999 does not improve AUC. Reverting changes.
Training on augumented user 118534 46/50 current_auc = 0.6015983777658496
User 118534 AUC after training: 0.6003906482972505
User 118534 does not improve AUC. Reverting changes.
Training on augumented user 47650 47/50 current_auc = 0.6015983777658496
User 47650 AUC after training: 0.601494006083378
User 47650 does not improve AUC. Reverting changes.
Training on augumented user 80354 48/50 current_auc = 0.6015983777658496
User 80354 AUC after training: 0.6018369416114987
User 80354 improves AUC. Keeping the model.
Training on augumented user 129624 49/50 current_auc = 0.6018369416114987
User 129624 AUC after training: 0.6009572374306674
User 129624 does not improve AUC. Reverting changes.
[2024-12-02 19:23:44.573313] start test user 18122 195/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:45.188371] start test user 18122 195/568 recall augumented users by random, augumented_users = [35788, 106553, 131410, 102153, 97597, 15709, 82956, 90356, 26519, 34379, 138253, 57853, 106139, 56555, 92121, 35861, 92232, 10054, 31382, 23687, 59803, 72719, 84282, 103824, 7701, 19121, 43513, 115881, 66471, 125362, 60290, 119243, 32121, 100649, 113995, 131402, 57027, 137970, 56993, 125946, 113221, 41261, 25678, 17003, 75676, 90900, 38614, 15155, 36721, 44123]
[2024-12-02 19:23:45.216536] user = 18122 Cloud 195/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:23:45.223130] user = 18122 Local 195/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:23:45.271566] user = 18122 Local+ 195/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:23:47.325807] user = 18122 MPDA- 195/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 35788 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35788 AUC after training: 0.5
User 35788 does not improve AUC. Reverting changes.
Training on augumented user 106553 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106553 AUC after training: 0.5
User 106553 does not improve AUC. Reverting changes.
Training on augumented user 131410 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131410 AUC after training: 0.5
User 131410 does not improve AUC. Reverting changes.
Training on augumented user 102153 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102153 AUC after training: 0.5
User 102153 does not improve AUC. Reverting changes.
Training on augumented user 97597 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97597 AUC after training: 0.5
User 97597 does not improve AUC. Reverting changes.
Training on augumented user 15709 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15709 AUC after training: 0.5
User 15709 does not improve AUC. Reverting changes.
Training on augumented user 82956 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82956 AUC after training: 0.5
User 82956 does not improve AUC. Reverting changes.
Training on augumented user 90356 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90356 AUC after training: 0.5
User 90356 does not improve AUC. Reverting changes.
Training on augumented user 26519 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26519 AUC after training: 0.5
User 26519 does not improve AUC. Reverting changes.
Training on augumented user 34379 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34379 AUC after training: 0.5
User 34379 does not improve AUC. Reverting changes.
Training on augumented user 138253 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138253 AUC after training: 0.5
User 138253 does not improve AUC. Reverting changes.
Training on augumented user 57853 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57853 AUC after training: 0.5
User 57853 does not improve AUC. Reverting changes.
Training on augumented user 106139 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106139 AUC after training: 0.5
User 106139 does not improve AUC. Reverting changes.
Training on augumented user 56555 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56555 AUC after training: 0.5
User 56555 does not improve AUC. Reverting changes.
Training on augumented user 92121 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92121 AUC after training: 0.5
User 92121 does not improve AUC. Reverting changes.
Training on augumented user 35861 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35861 AUC after training: 0.5
User 35861 does not improve AUC. Reverting changes.
Training on augumented user 92232 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92232 AUC after training: 0.5
User 92232 does not improve AUC. Reverting changes.
Training on augumented user 10054 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10054 AUC after training: 0.5
User 10054 does not improve AUC. Reverting changes.
Training on augumented user 31382 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31382 AUC after training: 0.5
User 31382 does not improve AUC. Reverting changes.
Training on augumented user 23687 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23687 AUC after training: 0.5
User 23687 does not improve AUC. Reverting changes.
Training on augumented user 59803 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59803 AUC after training: 0.5
User 59803 does not improve AUC. Reverting changes.
Training on augumented user 72719 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72719 AUC after training: 0.5
User 72719 does not improve AUC. Reverting changes.
Training on augumented user 84282 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84282 AUC after training: 0.5
User 84282 does not improve AUC. Reverting changes.
Training on augumented user 103824 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103824 AUC after training: 0.5
User 103824 does not improve AUC. Reverting changes.
Training on augumented user 7701 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7701 AUC after training: 0.5
User 7701 does not improve AUC. Reverting changes.
Training on augumented user 19121 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19121 AUC after training: 0.5
User 19121 does not improve AUC. Reverting changes.
Training on augumented user 43513 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43513 AUC after training: 0.5
User 43513 does not improve AUC. Reverting changes.
Training on augumented user 115881 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115881 AUC after training: 0.5
User 115881 does not improve AUC. Reverting changes.
Training on augumented user 66471 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66471 AUC after training: 0.5
User 66471 does not improve AUC. Reverting changes.
Training on augumented user 125362 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125362 AUC after training: 0.5
User 125362 does not improve AUC. Reverting changes.
Training on augumented user 60290 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60290 AUC after training: 0.5
User 60290 does not improve AUC. Reverting changes.
Training on augumented user 119243 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119243 AUC after training: 0.5
User 119243 does not improve AUC. Reverting changes.
Training on augumented user 32121 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32121 AUC after training: 0.5
User 32121 does not improve AUC. Reverting changes.
Training on augumented user 100649 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100649 AUC after training: 0.5
User 100649 does not improve AUC. Reverting changes.
Training on augumented user 113995 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113995 AUC after training: 0.5
User 113995 does not improve AUC. Reverting changes.
Training on augumented user 131402 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131402 AUC after training: 0.5
User 131402 does not improve AUC. Reverting changes.
Training on augumented user 57027 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57027 AUC after training: 0.5
User 57027 does not improve AUC. Reverting changes.
Training on augumented user 137970 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137970 AUC after training: 0.5
User 137970 does not improve AUC. Reverting changes.
Training on augumented user 56993 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56993 AUC after training: 0.5
User 56993 does not improve AUC. Reverting changes.
Training on augumented user 125946 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125946 AUC after training: 0.5
User 125946 does not improve AUC. Reverting changes.
Training on augumented user 113221 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113221 AUC after training: 0.5
User 113221 does not improve AUC. Reverting changes.
Training on augumented user 41261 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41261 AUC after training: 0.5
User 41261 does not improve AUC. Reverting changes.
Training on augumented user 25678 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25678 AUC after training: 0.5
User 25678 does not improve AUC. Reverting changes.
Training on augumented user 17003 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17003 AUC after training: 0.5
User 17003 does not improve AUC. Reverting changes.
Training on augumented user 75676 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75676 AUC after training: 0.5
User 75676 does not improve AUC. Reverting changes.
Training on augumented user 90900 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90900 AUC after training: 0.5
User 90900 does not improve AUC. Reverting changes.
Training on augumented user 38614 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38614 AUC after training: 0.5
User 38614 does not improve AUC. Reverting changes.
Training on augumented user 15155 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15155 AUC after training: 0.5
User 15155 does not improve AUC. Reverting changes.
Training on augumented user 36721 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36721 AUC after training: 0.5
User 36721 does not improve AUC. Reverting changes.
Training on augumented user 44123 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44123 AUC after training: 0.5
User 44123 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:24:11.435109] start test user 18142 196/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:11.847399] start test user 18142 196/568 recall augumented users by random, augumented_users = [5708, 7259, 34684, 113867, 108986, 20465, 129218, 88083, 112781, 122771, 97375, 40804, 30392, 112401, 66565, 53, 30942, 85646, 10206, 65896, 89071, 19857, 134598, 62151, 85718, 120032, 90681, 21138, 6138, 39139, 65162, 129171, 88550, 6299, 121957, 97535, 38560, 129019, 14897, 120045, 54203, 76521, 24932, 55783, 73255, 102722, 111235, 109954, 53662, 107571]
[2024-12-02 19:24:11.862662] user = 18142 Cloud 196/568
[2024-12-02 19:24:11.880464] user = 18142 Local 196/568
[2024-12-02 19:24:11.917667] user = 18142 Local+ 196/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:13.746432] user = 18142 MPDA- 196/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.606468023255814
Training on augumented user 5708 0/50 current_auc = 0.606468023255814
User 5708 AUC after training: 0.6035610465116279
User 5708 does not improve AUC. Reverting changes.
Training on augumented user 7259 1/50 current_auc = 0.606468023255814
User 7259 AUC after training: 0.6071947674418604
User 7259 improves AUC. Keeping the model.
Training on augumented user 34684 2/50 current_auc = 0.6071947674418604
User 34684 AUC after training: 0.609375
User 34684 improves AUC. Keeping the model.
Training on augumented user 113867 3/50 current_auc = 0.609375
User 113867 AUC after training: 0.6082848837209303
User 113867 does not improve AUC. Reverting changes.
Training on augumented user 108986 4/50 current_auc = 0.609375
User 108986 AUC after training: 0.6079215116279069
User 108986 does not improve AUC. Reverting changes.
Training on augumented user 20465 5/50 current_auc = 0.609375
User 20465 AUC after training: 0.609375
User 20465 does not improve AUC. Reverting changes.
Training on augumented user 129218 6/50 current_auc = 0.609375
User 129218 AUC after training: 0.6068313953488372
User 129218 does not improve AUC. Reverting changes.
Training on augumented user 88083 7/50 current_auc = 0.609375
User 88083 AUC after training: 0.6079215116279069
User 88083 does not improve AUC. Reverting changes.
Training on augumented user 112781 8/50 current_auc = 0.609375
User 112781 AUC after training: 0.6101017441860466
User 112781 improves AUC. Keeping the model.
Training on augumented user 122771 9/50 current_auc = 0.6101017441860466
User 122771 AUC after training: 0.607921511627907
User 122771 does not improve AUC. Reverting changes.
Training on augumented user 97375 10/50 current_auc = 0.6101017441860466
User 97375 AUC after training: 0.609375
User 97375 does not improve AUC. Reverting changes.
Training on augumented user 40804 11/50 current_auc = 0.6101017441860466
User 40804 AUC after training: 0.6082848837209303
User 40804 does not improve AUC. Reverting changes.
Training on augumented user 30392 12/50 current_auc = 0.6101017441860466
User 30392 AUC after training: 0.6068313953488372
User 30392 does not improve AUC. Reverting changes.
Training on augumented user 112401 13/50 current_auc = 0.6101017441860466
User 112401 AUC after training: 0.6068313953488371
User 112401 does not improve AUC. Reverting changes.
Training on augumented user 66565 14/50 current_auc = 0.6101017441860466
User 66565 AUC after training: 0.609375
User 66565 does not improve AUC. Reverting changes.
Training on augumented user 53 15/50 current_auc = 0.6101017441860466
User 53 AUC after training: 0.6090116279069768
User 53 does not improve AUC. Reverting changes.
Training on augumented user 30942 16/50 current_auc = 0.6101017441860466
User 30942 AUC after training: 0.6061046511627908
User 30942 does not improve AUC. Reverting changes.
Training on augumented user 85646 17/50 current_auc = 0.6101017441860466
User 85646 AUC after training: 0.6068313953488372
User 85646 does not improve AUC. Reverting changes.
Training on augumented user 10206 18/50 current_auc = 0.6101017441860466
User 10206 AUC after training: 0.6061046511627907
User 10206 does not improve AUC. Reverting changes.
Training on augumented user 65896 19/50 current_auc = 0.6101017441860466
User 65896 AUC after training: 0.6075581395348837
User 65896 does not improve AUC. Reverting changes.
Training on augumented user 89071 20/50 current_auc = 0.6101017441860466
User 89071 AUC after training: 0.6068313953488372
User 89071 does not improve AUC. Reverting changes.
Training on augumented user 19857 21/50 current_auc = 0.6101017441860466
User 19857 AUC after training: 0.6082848837209303
User 19857 does not improve AUC. Reverting changes.
Training on augumented user 134598 22/50 current_auc = 0.6101017441860466
User 134598 AUC after training: 0.6061046511627907
User 134598 does not improve AUC. Reverting changes.
Training on augumented user 62151 23/50 current_auc = 0.6101017441860466
User 62151 AUC after training: 0.6097383720930232
User 62151 does not improve AUC. Reverting changes.
Training on augumented user 85718 24/50 current_auc = 0.6101017441860466
User 85718 AUC after training: 0.609375
User 85718 does not improve AUC. Reverting changes.
Training on augumented user 120032 25/50 current_auc = 0.6101017441860466
User 120032 AUC after training: 0.6061046511627906
User 120032 does not improve AUC. Reverting changes.
Training on augumented user 90681 26/50 current_auc = 0.6101017441860466
User 90681 AUC after training: 0.609375
User 90681 does not improve AUC. Reverting changes.
Training on augumented user 21138 27/50 current_auc = 0.6101017441860466
User 21138 AUC after training: 0.609375
User 21138 does not improve AUC. Reverting changes.
Training on augumented user 6138 28/50 current_auc = 0.6101017441860466
User 6138 AUC after training: 0.6082848837209303
User 6138 does not improve AUC. Reverting changes.
Training on augumented user 39139 29/50 current_auc = 0.6101017441860466
User 39139 AUC after training: 0.609375
User 39139 does not improve AUC. Reverting changes.
Training on augumented user 65162 30/50 current_auc = 0.6101017441860466
User 65162 AUC after training: 0.6082848837209303
User 65162 does not improve AUC. Reverting changes.
Training on augumented user 129171 31/50 current_auc = 0.6101017441860466
User 129171 AUC after training: 0.6075581395348837
User 129171 does not improve AUC. Reverting changes.
Training on augumented user 88550 32/50 current_auc = 0.6101017441860466
User 88550 AUC after training: 0.609375
User 88550 does not improve AUC. Reverting changes.
Training on augumented user 6299 33/50 current_auc = 0.6101017441860466
User 6299 AUC after training: 0.6097383720930232
User 6299 does not improve AUC. Reverting changes.
Training on augumented user 121957 34/50 current_auc = 0.6101017441860466
User 121957 AUC after training: 0.607921511627907
User 121957 does not improve AUC. Reverting changes.
Training on augumented user 97535 35/50 current_auc = 0.6101017441860466
User 97535 AUC after training: 0.609375
User 97535 does not improve AUC. Reverting changes.
Training on augumented user 38560 36/50 current_auc = 0.6101017441860466
User 38560 AUC after training: 0.6086482558139534
User 38560 does not improve AUC. Reverting changes.
Training on augumented user 129019 37/50 current_auc = 0.6101017441860466
User 129019 AUC after training: 0.6101017441860466
User 129019 does not improve AUC. Reverting changes.
Training on augumented user 14897 38/50 current_auc = 0.6101017441860466
User 14897 AUC after training: 0.6075581395348837
User 14897 does not improve AUC. Reverting changes.
Training on augumented user 120045 39/50 current_auc = 0.6101017441860466
User 120045 AUC after training: 0.6075581395348838
User 120045 does not improve AUC. Reverting changes.
Training on augumented user 54203 40/50 current_auc = 0.6101017441860466
User 54203 AUC after training: 0.6097383720930232
User 54203 does not improve AUC. Reverting changes.
Training on augumented user 76521 41/50 current_auc = 0.6101017441860466
User 76521 AUC after training: 0.6068313953488371
User 76521 does not improve AUC. Reverting changes.
Training on augumented user 24932 42/50 current_auc = 0.6101017441860466
User 24932 AUC after training: 0.6082848837209303
User 24932 does not improve AUC. Reverting changes.
Training on augumented user 55783 43/50 current_auc = 0.6101017441860466
User 55783 AUC after training: 0.609375
User 55783 does not improve AUC. Reverting changes.
Training on augumented user 73255 44/50 current_auc = 0.6101017441860466
User 73255 AUC after training: 0.609375
User 73255 does not improve AUC. Reverting changes.
Training on augumented user 102722 45/50 current_auc = 0.6101017441860466
User 102722 AUC after training: 0.6053779069767442
User 102722 does not improve AUC. Reverting changes.
Training on augumented user 111235 46/50 current_auc = 0.6101017441860466
User 111235 AUC after training: 0.6035610465116279
User 111235 does not improve AUC. Reverting changes.
Training on augumented user 109954 47/50 current_auc = 0.6101017441860466
User 109954 AUC after training: 0.6061046511627907
User 109954 does not improve AUC. Reverting changes.
Training on augumented user 53662 48/50 current_auc = 0.6101017441860466
User 53662 AUC after training: 0.6101017441860466
User 53662 does not improve AUC. Reverting changes.
Training on augumented user 107571 49/50 current_auc = 0.6101017441860466
User 107571 AUC after training: 0.6061046511627907
User 107571 does not improve AUC. Reverting changes.
[2024-12-02 19:24:46.325150] start test user 18145 197/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:47.000538] start test user 18145 197/568 recall augumented users by random, augumented_users = [99367, 159, 89026, 57968, 6153, 138105, 66383, 5345, 133999, 39367, 25312, 34271, 130393, 108372, 4556, 94068, 45234, 35958, 77264, 99565, 69053, 9850, 108999, 21960, 134376, 39176, 124278, 85782, 94541, 42479, 74717, 89892, 13302, 32958, 17165, 14547, 23605, 21843, 12538, 35017, 28125, 46441, 81947, 66368, 38002, 135493, 45987, 79006, 102315, 10209]
[2024-12-02 19:24:47.015638] user = 18145 Cloud 197/568
[2024-12-02 19:24:47.029733] user = 18145 Local 197/568
[2024-12-02 19:24:47.110910] user = 18145 Local+ 197/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:49.822269] user = 18145 MPDA- 197/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8075768942235558
Training on augumented user 99367 0/50 current_auc = 0.8075768942235558
User 99367 AUC after training: 0.8075768942235558
User 99367 does not improve AUC. Reverting changes.
Training on augumented user 159 1/50 current_auc = 0.8075768942235558
User 159 AUC after training: 0.8072018004501125
User 159 does not improve AUC. Reverting changes.
Training on augumented user 89026 2/50 current_auc = 0.8075768942235558
User 89026 AUC after training: 0.808702175543886
User 89026 improves AUC. Keeping the model.
Training on augumented user 57968 3/50 current_auc = 0.808702175543886
User 57968 AUC after training: 0.8075768942235559
User 57968 does not improve AUC. Reverting changes.
Training on augumented user 6153 4/50 current_auc = 0.808702175543886
User 6153 AUC after training: 0.8079519879969993
User 6153 does not improve AUC. Reverting changes.
Training on augumented user 138105 5/50 current_auc = 0.808702175543886
User 138105 AUC after training: 0.8083270817704427
User 138105 does not improve AUC. Reverting changes.
Training on augumented user 66383 6/50 current_auc = 0.808702175543886
User 66383 AUC after training: 0.8079519879969992
User 66383 does not improve AUC. Reverting changes.
Training on augumented user 5345 7/50 current_auc = 0.808702175543886
User 5345 AUC after training: 0.8079519879969992
User 5345 does not improve AUC. Reverting changes.
Training on augumented user 133999 8/50 current_auc = 0.808702175543886
User 133999 AUC after training: 0.808702175543886
User 133999 does not improve AUC. Reverting changes.
Training on augumented user 39367 9/50 current_auc = 0.808702175543886
User 39367 AUC after training: 0.8083270817704427
User 39367 does not improve AUC. Reverting changes.
Training on augumented user 25312 10/50 current_auc = 0.808702175543886
User 25312 AUC after training: 0.8087021755438859
User 25312 does not improve AUC. Reverting changes.
Training on augumented user 34271 11/50 current_auc = 0.808702175543886
User 34271 AUC after training: 0.8075768942235558
User 34271 does not improve AUC. Reverting changes.
Training on augumented user 130393 12/50 current_auc = 0.808702175543886
User 130393 AUC after training: 0.8072018004501126
User 130393 does not improve AUC. Reverting changes.
Training on augumented user 108372 13/50 current_auc = 0.808702175543886
User 108372 AUC after training: 0.8083270817704427
User 108372 does not improve AUC. Reverting changes.
Training on augumented user 4556 14/50 current_auc = 0.808702175543886
User 4556 AUC after training: 0.8079519879969992
User 4556 does not improve AUC. Reverting changes.
Training on augumented user 94068 15/50 current_auc = 0.808702175543886
User 94068 AUC after training: 0.8075768942235559
User 94068 does not improve AUC. Reverting changes.
Training on augumented user 45234 16/50 current_auc = 0.808702175543886
User 45234 AUC after training: 0.8079519879969993
User 45234 does not improve AUC. Reverting changes.
Training on augumented user 35958 17/50 current_auc = 0.808702175543886
User 35958 AUC after training: 0.8083270817704425
User 35958 does not improve AUC. Reverting changes.
Training on augumented user 77264 18/50 current_auc = 0.808702175543886
User 77264 AUC after training: 0.8079519879969993
User 77264 does not improve AUC. Reverting changes.
Training on augumented user 99565 19/50 current_auc = 0.808702175543886
User 99565 AUC after training: 0.8068267066766692
User 99565 does not improve AUC. Reverting changes.
Training on augumented user 69053 20/50 current_auc = 0.808702175543886
User 69053 AUC after training: 0.8083270817704427
User 69053 does not improve AUC. Reverting changes.
Training on augumented user 9850 21/50 current_auc = 0.808702175543886
User 9850 AUC after training: 0.8079519879969992
User 9850 does not improve AUC. Reverting changes.
Training on augumented user 108999 22/50 current_auc = 0.808702175543886
User 108999 AUC after training: 0.8094523630907727
User 108999 improves AUC. Keeping the model.
Training on augumented user 21960 23/50 current_auc = 0.8094523630907727
User 21960 AUC after training: 0.8090772693173294
User 21960 does not improve AUC. Reverting changes.
Training on augumented user 134376 24/50 current_auc = 0.8094523630907727
User 134376 AUC after training: 0.8090772693173294
User 134376 does not improve AUC. Reverting changes.
Training on augumented user 39176 25/50 current_auc = 0.8094523630907727
User 39176 AUC after training: 0.8087021755438859
User 39176 does not improve AUC. Reverting changes.
Training on augumented user 124278 26/50 current_auc = 0.8094523630907727
User 124278 AUC after training: 0.8064516129032259
User 124278 does not improve AUC. Reverting changes.
Training on augumented user 85782 27/50 current_auc = 0.8094523630907727
User 85782 AUC after training: 0.8072018004501125
User 85782 does not improve AUC. Reverting changes.
Training on augumented user 94541 28/50 current_auc = 0.8094523630907727
User 94541 AUC after training: 0.8060765191297825
User 94541 does not improve AUC. Reverting changes.
Training on augumented user 42479 29/50 current_auc = 0.8094523630907727
User 42479 AUC after training: 0.8083270817704427
User 42479 does not improve AUC. Reverting changes.
Training on augumented user 74717 30/50 current_auc = 0.8094523630907727
User 74717 AUC after training: 0.8090772693173294
User 74717 does not improve AUC. Reverting changes.
Training on augumented user 89892 31/50 current_auc = 0.8094523630907727
User 89892 AUC after training: 0.8087021755438859
User 89892 does not improve AUC. Reverting changes.
Training on augumented user 13302 32/50 current_auc = 0.8094523630907727
User 13302 AUC after training: 0.8087021755438859
User 13302 does not improve AUC. Reverting changes.
Training on augumented user 32958 33/50 current_auc = 0.8094523630907727
User 32958 AUC after training: 0.8087021755438859
User 32958 does not improve AUC. Reverting changes.
Training on augumented user 17165 34/50 current_auc = 0.8094523630907727
User 17165 AUC after training: 0.8090772693173294
User 17165 does not improve AUC. Reverting changes.
Training on augumented user 14547 35/50 current_auc = 0.8094523630907727
User 14547 AUC after training: 0.8090772693173294
User 14547 does not improve AUC. Reverting changes.
Training on augumented user 23605 36/50 current_auc = 0.8094523630907727
User 23605 AUC after training: 0.8090772693173294
User 23605 does not improve AUC. Reverting changes.
Training on augumented user 21843 37/50 current_auc = 0.8094523630907727
User 21843 AUC after training: 0.808702175543886
User 21843 does not improve AUC. Reverting changes.
Training on augumented user 12538 38/50 current_auc = 0.8094523630907727
User 12538 AUC after training: 0.8090772693173294
User 12538 does not improve AUC. Reverting changes.
Training on augumented user 35017 39/50 current_auc = 0.8094523630907727
User 35017 AUC after training: 0.8094523630907727
User 35017 does not improve AUC. Reverting changes.
Training on augumented user 28125 40/50 current_auc = 0.8094523630907727
User 28125 AUC after training: 0.8090772693173294
User 28125 does not improve AUC. Reverting changes.
Training on augumented user 46441 41/50 current_auc = 0.8094523630907727
User 46441 AUC after training: 0.8087021755438859
User 46441 does not improve AUC. Reverting changes.
Training on augumented user 81947 42/50 current_auc = 0.8094523630907727
User 81947 AUC after training: 0.8075768942235559
User 81947 does not improve AUC. Reverting changes.
Training on augumented user 66368 43/50 current_auc = 0.8094523630907727
User 66368 AUC after training: 0.8083270817704425
User 66368 does not improve AUC. Reverting changes.
Training on augumented user 38002 44/50 current_auc = 0.8094523630907727
User 38002 AUC after training: 0.8075768942235559
User 38002 does not improve AUC. Reverting changes.
Training on augumented user 135493 45/50 current_auc = 0.8094523630907727
User 135493 AUC after training: 0.8087021755438859
User 135493 does not improve AUC. Reverting changes.
Training on augumented user 45987 46/50 current_auc = 0.8094523630907727
User 45987 AUC after training: 0.8090772693173294
User 45987 does not improve AUC. Reverting changes.
Training on augumented user 79006 47/50 current_auc = 0.8094523630907727
User 79006 AUC after training: 0.8087021755438859
User 79006 does not improve AUC. Reverting changes.
Training on augumented user 102315 48/50 current_auc = 0.8094523630907727
User 102315 AUC after training: 0.8094523630907727
User 102315 does not improve AUC. Reverting changes.
Training on augumented user 10209 49/50 current_auc = 0.8094523630907727
User 10209 AUC after training: 0.8090772693173294
User 10209 does not improve AUC. Reverting changes.
[2024-12-02 19:25:17.359005] start test user 18149 198/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:17.909590] start test user 18149 198/568 recall augumented users by random, augumented_users = [34819, 20407, 72361, 120823, 13396, 110204, 24633, 92144, 23629, 126083, 72640, 136891, 49293, 61912, 32819, 60717, 15483, 133314, 68754, 107122, 97333, 73859, 33487, 102141, 102686, 37998, 47679, 93745, 17081, 84292, 86683, 99341, 61980, 41568, 86733, 20307, 110740, 135759, 54912, 97040, 34321, 24057, 8948, 123697, 2450, 75058, 27572, 76936, 88489, 89858]
[2024-12-02 19:25:17.926686] user = 18149 Cloud 198/568
[2024-12-02 19:25:17.937162] user = 18149 Local 198/568
[2024-12-02 19:25:17.971951] user = 18149 Local+ 198/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:19.953807] user = 18149 MPDA- 198/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.46153846153846156
Training on augumented user 34819 0/50 current_auc = 0.46153846153846156
User 34819 AUC after training: 0.46153846153846156
User 34819 does not improve AUC. Reverting changes.
Training on augumented user 20407 1/50 current_auc = 0.46153846153846156
User 20407 AUC after training: 0.46153846153846156
User 20407 does not improve AUC. Reverting changes.
Training on augumented user 72361 2/50 current_auc = 0.46153846153846156
User 72361 AUC after training: 0.46153846153846156
User 72361 does not improve AUC. Reverting changes.
Training on augumented user 120823 3/50 current_auc = 0.46153846153846156
User 120823 AUC after training: 0.46153846153846156
User 120823 does not improve AUC. Reverting changes.
Training on augumented user 13396 4/50 current_auc = 0.46153846153846156
User 13396 AUC after training: 0.46153846153846156
User 13396 does not improve AUC. Reverting changes.
Training on augumented user 110204 5/50 current_auc = 0.46153846153846156
User 110204 AUC after training: 0.46153846153846156
User 110204 does not improve AUC. Reverting changes.
Training on augumented user 24633 6/50 current_auc = 0.46153846153846156
User 24633 AUC after training: 0.46153846153846156
User 24633 does not improve AUC. Reverting changes.
Training on augumented user 92144 7/50 current_auc = 0.46153846153846156
User 92144 AUC after training: 0.46153846153846156
User 92144 does not improve AUC. Reverting changes.
Training on augumented user 23629 8/50 current_auc = 0.46153846153846156
User 23629 AUC after training: 0.46153846153846156
User 23629 does not improve AUC. Reverting changes.
Training on augumented user 126083 9/50 current_auc = 0.46153846153846156
User 126083 AUC after training: 0.46153846153846156
User 126083 does not improve AUC. Reverting changes.
Training on augumented user 72640 10/50 current_auc = 0.46153846153846156
User 72640 AUC after training: 0.46153846153846156
User 72640 does not improve AUC. Reverting changes.
Training on augumented user 136891 11/50 current_auc = 0.46153846153846156
User 136891 AUC after training: 0.46153846153846156
User 136891 does not improve AUC. Reverting changes.
Training on augumented user 49293 12/50 current_auc = 0.46153846153846156
User 49293 AUC after training: 0.46153846153846156
User 49293 does not improve AUC. Reverting changes.
Training on augumented user 61912 13/50 current_auc = 0.46153846153846156
User 61912 AUC after training: 0.46153846153846156
User 61912 does not improve AUC. Reverting changes.
Training on augumented user 32819 14/50 current_auc = 0.46153846153846156
User 32819 AUC after training: 0.46153846153846156
User 32819 does not improve AUC. Reverting changes.
Training on augumented user 60717 15/50 current_auc = 0.46153846153846156
User 60717 AUC after training: 0.46153846153846156
User 60717 does not improve AUC. Reverting changes.
Training on augumented user 15483 16/50 current_auc = 0.46153846153846156
User 15483 AUC after training: 0.46153846153846156
User 15483 does not improve AUC. Reverting changes.
Training on augumented user 133314 17/50 current_auc = 0.46153846153846156
User 133314 AUC after training: 0.46153846153846156
User 133314 does not improve AUC. Reverting changes.
Training on augumented user 68754 18/50 current_auc = 0.46153846153846156
User 68754 AUC after training: 0.46153846153846156
User 68754 does not improve AUC. Reverting changes.
Training on augumented user 107122 19/50 current_auc = 0.46153846153846156
User 107122 AUC after training: 0.46153846153846156
User 107122 does not improve AUC. Reverting changes.
Training on augumented user 97333 20/50 current_auc = 0.46153846153846156
User 97333 AUC after training: 0.46153846153846156
User 97333 does not improve AUC. Reverting changes.
Training on augumented user 73859 21/50 current_auc = 0.46153846153846156
User 73859 AUC after training: 0.46153846153846156
User 73859 does not improve AUC. Reverting changes.
Training on augumented user 33487 22/50 current_auc = 0.46153846153846156
User 33487 AUC after training: 0.46153846153846156
User 33487 does not improve AUC. Reverting changes.
Training on augumented user 102141 23/50 current_auc = 0.46153846153846156
User 102141 AUC after training: 0.46153846153846156
User 102141 does not improve AUC. Reverting changes.
Training on augumented user 102686 24/50 current_auc = 0.46153846153846156
User 102686 AUC after training: 0.46153846153846156
User 102686 does not improve AUC. Reverting changes.
Training on augumented user 37998 25/50 current_auc = 0.46153846153846156
User 37998 AUC after training: 0.46153846153846156
User 37998 does not improve AUC. Reverting changes.
Training on augumented user 47679 26/50 current_auc = 0.46153846153846156
User 47679 AUC after training: 0.46153846153846156
User 47679 does not improve AUC. Reverting changes.
Training on augumented user 93745 27/50 current_auc = 0.46153846153846156
User 93745 AUC after training: 0.46153846153846156
User 93745 does not improve AUC. Reverting changes.
Training on augumented user 17081 28/50 current_auc = 0.46153846153846156
User 17081 AUC after training: 0.46153846153846156
User 17081 does not improve AUC. Reverting changes.
Training on augumented user 84292 29/50 current_auc = 0.46153846153846156
User 84292 AUC after training: 0.46153846153846156
User 84292 does not improve AUC. Reverting changes.
Training on augumented user 86683 30/50 current_auc = 0.46153846153846156
User 86683 AUC after training: 0.46153846153846156
User 86683 does not improve AUC. Reverting changes.
Training on augumented user 99341 31/50 current_auc = 0.46153846153846156
User 99341 AUC after training: 0.46153846153846156
User 99341 does not improve AUC. Reverting changes.
Training on augumented user 61980 32/50 current_auc = 0.46153846153846156
User 61980 AUC after training: 0.46153846153846156
User 61980 does not improve AUC. Reverting changes.
Training on augumented user 41568 33/50 current_auc = 0.46153846153846156
User 41568 AUC after training: 0.46153846153846156
User 41568 does not improve AUC. Reverting changes.
Training on augumented user 86733 34/50 current_auc = 0.46153846153846156
User 86733 AUC after training: 0.46153846153846156
User 86733 does not improve AUC. Reverting changes.
Training on augumented user 20307 35/50 current_auc = 0.46153846153846156
User 20307 AUC after training: 0.46153846153846156
User 20307 does not improve AUC. Reverting changes.
Training on augumented user 110740 36/50 current_auc = 0.46153846153846156
User 110740 AUC after training: 0.46153846153846156
User 110740 does not improve AUC. Reverting changes.
Training on augumented user 135759 37/50 current_auc = 0.46153846153846156
User 135759 AUC after training: 0.46153846153846156
User 135759 does not improve AUC. Reverting changes.
Training on augumented user 54912 38/50 current_auc = 0.46153846153846156
User 54912 AUC after training: 0.46153846153846156
User 54912 does not improve AUC. Reverting changes.
Training on augumented user 97040 39/50 current_auc = 0.46153846153846156
User 97040 AUC after training: 0.46153846153846156
User 97040 does not improve AUC. Reverting changes.
Training on augumented user 34321 40/50 current_auc = 0.46153846153846156
User 34321 AUC after training: 0.46153846153846156
User 34321 does not improve AUC. Reverting changes.
Training on augumented user 24057 41/50 current_auc = 0.46153846153846156
User 24057 AUC after training: 0.46153846153846156
User 24057 does not improve AUC. Reverting changes.
Training on augumented user 8948 42/50 current_auc = 0.46153846153846156
User 8948 AUC after training: 0.46153846153846156
User 8948 does not improve AUC. Reverting changes.
Training on augumented user 123697 43/50 current_auc = 0.46153846153846156
User 123697 AUC after training: 0.46153846153846156
User 123697 does not improve AUC. Reverting changes.
Training on augumented user 2450 44/50 current_auc = 0.46153846153846156
User 2450 AUC after training: 0.46153846153846156
User 2450 does not improve AUC. Reverting changes.
Training on augumented user 75058 45/50 current_auc = 0.46153846153846156
User 75058 AUC after training: 0.46153846153846156
User 75058 does not improve AUC. Reverting changes.
Training on augumented user 27572 46/50 current_auc = 0.46153846153846156
User 27572 AUC after training: 0.46153846153846156
User 27572 does not improve AUC. Reverting changes.
Training on augumented user 76936 47/50 current_auc = 0.46153846153846156
User 76936 AUC after training: 0.46153846153846156
User 76936 does not improve AUC. Reverting changes.
Training on augumented user 88489 48/50 current_auc = 0.46153846153846156
User 88489 AUC after training: 0.46153846153846156
User 88489 does not improve AUC. Reverting changes.
Training on augumented user 89858 49/50 current_auc = 0.46153846153846156
User 89858 AUC after training: 0.46153846153846156
User 89858 does not improve AUC. Reverting changes.
[2024-12-02 19:25:45.075248] start test user 18205 199/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:45.508886] start test user 18205 199/568 recall augumented users by random, augumented_users = [6189, 25601, 129350, 130069, 1836, 84337, 112411, 59309, 75900, 33872, 99495, 122719, 53927, 83333, 64941, 119515, 118326, 27754, 32978, 93265, 59692, 59746, 132754, 65472, 39766, 130411, 130927, 44378, 32638, 85958, 97334, 20273, 128093, 69073, 122558, 90706, 54691, 6982, 91991, 41784, 138092, 32252, 37816, 16871, 136124, 1100, 31506, 106690, 122321, 3565]
[2024-12-02 19:25:45.523726] user = 18205 Cloud 199/568
[2024-12-02 19:25:45.542000] user = 18205 Local 199/568
[2024-12-02 19:25:45.562614] user = 18205 Local+ 199/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:48.685591] user = 18205 MPDA- 199/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.95
Training on augumented user 6189 0/50 current_auc = 0.95
User 6189 AUC after training: 0.95
User 6189 does not improve AUC. Reverting changes.
Training on augumented user 25601 1/50 current_auc = 0.95
User 25601 AUC after training: 0.95
User 25601 does not improve AUC. Reverting changes.
Training on augumented user 129350 2/50 current_auc = 0.95
User 129350 AUC after training: 0.95
User 129350 does not improve AUC. Reverting changes.
Training on augumented user 130069 3/50 current_auc = 0.95
User 130069 AUC after training: 0.95
User 130069 does not improve AUC. Reverting changes.
Training on augumented user 1836 4/50 current_auc = 0.95
User 1836 AUC after training: 0.95
User 1836 does not improve AUC. Reverting changes.
Training on augumented user 84337 5/50 current_auc = 0.95
User 84337 AUC after training: 0.95
User 84337 does not improve AUC. Reverting changes.
Training on augumented user 112411 6/50 current_auc = 0.95
User 112411 AUC after training: 0.95
User 112411 does not improve AUC. Reverting changes.
Training on augumented user 59309 7/50 current_auc = 0.95
User 59309 AUC after training: 0.95
User 59309 does not improve AUC. Reverting changes.
Training on augumented user 75900 8/50 current_auc = 0.95
User 75900 AUC after training: 0.95
User 75900 does not improve AUC. Reverting changes.
Training on augumented user 33872 9/50 current_auc = 0.95
User 33872 AUC after training: 0.95
User 33872 does not improve AUC. Reverting changes.
Training on augumented user 99495 10/50 current_auc = 0.95
User 99495 AUC after training: 0.95
User 99495 does not improve AUC. Reverting changes.
Training on augumented user 122719 11/50 current_auc = 0.95
User 122719 AUC after training: 0.95
User 122719 does not improve AUC. Reverting changes.
Training on augumented user 53927 12/50 current_auc = 0.95
User 53927 AUC after training: 0.95
User 53927 does not improve AUC. Reverting changes.
Training on augumented user 83333 13/50 current_auc = 0.95
User 83333 AUC after training: 0.95
User 83333 does not improve AUC. Reverting changes.
Training on augumented user 64941 14/50 current_auc = 0.95
User 64941 AUC after training: 0.95
User 64941 does not improve AUC. Reverting changes.
Training on augumented user 119515 15/50 current_auc = 0.95
User 119515 AUC after training: 0.95
User 119515 does not improve AUC. Reverting changes.
Training on augumented user 118326 16/50 current_auc = 0.95
User 118326 AUC after training: 0.95
User 118326 does not improve AUC. Reverting changes.
Training on augumented user 27754 17/50 current_auc = 0.95
User 27754 AUC after training: 0.95
User 27754 does not improve AUC. Reverting changes.
Training on augumented user 32978 18/50 current_auc = 0.95
User 32978 AUC after training: 0.95
User 32978 does not improve AUC. Reverting changes.
Training on augumented user 93265 19/50 current_auc = 0.95
User 93265 AUC after training: 0.95
User 93265 does not improve AUC. Reverting changes.
Training on augumented user 59692 20/50 current_auc = 0.95
User 59692 AUC after training: 0.95
User 59692 does not improve AUC. Reverting changes.
Training on augumented user 59746 21/50 current_auc = 0.95
User 59746 AUC after training: 0.95
User 59746 does not improve AUC. Reverting changes.
Training on augumented user 132754 22/50 current_auc = 0.95
User 132754 AUC after training: 0.95
User 132754 does not improve AUC. Reverting changes.
Training on augumented user 65472 23/50 current_auc = 0.95
User 65472 AUC after training: 0.95
User 65472 does not improve AUC. Reverting changes.
Training on augumented user 39766 24/50 current_auc = 0.95
User 39766 AUC after training: 0.95
User 39766 does not improve AUC. Reverting changes.
Training on augumented user 130411 25/50 current_auc = 0.95
User 130411 AUC after training: 0.95
User 130411 does not improve AUC. Reverting changes.
Training on augumented user 130927 26/50 current_auc = 0.95
User 130927 AUC after training: 0.95
User 130927 does not improve AUC. Reverting changes.
Training on augumented user 44378 27/50 current_auc = 0.95
User 44378 AUC after training: 0.95
User 44378 does not improve AUC. Reverting changes.
Training on augumented user 32638 28/50 current_auc = 0.95
User 32638 AUC after training: 0.95
User 32638 does not improve AUC. Reverting changes.
Training on augumented user 85958 29/50 current_auc = 0.95
User 85958 AUC after training: 0.95
User 85958 does not improve AUC. Reverting changes.
Training on augumented user 97334 30/50 current_auc = 0.95
User 97334 AUC after training: 0.95
User 97334 does not improve AUC. Reverting changes.
Training on augumented user 20273 31/50 current_auc = 0.95
User 20273 AUC after training: 0.95
User 20273 does not improve AUC. Reverting changes.
Training on augumented user 128093 32/50 current_auc = 0.95
User 128093 AUC after training: 0.95
User 128093 does not improve AUC. Reverting changes.
Training on augumented user 69073 33/50 current_auc = 0.95
User 69073 AUC after training: 0.95
User 69073 does not improve AUC. Reverting changes.
Training on augumented user 122558 34/50 current_auc = 0.95
User 122558 AUC after training: 0.95
User 122558 does not improve AUC. Reverting changes.
Training on augumented user 90706 35/50 current_auc = 0.95
User 90706 AUC after training: 0.95
User 90706 does not improve AUC. Reverting changes.
Training on augumented user 54691 36/50 current_auc = 0.95
User 54691 AUC after training: 0.95
User 54691 does not improve AUC. Reverting changes.
Training on augumented user 6982 37/50 current_auc = 0.95
User 6982 AUC after training: 0.95
User 6982 does not improve AUC. Reverting changes.
Training on augumented user 91991 38/50 current_auc = 0.95
User 91991 AUC after training: 0.95
User 91991 does not improve AUC. Reverting changes.
Training on augumented user 41784 39/50 current_auc = 0.95
User 41784 AUC after training: 0.95
User 41784 does not improve AUC. Reverting changes.
Training on augumented user 138092 40/50 current_auc = 0.95
User 138092 AUC after training: 0.95
User 138092 does not improve AUC. Reverting changes.
Training on augumented user 32252 41/50 current_auc = 0.95
User 32252 AUC after training: 0.95
User 32252 does not improve AUC. Reverting changes.
Training on augumented user 37816 42/50 current_auc = 0.95
User 37816 AUC after training: 0.95
User 37816 does not improve AUC. Reverting changes.
Training on augumented user 16871 43/50 current_auc = 0.95
User 16871 AUC after training: 0.95
User 16871 does not improve AUC. Reverting changes.
Training on augumented user 136124 44/50 current_auc = 0.95
User 136124 AUC after training: 0.95
User 136124 does not improve AUC. Reverting changes.
Training on augumented user 1100 45/50 current_auc = 0.95
User 1100 AUC after training: 0.95
User 1100 does not improve AUC. Reverting changes.
Training on augumented user 31506 46/50 current_auc = 0.95
User 31506 AUC after training: 0.95
User 31506 does not improve AUC. Reverting changes.
Training on augumented user 106690 47/50 current_auc = 0.95
User 106690 AUC after training: 0.95
User 106690 does not improve AUC. Reverting changes.
Training on augumented user 122321 48/50 current_auc = 0.95
User 122321 AUC after training: 0.95
User 122321 does not improve AUC. Reverting changes.
Training on augumented user 3565 49/50 current_auc = 0.95
User 3565 AUC after training: 0.95
User 3565 does not improve AUC. Reverting changes.
[2024-12-02 19:26:15.768659] start test user 18232 200/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:16.332971] start test user 18232 200/568 recall augumented users by random, augumented_users = [56524, 64178, 54281, 61740, 6506, 131917, 128318, 24353, 96565, 84568, 54301, 33368, 136947, 44665, 59111, 101422, 42217, 35689, 16660, 89194, 68210, 71829, 2115, 38945, 13772, 45475, 28913, 131896, 124620, 127849, 59678, 92203, 85254, 104428, 59788, 68539, 81981, 96911, 87810, 84303, 116532, 36027, 81612, 126486, 30832, 122905, 5153, 63210, 49068, 18718]
[2024-12-02 19:26:16.347868] user = 18232 Cloud 200/568
[2024-12-02 19:26:16.397057] user = 18232 Local 200/568
[2024-12-02 19:26:16.455535] user = 18232 Local+ 200/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:19.381950] user = 18232 MPDA- 200/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7777777777777778
Training on augumented user 56524 0/50 current_auc = 0.7777777777777778
User 56524 AUC after training: 0.7777777777777778
User 56524 does not improve AUC. Reverting changes.
Training on augumented user 64178 1/50 current_auc = 0.7777777777777778
User 64178 AUC after training: 0.7777777777777778
User 64178 does not improve AUC. Reverting changes.
Training on augumented user 54281 2/50 current_auc = 0.7777777777777778
User 54281 AUC after training: 0.7777777777777778
User 54281 does not improve AUC. Reverting changes.
Training on augumented user 61740 3/50 current_auc = 0.7777777777777778
User 61740 AUC after training: 0.7777777777777778
User 61740 does not improve AUC. Reverting changes.
Training on augumented user 6506 4/50 current_auc = 0.7777777777777778
User 6506 AUC after training: 0.7777777777777778
User 6506 does not improve AUC. Reverting changes.
Training on augumented user 131917 5/50 current_auc = 0.7777777777777778
User 131917 AUC after training: 0.7777777777777778
User 131917 does not improve AUC. Reverting changes.
Training on augumented user 128318 6/50 current_auc = 0.7777777777777778
User 128318 AUC after training: 0.7777777777777778
User 128318 does not improve AUC. Reverting changes.
Training on augumented user 24353 7/50 current_auc = 0.7777777777777778
User 24353 AUC after training: 0.7777777777777778
User 24353 does not improve AUC. Reverting changes.
Training on augumented user 96565 8/50 current_auc = 0.7777777777777778
User 96565 AUC after training: 0.7777777777777778
User 96565 does not improve AUC. Reverting changes.
Training on augumented user 84568 9/50 current_auc = 0.7777777777777778
User 84568 AUC after training: 0.7777777777777778
User 84568 does not improve AUC. Reverting changes.
Training on augumented user 54301 10/50 current_auc = 0.7777777777777778
User 54301 AUC after training: 0.7777777777777778
User 54301 does not improve AUC. Reverting changes.
Training on augumented user 33368 11/50 current_auc = 0.7777777777777778
User 33368 AUC after training: 0.8055555555555556
User 33368 improves AUC. Keeping the model.
Training on augumented user 136947 12/50 current_auc = 0.8055555555555556
User 136947 AUC after training: 0.7777777777777778
User 136947 does not improve AUC. Reverting changes.
Training on augumented user 44665 13/50 current_auc = 0.8055555555555556
User 44665 AUC after training: 0.7777777777777778
User 44665 does not improve AUC. Reverting changes.
Training on augumented user 59111 14/50 current_auc = 0.8055555555555556
User 59111 AUC after training: 0.8055555555555556
User 59111 does not improve AUC. Reverting changes.
Training on augumented user 101422 15/50 current_auc = 0.8055555555555556
User 101422 AUC after training: 0.8055555555555556
User 101422 does not improve AUC. Reverting changes.
Training on augumented user 42217 16/50 current_auc = 0.8055555555555556
User 42217 AUC after training: 0.7777777777777778
User 42217 does not improve AUC. Reverting changes.
Training on augumented user 35689 17/50 current_auc = 0.8055555555555556
User 35689 AUC after training: 0.8055555555555556
User 35689 does not improve AUC. Reverting changes.
Training on augumented user 16660 18/50 current_auc = 0.8055555555555556
User 16660 AUC after training: 0.8055555555555556
User 16660 does not improve AUC. Reverting changes.
Training on augumented user 89194 19/50 current_auc = 0.8055555555555556
User 89194 AUC after training: 0.8055555555555556
User 89194 does not improve AUC. Reverting changes.
Training on augumented user 68210 20/50 current_auc = 0.8055555555555556
User 68210 AUC after training: 0.8055555555555556
User 68210 does not improve AUC. Reverting changes.
Training on augumented user 71829 21/50 current_auc = 0.8055555555555556
User 71829 AUC after training: 0.7777777777777778
User 71829 does not improve AUC. Reverting changes.
Training on augumented user 2115 22/50 current_auc = 0.8055555555555556
User 2115 AUC after training: 0.8055555555555556
User 2115 does not improve AUC. Reverting changes.
Training on augumented user 38945 23/50 current_auc = 0.8055555555555556
User 38945 AUC after training: 0.7777777777777778
User 38945 does not improve AUC. Reverting changes.
Training on augumented user 13772 24/50 current_auc = 0.8055555555555556
User 13772 AUC after training: 0.8055555555555556
User 13772 does not improve AUC. Reverting changes.
Training on augumented user 45475 25/50 current_auc = 0.8055555555555556
User 45475 AUC after training: 0.7777777777777778
User 45475 does not improve AUC. Reverting changes.
Training on augumented user 28913 26/50 current_auc = 0.8055555555555556
User 28913 AUC after training: 0.8055555555555556
User 28913 does not improve AUC. Reverting changes.
Training on augumented user 131896 27/50 current_auc = 0.8055555555555556
User 131896 AUC after training: 0.8055555555555556
User 131896 does not improve AUC. Reverting changes.
Training on augumented user 124620 28/50 current_auc = 0.8055555555555556
User 124620 AUC after training: 0.7777777777777778
User 124620 does not improve AUC. Reverting changes.
Training on augumented user 127849 29/50 current_auc = 0.8055555555555556
User 127849 AUC after training: 0.8055555555555556
User 127849 does not improve AUC. Reverting changes.
Training on augumented user 59678 30/50 current_auc = 0.8055555555555556
User 59678 AUC after training: 0.8055555555555556
User 59678 does not improve AUC. Reverting changes.
Training on augumented user 92203 31/50 current_auc = 0.8055555555555556
User 92203 AUC after training: 0.7777777777777778
User 92203 does not improve AUC. Reverting changes.
Training on augumented user 85254 32/50 current_auc = 0.8055555555555556
User 85254 AUC after training: 0.7777777777777778
User 85254 does not improve AUC. Reverting changes.
Training on augumented user 104428 33/50 current_auc = 0.8055555555555556
User 104428 AUC after training: 0.7777777777777778
User 104428 does not improve AUC. Reverting changes.
Training on augumented user 59788 34/50 current_auc = 0.8055555555555556
User 59788 AUC after training: 0.7777777777777778
User 59788 does not improve AUC. Reverting changes.
Training on augumented user 68539 35/50 current_auc = 0.8055555555555556
User 68539 AUC after training: 0.8055555555555556
User 68539 does not improve AUC. Reverting changes.
Training on augumented user 81981 36/50 current_auc = 0.8055555555555556
User 81981 AUC after training: 0.8055555555555556
User 81981 does not improve AUC. Reverting changes.
Training on augumented user 96911 37/50 current_auc = 0.8055555555555556
User 96911 AUC after training: 0.7777777777777778
User 96911 does not improve AUC. Reverting changes.
Training on augumented user 87810 38/50 current_auc = 0.8055555555555556
User 87810 AUC after training: 0.8055555555555556
User 87810 does not improve AUC. Reverting changes.
Training on augumented user 84303 39/50 current_auc = 0.8055555555555556
User 84303 AUC after training: 0.8055555555555556
User 84303 does not improve AUC. Reverting changes.
Training on augumented user 116532 40/50 current_auc = 0.8055555555555556
User 116532 AUC after training: 0.7777777777777778
User 116532 does not improve AUC. Reverting changes.
Training on augumented user 36027 41/50 current_auc = 0.8055555555555556
User 36027 AUC after training: 0.8055555555555556
User 36027 does not improve AUC. Reverting changes.
Training on augumented user 81612 42/50 current_auc = 0.8055555555555556
User 81612 AUC after training: 0.8055555555555556
User 81612 does not improve AUC. Reverting changes.
Training on augumented user 126486 43/50 current_auc = 0.8055555555555556
User 126486 AUC after training: 0.7777777777777778
User 126486 does not improve AUC. Reverting changes.
Training on augumented user 30832 44/50 current_auc = 0.8055555555555556
User 30832 AUC after training: 0.8055555555555556
User 30832 does not improve AUC. Reverting changes.
Training on augumented user 122905 45/50 current_auc = 0.8055555555555556
User 122905 AUC after training: 0.7777777777777778
User 122905 does not improve AUC. Reverting changes.
Training on augumented user 5153 46/50 current_auc = 0.8055555555555556
User 5153 AUC after training: 0.8055555555555556
User 5153 does not improve AUC. Reverting changes.
Training on augumented user 63210 47/50 current_auc = 0.8055555555555556
User 63210 AUC after training: 0.8055555555555556
User 63210 does not improve AUC. Reverting changes.
Training on augumented user 49068 48/50 current_auc = 0.8055555555555556
User 49068 AUC after training: 0.8055555555555556
User 49068 does not improve AUC. Reverting changes.
Training on augumented user 18718 49/50 current_auc = 0.8055555555555556
User 18718 AUC after training: 0.8055555555555556
User 18718 does not improve AUC. Reverting changes.
[2024-12-02 19:26:48.926781] start test user 18250 201/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:49.613669] start test user 18250 201/568 recall augumented users by random, augumented_users = [111616, 101266, 91379, 13624, 66292, 40230, 99928, 54183, 46978, 104474, 27588, 29494, 84922, 12156, 58023, 84939, 49262, 103497, 23240, 88885, 76000, 118263, 3736, 133312, 9585, 97065, 53209, 61142, 10000, 114399, 123785, 65739, 69413, 116248, 47061, 108894, 108980, 7586, 49762, 101367, 129241, 42904, 132621, 132024, 31276, 95702, 7507, 30168, 106600, 36043]
[2024-12-02 19:26:49.630411] user = 18250 Cloud 201/568
[2024-12-02 19:26:49.646236] user = 18250 Local 201/568
[2024-12-02 19:26:49.881308] user = 18250 Local+ 201/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:51.789026] user = 18250 MPDA- 201/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.74
Training on augumented user 111616 0/50 current_auc = 0.74
User 111616 AUC after training: 0.740952380952381
User 111616 improves AUC. Keeping the model.
Training on augumented user 101266 1/50 current_auc = 0.740952380952381
User 101266 AUC after training: 0.7395238095238095
User 101266 does not improve AUC. Reverting changes.
Training on augumented user 91379 2/50 current_auc = 0.740952380952381
User 91379 AUC after training: 0.740952380952381
User 91379 does not improve AUC. Reverting changes.
Training on augumented user 13624 3/50 current_auc = 0.740952380952381
User 13624 AUC after training: 0.7407142857142858
User 13624 does not improve AUC. Reverting changes.
Training on augumented user 66292 4/50 current_auc = 0.740952380952381
User 66292 AUC after training: 0.74
User 66292 does not improve AUC. Reverting changes.
Training on augumented user 40230 5/50 current_auc = 0.740952380952381
User 40230 AUC after training: 0.7407142857142858
User 40230 does not improve AUC. Reverting changes.
Training on augumented user 99928 6/50 current_auc = 0.740952380952381
User 99928 AUC after training: 0.7407142857142858
User 99928 does not improve AUC. Reverting changes.
Training on augumented user 54183 7/50 current_auc = 0.740952380952381
User 54183 AUC after training: 0.7407142857142858
User 54183 does not improve AUC. Reverting changes.
Training on augumented user 46978 8/50 current_auc = 0.740952380952381
User 46978 AUC after training: 0.7407142857142858
User 46978 does not improve AUC. Reverting changes.
Training on augumented user 104474 9/50 current_auc = 0.740952380952381
User 104474 AUC after training: 0.7397619047619048
User 104474 does not improve AUC. Reverting changes.
Training on augumented user 27588 10/50 current_auc = 0.740952380952381
User 27588 AUC after training: 0.740952380952381
User 27588 does not improve AUC. Reverting changes.
Training on augumented user 29494 11/50 current_auc = 0.740952380952381
User 29494 AUC after training: 0.740952380952381
User 29494 does not improve AUC. Reverting changes.
Training on augumented user 84922 12/50 current_auc = 0.740952380952381
User 84922 AUC after training: 0.740952380952381
User 84922 does not improve AUC. Reverting changes.
Training on augumented user 12156 13/50 current_auc = 0.740952380952381
User 12156 AUC after training: 0.74
User 12156 does not improve AUC. Reverting changes.
Training on augumented user 58023 14/50 current_auc = 0.740952380952381
User 58023 AUC after training: 0.740952380952381
User 58023 does not improve AUC. Reverting changes.
Training on augumented user 84939 15/50 current_auc = 0.740952380952381
User 84939 AUC after training: 0.7419047619047618
User 84939 improves AUC. Keeping the model.
Training on augumented user 49262 16/50 current_auc = 0.7419047619047618
User 49262 AUC after training: 0.743095238095238
User 49262 improves AUC. Keeping the model.
Training on augumented user 103497 17/50 current_auc = 0.743095238095238
User 103497 AUC after training: 0.7423809523809524
User 103497 does not improve AUC. Reverting changes.
Training on augumented user 23240 18/50 current_auc = 0.743095238095238
User 23240 AUC after training: 0.7428571428571429
User 23240 does not improve AUC. Reverting changes.
Training on augumented user 88885 19/50 current_auc = 0.743095238095238
User 88885 AUC after training: 0.745
User 88885 improves AUC. Keeping the model.
Training on augumented user 76000 20/50 current_auc = 0.745
User 76000 AUC after training: 0.7442857142857142
User 76000 does not improve AUC. Reverting changes.
Training on augumented user 118263 21/50 current_auc = 0.745
User 118263 AUC after training: 0.745
User 118263 does not improve AUC. Reverting changes.
Training on augumented user 3736 22/50 current_auc = 0.745
User 3736 AUC after training: 0.7433333333333334
User 3736 does not improve AUC. Reverting changes.
Training on augumented user 133312 23/50 current_auc = 0.745
User 133312 AUC after training: 0.7457142857142857
User 133312 improves AUC. Keeping the model.
Training on augumented user 9585 24/50 current_auc = 0.7457142857142857
User 9585 AUC after training: 0.7452380952380953
User 9585 does not improve AUC. Reverting changes.
Training on augumented user 97065 25/50 current_auc = 0.7457142857142857
User 97065 AUC after training: 0.7440476190476191
User 97065 does not improve AUC. Reverting changes.
Training on augumented user 53209 26/50 current_auc = 0.7457142857142857
User 53209 AUC after training: 0.745
User 53209 does not improve AUC. Reverting changes.
Training on augumented user 61142 27/50 current_auc = 0.7457142857142857
User 61142 AUC after training: 0.7476190476190476
User 61142 improves AUC. Keeping the model.
Training on augumented user 10000 28/50 current_auc = 0.7476190476190476
User 10000 AUC after training: 0.7471428571428571
User 10000 does not improve AUC. Reverting changes.
Training on augumented user 114399 29/50 current_auc = 0.7476190476190476
User 114399 AUC after training: 0.7457142857142858
User 114399 does not improve AUC. Reverting changes.
Training on augumented user 123785 30/50 current_auc = 0.7476190476190476
User 123785 AUC after training: 0.7476190476190476
User 123785 does not improve AUC. Reverting changes.
Training on augumented user 65739 31/50 current_auc = 0.7476190476190476
User 65739 AUC after training: 0.7471428571428571
User 65739 does not improve AUC. Reverting changes.
Training on augumented user 69413 32/50 current_auc = 0.7476190476190476
User 69413 AUC after training: 0.7461904761904762
User 69413 does not improve AUC. Reverting changes.
Training on augumented user 116248 33/50 current_auc = 0.7476190476190476
User 116248 AUC after training: 0.7457142857142857
User 116248 does not improve AUC. Reverting changes.
Training on augumented user 47061 34/50 current_auc = 0.7476190476190476
User 47061 AUC after training: 0.7471428571428571
User 47061 does not improve AUC. Reverting changes.
Training on augumented user 108894 35/50 current_auc = 0.7476190476190476
User 108894 AUC after training: 0.7466666666666666
User 108894 does not improve AUC. Reverting changes.
Training on augumented user 108980 36/50 current_auc = 0.7476190476190476
User 108980 AUC after training: 0.7452380952380953
User 108980 does not improve AUC. Reverting changes.
Training on augumented user 7586 37/50 current_auc = 0.7476190476190476
User 7586 AUC after training: 0.7476190476190476
User 7586 does not improve AUC. Reverting changes.
Training on augumented user 49762 38/50 current_auc = 0.7476190476190476
User 49762 AUC after training: 0.7457142857142857
User 49762 does not improve AUC. Reverting changes.
Training on augumented user 101367 39/50 current_auc = 0.7476190476190476
User 101367 AUC after training: 0.7466666666666666
User 101367 does not improve AUC. Reverting changes.
Training on augumented user 129241 40/50 current_auc = 0.7476190476190476
User 129241 AUC after training: 0.7471428571428571
User 129241 does not improve AUC. Reverting changes.
Training on augumented user 42904 41/50 current_auc = 0.7476190476190476
User 42904 AUC after training: 0.7461904761904762
User 42904 does not improve AUC. Reverting changes.
Training on augumented user 132621 42/50 current_auc = 0.7476190476190476
User 132621 AUC after training: 0.7480952380952381
User 132621 improves AUC. Keeping the model.
Training on augumented user 132024 43/50 current_auc = 0.7480952380952381
User 132024 AUC after training: 0.7480952380952381
User 132024 does not improve AUC. Reverting changes.
Training on augumented user 31276 44/50 current_auc = 0.7480952380952381
User 31276 AUC after training: 0.7471428571428571
User 31276 does not improve AUC. Reverting changes.
Training on augumented user 95702 45/50 current_auc = 0.7480952380952381
User 95702 AUC after training: 0.7457142857142857
User 95702 does not improve AUC. Reverting changes.
Training on augumented user 7507 46/50 current_auc = 0.7480952380952381
User 7507 AUC after training: 0.7480952380952381
User 7507 does not improve AUC. Reverting changes.
Training on augumented user 30168 47/50 current_auc = 0.7480952380952381
User 30168 AUC after training: 0.7476190476190476
User 30168 does not improve AUC. Reverting changes.
Training on augumented user 106600 48/50 current_auc = 0.7480952380952381
User 106600 AUC after training: 0.7471428571428571
User 106600 does not improve AUC. Reverting changes.
Training on augumented user 36043 49/50 current_auc = 0.7480952380952381
User 36043 AUC after training: 0.7480952380952381
User 36043 does not improve AUC. Reverting changes.
[2024-12-02 19:27:16.505496] start test user 18280 202/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:16.906648] start test user 18280 202/568 recall augumented users by random, augumented_users = [66885, 62574, 48512, 112028, 130840, 98472, 56095, 37276, 77886, 21860, 89306, 65869, 72329, 114207, 78616, 76043, 35120, 22544, 26472, 52668, 110236, 73447, 64202, 31084, 27446, 86577, 59920, 105339, 50320, 2468, 137984, 29295, 131119, 113928, 93478, 4542, 103122, 31780, 70771, 135523, 83794, 8462, 26773, 59231, 31992, 12730, 90132, 40319, 24818, 61668]
[2024-12-02 19:27:16.921916] user = 18280 Cloud 202/568
[2024-12-02 19:27:16.974878] user = 18280 Local 202/568
[2024-12-02 19:27:17.027383] user = 18280 Local+ 202/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:18.912311] user = 18280 MPDA- 202/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7637017070979334
Training on augumented user 66885 0/50 current_auc = 0.7637017070979334
User 66885 AUC after training: 0.7639584135541009
User 66885 improves AUC. Keeping the model.
Training on augumented user 62574 1/50 current_auc = 0.7639584135541009
User 62574 AUC after training: 0.7639875847423018
User 62574 improves AUC. Keeping the model.
Training on augumented user 48512 2/50 current_auc = 0.7639875847423018
User 48512 AUC after training: 0.7643318047630716
User 48512 improves AUC. Keeping the model.
Training on augumented user 112028 3/50 current_auc = 0.7643318047630716
User 112028 AUC after training: 0.764314302050151
User 112028 does not improve AUC. Reverting changes.
Training on augumented user 130840 4/50 current_auc = 0.7643318047630716
User 130840 AUC after training: 0.7650610844680925
User 130840 improves AUC. Keeping the model.
Training on augumented user 98472 5/50 current_auc = 0.7650610844680925
User 98472 AUC after training: 0.764483494941716
User 98472 does not improve AUC. Reverting changes.
Training on augumented user 56095 6/50 current_auc = 0.7650610844680925
User 56095 AUC after training: 0.7654461441523436
User 56095 improves AUC. Keeping the model.
Training on augumented user 37276 7/50 current_auc = 0.7654461441523436
User 37276 AUC after training: 0.7651894376961763
User 37276 does not improve AUC. Reverting changes.
Training on augumented user 77886 8/50 current_auc = 0.7654461441523436
User 77886 AUC after training: 0.7652652827854983
User 77886 does not improve AUC. Reverting changes.
Training on augumented user 21860 9/50 current_auc = 0.7654461441523436
User 21860 AUC after training: 0.7639584135541009
User 21860 does not improve AUC. Reverting changes.
Training on augumented user 89306 10/50 current_auc = 0.7654461441523436
User 89306 AUC after training: 0.7647402013978833
User 89306 does not improve AUC. Reverting changes.
Training on augumented user 65869 11/50 current_auc = 0.7654461441523436
User 65869 AUC after training: 0.7656095028062684
User 65869 improves AUC. Keeping the model.
Training on augumented user 72329 12/50 current_auc = 0.7656095028062684
User 72329 AUC after training: 0.7651719349832558
User 72329 does not improve AUC. Reverting changes.
Training on augumented user 114207 13/50 current_auc = 0.7656095028062684
User 114207 AUC after training: 0.7653294593995402
User 114207 does not improve AUC. Reverting changes.
Training on augumented user 78616 14/50 current_auc = 0.7656095028062684
User 78616 AUC after training: 0.7654461441523436
User 78616 does not improve AUC. Reverting changes.
Training on augumented user 76043 15/50 current_auc = 0.7656095028062684
User 76043 AUC after training: 0.7652769512607788
User 76043 does not improve AUC. Reverting changes.
Training on augumented user 35120 16/50 current_auc = 0.7656095028062684
User 35120 AUC after training: 0.7658545407871553
User 35120 improves AUC. Keeping the model.
Training on augumented user 22544 17/50 current_auc = 0.7658545407871553
User 22544 AUC after training: 0.765702850608511
User 22544 does not improve AUC. Reverting changes.
Training on augumented user 26472 18/50 current_auc = 0.7658545407871553
User 26472 AUC after training: 0.7655686631427872
User 26472 does not improve AUC. Reverting changes.
Training on augumented user 52668 19/50 current_auc = 0.7658545407871553
User 52668 AUC after training: 0.7660820760551218
User 52668 improves AUC. Keeping the model.
Training on augumented user 110236 20/50 current_auc = 0.7660820760551218
User 110236 AUC after training: 0.7656736794203102
User 110236 does not improve AUC. Reverting changes.
Training on augumented user 73447 21/50 current_auc = 0.7660820760551218
User 73447 AUC after training: 0.7659187174011972
User 73447 does not improve AUC. Reverting changes.
Training on augumented user 64202 22/50 current_auc = 0.7660820760551218
User 64202 AUC after training: 0.7660587391045612
User 64202 does not improve AUC. Reverting changes.
Training on augumented user 31084 23/50 current_auc = 0.7660820760551218
User 31084 AUC after training: 0.7660120652034399
User 31084 does not improve AUC. Reverting changes.
Training on augumented user 27446 24/50 current_auc = 0.7660820760551218
User 27446 AUC after training: 0.7660704075798415
User 27446 does not improve AUC. Reverting changes.
Training on augumented user 86577 25/50 current_auc = 0.7660820760551218
User 86577 AUC after training: 0.7650435817551721
User 86577 does not improve AUC. Reverting changes.
Training on augumented user 59920 26/50 current_auc = 0.7660820760551218
User 59920 AUC after training: 0.7655453261922265
User 59920 does not improve AUC. Reverting changes.
Training on augumented user 105339 27/50 current_auc = 0.7660820760551218
User 105339 AUC after training: 0.7662454347090466
User 105339 improves AUC. Keeping the model.
Training on augumented user 50320 28/50 current_auc = 0.7662454347090466
User 50320 AUC after training: 0.7661520869068038
User 50320 does not improve AUC. Reverting changes.
Training on augumented user 2468 29/50 current_auc = 0.7662454347090466
User 2468 AUC after training: 0.7661870923326449
User 2468 does not improve AUC. Reverting changes.
Training on augumented user 137984 30/50 current_auc = 0.7662454347090466
User 137984 AUC after training: 0.7649735709034899
User 137984 does not improve AUC. Reverting changes.
Training on augumented user 29295 31/50 current_auc = 0.7662454347090466
User 29295 AUC after training: 0.7661170814809628
User 29295 does not improve AUC. Reverting changes.
Training on augumented user 131119 32/50 current_auc = 0.7662454347090466
User 131119 AUC after training: 0.7660354021540003
User 131119 does not improve AUC. Reverting changes.
Training on augumented user 113928 33/50 current_auc = 0.7662454347090466
User 113928 AUC after training: 0.7661754238573646
User 113928 does not improve AUC. Reverting changes.
Training on augumented user 93478 34/50 current_auc = 0.7662454347090466
User 93478 AUC after training: 0.7663154455607286
User 93478 improves AUC. Keeping the model.
Training on augumented user 4542 35/50 current_auc = 0.7663154455607286
User 4542 AUC after training: 0.7664087933629712
User 4542 improves AUC. Keeping the model.
Training on augumented user 103122 36/50 current_auc = 0.7664087933629712
User 103122 AUC after training: 0.7655803316180674
User 103122 does not improve AUC. Reverting changes.
Training on augumented user 31780 37/50 current_auc = 0.7664087933629712
User 31780 AUC after training: 0.7663504509865695
User 31780 does not improve AUC. Reverting changes.
Training on augumented user 70771 38/50 current_auc = 0.7664087933629712
User 70771 AUC after training: 0.7665604835416157
User 70771 improves AUC. Keeping the model.
Training on augumented user 135523 39/50 current_auc = 0.7665604835416157
User 135523 AUC after training: 0.7662337662337662
User 135523 does not improve AUC. Reverting changes.
Training on augumented user 83794 40/50 current_auc = 0.7665604835416157
User 83794 AUC after training: 0.7664904726899336
User 83794 does not improve AUC. Reverting changes.
Training on augumented user 8462 41/50 current_auc = 0.7665604835416157
User 8462 AUC after training: 0.7662045950455654
User 8462 does not improve AUC. Reverting changes.
Training on augumented user 26773 42/50 current_auc = 0.7665604835416157
User 26773 AUC after training: 0.7662512689466867
User 26773 does not improve AUC. Reverting changes.
Training on augumented user 59231 43/50 current_auc = 0.7665604835416157
User 59231 AUC after training: 0.7667238421955402
User 59231 improves AUC. Keeping the model.
Training on augumented user 31992 44/50 current_auc = 0.7667238421955402
User 31992 AUC after training: 0.7668113557601428
User 31992 improves AUC. Keeping the model.
Training on augumented user 12730 45/50 current_auc = 0.7668113557601428
User 12730 AUC after training: 0.7666830025320591
User 12730 does not improve AUC. Reverting changes.
Training on augumented user 90132 46/50 current_auc = 0.7668113557601428
User 90132 AUC after training: 0.7668521954236239
User 90132 improves AUC. Keeping the model.
Training on augumented user 40319 47/50 current_auc = 0.7668521954236239
User 40319 AUC after training: 0.7672314208702349
User 40319 improves AUC. Keeping the model.
Training on augumented user 24818 48/50 current_auc = 0.7672314208702349
User 24818 AUC after training: 0.7669980513646282
User 24818 does not improve AUC. Reverting changes.
Training on augumented user 61668 49/50 current_auc = 0.7672314208702349
User 61668 AUC after training: 0.7666596655814983
User 61668 does not improve AUC. Reverting changes.
[2024-12-02 19:27:49.504564] start test user 18288 203/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:49.964911] start test user 18288 203/568 recall augumented users by random, augumented_users = [3718, 113850, 67580, 85963, 66398, 106760, 107098, 72026, 12544, 4604, 9163, 2668, 68118, 130278, 120173, 26200, 37677, 102551, 93797, 95988, 10129, 51240, 107390, 87251, 42181, 36654, 23614, 99635, 71553, 129111, 82979, 23341, 20107, 63747, 106201, 29757, 91039, 7763, 83033, 47166, 133413, 10109, 83576, 112549, 60444, 47316, 86997, 67954, 76093, 183]
[2024-12-02 19:27:49.980263] user = 18288 Cloud 203/568
[2024-12-02 19:27:49.992687] user = 18288 Local 203/568
[2024-12-02 19:27:50.210027] user = 18288 Local+ 203/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:52.811919] user = 18288 MPDA- 203/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.40740740740740744
Training on augumented user 3718 0/50 current_auc = 0.40740740740740744
User 3718 AUC after training: 0.40740740740740744
User 3718 does not improve AUC. Reverting changes.
Training on augumented user 113850 1/50 current_auc = 0.40740740740740744
User 113850 AUC after training: 0.40740740740740744
User 113850 does not improve AUC. Reverting changes.
Training on augumented user 67580 2/50 current_auc = 0.40740740740740744
User 67580 AUC after training: 0.40740740740740744
User 67580 does not improve AUC. Reverting changes.
Training on augumented user 85963 3/50 current_auc = 0.40740740740740744
User 85963 AUC after training: 0.40740740740740744
User 85963 does not improve AUC. Reverting changes.
Training on augumented user 66398 4/50 current_auc = 0.40740740740740744
User 66398 AUC after training: 0.40740740740740744
User 66398 does not improve AUC. Reverting changes.
Training on augumented user 106760 5/50 current_auc = 0.40740740740740744
User 106760 AUC after training: 0.40740740740740744
User 106760 does not improve AUC. Reverting changes.
Training on augumented user 107098 6/50 current_auc = 0.40740740740740744
User 107098 AUC after training: 0.40740740740740744
User 107098 does not improve AUC. Reverting changes.
Training on augumented user 72026 7/50 current_auc = 0.40740740740740744
User 72026 AUC after training: 0.40740740740740744
User 72026 does not improve AUC. Reverting changes.
Training on augumented user 12544 8/50 current_auc = 0.40740740740740744
User 12544 AUC after training: 0.40740740740740744
User 12544 does not improve AUC. Reverting changes.
Training on augumented user 4604 9/50 current_auc = 0.40740740740740744
User 4604 AUC after training: 0.40740740740740744
User 4604 does not improve AUC. Reverting changes.
Training on augumented user 9163 10/50 current_auc = 0.40740740740740744
User 9163 AUC after training: 0.40740740740740744
User 9163 does not improve AUC. Reverting changes.
Training on augumented user 2668 11/50 current_auc = 0.40740740740740744
User 2668 AUC after training: 0.40740740740740744
User 2668 does not improve AUC. Reverting changes.
Training on augumented user 68118 12/50 current_auc = 0.40740740740740744
User 68118 AUC after training: 0.40740740740740744
User 68118 does not improve AUC. Reverting changes.
Training on augumented user 130278 13/50 current_auc = 0.40740740740740744
User 130278 AUC after training: 0.40740740740740744
User 130278 does not improve AUC. Reverting changes.
Training on augumented user 120173 14/50 current_auc = 0.40740740740740744
User 120173 AUC after training: 0.40740740740740744
User 120173 does not improve AUC. Reverting changes.
Training on augumented user 26200 15/50 current_auc = 0.40740740740740744
User 26200 AUC after training: 0.40740740740740744
User 26200 does not improve AUC. Reverting changes.
Training on augumented user 37677 16/50 current_auc = 0.40740740740740744
User 37677 AUC after training: 0.40740740740740744
User 37677 does not improve AUC. Reverting changes.
Training on augumented user 102551 17/50 current_auc = 0.40740740740740744
User 102551 AUC after training: 0.40740740740740744
User 102551 does not improve AUC. Reverting changes.
Training on augumented user 93797 18/50 current_auc = 0.40740740740740744
User 93797 AUC after training: 0.40740740740740744
User 93797 does not improve AUC. Reverting changes.
Training on augumented user 95988 19/50 current_auc = 0.40740740740740744
User 95988 AUC after training: 0.40740740740740744
User 95988 does not improve AUC. Reverting changes.
Training on augumented user 10129 20/50 current_auc = 0.40740740740740744
User 10129 AUC after training: 0.40740740740740744
User 10129 does not improve AUC. Reverting changes.
Training on augumented user 51240 21/50 current_auc = 0.40740740740740744
User 51240 AUC after training: 0.40740740740740744
User 51240 does not improve AUC. Reverting changes.
Training on augumented user 107390 22/50 current_auc = 0.40740740740740744
User 107390 AUC after training: 0.40740740740740744
User 107390 does not improve AUC. Reverting changes.
Training on augumented user 87251 23/50 current_auc = 0.40740740740740744
User 87251 AUC after training: 0.40740740740740744
User 87251 does not improve AUC. Reverting changes.
Training on augumented user 42181 24/50 current_auc = 0.40740740740740744
User 42181 AUC after training: 0.40740740740740744
User 42181 does not improve AUC. Reverting changes.
Training on augumented user 36654 25/50 current_auc = 0.40740740740740744
User 36654 AUC after training: 0.40740740740740744
User 36654 does not improve AUC. Reverting changes.
Training on augumented user 23614 26/50 current_auc = 0.40740740740740744
User 23614 AUC after training: 0.40740740740740744
User 23614 does not improve AUC. Reverting changes.
Training on augumented user 99635 27/50 current_auc = 0.40740740740740744
User 99635 AUC after training: 0.40740740740740744
User 99635 does not improve AUC. Reverting changes.
Training on augumented user 71553 28/50 current_auc = 0.40740740740740744
User 71553 AUC after training: 0.40740740740740744
User 71553 does not improve AUC. Reverting changes.
Training on augumented user 129111 29/50 current_auc = 0.40740740740740744
User 129111 AUC after training: 0.40740740740740744
User 129111 does not improve AUC. Reverting changes.
Training on augumented user 82979 30/50 current_auc = 0.40740740740740744
User 82979 AUC after training: 0.40740740740740744
User 82979 does not improve AUC. Reverting changes.
Training on augumented user 23341 31/50 current_auc = 0.40740740740740744
User 23341 AUC after training: 0.40740740740740744
User 23341 does not improve AUC. Reverting changes.
Training on augumented user 20107 32/50 current_auc = 0.40740740740740744
User 20107 AUC after training: 0.40740740740740744
User 20107 does not improve AUC. Reverting changes.
Training on augumented user 63747 33/50 current_auc = 0.40740740740740744
User 63747 AUC after training: 0.40740740740740744
User 63747 does not improve AUC. Reverting changes.
Training on augumented user 106201 34/50 current_auc = 0.40740740740740744
User 106201 AUC after training: 0.40740740740740744
User 106201 does not improve AUC. Reverting changes.
Training on augumented user 29757 35/50 current_auc = 0.40740740740740744
User 29757 AUC after training: 0.40740740740740744
User 29757 does not improve AUC. Reverting changes.
Training on augumented user 91039 36/50 current_auc = 0.40740740740740744
User 91039 AUC after training: 0.40740740740740744
User 91039 does not improve AUC. Reverting changes.
Training on augumented user 7763 37/50 current_auc = 0.40740740740740744
User 7763 AUC after training: 0.40740740740740744
User 7763 does not improve AUC. Reverting changes.
Training on augumented user 83033 38/50 current_auc = 0.40740740740740744
User 83033 AUC after training: 0.40740740740740744
User 83033 does not improve AUC. Reverting changes.
Training on augumented user 47166 39/50 current_auc = 0.40740740740740744
User 47166 AUC after training: 0.40740740740740744
User 47166 does not improve AUC. Reverting changes.
Training on augumented user 133413 40/50 current_auc = 0.40740740740740744
User 133413 AUC after training: 0.40740740740740744
User 133413 does not improve AUC. Reverting changes.
Training on augumented user 10109 41/50 current_auc = 0.40740740740740744
User 10109 AUC after training: 0.40740740740740744
User 10109 does not improve AUC. Reverting changes.
Training on augumented user 83576 42/50 current_auc = 0.40740740740740744
User 83576 AUC after training: 0.40740740740740744
User 83576 does not improve AUC. Reverting changes.
Training on augumented user 112549 43/50 current_auc = 0.40740740740740744
User 112549 AUC after training: 0.40740740740740744
User 112549 does not improve AUC. Reverting changes.
Training on augumented user 60444 44/50 current_auc = 0.40740740740740744
User 60444 AUC after training: 0.40740740740740744
User 60444 does not improve AUC. Reverting changes.
Training on augumented user 47316 45/50 current_auc = 0.40740740740740744
User 47316 AUC after training: 0.40740740740740744
User 47316 does not improve AUC. Reverting changes.
Training on augumented user 86997 46/50 current_auc = 0.40740740740740744
User 86997 AUC after training: 0.40740740740740744
User 86997 does not improve AUC. Reverting changes.
Training on augumented user 67954 47/50 current_auc = 0.40740740740740744
User 67954 AUC after training: 0.40740740740740744
User 67954 does not improve AUC. Reverting changes.
Training on augumented user 76093 48/50 current_auc = 0.40740740740740744
User 76093 AUC after training: 0.40740740740740744
User 76093 does not improve AUC. Reverting changes.
Training on augumented user 183 49/50 current_auc = 0.40740740740740744
User 183 AUC after training: 0.40740740740740744
User 183 does not improve AUC. Reverting changes.
[2024-12-02 19:28:20.908161] start test user 18354 204/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:21.422560] start test user 18354 204/568 recall augumented users by random, augumented_users = [2645, 89351, 5537, 45601, 84245, 128216, 133713, 47406, 37539, 97251, 56270, 96897, 104866, 70448, 74805, 85895, 48571, 60887, 123593, 19835, 27673, 45348, 2789, 95618, 44754, 13260, 75274, 137632, 12440, 135590, 112820, 22257, 11781, 115762, 105732, 9654, 88176, 9745, 42027, 108386, 59125, 95437, 99671, 103397, 77169, 68858, 103446, 121798, 38050, 81646]
[2024-12-02 19:28:21.442428] user = 18354 Cloud 204/568
[2024-12-02 19:28:21.503811] user = 18354 Local 204/568
[2024-12-02 19:28:21.674910] user = 18354 Local+ 204/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:24.501519] user = 18354 MPDA- 204/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.684956237357984
Training on augumented user 2645 0/50 current_auc = 0.684956237357984
User 2645 AUC after training: 0.6852303446189909
User 2645 improves AUC. Keeping the model.
Training on augumented user 89351 1/50 current_auc = 0.6852303446189909
User 89351 AUC after training: 0.6853248643641657
User 89351 improves AUC. Keeping the model.
Training on augumented user 5537 2/50 current_auc = 0.6853248643641657
User 5537 AUC after training: 0.6852870564660957
User 5537 does not improve AUC. Reverting changes.
Training on augumented user 45601 3/50 current_auc = 0.6853248643641657
User 45601 AUC after training: 0.685372124236753
User 45601 improves AUC. Keeping the model.
Training on augumented user 84245 4/50 current_auc = 0.685372124236753
User 84245 AUC after training: 0.6852965084406133
User 84245 does not improve AUC. Reverting changes.
Training on augumented user 128216 5/50 current_auc = 0.685372124236753
User 128216 AUC after training: 0.6852776044915783
User 128216 does not improve AUC. Reverting changes.
Training on augumented user 133713 6/50 current_auc = 0.685372124236753
User 133713 AUC after training: 0.6852681525170609
User 133713 does not improve AUC. Reverting changes.
Training on augumented user 47406 7/50 current_auc = 0.685372124236753
User 47406 AUC after training: 0.6854855479309628
User 47406 improves AUC. Keeping the model.
Training on augumented user 37539 8/50 current_auc = 0.6854855479309628
User 37539 AUC after training: 0.6853815762112705
User 37539 does not improve AUC. Reverting changes.
Training on augumented user 97251 9/50 current_auc = 0.6854855479309628
User 97251 AUC after training: 0.6855800676761374
User 97251 improves AUC. Keeping the model.
Training on augumented user 56270 10/50 current_auc = 0.6855800676761374
User 56270 AUC after training: 0.6849467853834666
User 56270 does not improve AUC. Reverting changes.
Training on augumented user 96897 11/50 current_auc = 0.6855800676761374
User 96897 AUC after training: 0.6855233558290327
User 96897 does not improve AUC. Reverting changes.
Training on augumented user 104866 12/50 current_auc = 0.6855800676761374
User 104866 AUC after training: 0.6855139038545153
User 104866 does not improve AUC. Reverting changes.
Training on augumented user 70448 13/50 current_auc = 0.6855800676761374
User 70448 AUC after training: 0.6855044518799978
User 70448 does not improve AUC. Reverting changes.
Training on augumented user 74805 14/50 current_auc = 0.6855800676761374
User 74805 AUC after training: 0.6855800676761376
User 74805 improves AUC. Keeping the model.
Training on augumented user 85895 15/50 current_auc = 0.6855800676761376
User 85895 AUC after training: 0.6856651354467949
User 85895 improves AUC. Keeping the model.
Training on augumented user 48571 16/50 current_auc = 0.6856651354467949
User 48571 AUC after training: 0.6855422597780677
User 48571 does not improve AUC. Reverting changes.
Training on augumented user 60887 17/50 current_auc = 0.6856651354467949
User 60887 AUC after training: 0.6825932437286149
User 60887 does not improve AUC. Reverting changes.
Training on augumented user 123593 18/50 current_auc = 0.6856651354467949
User 123593 AUC after training: 0.6857502032174522
User 123593 improves AUC. Keeping the model.
Training on augumented user 19835 19/50 current_auc = 0.6857502032174522
User 19835 AUC after training: 0.6856840393958299
User 19835 does not improve AUC. Reverting changes.
Training on augumented user 27673 20/50 current_auc = 0.6857502032174522
User 27673 AUC after training: 0.6862417058923609
User 27673 improves AUC. Keeping the model.
Training on augumented user 45348 21/50 current_auc = 0.6862417058923609
User 45348 AUC after training: 0.6861944460197735
User 45348 does not improve AUC. Reverting changes.
Training on augumented user 2789 22/50 current_auc = 0.6862417058923609
User 2789 AUC after training: 0.686184994045256
User 2789 does not improve AUC. Reverting changes.
Training on augumented user 95618 23/50 current_auc = 0.6862417058923609
User 95618 AUC after training: 0.6862322539178435
User 95618 does not improve AUC. Reverting changes.
Training on augumented user 44754 24/50 current_auc = 0.6862417058923609
User 44754 AUC after training: 0.6861377341726687
User 44754 does not improve AUC. Reverting changes.
Training on augumented user 13260 25/50 current_auc = 0.6862417058923609
User 13260 AUC after training: 0.6860904743000812
User 13260 does not improve AUC. Reverting changes.
Training on augumented user 75274 26/50 current_auc = 0.6862417058923609
User 75274 AUC after training: 0.6862700618159134
User 75274 improves AUC. Keeping the model.
Training on augumented user 137632 27/50 current_auc = 0.6862700618159134
User 137632 AUC after training: 0.6862322539178435
User 137632 does not improve AUC. Reverting changes.
Training on augumented user 12440 28/50 current_auc = 0.6862700618159134
User 12440 AUC after training: 0.6863834855101231
User 12440 improves AUC. Keeping the model.
Training on augumented user 135590 29/50 current_auc = 0.6863834855101231
User 135590 AUC after training: 0.6861471861471862
User 135590 does not improve AUC. Reverting changes.
Training on augumented user 112820 30/50 current_auc = 0.6863834855101231
User 112820 AUC after training: 0.6862322539178435
User 112820 does not improve AUC. Reverting changes.
Training on augumented user 22257 31/50 current_auc = 0.6863834855101231
User 22257 AUC after training: 0.6864496493317453
User 22257 improves AUC. Keeping the model.
Training on augumented user 11781 32/50 current_auc = 0.6864496493317453
User 11781 AUC after training: 0.686222801943326
User 11781 does not improve AUC. Reverting changes.
Training on augumented user 115762 33/50 current_auc = 0.6864496493317453
User 115762 AUC after training: 0.6865536210514377
User 115762 improves AUC. Keeping the model.
Training on augumented user 105732 34/50 current_auc = 0.6865536210514377
User 105732 AUC after training: 0.6864496493317453
User 105732 does not improve AUC. Reverting changes.
Training on augumented user 9654 35/50 current_auc = 0.6865536210514377
User 9654 AUC after training: 0.6859297907332842
User 9654 does not improve AUC. Reverting changes.
Training on augumented user 88176 36/50 current_auc = 0.6865536210514377
User 88176 AUC after training: 0.6848995255108792
User 88176 does not improve AUC. Reverting changes.
Training on augumented user 9745 37/50 current_auc = 0.6865536210514377
User 9745 AUC after training: 0.6863551295865706
User 9745 does not improve AUC. Reverting changes.
Training on augumented user 42027 38/50 current_auc = 0.6865536210514377
User 42027 AUC after training: 0.6864780052552978
User 42027 does not improve AUC. Reverting changes.
Training on augumented user 108386 39/50 current_auc = 0.6865536210514377
User 108386 AUC after training: 0.6855611637271026
User 108386 does not improve AUC. Reverting changes.
Training on augumented user 59125 40/50 current_auc = 0.6865536210514377
User 59125 AUC after training: 0.6865347171024027
User 59125 does not improve AUC. Reverting changes.
Training on augumented user 95437 41/50 current_auc = 0.6865536210514377
User 95437 AUC after training: 0.6866670447456473
User 95437 improves AUC. Keeping the model.
Training on augumented user 99671 42/50 current_auc = 0.6866670447456473
User 99671 AUC after training: 0.6863929374846406
User 99671 does not improve AUC. Reverting changes.
Training on augumented user 103397 43/50 current_auc = 0.6866670447456473
User 103397 AUC after training: 0.6866954006691999
User 103397 improves AUC. Keeping the model.
Training on augumented user 77169 44/50 current_auc = 0.6866954006691999
User 77169 AUC after training: 0.686638688822095
User 77169 does not improve AUC. Reverting changes.
Training on augumented user 68858 45/50 current_auc = 0.6866954006691999
User 68858 AUC after training: 0.6867237565927522
User 68858 improves AUC. Keeping the model.
Training on augumented user 103446 46/50 current_auc = 0.6867237565927522
User 103446 AUC after training: 0.6864212934081929
User 103446 does not improve AUC. Reverting changes.
Training on augumented user 121798 47/50 current_auc = 0.6867237565927522
User 121798 AUC after training: 0.6866292368475773
User 121798 does not improve AUC. Reverting changes.
Training on augumented user 38050 48/50 current_auc = 0.6867237565927522
User 38050 AUC after training: 0.6866103328985425
User 38050 does not improve AUC. Reverting changes.
Training on augumented user 81646 49/50 current_auc = 0.6867237565927522
User 81646 AUC after training: 0.686761564490822
User 81646 improves AUC. Keeping the model.
[2024-12-02 19:28:58.477922] start test user 18363 205/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:59.111069] start test user 18363 205/568 recall augumented users by random, augumented_users = [85478, 118996, 16324, 6642, 17941, 128322, 80393, 36466, 62183, 103075, 38901, 118984, 41543, 15429, 82320, 73713, 135772, 8392, 69748, 72490, 47893, 77027, 80087, 85295, 32694, 104900, 55721, 105319, 39770, 124074, 75092, 11055, 7731, 23724, 37833, 24294, 100219, 125004, 68792, 2205, 109248, 31505, 69901, 84919, 42489, 40658, 5584, 87897, 48967, 40086]
[2024-12-02 19:28:59.155507] user = 18363 Cloud 205/568
[2024-12-02 19:28:59.217688] user = 18363 Local 205/568
[2024-12-02 19:28:59.282589] user = 18363 Local+ 205/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:01.903427] user = 18363 MPDA- 205/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6743197278911565
Training on augumented user 85478 0/50 current_auc = 0.6743197278911565
User 85478 AUC after training: 0.6717687074829931
User 85478 does not improve AUC. Reverting changes.
Training on augumented user 118996 1/50 current_auc = 0.6743197278911565
User 118996 AUC after training: 0.6746031746031746
User 118996 improves AUC. Keeping the model.
Training on augumented user 16324 2/50 current_auc = 0.6746031746031746
User 16324 AUC after training: 0.6743197278911565
User 16324 does not improve AUC. Reverting changes.
Training on augumented user 6642 3/50 current_auc = 0.6746031746031746
User 6642 AUC after training: 0.6734693877551021
User 6642 does not improve AUC. Reverting changes.
Training on augumented user 17941 4/50 current_auc = 0.6746031746031746
User 17941 AUC after training: 0.6748866213151927
User 17941 improves AUC. Keeping the model.
Training on augumented user 128322 5/50 current_auc = 0.6748866213151927
User 128322 AUC after training: 0.6731859410430838
User 128322 does not improve AUC. Reverting changes.
Training on augumented user 80393 6/50 current_auc = 0.6748866213151927
User 80393 AUC after training: 0.6734693877551021
User 80393 does not improve AUC. Reverting changes.
Training on augumented user 36466 7/50 current_auc = 0.6748866213151927
User 36466 AUC after training: 0.6729024943310657
User 36466 does not improve AUC. Reverting changes.
Training on augumented user 62183 8/50 current_auc = 0.6748866213151927
User 62183 AUC after training: 0.6748866213151927
User 62183 does not improve AUC. Reverting changes.
Training on augumented user 103075 9/50 current_auc = 0.6748866213151927
User 103075 AUC after training: 0.6743197278911566
User 103075 does not improve AUC. Reverting changes.
Training on augumented user 38901 10/50 current_auc = 0.6748866213151927
User 38901 AUC after training: 0.673469387755102
User 38901 does not improve AUC. Reverting changes.
Training on augumented user 118984 11/50 current_auc = 0.6748866213151927
User 118984 AUC after training: 0.6774376417233561
User 118984 improves AUC. Keeping the model.
Training on augumented user 41543 12/50 current_auc = 0.6774376417233561
User 41543 AUC after training: 0.6763038548752834
User 41543 does not improve AUC. Reverting changes.
Training on augumented user 15429 13/50 current_auc = 0.6774376417233561
User 15429 AUC after training: 0.677437641723356
User 15429 does not improve AUC. Reverting changes.
Training on augumented user 82320 14/50 current_auc = 0.6774376417233561
User 82320 AUC after training: 0.6765873015873016
User 82320 does not improve AUC. Reverting changes.
Training on augumented user 73713 15/50 current_auc = 0.6774376417233561
User 73713 AUC after training: 0.6743197278911565
User 73713 does not improve AUC. Reverting changes.
Training on augumented user 135772 16/50 current_auc = 0.6774376417233561
User 135772 AUC after training: 0.6771541950113379
User 135772 does not improve AUC. Reverting changes.
Training on augumented user 8392 17/50 current_auc = 0.6774376417233561
User 8392 AUC after training: 0.6768707482993197
User 8392 does not improve AUC. Reverting changes.
Training on augumented user 69748 18/50 current_auc = 0.6774376417233561
User 69748 AUC after training: 0.6777210884353742
User 69748 improves AUC. Keeping the model.
Training on augumented user 72490 19/50 current_auc = 0.6777210884353742
User 72490 AUC after training: 0.6780045351473922
User 72490 improves AUC. Keeping the model.
Training on augumented user 47893 20/50 current_auc = 0.6780045351473922
User 47893 AUC after training: 0.6771541950113378
User 47893 does not improve AUC. Reverting changes.
Training on augumented user 77027 21/50 current_auc = 0.6780045351473922
User 77027 AUC after training: 0.6771541950113378
User 77027 does not improve AUC. Reverting changes.
Training on augumented user 80087 22/50 current_auc = 0.6780045351473922
User 80087 AUC after training: 0.6763038548752834
User 80087 does not improve AUC. Reverting changes.
Training on augumented user 85295 23/50 current_auc = 0.6780045351473922
User 85295 AUC after training: 0.677154195011338
User 85295 does not improve AUC. Reverting changes.
Training on augumented user 32694 24/50 current_auc = 0.6780045351473922
User 32694 AUC after training: 0.6780045351473922
User 32694 does not improve AUC. Reverting changes.
Training on augumented user 104900 25/50 current_auc = 0.6780045351473922
User 104900 AUC after training: 0.6765873015873016
User 104900 does not improve AUC. Reverting changes.
Training on augumented user 55721 26/50 current_auc = 0.6780045351473922
User 55721 AUC after training: 0.6777210884353742
User 55721 does not improve AUC. Reverting changes.
Training on augumented user 105319 27/50 current_auc = 0.6780045351473922
User 105319 AUC after training: 0.6777210884353742
User 105319 does not improve AUC. Reverting changes.
Training on augumented user 39770 28/50 current_auc = 0.6780045351473922
User 39770 AUC after training: 0.679421768707483
User 39770 improves AUC. Keeping the model.
Training on augumented user 124074 29/50 current_auc = 0.679421768707483
User 124074 AUC after training: 0.6799886621315193
User 124074 improves AUC. Keeping the model.
Training on augumented user 75092 30/50 current_auc = 0.6799886621315193
User 75092 AUC after training: 0.6785714285714286
User 75092 does not improve AUC. Reverting changes.
Training on augumented user 11055 31/50 current_auc = 0.6799886621315193
User 11055 AUC after training: 0.6797052154195011
User 11055 does not improve AUC. Reverting changes.
Training on augumented user 7731 32/50 current_auc = 0.6799886621315193
User 7731 AUC after training: 0.6785714285714286
User 7731 does not improve AUC. Reverting changes.
Training on augumented user 23724 33/50 current_auc = 0.6799886621315193
User 23724 AUC after training: 0.679138321995465
User 23724 does not improve AUC. Reverting changes.
Training on augumented user 37833 34/50 current_auc = 0.6799886621315193
User 37833 AUC after training: 0.6797052154195011
User 37833 does not improve AUC. Reverting changes.
Training on augumented user 24294 35/50 current_auc = 0.6799886621315193
User 24294 AUC after training: 0.6788548752834467
User 24294 does not improve AUC. Reverting changes.
Training on augumented user 100219 36/50 current_auc = 0.6799886621315193
User 100219 AUC after training: 0.6797052154195011
User 100219 does not improve AUC. Reverting changes.
Training on augumented user 125004 37/50 current_auc = 0.6799886621315193
User 125004 AUC after training: 0.679138321995465
User 125004 does not improve AUC. Reverting changes.
Training on augumented user 68792 38/50 current_auc = 0.6799886621315193
User 68792 AUC after training: 0.6774376417233561
User 68792 does not improve AUC. Reverting changes.
Training on augumented user 2205 39/50 current_auc = 0.6799886621315193
User 2205 AUC after training: 0.6797052154195011
User 2205 does not improve AUC. Reverting changes.
Training on augumented user 109248 40/50 current_auc = 0.6799886621315193
User 109248 AUC after training: 0.6785714285714286
User 109248 does not improve AUC. Reverting changes.
Training on augumented user 31505 41/50 current_auc = 0.6799886621315193
User 31505 AUC after training: 0.6791383219954649
User 31505 does not improve AUC. Reverting changes.
Training on augumented user 69901 42/50 current_auc = 0.6799886621315193
User 69901 AUC after training: 0.679421768707483
User 69901 does not improve AUC. Reverting changes.
Training on augumented user 84919 43/50 current_auc = 0.6799886621315193
User 84919 AUC after training: 0.6799886621315193
User 84919 does not improve AUC. Reverting changes.
Training on augumented user 42489 44/50 current_auc = 0.6799886621315193
User 42489 AUC after training: 0.6782879818594104
User 42489 does not improve AUC. Reverting changes.
Training on augumented user 40658 45/50 current_auc = 0.6799886621315193
User 40658 AUC after training: 0.6808390022675738
User 40658 improves AUC. Keeping the model.
Training on augumented user 5584 46/50 current_auc = 0.6808390022675738
User 5584 AUC after training: 0.6808390022675738
User 5584 does not improve AUC. Reverting changes.
Training on augumented user 87897 47/50 current_auc = 0.6808390022675738
User 87897 AUC after training: 0.6814058956916099
User 87897 improves AUC. Keeping the model.
Training on augumented user 48967 48/50 current_auc = 0.6814058956916099
User 48967 AUC after training: 0.6808390022675737
User 48967 does not improve AUC. Reverting changes.
Training on augumented user 40086 49/50 current_auc = 0.6814058956916099
User 40086 AUC after training: 0.6816893424036282
User 40086 improves AUC. Keeping the model.
[2024-12-02 19:29:28.997470] start test user 18415 206/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:29.428343] start test user 18415 206/568 recall augumented users by random, augumented_users = [101745, 1876, 18821, 72571, 17774, 34626, 124083, 125688, 84362, 60067, 85880, 62634, 85461, 50623, 98076, 125758, 104236, 97585, 75619, 77443, 78658, 46018, 48298, 45724, 89980, 8491, 78775, 25851, 5507, 83698, 47055, 41624, 38446, 96515, 68656, 45286, 80607, 130334, 110094, 75970, 128464, 3876, 96251, 26998, 65248, 26043, 96183, 32785, 113046, 125466]
[2024-12-02 19:29:29.445240] user = 18415 Cloud 206/568
[2024-12-02 19:29:29.463143] user = 18415 Local 206/568
[2024-12-02 19:29:29.693434] user = 18415 Local+ 206/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:31.486243] user = 18415 MPDA- 206/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5534848484848485
Training on augumented user 101745 0/50 current_auc = 0.5534848484848485
User 101745 AUC after training: 0.5521212121212121
User 101745 does not improve AUC. Reverting changes.
Training on augumented user 1876 1/50 current_auc = 0.5534848484848485
User 1876 AUC after training: 0.5527272727272726
User 1876 does not improve AUC. Reverting changes.
Training on augumented user 18821 2/50 current_auc = 0.5534848484848485
User 18821 AUC after training: 0.5525757575757575
User 18821 does not improve AUC. Reverting changes.
Training on augumented user 72571 3/50 current_auc = 0.5534848484848485
User 72571 AUC after training: 0.5527272727272727
User 72571 does not improve AUC. Reverting changes.
Training on augumented user 17774 4/50 current_auc = 0.5534848484848485
User 17774 AUC after training: 0.5525757575757575
User 17774 does not improve AUC. Reverting changes.
Training on augumented user 34626 5/50 current_auc = 0.5534848484848485
User 34626 AUC after training: 0.5518181818181818
User 34626 does not improve AUC. Reverting changes.
Training on augumented user 124083 6/50 current_auc = 0.5534848484848485
User 124083 AUC after training: 0.5527272727272727
User 124083 does not improve AUC. Reverting changes.
Training on augumented user 125688 7/50 current_auc = 0.5534848484848485
User 125688 AUC after training: 0.5531818181818182
User 125688 does not improve AUC. Reverting changes.
Training on augumented user 84362 8/50 current_auc = 0.5534848484848485
User 84362 AUC after training: 0.5533333333333332
User 84362 does not improve AUC. Reverting changes.
Training on augumented user 60067 9/50 current_auc = 0.5534848484848485
User 60067 AUC after training: 0.5533333333333332
User 60067 does not improve AUC. Reverting changes.
Training on augumented user 85880 10/50 current_auc = 0.5534848484848485
User 85880 AUC after training: 0.553030303030303
User 85880 does not improve AUC. Reverting changes.
Training on augumented user 62634 11/50 current_auc = 0.5534848484848485
User 62634 AUC after training: 0.5525757575757575
User 62634 does not improve AUC. Reverting changes.
Training on augumented user 85461 12/50 current_auc = 0.5534848484848485
User 85461 AUC after training: 0.5534848484848485
User 85461 does not improve AUC. Reverting changes.
Training on augumented user 50623 13/50 current_auc = 0.5534848484848485
User 50623 AUC after training: 0.5522727272727272
User 50623 does not improve AUC. Reverting changes.
Training on augumented user 98076 14/50 current_auc = 0.5534848484848485
User 98076 AUC after training: 0.553030303030303
User 98076 does not improve AUC. Reverting changes.
Training on augumented user 125758 15/50 current_auc = 0.5534848484848485
User 125758 AUC after training: 0.5533333333333333
User 125758 does not improve AUC. Reverting changes.
Training on augumented user 104236 16/50 current_auc = 0.5534848484848485
User 104236 AUC after training: 0.5534848484848485
User 104236 does not improve AUC. Reverting changes.
Training on augumented user 97585 17/50 current_auc = 0.5534848484848485
User 97585 AUC after training: 0.5524242424242425
User 97585 does not improve AUC. Reverting changes.
Training on augumented user 75619 18/50 current_auc = 0.5534848484848485
User 75619 AUC after training: 0.5528787878787879
User 75619 does not improve AUC. Reverting changes.
Training on augumented user 77443 19/50 current_auc = 0.5534848484848485
User 77443 AUC after training: 0.553030303030303
User 77443 does not improve AUC. Reverting changes.
Training on augumented user 78658 20/50 current_auc = 0.5534848484848485
User 78658 AUC after training: 0.5531818181818182
User 78658 does not improve AUC. Reverting changes.
Training on augumented user 46018 21/50 current_auc = 0.5534848484848485
User 46018 AUC after training: 0.5527272727272727
User 46018 does not improve AUC. Reverting changes.
Training on augumented user 48298 22/50 current_auc = 0.5534848484848485
User 48298 AUC after training: 0.5522727272727272
User 48298 does not improve AUC. Reverting changes.
Training on augumented user 45724 23/50 current_auc = 0.5534848484848485
User 45724 AUC after training: 0.5527272727272727
User 45724 does not improve AUC. Reverting changes.
Training on augumented user 89980 24/50 current_auc = 0.5534848484848485
User 89980 AUC after training: 0.5527272727272727
User 89980 does not improve AUC. Reverting changes.
Training on augumented user 8491 25/50 current_auc = 0.5534848484848485
User 8491 AUC after training: 0.5533333333333332
User 8491 does not improve AUC. Reverting changes.
Training on augumented user 78775 26/50 current_auc = 0.5534848484848485
User 78775 AUC after training: 0.5534848484848485
User 78775 does not improve AUC. Reverting changes.
Training on augumented user 25851 27/50 current_auc = 0.5534848484848485
User 25851 AUC after training: 0.5536363636363636
User 25851 improves AUC. Keeping the model.
Training on augumented user 5507 28/50 current_auc = 0.5536363636363636
User 5507 AUC after training: 0.5522727272727272
User 5507 does not improve AUC. Reverting changes.
Training on augumented user 83698 29/50 current_auc = 0.5536363636363636
User 83698 AUC after training: 0.5515151515151515
User 83698 does not improve AUC. Reverting changes.
Training on augumented user 47055 30/50 current_auc = 0.5536363636363636
User 47055 AUC after training: 0.5516666666666667
User 47055 does not improve AUC. Reverting changes.
Training on augumented user 41624 31/50 current_auc = 0.5536363636363636
User 41624 AUC after training: 0.5531818181818181
User 41624 does not improve AUC. Reverting changes.
Training on augumented user 38446 32/50 current_auc = 0.5536363636363636
User 38446 AUC after training: 0.5531818181818181
User 38446 does not improve AUC. Reverting changes.
Training on augumented user 96515 33/50 current_auc = 0.5536363636363636
User 96515 AUC after training: 0.5533333333333333
User 96515 does not improve AUC. Reverting changes.
Training on augumented user 68656 34/50 current_auc = 0.5536363636363636
User 68656 AUC after training: 0.5528787878787879
User 68656 does not improve AUC. Reverting changes.
Training on augumented user 45286 35/50 current_auc = 0.5536363636363636
User 45286 AUC after training: 0.5543939393939394
User 45286 improves AUC. Keeping the model.
Training on augumented user 80607 36/50 current_auc = 0.5543939393939394
User 80607 AUC after training: 0.5531818181818182
User 80607 does not improve AUC. Reverting changes.
Training on augumented user 130334 37/50 current_auc = 0.5543939393939394
User 130334 AUC after training: 0.5540909090909091
User 130334 does not improve AUC. Reverting changes.
Training on augumented user 110094 38/50 current_auc = 0.5543939393939394
User 110094 AUC after training: 0.5543939393939394
User 110094 does not improve AUC. Reverting changes.
Training on augumented user 75970 39/50 current_auc = 0.5543939393939394
User 75970 AUC after training: 0.5537878787878788
User 75970 does not improve AUC. Reverting changes.
Training on augumented user 128464 40/50 current_auc = 0.5543939393939394
User 128464 AUC after training: 0.5542424242424242
User 128464 does not improve AUC. Reverting changes.
Training on augumented user 3876 41/50 current_auc = 0.5543939393939394
User 3876 AUC after training: 0.553030303030303
User 3876 does not improve AUC. Reverting changes.
Training on augumented user 96251 42/50 current_auc = 0.5543939393939394
User 96251 AUC after training: 0.5545454545454545
User 96251 improves AUC. Keeping the model.
Training on augumented user 26998 43/50 current_auc = 0.5545454545454545
User 26998 AUC after training: 0.5542424242424242
User 26998 does not improve AUC. Reverting changes.
Training on augumented user 65248 44/50 current_auc = 0.5545454545454545
User 65248 AUC after training: 0.5548484848484849
User 65248 improves AUC. Keeping the model.
Training on augumented user 26043 45/50 current_auc = 0.5548484848484849
User 26043 AUC after training: 0.5549999999999999
User 26043 improves AUC. Keeping the model.
Training on augumented user 96183 46/50 current_auc = 0.5549999999999999
User 96183 AUC after training: 0.5559090909090909
User 96183 improves AUC. Keeping the model.
Training on augumented user 32785 47/50 current_auc = 0.5559090909090909
User 32785 AUC after training: 0.5556060606060607
User 32785 does not improve AUC. Reverting changes.
Training on augumented user 113046 48/50 current_auc = 0.5559090909090909
User 113046 AUC after training: 0.5553030303030302
User 113046 does not improve AUC. Reverting changes.
Training on augumented user 125466 49/50 current_auc = 0.5559090909090909
User 125466 AUC after training: 0.5553030303030304
User 125466 does not improve AUC. Reverting changes.
[2024-12-02 19:30:03.919383] start test user 18470 207/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:04.571228] start test user 18470 207/568 recall augumented users by random, augumented_users = [94988, 46813, 101901, 1249, 109133, 118878, 65438, 61115, 114071, 24313, 29920, 102174, 5404, 6305, 82964, 127061, 49185, 76445, 59762, 30986, 118753, 37990, 90845, 60230, 136397, 48384, 61377, 48429, 91046, 34680, 124682, 67699, 18705, 100569, 71714, 46343, 87612, 10435, 102216, 56440, 37099, 118763, 54968, 52826, 80204, 54928, 134008, 113846, 20644, 84818]
[2024-12-02 19:30:04.586651] user = 18470 Cloud 207/568
[2024-12-02 19:30:04.596343] user = 18470 Local 207/568
[2024-12-02 19:30:04.697084] user = 18470 Local+ 207/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:07.442455] user = 18470 MPDA- 207/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.45
Training on augumented user 94988 0/50 current_auc = 0.45
User 94988 AUC after training: 0.45
User 94988 does not improve AUC. Reverting changes.
Training on augumented user 46813 1/50 current_auc = 0.45
User 46813 AUC after training: 0.45
User 46813 does not improve AUC. Reverting changes.
Training on augumented user 101901 2/50 current_auc = 0.45
User 101901 AUC after training: 0.45
User 101901 does not improve AUC. Reverting changes.
Training on augumented user 1249 3/50 current_auc = 0.45
User 1249 AUC after training: 0.45
User 1249 does not improve AUC. Reverting changes.
Training on augumented user 109133 4/50 current_auc = 0.45
User 109133 AUC after training: 0.45
User 109133 does not improve AUC. Reverting changes.
Training on augumented user 118878 5/50 current_auc = 0.45
User 118878 AUC after training: 0.45
User 118878 does not improve AUC. Reverting changes.
Training on augumented user 65438 6/50 current_auc = 0.45
User 65438 AUC after training: 0.45
User 65438 does not improve AUC. Reverting changes.
Training on augumented user 61115 7/50 current_auc = 0.45
User 61115 AUC after training: 0.45
User 61115 does not improve AUC. Reverting changes.
Training on augumented user 114071 8/50 current_auc = 0.45
User 114071 AUC after training: 0.45
User 114071 does not improve AUC. Reverting changes.
Training on augumented user 24313 9/50 current_auc = 0.45
User 24313 AUC after training: 0.45
User 24313 does not improve AUC. Reverting changes.
Training on augumented user 29920 10/50 current_auc = 0.45
User 29920 AUC after training: 0.45
User 29920 does not improve AUC. Reverting changes.
Training on augumented user 102174 11/50 current_auc = 0.45
User 102174 AUC after training: 0.45
User 102174 does not improve AUC. Reverting changes.
Training on augumented user 5404 12/50 current_auc = 0.45
User 5404 AUC after training: 0.45
User 5404 does not improve AUC. Reverting changes.
Training on augumented user 6305 13/50 current_auc = 0.45
User 6305 AUC after training: 0.45
User 6305 does not improve AUC. Reverting changes.
Training on augumented user 82964 14/50 current_auc = 0.45
User 82964 AUC after training: 0.45
User 82964 does not improve AUC. Reverting changes.
Training on augumented user 127061 15/50 current_auc = 0.45
User 127061 AUC after training: 0.45
User 127061 does not improve AUC. Reverting changes.
Training on augumented user 49185 16/50 current_auc = 0.45
User 49185 AUC after training: 0.45
User 49185 does not improve AUC. Reverting changes.
Training on augumented user 76445 17/50 current_auc = 0.45
User 76445 AUC after training: 0.45
User 76445 does not improve AUC. Reverting changes.
Training on augumented user 59762 18/50 current_auc = 0.45
User 59762 AUC after training: 0.45
User 59762 does not improve AUC. Reverting changes.
Training on augumented user 30986 19/50 current_auc = 0.45
User 30986 AUC after training: 0.45
User 30986 does not improve AUC. Reverting changes.
Training on augumented user 118753 20/50 current_auc = 0.45
User 118753 AUC after training: 0.45
User 118753 does not improve AUC. Reverting changes.
Training on augumented user 37990 21/50 current_auc = 0.45
User 37990 AUC after training: 0.45
User 37990 does not improve AUC. Reverting changes.
Training on augumented user 90845 22/50 current_auc = 0.45
User 90845 AUC after training: 0.45
User 90845 does not improve AUC. Reverting changes.
Training on augumented user 60230 23/50 current_auc = 0.45
User 60230 AUC after training: 0.45
User 60230 does not improve AUC. Reverting changes.
Training on augumented user 136397 24/50 current_auc = 0.45
User 136397 AUC after training: 0.45
User 136397 does not improve AUC. Reverting changes.
Training on augumented user 48384 25/50 current_auc = 0.45
User 48384 AUC after training: 0.45
User 48384 does not improve AUC. Reverting changes.
Training on augumented user 61377 26/50 current_auc = 0.45
User 61377 AUC after training: 0.45
User 61377 does not improve AUC. Reverting changes.
Training on augumented user 48429 27/50 current_auc = 0.45
User 48429 AUC after training: 0.45
User 48429 does not improve AUC. Reverting changes.
Training on augumented user 91046 28/50 current_auc = 0.45
User 91046 AUC after training: 0.45
User 91046 does not improve AUC. Reverting changes.
Training on augumented user 34680 29/50 current_auc = 0.45
User 34680 AUC after training: 0.45
User 34680 does not improve AUC. Reverting changes.
Training on augumented user 124682 30/50 current_auc = 0.45
User 124682 AUC after training: 0.45
User 124682 does not improve AUC. Reverting changes.
Training on augumented user 67699 31/50 current_auc = 0.45
User 67699 AUC after training: 0.45
User 67699 does not improve AUC. Reverting changes.
Training on augumented user 18705 32/50 current_auc = 0.45
User 18705 AUC after training: 0.45
User 18705 does not improve AUC. Reverting changes.
Training on augumented user 100569 33/50 current_auc = 0.45
User 100569 AUC after training: 0.45
User 100569 does not improve AUC. Reverting changes.
Training on augumented user 71714 34/50 current_auc = 0.45
User 71714 AUC after training: 0.45
User 71714 does not improve AUC. Reverting changes.
Training on augumented user 46343 35/50 current_auc = 0.45
User 46343 AUC after training: 0.45
User 46343 does not improve AUC. Reverting changes.
Training on augumented user 87612 36/50 current_auc = 0.45
User 87612 AUC after training: 0.45
User 87612 does not improve AUC. Reverting changes.
Training on augumented user 10435 37/50 current_auc = 0.45
User 10435 AUC after training: 0.45
User 10435 does not improve AUC. Reverting changes.
Training on augumented user 102216 38/50 current_auc = 0.45
User 102216 AUC after training: 0.45
User 102216 does not improve AUC. Reverting changes.
Training on augumented user 56440 39/50 current_auc = 0.45
User 56440 AUC after training: 0.45
User 56440 does not improve AUC. Reverting changes.
Training on augumented user 37099 40/50 current_auc = 0.45
User 37099 AUC after training: 0.45
User 37099 does not improve AUC. Reverting changes.
Training on augumented user 118763 41/50 current_auc = 0.45
User 118763 AUC after training: 0.45
User 118763 does not improve AUC. Reverting changes.
Training on augumented user 54968 42/50 current_auc = 0.45
User 54968 AUC after training: 0.45
User 54968 does not improve AUC. Reverting changes.
Training on augumented user 52826 43/50 current_auc = 0.45
User 52826 AUC after training: 0.45
User 52826 does not improve AUC. Reverting changes.
Training on augumented user 80204 44/50 current_auc = 0.45
User 80204 AUC after training: 0.45
User 80204 does not improve AUC. Reverting changes.
Training on augumented user 54928 45/50 current_auc = 0.45
User 54928 AUC after training: 0.45
User 54928 does not improve AUC. Reverting changes.
Training on augumented user 134008 46/50 current_auc = 0.45
User 134008 AUC after training: 0.45
User 134008 does not improve AUC. Reverting changes.
Training on augumented user 113846 47/50 current_auc = 0.45
User 113846 AUC after training: 0.45
User 113846 does not improve AUC. Reverting changes.
Training on augumented user 20644 48/50 current_auc = 0.45
User 20644 AUC after training: 0.45
User 20644 does not improve AUC. Reverting changes.
Training on augumented user 84818 49/50 current_auc = 0.45
User 84818 AUC after training: 0.45
User 84818 does not improve AUC. Reverting changes.
[2024-12-02 19:30:37.405260] start test user 18496 208/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:37.817650] start test user 18496 208/568 recall augumented users by random, augumented_users = [18338, 26373, 20885, 69456, 102230, 121088, 120305, 67197, 128681, 84966, 101453, 94643, 32883, 76818, 55549, 87983, 46225, 30576, 7713, 123708, 70629, 2870, 97572, 70191, 68074, 39779, 34544, 94450, 73985, 6928, 73077, 72567, 93983, 124634, 89301, 17000, 100691, 48626, 52775, 47501, 129565, 112282, 37753, 64382, 36742, 19538, 1876, 37903, 43144, 124787]
[2024-12-02 19:30:37.834547] user = 18496 Cloud 208/568
[2024-12-02 19:30:37.875007] user = 18496 Local 208/568
[2024-12-02 19:30:38.024870] user = 18496 Local+ 208/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:40.447407] user = 18496 MPDA- 208/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6430200058840835
Training on augumented user 18338 0/50 current_auc = 0.6430200058840835
User 18338 AUC after training: 0.6434613121506325
User 18338 improves AUC. Keeping the model.
Training on augumented user 26373 1/50 current_auc = 0.6434613121506325
User 26373 AUC after training: 0.6433877611062078
User 26373 does not improve AUC. Reverting changes.
Training on augumented user 20885 2/50 current_auc = 0.6434613121506325
User 20885 AUC after training: 0.6436819652839071
User 20885 improves AUC. Keeping the model.
Training on augumented user 69456 3/50 current_auc = 0.6436819652839071
User 69456 AUC after training: 0.6437187408061195
User 69456 improves AUC. Keeping the model.
Training on augumented user 102230 4/50 current_auc = 0.6437187408061195
User 102230 AUC after training: 0.6433142100617828
User 102230 does not improve AUC. Reverting changes.
Training on augumented user 121088 5/50 current_auc = 0.6437187408061195
User 121088 AUC after training: 0.6436084142394822
User 121088 does not improve AUC. Reverting changes.
Training on augumented user 120305 6/50 current_auc = 0.6437187408061195
User 120305 AUC after training: 0.6434613121506325
User 120305 does not improve AUC. Reverting changes.
Training on augumented user 67197 7/50 current_auc = 0.6437187408061195
User 67197 AUC after training: 0.6436451897616946
User 67197 does not improve AUC. Reverting changes.
Training on augumented user 128681 8/50 current_auc = 0.6437187408061195
User 128681 AUC after training: 0.6435716387172697
User 128681 does not improve AUC. Reverting changes.
Training on augumented user 84966 9/50 current_auc = 0.6437187408061195
User 84966 AUC after training: 0.6437922918505443
User 84966 improves AUC. Keeping the model.
Training on augumented user 101453 10/50 current_auc = 0.6437922918505443
User 101453 AUC after training: 0.644123271550456
User 101453 improves AUC. Keeping the model.
Training on augumented user 94643 11/50 current_auc = 0.644123271550456
User 94643 AUC after training: 0.6440129449838188
User 94643 does not improve AUC. Reverting changes.
Training on augumented user 32883 12/50 current_auc = 0.644123271550456
User 32883 AUC after training: 0.6436451897616946
User 32883 does not improve AUC. Reverting changes.
Training on augumented user 76818 13/50 current_auc = 0.644123271550456
User 76818 AUC after training: 0.6440497205060313
User 76818 does not improve AUC. Reverting changes.
Training on augumented user 55549 14/50 current_auc = 0.644123271550456
User 55549 AUC after training: 0.6440864960282436
User 55549 does not improve AUC. Reverting changes.
Training on augumented user 87983 15/50 current_auc = 0.644123271550456
User 87983 AUC after training: 0.6439026184171817
User 87983 does not improve AUC. Reverting changes.
Training on augumented user 46225 16/50 current_auc = 0.644123271550456
User 46225 AUC after training: 0.6441232715504561
User 46225 improves AUC. Keeping the model.
Training on augumented user 30576 17/50 current_auc = 0.6441232715504561
User 30576 AUC after training: 0.644564577817005
User 30576 improves AUC. Keeping the model.
Training on augumented user 7713 18/50 current_auc = 0.644564577817005
User 7713 AUC after training: 0.6447852309502795
User 7713 improves AUC. Keeping the model.
Training on augumented user 123708 19/50 current_auc = 0.6447852309502795
User 123708 AUC after training: 0.643681965283907
User 123708 does not improve AUC. Reverting changes.
Training on augumented user 70629 20/50 current_auc = 0.6447852309502795
User 70629 AUC after training: 0.6450794351279788
User 70629 improves AUC. Keeping the model.
Training on augumented user 2870 21/50 current_auc = 0.6450794351279788
User 2870 AUC after training: 0.6447852309502796
User 2870 does not improve AUC. Reverting changes.
Training on augumented user 97572 22/50 current_auc = 0.6450794351279788
User 97572 AUC after training: 0.6448955575169167
User 97572 does not improve AUC. Reverting changes.
Training on augumented user 70191 23/50 current_auc = 0.6450794351279788
User 70191 AUC after training: 0.644564577817005
User 70191 does not improve AUC. Reverting changes.
Training on augumented user 68074 24/50 current_auc = 0.6450794351279788
User 68074 AUC after training: 0.6450426596057663
User 68074 does not improve AUC. Reverting changes.
Training on augumented user 39779 25/50 current_auc = 0.6450794351279788
User 39779 AUC after training: 0.6449323330391291
User 39779 does not improve AUC. Reverting changes.
Training on augumented user 34544 26/50 current_auc = 0.6450794351279788
User 34544 AUC after training: 0.6442703736393056
User 34544 does not improve AUC. Reverting changes.
Training on augumented user 94450 27/50 current_auc = 0.6450794351279788
User 94450 AUC after training: 0.6448955575169167
User 94450 does not improve AUC. Reverting changes.
Training on augumented user 73985 28/50 current_auc = 0.6450794351279788
User 73985 AUC after training: 0.6450794351279788
User 73985 does not improve AUC. Reverting changes.
Training on augumented user 6928 29/50 current_auc = 0.6450794351279788
User 6928 AUC after training: 0.6447484554280671
User 6928 does not improve AUC. Reverting changes.
Training on augumented user 73077 30/50 current_auc = 0.6450794351279788
User 73077 AUC after training: 0.6448955575169167
User 73077 does not improve AUC. Reverting changes.
Training on augumented user 72567 31/50 current_auc = 0.6450794351279788
User 72567 AUC after training: 0.644822006472492
User 72567 does not improve AUC. Reverting changes.
Training on augumented user 93983 32/50 current_auc = 0.6450794351279788
User 93983 AUC after training: 0.6450794351279787
User 93983 does not improve AUC. Reverting changes.
Training on augumented user 124634 33/50 current_auc = 0.6450794351279788
User 124634 AUC after training: 0.6444174757281554
User 124634 does not improve AUC. Reverting changes.
Training on augumented user 89301 34/50 current_auc = 0.6450794351279788
User 89301 AUC after training: 0.6441600470726685
User 89301 does not improve AUC. Reverting changes.
Training on augumented user 17000 35/50 current_auc = 0.6450794351279788
User 17000 AUC after training: 0.6447852309502794
User 17000 does not improve AUC. Reverting changes.
Training on augumented user 100691 36/50 current_auc = 0.6450794351279788
User 100691 AUC after training: 0.6450794351279788
User 100691 does not improve AUC. Reverting changes.
Training on augumented user 48626 37/50 current_auc = 0.6450794351279788
User 48626 AUC after training: 0.6449323330391291
User 48626 does not improve AUC. Reverting changes.
Training on augumented user 52775 38/50 current_auc = 0.6450794351279788
User 52775 AUC after training: 0.6444174757281553
User 52775 does not improve AUC. Reverting changes.
Training on augumented user 47501 39/50 current_auc = 0.6450794351279788
User 47501 AUC after training: 0.6447852309502795
User 47501 does not improve AUC. Reverting changes.
Training on augumented user 129565 40/50 current_auc = 0.6450794351279788
User 129565 AUC after training: 0.6448587819947043
User 129565 does not improve AUC. Reverting changes.
Training on augumented user 112282 41/50 current_auc = 0.6450794351279788
User 112282 AUC after training: 0.6447852309502795
User 112282 does not improve AUC. Reverting changes.
Training on augumented user 37753 42/50 current_auc = 0.6450794351279788
User 37753 AUC after training: 0.6449323330391292
User 37753 does not improve AUC. Reverting changes.
Training on augumented user 64382 43/50 current_auc = 0.6450794351279788
User 64382 AUC after training: 0.6446749043836423
User 64382 does not improve AUC. Reverting changes.
Training on augumented user 36742 44/50 current_auc = 0.6450794351279788
User 36742 AUC after training: 0.644123271550456
User 36742 does not improve AUC. Reverting changes.
Training on augumented user 19538 45/50 current_auc = 0.6450794351279788
User 19538 AUC after training: 0.6443439246837306
User 19538 does not improve AUC. Reverting changes.
Training on augumented user 1876 46/50 current_auc = 0.6450794351279788
User 1876 AUC after training: 0.6434245366284201
User 1876 does not improve AUC. Reverting changes.
Training on augumented user 37903 47/50 current_auc = 0.6450794351279788
User 37903 AUC after training: 0.6447852309502795
User 37903 does not improve AUC. Reverting changes.
Training on augumented user 43144 48/50 current_auc = 0.6450794351279788
User 43144 AUC after training: 0.6440497205060313
User 43144 does not improve AUC. Reverting changes.
Training on augumented user 124787 49/50 current_auc = 0.6450794351279788
User 124787 AUC after training: 0.645005884083554
User 124787 does not improve AUC. Reverting changes.
[2024-12-02 19:31:08.176916] start test user 18515 209/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:08.954136] start test user 18515 209/568 recall augumented users by random, augumented_users = [3168, 7757, 54340, 92619, 978, 100482, 48180, 131465, 65546, 125961, 108268, 93314, 80834, 92943, 18816, 85617, 85056, 33995, 63270, 77262, 66345, 8152, 93680, 126014, 2064, 70387, 31801, 56086, 36873, 35210, 114566, 60606, 96455, 51958, 12600, 90176, 7870, 109904, 60386, 84972, 133728, 3005, 48583, 130825, 11332, 100961, 38824, 138281, 43388, 1367]
[2024-12-02 19:31:08.984566] user = 18515 Cloud 209/568
[2024-12-02 19:31:09.097200] user = 18515 Local 209/568
[2024-12-02 19:31:09.265254] user = 18515 Local+ 209/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:11.339785] user = 18515 MPDA- 209/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7500807829017218
Training on augumented user 3168 0/50 current_auc = 0.7500807829017218
User 3168 AUC after training: 0.75081936943175
User 3168 improves AUC. Keeping the model.
Training on augumented user 7757 1/50 current_auc = 0.75081936943175
User 7757 AUC after training: 0.7511886626967641
User 7757 improves AUC. Keeping the model.
Training on augumented user 54340 2/50 current_auc = 0.7511886626967641
User 54340 AUC after training: 0.7514656326455246
User 54340 improves AUC. Keeping the model.
Training on augumented user 92619 3/50 current_auc = 0.7514656326455246
User 92619 AUC after training: 0.7513271476711443
User 92619 does not improve AUC. Reverting changes.
Training on augumented user 978 4/50 current_auc = 0.7514656326455246
User 978 AUC after training: 0.7513271476711444
User 978 does not improve AUC. Reverting changes.
Training on augumented user 100482 5/50 current_auc = 0.7514656326455246
User 100482 AUC after training: 0.7509116927480035
User 100482 does not improve AUC. Reverting changes.
Training on augumented user 48180 6/50 current_auc = 0.7514656326455246
User 48180 AUC after training: 0.7514656326455247
User 48180 improves AUC. Keeping the model.
Training on augumented user 131465 7/50 current_auc = 0.7514656326455247
User 131465 AUC after training: 0.7511886626967641
User 131465 does not improve AUC. Reverting changes.
Training on augumented user 65546 8/50 current_auc = 0.7514656326455247
User 65546 AUC after training: 0.7514656326455246
User 65546 does not improve AUC. Reverting changes.
Training on augumented user 125961 9/50 current_auc = 0.7514656326455247
User 125961 AUC after training: 0.7515579559617782
User 125961 improves AUC. Keeping the model.
Training on augumented user 108268 10/50 current_auc = 0.7515579559617782
User 108268 AUC after training: 0.7513271476711443
User 108268 does not improve AUC. Reverting changes.
Training on augumented user 93314 11/50 current_auc = 0.7515579559617782
User 93314 AUC after training: 0.7518810875686655
User 93314 improves AUC. Keeping the model.
Training on augumented user 80834 12/50 current_auc = 0.7518810875686655
User 80834 AUC after training: 0.7520195725430457
User 80834 improves AUC. Keeping the model.
Training on augumented user 92943 13/50 current_auc = 0.7520195725430457
User 92943 AUC after training: 0.7511886626967641
User 92943 does not improve AUC. Reverting changes.
Training on augumented user 18816 14/50 current_auc = 0.7520195725430457
User 18816 AUC after training: 0.7521118958592993
User 18816 improves AUC. Keeping the model.
Training on augumented user 85617 15/50 current_auc = 0.7521118958592993
User 85617 AUC after training: 0.7532197756543415
User 85617 improves AUC. Keeping the model.
Training on augumented user 85056 16/50 current_auc = 0.7532197756543415
User 85056 AUC after training: 0.7532197756543415
User 85056 does not improve AUC. Reverting changes.
Training on augumented user 33995 17/50 current_auc = 0.7532197756543415
User 33995 AUC after training: 0.7517426025942852
User 33995 does not improve AUC. Reverting changes.
Training on augumented user 63270 18/50 current_auc = 0.7532197756543415
User 63270 AUC after training: 0.7525735124405669
User 63270 does not improve AUC. Reverting changes.
Training on augumented user 77262 19/50 current_auc = 0.7532197756543415
User 77262 AUC after training: 0.7521118958592993
User 77262 does not improve AUC. Reverting changes.
Training on augumented user 66345 20/50 current_auc = 0.7532197756543415
User 66345 AUC after training: 0.7522965424918062
User 66345 does not improve AUC. Reverting changes.
Training on augumented user 8152 21/50 current_auc = 0.7532197756543415
User 8152 AUC after training: 0.7535429072612289
User 8152 improves AUC. Keeping the model.
Training on augumented user 93680 22/50 current_auc = 0.7535429072612289
User 93680 AUC after training: 0.7530812906799612
User 93680 does not improve AUC. Reverting changes.
Training on augumented user 126014 23/50 current_auc = 0.7535429072612289
User 126014 AUC after training: 0.7537275538937358
User 126014 improves AUC. Keeping the model.
Training on augumented user 2064 24/50 current_auc = 0.7537275538937358
User 2064 AUC after training: 0.7531736139962149
User 2064 does not improve AUC. Reverting changes.
Training on augumented user 70387 25/50 current_auc = 0.7537275538937358
User 70387 AUC after training: 0.7540045238424964
User 70387 improves AUC. Keeping the model.
Training on augumented user 31801 26/50 current_auc = 0.7540045238424964
User 31801 AUC after training: 0.7538660388681162
User 31801 does not improve AUC. Reverting changes.
Training on augumented user 56086 27/50 current_auc = 0.7540045238424964
User 56086 AUC after training: 0.7542353321331302
User 56086 improves AUC. Keeping the model.
Training on augumented user 36873 28/50 current_auc = 0.7542353321331302
User 36873 AUC after training: 0.7539583621843696
User 36873 does not improve AUC. Reverting changes.
Training on augumented user 35210 29/50 current_auc = 0.7542353321331302
User 35210 AUC after training: 0.7538660388681161
User 35210 does not improve AUC. Reverting changes.
Training on augumented user 114566 30/50 current_auc = 0.7542353321331302
User 114566 AUC after training: 0.7541891704750034
User 114566 does not improve AUC. Reverting changes.
Training on augumented user 60606 31/50 current_auc = 0.7542353321331302
User 60606 AUC after training: 0.7541891704750034
User 60606 does not improve AUC. Reverting changes.
Training on augumented user 96455 32/50 current_auc = 0.7542353321331302
User 96455 AUC after training: 0.7543276554493838
User 96455 improves AUC. Keeping the model.
Training on augumented user 51958 33/50 current_auc = 0.7543276554493838
User 51958 AUC after training: 0.7540045238424965
User 51958 does not improve AUC. Reverting changes.
Training on augumented user 12600 34/50 current_auc = 0.7543276554493838
User 12600 AUC after training: 0.7541891704750034
User 12600 does not improve AUC. Reverting changes.
Training on augumented user 90176 35/50 current_auc = 0.7543276554493838
User 90176 AUC after training: 0.7537275538937358
User 90176 does not improve AUC. Reverting changes.
Training on augumented user 7870 36/50 current_auc = 0.7543276554493838
User 7870 AUC after training: 0.7545123020818908
User 7870 improves AUC. Keeping the model.
Training on augumented user 109904 37/50 current_auc = 0.7545123020818908
User 109904 AUC after training: 0.7540045238424964
User 109904 does not improve AUC. Reverting changes.
Training on augumented user 60386 38/50 current_auc = 0.7545123020818908
User 60386 AUC after training: 0.7540968471587499
User 60386 does not improve AUC. Reverting changes.
Training on augumented user 84972 39/50 current_auc = 0.7545123020818908
User 84972 AUC after training: 0.7545123020818908
User 84972 does not improve AUC. Reverting changes.
Training on augumented user 133728 40/50 current_auc = 0.7545123020818908
User 133728 AUC after training: 0.7546046253981443
User 133728 improves AUC. Keeping the model.
Training on augumented user 3005 41/50 current_auc = 0.7546046253981443
User 3005 AUC after training: 0.7546969487143977
User 3005 improves AUC. Keeping the model.
Training on augumented user 48583 42/50 current_auc = 0.7546969487143977
User 48583 AUC after training: 0.7544199787656373
User 48583 does not improve AUC. Reverting changes.
Training on augumented user 130825 43/50 current_auc = 0.7546969487143977
User 130825 AUC after training: 0.7546046253981443
User 130825 does not improve AUC. Reverting changes.
Training on augumented user 11332 44/50 current_auc = 0.7546969487143977
User 11332 AUC after training: 0.7543276554493837
User 11332 does not improve AUC. Reverting changes.
Training on augumented user 100961 45/50 current_auc = 0.7546969487143977
User 100961 AUC after training: 0.7546969487143977
User 100961 does not improve AUC. Reverting changes.
Training on augumented user 38824 46/50 current_auc = 0.7546969487143977
User 38824 AUC after training: 0.7547892720306513
User 38824 improves AUC. Keeping the model.
Training on augumented user 138281 47/50 current_auc = 0.7547892720306513
User 138281 AUC after training: 0.7544661404237639
User 138281 does not improve AUC. Reverting changes.
Training on augumented user 43388 48/50 current_auc = 0.7547892720306513
User 43388 AUC after training: 0.754650787056271
User 43388 does not improve AUC. Reverting changes.
Training on augumented user 1367 49/50 current_auc = 0.7547892720306513
User 1367 AUC after training: 0.7540506855006232
User 1367 does not improve AUC. Reverting changes.
[2024-12-02 19:31:42.923802] start test user 18543 210/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:43.402229] start test user 18543 210/568 recall augumented users by random, augumented_users = [121563, 106946, 90676, 97481, 73218, 79143, 27032, 66091, 129539, 102938, 105678, 86032, 64609, 90899, 39308, 111469, 97925, 36422, 45985, 32608, 40545, 92587, 68161, 3646, 93276, 118628, 137462, 111508, 59407, 62679, 95906, 28121, 99130, 78145, 43569, 26404, 98516, 130415, 23061, 133264, 72264, 64518, 90955, 29418, 95539, 73805, 87330, 5060, 39512, 54045]
[2024-12-02 19:31:43.417500] user = 18543 Cloud 210/568
[2024-12-02 19:31:43.428412] user = 18543 Local 210/568
[2024-12-02 19:31:43.516939] user = 18543 Local+ 210/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:46.292581] user = 18543 MPDA- 210/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5277777777777778
Training on augumented user 121563 0/50 current_auc = 0.5277777777777778
User 121563 AUC after training: 0.5231481481481481
User 121563 does not improve AUC. Reverting changes.
Training on augumented user 106946 1/50 current_auc = 0.5277777777777778
User 106946 AUC after training: 0.525462962962963
User 106946 does not improve AUC. Reverting changes.
Training on augumented user 90676 2/50 current_auc = 0.5277777777777778
User 90676 AUC after training: 0.5231481481481481
User 90676 does not improve AUC. Reverting changes.
Training on augumented user 97481 3/50 current_auc = 0.5277777777777778
User 97481 AUC after training: 0.525462962962963
User 97481 does not improve AUC. Reverting changes.
Training on augumented user 73218 4/50 current_auc = 0.5277777777777778
User 73218 AUC after training: 0.5277777777777778
User 73218 does not improve AUC. Reverting changes.
Training on augumented user 79143 5/50 current_auc = 0.5277777777777778
User 79143 AUC after training: 0.5277777777777778
User 79143 does not improve AUC. Reverting changes.
Training on augumented user 27032 6/50 current_auc = 0.5277777777777778
User 27032 AUC after training: 0.525462962962963
User 27032 does not improve AUC. Reverting changes.
Training on augumented user 66091 7/50 current_auc = 0.5277777777777778
User 66091 AUC after training: 0.5300925925925926
User 66091 improves AUC. Keeping the model.
Training on augumented user 129539 8/50 current_auc = 0.5300925925925926
User 129539 AUC after training: 0.5324074074074074
User 129539 improves AUC. Keeping the model.
Training on augumented user 102938 9/50 current_auc = 0.5324074074074074
User 102938 AUC after training: 0.5300925925925926
User 102938 does not improve AUC. Reverting changes.
Training on augumented user 105678 10/50 current_auc = 0.5324074074074074
User 105678 AUC after training: 0.5300925925925926
User 105678 does not improve AUC. Reverting changes.
Training on augumented user 86032 11/50 current_auc = 0.5324074074074074
User 86032 AUC after training: 0.525462962962963
User 86032 does not improve AUC. Reverting changes.
Training on augumented user 64609 12/50 current_auc = 0.5324074074074074
User 64609 AUC after training: 0.5300925925925926
User 64609 does not improve AUC. Reverting changes.
Training on augumented user 90899 13/50 current_auc = 0.5324074074074074
User 90899 AUC after training: 0.5324074074074074
User 90899 does not improve AUC. Reverting changes.
Training on augumented user 39308 14/50 current_auc = 0.5324074074074074
User 39308 AUC after training: 0.5300925925925926
User 39308 does not improve AUC. Reverting changes.
Training on augumented user 111469 15/50 current_auc = 0.5324074074074074
User 111469 AUC after training: 0.5300925925925926
User 111469 does not improve AUC. Reverting changes.
Training on augumented user 97925 16/50 current_auc = 0.5324074074074074
User 97925 AUC after training: 0.5300925925925926
User 97925 does not improve AUC. Reverting changes.
Training on augumented user 36422 17/50 current_auc = 0.5324074074074074
User 36422 AUC after training: 0.5277777777777778
User 36422 does not improve AUC. Reverting changes.
Training on augumented user 45985 18/50 current_auc = 0.5324074074074074
User 45985 AUC after training: 0.5300925925925926
User 45985 does not improve AUC. Reverting changes.
Training on augumented user 32608 19/50 current_auc = 0.5324074074074074
User 32608 AUC after training: 0.5277777777777778
User 32608 does not improve AUC. Reverting changes.
Training on augumented user 40545 20/50 current_auc = 0.5324074074074074
User 40545 AUC after training: 0.5300925925925926
User 40545 does not improve AUC. Reverting changes.
Training on augumented user 92587 21/50 current_auc = 0.5324074074074074
User 92587 AUC after training: 0.5324074074074074
User 92587 does not improve AUC. Reverting changes.
Training on augumented user 68161 22/50 current_auc = 0.5324074074074074
User 68161 AUC after training: 0.5277777777777778
User 68161 does not improve AUC. Reverting changes.
Training on augumented user 3646 23/50 current_auc = 0.5324074074074074
User 3646 AUC after training: 0.5277777777777778
User 3646 does not improve AUC. Reverting changes.
Training on augumented user 93276 24/50 current_auc = 0.5324074074074074
User 93276 AUC after training: 0.5300925925925926
User 93276 does not improve AUC. Reverting changes.
Training on augumented user 118628 25/50 current_auc = 0.5324074074074074
User 118628 AUC after training: 0.5277777777777778
User 118628 does not improve AUC. Reverting changes.
Training on augumented user 137462 26/50 current_auc = 0.5324074074074074
User 137462 AUC after training: 0.525462962962963
User 137462 does not improve AUC. Reverting changes.
Training on augumented user 111508 27/50 current_auc = 0.5324074074074074
User 111508 AUC after training: 0.5324074074074074
User 111508 does not improve AUC. Reverting changes.
Training on augumented user 59407 28/50 current_auc = 0.5324074074074074
User 59407 AUC after training: 0.5208333333333334
User 59407 does not improve AUC. Reverting changes.
Training on augumented user 62679 29/50 current_auc = 0.5324074074074074
User 62679 AUC after training: 0.5300925925925926
User 62679 does not improve AUC. Reverting changes.
Training on augumented user 95906 30/50 current_auc = 0.5324074074074074
User 95906 AUC after training: 0.5300925925925926
User 95906 does not improve AUC. Reverting changes.
Training on augumented user 28121 31/50 current_auc = 0.5324074074074074
User 28121 AUC after training: 0.5277777777777778
User 28121 does not improve AUC. Reverting changes.
Training on augumented user 99130 32/50 current_auc = 0.5324074074074074
User 99130 AUC after training: 0.5277777777777778
User 99130 does not improve AUC. Reverting changes.
Training on augumented user 78145 33/50 current_auc = 0.5324074074074074
User 78145 AUC after training: 0.5277777777777778
User 78145 does not improve AUC. Reverting changes.
Training on augumented user 43569 34/50 current_auc = 0.5324074074074074
User 43569 AUC after training: 0.5300925925925926
User 43569 does not improve AUC. Reverting changes.
Training on augumented user 26404 35/50 current_auc = 0.5324074074074074
User 26404 AUC after training: 0.5300925925925926
User 26404 does not improve AUC. Reverting changes.
Training on augumented user 98516 36/50 current_auc = 0.5324074074074074
User 98516 AUC after training: 0.5300925925925926
User 98516 does not improve AUC. Reverting changes.
Training on augumented user 130415 37/50 current_auc = 0.5324074074074074
User 130415 AUC after training: 0.5277777777777778
User 130415 does not improve AUC. Reverting changes.
Training on augumented user 23061 38/50 current_auc = 0.5324074074074074
User 23061 AUC after training: 0.5277777777777778
User 23061 does not improve AUC. Reverting changes.
Training on augumented user 133264 39/50 current_auc = 0.5324074074074074
User 133264 AUC after training: 0.5277777777777778
User 133264 does not improve AUC. Reverting changes.
Training on augumented user 72264 40/50 current_auc = 0.5324074074074074
User 72264 AUC after training: 0.5324074074074074
User 72264 does not improve AUC. Reverting changes.
Training on augumented user 64518 41/50 current_auc = 0.5324074074074074
User 64518 AUC after training: 0.5300925925925926
User 64518 does not improve AUC. Reverting changes.
Training on augumented user 90955 42/50 current_auc = 0.5324074074074074
User 90955 AUC after training: 0.5300925925925926
User 90955 does not improve AUC. Reverting changes.
Training on augumented user 29418 43/50 current_auc = 0.5324074074074074
User 29418 AUC after training: 0.5300925925925926
User 29418 does not improve AUC. Reverting changes.
Training on augumented user 95539 44/50 current_auc = 0.5324074074074074
User 95539 AUC after training: 0.5300925925925926
User 95539 does not improve AUC. Reverting changes.
Training on augumented user 73805 45/50 current_auc = 0.5324074074074074
User 73805 AUC after training: 0.5208333333333334
User 73805 does not improve AUC. Reverting changes.
Training on augumented user 87330 46/50 current_auc = 0.5324074074074074
User 87330 AUC after training: 0.5300925925925926
User 87330 does not improve AUC. Reverting changes.
Training on augumented user 5060 47/50 current_auc = 0.5324074074074074
User 5060 AUC after training: 0.5300925925925926
User 5060 does not improve AUC. Reverting changes.
Training on augumented user 39512 48/50 current_auc = 0.5324074074074074
User 39512 AUC after training: 0.5277777777777778
User 39512 does not improve AUC. Reverting changes.
Training on augumented user 54045 49/50 current_auc = 0.5324074074074074
User 54045 AUC after training: 0.5300925925925926
User 54045 does not improve AUC. Reverting changes.
[2024-12-02 19:32:11.879434] start test user 18574 211/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:12.321263] start test user 18574 211/568 recall augumented users by random, augumented_users = [49486, 43718, 41758, 102666, 66583, 35689, 97619, 117630, 77087, 130859, 69028, 110788, 82821, 12570, 23749, 74704, 92988, 67110, 56748, 124245, 50874, 136583, 128095, 113181, 46835, 72957, 2603, 5847, 41388, 83564, 50480, 88494, 39173, 125192, 46211, 124165, 13098, 79722, 126857, 127089, 34656, 92162, 114928, 104461, 29573, 136818, 98154, 108365, 41998, 65496]
[2024-12-02 19:32:12.336036] user = 18574 Cloud 211/568
[2024-12-02 19:32:12.345990] user = 18574 Local 211/568
[2024-12-02 19:32:12.398086] user = 18574 Local+ 211/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:14.275412] user = 18574 MPDA- 211/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5404040404040404
Training on augumented user 49486 0/50 current_auc = 0.5404040404040404
User 49486 AUC after training: 0.5303030303030303
User 49486 does not improve AUC. Reverting changes.
Training on augumented user 43718 1/50 current_auc = 0.5404040404040404
User 43718 AUC after training: 0.5404040404040404
User 43718 does not improve AUC. Reverting changes.
Training on augumented user 41758 2/50 current_auc = 0.5404040404040404
User 41758 AUC after training: 0.5202020202020201
User 41758 does not improve AUC. Reverting changes.
Training on augumented user 102666 3/50 current_auc = 0.5404040404040404
User 102666 AUC after training: 0.5353535353535354
User 102666 does not improve AUC. Reverting changes.
Training on augumented user 66583 4/50 current_auc = 0.5404040404040404
User 66583 AUC after training: 0.5404040404040404
User 66583 does not improve AUC. Reverting changes.
Training on augumented user 35689 5/50 current_auc = 0.5404040404040404
User 35689 AUC after training: 0.5353535353535355
User 35689 does not improve AUC. Reverting changes.
Training on augumented user 97619 6/50 current_auc = 0.5404040404040404
User 97619 AUC after training: 0.5454545454545454
User 97619 improves AUC. Keeping the model.
Training on augumented user 117630 7/50 current_auc = 0.5454545454545454
User 117630 AUC after training: 0.5353535353535354
User 117630 does not improve AUC. Reverting changes.
Training on augumented user 77087 8/50 current_auc = 0.5454545454545454
User 77087 AUC after training: 0.5404040404040404
User 77087 does not improve AUC. Reverting changes.
Training on augumented user 130859 9/50 current_auc = 0.5454545454545454
User 130859 AUC after training: 0.5202020202020202
User 130859 does not improve AUC. Reverting changes.
Training on augumented user 69028 10/50 current_auc = 0.5454545454545454
User 69028 AUC after training: 0.5151515151515151
User 69028 does not improve AUC. Reverting changes.
Training on augumented user 110788 11/50 current_auc = 0.5454545454545454
User 110788 AUC after training: 0.5404040404040404
User 110788 does not improve AUC. Reverting changes.
Training on augumented user 82821 12/50 current_auc = 0.5454545454545454
User 82821 AUC after training: 0.5353535353535354
User 82821 does not improve AUC. Reverting changes.
Training on augumented user 12570 13/50 current_auc = 0.5454545454545454
User 12570 AUC after training: 0.5303030303030303
User 12570 does not improve AUC. Reverting changes.
Training on augumented user 23749 14/50 current_auc = 0.5454545454545454
User 23749 AUC after training: 0.5252525252525253
User 23749 does not improve AUC. Reverting changes.
Training on augumented user 74704 15/50 current_auc = 0.5454545454545454
User 74704 AUC after training: 0.5353535353535354
User 74704 does not improve AUC. Reverting changes.
Training on augumented user 92988 16/50 current_auc = 0.5454545454545454
User 92988 AUC after training: 0.5303030303030303
User 92988 does not improve AUC. Reverting changes.
Training on augumented user 67110 17/50 current_auc = 0.5454545454545454
User 67110 AUC after training: 0.5454545454545454
User 67110 does not improve AUC. Reverting changes.
Training on augumented user 56748 18/50 current_auc = 0.5454545454545454
User 56748 AUC after training: 0.5303030303030303
User 56748 does not improve AUC. Reverting changes.
Training on augumented user 124245 19/50 current_auc = 0.5454545454545454
User 124245 AUC after training: 0.5404040404040404
User 124245 does not improve AUC. Reverting changes.
Training on augumented user 50874 20/50 current_auc = 0.5454545454545454
User 50874 AUC after training: 0.5252525252525253
User 50874 does not improve AUC. Reverting changes.
Training on augumented user 136583 21/50 current_auc = 0.5454545454545454
User 136583 AUC after training: 0.5353535353535354
User 136583 does not improve AUC. Reverting changes.
Training on augumented user 128095 22/50 current_auc = 0.5454545454545454
User 128095 AUC after training: 0.5
User 128095 does not improve AUC. Reverting changes.
Training on augumented user 113181 23/50 current_auc = 0.5454545454545454
User 113181 AUC after training: 0.48484848484848486
User 113181 does not improve AUC. Reverting changes.
Training on augumented user 46835 24/50 current_auc = 0.5454545454545454
User 46835 AUC after training: 0.51010101010101
User 46835 does not improve AUC. Reverting changes.
Training on augumented user 72957 25/50 current_auc = 0.5454545454545454
User 72957 AUC after training: 0.5303030303030303
User 72957 does not improve AUC. Reverting changes.
Training on augumented user 2603 26/50 current_auc = 0.5454545454545454
User 2603 AUC after training: 0.5353535353535354
User 2603 does not improve AUC. Reverting changes.
Training on augumented user 5847 27/50 current_auc = 0.5454545454545454
User 5847 AUC after training: 0.5252525252525253
User 5847 does not improve AUC. Reverting changes.
Training on augumented user 41388 28/50 current_auc = 0.5454545454545454
User 41388 AUC after training: 0.5404040404040404
User 41388 does not improve AUC. Reverting changes.
Training on augumented user 83564 29/50 current_auc = 0.5454545454545454
User 83564 AUC after training: 0.5252525252525253
User 83564 does not improve AUC. Reverting changes.
Training on augumented user 50480 30/50 current_auc = 0.5454545454545454
User 50480 AUC after training: 0.5404040404040404
User 50480 does not improve AUC. Reverting changes.
Training on augumented user 88494 31/50 current_auc = 0.5454545454545454
User 88494 AUC after training: 0.5303030303030303
User 88494 does not improve AUC. Reverting changes.
Training on augumented user 39173 32/50 current_auc = 0.5454545454545454
User 39173 AUC after training: 0.5404040404040404
User 39173 does not improve AUC. Reverting changes.
Training on augumented user 125192 33/50 current_auc = 0.5454545454545454
User 125192 AUC after training: 0.5353535353535355
User 125192 does not improve AUC. Reverting changes.
Training on augumented user 46211 34/50 current_auc = 0.5454545454545454
User 46211 AUC after training: 0.5404040404040404
User 46211 does not improve AUC. Reverting changes.
Training on augumented user 124165 35/50 current_auc = 0.5454545454545454
User 124165 AUC after training: 0.5353535353535354
User 124165 does not improve AUC. Reverting changes.
Training on augumented user 13098 36/50 current_auc = 0.5454545454545454
User 13098 AUC after training: 0.5353535353535354
User 13098 does not improve AUC. Reverting changes.
Training on augumented user 79722 37/50 current_auc = 0.5454545454545454
User 79722 AUC after training: 0.5353535353535355
User 79722 does not improve AUC. Reverting changes.
Training on augumented user 126857 38/50 current_auc = 0.5454545454545454
User 126857 AUC after training: 0.5151515151515151
User 126857 does not improve AUC. Reverting changes.
Training on augumented user 127089 39/50 current_auc = 0.5454545454545454
User 127089 AUC after training: 0.5404040404040404
User 127089 does not improve AUC. Reverting changes.
Training on augumented user 34656 40/50 current_auc = 0.5454545454545454
User 34656 AUC after training: 0.4898989898989899
User 34656 does not improve AUC. Reverting changes.
Training on augumented user 92162 41/50 current_auc = 0.5454545454545454
User 92162 AUC after training: 0.5404040404040404
User 92162 does not improve AUC. Reverting changes.
Training on augumented user 114928 42/50 current_auc = 0.5454545454545454
User 114928 AUC after training: 0.5454545454545454
User 114928 does not improve AUC. Reverting changes.
Training on augumented user 104461 43/50 current_auc = 0.5454545454545454
User 104461 AUC after training: 0.5353535353535355
User 104461 does not improve AUC. Reverting changes.
Training on augumented user 29573 44/50 current_auc = 0.5454545454545454
User 29573 AUC after training: 0.5404040404040404
User 29573 does not improve AUC. Reverting changes.
Training on augumented user 136818 45/50 current_auc = 0.5454545454545454
User 136818 AUC after training: 0.5404040404040404
User 136818 does not improve AUC. Reverting changes.
Training on augumented user 98154 46/50 current_auc = 0.5454545454545454
User 98154 AUC after training: 0.5202020202020201
User 98154 does not improve AUC. Reverting changes.
Training on augumented user 108365 47/50 current_auc = 0.5454545454545454
User 108365 AUC after training: 0.5353535353535354
User 108365 does not improve AUC. Reverting changes.
Training on augumented user 41998 48/50 current_auc = 0.5454545454545454
User 41998 AUC after training: 0.5353535353535354
User 41998 does not improve AUC. Reverting changes.
Training on augumented user 65496 49/50 current_auc = 0.5454545454545454
User 65496 AUC after training: 0.5454545454545454
User 65496 does not improve AUC. Reverting changes.
[2024-12-02 19:32:44.373838] start test user 18599 212/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:45.105461] start test user 18599 212/568 recall augumented users by random, augumented_users = [110306, 115563, 24990, 100599, 112795, 59928, 33877, 31828, 39604, 13154, 1375, 91315, 47569, 19318, 135391, 103649, 62959, 2395, 41930, 91115, 83580, 72490, 21450, 98302, 19212, 98944, 28922, 115990, 43098, 14935, 18407, 1825, 21294, 103148, 102087, 26246, 71923, 108763, 29029, 112400, 43551, 23274, 85046, 37940, 95491, 69623, 37969, 14899, 126668, 127428]
[2024-12-02 19:32:45.126696] user = 18599 Cloud 212/568
[2024-12-02 19:32:45.139592] user = 18599 Local 212/568
[2024-12-02 19:32:45.211824] user = 18599 Local+ 212/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:47.934153] user = 18599 MPDA- 212/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6190476190476191
Training on augumented user 110306 0/50 current_auc = 0.6190476190476191
User 110306 AUC after training: 0.6185897435897435
User 110306 does not improve AUC. Reverting changes.
Training on augumented user 115563 1/50 current_auc = 0.6190476190476191
User 115563 AUC after training: 0.6190476190476191
User 115563 does not improve AUC. Reverting changes.
Training on augumented user 24990 2/50 current_auc = 0.6190476190476191
User 24990 AUC after training: 0.6185897435897435
User 24990 does not improve AUC. Reverting changes.
Training on augumented user 100599 3/50 current_auc = 0.6190476190476191
User 100599 AUC after training: 0.6185897435897436
User 100599 does not improve AUC. Reverting changes.
Training on augumented user 112795 4/50 current_auc = 0.6190476190476191
User 112795 AUC after training: 0.6185897435897435
User 112795 does not improve AUC. Reverting changes.
Training on augumented user 59928 5/50 current_auc = 0.6190476190476191
User 59928 AUC after training: 0.6190476190476191
User 59928 does not improve AUC. Reverting changes.
Training on augumented user 33877 6/50 current_auc = 0.6190476190476191
User 33877 AUC after training: 0.6185897435897436
User 33877 does not improve AUC. Reverting changes.
Training on augumented user 31828 7/50 current_auc = 0.6190476190476191
User 31828 AUC after training: 0.6195054945054945
User 31828 improves AUC. Keeping the model.
Training on augumented user 39604 8/50 current_auc = 0.6195054945054945
User 39604 AUC after training: 0.6176739926739927
User 39604 does not improve AUC. Reverting changes.
Training on augumented user 13154 9/50 current_auc = 0.6195054945054945
User 13154 AUC after training: 0.6195054945054945
User 13154 does not improve AUC. Reverting changes.
Training on augumented user 1375 10/50 current_auc = 0.6195054945054945
User 1375 AUC after training: 0.6190476190476191
User 1375 does not improve AUC. Reverting changes.
Training on augumented user 91315 11/50 current_auc = 0.6195054945054945
User 91315 AUC after training: 0.619047619047619
User 91315 does not improve AUC. Reverting changes.
Training on augumented user 47569 12/50 current_auc = 0.6195054945054945
User 47569 AUC after training: 0.6176739926739927
User 47569 does not improve AUC. Reverting changes.
Training on augumented user 19318 13/50 current_auc = 0.6195054945054945
User 19318 AUC after training: 0.6195054945054945
User 19318 does not improve AUC. Reverting changes.
Training on augumented user 135391 14/50 current_auc = 0.6195054945054945
User 135391 AUC after training: 0.6181318681318682
User 135391 does not improve AUC. Reverting changes.
Training on augumented user 103649 15/50 current_auc = 0.6195054945054945
User 103649 AUC after training: 0.6185897435897435
User 103649 does not improve AUC. Reverting changes.
Training on augumented user 62959 16/50 current_auc = 0.6195054945054945
User 62959 AUC after training: 0.6172161172161172
User 62959 does not improve AUC. Reverting changes.
Training on augumented user 2395 17/50 current_auc = 0.6195054945054945
User 2395 AUC after training: 0.6163003663003663
User 2395 does not improve AUC. Reverting changes.
Training on augumented user 41930 18/50 current_auc = 0.6195054945054945
User 41930 AUC after training: 0.6185897435897435
User 41930 does not improve AUC. Reverting changes.
Training on augumented user 91115 19/50 current_auc = 0.6195054945054945
User 91115 AUC after training: 0.6195054945054945
User 91115 does not improve AUC. Reverting changes.
Training on augumented user 83580 20/50 current_auc = 0.6195054945054945
User 83580 AUC after training: 0.6185897435897436
User 83580 does not improve AUC. Reverting changes.
Training on augumented user 72490 21/50 current_auc = 0.6195054945054945
User 72490 AUC after training: 0.6195054945054945
User 72490 does not improve AUC. Reverting changes.
Training on augumented user 21450 22/50 current_auc = 0.6195054945054945
User 21450 AUC after training: 0.6185897435897436
User 21450 does not improve AUC. Reverting changes.
Training on augumented user 98302 23/50 current_auc = 0.6195054945054945
User 98302 AUC after training: 0.6181318681318682
User 98302 does not improve AUC. Reverting changes.
Training on augumented user 19212 24/50 current_auc = 0.6195054945054945
User 19212 AUC after training: 0.6181318681318682
User 19212 does not improve AUC. Reverting changes.
Training on augumented user 98944 25/50 current_auc = 0.6195054945054945
User 98944 AUC after training: 0.6190476190476191
User 98944 does not improve AUC. Reverting changes.
Training on augumented user 28922 26/50 current_auc = 0.6195054945054945
User 28922 AUC after training: 0.6181318681318682
User 28922 does not improve AUC. Reverting changes.
Training on augumented user 115990 27/50 current_auc = 0.6195054945054945
User 115990 AUC after training: 0.6183608058608059
User 115990 does not improve AUC. Reverting changes.
Training on augumented user 43098 28/50 current_auc = 0.6195054945054945
User 43098 AUC after training: 0.6195054945054945
User 43098 does not improve AUC. Reverting changes.
Training on augumented user 14935 29/50 current_auc = 0.6195054945054945
User 14935 AUC after training: 0.6185897435897436
User 14935 does not improve AUC. Reverting changes.
Training on augumented user 18407 30/50 current_auc = 0.6195054945054945
User 18407 AUC after training: 0.6201923076923077
User 18407 improves AUC. Keeping the model.
Training on augumented user 1825 31/50 current_auc = 0.6201923076923077
User 1825 AUC after training: 0.6185897435897436
User 1825 does not improve AUC. Reverting changes.
Training on augumented user 21294 32/50 current_auc = 0.6201923076923077
User 21294 AUC after training: 0.6195054945054945
User 21294 does not improve AUC. Reverting changes.
Training on augumented user 103148 33/50 current_auc = 0.6201923076923077
User 103148 AUC after training: 0.61996336996337
User 103148 does not improve AUC. Reverting changes.
Training on augumented user 102087 34/50 current_auc = 0.6201923076923077
User 102087 AUC after training: 0.6183608058608059
User 102087 does not improve AUC. Reverting changes.
Training on augumented user 26246 35/50 current_auc = 0.6201923076923077
User 26246 AUC after training: 0.61996336996337
User 26246 does not improve AUC. Reverting changes.
Training on augumented user 71923 36/50 current_auc = 0.6201923076923077
User 71923 AUC after training: 0.6192765567765568
User 71923 does not improve AUC. Reverting changes.
Training on augumented user 108763 37/50 current_auc = 0.6201923076923077
User 108763 AUC after training: 0.61996336996337
User 108763 does not improve AUC. Reverting changes.
Training on augumented user 29029 38/50 current_auc = 0.6201923076923077
User 29029 AUC after training: 0.6197344322344321
User 29029 does not improve AUC. Reverting changes.
Training on augumented user 112400 39/50 current_auc = 0.6201923076923077
User 112400 AUC after training: 0.6213369963369964
User 112400 improves AUC. Keeping the model.
Training on augumented user 43551 40/50 current_auc = 0.6213369963369964
User 43551 AUC after training: 0.6195054945054945
User 43551 does not improve AUC. Reverting changes.
Training on augumented user 23274 41/50 current_auc = 0.6213369963369964
User 23274 AUC after training: 0.617445054945055
User 23274 does not improve AUC. Reverting changes.
Training on augumented user 85046 42/50 current_auc = 0.6213369963369964
User 85046 AUC after training: 0.6201923076923077
User 85046 does not improve AUC. Reverting changes.
Training on augumented user 37940 43/50 current_auc = 0.6213369963369964
User 37940 AUC after training: 0.6204212454212454
User 37940 does not improve AUC. Reverting changes.
Training on augumented user 95491 44/50 current_auc = 0.6213369963369964
User 95491 AUC after training: 0.6185897435897436
User 95491 does not improve AUC. Reverting changes.
Training on augumented user 69623 45/50 current_auc = 0.6213369963369964
User 69623 AUC after training: 0.6213369963369964
User 69623 does not improve AUC. Reverting changes.
Training on augumented user 37969 46/50 current_auc = 0.6213369963369964
User 37969 AUC after training: 0.6195054945054945
User 37969 does not improve AUC. Reverting changes.
Training on augumented user 14899 47/50 current_auc = 0.6213369963369964
User 14899 AUC after training: 0.6204212454212454
User 14899 does not improve AUC. Reverting changes.
Training on augumented user 126668 48/50 current_auc = 0.6213369963369964
User 126668 AUC after training: 0.6199633699633699
User 126668 does not improve AUC. Reverting changes.
Training on augumented user 127428 49/50 current_auc = 0.6213369963369964
User 127428 AUC after training: 0.6201923076923076
User 127428 does not improve AUC. Reverting changes.
[2024-12-02 19:33:18.377665] start test user 18611 213/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:19.165338] start test user 18611 213/568 recall augumented users by random, augumented_users = [96357, 111708, 55846, 98918, 51468, 131243, 22357, 109019, 1641, 41599, 86878, 2345, 96430, 81707, 5067, 38218, 109480, 53210, 94828, 43818, 134717, 107214, 121270, 35570, 115128, 113361, 59821, 88454, 46597, 57296, 51712, 31596, 89601, 113971, 128976, 10555, 91978, 29442, 129616, 48497, 31267, 123138, 55239, 69603, 51082, 49237, 9419, 23638, 69256, 1033]
[2024-12-02 19:33:19.189079] user = 18611 Cloud 213/568
[2024-12-02 19:33:19.306547] user = 18611 Local 213/568
[2024-12-02 19:33:20.153044] user = 18611 Local+ 213/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:22.767401] user = 18611 MPDA- 213/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5689486334906081
Training on augumented user 96357 0/50 current_auc = 0.5689486334906081
User 96357 AUC after training: 0.5691711920235023
User 96357 improves AUC. Keeping the model.
Training on augumented user 111708 1/50 current_auc = 0.5691711920235023
User 111708 AUC after training: 0.5694345529540936
User 111708 improves AUC. Keeping the model.
Training on augumented user 55846 2/50 current_auc = 0.5694345529540936
User 55846 AUC after training: 0.568492388498175
User 55846 does not improve AUC. Reverting changes.
Training on augumented user 98918 3/50 current_auc = 0.5694345529540936
User 98918 AUC after training: 0.5695569601471854
User 98918 improves AUC. Keeping the model.
Training on augumented user 51468 4/50 current_auc = 0.5695569601471854
User 51468 AUC after training: 0.5696682394136324
User 51468 improves AUC. Keeping the model.
Training on augumented user 131243 5/50 current_auc = 0.5696682394136324
User 131243 AUC after training: 0.5698537048577109
User 131243 improves AUC. Keeping the model.
Training on augumented user 22357 6/50 current_auc = 0.5698537048577109
User 22357 AUC after training: 0.5700169144485
User 22357 improves AUC. Keeping the model.
Training on augumented user 109019 7/50 current_auc = 0.5700169144485
User 109019 AUC after training: 0.5700836820083682
User 109019 improves AUC. Keeping the model.
Training on augumented user 1641 8/50 current_auc = 0.5700836820083682
User 1641 AUC after training: 0.5699501468886317
User 1641 does not improve AUC. Reverting changes.
Training on augumented user 41599 9/50 current_auc = 0.5700836820083682
User 41599 AUC after training: 0.5701504495682364
User 41599 improves AUC. Keeping the model.
Training on augumented user 86878 10/50 current_auc = 0.5701504495682364
User 86878 AUC after training: 0.570343333630078
User 86878 improves AUC. Keeping the model.
Training on augumented user 2345 11/50 current_auc = 0.570343333630078
User 2345 AUC after training: 0.5700465889195525
User 2345 does not improve AUC. Reverting changes.
Training on augumented user 96430 12/50 current_auc = 0.570343333630078
User 96430 AUC after training: 0.5699501468886317
User 96430 does not improve AUC. Reverting changes.
Training on augumented user 81707 13/50 current_auc = 0.570343333630078
User 81707 AUC after training: 0.570128193714947
User 81707 does not improve AUC. Reverting changes.
Training on augumented user 5067 14/50 current_auc = 0.570343333630078
User 5067 AUC after training: 0.5702246357458679
User 5067 does not improve AUC. Reverting changes.
Training on augumented user 38218 15/50 current_auc = 0.570343333630078
User 38218 AUC after training: 0.5700317516840263
User 38218 does not improve AUC. Reverting changes.
Training on augumented user 109480 16/50 current_auc = 0.570343333630078
User 109480 AUC after training: 0.5702543102169204
User 109480 does not improve AUC. Reverting changes.
Training on augumented user 53210 17/50 current_auc = 0.570343333630078
User 53210 AUC after training: 0.5702246357458679
User 53210 does not improve AUC. Reverting changes.
Training on augumented user 94828 18/50 current_auc = 0.570343333630078
User 94828 AUC after training: 0.5700020772129737
User 94828 does not improve AUC. Reverting changes.
Training on augumented user 43818 19/50 current_auc = 0.570343333630078
User 43818 AUC after training: 0.5699724027419211
User 43818 does not improve AUC. Reverting changes.
Training on augumented user 134717 20/50 current_auc = 0.570343333630078
User 134717 AUC after training: 0.5703804267188938
User 134717 improves AUC. Keeping the model.
Training on augumented user 107214 21/50 current_auc = 0.5703804267188938
User 107214 AUC after training: 0.572539244487967
User 107214 improves AUC. Keeping the model.
Training on augumented user 121270 22/50 current_auc = 0.572539244487967
User 121270 AUC after training: 0.5725281165613223
User 121270 does not improve AUC. Reverting changes.
Training on augumented user 35570 23/50 current_auc = 0.572539244487967
User 35570 AUC after training: 0.5723537790438886
User 35570 does not improve AUC. Reverting changes.
Training on augumented user 115128 24/50 current_auc = 0.572539244487967
User 115128 AUC after training: 0.5726950354609929
User 115128 improves AUC. Keeping the model.
Training on augumented user 113361 25/50 current_auc = 0.5726950354609929
User 113361 AUC after training: 0.5731624083800706
User 113361 improves AUC. Keeping the model.
Training on augumented user 59821 26/50 current_auc = 0.5731624083800706
User 59821 AUC after training: 0.5727766402563874
User 59821 does not improve AUC. Reverting changes.
Training on augumented user 88454 27/50 current_auc = 0.5731624083800706
User 88454 AUC after training: 0.5729250126116502
User 88454 does not improve AUC. Reverting changes.
Training on augumented user 46597 28/50 current_auc = 0.5731624083800706
User 46597 AUC after training: 0.5731512804534259
User 46597 does not improve AUC. Reverting changes.
Training on augumented user 57296 29/50 current_auc = 0.5731624083800706
User 57296 AUC after training: 0.5733219086619781
User 57296 improves AUC. Keeping the model.
Training on augumented user 51712 30/50 current_auc = 0.5733219086619781
User 51712 AUC after training: 0.5735704323570432
User 51712 improves AUC. Keeping the model.
Training on augumented user 31596 31/50 current_auc = 0.5735704323570432
User 31596 AUC after training: 0.5729324312294133
User 31596 does not improve AUC. Reverting changes.
Training on augumented user 89601 32/50 current_auc = 0.5735704323570432
User 89601 AUC after training: 0.5738226653609899
User 89601 improves AUC. Keeping the model.
Training on augumented user 113971 33/50 current_auc = 0.5738226653609899
User 113971 AUC after training: 0.5738894329208581
User 113971 improves AUC. Keeping the model.
Training on augumented user 128976 34/50 current_auc = 0.5738894329208581
User 128976 AUC after training: 0.5742752010445414
User 128976 improves AUC. Keeping the model.
Training on augumented user 10555 35/50 current_auc = 0.5742752010445414
User 10555 AUC after training: 0.5741379566159233
User 10555 does not improve AUC. Reverting changes.
Training on augumented user 91978 36/50 current_auc = 0.5742752010445414
User 91978 AUC after training: 0.5738300839787531
User 91978 does not improve AUC. Reverting changes.
Training on augumented user 29442 37/50 current_auc = 0.5742752010445414
User 29442 AUC after training: 0.5740081308050684
User 29442 does not improve AUC. Reverting changes.
Training on augumented user 129616 38/50 current_auc = 0.5742752010445414
User 129616 AUC after training: 0.5737781536544111
User 129616 does not improve AUC. Reverting changes.
Training on augumented user 48497 39/50 current_auc = 0.5742752010445414
User 48497 AUC after training: 0.5744013175465147
User 48497 improves AUC. Keeping the model.
Training on augumented user 31267 40/50 current_auc = 0.5744013175465147
User 31267 AUC after training: 0.5742826196623045
User 31267 does not improve AUC. Reverting changes.
Training on augumented user 123138 41/50 current_auc = 0.5744013175465147
User 123138 AUC after training: 0.5743234220600018
User 123138 does not improve AUC. Reverting changes.
Training on augumented user 55239 42/50 current_auc = 0.5744013175465147
User 55239 AUC after training: 0.5745719457550669
User 55239 improves AUC. Keeping the model.
Training on augumented user 69603 43/50 current_auc = 0.5745719457550669
User 69603 AUC after training: 0.5740192587317131
User 69603 does not improve AUC. Reverting changes.
Training on augumented user 51082 44/50 current_auc = 0.5745719457550669
User 51082 AUC after training: 0.5741453752336865
User 51082 does not improve AUC. Reverting changes.
Training on augumented user 49237 45/50 current_auc = 0.5745719457550669
User 49237 AUC after training: 0.574571945755067
User 49237 improves AUC. Keeping the model.
Training on augumented user 9419 46/50 current_auc = 0.574571945755067
User 9419 AUC after training: 0.574527434048488
User 9419 does not improve AUC. Reverting changes.
Training on augumented user 23638 47/50 current_auc = 0.574571945755067
User 23638 AUC after training: 0.5734851182527672
User 23638 does not improve AUC. Reverting changes.
Training on augumented user 69256 48/50 current_auc = 0.574571945755067
User 69256 AUC after training: 0.5754770171221698
User 69256 improves AUC. Keeping the model.
Training on augumented user 1033 49/50 current_auc = 0.5754770171221698
User 1033 AUC after training: 0.5758294014659189
User 1033 improves AUC. Keeping the model.
[2024-12-02 19:33:55.273295] start test user 18627 214/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:55.678421] start test user 18627 214/568 recall augumented users by random, augumented_users = [118942, 123334, 41509, 33129, 56233, 117321, 78687, 91567, 35382, 47656, 83144, 109647, 84669, 104251, 36932, 131089, 64069, 87796, 85592, 40514, 137859, 46693, 102742, 79055, 59541, 103304, 97455, 32380, 70572, 113823, 47745, 79431, 101547, 121972, 90338, 109692, 26351, 137919, 23238, 35343, 36558, 120771, 3427, 120793, 105137, 135892, 63124, 39392, 113005, 31199]
[2024-12-02 19:33:55.693295] user = 18627 Cloud 214/568
[2024-12-02 19:33:55.708422] user = 18627 Local 214/568
[2024-12-02 19:33:55.765424] user = 18627 Local+ 214/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:58.334270] user = 18627 MPDA- 214/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6966565349544074
Training on augumented user 118942 0/50 current_auc = 0.6966565349544074
User 118942 AUC after training: 0.6966565349544073
User 118942 does not improve AUC. Reverting changes.
Training on augumented user 123334 1/50 current_auc = 0.6966565349544074
User 123334 AUC after training: 0.6972644376899696
User 123334 improves AUC. Keeping the model.
Training on augumented user 41509 2/50 current_auc = 0.6972644376899696
User 41509 AUC after training: 0.6978723404255318
User 41509 improves AUC. Keeping the model.
Training on augumented user 33129 3/50 current_auc = 0.6978723404255318
User 33129 AUC after training: 0.6969604863221884
User 33129 does not improve AUC. Reverting changes.
Training on augumented user 56233 4/50 current_auc = 0.6978723404255318
User 56233 AUC after training: 0.6969604863221884
User 56233 does not improve AUC. Reverting changes.
Training on augumented user 117321 5/50 current_auc = 0.6978723404255318
User 117321 AUC after training: 0.6972644376899697
User 117321 does not improve AUC. Reverting changes.
Training on augumented user 78687 6/50 current_auc = 0.6978723404255318
User 78687 AUC after training: 0.6978723404255319
User 78687 improves AUC. Keeping the model.
Training on augumented user 91567 7/50 current_auc = 0.6978723404255319
User 91567 AUC after training: 0.6984802431610941
User 91567 improves AUC. Keeping the model.
Training on augumented user 35382 8/50 current_auc = 0.6984802431610941
User 35382 AUC after training: 0.6984802431610942
User 35382 improves AUC. Keeping the model.
Training on augumented user 47656 9/50 current_auc = 0.6984802431610942
User 47656 AUC after training: 0.6981762917933131
User 47656 does not improve AUC. Reverting changes.
Training on augumented user 83144 10/50 current_auc = 0.6984802431610942
User 83144 AUC after training: 0.6984802431610942
User 83144 does not improve AUC. Reverting changes.
Training on augumented user 109647 11/50 current_auc = 0.6984802431610942
User 109647 AUC after training: 0.6984802431610941
User 109647 does not improve AUC. Reverting changes.
Training on augumented user 84669 12/50 current_auc = 0.6984802431610942
User 84669 AUC after training: 0.698176291793313
User 84669 does not improve AUC. Reverting changes.
Training on augumented user 104251 13/50 current_auc = 0.6984802431610942
User 104251 AUC after training: 0.6984802431610941
User 104251 does not improve AUC. Reverting changes.
Training on augumented user 36932 14/50 current_auc = 0.6984802431610942
User 36932 AUC after training: 0.6975683890577509
User 36932 does not improve AUC. Reverting changes.
Training on augumented user 131089 15/50 current_auc = 0.6984802431610942
User 131089 AUC after training: 0.697872340425532
User 131089 does not improve AUC. Reverting changes.
Training on augumented user 64069 16/50 current_auc = 0.6984802431610942
User 64069 AUC after training: 0.6975683890577508
User 64069 does not improve AUC. Reverting changes.
Training on augumented user 87796 17/50 current_auc = 0.6984802431610942
User 87796 AUC after training: 0.6981762917933131
User 87796 does not improve AUC. Reverting changes.
Training on augumented user 85592 18/50 current_auc = 0.6984802431610942
User 85592 AUC after training: 0.698176291793313
User 85592 does not improve AUC. Reverting changes.
Training on augumented user 40514 19/50 current_auc = 0.6984802431610942
User 40514 AUC after training: 0.6978723404255319
User 40514 does not improve AUC. Reverting changes.
Training on augumented user 137859 20/50 current_auc = 0.6984802431610942
User 137859 AUC after training: 0.6981762917933131
User 137859 does not improve AUC. Reverting changes.
Training on augumented user 46693 21/50 current_auc = 0.6984802431610942
User 46693 AUC after training: 0.6990881458966565
User 46693 improves AUC. Keeping the model.
Training on augumented user 102742 22/50 current_auc = 0.6990881458966565
User 102742 AUC after training: 0.6987841945288755
User 102742 does not improve AUC. Reverting changes.
Training on augumented user 79055 23/50 current_auc = 0.6990881458966565
User 79055 AUC after training: 0.6990881458966565
User 79055 does not improve AUC. Reverting changes.
Training on augumented user 59541 24/50 current_auc = 0.6990881458966565
User 59541 AUC after training: 0.6987841945288753
User 59541 does not improve AUC. Reverting changes.
Training on augumented user 103304 25/50 current_auc = 0.6990881458966565
User 103304 AUC after training: 0.6984802431610941
User 103304 does not improve AUC. Reverting changes.
Training on augumented user 97455 26/50 current_auc = 0.6990881458966565
User 97455 AUC after training: 0.6972644376899696
User 97455 does not improve AUC. Reverting changes.
Training on augumented user 32380 27/50 current_auc = 0.6990881458966565
User 32380 AUC after training: 0.6990881458966565
User 32380 does not improve AUC. Reverting changes.
Training on augumented user 70572 28/50 current_auc = 0.6990881458966565
User 70572 AUC after training: 0.698176291793313
User 70572 does not improve AUC. Reverting changes.
Training on augumented user 113823 29/50 current_auc = 0.6990881458966565
User 113823 AUC after training: 0.6993920972644376
User 113823 improves AUC. Keeping the model.
Training on augumented user 47745 30/50 current_auc = 0.6993920972644376
User 47745 AUC after training: 0.697872340425532
User 47745 does not improve AUC. Reverting changes.
Training on augumented user 79431 31/50 current_auc = 0.6993920972644376
User 79431 AUC after training: 0.6990881458966566
User 79431 does not improve AUC. Reverting changes.
Training on augumented user 101547 32/50 current_auc = 0.6993920972644376
User 101547 AUC after training: 0.6972644376899696
User 101547 does not improve AUC. Reverting changes.
Training on augumented user 121972 33/50 current_auc = 0.6993920972644376
User 121972 AUC after training: 0.6981762917933131
User 121972 does not improve AUC. Reverting changes.
Training on augumented user 90338 34/50 current_auc = 0.6993920972644376
User 90338 AUC after training: 0.6993920972644376
User 90338 does not improve AUC. Reverting changes.
Training on augumented user 109692 35/50 current_auc = 0.6993920972644376
User 109692 AUC after training: 0.6993920972644376
User 109692 does not improve AUC. Reverting changes.
Training on augumented user 26351 36/50 current_auc = 0.6993920972644376
User 26351 AUC after training: 0.6996960486322188
User 26351 improves AUC. Keeping the model.
Training on augumented user 137919 37/50 current_auc = 0.6996960486322188
User 137919 AUC after training: 0.6993920972644376
User 137919 does not improve AUC. Reverting changes.
Training on augumented user 23238 38/50 current_auc = 0.6996960486322188
User 23238 AUC after training: 0.6996960486322188
User 23238 does not improve AUC. Reverting changes.
Training on augumented user 35343 39/50 current_auc = 0.6996960486322188
User 35343 AUC after training: 0.6987841945288753
User 35343 does not improve AUC. Reverting changes.
Training on augumented user 36558 40/50 current_auc = 0.6996960486322188
User 36558 AUC after training: 0.7
User 36558 improves AUC. Keeping the model.
Training on augumented user 120771 41/50 current_auc = 0.7
User 120771 AUC after training: 0.6993920972644377
User 120771 does not improve AUC. Reverting changes.
Training on augumented user 3427 42/50 current_auc = 0.7
User 3427 AUC after training: 0.6987841945288753
User 3427 does not improve AUC. Reverting changes.
Training on augumented user 120793 43/50 current_auc = 0.7
User 120793 AUC after training: 0.6990881458966565
User 120793 does not improve AUC. Reverting changes.
Training on augumented user 105137 44/50 current_auc = 0.7
User 105137 AUC after training: 0.6993920972644377
User 105137 does not improve AUC. Reverting changes.
Training on augumented user 135892 45/50 current_auc = 0.7
User 135892 AUC after training: 0.6987841945288754
User 135892 does not improve AUC. Reverting changes.
Training on augumented user 63124 46/50 current_auc = 0.7
User 63124 AUC after training: 0.6993920972644376
User 63124 does not improve AUC. Reverting changes.
Training on augumented user 39392 47/50 current_auc = 0.7
User 39392 AUC after training: 0.7
User 39392 does not improve AUC. Reverting changes.
Training on augumented user 113005 48/50 current_auc = 0.7
User 113005 AUC after training: 0.6990881458966566
User 113005 does not improve AUC. Reverting changes.
Training on augumented user 31199 49/50 current_auc = 0.7
User 31199 AUC after training: 0.6963525835866262
User 31199 does not improve AUC. Reverting changes.
[2024-12-02 19:34:33.367540] start test user 18628 215/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:34.023474] start test user 18628 215/568 recall augumented users by random, augumented_users = [95976, 30664, 69995, 58878, 9718, 11228, 56551, 94280, 69390, 12748, 48585, 39019, 117097, 127271, 18202, 81481, 98684, 59469, 121313, 37001, 118529, 100012, 57187, 119740, 68231, 19693, 118436, 48389, 42964, 21459, 10623, 6651, 122733, 15760, 1270, 85181, 137543, 41138, 27088, 102202, 6662, 136497, 36540, 21870, 21326, 44663, 121624, 54533, 90295, 122650]
[2024-12-02 19:34:34.054901] user = 18628 Cloud 215/568
[2024-12-02 19:34:34.082239] user = 18628 Local 215/568
[2024-12-02 19:34:34.446937] user = 18628 Local+ 215/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:37.377438] user = 18628 MPDA- 215/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7269882659713168
Training on augumented user 95976 0/50 current_auc = 0.7269882659713168
User 95976 AUC after training: 0.7272490221642764
User 95976 improves AUC. Keeping the model.
Training on augumented user 30664 1/50 current_auc = 0.7272490221642764
User 30664 AUC after training: 0.7298565840938721
User 30664 improves AUC. Keeping the model.
Training on augumented user 69995 2/50 current_auc = 0.7298565840938721
User 69995 AUC after training: 0.7293350717079531
User 69995 does not improve AUC. Reverting changes.
Training on augumented user 58878 3/50 current_auc = 0.7298565840938721
User 58878 AUC after training: 0.7301173402868317
User 58878 improves AUC. Keeping the model.
Training on augumented user 9718 4/50 current_auc = 0.7301173402868317
User 9718 AUC after training: 0.7303780964797913
User 9718 improves AUC. Keeping the model.
Training on augumented user 11228 5/50 current_auc = 0.7303780964797913
User 11228 AUC after training: 0.729335071707953
User 11228 does not improve AUC. Reverting changes.
Training on augumented user 56551 6/50 current_auc = 0.7303780964797913
User 56551 AUC after training: 0.7308996088657106
User 56551 improves AUC. Keeping the model.
Training on augumented user 94280 7/50 current_auc = 0.7308996088657106
User 94280 AUC after training: 0.730638852672751
User 94280 does not improve AUC. Reverting changes.
Training on augumented user 69390 8/50 current_auc = 0.7308996088657106
User 69390 AUC after training: 0.730638852672751
User 69390 does not improve AUC. Reverting changes.
Training on augumented user 12748 9/50 current_auc = 0.7308996088657106
User 12748 AUC after training: 0.730638852672751
User 12748 does not improve AUC. Reverting changes.
Training on augumented user 48585 10/50 current_auc = 0.7308996088657106
User 48585 AUC after training: 0.730638852672751
User 48585 does not improve AUC. Reverting changes.
Training on augumented user 39019 11/50 current_auc = 0.7308996088657106
User 39019 AUC after training: 0.7308996088657105
User 39019 does not improve AUC. Reverting changes.
Training on augumented user 117097 12/50 current_auc = 0.7308996088657106
User 117097 AUC after training: 0.7308996088657106
User 117097 does not improve AUC. Reverting changes.
Training on augumented user 127271 13/50 current_auc = 0.7308996088657106
User 127271 AUC after training: 0.7301173402868317
User 127271 does not improve AUC. Reverting changes.
Training on augumented user 18202 14/50 current_auc = 0.7308996088657106
User 18202 AUC after training: 0.7308996088657105
User 18202 does not improve AUC. Reverting changes.
Training on augumented user 81481 15/50 current_auc = 0.7308996088657106
User 81481 AUC after training: 0.7301173402868318
User 81481 does not improve AUC. Reverting changes.
Training on augumented user 98684 16/50 current_auc = 0.7308996088657106
User 98684 AUC after training: 0.7295958279009126
User 98684 does not improve AUC. Reverting changes.
Training on augumented user 59469 17/50 current_auc = 0.7308996088657106
User 59469 AUC after training: 0.7303780964797913
User 59469 does not improve AUC. Reverting changes.
Training on augumented user 121313 18/50 current_auc = 0.7308996088657106
User 121313 AUC after training: 0.7308996088657106
User 121313 does not improve AUC. Reverting changes.
Training on augumented user 37001 19/50 current_auc = 0.7308996088657106
User 37001 AUC after training: 0.7314211212516297
User 37001 improves AUC. Keeping the model.
Training on augumented user 118529 20/50 current_auc = 0.7314211212516297
User 118529 AUC after training: 0.7303780964797915
User 118529 does not improve AUC. Reverting changes.
Training on augumented user 100012 21/50 current_auc = 0.7314211212516297
User 100012 AUC after training: 0.730638852672751
User 100012 does not improve AUC. Reverting changes.
Training on augumented user 57187 22/50 current_auc = 0.7314211212516297
User 57187 AUC after training: 0.730638852672751
User 57187 does not improve AUC. Reverting changes.
Training on augumented user 119740 23/50 current_auc = 0.7314211212516297
User 119740 AUC after training: 0.7303780964797913
User 119740 does not improve AUC. Reverting changes.
Training on augumented user 68231 24/50 current_auc = 0.7314211212516297
User 68231 AUC after training: 0.7308996088657106
User 68231 does not improve AUC. Reverting changes.
Training on augumented user 19693 25/50 current_auc = 0.7314211212516297
User 19693 AUC after training: 0.730638852672751
User 19693 does not improve AUC. Reverting changes.
Training on augumented user 118436 26/50 current_auc = 0.7314211212516297
User 118436 AUC after training: 0.7308996088657105
User 118436 does not improve AUC. Reverting changes.
Training on augumented user 48389 27/50 current_auc = 0.7314211212516297
User 48389 AUC after training: 0.7308996088657106
User 48389 does not improve AUC. Reverting changes.
Training on augumented user 42964 28/50 current_auc = 0.7314211212516297
User 42964 AUC after training: 0.7303780964797913
User 42964 does not improve AUC. Reverting changes.
Training on augumented user 21459 29/50 current_auc = 0.7314211212516297
User 21459 AUC after training: 0.7298565840938721
User 21459 does not improve AUC. Reverting changes.
Training on augumented user 10623 30/50 current_auc = 0.7314211212516297
User 10623 AUC after training: 0.7303780964797913
User 10623 does not improve AUC. Reverting changes.
Training on augumented user 6651 31/50 current_auc = 0.7314211212516297
User 6651 AUC after training: 0.7303780964797913
User 6651 does not improve AUC. Reverting changes.
Training on augumented user 122733 32/50 current_auc = 0.7314211212516297
User 122733 AUC after training: 0.730638852672751
User 122733 does not improve AUC. Reverting changes.
Training on augumented user 15760 33/50 current_auc = 0.7314211212516297
User 15760 AUC after training: 0.7308996088657106
User 15760 does not improve AUC. Reverting changes.
Training on augumented user 1270 34/50 current_auc = 0.7314211212516297
User 1270 AUC after training: 0.7301173402868318
User 1270 does not improve AUC. Reverting changes.
Training on augumented user 85181 35/50 current_auc = 0.7314211212516297
User 85181 AUC after training: 0.7314211212516296
User 85181 does not improve AUC. Reverting changes.
Training on augumented user 137543 36/50 current_auc = 0.7314211212516297
User 137543 AUC after training: 0.7290743155149935
User 137543 does not improve AUC. Reverting changes.
Training on augumented user 41138 37/50 current_auc = 0.7314211212516297
User 41138 AUC after training: 0.7308996088657105
User 41138 does not improve AUC. Reverting changes.
Training on augumented user 27088 38/50 current_auc = 0.7314211212516297
User 27088 AUC after training: 0.7301173402868318
User 27088 does not improve AUC. Reverting changes.
Training on augumented user 102202 39/50 current_auc = 0.7314211212516297
User 102202 AUC after training: 0.730638852672751
User 102202 does not improve AUC. Reverting changes.
Training on augumented user 6662 40/50 current_auc = 0.7314211212516297
User 6662 AUC after training: 0.7303780964797913
User 6662 does not improve AUC. Reverting changes.
Training on augumented user 136497 41/50 current_auc = 0.7314211212516297
User 136497 AUC after training: 0.7290743155149936
User 136497 does not improve AUC. Reverting changes.
Training on augumented user 36540 42/50 current_auc = 0.7314211212516297
User 36540 AUC after training: 0.7298565840938722
User 36540 does not improve AUC. Reverting changes.
Training on augumented user 21870 43/50 current_auc = 0.7314211212516297
User 21870 AUC after training: 0.7303780964797913
User 21870 does not improve AUC. Reverting changes.
Training on augumented user 21326 44/50 current_auc = 0.7314211212516297
User 21326 AUC after training: 0.7314211212516297
User 21326 does not improve AUC. Reverting changes.
Training on augumented user 44663 45/50 current_auc = 0.7314211212516297
User 44663 AUC after training: 0.7264667535853977
User 44663 does not improve AUC. Reverting changes.
Training on augumented user 121624 46/50 current_auc = 0.7314211212516297
User 121624 AUC after training: 0.7303780964797913
User 121624 does not improve AUC. Reverting changes.
Training on augumented user 54533 47/50 current_auc = 0.7314211212516297
User 54533 AUC after training: 0.7298565840938722
User 54533 does not improve AUC. Reverting changes.
Training on augumented user 90295 48/50 current_auc = 0.7314211212516297
User 90295 AUC after training: 0.730638852672751
User 90295 does not improve AUC. Reverting changes.
Training on augumented user 122650 49/50 current_auc = 0.7314211212516297
User 122650 AUC after training: 0.7308996088657106
User 122650 does not improve AUC. Reverting changes.
[2024-12-02 19:35:07.733059] start test user 18687 216/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:08.448625] start test user 18687 216/568 recall augumented users by random, augumented_users = [115079, 131101, 97877, 120462, 106311, 106061, 45851, 31448, 87887, 78730, 77427, 7203, 55058, 128242, 101682, 112764, 51044, 6631, 42765, 57903, 56412, 118193, 132580, 70542, 135109, 104198, 119054, 114556, 2585, 94494, 128182, 118170, 36516, 13076, 101594, 134268, 53779, 122257, 38360, 137722, 76070, 67942, 4221, 41328, 99137, 69833, 43375, 107733, 40861, 122268]
[2024-12-02 19:35:08.463591] user = 18687 Cloud 216/568
[2024-12-02 19:35:08.473597] user = 18687 Local 216/568
[2024-12-02 19:35:08.560311] user = 18687 Local+ 216/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:11.067326] user = 18687 MPDA- 216/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4355555555555556
Training on augumented user 115079 0/50 current_auc = 0.4355555555555556
User 115079 AUC after training: 0.4355555555555556
User 115079 does not improve AUC. Reverting changes.
Training on augumented user 131101 1/50 current_auc = 0.4355555555555556
User 131101 AUC after training: 0.44444444444444453
User 131101 improves AUC. Keeping the model.
Training on augumented user 97877 2/50 current_auc = 0.44444444444444453
User 97877 AUC after training: 0.4355555555555556
User 97877 does not improve AUC. Reverting changes.
Training on augumented user 120462 3/50 current_auc = 0.44444444444444453
User 120462 AUC after training: 0.44888888888888895
User 120462 improves AUC. Keeping the model.
Training on augumented user 106311 4/50 current_auc = 0.44888888888888895
User 106311 AUC after training: 0.45333333333333337
User 106311 improves AUC. Keeping the model.
Training on augumented user 106061 5/50 current_auc = 0.45333333333333337
User 106061 AUC after training: 0.45333333333333337
User 106061 does not improve AUC. Reverting changes.
Training on augumented user 45851 6/50 current_auc = 0.45333333333333337
User 45851 AUC after training: 0.4577777777777778
User 45851 improves AUC. Keeping the model.
Training on augumented user 31448 7/50 current_auc = 0.4577777777777778
User 31448 AUC after training: 0.46222222222222226
User 31448 improves AUC. Keeping the model.
Training on augumented user 87887 8/50 current_auc = 0.46222222222222226
User 87887 AUC after training: 0.44
User 87887 does not improve AUC. Reverting changes.
Training on augumented user 78730 9/50 current_auc = 0.46222222222222226
User 78730 AUC after training: 0.47555555555555556
User 78730 improves AUC. Keeping the model.
Training on augumented user 77427 10/50 current_auc = 0.47555555555555556
User 77427 AUC after training: 0.47555555555555556
User 77427 does not improve AUC. Reverting changes.
Training on augumented user 7203 11/50 current_auc = 0.47555555555555556
User 7203 AUC after training: 0.47111111111111115
User 7203 does not improve AUC. Reverting changes.
Training on augumented user 55058 12/50 current_auc = 0.47555555555555556
User 55058 AUC after training: 0.47555555555555556
User 55058 does not improve AUC. Reverting changes.
Training on augumented user 128242 13/50 current_auc = 0.47555555555555556
User 128242 AUC after training: 0.47111111111111115
User 128242 does not improve AUC. Reverting changes.
Training on augumented user 101682 14/50 current_auc = 0.47555555555555556
User 101682 AUC after training: 0.46222222222222226
User 101682 does not improve AUC. Reverting changes.
Training on augumented user 112764 15/50 current_auc = 0.47555555555555556
User 112764 AUC after training: 0.47555555555555556
User 112764 does not improve AUC. Reverting changes.
Training on augumented user 51044 16/50 current_auc = 0.47555555555555556
User 51044 AUC after training: 0.46666666666666673
User 51044 does not improve AUC. Reverting changes.
Training on augumented user 6631 17/50 current_auc = 0.47555555555555556
User 6631 AUC after training: 0.47555555555555556
User 6631 does not improve AUC. Reverting changes.
Training on augumented user 42765 18/50 current_auc = 0.47555555555555556
User 42765 AUC after training: 0.47111111111111115
User 42765 does not improve AUC. Reverting changes.
Training on augumented user 57903 19/50 current_auc = 0.47555555555555556
User 57903 AUC after training: 0.4355555555555556
User 57903 does not improve AUC. Reverting changes.
Training on augumented user 56412 20/50 current_auc = 0.47555555555555556
User 56412 AUC after training: 0.48000000000000004
User 56412 improves AUC. Keeping the model.
Training on augumented user 118193 21/50 current_auc = 0.48000000000000004
User 118193 AUC after training: 0.4577777777777778
User 118193 does not improve AUC. Reverting changes.
Training on augumented user 132580 22/50 current_auc = 0.48000000000000004
User 132580 AUC after training: 0.46666666666666673
User 132580 does not improve AUC. Reverting changes.
Training on augumented user 70542 23/50 current_auc = 0.48000000000000004
User 70542 AUC after training: 0.46666666666666673
User 70542 does not improve AUC. Reverting changes.
Training on augumented user 135109 24/50 current_auc = 0.48000000000000004
User 135109 AUC after training: 0.48000000000000004
User 135109 does not improve AUC. Reverting changes.
Training on augumented user 104198 25/50 current_auc = 0.48000000000000004
User 104198 AUC after training: 0.46666666666666673
User 104198 does not improve AUC. Reverting changes.
Training on augumented user 119054 26/50 current_auc = 0.48000000000000004
User 119054 AUC after training: 0.46666666666666673
User 119054 does not improve AUC. Reverting changes.
Training on augumented user 114556 27/50 current_auc = 0.48000000000000004
User 114556 AUC after training: 0.48000000000000004
User 114556 does not improve AUC. Reverting changes.
Training on augumented user 2585 28/50 current_auc = 0.48000000000000004
User 2585 AUC after training: 0.48000000000000004
User 2585 does not improve AUC. Reverting changes.
Training on augumented user 94494 29/50 current_auc = 0.48000000000000004
User 94494 AUC after training: 0.47555555555555556
User 94494 does not improve AUC. Reverting changes.
Training on augumented user 128182 30/50 current_auc = 0.48000000000000004
User 128182 AUC after training: 0.4888888888888889
User 128182 improves AUC. Keeping the model.
Training on augumented user 118170 31/50 current_auc = 0.4888888888888889
User 118170 AUC after training: 0.48888888888888893
User 118170 improves AUC. Keeping the model.
Training on augumented user 36516 32/50 current_auc = 0.48888888888888893
User 36516 AUC after training: 0.4355555555555556
User 36516 does not improve AUC. Reverting changes.
Training on augumented user 13076 33/50 current_auc = 0.48888888888888893
User 13076 AUC after training: 0.4977777777777778
User 13076 improves AUC. Keeping the model.
Training on augumented user 101594 34/50 current_auc = 0.4977777777777778
User 101594 AUC after training: 0.49333333333333335
User 101594 does not improve AUC. Reverting changes.
Training on augumented user 134268 35/50 current_auc = 0.4977777777777778
User 134268 AUC after training: 0.48888888888888893
User 134268 does not improve AUC. Reverting changes.
Training on augumented user 53779 36/50 current_auc = 0.4977777777777778
User 53779 AUC after training: 0.4888888888888889
User 53779 does not improve AUC. Reverting changes.
Training on augumented user 122257 37/50 current_auc = 0.4977777777777778
User 122257 AUC after training: 0.48888888888888893
User 122257 does not improve AUC. Reverting changes.
Training on augumented user 38360 38/50 current_auc = 0.4977777777777778
User 38360 AUC after training: 0.4844444444444445
User 38360 does not improve AUC. Reverting changes.
Training on augumented user 137722 39/50 current_auc = 0.4977777777777778
User 137722 AUC after training: 0.4844444444444445
User 137722 does not improve AUC. Reverting changes.
Training on augumented user 76070 40/50 current_auc = 0.4977777777777778
User 76070 AUC after training: 0.48888888888888893
User 76070 does not improve AUC. Reverting changes.
Training on augumented user 67942 41/50 current_auc = 0.4977777777777778
User 67942 AUC after training: 0.48888888888888893
User 67942 does not improve AUC. Reverting changes.
Training on augumented user 4221 42/50 current_auc = 0.4977777777777778
User 4221 AUC after training: 0.48888888888888893
User 4221 does not improve AUC. Reverting changes.
Training on augumented user 41328 43/50 current_auc = 0.4977777777777778
User 41328 AUC after training: 0.4844444444444445
User 41328 does not improve AUC. Reverting changes.
Training on augumented user 99137 44/50 current_auc = 0.4977777777777778
User 99137 AUC after training: 0.48888888888888893
User 99137 does not improve AUC. Reverting changes.
Training on augumented user 69833 45/50 current_auc = 0.4977777777777778
User 69833 AUC after training: 0.48888888888888893
User 69833 does not improve AUC. Reverting changes.
Training on augumented user 43375 46/50 current_auc = 0.4977777777777778
User 43375 AUC after training: 0.4977777777777778
User 43375 does not improve AUC. Reverting changes.
Training on augumented user 107733 47/50 current_auc = 0.4977777777777778
User 107733 AUC after training: 0.4844444444444445
User 107733 does not improve AUC. Reverting changes.
Training on augumented user 40861 48/50 current_auc = 0.4977777777777778
User 40861 AUC after training: 0.4844444444444445
User 40861 does not improve AUC. Reverting changes.
Training on augumented user 122268 49/50 current_auc = 0.4977777777777778
User 122268 AUC after training: 0.4755555555555556
User 122268 does not improve AUC. Reverting changes.
[2024-12-02 19:35:37.989502] start test user 18706 217/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:38.714361] start test user 18706 217/568 recall augumented users by random, augumented_users = [123437, 55876, 128493, 30728, 39759, 56626, 4556, 120114, 28385, 97438, 27017, 63053, 140, 62565, 28970, 50783, 30301, 29106, 27839, 57187, 119794, 134460, 80298, 41491, 118770, 118243, 23948, 117139, 138144, 93960, 105421, 65758, 6979, 112992, 86522, 128191, 34108, 49851, 71988, 45781, 84517, 21326, 38355, 22868, 19455, 42213, 79190, 122225, 1355, 125879]
[2024-12-02 19:35:38.742718] user = 18706 Cloud 217/568
[2024-12-02 19:35:38.893632] user = 18706 Local 217/568
[2024-12-02 19:35:39.307468] user = 18706 Local+ 217/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:41.910354] user = 18706 MPDA- 217/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6859036293818903
Training on augumented user 123437 0/50 current_auc = 0.6859036293818903
User 123437 AUC after training: 0.686126594822247
User 123437 improves AUC. Keeping the model.
Training on augumented user 55876 1/50 current_auc = 0.686126594822247
User 55876 AUC after training: 0.6860151121020687
User 55876 does not improve AUC. Reverting changes.
Training on augumented user 128493 2/50 current_auc = 0.686126594822247
User 128493 AUC after training: 0.6862009166356993
User 128493 improves AUC. Keeping the model.
Training on augumented user 30728 3/50 current_auc = 0.6862009166356993
User 30728 AUC after training: 0.6859655642264338
User 30728 does not improve AUC. Reverting changes.
Training on augumented user 39759 4/50 current_auc = 0.6862009166356993
User 39759 AUC after training: 0.685953177257525
User 39759 does not improve AUC. Reverting changes.
Training on augumented user 56626 5/50 current_auc = 0.6862009166356993
User 56626 AUC after training: 0.6860770469466122
User 56626 does not improve AUC. Reverting changes.
Training on augumented user 4556 6/50 current_auc = 0.6862009166356993
User 4556 AUC after training: 0.6859934349064783
User 4556 does not improve AUC. Reverting changes.
Training on augumented user 120114 7/50 current_auc = 0.6862009166356993
User 120114 AUC after training: 0.6862628514802428
User 120114 improves AUC. Keeping the model.
Training on augumented user 28385 8/50 current_auc = 0.6862628514802428
User 28385 AUC after training: 0.6861358850489286
User 28385 does not improve AUC. Reverting changes.
Training on augumented user 97438 9/50 current_auc = 0.6862628514802428
User 97438 AUC after training: 0.6864827201783724
User 97438 improves AUC. Keeping the model.
Training on augumented user 27017 10/50 current_auc = 0.6864827201783724
User 27017 AUC after training: 0.6865198810850984
User 27017 improves AUC. Keeping the model.
Training on augumented user 63053 11/50 current_auc = 0.6865198810850984
User 63053 AUC after training: 0.6866932986498204
User 63053 improves AUC. Keeping the model.
Training on augumented user 140 12/50 current_auc = 0.6866932986498204
User 140 AUC after training: 0.686510590858417
User 140 does not improve AUC. Reverting changes.
Training on augumented user 62565 13/50 current_auc = 0.6866932986498204
User 62565 AUC after training: 0.6867118791031834
User 62565 improves AUC. Keeping the model.
Training on augumented user 28970 14/50 current_auc = 0.6867118791031834
User 28970 AUC after training: 0.6867025888765019
User 28970 does not improve AUC. Reverting changes.
Training on augumented user 50783 15/50 current_auc = 0.6867118791031834
User 50783 AUC after training: 0.6863743342004212
User 50783 does not improve AUC. Reverting changes.
Training on augumented user 30301 16/50 current_auc = 0.6867118791031834
User 30301 AUC after training: 0.6868078781122259
User 30301 improves AUC. Keeping the model.
Training on augumented user 29106 17/50 current_auc = 0.6868078781122259
User 29106 AUC after training: 0.6866344605475041
User 29106 does not improve AUC. Reverting changes.
Training on augumented user 27839 18/50 current_auc = 0.6868078781122259
User 27839 AUC after training: 0.6867707172054998
User 27839 does not improve AUC. Reverting changes.
Training on augumented user 57187 19/50 current_auc = 0.6868078781122259
User 57187 AUC after training: 0.6867583302365912
User 57187 does not improve AUC. Reverting changes.
Training on augumented user 119794 20/50 current_auc = 0.6868078781122259
User 119794 AUC after training: 0.6866840084231389
User 119794 does not improve AUC. Reverting changes.
Training on augumented user 134460 21/50 current_auc = 0.6868078781122259
User 134460 AUC after training: 0.6874953548866591
User 134460 improves AUC. Keeping the model.
Training on augumented user 80298 22/50 current_auc = 0.6874953548866591
User 80298 AUC after training: 0.6873405177753005
User 80298 does not improve AUC. Reverting changes.
Training on augumented user 41491 23/50 current_auc = 0.6874953548866591
User 41491 AUC after training: 0.6874829679177505
User 41491 does not improve AUC. Reverting changes.
Training on augumented user 118770 24/50 current_auc = 0.6874953548866591
User 118770 AUC after training: 0.6875015483711135
User 118770 improves AUC. Keeping the model.
Training on augumented user 118243 25/50 current_auc = 0.6875015483711135
User 118243 AUC after training: 0.6877616747181965
User 118243 improves AUC. Keeping the model.
Training on augumented user 23948 26/50 current_auc = 0.6877616747181965
User 23948 AUC after training: 0.6877121268425617
User 23948 does not improve AUC. Reverting changes.
Training on augumented user 117139 27/50 current_auc = 0.6877616747181965
User 117139 AUC after training: 0.6875572897312028
User 117139 does not improve AUC. Reverting changes.
Training on augumented user 138144 28/50 current_auc = 0.6877616747181965
User 138144 AUC after training: 0.6878205128205128
User 138144 improves AUC. Keeping the model.
Training on augumented user 93960 29/50 current_auc = 0.6878205128205128
User 93960 AUC after training: 0.687421033073207
User 93960 does not improve AUC. Reverting changes.
Training on augumented user 105421 30/50 current_auc = 0.6878205128205128
User 105421 AUC after training: 0.6877864486560139
User 105421 does not improve AUC. Reverting changes.
Training on augumented user 65758 31/50 current_auc = 0.6878205128205128
User 65758 AUC after training: 0.6879877369007804
User 65758 improves AUC. Keeping the model.
Training on augumented user 6979 32/50 current_auc = 0.6879877369007804
User 6979 AUC after training: 0.6879041248606466
User 6979 does not improve AUC. Reverting changes.
Training on augumented user 112992 33/50 current_auc = 0.6879877369007804
User 112992 AUC after training: 0.6879939303852348
User 112992 improves AUC. Keeping the model.
Training on augumented user 86522 34/50 current_auc = 0.6879939303852348
User 86522 AUC after training: 0.6859996283909328
User 86522 does not improve AUC. Reverting changes.
Training on augumented user 128191 35/50 current_auc = 0.6879939303852348
User 128191 AUC after training: 0.6880279945497337
User 128191 improves AUC. Keeping the model.
Training on augumented user 34108 36/50 current_auc = 0.6880279945497337
User 34108 AUC after training: 0.6877957388826954
User 34108 does not improve AUC. Reverting changes.
Training on augumented user 49851 37/50 current_auc = 0.6880279945497337
User 49851 AUC after training: 0.6869751021924935
User 49851 does not improve AUC. Reverting changes.
Training on augumented user 71988 38/50 current_auc = 0.6880279945497337
User 71988 AUC after training: 0.6879412857673729
User 71988 does not improve AUC. Reverting changes.
Training on augumented user 45781 39/50 current_auc = 0.6880279945497337
User 45781 AUC after training: 0.6880125108385978
User 45781 does not improve AUC. Reverting changes.
Training on augumented user 84517 40/50 current_auc = 0.6880279945497337
User 84517 AUC after training: 0.6878948346339651
User 84517 does not improve AUC. Reverting changes.
Training on augumented user 21326 41/50 current_auc = 0.6880279945497337
User 21326 AUC after training: 0.6875634832156572
User 21326 does not improve AUC. Reverting changes.
Training on augumented user 38355 42/50 current_auc = 0.6880279945497337
User 38355 AUC after training: 0.6880961228787316
User 38355 improves AUC. Keeping the model.
Training on augumented user 22868 43/50 current_auc = 0.6880961228787316
User 22868 AUC after training: 0.6879165118295553
User 22868 does not improve AUC. Reverting changes.
Training on augumented user 19455 44/50 current_auc = 0.6880961228787316
User 19455 AUC after training: 0.6879350922829184
User 19455 does not improve AUC. Reverting changes.
Training on augumented user 42213 45/50 current_auc = 0.6880961228787316
User 42213 AUC after training: 0.6881952186300013
User 42213 improves AUC. Keeping the model.
Training on augumented user 79190 46/50 current_auc = 0.6881952186300013
User 79190 AUC after training: 0.688226186052273
User 79190 improves AUC. Keeping the model.
Training on augumented user 122225 47/50 current_auc = 0.688226186052273
User 122225 AUC after training: 0.688455344977084
User 122225 improves AUC. Keeping the model.
Training on augumented user 1355 48/50 current_auc = 0.688455344977084
User 1355 AUC after training: 0.6885420537594451
User 1355 improves AUC. Keeping the model.
Training on augumented user 125879 49/50 current_auc = 0.6885420537594451
User 125879 AUC after training: 0.6884832156571288
User 125879 does not improve AUC. Reverting changes.
[2024-12-02 19:36:19.012832] start test user 18711 218/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:19.775143] start test user 18711 218/568 recall augumented users by random, augumented_users = [71349, 138006, 87596, 22940, 16962, 132237, 48578, 45875, 58483, 91601, 80715, 111615, 87726, 34622, 95822, 34318, 13100, 32583, 44582, 112503, 74879, 104383, 77820, 74178, 77601, 303, 13600, 77638, 48948, 109419, 41494, 20724, 98388, 13593, 64247, 16977, 96431, 131398, 59277, 89453, 130774, 134181, 105298, 91971, 106006, 32249, 7793, 81307, 40524, 21076]
[2024-12-02 19:36:19.793288] user = 18711 Cloud 218/568
[2024-12-02 19:36:19.821764] user = 18711 Local 218/568
[2024-12-02 19:36:19.918241] user = 18711 Local+ 218/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:23.147394] user = 18711 MPDA- 218/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8577328321067401
Training on augumented user 71349 0/50 current_auc = 0.8577328321067401
User 71349 AUC after training: 0.8577857785778578
User 71349 improves AUC. Keeping the model.
Training on augumented user 138006 1/50 current_auc = 0.8577857785778578
User 138006 AUC after training: 0.8583681897601525
User 138006 improves AUC. Keeping the model.
Training on augumented user 87596 2/50 current_auc = 0.8583681897601525
User 87596 AUC after training: 0.8581564038756817
User 87596 does not improve AUC. Reverting changes.
Training on augumented user 22940 3/50 current_auc = 0.8583681897601525
User 22940 AUC after training: 0.8585799756446233
User 22940 improves AUC. Keeping the model.
Training on augumented user 16962 4/50 current_auc = 0.8585799756446233
User 16962 AUC after training: 0.858474082702388
User 16962 does not improve AUC. Reverting changes.
Training on augumented user 132237 5/50 current_auc = 0.8585799756446233
User 132237 AUC after training: 0.8579446179912109
User 132237 does not improve AUC. Reverting changes.
Training on augumented user 48578 6/50 current_auc = 0.8585799756446233
User 48578 AUC after training: 0.858632922115741
User 48578 improves AUC. Keeping the model.
Training on augumented user 45875 7/50 current_auc = 0.858632922115741
User 45875 AUC after training: 0.8584211362312701
User 45875 does not improve AUC. Reverting changes.
Training on augumented user 58483 8/50 current_auc = 0.858632922115741
User 58483 AUC after training: 0.8576269391645047
User 58483 does not improve AUC. Reverting changes.
Training on augumented user 91601 9/50 current_auc = 0.858632922115741
User 91601 AUC after training: 0.8581564038756817
User 91601 does not improve AUC. Reverting changes.
Training on augumented user 80715 10/50 current_auc = 0.858632922115741
User 80715 AUC after training: 0.8583152432890349
User 80715 does not improve AUC. Reverting changes.
Training on augumented user 111615 11/50 current_auc = 0.858632922115741
User 111615 AUC after training: 0.8585799756446233
User 111615 does not improve AUC. Reverting changes.
Training on augumented user 87726 12/50 current_auc = 0.858632922115741
User 87726 AUC after training: 0.8583681897601525
User 87726 does not improve AUC. Reverting changes.
Training on augumented user 34622 13/50 current_auc = 0.858632922115741
User 34622 AUC after training: 0.8580505109334463
User 34622 does not improve AUC. Reverting changes.
Training on augumented user 95822 14/50 current_auc = 0.858632922115741
User 95822 AUC after training: 0.8574151532800339
User 95822 does not improve AUC. Reverting changes.
Training on augumented user 34318 15/50 current_auc = 0.858632922115741
User 34318 AUC after training: 0.8586329221157409
User 34318 does not improve AUC. Reverting changes.
Training on augumented user 13100 16/50 current_auc = 0.858632922115741
User 13100 AUC after training: 0.8588447080002117
User 13100 improves AUC. Keeping the model.
Training on augumented user 32583 17/50 current_auc = 0.8588447080002117
User 32583 AUC after training: 0.8592153332980357
User 32583 improves AUC. Keeping the model.
Training on augumented user 44582 18/50 current_auc = 0.8592153332980357
User 44582 AUC after training: 0.8592682797691534
User 44582 improves AUC. Keeping the model.
Training on augumented user 112503 19/50 current_auc = 0.8592682797691534
User 112503 AUC after training: 0.8577857785778578
User 112503 does not improve AUC. Reverting changes.
Training on augumented user 74879 20/50 current_auc = 0.8592682797691534
User 74879 AUC after training: 0.856515063271033
User 74879 does not improve AUC. Reverting changes.
Training on augumented user 104383 21/50 current_auc = 0.8592682797691534
User 104383 AUC after training: 0.860062476835919
User 104383 improves AUC. Keeping the model.
Training on augumented user 77820 22/50 current_auc = 0.860062476835919
User 77820 AUC after training: 0.8598506909514481
User 77820 does not improve AUC. Reverting changes.
Training on augumented user 74178 23/50 current_auc = 0.860062476835919
User 74178 AUC after training: 0.8601683697781544
User 74178 improves AUC. Keeping the model.
Training on augumented user 77601 24/50 current_auc = 0.8601683697781544
User 77601 AUC after training: 0.8597447980092127
User 77601 does not improve AUC. Reverting changes.
Training on augumented user 303 25/50 current_auc = 0.8601683697781544
User 303 AUC after training: 0.8597447980092127
User 303 does not improve AUC. Reverting changes.
Training on augumented user 13600 26/50 current_auc = 0.8601683697781544
User 13600 AUC after training: 0.8596389050669773
User 13600 does not improve AUC. Reverting changes.
Training on augumented user 77638 27/50 current_auc = 0.8601683697781544
User 77638 AUC after training: 0.8598506909514481
User 77638 does not improve AUC. Reverting changes.
Training on augumented user 48948 28/50 current_auc = 0.8601683697781544
User 48948 AUC after training: 0.8599565838936836
User 48948 does not improve AUC. Reverting changes.
Training on augumented user 109419 29/50 current_auc = 0.8601683697781544
User 109419 AUC after training: 0.8597977444803304
User 109419 does not improve AUC. Reverting changes.
Training on augumented user 41494 30/50 current_auc = 0.8601683697781544
User 41494 AUC after training: 0.8602742627203896
User 41494 improves AUC. Keeping the model.
Training on augumented user 20724 31/50 current_auc = 0.8602742627203896
User 20724 AUC after training: 0.8602742627203896
User 20724 does not improve AUC. Reverting changes.
Training on augumented user 98388 32/50 current_auc = 0.8602742627203896
User 98388 AUC after training: 0.8600624768359189
User 98388 does not improve AUC. Reverting changes.
Training on augumented user 13593 33/50 current_auc = 0.8602742627203896
User 13593 AUC after training: 0.860221316249272
User 13593 does not improve AUC. Reverting changes.
Training on augumented user 64247 34/50 current_auc = 0.8602742627203896
User 64247 AUC after training: 0.8602742627203896
User 64247 does not improve AUC. Reverting changes.
Training on augumented user 16977 35/50 current_auc = 0.8602742627203896
User 16977 AUC after training: 0.8588976544713295
User 16977 does not improve AUC. Reverting changes.
Training on augumented user 96431 36/50 current_auc = 0.8602742627203896
User 96431 AUC after training: 0.8600095303648012
User 96431 does not improve AUC. Reverting changes.
Training on augumented user 131398 37/50 current_auc = 0.8602742627203896
User 131398 AUC after training: 0.8599036374225657
User 131398 does not improve AUC. Reverting changes.
Training on augumented user 59277 38/50 current_auc = 0.8602742627203896
User 59277 AUC after training: 0.8601154233070366
User 59277 does not improve AUC. Reverting changes.
Training on augumented user 89453 39/50 current_auc = 0.8602742627203896
User 89453 AUC after training: 0.8603272091915075
User 89453 improves AUC. Keeping the model.
Training on augumented user 130774 40/50 current_auc = 0.8603272091915075
User 130774 AUC after training: 0.8592153332980357
User 130774 does not improve AUC. Reverting changes.
Training on augumented user 134181 41/50 current_auc = 0.8603272091915075
User 134181 AUC after training: 0.8582093503467993
User 134181 does not improve AUC. Reverting changes.
Training on augumented user 105298 42/50 current_auc = 0.8603272091915075
User 105298 AUC after training: 0.860221316249272
User 105298 does not improve AUC. Reverting changes.
Training on augumented user 91971 43/50 current_auc = 0.8603272091915075
User 91971 AUC after training: 0.8596918515380949
User 91971 does not improve AUC. Reverting changes.
Training on augumented user 106006 44/50 current_auc = 0.8603272091915075
User 106006 AUC after training: 0.8601154233070366
User 106006 does not improve AUC. Reverting changes.
Training on augumented user 32249 45/50 current_auc = 0.8603272091915075
User 32249 AUC after training: 0.8601683697781544
User 32249 does not improve AUC. Reverting changes.
Training on augumented user 7793 46/50 current_auc = 0.8603272091915075
User 7793 AUC after training: 0.8600095303648012
User 7793 does not improve AUC. Reverting changes.
Training on augumented user 81307 47/50 current_auc = 0.8603272091915075
User 81307 AUC after training: 0.8603801556626252
User 81307 improves AUC. Keeping the model.
Training on augumented user 40524 48/50 current_auc = 0.8603801556626252
User 40524 AUC after training: 0.8600095303648011
User 40524 does not improve AUC. Reverting changes.
Training on augumented user 21076 49/50 current_auc = 0.8603801556626252
User 21076 AUC after training: 0.8601683697781543
User 21076 does not improve AUC. Reverting changes.
[2024-12-02 19:36:54.541229] start test user 18712 219/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:55.267797] start test user 18712 219/568 recall augumented users by random, augumented_users = [120033, 66194, 76977, 74381, 19206, 33300, 131559, 23077, 94863, 84912, 51437, 3129, 817, 80019, 119870, 137097, 117107, 62857, 127083, 109657, 113084, 104345, 59660, 120266, 116585, 41835, 9494, 102767, 65873, 85886, 94904, 132431, 130566, 61441, 87865, 16349, 35606, 46112, 55701, 92343, 28704, 932, 30201, 61419, 35459, 113550, 25335, 61436, 120387, 99567]
[2024-12-02 19:36:55.283332] user = 18712 Cloud 219/568
[2024-12-02 19:36:55.303783] user = 18712 Local 219/568
[2024-12-02 19:36:55.460050] user = 18712 Local+ 219/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:58.497523] user = 18712 MPDA- 219/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9197802197802197
Training on augumented user 120033 0/50 current_auc = 0.9197802197802197
User 120033 AUC after training: 0.9197802197802197
User 120033 does not improve AUC. Reverting changes.
Training on augumented user 66194 1/50 current_auc = 0.9197802197802197
User 66194 AUC after training: 0.9186813186813186
User 66194 does not improve AUC. Reverting changes.
Training on augumented user 76977 2/50 current_auc = 0.9197802197802197
User 76977 AUC after training: 0.9197802197802197
User 76977 does not improve AUC. Reverting changes.
Training on augumented user 74381 3/50 current_auc = 0.9197802197802197
User 74381 AUC after training: 0.9197802197802197
User 74381 does not improve AUC. Reverting changes.
Training on augumented user 19206 4/50 current_auc = 0.9197802197802197
User 19206 AUC after training: 0.9197802197802197
User 19206 does not improve AUC. Reverting changes.
Training on augumented user 33300 5/50 current_auc = 0.9197802197802197
User 33300 AUC after training: 0.9186813186813186
User 33300 does not improve AUC. Reverting changes.
Training on augumented user 131559 6/50 current_auc = 0.9197802197802197
User 131559 AUC after training: 0.9197802197802197
User 131559 does not improve AUC. Reverting changes.
Training on augumented user 23077 7/50 current_auc = 0.9197802197802197
User 23077 AUC after training: 0.9197802197802197
User 23077 does not improve AUC. Reverting changes.
Training on augumented user 94863 8/50 current_auc = 0.9197802197802197
User 94863 AUC after training: 0.9186813186813186
User 94863 does not improve AUC. Reverting changes.
Training on augumented user 84912 9/50 current_auc = 0.9197802197802197
User 84912 AUC after training: 0.9197802197802197
User 84912 does not improve AUC. Reverting changes.
Training on augumented user 51437 10/50 current_auc = 0.9197802197802197
User 51437 AUC after training: 0.9186813186813186
User 51437 does not improve AUC. Reverting changes.
Training on augumented user 3129 11/50 current_auc = 0.9197802197802197
User 3129 AUC after training: 0.9186813186813186
User 3129 does not improve AUC. Reverting changes.
Training on augumented user 817 12/50 current_auc = 0.9197802197802197
User 817 AUC after training: 0.9197802197802197
User 817 does not improve AUC. Reverting changes.
Training on augumented user 80019 13/50 current_auc = 0.9197802197802197
User 80019 AUC after training: 0.9197802197802197
User 80019 does not improve AUC. Reverting changes.
Training on augumented user 119870 14/50 current_auc = 0.9197802197802197
User 119870 AUC after training: 0.9186813186813186
User 119870 does not improve AUC. Reverting changes.
Training on augumented user 137097 15/50 current_auc = 0.9197802197802197
User 137097 AUC after training: 0.9197802197802197
User 137097 does not improve AUC. Reverting changes.
Training on augumented user 117107 16/50 current_auc = 0.9197802197802197
User 117107 AUC after training: 0.9208791208791208
User 117107 improves AUC. Keeping the model.
Training on augumented user 62857 17/50 current_auc = 0.9208791208791208
User 62857 AUC after training: 0.9208791208791208
User 62857 does not improve AUC. Reverting changes.
Training on augumented user 127083 18/50 current_auc = 0.9208791208791208
User 127083 AUC after training: 0.9208791208791208
User 127083 does not improve AUC. Reverting changes.
Training on augumented user 109657 19/50 current_auc = 0.9208791208791208
User 109657 AUC after training: 0.9208791208791208
User 109657 does not improve AUC. Reverting changes.
Training on augumented user 113084 20/50 current_auc = 0.9208791208791208
User 113084 AUC after training: 0.9208791208791208
User 113084 does not improve AUC. Reverting changes.
Training on augumented user 104345 21/50 current_auc = 0.9208791208791208
User 104345 AUC after training: 0.9208791208791208
User 104345 does not improve AUC. Reverting changes.
Training on augumented user 59660 22/50 current_auc = 0.9208791208791208
User 59660 AUC after training: 0.9208791208791208
User 59660 does not improve AUC. Reverting changes.
Training on augumented user 120266 23/50 current_auc = 0.9208791208791208
User 120266 AUC after training: 0.9208791208791208
User 120266 does not improve AUC. Reverting changes.
Training on augumented user 116585 24/50 current_auc = 0.9208791208791208
User 116585 AUC after training: 0.9208791208791208
User 116585 does not improve AUC. Reverting changes.
Training on augumented user 41835 25/50 current_auc = 0.9208791208791208
User 41835 AUC after training: 0.9208791208791208
User 41835 does not improve AUC. Reverting changes.
Training on augumented user 9494 26/50 current_auc = 0.9208791208791208
User 9494 AUC after training: 0.9208791208791208
User 9494 does not improve AUC. Reverting changes.
Training on augumented user 102767 27/50 current_auc = 0.9208791208791208
User 102767 AUC after training: 0.9208791208791208
User 102767 does not improve AUC. Reverting changes.
Training on augumented user 65873 28/50 current_auc = 0.9208791208791208
User 65873 AUC after training: 0.9208791208791208
User 65873 does not improve AUC. Reverting changes.
Training on augumented user 85886 29/50 current_auc = 0.9208791208791208
User 85886 AUC after training: 0.9208791208791208
User 85886 does not improve AUC. Reverting changes.
Training on augumented user 94904 30/50 current_auc = 0.9208791208791208
User 94904 AUC after training: 0.9197802197802197
User 94904 does not improve AUC. Reverting changes.
Training on augumented user 132431 31/50 current_auc = 0.9208791208791208
User 132431 AUC after training: 0.9197802197802197
User 132431 does not improve AUC. Reverting changes.
Training on augumented user 130566 32/50 current_auc = 0.9208791208791208
User 130566 AUC after training: 0.9186813186813186
User 130566 does not improve AUC. Reverting changes.
Training on augumented user 61441 33/50 current_auc = 0.9208791208791208
User 61441 AUC after training: 0.9208791208791208
User 61441 does not improve AUC. Reverting changes.
Training on augumented user 87865 34/50 current_auc = 0.9208791208791208
User 87865 AUC after training: 0.9208791208791208
User 87865 does not improve AUC. Reverting changes.
Training on augumented user 16349 35/50 current_auc = 0.9208791208791208
User 16349 AUC after training: 0.9197802197802197
User 16349 does not improve AUC. Reverting changes.
Training on augumented user 35606 36/50 current_auc = 0.9208791208791208
User 35606 AUC after training: 0.9208791208791208
User 35606 does not improve AUC. Reverting changes.
Training on augumented user 46112 37/50 current_auc = 0.9208791208791208
User 46112 AUC after training: 0.9208791208791208
User 46112 does not improve AUC. Reverting changes.
Training on augumented user 55701 38/50 current_auc = 0.9208791208791208
User 55701 AUC after training: 0.9197802197802197
User 55701 does not improve AUC. Reverting changes.
Training on augumented user 92343 39/50 current_auc = 0.9208791208791208
User 92343 AUC after training: 0.9197802197802197
User 92343 does not improve AUC. Reverting changes.
Training on augumented user 28704 40/50 current_auc = 0.9208791208791208
User 28704 AUC after training: 0.9197802197802197
User 28704 does not improve AUC. Reverting changes.
Training on augumented user 932 41/50 current_auc = 0.9208791208791208
User 932 AUC after training: 0.9197802197802197
User 932 does not improve AUC. Reverting changes.
Training on augumented user 30201 42/50 current_auc = 0.9208791208791208
User 30201 AUC after training: 0.9208791208791208
User 30201 does not improve AUC. Reverting changes.
Training on augumented user 61419 43/50 current_auc = 0.9208791208791208
User 61419 AUC after training: 0.9208791208791208
User 61419 does not improve AUC. Reverting changes.
Training on augumented user 35459 44/50 current_auc = 0.9208791208791208
User 35459 AUC after training: 0.9197802197802197
User 35459 does not improve AUC. Reverting changes.
Training on augumented user 113550 45/50 current_auc = 0.9208791208791208
User 113550 AUC after training: 0.9208791208791208
User 113550 does not improve AUC. Reverting changes.
Training on augumented user 25335 46/50 current_auc = 0.9208791208791208
User 25335 AUC after training: 0.9208791208791208
User 25335 does not improve AUC. Reverting changes.
Training on augumented user 61436 47/50 current_auc = 0.9208791208791208
User 61436 AUC after training: 0.9197802197802197
User 61436 does not improve AUC. Reverting changes.
Training on augumented user 120387 48/50 current_auc = 0.9208791208791208
User 120387 AUC after training: 0.9186813186813186
User 120387 does not improve AUC. Reverting changes.
Training on augumented user 99567 49/50 current_auc = 0.9208791208791208
User 99567 AUC after training: 0.9208791208791208
User 99567 does not improve AUC. Reverting changes.
[2024-12-02 19:37:32.258887] start test user 18723 220/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:32.811854] start test user 18723 220/568 recall augumented users by random, augumented_users = [41377, 118452, 62081, 4238, 75394, 14956, 129985, 15342, 67454, 73711, 31142, 94418, 131563, 12204, 113610, 119348, 111153, 118580, 61018, 64334, 128217, 103265, 21541, 32976, 59210, 32469, 42225, 21022, 114338, 34043, 92950, 99919, 61261, 133103, 119800, 90776, 130969, 17474, 31098, 118031, 34266, 99133, 26930, 26483, 115412, 54068, 14303, 56381, 109344, 81256]
[2024-12-02 19:37:32.827779] user = 18723 Cloud 220/568
[2024-12-02 19:37:32.849619] user = 18723 Local 220/568
[2024-12-02 19:37:32.954321] user = 18723 Local+ 220/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:35.699208] user = 18723 MPDA- 220/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5555555555555556
Training on augumented user 41377 0/50 current_auc = 0.5555555555555556
User 41377 AUC after training: 0.5833333333333333
User 41377 improves AUC. Keeping the model.
Training on augumented user 118452 1/50 current_auc = 0.5833333333333333
User 118452 AUC after training: 0.5833333333333333
User 118452 does not improve AUC. Reverting changes.
Training on augumented user 62081 2/50 current_auc = 0.5833333333333333
User 62081 AUC after training: 0.5833333333333333
User 62081 does not improve AUC. Reverting changes.
Training on augumented user 4238 3/50 current_auc = 0.5833333333333333
User 4238 AUC after training: 0.5277777777777778
User 4238 does not improve AUC. Reverting changes.
Training on augumented user 75394 4/50 current_auc = 0.5833333333333333
User 75394 AUC after training: 0.5555555555555556
User 75394 does not improve AUC. Reverting changes.
Training on augumented user 14956 5/50 current_auc = 0.5833333333333333
User 14956 AUC after training: 0.5277777777777778
User 14956 does not improve AUC. Reverting changes.
Training on augumented user 129985 6/50 current_auc = 0.5833333333333333
User 129985 AUC after training: 0.5833333333333333
User 129985 does not improve AUC. Reverting changes.
Training on augumented user 15342 7/50 current_auc = 0.5833333333333333
User 15342 AUC after training: 0.5833333333333333
User 15342 does not improve AUC. Reverting changes.
Training on augumented user 67454 8/50 current_auc = 0.5833333333333333
User 67454 AUC after training: 0.5555555555555556
User 67454 does not improve AUC. Reverting changes.
Training on augumented user 73711 9/50 current_auc = 0.5833333333333333
User 73711 AUC after training: 0.5555555555555556
User 73711 does not improve AUC. Reverting changes.
Training on augumented user 31142 10/50 current_auc = 0.5833333333333333
User 31142 AUC after training: 0.5833333333333333
User 31142 does not improve AUC. Reverting changes.
Training on augumented user 94418 11/50 current_auc = 0.5833333333333333
User 94418 AUC after training: 0.5833333333333333
User 94418 does not improve AUC. Reverting changes.
Training on augumented user 131563 12/50 current_auc = 0.5833333333333333
User 131563 AUC after training: 0.5833333333333333
User 131563 does not improve AUC. Reverting changes.
Training on augumented user 12204 13/50 current_auc = 0.5833333333333333
User 12204 AUC after training: 0.5833333333333333
User 12204 does not improve AUC. Reverting changes.
Training on augumented user 113610 14/50 current_auc = 0.5833333333333333
User 113610 AUC after training: 0.5277777777777778
User 113610 does not improve AUC. Reverting changes.
Training on augumented user 119348 15/50 current_auc = 0.5833333333333333
User 119348 AUC after training: 0.5833333333333333
User 119348 does not improve AUC. Reverting changes.
Training on augumented user 111153 16/50 current_auc = 0.5833333333333333
User 111153 AUC after training: 0.5833333333333333
User 111153 does not improve AUC. Reverting changes.
Training on augumented user 118580 17/50 current_auc = 0.5833333333333333
User 118580 AUC after training: 0.5555555555555556
User 118580 does not improve AUC. Reverting changes.
Training on augumented user 61018 18/50 current_auc = 0.5833333333333333
User 61018 AUC after training: 0.5555555555555556
User 61018 does not improve AUC. Reverting changes.
Training on augumented user 64334 19/50 current_auc = 0.5833333333333333
User 64334 AUC after training: 0.5277777777777778
User 64334 does not improve AUC. Reverting changes.
Training on augumented user 128217 20/50 current_auc = 0.5833333333333333
User 128217 AUC after training: 0.5833333333333333
User 128217 does not improve AUC. Reverting changes.
Training on augumented user 103265 21/50 current_auc = 0.5833333333333333
User 103265 AUC after training: 0.5277777777777778
User 103265 does not improve AUC. Reverting changes.
Training on augumented user 21541 22/50 current_auc = 0.5833333333333333
User 21541 AUC after training: 0.5833333333333333
User 21541 does not improve AUC. Reverting changes.
Training on augumented user 32976 23/50 current_auc = 0.5833333333333333
User 32976 AUC after training: 0.5833333333333333
User 32976 does not improve AUC. Reverting changes.
Training on augumented user 59210 24/50 current_auc = 0.5833333333333333
User 59210 AUC after training: 0.5555555555555556
User 59210 does not improve AUC. Reverting changes.
Training on augumented user 32469 25/50 current_auc = 0.5833333333333333
User 32469 AUC after training: 0.5833333333333333
User 32469 does not improve AUC. Reverting changes.
Training on augumented user 42225 26/50 current_auc = 0.5833333333333333
User 42225 AUC after training: 0.5555555555555556
User 42225 does not improve AUC. Reverting changes.
Training on augumented user 21022 27/50 current_auc = 0.5833333333333333
User 21022 AUC after training: 0.5833333333333333
User 21022 does not improve AUC. Reverting changes.
Training on augumented user 114338 28/50 current_auc = 0.5833333333333333
User 114338 AUC after training: 0.5833333333333333
User 114338 does not improve AUC. Reverting changes.
Training on augumented user 34043 29/50 current_auc = 0.5833333333333333
User 34043 AUC after training: 0.5833333333333333
User 34043 does not improve AUC. Reverting changes.
Training on augumented user 92950 30/50 current_auc = 0.5833333333333333
User 92950 AUC after training: 0.5555555555555556
User 92950 does not improve AUC. Reverting changes.
Training on augumented user 99919 31/50 current_auc = 0.5833333333333333
User 99919 AUC after training: 0.5277777777777778
User 99919 does not improve AUC. Reverting changes.
Training on augumented user 61261 32/50 current_auc = 0.5833333333333333
User 61261 AUC after training: 0.5833333333333333
User 61261 does not improve AUC. Reverting changes.
Training on augumented user 133103 33/50 current_auc = 0.5833333333333333
User 133103 AUC after training: 0.5833333333333333
User 133103 does not improve AUC. Reverting changes.
Training on augumented user 119800 34/50 current_auc = 0.5833333333333333
User 119800 AUC after training: 0.5833333333333333
User 119800 does not improve AUC. Reverting changes.
Training on augumented user 90776 35/50 current_auc = 0.5833333333333333
User 90776 AUC after training: 0.5833333333333333
User 90776 does not improve AUC. Reverting changes.
Training on augumented user 130969 36/50 current_auc = 0.5833333333333333
User 130969 AUC after training: 0.5833333333333333
User 130969 does not improve AUC. Reverting changes.
Training on augumented user 17474 37/50 current_auc = 0.5833333333333333
User 17474 AUC after training: 0.5555555555555556
User 17474 does not improve AUC. Reverting changes.
Training on augumented user 31098 38/50 current_auc = 0.5833333333333333
User 31098 AUC after training: 0.5555555555555556
User 31098 does not improve AUC. Reverting changes.
Training on augumented user 118031 39/50 current_auc = 0.5833333333333333
User 118031 AUC after training: 0.5833333333333333
User 118031 does not improve AUC. Reverting changes.
Training on augumented user 34266 40/50 current_auc = 0.5833333333333333
User 34266 AUC after training: 0.5555555555555556
User 34266 does not improve AUC. Reverting changes.
Training on augumented user 99133 41/50 current_auc = 0.5833333333333333
User 99133 AUC after training: 0.5277777777777778
User 99133 does not improve AUC. Reverting changes.
Training on augumented user 26930 42/50 current_auc = 0.5833333333333333
User 26930 AUC after training: 0.5555555555555556
User 26930 does not improve AUC. Reverting changes.
Training on augumented user 26483 43/50 current_auc = 0.5833333333333333
User 26483 AUC after training: 0.5833333333333333
User 26483 does not improve AUC. Reverting changes.
Training on augumented user 115412 44/50 current_auc = 0.5833333333333333
User 115412 AUC after training: 0.5833333333333333
User 115412 does not improve AUC. Reverting changes.
Training on augumented user 54068 45/50 current_auc = 0.5833333333333333
User 54068 AUC after training: 0.5277777777777778
User 54068 does not improve AUC. Reverting changes.
Training on augumented user 14303 46/50 current_auc = 0.5833333333333333
User 14303 AUC after training: 0.5833333333333333
User 14303 does not improve AUC. Reverting changes.
Training on augumented user 56381 47/50 current_auc = 0.5833333333333333
User 56381 AUC after training: 0.5833333333333333
User 56381 does not improve AUC. Reverting changes.
Training on augumented user 109344 48/50 current_auc = 0.5833333333333333
User 109344 AUC after training: 0.5833333333333333
User 109344 does not improve AUC. Reverting changes.
Training on augumented user 81256 49/50 current_auc = 0.5833333333333333
User 81256 AUC after training: 0.5277777777777778
User 81256 does not improve AUC. Reverting changes.
[2024-12-02 19:38:02.695112] start test user 18756 221/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:03.301376] start test user 18756 221/568 recall augumented users by random, augumented_users = [39719, 89683, 103400, 31331, 106801, 25211, 64960, 5357, 94180, 41989, 89614, 14965, 86794, 18207, 93346, 24699, 105345, 88958, 23349, 77005, 6053, 43371, 126931, 126734, 65935, 27327, 36462, 59394, 130603, 137704, 129986, 69779, 118000, 127138, 54857, 96700, 19741, 66315, 78525, 8862, 5941, 137549, 120765, 117922, 106602, 30188, 26335, 101634, 6722, 86281]
[2024-12-02 19:38:03.325086] user = 18756 Cloud 221/568
[2024-12-02 19:38:03.446452] user = 18756 Local 221/568
[2024-12-02 19:38:03.567025] user = 18756 Local+ 221/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:06.840548] user = 18756 MPDA- 221/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6943040664997875
Training on augumented user 39719 0/50 current_auc = 0.6943040664997875
User 39719 AUC after training: 0.6941623766117224
User 39719 does not improve AUC. Reverting changes.
Training on augumented user 89683 1/50 current_auc = 0.6943040664997875
User 89683 AUC after training: 0.6942568365370992
User 89683 does not improve AUC. Reverting changes.
Training on augumented user 103400 2/50 current_auc = 0.6943040664997875
User 103400 AUC after training: 0.6943985264251643
User 103400 improves AUC. Keeping the model.
Training on augumented user 31331 3/50 current_auc = 0.6943985264251643
User 31331 AUC after training: 0.6943119381602355
User 31331 does not improve AUC. Reverting changes.
Training on augumented user 106801 4/50 current_auc = 0.6943985264251643
User 106801 AUC after training: 0.6941623766117225
User 106801 does not improve AUC. Reverting changes.
Training on augumented user 25211 5/50 current_auc = 0.6943985264251643
User 25211 AUC after training: 0.6943198098206836
User 25211 does not improve AUC. Reverting changes.
Training on augumented user 64960 6/50 current_auc = 0.6943985264251643
User 64960 AUC after training: 0.6942096065744108
User 64960 does not improve AUC. Reverting changes.
Training on augumented user 5357 7/50 current_auc = 0.6943985264251643
User 5357 AUC after training: 0.6942883231788914
User 5357 does not improve AUC. Reverting changes.
Training on augumented user 94180 8/50 current_auc = 0.6943985264251643
User 94180 AUC after training: 0.6943198098206836
User 94180 does not improve AUC. Reverting changes.
Training on augumented user 41989 9/50 current_auc = 0.6943985264251643
User 41989 AUC after training: 0.6941466332908264
User 41989 does not improve AUC. Reverting changes.
Training on augumented user 89614 10/50 current_auc = 0.6943985264251643
User 89614 AUC after training: 0.6941781199326187
User 89614 does not improve AUC. Reverting changes.
Training on augumented user 14965 11/50 current_auc = 0.6943985264251643
User 14965 AUC after training: 0.6939026118169367
User 14965 does not improve AUC. Reverting changes.
Training on augumented user 86794 12/50 current_auc = 0.6943985264251643
User 86794 AUC after training: 0.6939577134400731
User 86794 does not improve AUC. Reverting changes.
Training on augumented user 18207 13/50 current_auc = 0.6943985264251643
User 18207 AUC after training: 0.6940679166863458
User 18207 does not improve AUC. Reverting changes.
Training on augumented user 93346 14/50 current_auc = 0.6943985264251643
User 93346 AUC after training: 0.6941781199326186
User 93346 does not improve AUC. Reverting changes.
Training on augumented user 24699 15/50 current_auc = 0.6943985264251643
User 24699 AUC after training: 0.6941938632535148
User 24699 does not improve AUC. Reverting changes.
Training on augumented user 105345 16/50 current_auc = 0.6943985264251643
User 105345 AUC after training: 0.6946346762386059
User 105345 improves AUC. Keeping the model.
Training on augumented user 88958 17/50 current_auc = 0.6946346762386059
User 88958 AUC after training: 0.6945874462759175
User 88958 does not improve AUC. Reverting changes.
Training on augumented user 23349 18/50 current_auc = 0.6946346762386059
User 23349 AUC after training: 0.6943198098206835
User 23349 does not improve AUC. Reverting changes.
Training on augumented user 77005 19/50 current_auc = 0.6946346762386059
User 77005 AUC after training: 0.6941623766117224
User 77005 does not improve AUC. Reverting changes.
Training on augumented user 6053 20/50 current_auc = 0.6946346762386059
User 6053 AUC after training: 0.6944221414065084
User 6053 does not improve AUC. Reverting changes.
Training on augumented user 43371 21/50 current_auc = 0.6946346762386059
User 43371 AUC after training: 0.6943827831042679
User 43371 does not improve AUC. Reverting changes.
Training on augumented user 126931 22/50 current_auc = 0.6946346762386059
User 126931 AUC after training: 0.6945559596341253
User 126931 does not improve AUC. Reverting changes.
Training on augumented user 126734 23/50 current_auc = 0.6946346762386059
User 126734 AUC after training: 0.6946031895968136
User 126734 does not improve AUC. Reverting changes.
Training on augumented user 65935 24/50 current_auc = 0.6946346762386059
User 65935 AUC after training: 0.6942568365370991
User 65935 does not improve AUC. Reverting changes.
Training on augumented user 27327 25/50 current_auc = 0.6946346762386059
User 27327 AUC after training: 0.6945874462759175
User 27327 does not improve AUC. Reverting changes.
Training on augumented user 36462 26/50 current_auc = 0.6946346762386059
User 36462 AUC after training: 0.6943512964624756
User 36462 does not improve AUC. Reverting changes.
Training on augumented user 59394 27/50 current_auc = 0.6946346762386059
User 59394 AUC after training: 0.6944142697460602
User 59394 does not improve AUC. Reverting changes.
Training on augumented user 130603 28/50 current_auc = 0.6946346762386059
User 130603 AUC after training: 0.6947212645035346
User 130603 improves AUC. Keeping the model.
Training on augumented user 137704 29/50 current_auc = 0.6947212645035346
User 137704 AUC after training: 0.6949889009587682
User 137704 improves AUC. Keeping the model.
Training on augumented user 129986 30/50 current_auc = 0.6949889009587682
User 129986 AUC after training: 0.6949101843542876
User 129986 does not improve AUC. Reverting changes.
Training on augumented user 69779 31/50 current_auc = 0.6949889009587682
User 69779 AUC after training: 0.6949574143169761
User 69779 does not improve AUC. Reverting changes.
Training on augumented user 118000 32/50 current_auc = 0.6949889009587682
User 118000 AUC after training: 0.695240794093106
User 118000 improves AUC. Keeping the model.
Training on augumented user 127138 33/50 current_auc = 0.695240794093106
User 127138 AUC after training: 0.6956501204364048
User 127138 improves AUC. Keeping the model.
Training on augumented user 54857 34/50 current_auc = 0.6956501204364048
User 54857 AUC after training: 0.6955871471528204
User 54857 does not improve AUC. Reverting changes.
Training on augumented user 96700 35/50 current_auc = 0.6956501204364048
User 96700 AUC after training: 0.6953037673766904
User 96700 does not improve AUC. Reverting changes.
Training on augumented user 19741 36/50 current_auc = 0.6956501204364048
User 19741 AUC after training: 0.6953509973393788
User 19741 does not improve AUC. Reverting changes.
Training on augumented user 66315 37/50 current_auc = 0.6956501204364048
User 66315 AUC after training: 0.6955556605110282
User 66315 does not improve AUC. Reverting changes.
Training on augumented user 78525 38/50 current_auc = 0.6956501204364048
User 78525 AUC after training: 0.6955241738692359
User 78525 does not improve AUC. Reverting changes.
Training on augumented user 8862 39/50 current_auc = 0.6956501204364048
User 8862 AUC after training: 0.6953037673766904
User 8862 does not improve AUC. Reverting changes.
Training on augumented user 5941 40/50 current_auc = 0.6956501204364048
User 5941 AUC after training: 0.6955399171901322
User 5941 does not improve AUC. Reverting changes.
Training on augumented user 137549 41/50 current_auc = 0.6956501204364048
User 137549 AUC after training: 0.6956816070781972
User 137549 improves AUC. Keeping the model.
Training on augumented user 120765 42/50 current_auc = 0.6956816070781972
User 120765 AUC after training: 0.6950518742423526
User 120765 does not improve AUC. Reverting changes.
Training on augumented user 117922 43/50 current_auc = 0.6956816070781972
User 117922 AUC after training: 0.695665863757301
User 117922 does not improve AUC. Reverting changes.
Training on augumented user 106602 44/50 current_auc = 0.6956816070781972
User 106602 AUC after training: 0.6954926872274437
User 106602 does not improve AUC. Reverting changes.
Training on augumented user 30188 45/50 current_auc = 0.6956816070781972
User 30188 AUC after training: 0.695099104205041
User 30188 does not improve AUC. Reverting changes.
Training on augumented user 26335 46/50 current_auc = 0.6956816070781972
User 26335 AUC after training: 0.6946740345408461
User 26335 does not improve AUC. Reverting changes.
Training on augumented user 101634 47/50 current_auc = 0.6956816070781972
User 101634 AUC after training: 0.6955635321714763
User 101634 does not improve AUC. Reverting changes.
Training on augumented user 6722 48/50 current_auc = 0.6956816070781972
User 6722 AUC after training: 0.694532344652781
User 6722 does not improve AUC. Reverting changes.
Training on augumented user 86281 49/50 current_auc = 0.6956816070781972
User 86281 AUC after training: 0.6960594467797038
User 86281 improves AUC. Keeping the model.
[2024-12-02 19:38:31.606817] start test user 18765 222/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:32.177801] start test user 18765 222/568 recall augumented users by random, augumented_users = [128413, 25204, 20338, 67424, 88019, 93557, 13849, 65876, 47938, 8798, 6963, 28346, 46803, 101196, 21849, 51905, 123175, 128697, 19269, 23163, 59628, 37536, 105503, 9064, 112309, 104831, 105389, 122494, 74869, 120225, 78679, 53737, 87160, 41189, 50691, 40087, 97758, 120135, 68415, 124575, 119760, 11632, 114564, 27248, 123319, 39038, 119358, 16745, 54938, 113583]
[2024-12-02 19:38:32.207454] user = 18765 Cloud 222/568
[2024-12-02 19:38:32.218107] user = 18765 Local 222/568
[2024-12-02 19:38:32.369235] user = 18765 Local+ 222/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:35.026220] user = 18765 MPDA- 222/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6166666666666666
Training on augumented user 128413 0/50 current_auc = 0.6166666666666666
User 128413 AUC after training: 0.6166666666666666
User 128413 does not improve AUC. Reverting changes.
Training on augumented user 25204 1/50 current_auc = 0.6166666666666666
User 25204 AUC after training: 0.6166666666666666
User 25204 does not improve AUC. Reverting changes.
Training on augumented user 20338 2/50 current_auc = 0.6166666666666666
User 20338 AUC after training: 0.6166666666666666
User 20338 does not improve AUC. Reverting changes.
Training on augumented user 67424 3/50 current_auc = 0.6166666666666666
User 67424 AUC after training: 0.6166666666666666
User 67424 does not improve AUC. Reverting changes.
Training on augumented user 88019 4/50 current_auc = 0.6166666666666666
User 88019 AUC after training: 0.6166666666666666
User 88019 does not improve AUC. Reverting changes.
Training on augumented user 93557 5/50 current_auc = 0.6166666666666666
User 93557 AUC after training: 0.6166666666666666
User 93557 does not improve AUC. Reverting changes.
Training on augumented user 13849 6/50 current_auc = 0.6166666666666666
User 13849 AUC after training: 0.61875
User 13849 improves AUC. Keeping the model.
Training on augumented user 65876 7/50 current_auc = 0.61875
User 65876 AUC after training: 0.6177083333333333
User 65876 does not improve AUC. Reverting changes.
Training on augumented user 47938 8/50 current_auc = 0.61875
User 47938 AUC after training: 0.6229166666666667
User 47938 improves AUC. Keeping the model.
Training on augumented user 8798 9/50 current_auc = 0.6229166666666667
User 8798 AUC after training: 0.6208333333333333
User 8798 does not improve AUC. Reverting changes.
Training on augumented user 6963 10/50 current_auc = 0.6229166666666667
User 6963 AUC after training: 0.6177083333333333
User 6963 does not improve AUC. Reverting changes.
Training on augumented user 28346 11/50 current_auc = 0.6229166666666667
User 28346 AUC after training: 0.615625
User 28346 does not improve AUC. Reverting changes.
Training on augumented user 46803 12/50 current_auc = 0.6229166666666667
User 46803 AUC after training: 0.615625
User 46803 does not improve AUC. Reverting changes.
Training on augumented user 101196 13/50 current_auc = 0.6229166666666667
User 101196 AUC after training: 0.6208333333333333
User 101196 does not improve AUC. Reverting changes.
Training on augumented user 21849 14/50 current_auc = 0.6229166666666667
User 21849 AUC after training: 0.6229166666666667
User 21849 does not improve AUC. Reverting changes.
Training on augumented user 51905 15/50 current_auc = 0.6229166666666667
User 51905 AUC after training: 0.6197916666666666
User 51905 does not improve AUC. Reverting changes.
Training on augumented user 123175 16/50 current_auc = 0.6229166666666667
User 123175 AUC after training: 0.61875
User 123175 does not improve AUC. Reverting changes.
Training on augumented user 128697 17/50 current_auc = 0.6229166666666667
User 128697 AUC after training: 0.6229166666666667
User 128697 does not improve AUC. Reverting changes.
Training on augumented user 19269 18/50 current_auc = 0.6229166666666667
User 19269 AUC after training: 0.61875
User 19269 does not improve AUC. Reverting changes.
Training on augumented user 23163 19/50 current_auc = 0.6229166666666667
User 23163 AUC after training: 0.6177083333333333
User 23163 does not improve AUC. Reverting changes.
Training on augumented user 59628 20/50 current_auc = 0.6229166666666667
User 59628 AUC after training: 0.6229166666666667
User 59628 does not improve AUC. Reverting changes.
Training on augumented user 37536 21/50 current_auc = 0.6229166666666667
User 37536 AUC after training: 0.6197916666666666
User 37536 does not improve AUC. Reverting changes.
Training on augumented user 105503 22/50 current_auc = 0.6229166666666667
User 105503 AUC after training: 0.6177083333333333
User 105503 does not improve AUC. Reverting changes.
Training on augumented user 9064 23/50 current_auc = 0.6229166666666667
User 9064 AUC after training: 0.6177083333333333
User 9064 does not improve AUC. Reverting changes.
Training on augumented user 112309 24/50 current_auc = 0.6229166666666667
User 112309 AUC after training: 0.6166666666666666
User 112309 does not improve AUC. Reverting changes.
Training on augumented user 104831 25/50 current_auc = 0.6229166666666667
User 104831 AUC after training: 0.6208333333333333
User 104831 does not improve AUC. Reverting changes.
Training on augumented user 105389 26/50 current_auc = 0.6229166666666667
User 105389 AUC after training: 0.6229166666666667
User 105389 does not improve AUC. Reverting changes.
Training on augumented user 122494 27/50 current_auc = 0.6229166666666667
User 122494 AUC after training: 0.6177083333333333
User 122494 does not improve AUC. Reverting changes.
Training on augumented user 74869 28/50 current_auc = 0.6229166666666667
User 74869 AUC after training: 0.6229166666666667
User 74869 does not improve AUC. Reverting changes.
Training on augumented user 120225 29/50 current_auc = 0.6229166666666667
User 120225 AUC after training: 0.6208333333333333
User 120225 does not improve AUC. Reverting changes.
Training on augumented user 78679 30/50 current_auc = 0.6229166666666667
User 78679 AUC after training: 0.6208333333333333
User 78679 does not improve AUC. Reverting changes.
Training on augumented user 53737 31/50 current_auc = 0.6229166666666667
User 53737 AUC after training: 0.61875
User 53737 does not improve AUC. Reverting changes.
Training on augumented user 87160 32/50 current_auc = 0.6229166666666667
User 87160 AUC after training: 0.6208333333333333
User 87160 does not improve AUC. Reverting changes.
Training on augumented user 41189 33/50 current_auc = 0.6229166666666667
User 41189 AUC after training: 0.61875
User 41189 does not improve AUC. Reverting changes.
Training on augumented user 50691 34/50 current_auc = 0.6229166666666667
User 50691 AUC after training: 0.6208333333333333
User 50691 does not improve AUC. Reverting changes.
Training on augumented user 40087 35/50 current_auc = 0.6229166666666667
User 40087 AUC after training: 0.6208333333333333
User 40087 does not improve AUC. Reverting changes.
Training on augumented user 97758 36/50 current_auc = 0.6229166666666667
User 97758 AUC after training: 0.6197916666666666
User 97758 does not improve AUC. Reverting changes.
Training on augumented user 120135 37/50 current_auc = 0.6229166666666667
User 120135 AUC after training: 0.6208333333333333
User 120135 does not improve AUC. Reverting changes.
Training on augumented user 68415 38/50 current_auc = 0.6229166666666667
User 68415 AUC after training: 0.6208333333333333
User 68415 does not improve AUC. Reverting changes.
Training on augumented user 124575 39/50 current_auc = 0.6229166666666667
User 124575 AUC after training: 0.6208333333333333
User 124575 does not improve AUC. Reverting changes.
Training on augumented user 119760 40/50 current_auc = 0.6229166666666667
User 119760 AUC after training: 0.61875
User 119760 does not improve AUC. Reverting changes.
Training on augumented user 11632 41/50 current_auc = 0.6229166666666667
User 11632 AUC after training: 0.6229166666666667
User 11632 does not improve AUC. Reverting changes.
Training on augumented user 114564 42/50 current_auc = 0.6229166666666667
User 114564 AUC after training: 0.61875
User 114564 does not improve AUC. Reverting changes.
Training on augumented user 27248 43/50 current_auc = 0.6229166666666667
User 27248 AUC after training: 0.6197916666666666
User 27248 does not improve AUC. Reverting changes.
Training on augumented user 123319 44/50 current_auc = 0.6229166666666667
User 123319 AUC after training: 0.6229166666666667
User 123319 does not improve AUC. Reverting changes.
Training on augumented user 39038 45/50 current_auc = 0.6229166666666667
User 39038 AUC after training: 0.6208333333333333
User 39038 does not improve AUC. Reverting changes.
Training on augumented user 119358 46/50 current_auc = 0.6229166666666667
User 119358 AUC after training: 0.6229166666666667
User 119358 does not improve AUC. Reverting changes.
Training on augumented user 16745 47/50 current_auc = 0.6229166666666667
User 16745 AUC after training: 0.615625
User 16745 does not improve AUC. Reverting changes.
Training on augumented user 54938 48/50 current_auc = 0.6229166666666667
User 54938 AUC after training: 0.6229166666666667
User 54938 does not improve AUC. Reverting changes.
Training on augumented user 113583 49/50 current_auc = 0.6229166666666667
User 113583 AUC after training: 0.61875
User 113583 does not improve AUC. Reverting changes.
[2024-12-02 19:39:06.465449] start test user 18784 223/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:06.992021] start test user 18784 223/568 recall augumented users by random, augumented_users = [106777, 113014, 96608, 10923, 14811, 85847, 28317, 101611, 138383, 22905, 135558, 104255, 122815, 24563, 58951, 20907, 113113, 130141, 130390, 80545, 17005, 72430, 110912, 95474, 9770, 32091, 78796, 93190, 20998, 4079, 114028, 73292, 97671, 9175, 28078, 93388, 42818, 33055, 7344, 112501, 39911, 45008, 122840, 48, 50612, 47337, 57150, 55475, 94556, 58111]
[2024-12-02 19:39:07.008309] user = 18784 Cloud 223/568
[2024-12-02 19:39:07.029851] user = 18784 Local 223/568
[2024-12-02 19:39:07.057210] user = 18784 Local+ 223/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:10.161956] user = 18784 MPDA- 223/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5833333333333333
Training on augumented user 106777 0/50 current_auc = 0.5833333333333333
User 106777 AUC after training: 0.5833333333333333
User 106777 does not improve AUC. Reverting changes.
Training on augumented user 113014 1/50 current_auc = 0.5833333333333333
User 113014 AUC after training: 0.5694444444444444
User 113014 does not improve AUC. Reverting changes.
Training on augumented user 96608 2/50 current_auc = 0.5833333333333333
User 96608 AUC after training: 0.5833333333333334
User 96608 improves AUC. Keeping the model.
Training on augumented user 10923 3/50 current_auc = 0.5833333333333334
User 10923 AUC after training: 0.5833333333333334
User 10923 does not improve AUC. Reverting changes.
Training on augumented user 14811 4/50 current_auc = 0.5833333333333334
User 14811 AUC after training: 0.5833333333333334
User 14811 does not improve AUC. Reverting changes.
Training on augumented user 85847 5/50 current_auc = 0.5833333333333334
User 85847 AUC after training: 0.5833333333333334
User 85847 does not improve AUC. Reverting changes.
Training on augumented user 28317 6/50 current_auc = 0.5833333333333334
User 28317 AUC after training: 0.5833333333333334
User 28317 does not improve AUC. Reverting changes.
Training on augumented user 101611 7/50 current_auc = 0.5833333333333334
User 101611 AUC after training: 0.5833333333333334
User 101611 does not improve AUC. Reverting changes.
Training on augumented user 138383 8/50 current_auc = 0.5833333333333334
User 138383 AUC after training: 0.5833333333333334
User 138383 does not improve AUC. Reverting changes.
Training on augumented user 22905 9/50 current_auc = 0.5833333333333334
User 22905 AUC after training: 0.5833333333333334
User 22905 does not improve AUC. Reverting changes.
Training on augumented user 135558 10/50 current_auc = 0.5833333333333334
User 135558 AUC after training: 0.5833333333333334
User 135558 does not improve AUC. Reverting changes.
Training on augumented user 104255 11/50 current_auc = 0.5833333333333334
User 104255 AUC after training: 0.5833333333333334
User 104255 does not improve AUC. Reverting changes.
Training on augumented user 122815 12/50 current_auc = 0.5833333333333334
User 122815 AUC after training: 0.5833333333333334
User 122815 does not improve AUC. Reverting changes.
Training on augumented user 24563 13/50 current_auc = 0.5833333333333334
User 24563 AUC after training: 0.6111111111111112
User 24563 improves AUC. Keeping the model.
Training on augumented user 58951 14/50 current_auc = 0.6111111111111112
User 58951 AUC after training: 0.6111111111111112
User 58951 does not improve AUC. Reverting changes.
Training on augumented user 20907 15/50 current_auc = 0.6111111111111112
User 20907 AUC after training: 0.5972222222222223
User 20907 does not improve AUC. Reverting changes.
Training on augumented user 113113 16/50 current_auc = 0.6111111111111112
User 113113 AUC after training: 0.5972222222222223
User 113113 does not improve AUC. Reverting changes.
Training on augumented user 130141 17/50 current_auc = 0.6111111111111112
User 130141 AUC after training: 0.6111111111111112
User 130141 does not improve AUC. Reverting changes.
Training on augumented user 130390 18/50 current_auc = 0.6111111111111112
User 130390 AUC after training: 0.5972222222222223
User 130390 does not improve AUC. Reverting changes.
Training on augumented user 80545 19/50 current_auc = 0.6111111111111112
User 80545 AUC after training: 0.6111111111111112
User 80545 does not improve AUC. Reverting changes.
Training on augumented user 17005 20/50 current_auc = 0.6111111111111112
User 17005 AUC after training: 0.5972222222222223
User 17005 does not improve AUC. Reverting changes.
Training on augumented user 72430 21/50 current_auc = 0.6111111111111112
User 72430 AUC after training: 0.6111111111111112
User 72430 does not improve AUC. Reverting changes.
Training on augumented user 110912 22/50 current_auc = 0.6111111111111112
User 110912 AUC after training: 0.5972222222222223
User 110912 does not improve AUC. Reverting changes.
Training on augumented user 95474 23/50 current_auc = 0.6111111111111112
User 95474 AUC after training: 0.5972222222222223
User 95474 does not improve AUC. Reverting changes.
Training on augumented user 9770 24/50 current_auc = 0.6111111111111112
User 9770 AUC after training: 0.5833333333333334
User 9770 does not improve AUC. Reverting changes.
Training on augumented user 32091 25/50 current_auc = 0.6111111111111112
User 32091 AUC after training: 0.5833333333333334
User 32091 does not improve AUC. Reverting changes.
Training on augumented user 78796 26/50 current_auc = 0.6111111111111112
User 78796 AUC after training: 0.5972222222222223
User 78796 does not improve AUC. Reverting changes.
Training on augumented user 93190 27/50 current_auc = 0.6111111111111112
User 93190 AUC after training: 0.6111111111111112
User 93190 does not improve AUC. Reverting changes.
Training on augumented user 20998 28/50 current_auc = 0.6111111111111112
User 20998 AUC after training: 0.6111111111111112
User 20998 does not improve AUC. Reverting changes.
Training on augumented user 4079 29/50 current_auc = 0.6111111111111112
User 4079 AUC after training: 0.6111111111111112
User 4079 does not improve AUC. Reverting changes.
Training on augumented user 114028 30/50 current_auc = 0.6111111111111112
User 114028 AUC after training: 0.625
User 114028 improves AUC. Keeping the model.
Training on augumented user 73292 31/50 current_auc = 0.625
User 73292 AUC after training: 0.6111111111111112
User 73292 does not improve AUC. Reverting changes.
Training on augumented user 97671 32/50 current_auc = 0.625
User 97671 AUC after training: 0.5972222222222223
User 97671 does not improve AUC. Reverting changes.
Training on augumented user 9175 33/50 current_auc = 0.625
User 9175 AUC after training: 0.6111111111111112
User 9175 does not improve AUC. Reverting changes.
Training on augumented user 28078 34/50 current_auc = 0.625
User 28078 AUC after training: 0.6111111111111112
User 28078 does not improve AUC. Reverting changes.
Training on augumented user 93388 35/50 current_auc = 0.625
User 93388 AUC after training: 0.6111111111111112
User 93388 does not improve AUC. Reverting changes.
Training on augumented user 42818 36/50 current_auc = 0.625
User 42818 AUC after training: 0.6111111111111112
User 42818 does not improve AUC. Reverting changes.
Training on augumented user 33055 37/50 current_auc = 0.625
User 33055 AUC after training: 0.6111111111111112
User 33055 does not improve AUC. Reverting changes.
Training on augumented user 7344 38/50 current_auc = 0.625
User 7344 AUC after training: 0.6111111111111112
User 7344 does not improve AUC. Reverting changes.
Training on augumented user 112501 39/50 current_auc = 0.625
User 112501 AUC after training: 0.6111111111111112
User 112501 does not improve AUC. Reverting changes.
Training on augumented user 39911 40/50 current_auc = 0.625
User 39911 AUC after training: 0.5972222222222223
User 39911 does not improve AUC. Reverting changes.
Training on augumented user 45008 41/50 current_auc = 0.625
User 45008 AUC after training: 0.5972222222222223
User 45008 does not improve AUC. Reverting changes.
Training on augumented user 122840 42/50 current_auc = 0.625
User 122840 AUC after training: 0.6111111111111112
User 122840 does not improve AUC. Reverting changes.
Training on augumented user 48 43/50 current_auc = 0.625
User 48 AUC after training: 0.6111111111111112
User 48 does not improve AUC. Reverting changes.
Training on augumented user 50612 44/50 current_auc = 0.625
User 50612 AUC after training: 0.6111111111111112
User 50612 does not improve AUC. Reverting changes.
Training on augumented user 47337 45/50 current_auc = 0.625
User 47337 AUC after training: 0.6111111111111112
User 47337 does not improve AUC. Reverting changes.
Training on augumented user 57150 46/50 current_auc = 0.625
User 57150 AUC after training: 0.6111111111111112
User 57150 does not improve AUC. Reverting changes.
Training on augumented user 55475 47/50 current_auc = 0.625
User 55475 AUC after training: 0.625
User 55475 does not improve AUC. Reverting changes.
Training on augumented user 94556 48/50 current_auc = 0.625
User 94556 AUC after training: 0.6111111111111112
User 94556 does not improve AUC. Reverting changes.
Training on augumented user 58111 49/50 current_auc = 0.625
User 58111 AUC after training: 0.5972222222222223
User 58111 does not improve AUC. Reverting changes.
[2024-12-02 19:39:41.888349] start test user 18808 224/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:42.637118] start test user 18808 224/568 recall augumented users by random, augumented_users = [21815, 65768, 289, 5312, 23588, 34345, 33318, 19617, 36759, 98305, 128323, 48493, 22081, 73486, 55179, 87659, 5640, 134174, 23771, 62475, 3458, 105939, 96611, 60358, 75361, 67859, 106812, 71799, 79190, 4493, 75169, 114998, 79654, 87113, 134383, 84199, 132864, 74714, 28300, 52582, 9767, 121993, 88865, 43121, 12464, 70778, 8231, 54054, 113840, 102768]
[2024-12-02 19:39:42.652889] user = 18808 Cloud 224/568
[2024-12-02 19:39:42.663619] user = 18808 Local 224/568
[2024-12-02 19:39:42.737367] user = 18808 Local+ 224/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:45.479219] user = 18808 MPDA- 224/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9107142857142857
Training on augumented user 21815 0/50 current_auc = 0.9107142857142857
User 21815 AUC after training: 0.9107142857142857
User 21815 does not improve AUC. Reverting changes.
Training on augumented user 65768 1/50 current_auc = 0.9107142857142857
User 65768 AUC after training: 0.9107142857142857
User 65768 does not improve AUC. Reverting changes.
Training on augumented user 289 2/50 current_auc = 0.9107142857142857
User 289 AUC after training: 0.9107142857142857
User 289 does not improve AUC. Reverting changes.
Training on augumented user 5312 3/50 current_auc = 0.9107142857142857
User 5312 AUC after training: 0.9017857142857143
User 5312 does not improve AUC. Reverting changes.
Training on augumented user 23588 4/50 current_auc = 0.9107142857142857
User 23588 AUC after training: 0.9107142857142857
User 23588 does not improve AUC. Reverting changes.
Training on augumented user 34345 5/50 current_auc = 0.9107142857142857
User 34345 AUC after training: 0.9196428571428571
User 34345 improves AUC. Keeping the model.
Training on augumented user 33318 6/50 current_auc = 0.9196428571428571
User 33318 AUC after training: 0.9196428571428571
User 33318 does not improve AUC. Reverting changes.
Training on augumented user 19617 7/50 current_auc = 0.9196428571428571
User 19617 AUC after training: 0.9017857142857143
User 19617 does not improve AUC. Reverting changes.
Training on augumented user 36759 8/50 current_auc = 0.9196428571428571
User 36759 AUC after training: 0.9196428571428571
User 36759 does not improve AUC. Reverting changes.
Training on augumented user 98305 9/50 current_auc = 0.9196428571428571
User 98305 AUC after training: 0.9107142857142857
User 98305 does not improve AUC. Reverting changes.
Training on augumented user 128323 10/50 current_auc = 0.9196428571428571
User 128323 AUC after training: 0.9196428571428571
User 128323 does not improve AUC. Reverting changes.
Training on augumented user 48493 11/50 current_auc = 0.9196428571428571
User 48493 AUC after training: 0.9107142857142857
User 48493 does not improve AUC. Reverting changes.
Training on augumented user 22081 12/50 current_auc = 0.9196428571428571
User 22081 AUC after training: 0.9107142857142857
User 22081 does not improve AUC. Reverting changes.
Training on augumented user 73486 13/50 current_auc = 0.9196428571428571
User 73486 AUC after training: 0.9196428571428571
User 73486 does not improve AUC. Reverting changes.
Training on augumented user 55179 14/50 current_auc = 0.9196428571428571
User 55179 AUC after training: 0.9196428571428571
User 55179 does not improve AUC. Reverting changes.
Training on augumented user 87659 15/50 current_auc = 0.9196428571428571
User 87659 AUC after training: 0.9196428571428571
User 87659 does not improve AUC. Reverting changes.
Training on augumented user 5640 16/50 current_auc = 0.9196428571428571
User 5640 AUC after training: 0.9196428571428571
User 5640 does not improve AUC. Reverting changes.
Training on augumented user 134174 17/50 current_auc = 0.9196428571428571
User 134174 AUC after training: 0.9196428571428571
User 134174 does not improve AUC. Reverting changes.
Training on augumented user 23771 18/50 current_auc = 0.9196428571428571
User 23771 AUC after training: 0.9196428571428571
User 23771 does not improve AUC. Reverting changes.
Training on augumented user 62475 19/50 current_auc = 0.9196428571428571
User 62475 AUC after training: 0.9196428571428571
User 62475 does not improve AUC. Reverting changes.
Training on augumented user 3458 20/50 current_auc = 0.9196428571428571
User 3458 AUC after training: 0.9196428571428571
User 3458 does not improve AUC. Reverting changes.
Training on augumented user 105939 21/50 current_auc = 0.9196428571428571
User 105939 AUC after training: 0.9196428571428571
User 105939 does not improve AUC. Reverting changes.
Training on augumented user 96611 22/50 current_auc = 0.9196428571428571
User 96611 AUC after training: 0.9196428571428571
User 96611 does not improve AUC. Reverting changes.
Training on augumented user 60358 23/50 current_auc = 0.9196428571428571
User 60358 AUC after training: 0.9107142857142857
User 60358 does not improve AUC. Reverting changes.
Training on augumented user 75361 24/50 current_auc = 0.9196428571428571
User 75361 AUC after training: 0.9107142857142857
User 75361 does not improve AUC. Reverting changes.
Training on augumented user 67859 25/50 current_auc = 0.9196428571428571
User 67859 AUC after training: 0.9196428571428571
User 67859 does not improve AUC. Reverting changes.
Training on augumented user 106812 26/50 current_auc = 0.9196428571428571
User 106812 AUC after training: 0.9196428571428571
User 106812 does not improve AUC. Reverting changes.
Training on augumented user 71799 27/50 current_auc = 0.9196428571428571
User 71799 AUC after training: 0.9196428571428571
User 71799 does not improve AUC. Reverting changes.
Training on augumented user 79190 28/50 current_auc = 0.9196428571428571
User 79190 AUC after training: 0.9196428571428571
User 79190 does not improve AUC. Reverting changes.
Training on augumented user 4493 29/50 current_auc = 0.9196428571428571
User 4493 AUC after training: 0.9196428571428571
User 4493 does not improve AUC. Reverting changes.
Training on augumented user 75169 30/50 current_auc = 0.9196428571428571
User 75169 AUC after training: 0.9107142857142857
User 75169 does not improve AUC. Reverting changes.
Training on augumented user 114998 31/50 current_auc = 0.9196428571428571
User 114998 AUC after training: 0.9196428571428571
User 114998 does not improve AUC. Reverting changes.
Training on augumented user 79654 32/50 current_auc = 0.9196428571428571
User 79654 AUC after training: 0.9196428571428571
User 79654 does not improve AUC. Reverting changes.
Training on augumented user 87113 33/50 current_auc = 0.9196428571428571
User 87113 AUC after training: 0.9196428571428571
User 87113 does not improve AUC. Reverting changes.
Training on augumented user 134383 34/50 current_auc = 0.9196428571428571
User 134383 AUC after training: 0.9196428571428571
User 134383 does not improve AUC. Reverting changes.
Training on augumented user 84199 35/50 current_auc = 0.9196428571428571
User 84199 AUC after training: 0.9196428571428571
User 84199 does not improve AUC. Reverting changes.
Training on augumented user 132864 36/50 current_auc = 0.9196428571428571
User 132864 AUC after training: 0.9196428571428571
User 132864 does not improve AUC. Reverting changes.
Training on augumented user 74714 37/50 current_auc = 0.9196428571428571
User 74714 AUC after training: 0.9196428571428571
User 74714 does not improve AUC. Reverting changes.
Training on augumented user 28300 38/50 current_auc = 0.9196428571428571
User 28300 AUC after training: 0.9196428571428571
User 28300 does not improve AUC. Reverting changes.
Training on augumented user 52582 39/50 current_auc = 0.9196428571428571
User 52582 AUC after training: 0.9196428571428571
User 52582 does not improve AUC. Reverting changes.
Training on augumented user 9767 40/50 current_auc = 0.9196428571428571
User 9767 AUC after training: 0.9196428571428571
User 9767 does not improve AUC. Reverting changes.
Training on augumented user 121993 41/50 current_auc = 0.9196428571428571
User 121993 AUC after training: 0.9196428571428571
User 121993 does not improve AUC. Reverting changes.
Training on augumented user 88865 42/50 current_auc = 0.9196428571428571
User 88865 AUC after training: 0.9196428571428571
User 88865 does not improve AUC. Reverting changes.
Training on augumented user 43121 43/50 current_auc = 0.9196428571428571
User 43121 AUC after training: 0.9196428571428571
User 43121 does not improve AUC. Reverting changes.
Training on augumented user 12464 44/50 current_auc = 0.9196428571428571
User 12464 AUC after training: 0.9196428571428571
User 12464 does not improve AUC. Reverting changes.
Training on augumented user 70778 45/50 current_auc = 0.9196428571428571
User 70778 AUC after training: 0.9196428571428571
User 70778 does not improve AUC. Reverting changes.
Training on augumented user 8231 46/50 current_auc = 0.9196428571428571
User 8231 AUC after training: 0.9017857142857143
User 8231 does not improve AUC. Reverting changes.
Training on augumented user 54054 47/50 current_auc = 0.9196428571428571
User 54054 AUC after training: 0.9196428571428571
User 54054 does not improve AUC. Reverting changes.
Training on augumented user 113840 48/50 current_auc = 0.9196428571428571
User 113840 AUC after training: 0.9196428571428571
User 113840 does not improve AUC. Reverting changes.
Training on augumented user 102768 49/50 current_auc = 0.9196428571428571
User 102768 AUC after training: 0.9196428571428571
User 102768 does not improve AUC. Reverting changes.
[2024-12-02 19:40:12.701771] start test user 18907 225/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:13.465682] start test user 18907 225/568 recall augumented users by random, augumented_users = [129908, 44737, 116055, 97735, 70372, 55840, 115989, 103556, 23307, 2069, 99134, 65282, 56330, 129122, 16429, 73014, 74454, 103523, 68613, 40701, 37889, 33755, 99824, 14144, 76209, 66837, 75971, 105324, 16782, 17137, 42534, 137038, 107323, 118292, 68633, 96831, 33360, 6418, 96097, 61128, 108002, 68127, 71142, 31964, 65070, 108048, 50485, 84132, 33102, 29569]
[2024-12-02 19:40:13.503796] user = 18907 Cloud 225/568
[2024-12-02 19:40:13.643221] user = 18907 Local 225/568
[2024-12-02 19:40:13.903911] user = 18907 Local+ 225/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:15.976575] user = 18907 MPDA- 225/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6902010178117048
Training on augumented user 129908 0/50 current_auc = 0.6902010178117048
User 129908 AUC after training: 0.6902493638676844
User 129908 improves AUC. Keeping the model.
Training on augumented user 44737 1/50 current_auc = 0.6902493638676844
User 44737 AUC after training: 0.6899033078880408
User 44737 does not improve AUC. Reverting changes.
Training on augumented user 116055 2/50 current_auc = 0.6902493638676844
User 116055 AUC after training: 0.690351145038168
User 116055 improves AUC. Keeping the model.
Training on augumented user 97735 3/50 current_auc = 0.690351145038168
User 97735 AUC after training: 0.6896030534351145
User 97735 does not improve AUC. Reverting changes.
Training on augumented user 70372 4/50 current_auc = 0.690351145038168
User 70372 AUC after training: 0.6902137404580153
User 70372 does not improve AUC. Reverting changes.
Training on augumented user 55840 5/50 current_auc = 0.690351145038168
User 55840 AUC after training: 0.6904325699745546
User 55840 improves AUC. Keeping the model.
Training on augumented user 115989 6/50 current_auc = 0.6904325699745546
User 115989 AUC after training: 0.6902188295165395
User 115989 does not improve AUC. Reverting changes.
Training on augumented user 103556 7/50 current_auc = 0.6904325699745546
User 103556 AUC after training: 0.6903002544529262
User 103556 does not improve AUC. Reverting changes.
Training on augumented user 23307 8/50 current_auc = 0.6904325699745546
User 23307 AUC after training: 0.690791348600509
User 23307 improves AUC. Keeping the model.
Training on augumented user 2069 9/50 current_auc = 0.690791348600509
User 2069 AUC after training: 0.6907201017811705
User 2069 does not improve AUC. Reverting changes.
Training on augumented user 99134 10/50 current_auc = 0.690791348600509
User 99134 AUC after training: 0.6907099236641222
User 99134 does not improve AUC. Reverting changes.
Training on augumented user 65282 11/50 current_auc = 0.690791348600509
User 65282 AUC after training: 0.6908422391857506
User 65282 improves AUC. Keeping the model.
Training on augumented user 56330 12/50 current_auc = 0.6908422391857506
User 56330 AUC after training: 0.6908422391857506
User 56330 does not improve AUC. Reverting changes.
Training on augumented user 129122 13/50 current_auc = 0.6908422391857506
User 129122 AUC after training: 0.6909389312977099
User 129122 improves AUC. Keeping the model.
Training on augumented user 16429 14/50 current_auc = 0.6909389312977099
User 16429 AUC after training: 0.6909465648854961
User 16429 improves AUC. Keeping the model.
Training on augumented user 73014 15/50 current_auc = 0.6909465648854961
User 73014 AUC after training: 0.6911221374045802
User 73014 improves AUC. Keeping the model.
Training on augumented user 74454 16/50 current_auc = 0.6911221374045802
User 74454 AUC after training: 0.6911043256997456
User 74454 does not improve AUC. Reverting changes.
Training on augumented user 103523 17/50 current_auc = 0.6911221374045802
User 103523 AUC after training: 0.6911424936386767
User 103523 improves AUC. Keeping the model.
Training on augumented user 68613 18/50 current_auc = 0.6911424936386767
User 68613 AUC after training: 0.6909821882951653
User 68613 does not improve AUC. Reverting changes.
Training on augumented user 40701 19/50 current_auc = 0.6911424936386767
User 40701 AUC after training: 0.6911679389312977
User 40701 improves AUC. Keeping the model.
Training on augumented user 37889 20/50 current_auc = 0.6911679389312977
User 37889 AUC after training: 0.6912417302798982
User 37889 improves AUC. Keeping the model.
Training on augumented user 33755 21/50 current_auc = 0.6912417302798982
User 33755 AUC after training: 0.691089058524173
User 33755 does not improve AUC. Reverting changes.
Training on augumented user 99824 22/50 current_auc = 0.6912417302798982
User 99824 AUC after training: 0.6912315521628498
User 99824 does not improve AUC. Reverting changes.
Training on augumented user 14144 23/50 current_auc = 0.6912417302798982
User 14144 AUC after training: 0.6913129770992367
User 14144 improves AUC. Keeping the model.
Training on augumented user 76209 24/50 current_auc = 0.6913129770992367
User 76209 AUC after training: 0.6910432569974555
User 76209 does not improve AUC. Reverting changes.
Training on augumented user 66837 25/50 current_auc = 0.6913129770992367
User 66837 AUC after training: 0.6909338422391857
User 66837 does not improve AUC. Reverting changes.
Training on augumented user 75971 26/50 current_auc = 0.6913129770992367
User 75971 AUC after training: 0.6914656488549618
User 75971 improves AUC. Keeping the model.
Training on augumented user 105324 27/50 current_auc = 0.6914656488549618
User 105324 AUC after training: 0.6913765903307889
User 105324 does not improve AUC. Reverting changes.
Training on augumented user 16782 28/50 current_auc = 0.6914656488549618
User 16782 AUC after training: 0.6913078880407124
User 16782 does not improve AUC. Reverting changes.
Training on augumented user 17137 29/50 current_auc = 0.6914656488549618
User 17137 AUC after training: 0.6911145038167938
User 17137 does not improve AUC. Reverting changes.
Training on augumented user 42534 30/50 current_auc = 0.6914656488549618
User 42534 AUC after training: 0.6913486005089059
User 42534 does not improve AUC. Reverting changes.
Training on augumented user 137038 31/50 current_auc = 0.6914656488549618
User 137038 AUC after training: 0.6912468193384225
User 137038 does not improve AUC. Reverting changes.
Training on augumented user 107323 32/50 current_auc = 0.6914656488549618
User 107323 AUC after training: 0.6914554707379135
User 107323 does not improve AUC. Reverting changes.
Training on augumented user 118292 33/50 current_auc = 0.6914656488549618
User 118292 AUC after training: 0.691384223918575
User 118292 does not improve AUC. Reverting changes.
Training on augumented user 68633 34/50 current_auc = 0.6914656488549618
User 68633 AUC after training: 0.6913486005089058
User 68633 does not improve AUC. Reverting changes.
Training on augumented user 96831 35/50 current_auc = 0.6914656488549618
User 96831 AUC after training: 0.6914249363867684
User 96831 does not improve AUC. Reverting changes.
Training on augumented user 33360 36/50 current_auc = 0.6914656488549618
User 33360 AUC after training: 0.6914249363867684
User 33360 does not improve AUC. Reverting changes.
Training on augumented user 6418 37/50 current_auc = 0.6914656488549618
User 6418 AUC after training: 0.6915063613231553
User 6418 improves AUC. Keeping the model.
Training on augumented user 96097 38/50 current_auc = 0.6915063613231553
User 96097 AUC after training: 0.6909516539440204
User 96097 does not improve AUC. Reverting changes.
Training on augumented user 61128 39/50 current_auc = 0.6915063613231553
User 61128 AUC after training: 0.6917099236641222
User 61128 improves AUC. Keeping the model.
Training on augumented user 108002 40/50 current_auc = 0.6917099236641222
User 108002 AUC after training: 0.6917862595419847
User 108002 improves AUC. Keeping the model.
Training on augumented user 68127 41/50 current_auc = 0.6917862595419847
User 68127 AUC after training: 0.6918091603053435
User 68127 improves AUC. Keeping the model.
Training on augumented user 71142 42/50 current_auc = 0.6918091603053435
User 71142 AUC after training: 0.6918651399491094
User 71142 improves AUC. Keeping the model.
Training on augumented user 31964 43/50 current_auc = 0.6918651399491094
User 31964 AUC after training: 0.692055979643766
User 31964 improves AUC. Keeping the model.
Training on augumented user 65070 44/50 current_auc = 0.692055979643766
User 65070 AUC after training: 0.6920966921119595
User 65070 improves AUC. Keeping the model.
Training on augumented user 108048 45/50 current_auc = 0.6920966921119595
User 108048 AUC after training: 0.6920585241730278
User 108048 does not improve AUC. Reverting changes.
Training on augumented user 50485 46/50 current_auc = 0.6920966921119595
User 50485 AUC after training: 0.6920050890585243
User 50485 does not improve AUC. Reverting changes.
Training on augumented user 84132 47/50 current_auc = 0.6920966921119595
User 84132 AUC after training: 0.6921043256997456
User 84132 improves AUC. Keeping the model.
Training on augumented user 33102 48/50 current_auc = 0.6921043256997456
User 33102 AUC after training: 0.6918676844783715
User 33102 does not improve AUC. Reverting changes.
Training on augumented user 29569 49/50 current_auc = 0.6921043256997456
User 29569 AUC after training: 0.6919949109414758
User 29569 does not improve AUC. Reverting changes.
[2024-12-02 19:40:48.191233] start test user 18955 226/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:48.773664] start test user 18955 226/568 recall augumented users by random, augumented_users = [39097, 50167, 78286, 85980, 108634, 45222, 42366, 2172, 51504, 86191, 70955, 120475, 130901, 109000, 61342, 106678, 73131, 79044, 38590, 115637, 123857, 53819, 96440, 48433, 5943, 116655, 48313, 78653, 114611, 68540, 134071, 8284, 60927, 32203, 21198, 9502, 91523, 67735, 53204, 16222, 53020, 124674, 122033, 90046, 78628, 85818, 70405, 8297, 37059, 18694]
[2024-12-02 19:40:48.789280] user = 18955 Cloud 226/568
[2024-12-02 19:40:48.800012] user = 18955 Local 226/568
[2024-12-02 19:40:48.850200] user = 18955 Local+ 226/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:51.290072] user = 18955 MPDA- 226/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6212121212121212
Training on augumented user 39097 0/50 current_auc = 0.6212121212121212
User 39097 AUC after training: 0.6233766233766234
User 39097 improves AUC. Keeping the model.
Training on augumented user 50167 1/50 current_auc = 0.6233766233766234
User 50167 AUC after training: 0.6212121212121212
User 50167 does not improve AUC. Reverting changes.
Training on augumented user 78286 2/50 current_auc = 0.6233766233766234
User 78286 AUC after training: 0.6190476190476191
User 78286 does not improve AUC. Reverting changes.
Training on augumented user 85980 3/50 current_auc = 0.6233766233766234
User 85980 AUC after training: 0.6233766233766234
User 85980 does not improve AUC. Reverting changes.
Training on augumented user 108634 4/50 current_auc = 0.6233766233766234
User 108634 AUC after training: 0.6190476190476191
User 108634 does not improve AUC. Reverting changes.
Training on augumented user 45222 5/50 current_auc = 0.6233766233766234
User 45222 AUC after training: 0.6212121212121212
User 45222 does not improve AUC. Reverting changes.
Training on augumented user 42366 6/50 current_auc = 0.6233766233766234
User 42366 AUC after training: 0.6212121212121212
User 42366 does not improve AUC. Reverting changes.
Training on augumented user 2172 7/50 current_auc = 0.6233766233766234
User 2172 AUC after training: 0.6212121212121212
User 2172 does not improve AUC. Reverting changes.
Training on augumented user 51504 8/50 current_auc = 0.6233766233766234
User 51504 AUC after training: 0.6233766233766234
User 51504 does not improve AUC. Reverting changes.
Training on augumented user 86191 9/50 current_auc = 0.6233766233766234
User 86191 AUC after training: 0.6212121212121212
User 86191 does not improve AUC. Reverting changes.
Training on augumented user 70955 10/50 current_auc = 0.6233766233766234
User 70955 AUC after training: 0.6212121212121212
User 70955 does not improve AUC. Reverting changes.
Training on augumented user 120475 11/50 current_auc = 0.6233766233766234
User 120475 AUC after training: 0.6233766233766234
User 120475 does not improve AUC. Reverting changes.
Training on augumented user 130901 12/50 current_auc = 0.6233766233766234
User 130901 AUC after training: 0.6212121212121212
User 130901 does not improve AUC. Reverting changes.
Training on augumented user 109000 13/50 current_auc = 0.6233766233766234
User 109000 AUC after training: 0.6233766233766234
User 109000 does not improve AUC. Reverting changes.
Training on augumented user 61342 14/50 current_auc = 0.6233766233766234
User 61342 AUC after training: 0.6212121212121212
User 61342 does not improve AUC. Reverting changes.
Training on augumented user 106678 15/50 current_auc = 0.6233766233766234
User 106678 AUC after training: 0.6233766233766234
User 106678 does not improve AUC. Reverting changes.
Training on augumented user 73131 16/50 current_auc = 0.6233766233766234
User 73131 AUC after training: 0.6233766233766234
User 73131 does not improve AUC. Reverting changes.
Training on augumented user 79044 17/50 current_auc = 0.6233766233766234
User 79044 AUC after training: 0.6233766233766234
User 79044 does not improve AUC. Reverting changes.
Training on augumented user 38590 18/50 current_auc = 0.6233766233766234
User 38590 AUC after training: 0.6233766233766234
User 38590 does not improve AUC. Reverting changes.
Training on augumented user 115637 19/50 current_auc = 0.6233766233766234
User 115637 AUC after training: 0.6233766233766234
User 115637 does not improve AUC. Reverting changes.
Training on augumented user 123857 20/50 current_auc = 0.6233766233766234
User 123857 AUC after training: 0.6212121212121212
User 123857 does not improve AUC. Reverting changes.
Training on augumented user 53819 21/50 current_auc = 0.6233766233766234
User 53819 AUC after training: 0.6233766233766234
User 53819 does not improve AUC. Reverting changes.
Training on augumented user 96440 22/50 current_auc = 0.6233766233766234
User 96440 AUC after training: 0.6190476190476191
User 96440 does not improve AUC. Reverting changes.
Training on augumented user 48433 23/50 current_auc = 0.6233766233766234
User 48433 AUC after training: 0.6212121212121212
User 48433 does not improve AUC. Reverting changes.
Training on augumented user 5943 24/50 current_auc = 0.6233766233766234
User 5943 AUC after training: 0.6233766233766234
User 5943 does not improve AUC. Reverting changes.
Training on augumented user 116655 25/50 current_auc = 0.6233766233766234
User 116655 AUC after training: 0.6212121212121212
User 116655 does not improve AUC. Reverting changes.
Training on augumented user 48313 26/50 current_auc = 0.6233766233766234
User 48313 AUC after training: 0.6190476190476191
User 48313 does not improve AUC. Reverting changes.
Training on augumented user 78653 27/50 current_auc = 0.6233766233766234
User 78653 AUC after training: 0.6233766233766234
User 78653 does not improve AUC. Reverting changes.
Training on augumented user 114611 28/50 current_auc = 0.6233766233766234
User 114611 AUC after training: 0.6190476190476191
User 114611 does not improve AUC. Reverting changes.
Training on augumented user 68540 29/50 current_auc = 0.6233766233766234
User 68540 AUC after training: 0.6233766233766234
User 68540 does not improve AUC. Reverting changes.
Training on augumented user 134071 30/50 current_auc = 0.6233766233766234
User 134071 AUC after training: 0.6233766233766234
User 134071 does not improve AUC. Reverting changes.
Training on augumented user 8284 31/50 current_auc = 0.6233766233766234
User 8284 AUC after training: 0.6212121212121212
User 8284 does not improve AUC. Reverting changes.
Training on augumented user 60927 32/50 current_auc = 0.6233766233766234
User 60927 AUC after training: 0.6212121212121212
User 60927 does not improve AUC. Reverting changes.
Training on augumented user 32203 33/50 current_auc = 0.6233766233766234
User 32203 AUC after training: 0.6212121212121212
User 32203 does not improve AUC. Reverting changes.
Training on augumented user 21198 34/50 current_auc = 0.6233766233766234
User 21198 AUC after training: 0.6190476190476191
User 21198 does not improve AUC. Reverting changes.
Training on augumented user 9502 35/50 current_auc = 0.6233766233766234
User 9502 AUC after training: 0.6233766233766234
User 9502 does not improve AUC. Reverting changes.
Training on augumented user 91523 36/50 current_auc = 0.6233766233766234
User 91523 AUC after training: 0.6233766233766234
User 91523 does not improve AUC. Reverting changes.
Training on augumented user 67735 37/50 current_auc = 0.6233766233766234
User 67735 AUC after training: 0.6212121212121212
User 67735 does not improve AUC. Reverting changes.
Training on augumented user 53204 38/50 current_auc = 0.6233766233766234
User 53204 AUC after training: 0.6212121212121211
User 53204 does not improve AUC. Reverting changes.
Training on augumented user 16222 39/50 current_auc = 0.6233766233766234
User 16222 AUC after training: 0.6212121212121212
User 16222 does not improve AUC. Reverting changes.
Training on augumented user 53020 40/50 current_auc = 0.6233766233766234
User 53020 AUC after training: 0.6233766233766234
User 53020 does not improve AUC. Reverting changes.
Training on augumented user 124674 41/50 current_auc = 0.6233766233766234
User 124674 AUC after training: 0.6233766233766234
User 124674 does not improve AUC. Reverting changes.
Training on augumented user 122033 42/50 current_auc = 0.6233766233766234
User 122033 AUC after training: 0.6233766233766234
User 122033 does not improve AUC. Reverting changes.
Training on augumented user 90046 43/50 current_auc = 0.6233766233766234
User 90046 AUC after training: 0.6190476190476191
User 90046 does not improve AUC. Reverting changes.
Training on augumented user 78628 44/50 current_auc = 0.6233766233766234
User 78628 AUC after training: 0.6233766233766234
User 78628 does not improve AUC. Reverting changes.
Training on augumented user 85818 45/50 current_auc = 0.6233766233766234
User 85818 AUC after training: 0.6233766233766234
User 85818 does not improve AUC. Reverting changes.
Training on augumented user 70405 46/50 current_auc = 0.6233766233766234
User 70405 AUC after training: 0.6233766233766234
User 70405 does not improve AUC. Reverting changes.
Training on augumented user 8297 47/50 current_auc = 0.6233766233766234
User 8297 AUC after training: 0.6212121212121212
User 8297 does not improve AUC. Reverting changes.
Training on augumented user 37059 48/50 current_auc = 0.6233766233766234
User 37059 AUC after training: 0.6233766233766234
User 37059 does not improve AUC. Reverting changes.
Training on augumented user 18694 49/50 current_auc = 0.6233766233766234
User 18694 AUC after training: 0.6212121212121212
User 18694 does not improve AUC. Reverting changes.
[2024-12-02 19:41:21.950260] start test user 18968 227/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:22.584619] start test user 18968 227/568 recall augumented users by random, augumented_users = [70820, 112268, 99106, 110752, 93305, 8448, 66108, 128658, 77406, 3804, 42940, 74049, 96458, 97745, 56251, 66286, 105923, 39071, 37460, 56894, 73638, 68392, 100779, 12254, 961, 135681, 73170, 71069, 135250, 74751, 38235, 55314, 75182, 1649, 49862, 136388, 110457, 15233, 132461, 82492, 72289, 131745, 25414, 1119, 127825, 81050, 131792, 77807, 130415, 65966]
[2024-12-02 19:41:22.600897] user = 18968 Cloud 227/568
[2024-12-02 19:41:22.622383] user = 18968 Local 227/568
[2024-12-02 19:41:22.769934] user = 18968 Local+ 227/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:25.308013] user = 18968 MPDA- 227/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4933333333333333
Training on augumented user 70820 0/50 current_auc = 0.4933333333333333
User 70820 AUC after training: 0.49
User 70820 does not improve AUC. Reverting changes.
Training on augumented user 112268 1/50 current_auc = 0.4933333333333333
User 112268 AUC after training: 0.4966666666666666
User 112268 improves AUC. Keeping the model.
Training on augumented user 99106 2/50 current_auc = 0.4966666666666666
User 99106 AUC after training: 0.4966666666666666
User 99106 does not improve AUC. Reverting changes.
Training on augumented user 110752 3/50 current_auc = 0.4966666666666666
User 110752 AUC after training: 0.4833333333333333
User 110752 does not improve AUC. Reverting changes.
Training on augumented user 93305 4/50 current_auc = 0.4966666666666666
User 93305 AUC after training: 0.5
User 93305 improves AUC. Keeping the model.
Training on augumented user 8448 5/50 current_auc = 0.5
User 8448 AUC after training: 0.5033333333333333
User 8448 improves AUC. Keeping the model.
Training on augumented user 66108 6/50 current_auc = 0.5033333333333333
User 66108 AUC after training: 0.5
User 66108 does not improve AUC. Reverting changes.
Training on augumented user 128658 7/50 current_auc = 0.5033333333333333
User 128658 AUC after training: 0.5033333333333333
User 128658 does not improve AUC. Reverting changes.
Training on augumented user 77406 8/50 current_auc = 0.5033333333333333
User 77406 AUC after training: 0.5
User 77406 does not improve AUC. Reverting changes.
Training on augumented user 3804 9/50 current_auc = 0.5033333333333333
User 3804 AUC after training: 0.4966666666666666
User 3804 does not improve AUC. Reverting changes.
Training on augumented user 42940 10/50 current_auc = 0.5033333333333333
User 42940 AUC after training: 0.5
User 42940 does not improve AUC. Reverting changes.
Training on augumented user 74049 11/50 current_auc = 0.5033333333333333
User 74049 AUC after training: 0.5033333333333333
User 74049 does not improve AUC. Reverting changes.
Training on augumented user 96458 12/50 current_auc = 0.5033333333333333
User 96458 AUC after training: 0.4966666666666666
User 96458 does not improve AUC. Reverting changes.
Training on augumented user 97745 13/50 current_auc = 0.5033333333333333
User 97745 AUC after training: 0.5033333333333333
User 97745 does not improve AUC. Reverting changes.
Training on augumented user 56251 14/50 current_auc = 0.5033333333333333
User 56251 AUC after training: 0.5033333333333333
User 56251 does not improve AUC. Reverting changes.
Training on augumented user 66286 15/50 current_auc = 0.5033333333333333
User 66286 AUC after training: 0.5033333333333333
User 66286 does not improve AUC. Reverting changes.
Training on augumented user 105923 16/50 current_auc = 0.5033333333333333
User 105923 AUC after training: 0.5
User 105923 does not improve AUC. Reverting changes.
Training on augumented user 39071 17/50 current_auc = 0.5033333333333333
User 39071 AUC after training: 0.5
User 39071 does not improve AUC. Reverting changes.
Training on augumented user 37460 18/50 current_auc = 0.5033333333333333
User 37460 AUC after training: 0.49
User 37460 does not improve AUC. Reverting changes.
Training on augumented user 56894 19/50 current_auc = 0.5033333333333333
User 56894 AUC after training: 0.5
User 56894 does not improve AUC. Reverting changes.
Training on augumented user 73638 20/50 current_auc = 0.5033333333333333
User 73638 AUC after training: 0.5033333333333333
User 73638 does not improve AUC. Reverting changes.
Training on augumented user 68392 21/50 current_auc = 0.5033333333333333
User 68392 AUC after training: 0.5033333333333333
User 68392 does not improve AUC. Reverting changes.
Training on augumented user 100779 22/50 current_auc = 0.5033333333333333
User 100779 AUC after training: 0.5033333333333333
User 100779 does not improve AUC. Reverting changes.
Training on augumented user 12254 23/50 current_auc = 0.5033333333333333
User 12254 AUC after training: 0.5033333333333333
User 12254 does not improve AUC. Reverting changes.
Training on augumented user 961 24/50 current_auc = 0.5033333333333333
User 961 AUC after training: 0.5033333333333333
User 961 does not improve AUC. Reverting changes.
Training on augumented user 135681 25/50 current_auc = 0.5033333333333333
User 135681 AUC after training: 0.5
User 135681 does not improve AUC. Reverting changes.
Training on augumented user 73170 26/50 current_auc = 0.5033333333333333
User 73170 AUC after training: 0.49999999999999994
User 73170 does not improve AUC. Reverting changes.
Training on augumented user 71069 27/50 current_auc = 0.5033333333333333
User 71069 AUC after training: 0.4966666666666666
User 71069 does not improve AUC. Reverting changes.
Training on augumented user 135250 28/50 current_auc = 0.5033333333333333
User 135250 AUC after training: 0.5033333333333333
User 135250 does not improve AUC. Reverting changes.
Training on augumented user 74751 29/50 current_auc = 0.5033333333333333
User 74751 AUC after training: 0.4966666666666666
User 74751 does not improve AUC. Reverting changes.
Training on augumented user 38235 30/50 current_auc = 0.5033333333333333
User 38235 AUC after training: 0.4966666666666666
User 38235 does not improve AUC. Reverting changes.
Training on augumented user 55314 31/50 current_auc = 0.5033333333333333
User 55314 AUC after training: 0.5033333333333333
User 55314 does not improve AUC. Reverting changes.
Training on augumented user 75182 32/50 current_auc = 0.5033333333333333
User 75182 AUC after training: 0.5
User 75182 does not improve AUC. Reverting changes.
Training on augumented user 1649 33/50 current_auc = 0.5033333333333333
User 1649 AUC after training: 0.49666666666666665
User 1649 does not improve AUC. Reverting changes.
Training on augumented user 49862 34/50 current_auc = 0.5033333333333333
User 49862 AUC after training: 0.5033333333333333
User 49862 does not improve AUC. Reverting changes.
Training on augumented user 136388 35/50 current_auc = 0.5033333333333333
User 136388 AUC after training: 0.5033333333333333
User 136388 does not improve AUC. Reverting changes.
Training on augumented user 110457 36/50 current_auc = 0.5033333333333333
User 110457 AUC after training: 0.5033333333333333
User 110457 does not improve AUC. Reverting changes.
Training on augumented user 15233 37/50 current_auc = 0.5033333333333333
User 15233 AUC after training: 0.5
User 15233 does not improve AUC. Reverting changes.
Training on augumented user 132461 38/50 current_auc = 0.5033333333333333
User 132461 AUC after training: 0.5033333333333333
User 132461 does not improve AUC. Reverting changes.
Training on augumented user 82492 39/50 current_auc = 0.5033333333333333
User 82492 AUC after training: 0.4966666666666666
User 82492 does not improve AUC. Reverting changes.
Training on augumented user 72289 40/50 current_auc = 0.5033333333333333
User 72289 AUC after training: 0.5
User 72289 does not improve AUC. Reverting changes.
Training on augumented user 131745 41/50 current_auc = 0.5033333333333333
User 131745 AUC after training: 0.5033333333333333
User 131745 does not improve AUC. Reverting changes.
Training on augumented user 25414 42/50 current_auc = 0.5033333333333333
User 25414 AUC after training: 0.49
User 25414 does not improve AUC. Reverting changes.
Training on augumented user 1119 43/50 current_auc = 0.5033333333333333
User 1119 AUC after training: 0.5066666666666666
User 1119 improves AUC. Keeping the model.
Training on augumented user 127825 44/50 current_auc = 0.5066666666666666
User 127825 AUC after training: 0.49
User 127825 does not improve AUC. Reverting changes.
Training on augumented user 81050 45/50 current_auc = 0.5066666666666666
User 81050 AUC after training: 0.5066666666666666
User 81050 does not improve AUC. Reverting changes.
Training on augumented user 131792 46/50 current_auc = 0.5066666666666666
User 131792 AUC after training: 0.5066666666666666
User 131792 does not improve AUC. Reverting changes.
Training on augumented user 77807 47/50 current_auc = 0.5066666666666666
User 77807 AUC after training: 0.5033333333333333
User 77807 does not improve AUC. Reverting changes.
Training on augumented user 130415 48/50 current_auc = 0.5066666666666666
User 130415 AUC after training: 0.5033333333333333
User 130415 does not improve AUC. Reverting changes.
Training on augumented user 65966 49/50 current_auc = 0.5066666666666666
User 65966 AUC after training: 0.5033333333333333
User 65966 does not improve AUC. Reverting changes.
[2024-12-02 19:41:58.225499] start test user 18977 228/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:58.978310] start test user 18977 228/568 recall augumented users by random, augumented_users = [96854, 60372, 103886, 63841, 121001, 45661, 37932, 41580, 58134, 82422, 131052, 103021, 22154, 121250, 87823, 967, 134667, 124696, 73593, 29204, 89811, 101470, 118802, 94753, 36360, 92668, 23807, 7713, 52355, 24142, 86963, 3153, 71451, 87255, 70475, 131538, 34082, 107093, 58326, 124299, 26608, 73249, 36118, 62738, 136457, 97313, 95671, 44700, 77695, 108053]
[2024-12-02 19:41:58.994397] user = 18977 Cloud 228/568
[2024-12-02 19:41:59.016328] user = 18977 Local 228/568
[2024-12-02 19:41:59.102546] user = 18977 Local+ 228/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:01.210293] user = 18977 MPDA- 228/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7783380018674135
Training on augumented user 96854 0/50 current_auc = 0.7783380018674135
User 96854 AUC after training: 0.7785247432306255
User 96854 improves AUC. Keeping the model.
Training on augumented user 60372 1/50 current_auc = 0.7785247432306255
User 60372 AUC after training: 0.7783380018674135
User 60372 does not improve AUC. Reverting changes.
Training on augumented user 103886 2/50 current_auc = 0.7785247432306255
User 103886 AUC after training: 0.7785247432306255
User 103886 does not improve AUC. Reverting changes.
Training on augumented user 63841 3/50 current_auc = 0.7785247432306255
User 63841 AUC after training: 0.7787114845938374
User 63841 improves AUC. Keeping the model.
Training on augumented user 121001 4/50 current_auc = 0.7787114845938374
User 121001 AUC after training: 0.7781512605042016
User 121001 does not improve AUC. Reverting changes.
Training on augumented user 45661 5/50 current_auc = 0.7787114845938374
User 45661 AUC after training: 0.7790849673202613
User 45661 improves AUC. Keeping the model.
Training on augumented user 37932 6/50 current_auc = 0.7790849673202613
User 37932 AUC after training: 0.7788982259570494
User 37932 does not improve AUC. Reverting changes.
Training on augumented user 41580 7/50 current_auc = 0.7790849673202613
User 41580 AUC after training: 0.7788982259570494
User 41580 does not improve AUC. Reverting changes.
Training on augumented user 58134 8/50 current_auc = 0.7790849673202613
User 58134 AUC after training: 0.7792717086834733
User 58134 improves AUC. Keeping the model.
Training on augumented user 82422 9/50 current_auc = 0.7792717086834733
User 82422 AUC after training: 0.7794584500466852
User 82422 improves AUC. Keeping the model.
Training on augumented user 131052 10/50 current_auc = 0.7794584500466852
User 131052 AUC after training: 0.7783380018674135
User 131052 does not improve AUC. Reverting changes.
Training on augumented user 103021 11/50 current_auc = 0.7794584500466852
User 103021 AUC after training: 0.7800186741363211
User 103021 improves AUC. Keeping the model.
Training on augumented user 22154 12/50 current_auc = 0.7800186741363211
User 22154 AUC after training: 0.7800186741363211
User 22154 does not improve AUC. Reverting changes.
Training on augumented user 121250 13/50 current_auc = 0.7800186741363211
User 121250 AUC after training: 0.7796451914098972
User 121250 does not improve AUC. Reverting changes.
Training on augumented user 87823 14/50 current_auc = 0.7800186741363211
User 87823 AUC after training: 0.780205415499533
User 87823 improves AUC. Keeping the model.
Training on augumented user 967 15/50 current_auc = 0.780205415499533
User 967 AUC after training: 0.7798319327731091
User 967 does not improve AUC. Reverting changes.
Training on augumented user 134667 16/50 current_auc = 0.780205415499533
User 134667 AUC after training: 0.7792717086834733
User 134667 does not improve AUC. Reverting changes.
Training on augumented user 124696 17/50 current_auc = 0.780205415499533
User 124696 AUC after training: 0.780392156862745
User 124696 improves AUC. Keeping the model.
Training on augumented user 73593 18/50 current_auc = 0.780392156862745
User 73593 AUC after training: 0.7798319327731091
User 73593 does not improve AUC. Reverting changes.
Training on augumented user 29204 19/50 current_auc = 0.780392156862745
User 29204 AUC after training: 0.7787114845938374
User 29204 does not improve AUC. Reverting changes.
Training on augumented user 89811 20/50 current_auc = 0.780392156862745
User 89811 AUC after training: 0.7792717086834733
User 89811 does not improve AUC. Reverting changes.
Training on augumented user 101470 21/50 current_auc = 0.780392156862745
User 101470 AUC after training: 0.780205415499533
User 101470 does not improve AUC. Reverting changes.
Training on augumented user 118802 22/50 current_auc = 0.780392156862745
User 118802 AUC after training: 0.7796451914098972
User 118802 does not improve AUC. Reverting changes.
Training on augumented user 94753 23/50 current_auc = 0.780392156862745
User 94753 AUC after training: 0.780205415499533
User 94753 does not improve AUC. Reverting changes.
Training on augumented user 36360 24/50 current_auc = 0.780392156862745
User 36360 AUC after training: 0.7796451914098972
User 36360 does not improve AUC. Reverting changes.
Training on augumented user 92668 25/50 current_auc = 0.780392156862745
User 92668 AUC after training: 0.7800186741363211
User 92668 does not improve AUC. Reverting changes.
Training on augumented user 23807 26/50 current_auc = 0.780392156862745
User 23807 AUC after training: 0.7796451914098972
User 23807 does not improve AUC. Reverting changes.
Training on augumented user 7713 27/50 current_auc = 0.780392156862745
User 7713 AUC after training: 0.7800186741363211
User 7713 does not improve AUC. Reverting changes.
Training on augumented user 52355 28/50 current_auc = 0.780392156862745
User 52355 AUC after training: 0.7796451914098972
User 52355 does not improve AUC. Reverting changes.
Training on augumented user 24142 29/50 current_auc = 0.780392156862745
User 24142 AUC after training: 0.7800186741363211
User 24142 does not improve AUC. Reverting changes.
Training on augumented user 86963 30/50 current_auc = 0.780392156862745
User 86963 AUC after training: 0.7796451914098972
User 86963 does not improve AUC. Reverting changes.
Training on augumented user 3153 31/50 current_auc = 0.780392156862745
User 3153 AUC after training: 0.7800186741363211
User 3153 does not improve AUC. Reverting changes.
Training on augumented user 71451 32/50 current_auc = 0.780392156862745
User 71451 AUC after training: 0.780392156862745
User 71451 does not improve AUC. Reverting changes.
Training on augumented user 87255 33/50 current_auc = 0.780392156862745
User 87255 AUC after training: 0.7800186741363211
User 87255 does not improve AUC. Reverting changes.
Training on augumented user 70475 34/50 current_auc = 0.780392156862745
User 70475 AUC after training: 0.780392156862745
User 70475 does not improve AUC. Reverting changes.
Training on augumented user 131538 35/50 current_auc = 0.780392156862745
User 131538 AUC after training: 0.7798319327731091
User 131538 does not improve AUC. Reverting changes.
Training on augumented user 34082 36/50 current_auc = 0.780392156862745
User 34082 AUC after training: 0.7800186741363211
User 34082 does not improve AUC. Reverting changes.
Training on augumented user 107093 37/50 current_auc = 0.780392156862745
User 107093 AUC after training: 0.7796451914098972
User 107093 does not improve AUC. Reverting changes.
Training on augumented user 58326 38/50 current_auc = 0.780392156862745
User 58326 AUC after training: 0.7792717086834734
User 58326 does not improve AUC. Reverting changes.
Training on augumented user 124299 39/50 current_auc = 0.780392156862745
User 124299 AUC after training: 0.780205415499533
User 124299 does not improve AUC. Reverting changes.
Training on augumented user 26608 40/50 current_auc = 0.780392156862745
User 26608 AUC after training: 0.7794584500466852
User 26608 does not improve AUC. Reverting changes.
Training on augumented user 73249 41/50 current_auc = 0.780392156862745
User 73249 AUC after training: 0.7800186741363211
User 73249 does not improve AUC. Reverting changes.
Training on augumented user 36118 42/50 current_auc = 0.780392156862745
User 36118 AUC after training: 0.780392156862745
User 36118 does not improve AUC. Reverting changes.
Training on augumented user 62738 43/50 current_auc = 0.780392156862745
User 62738 AUC after training: 0.7792717086834733
User 62738 does not improve AUC. Reverting changes.
Training on augumented user 136457 44/50 current_auc = 0.780392156862745
User 136457 AUC after training: 0.7794584500466852
User 136457 does not improve AUC. Reverting changes.
Training on augumented user 97313 45/50 current_auc = 0.780392156862745
User 97313 AUC after training: 0.7788982259570494
User 97313 does not improve AUC. Reverting changes.
Training on augumented user 95671 46/50 current_auc = 0.780392156862745
User 95671 AUC after training: 0.7785247432306255
User 95671 does not improve AUC. Reverting changes.
Training on augumented user 44700 47/50 current_auc = 0.780392156862745
User 44700 AUC after training: 0.7790849673202613
User 44700 does not improve AUC. Reverting changes.
Training on augumented user 77695 48/50 current_auc = 0.780392156862745
User 77695 AUC after training: 0.7774042950513538
User 77695 does not improve AUC. Reverting changes.
Training on augumented user 108053 49/50 current_auc = 0.780392156862745
User 108053 AUC after training: 0.780205415499533
User 108053 does not improve AUC. Reverting changes.
[2024-12-02 19:42:30.320335] start test user 18979 229/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:30.811463] start test user 18979 229/568 recall augumented users by random, augumented_users = [81853, 54150, 117276, 89616, 48506, 134787, 42455, 128147, 128419, 33736, 5172, 131157, 108604, 105625, 25248, 129910, 83099, 84558, 19963, 114476, 130038, 4641, 130711, 78644, 92351, 8738, 110075, 134375, 97404, 102498, 38142, 62223, 46046, 50651, 43598, 44583, 28703, 48056, 24653, 10016, 10883, 64036, 79443, 16520, 130821, 134258, 23091, 69464, 87386, 83463]
[2024-12-02 19:42:30.826864] user = 18979 Cloud 229/568
[2024-12-02 19:42:30.836629] user = 18979 Local 229/568
[2024-12-02 19:42:30.891788] user = 18979 Local+ 229/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:34.050944] user = 18979 MPDA- 229/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 81853 0/50 current_auc = 1.0
User 81853 AUC after training: 1.0
User 81853 does not improve AUC. Reverting changes.
Training on augumented user 54150 1/50 current_auc = 1.0
User 54150 AUC after training: 1.0
User 54150 does not improve AUC. Reverting changes.
Training on augumented user 117276 2/50 current_auc = 1.0
User 117276 AUC after training: 1.0
User 117276 does not improve AUC. Reverting changes.
Training on augumented user 89616 3/50 current_auc = 1.0
User 89616 AUC after training: 1.0
User 89616 does not improve AUC. Reverting changes.
Training on augumented user 48506 4/50 current_auc = 1.0
User 48506 AUC after training: 1.0
User 48506 does not improve AUC. Reverting changes.
Training on augumented user 134787 5/50 current_auc = 1.0
User 134787 AUC after training: 1.0
User 134787 does not improve AUC. Reverting changes.
Training on augumented user 42455 6/50 current_auc = 1.0
User 42455 AUC after training: 1.0
User 42455 does not improve AUC. Reverting changes.
Training on augumented user 128147 7/50 current_auc = 1.0
User 128147 AUC after training: 1.0
User 128147 does not improve AUC. Reverting changes.
Training on augumented user 128419 8/50 current_auc = 1.0
User 128419 AUC after training: 1.0
User 128419 does not improve AUC. Reverting changes.
Training on augumented user 33736 9/50 current_auc = 1.0
User 33736 AUC after training: 1.0
User 33736 does not improve AUC. Reverting changes.
Training on augumented user 5172 10/50 current_auc = 1.0
User 5172 AUC after training: 1.0
User 5172 does not improve AUC. Reverting changes.
Training on augumented user 131157 11/50 current_auc = 1.0
User 131157 AUC after training: 1.0
User 131157 does not improve AUC. Reverting changes.
Training on augumented user 108604 12/50 current_auc = 1.0
User 108604 AUC after training: 1.0
User 108604 does not improve AUC. Reverting changes.
Training on augumented user 105625 13/50 current_auc = 1.0
User 105625 AUC after training: 1.0
User 105625 does not improve AUC. Reverting changes.
Training on augumented user 25248 14/50 current_auc = 1.0
User 25248 AUC after training: 1.0
User 25248 does not improve AUC. Reverting changes.
Training on augumented user 129910 15/50 current_auc = 1.0
User 129910 AUC after training: 1.0
User 129910 does not improve AUC. Reverting changes.
Training on augumented user 83099 16/50 current_auc = 1.0
User 83099 AUC after training: 1.0
User 83099 does not improve AUC. Reverting changes.
Training on augumented user 84558 17/50 current_auc = 1.0
User 84558 AUC after training: 1.0
User 84558 does not improve AUC. Reverting changes.
Training on augumented user 19963 18/50 current_auc = 1.0
User 19963 AUC after training: 1.0
User 19963 does not improve AUC. Reverting changes.
Training on augumented user 114476 19/50 current_auc = 1.0
User 114476 AUC after training: 1.0
User 114476 does not improve AUC. Reverting changes.
Training on augumented user 130038 20/50 current_auc = 1.0
User 130038 AUC after training: 1.0
User 130038 does not improve AUC. Reverting changes.
Training on augumented user 4641 21/50 current_auc = 1.0
User 4641 AUC after training: 1.0
User 4641 does not improve AUC. Reverting changes.
Training on augumented user 130711 22/50 current_auc = 1.0
User 130711 AUC after training: 1.0
User 130711 does not improve AUC. Reverting changes.
Training on augumented user 78644 23/50 current_auc = 1.0
User 78644 AUC after training: 1.0
User 78644 does not improve AUC. Reverting changes.
Training on augumented user 92351 24/50 current_auc = 1.0
User 92351 AUC after training: 1.0
User 92351 does not improve AUC. Reverting changes.
Training on augumented user 8738 25/50 current_auc = 1.0
User 8738 AUC after training: 1.0
User 8738 does not improve AUC. Reverting changes.
Training on augumented user 110075 26/50 current_auc = 1.0
User 110075 AUC after training: 1.0
User 110075 does not improve AUC. Reverting changes.
Training on augumented user 134375 27/50 current_auc = 1.0
User 134375 AUC after training: 1.0
User 134375 does not improve AUC. Reverting changes.
Training on augumented user 97404 28/50 current_auc = 1.0
User 97404 AUC after training: 1.0
User 97404 does not improve AUC. Reverting changes.
Training on augumented user 102498 29/50 current_auc = 1.0
User 102498 AUC after training: 1.0
User 102498 does not improve AUC. Reverting changes.
Training on augumented user 38142 30/50 current_auc = 1.0
User 38142 AUC after training: 1.0
User 38142 does not improve AUC. Reverting changes.
Training on augumented user 62223 31/50 current_auc = 1.0
User 62223 AUC after training: 1.0
User 62223 does not improve AUC. Reverting changes.
Training on augumented user 46046 32/50 current_auc = 1.0
User 46046 AUC after training: 1.0
User 46046 does not improve AUC. Reverting changes.
Training on augumented user 50651 33/50 current_auc = 1.0
User 50651 AUC after training: 1.0
User 50651 does not improve AUC. Reverting changes.
Training on augumented user 43598 34/50 current_auc = 1.0
User 43598 AUC after training: 1.0
User 43598 does not improve AUC. Reverting changes.
Training on augumented user 44583 35/50 current_auc = 1.0
User 44583 AUC after training: 1.0
User 44583 does not improve AUC. Reverting changes.
Training on augumented user 28703 36/50 current_auc = 1.0
User 28703 AUC after training: 1.0
User 28703 does not improve AUC. Reverting changes.
Training on augumented user 48056 37/50 current_auc = 1.0
User 48056 AUC after training: 1.0
User 48056 does not improve AUC. Reverting changes.
Training on augumented user 24653 38/50 current_auc = 1.0
User 24653 AUC after training: 1.0
User 24653 does not improve AUC. Reverting changes.
Training on augumented user 10016 39/50 current_auc = 1.0
User 10016 AUC after training: 1.0
User 10016 does not improve AUC. Reverting changes.
Training on augumented user 10883 40/50 current_auc = 1.0
User 10883 AUC after training: 1.0
User 10883 does not improve AUC. Reverting changes.
Training on augumented user 64036 41/50 current_auc = 1.0
User 64036 AUC after training: 1.0
User 64036 does not improve AUC. Reverting changes.
Training on augumented user 79443 42/50 current_auc = 1.0
User 79443 AUC after training: 1.0
User 79443 does not improve AUC. Reverting changes.
Training on augumented user 16520 43/50 current_auc = 1.0
User 16520 AUC after training: 1.0
User 16520 does not improve AUC. Reverting changes.
Training on augumented user 130821 44/50 current_auc = 1.0
User 130821 AUC after training: 1.0
User 130821 does not improve AUC. Reverting changes.
Training on augumented user 134258 45/50 current_auc = 1.0
User 134258 AUC after training: 1.0
User 134258 does not improve AUC. Reverting changes.
Training on augumented user 23091 46/50 current_auc = 1.0
User 23091 AUC after training: 1.0
User 23091 does not improve AUC. Reverting changes.
Training on augumented user 69464 47/50 current_auc = 1.0
User 69464 AUC after training: 1.0
User 69464 does not improve AUC. Reverting changes.
Training on augumented user 87386 48/50 current_auc = 1.0
User 87386 AUC after training: 1.0
User 87386 does not improve AUC. Reverting changes.
Training on augumented user 83463 49/50 current_auc = 1.0
User 83463 AUC after training: 1.0
User 83463 does not improve AUC. Reverting changes.
[2024-12-02 19:43:01.612159] start test user 19104 230/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:02.013896] start test user 19104 230/568 recall augumented users by random, augumented_users = [120393, 97939, 6519, 22336, 21609, 2100, 2652, 88235, 130066, 93916, 66240, 125353, 110126, 61995, 29546, 13943, 108654, 49751, 82354, 31521, 94505, 5449, 72032, 9318, 135204, 108003, 127031, 37864, 99222, 35005, 51576, 130979, 1077, 95928, 35514, 40942, 117826, 135355, 65290, 101987, 75468, 11654, 123028, 27862, 83802, 60684, 69781, 45550, 32468, 110510]
[2024-12-02 19:43:02.029030] user = 19104 Cloud 230/568
[2024-12-02 19:43:02.046840] user = 19104 Local 230/568
[2024-12-02 19:43:02.095052] user = 19104 Local+ 230/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:04.367065] user = 19104 MPDA- 230/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6536042573778422
Training on augumented user 120393 0/50 current_auc = 0.6536042573778422
User 120393 AUC after training: 0.6546927914852443
User 120393 improves AUC. Keeping the model.
Training on augumented user 97939 1/50 current_auc = 0.6546927914852443
User 97939 AUC after training: 0.6550556361877117
User 97939 improves AUC. Keeping the model.
Training on augumented user 6519 2/50 current_auc = 0.6550556361877117
User 6519 AUC after training: 0.6557813255926463
User 6519 improves AUC. Keeping the model.
Training on augumented user 22336 3/50 current_auc = 0.6557813255926463
User 22336 AUC after training: 0.6555394291243347
User 22336 does not improve AUC. Reverting changes.
Training on augumented user 21609 4/50 current_auc = 0.6557813255926463
User 21609 AUC after training: 0.6548137397194
User 21609 does not improve AUC. Reverting changes.
Training on augumented user 2100 5/50 current_auc = 0.6557813255926463
User 2100 AUC after training: 0.6552975326560232
User 2100 does not improve AUC. Reverting changes.
Training on augumented user 2652 6/50 current_auc = 0.6557813255926463
User 2652 AUC after training: 0.6550556361877117
User 2652 does not improve AUC. Reverting changes.
Training on augumented user 88235 7/50 current_auc = 0.6557813255926463
User 88235 AUC after training: 0.6537252056119981
User 88235 does not improve AUC. Reverting changes.
Training on augumented user 130066 8/50 current_auc = 0.6557813255926463
User 130066 AUC after training: 0.6555394291243348
User 130066 does not improve AUC. Reverting changes.
Training on augumented user 93916 9/50 current_auc = 0.6557813255926463
User 93916 AUC after training: 0.6557813255926463
User 93916 does not improve AUC. Reverting changes.
Training on augumented user 66240 10/50 current_auc = 0.6557813255926463
User 66240 AUC after training: 0.6555394291243348
User 66240 does not improve AUC. Reverting changes.
Training on augumented user 125353 11/50 current_auc = 0.6557813255926463
User 125353 AUC after training: 0.6544508950169328
User 125353 does not improve AUC. Reverting changes.
Training on augumented user 110126 12/50 current_auc = 0.6557813255926463
User 110126 AUC after training: 0.6550556361877117
User 110126 does not improve AUC. Reverting changes.
Training on augumented user 61995 13/50 current_auc = 0.6557813255926463
User 61995 AUC after training: 0.6555394291243348
User 61995 does not improve AUC. Reverting changes.
Training on augumented user 29546 14/50 current_auc = 0.6557813255926463
User 29546 AUC after training: 0.6557813255926463
User 29546 does not improve AUC. Reverting changes.
Training on augumented user 13943 15/50 current_auc = 0.6557813255926463
User 13943 AUC after training: 0.656023222060958
User 13943 improves AUC. Keeping the model.
Training on augumented user 108654 16/50 current_auc = 0.656023222060958
User 108654 AUC after training: 0.6544508950169328
User 108654 does not improve AUC. Reverting changes.
Training on augumented user 49751 17/50 current_auc = 0.656023222060958
User 49751 AUC after training: 0.6546927914852443
User 49751 does not improve AUC. Reverting changes.
Training on augumented user 82354 18/50 current_auc = 0.656023222060958
User 82354 AUC after training: 0.656023222060958
User 82354 does not improve AUC. Reverting changes.
Training on augumented user 31521 19/50 current_auc = 0.656023222060958
User 31521 AUC after training: 0.6573536526366714
User 31521 improves AUC. Keeping the model.
Training on augumented user 94505 20/50 current_auc = 0.6573536526366714
User 94505 AUC after training: 0.6548137397194002
User 94505 does not improve AUC. Reverting changes.
Training on augumented user 5449 21/50 current_auc = 0.6573536526366714
User 5449 AUC after training: 0.6557813255926463
User 5449 does not improve AUC. Reverting changes.
Training on augumented user 72032 22/50 current_auc = 0.6573536526366714
User 72032 AUC after training: 0.6562651185292694
User 72032 does not improve AUC. Reverting changes.
Training on augumented user 9318 23/50 current_auc = 0.6573536526366714
User 9318 AUC after training: 0.6555394291243348
User 9318 does not improve AUC. Reverting changes.
Training on augumented user 135204 24/50 current_auc = 0.6573536526366714
User 135204 AUC after training: 0.6571117561683599
User 135204 does not improve AUC. Reverting changes.
Training on augumented user 108003 25/50 current_auc = 0.6573536526366714
User 108003 AUC after training: 0.6539671020803097
User 108003 does not improve AUC. Reverting changes.
Training on augumented user 127031 26/50 current_auc = 0.6573536526366714
User 127031 AUC after training: 0.6560232220609579
User 127031 does not improve AUC. Reverting changes.
Training on augumented user 37864 27/50 current_auc = 0.6573536526366714
User 37864 AUC after training: 0.6552975326560232
User 37864 does not improve AUC. Reverting changes.
Training on augumented user 99222 28/50 current_auc = 0.6573536526366714
User 99222 AUC after training: 0.6557813255926463
User 99222 does not improve AUC. Reverting changes.
Training on augumented user 35005 29/50 current_auc = 0.6573536526366714
User 35005 AUC after training: 0.6568698597000484
User 35005 does not improve AUC. Reverting changes.
Training on augumented user 51576 30/50 current_auc = 0.6573536526366714
User 51576 AUC after training: 0.6557813255926463
User 51576 does not improve AUC. Reverting changes.
Training on augumented user 130979 31/50 current_auc = 0.6573536526366714
User 130979 AUC after training: 0.6560232220609579
User 130979 does not improve AUC. Reverting changes.
Training on augumented user 1077 32/50 current_auc = 0.6573536526366714
User 1077 AUC after training: 0.6571117561683599
User 1077 does not improve AUC. Reverting changes.
Training on augumented user 95928 33/50 current_auc = 0.6573536526366714
User 95928 AUC after training: 0.6565070149975811
User 95928 does not improve AUC. Reverting changes.
Training on augumented user 35514 34/50 current_auc = 0.6573536526366714
User 35514 AUC after training: 0.6588050314465409
User 35514 improves AUC. Keeping the model.
Training on augumented user 40942 35/50 current_auc = 0.6588050314465409
User 40942 AUC after training: 0.659288824383164
User 40942 improves AUC. Keeping the model.
Training on augumented user 117826 36/50 current_auc = 0.659288824383164
User 117826 AUC after training: 0.660377358490566
User 117826 improves AUC. Keeping the model.
Training on augumented user 135355 37/50 current_auc = 0.660377358490566
User 135355 AUC after training: 0.660377358490566
User 135355 does not improve AUC. Reverting changes.
Training on augumented user 65290 38/50 current_auc = 0.660377358490566
User 65290 AUC after training: 0.656507014997581
User 65290 does not improve AUC. Reverting changes.
Training on augumented user 101987 39/50 current_auc = 0.660377358490566
User 101987 AUC after training: 0.6586840832123851
User 101987 does not improve AUC. Reverting changes.
Training on augumented user 75468 40/50 current_auc = 0.660377358490566
User 75468 AUC after training: 0.6584421867440735
User 75468 does not improve AUC. Reverting changes.
Training on augumented user 11654 41/50 current_auc = 0.660377358490566
User 11654 AUC after training: 0.6608611514271892
User 11654 improves AUC. Keeping the model.
Training on augumented user 123028 42/50 current_auc = 0.6608611514271892
User 123028 AUC after training: 0.6591678761490082
User 123028 does not improve AUC. Reverting changes.
Training on augumented user 27862 43/50 current_auc = 0.6608611514271892
User 27862 AUC after training: 0.6611030478955007
User 27862 improves AUC. Keeping the model.
Training on augumented user 83802 44/50 current_auc = 0.6611030478955007
User 83802 AUC after training: 0.6569908079342042
User 83802 does not improve AUC. Reverting changes.
Training on augumented user 60684 45/50 current_auc = 0.6611030478955007
User 60684 AUC after training: 0.6615868408321238
User 60684 improves AUC. Keeping the model.
Training on augumented user 69781 46/50 current_auc = 0.6615868408321238
User 69781 AUC after training: 0.6619496855345912
User 69781 improves AUC. Keeping the model.
Training on augumented user 45550 47/50 current_auc = 0.6619496855345912
User 45550 AUC after training: 0.6609820996613449
User 45550 does not improve AUC. Reverting changes.
Training on augumented user 32468 48/50 current_auc = 0.6619496855345912
User 32468 AUC after training: 0.6617077890662797
User 32468 does not improve AUC. Reverting changes.
Training on augumented user 110510 49/50 current_auc = 0.6619496855345912
User 110510 AUC after training: 0.6608611514271892
User 110510 does not improve AUC. Reverting changes.
[2024-12-02 19:43:38.208606] start test user 19148 231/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:38.672679] start test user 19148 231/568 recall augumented users by random, augumented_users = [110046, 128997, 53682, 14284, 95333, 118975, 87847, 74733, 104565, 40520, 9645, 84868, 104706, 103228, 5422, 44801, 108473, 118146, 8302, 7544, 47508, 33433, 65390, 101852, 52535, 127708, 137132, 76869, 30201, 105533, 31014, 137664, 98031, 105639, 135563, 41887, 62047, 100120, 34814, 20285, 120771, 94073, 60631, 15155, 8912, 53427, 123307, 21568, 19545, 107107]
[2024-12-02 19:43:38.687884] user = 19148 Cloud 231/568
[2024-12-02 19:43:38.697099] user = 19148 Local 231/568
[2024-12-02 19:43:38.728963] user = 19148 Local+ 231/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:40.860736] user = 19148 MPDA- 231/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3736263736263737
Training on augumented user 110046 0/50 current_auc = 0.3736263736263737
User 110046 AUC after training: 0.3736263736263737
User 110046 does not improve AUC. Reverting changes.
Training on augumented user 128997 1/50 current_auc = 0.3736263736263737
User 128997 AUC after training: 0.3736263736263737
User 128997 does not improve AUC. Reverting changes.
Training on augumented user 53682 2/50 current_auc = 0.3736263736263737
User 53682 AUC after training: 0.3736263736263737
User 53682 does not improve AUC. Reverting changes.
Training on augumented user 14284 3/50 current_auc = 0.3736263736263737
User 14284 AUC after training: 0.3736263736263737
User 14284 does not improve AUC. Reverting changes.
Training on augumented user 95333 4/50 current_auc = 0.3736263736263737
User 95333 AUC after training: 0.3736263736263737
User 95333 does not improve AUC. Reverting changes.
Training on augumented user 118975 5/50 current_auc = 0.3736263736263737
User 118975 AUC after training: 0.3736263736263737
User 118975 does not improve AUC. Reverting changes.
Training on augumented user 87847 6/50 current_auc = 0.3736263736263737
User 87847 AUC after training: 0.3736263736263737
User 87847 does not improve AUC. Reverting changes.
Training on augumented user 74733 7/50 current_auc = 0.3736263736263737
User 74733 AUC after training: 0.3736263736263737
User 74733 does not improve AUC. Reverting changes.
Training on augumented user 104565 8/50 current_auc = 0.3736263736263737
User 104565 AUC after training: 0.3736263736263737
User 104565 does not improve AUC. Reverting changes.
Training on augumented user 40520 9/50 current_auc = 0.3736263736263737
User 40520 AUC after training: 0.3736263736263737
User 40520 does not improve AUC. Reverting changes.
Training on augumented user 9645 10/50 current_auc = 0.3736263736263737
User 9645 AUC after training: 0.3846153846153847
User 9645 improves AUC. Keeping the model.
Training on augumented user 84868 11/50 current_auc = 0.3846153846153847
User 84868 AUC after training: 0.3846153846153847
User 84868 does not improve AUC. Reverting changes.
Training on augumented user 104706 12/50 current_auc = 0.3846153846153847
User 104706 AUC after training: 0.3846153846153847
User 104706 does not improve AUC. Reverting changes.
Training on augumented user 103228 13/50 current_auc = 0.3846153846153847
User 103228 AUC after training: 0.3846153846153847
User 103228 does not improve AUC. Reverting changes.
Training on augumented user 5422 14/50 current_auc = 0.3846153846153847
User 5422 AUC after training: 0.3846153846153847
User 5422 does not improve AUC. Reverting changes.
Training on augumented user 44801 15/50 current_auc = 0.3846153846153847
User 44801 AUC after training: 0.3736263736263737
User 44801 does not improve AUC. Reverting changes.
Training on augumented user 108473 16/50 current_auc = 0.3846153846153847
User 108473 AUC after training: 0.3846153846153847
User 108473 does not improve AUC. Reverting changes.
Training on augumented user 118146 17/50 current_auc = 0.3846153846153847
User 118146 AUC after training: 0.3846153846153847
User 118146 does not improve AUC. Reverting changes.
Training on augumented user 8302 18/50 current_auc = 0.3846153846153847
User 8302 AUC after training: 0.3846153846153847
User 8302 does not improve AUC. Reverting changes.
Training on augumented user 7544 19/50 current_auc = 0.3846153846153847
User 7544 AUC after training: 0.3846153846153847
User 7544 does not improve AUC. Reverting changes.
Training on augumented user 47508 20/50 current_auc = 0.3846153846153847
User 47508 AUC after training: 0.3846153846153847
User 47508 does not improve AUC. Reverting changes.
Training on augumented user 33433 21/50 current_auc = 0.3846153846153847
User 33433 AUC after training: 0.3736263736263737
User 33433 does not improve AUC. Reverting changes.
Training on augumented user 65390 22/50 current_auc = 0.3846153846153847
User 65390 AUC after training: 0.3846153846153847
User 65390 does not improve AUC. Reverting changes.
Training on augumented user 101852 23/50 current_auc = 0.3846153846153847
User 101852 AUC after training: 0.3846153846153847
User 101852 does not improve AUC. Reverting changes.
Training on augumented user 52535 24/50 current_auc = 0.3846153846153847
User 52535 AUC after training: 0.3846153846153847
User 52535 does not improve AUC. Reverting changes.
Training on augumented user 127708 25/50 current_auc = 0.3846153846153847
User 127708 AUC after training: 0.3846153846153847
User 127708 does not improve AUC. Reverting changes.
Training on augumented user 137132 26/50 current_auc = 0.3846153846153847
User 137132 AUC after training: 0.3736263736263737
User 137132 does not improve AUC. Reverting changes.
Training on augumented user 76869 27/50 current_auc = 0.3846153846153847
User 76869 AUC after training: 0.3846153846153847
User 76869 does not improve AUC. Reverting changes.
Training on augumented user 30201 28/50 current_auc = 0.3846153846153847
User 30201 AUC after training: 0.3846153846153847
User 30201 does not improve AUC. Reverting changes.
Training on augumented user 105533 29/50 current_auc = 0.3846153846153847
User 105533 AUC after training: 0.3846153846153847
User 105533 does not improve AUC. Reverting changes.
Training on augumented user 31014 30/50 current_auc = 0.3846153846153847
User 31014 AUC after training: 0.3736263736263737
User 31014 does not improve AUC. Reverting changes.
Training on augumented user 137664 31/50 current_auc = 0.3846153846153847
User 137664 AUC after training: 0.3736263736263737
User 137664 does not improve AUC. Reverting changes.
Training on augumented user 98031 32/50 current_auc = 0.3846153846153847
User 98031 AUC after training: 0.3736263736263737
User 98031 does not improve AUC. Reverting changes.
Training on augumented user 105639 33/50 current_auc = 0.3846153846153847
User 105639 AUC after training: 0.3846153846153847
User 105639 does not improve AUC. Reverting changes.
Training on augumented user 135563 34/50 current_auc = 0.3846153846153847
User 135563 AUC after training: 0.3846153846153847
User 135563 does not improve AUC. Reverting changes.
Training on augumented user 41887 35/50 current_auc = 0.3846153846153847
User 41887 AUC after training: 0.3736263736263737
User 41887 does not improve AUC. Reverting changes.
Training on augumented user 62047 36/50 current_auc = 0.3846153846153847
User 62047 AUC after training: 0.3736263736263737
User 62047 does not improve AUC. Reverting changes.
Training on augumented user 100120 37/50 current_auc = 0.3846153846153847
User 100120 AUC after training: 0.3846153846153847
User 100120 does not improve AUC. Reverting changes.
Training on augumented user 34814 38/50 current_auc = 0.3846153846153847
User 34814 AUC after training: 0.3846153846153847
User 34814 does not improve AUC. Reverting changes.
Training on augumented user 20285 39/50 current_auc = 0.3846153846153847
User 20285 AUC after training: 0.3846153846153847
User 20285 does not improve AUC. Reverting changes.
Training on augumented user 120771 40/50 current_auc = 0.3846153846153847
User 120771 AUC after training: 0.3736263736263737
User 120771 does not improve AUC. Reverting changes.
Training on augumented user 94073 41/50 current_auc = 0.3846153846153847
User 94073 AUC after training: 0.3846153846153847
User 94073 does not improve AUC. Reverting changes.
Training on augumented user 60631 42/50 current_auc = 0.3846153846153847
User 60631 AUC after training: 0.3846153846153847
User 60631 does not improve AUC. Reverting changes.
Training on augumented user 15155 43/50 current_auc = 0.3846153846153847
User 15155 AUC after training: 0.3846153846153847
User 15155 does not improve AUC. Reverting changes.
Training on augumented user 8912 44/50 current_auc = 0.3846153846153847
User 8912 AUC after training: 0.3846153846153847
User 8912 does not improve AUC. Reverting changes.
Training on augumented user 53427 45/50 current_auc = 0.3846153846153847
User 53427 AUC after training: 0.3846153846153847
User 53427 does not improve AUC. Reverting changes.
Training on augumented user 123307 46/50 current_auc = 0.3846153846153847
User 123307 AUC after training: 0.3846153846153847
User 123307 does not improve AUC. Reverting changes.
Training on augumented user 21568 47/50 current_auc = 0.3846153846153847
User 21568 AUC after training: 0.3846153846153847
User 21568 does not improve AUC. Reverting changes.
Training on augumented user 19545 48/50 current_auc = 0.3846153846153847
User 19545 AUC after training: 0.3736263736263737
User 19545 does not improve AUC. Reverting changes.
Training on augumented user 107107 49/50 current_auc = 0.3846153846153847
User 107107 AUC after training: 0.3846153846153847
User 107107 does not improve AUC. Reverting changes.
[2024-12-02 19:44:11.481851] start test user 19305 232/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:11.898515] start test user 19305 232/568 recall augumented users by random, augumented_users = [120693, 3485, 9050, 100785, 7625, 38920, 104421, 134660, 119974, 89382, 87982, 35569, 13964, 23522, 26047, 65708, 66203, 105699, 92771, 127081, 98577, 47245, 27777, 102073, 130425, 4307, 129629, 100776, 50518, 57013, 38895, 64916, 99142, 105583, 66329, 33581, 128875, 137452, 105640, 118300, 46701, 29268, 4342, 40227, 118324, 75566, 96310, 50396, 83888, 28963]
[2024-12-02 19:44:11.915238] user = 19305 Cloud 232/568
[2024-12-02 19:44:11.957199] user = 19305 Local 232/568
[2024-12-02 19:44:12.080552] user = 19305 Local+ 232/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:14.642782] user = 19305 MPDA- 232/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6698412698412698
Training on augumented user 120693 0/50 current_auc = 0.6698412698412698
User 120693 AUC after training: 0.6696296296296296
User 120693 does not improve AUC. Reverting changes.
Training on augumented user 3485 1/50 current_auc = 0.6698412698412698
User 3485 AUC after training: 0.6700529100529101
User 3485 improves AUC. Keeping the model.
Training on augumented user 9050 2/50 current_auc = 0.6700529100529101
User 9050 AUC after training: 0.6706349206349206
User 9050 improves AUC. Keeping the model.
Training on augumented user 100785 3/50 current_auc = 0.6706349206349206
User 100785 AUC after training: 0.6704761904761904
User 100785 does not improve AUC. Reverting changes.
Training on augumented user 7625 4/50 current_auc = 0.6706349206349206
User 7625 AUC after training: 0.6697354497354497
User 7625 does not improve AUC. Reverting changes.
Training on augumented user 38920 5/50 current_auc = 0.6706349206349206
User 38920 AUC after training: 0.6711111111111111
User 38920 improves AUC. Keeping the model.
Training on augumented user 104421 6/50 current_auc = 0.6711111111111111
User 104421 AUC after training: 0.6708994708994709
User 104421 does not improve AUC. Reverting changes.
Training on augumented user 134660 7/50 current_auc = 0.6711111111111111
User 134660 AUC after training: 0.6705291005291005
User 134660 does not improve AUC. Reverting changes.
Training on augumented user 119974 8/50 current_auc = 0.6711111111111111
User 119974 AUC after training: 0.6698941798941799
User 119974 does not improve AUC. Reverting changes.
Training on augumented user 89382 9/50 current_auc = 0.6711111111111111
User 89382 AUC after training: 0.6711111111111111
User 89382 does not improve AUC. Reverting changes.
Training on augumented user 87982 10/50 current_auc = 0.6711111111111111
User 87982 AUC after training: 0.6713227513227513
User 87982 improves AUC. Keeping the model.
Training on augumented user 35569 11/50 current_auc = 0.6713227513227513
User 35569 AUC after training: 0.6707407407407407
User 35569 does not improve AUC. Reverting changes.
Training on augumented user 13964 12/50 current_auc = 0.6713227513227513
User 13964 AUC after training: 0.6693121693121693
User 13964 does not improve AUC. Reverting changes.
Training on augumented user 23522 13/50 current_auc = 0.6713227513227513
User 23522 AUC after training: 0.6712698412698412
User 23522 does not improve AUC. Reverting changes.
Training on augumented user 26047 14/50 current_auc = 0.6713227513227513
User 26047 AUC after training: 0.6725925925925926
User 26047 improves AUC. Keeping the model.
Training on augumented user 65708 15/50 current_auc = 0.6725925925925926
User 65708 AUC after training: 0.6726984126984128
User 65708 improves AUC. Keeping the model.
Training on augumented user 66203 16/50 current_auc = 0.6726984126984128
User 66203 AUC after training: 0.6726455026455027
User 66203 does not improve AUC. Reverting changes.
Training on augumented user 105699 17/50 current_auc = 0.6726984126984128
User 105699 AUC after training: 0.6726455026455027
User 105699 does not improve AUC. Reverting changes.
Training on augumented user 92771 18/50 current_auc = 0.6726984126984128
User 92771 AUC after training: 0.6724338624338625
User 92771 does not improve AUC. Reverting changes.
Training on augumented user 127081 19/50 current_auc = 0.6726984126984128
User 127081 AUC after training: 0.6732275132275132
User 127081 improves AUC. Keeping the model.
Training on augumented user 98577 20/50 current_auc = 0.6732275132275132
User 98577 AUC after training: 0.6733862433862433
User 98577 improves AUC. Keeping the model.
Training on augumented user 47245 21/50 current_auc = 0.6733862433862433
User 47245 AUC after training: 0.6733862433862434
User 47245 improves AUC. Keeping the model.
Training on augumented user 27777 22/50 current_auc = 0.6733862433862434
User 27777 AUC after training: 0.6731746031746032
User 27777 does not improve AUC. Reverting changes.
Training on augumented user 102073 23/50 current_auc = 0.6733862433862434
User 102073 AUC after training: 0.6730158730158731
User 102073 does not improve AUC. Reverting changes.
Training on augumented user 130425 24/50 current_auc = 0.6733862433862434
User 130425 AUC after training: 0.6736507936507936
User 130425 improves AUC. Keeping the model.
Training on augumented user 4307 25/50 current_auc = 0.6736507936507936
User 4307 AUC after training: 0.6734920634920636
User 4307 does not improve AUC. Reverting changes.
Training on augumented user 129629 26/50 current_auc = 0.6736507936507936
User 129629 AUC after training: 0.673068783068783
User 129629 does not improve AUC. Reverting changes.
Training on augumented user 100776 27/50 current_auc = 0.6736507936507936
User 100776 AUC after training: 0.6737566137566138
User 100776 improves AUC. Keeping the model.
Training on augumented user 50518 28/50 current_auc = 0.6737566137566138
User 50518 AUC after training: 0.672962962962963
User 50518 does not improve AUC. Reverting changes.
Training on augumented user 57013 29/50 current_auc = 0.6737566137566138
User 57013 AUC after training: 0.6725925925925926
User 57013 does not improve AUC. Reverting changes.
Training on augumented user 38895 30/50 current_auc = 0.6737566137566138
User 38895 AUC after training: 0.6738624338624339
User 38895 improves AUC. Keeping the model.
Training on augumented user 64916 31/50 current_auc = 0.6738624338624339
User 64916 AUC after training: 0.671957671957672
User 64916 does not improve AUC. Reverting changes.
Training on augumented user 99142 32/50 current_auc = 0.6738624338624339
User 99142 AUC after training: 0.6727513227513228
User 99142 does not improve AUC. Reverting changes.
Training on augumented user 105583 33/50 current_auc = 0.6738624338624339
User 105583 AUC after training: 0.6737037037037037
User 105583 does not improve AUC. Reverting changes.
Training on augumented user 66329 34/50 current_auc = 0.6738624338624339
User 66329 AUC after training: 0.6738624338624338
User 66329 does not improve AUC. Reverting changes.
Training on augumented user 33581 35/50 current_auc = 0.6738624338624339
User 33581 AUC after training: 0.6732275132275132
User 33581 does not improve AUC. Reverting changes.
Training on augumented user 128875 36/50 current_auc = 0.6738624338624339
User 128875 AUC after training: 0.6735449735449734
User 128875 does not improve AUC. Reverting changes.
Training on augumented user 137452 37/50 current_auc = 0.6738624338624339
User 137452 AUC after training: 0.6737566137566138
User 137452 does not improve AUC. Reverting changes.
Training on augumented user 105640 38/50 current_auc = 0.6738624338624339
User 105640 AUC after training: 0.6715873015873016
User 105640 does not improve AUC. Reverting changes.
Training on augumented user 118300 39/50 current_auc = 0.6738624338624339
User 118300 AUC after training: 0.6731746031746031
User 118300 does not improve AUC. Reverting changes.
Training on augumented user 46701 40/50 current_auc = 0.6738624338624339
User 46701 AUC after training: 0.6738624338624338
User 46701 does not improve AUC. Reverting changes.
Training on augumented user 29268 41/50 current_auc = 0.6738624338624339
User 29268 AUC after training: 0.6734920634920635
User 29268 does not improve AUC. Reverting changes.
Training on augumented user 4342 42/50 current_auc = 0.6738624338624339
User 4342 AUC after training: 0.6739153439153439
User 4342 improves AUC. Keeping the model.
Training on augumented user 40227 43/50 current_auc = 0.6739153439153439
User 40227 AUC after training: 0.6740740740740742
User 40227 improves AUC. Keeping the model.
Training on augumented user 118324 44/50 current_auc = 0.6740740740740742
User 118324 AUC after training: 0.6741269841269841
User 118324 improves AUC. Keeping the model.
Training on augumented user 75566 45/50 current_auc = 0.6741269841269841
User 75566 AUC after training: 0.6737566137566138
User 75566 does not improve AUC. Reverting changes.
Training on augumented user 96310 46/50 current_auc = 0.6741269841269841
User 96310 AUC after training: 0.6728571428571428
User 96310 does not improve AUC. Reverting changes.
Training on augumented user 50396 47/50 current_auc = 0.6741269841269841
User 50396 AUC after training: 0.6732804232804233
User 50396 does not improve AUC. Reverting changes.
Training on augumented user 83888 48/50 current_auc = 0.6741269841269841
User 83888 AUC after training: 0.6742857142857143
User 83888 improves AUC. Keeping the model.
Training on augumented user 28963 49/50 current_auc = 0.6742857142857143
User 28963 AUC after training: 0.6742328042328043
User 28963 does not improve AUC. Reverting changes.
[2024-12-02 19:44:43.530164] start test user 19310 233/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:44.099443] start test user 19310 233/568 recall augumented users by random, augumented_users = [4717, 36537, 57770, 72858, 81233, 13984, 63187, 54885, 47705, 14915, 35440, 3183, 134441, 130958, 132757, 21133, 77974, 137568, 74403, 43857, 56879, 97067, 87766, 104382, 13193, 104873, 58197, 110437, 91384, 79516, 39266, 63796, 44249, 100963, 138015, 10215, 94257, 115471, 82297, 105546, 2946, 6017, 45100, 30752, 39271, 73907, 76825, 11825, 134627, 122405]
[2024-12-02 19:44:44.132379] user = 19310 Cloud 233/568
[2024-12-02 19:44:44.164873] user = 19310 Local 233/568
[2024-12-02 19:44:44.304427] user = 19310 Local+ 233/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:47.495403] user = 19310 MPDA- 233/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8089099954771597
Training on augumented user 4717 0/50 current_auc = 0.8089099954771597
User 4717 AUC after training: 0.8075531433740389
User 4717 does not improve AUC. Reverting changes.
Training on augumented user 36537 1/50 current_auc = 0.8089099954771597
User 36537 AUC after training: 0.8068747173224785
User 36537 does not improve AUC. Reverting changes.
Training on augumented user 57770 2/50 current_auc = 0.8089099954771597
User 57770 AUC after training: 0.8077792853912257
User 57770 does not improve AUC. Reverting changes.
Training on augumented user 72858 3/50 current_auc = 0.8089099954771597
User 72858 AUC after training: 0.8075531433740389
User 72858 does not improve AUC. Reverting changes.
Training on augumented user 81233 4/50 current_auc = 0.8089099954771597
User 81233 AUC after training: 0.8082315694255994
User 81233 does not improve AUC. Reverting changes.
Training on augumented user 13984 5/50 current_auc = 0.8089099954771597
User 13984 AUC after training: 0.8082315694255994
User 13984 does not improve AUC. Reverting changes.
Training on augumented user 63187 6/50 current_auc = 0.8089099954771597
User 63187 AUC after training: 0.8080054274084125
User 63187 does not improve AUC. Reverting changes.
Training on augumented user 54885 7/50 current_auc = 0.8089099954771597
User 54885 AUC after training: 0.8068747173224785
User 54885 does not improve AUC. Reverting changes.
Training on augumented user 47705 8/50 current_auc = 0.8089099954771597
User 47705 AUC after training: 0.8068747173224786
User 47705 does not improve AUC. Reverting changes.
Training on augumented user 14915 9/50 current_auc = 0.8089099954771597
User 14915 AUC after training: 0.8075531433740389
User 14915 does not improve AUC. Reverting changes.
Training on augumented user 35440 10/50 current_auc = 0.8089099954771597
User 35440 AUC after training: 0.8077792853912258
User 35440 does not improve AUC. Reverting changes.
Training on augumented user 3183 11/50 current_auc = 0.8089099954771597
User 3183 AUC after training: 0.8071008593396654
User 3183 does not improve AUC. Reverting changes.
Training on augumented user 134441 12/50 current_auc = 0.8089099954771597
User 134441 AUC after training: 0.8068747173224786
User 134441 does not improve AUC. Reverting changes.
Training on augumented user 130958 13/50 current_auc = 0.8089099954771597
User 130958 AUC after training: 0.8077792853912257
User 130958 does not improve AUC. Reverting changes.
Training on augumented user 132757 14/50 current_auc = 0.8089099954771597
User 132757 AUC after training: 0.8080054274084125
User 132757 does not improve AUC. Reverting changes.
Training on augumented user 21133 15/50 current_auc = 0.8089099954771597
User 21133 AUC after training: 0.8075531433740389
User 21133 does not improve AUC. Reverting changes.
Training on augumented user 77974 16/50 current_auc = 0.8089099954771597
User 77974 AUC after training: 0.8077792853912258
User 77974 does not improve AUC. Reverting changes.
Training on augumented user 137568 17/50 current_auc = 0.8089099954771597
User 137568 AUC after training: 0.8132066938037088
User 137568 improves AUC. Keeping the model.
Training on augumented user 74403 18/50 current_auc = 0.8132066938037088
User 74403 AUC after training: 0.8084577114427862
User 74403 does not improve AUC. Reverting changes.
Training on augumented user 43857 19/50 current_auc = 0.8132066938037088
User 43857 AUC after training: 0.8132066938037088
User 43857 does not improve AUC. Reverting changes.
Training on augumented user 56879 20/50 current_auc = 0.8132066938037088
User 56879 AUC after training: 0.8143374038896427
User 56879 improves AUC. Keeping the model.
Training on augumented user 97067 21/50 current_auc = 0.8143374038896427
User 97067 AUC after training: 0.812980551786522
User 97067 does not improve AUC. Reverting changes.
Training on augumented user 87766 22/50 current_auc = 0.8143374038896427
User 87766 AUC after training: 0.8147896879240164
User 87766 improves AUC. Keeping the model.
Training on augumented user 104382 23/50 current_auc = 0.8147896879240164
User 104382 AUC after training: 0.813885119855269
User 104382 does not improve AUC. Reverting changes.
Training on augumented user 13193 24/50 current_auc = 0.8147896879240164
User 13193 AUC after training: 0.812980551786522
User 13193 does not improve AUC. Reverting changes.
Training on augumented user 104873 25/50 current_auc = 0.8147896879240164
User 104873 AUC after training: 0.8145635459068294
User 104873 does not improve AUC. Reverting changes.
Training on augumented user 58197 26/50 current_auc = 0.8147896879240164
User 58197 AUC after training: 0.8147896879240163
User 58197 does not improve AUC. Reverting changes.
Training on augumented user 110437 27/50 current_auc = 0.8147896879240164
User 110437 AUC after training: 0.8125282677521484
User 110437 does not improve AUC. Reverting changes.
Training on augumented user 91384 28/50 current_auc = 0.8147896879240164
User 91384 AUC after training: 0.8143374038896427
User 91384 does not improve AUC. Reverting changes.
Training on augumented user 79516 29/50 current_auc = 0.8147896879240164
User 79516 AUC after training: 0.8098145635459069
User 79516 does not improve AUC. Reverting changes.
Training on augumented user 39266 30/50 current_auc = 0.8147896879240164
User 39266 AUC after training: 0.8152419719583899
User 39266 improves AUC. Keeping the model.
Training on augumented user 63796 31/50 current_auc = 0.8152419719583899
User 63796 AUC after training: 0.8152419719583899
User 63796 does not improve AUC. Reverting changes.
Training on augumented user 44249 32/50 current_auc = 0.8152419719583899
User 44249 AUC after training: 0.8143374038896427
User 44249 does not improve AUC. Reverting changes.
Training on augumented user 100963 33/50 current_auc = 0.8152419719583899
User 100963 AUC after training: 0.8147896879240163
User 100963 does not improve AUC. Reverting changes.
Training on augumented user 138015 34/50 current_auc = 0.8152419719583899
User 138015 AUC after training: 0.8147896879240163
User 138015 does not improve AUC. Reverting changes.
Training on augumented user 10215 35/50 current_auc = 0.8152419719583899
User 10215 AUC after training: 0.8145635459068296
User 10215 does not improve AUC. Reverting changes.
Training on augumented user 94257 36/50 current_auc = 0.8152419719583899
User 94257 AUC after training: 0.8150158299412031
User 94257 does not improve AUC. Reverting changes.
Training on augumented user 115471 37/50 current_auc = 0.8152419719583899
User 115471 AUC after training: 0.8152419719583899
User 115471 does not improve AUC. Reverting changes.
Training on augumented user 82297 38/50 current_auc = 0.8152419719583899
User 82297 AUC after training: 0.8143374038896427
User 82297 does not improve AUC. Reverting changes.
Training on augumented user 105546 39/50 current_auc = 0.8152419719583899
User 105546 AUC after training: 0.8141112618724559
User 105546 does not improve AUC. Reverting changes.
Training on augumented user 2946 40/50 current_auc = 0.8152419719583899
User 2946 AUC after training: 0.8154681139755767
User 2946 improves AUC. Keeping the model.
Training on augumented user 6017 41/50 current_auc = 0.8154681139755767
User 6017 AUC after training: 0.8150158299412031
User 6017 does not improve AUC. Reverting changes.
Training on augumented user 45100 42/50 current_auc = 0.8154681139755767
User 45100 AUC after training: 0.8138851198552692
User 45100 does not improve AUC. Reverting changes.
Training on augumented user 30752 43/50 current_auc = 0.8154681139755767
User 30752 AUC after training: 0.8147896879240164
User 30752 does not improve AUC. Reverting changes.
Training on augumented user 39271 44/50 current_auc = 0.8154681139755767
User 39271 AUC after training: 0.8156942559927634
User 39271 improves AUC. Keeping the model.
Training on augumented user 73907 45/50 current_auc = 0.8156942559927634
User 73907 AUC after training: 0.813885119855269
User 73907 does not improve AUC. Reverting changes.
Training on augumented user 76825 46/50 current_auc = 0.8156942559927634
User 76825 AUC after training: 0.8163726820443238
User 76825 improves AUC. Keeping the model.
Training on augumented user 11825 47/50 current_auc = 0.8163726820443238
User 11825 AUC after training: 0.8145635459068294
User 11825 does not improve AUC. Reverting changes.
Training on augumented user 134627 48/50 current_auc = 0.8163726820443238
User 134627 AUC after training: 0.8123021257349616
User 134627 does not improve AUC. Reverting changes.
Training on augumented user 122405 49/50 current_auc = 0.8163726820443238
User 122405 AUC after training: 0.8147896879240164
User 122405 does not improve AUC. Reverting changes.
[2024-12-02 19:45:19.940007] start test user 19344 234/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:20.350918] start test user 19344 234/568 recall augumented users by random, augumented_users = [31259, 28274, 88925, 81684, 62528, 103059, 27161, 63477, 3318, 119903, 120867, 46983, 107789, 60606, 6397, 95690, 35320, 130118, 54531, 46311, 93122, 36972, 132685, 124130, 58495, 66394, 21410, 48162, 73774, 41141, 107755, 63468, 104401, 11296, 65716, 94123, 38239, 26824, 9759, 85280, 89413, 73742, 43434, 37657, 82855, 4857, 1716, 129971, 75660, 123957]
[2024-12-02 19:45:20.366300] user = 19344 Cloud 234/568
[2024-12-02 19:45:20.428047] user = 19344 Local 234/568
[2024-12-02 19:45:20.498313] user = 19344 Local+ 234/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:23.250970] user = 19344 MPDA- 234/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7169774669774669
Training on augumented user 31259 0/50 current_auc = 0.7169774669774669
User 31259 AUC after training: 0.7172688422688422
User 31259 improves AUC. Keeping the model.
Training on augumented user 28274 1/50 current_auc = 0.7172688422688422
User 28274 AUC after training: 0.7168803418803418
User 28274 does not improve AUC. Reverting changes.
Training on augumented user 88925 2/50 current_auc = 0.7172688422688422
User 88925 AUC after training: 0.7167832167832168
User 88925 does not improve AUC. Reverting changes.
Training on augumented user 81684 3/50 current_auc = 0.7172688422688422
User 81684 AUC after training: 0.7170260295260296
User 81684 does not improve AUC. Reverting changes.
Training on augumented user 62528 4/50 current_auc = 0.7172688422688422
User 62528 AUC after training: 0.7173659673659674
User 62528 improves AUC. Keeping the model.
Training on augumented user 103059 5/50 current_auc = 0.7173659673659674
User 103059 AUC after training: 0.7181915306915307
User 103059 improves AUC. Keeping the model.
Training on augumented user 27161 6/50 current_auc = 0.7181915306915307
User 27161 AUC after training: 0.7181429681429681
User 27161 does not improve AUC. Reverting changes.
Training on augumented user 63477 7/50 current_auc = 0.7181915306915307
User 63477 AUC after training: 0.7179972804972805
User 63477 does not improve AUC. Reverting changes.
Training on augumented user 3318 8/50 current_auc = 0.7181915306915307
User 3318 AUC after training: 0.7183857808857809
User 3318 improves AUC. Keeping the model.
Training on augumented user 119903 9/50 current_auc = 0.7183857808857809
User 119903 AUC after training: 0.7182400932400932
User 119903 does not improve AUC. Reverting changes.
Training on augumented user 120867 10/50 current_auc = 0.7183857808857809
User 120867 AUC after training: 0.7182886557886559
User 120867 does not improve AUC. Reverting changes.
Training on augumented user 46983 11/50 current_auc = 0.7183857808857809
User 46983 AUC after training: 0.7177544677544678
User 46983 does not improve AUC. Reverting changes.
Training on augumented user 107789 12/50 current_auc = 0.7183857808857809
User 107789 AUC after training: 0.7185314685314685
User 107789 improves AUC. Keeping the model.
Training on augumented user 60606 13/50 current_auc = 0.7185314685314685
User 60606 AUC after training: 0.7186771561771562
User 60606 improves AUC. Keeping the model.
Training on augumented user 6397 14/50 current_auc = 0.7186771561771562
User 6397 AUC after training: 0.7193084693084693
User 6397 improves AUC. Keeping the model.
Training on augumented user 95690 15/50 current_auc = 0.7193084693084693
User 95690 AUC after training: 0.7192599067599067
User 95690 does not improve AUC. Reverting changes.
Training on augumented user 35320 16/50 current_auc = 0.7193084693084693
User 35320 AUC after training: 0.718580031080031
User 35320 does not improve AUC. Reverting changes.
Training on augumented user 130118 17/50 current_auc = 0.7193084693084693
User 130118 AUC after training: 0.7195512820512819
User 130118 improves AUC. Keeping the model.
Training on augumented user 54531 18/50 current_auc = 0.7195512820512819
User 54531 AUC after training: 0.7195998445998446
User 54531 improves AUC. Keeping the model.
Training on augumented user 46311 19/50 current_auc = 0.7195998445998446
User 46311 AUC after training: 0.7193570318570318
User 46311 does not improve AUC. Reverting changes.
Training on augumented user 93122 20/50 current_auc = 0.7195998445998446
User 93122 AUC after training: 0.7191627816627817
User 93122 does not improve AUC. Reverting changes.
Training on augumented user 36972 21/50 current_auc = 0.7195998445998446
User 36972 AUC after training: 0.7195998445998445
User 36972 does not improve AUC. Reverting changes.
Training on augumented user 132685 22/50 current_auc = 0.7195998445998446
User 132685 AUC after training: 0.7196484071484072
User 132685 improves AUC. Keeping the model.
Training on augumented user 124130 23/50 current_auc = 0.7196484071484072
User 124130 AUC after training: 0.7195027195027194
User 124130 does not improve AUC. Reverting changes.
Training on augumented user 58495 24/50 current_auc = 0.7196484071484072
User 58495 AUC after training: 0.7195027195027194
User 58495 does not improve AUC. Reverting changes.
Training on augumented user 66394 25/50 current_auc = 0.7196484071484072
User 66394 AUC after training: 0.7198912198912198
User 66394 improves AUC. Keeping the model.
Training on augumented user 21410 26/50 current_auc = 0.7198912198912198
User 21410 AUC after training: 0.7201825951825952
User 21410 improves AUC. Keeping the model.
Training on augumented user 48162 27/50 current_auc = 0.7201825951825952
User 48162 AUC after training: 0.7189685314685315
User 48162 does not improve AUC. Reverting changes.
Training on augumented user 73774 28/50 current_auc = 0.7201825951825952
User 73774 AUC after training: 0.7194541569541568
User 73774 does not improve AUC. Reverting changes.
Training on augumented user 41141 29/50 current_auc = 0.7201825951825952
User 41141 AUC after training: 0.7202311577311578
User 41141 improves AUC. Keeping the model.
Training on augumented user 107755 30/50 current_auc = 0.7202311577311578
User 107755 AUC after training: 0.7197940947940947
User 107755 does not improve AUC. Reverting changes.
Training on augumented user 63468 31/50 current_auc = 0.7202311577311578
User 63468 AUC after training: 0.7201825951825953
User 63468 does not improve AUC. Reverting changes.
Training on augumented user 104401 32/50 current_auc = 0.7202311577311578
User 104401 AUC after training: 0.7197940947940947
User 104401 does not improve AUC. Reverting changes.
Training on augumented user 11296 33/50 current_auc = 0.7202311577311578
User 11296 AUC after training: 0.7199397824397824
User 11296 does not improve AUC. Reverting changes.
Training on augumented user 65716 34/50 current_auc = 0.7202311577311578
User 65716 AUC after training: 0.7199397824397825
User 65716 does not improve AUC. Reverting changes.
Training on augumented user 94123 35/50 current_auc = 0.7202311577311578
User 94123 AUC after training: 0.719988344988345
User 94123 does not improve AUC. Reverting changes.
Training on augumented user 38239 36/50 current_auc = 0.7202311577311578
User 38239 AUC after training: 0.719988344988345
User 38239 does not improve AUC. Reverting changes.
Training on augumented user 26824 37/50 current_auc = 0.7202311577311578
User 26824 AUC after training: 0.7204739704739704
User 26824 improves AUC. Keeping the model.
Training on augumented user 9759 38/50 current_auc = 0.7204739704739704
User 9759 AUC after training: 0.720255439005439
User 9759 does not improve AUC. Reverting changes.
Training on augumented user 85280 39/50 current_auc = 0.7204739704739704
User 85280 AUC after training: 0.7201825951825951
User 85280 does not improve AUC. Reverting changes.
Training on augumented user 89413 40/50 current_auc = 0.7204739704739704
User 89413 AUC after training: 0.7207167832167832
User 89413 improves AUC. Keeping the model.
Training on augumented user 73742 41/50 current_auc = 0.7207167832167832
User 73742 AUC after training: 0.720522533022533
User 73742 does not improve AUC. Reverting changes.
Training on augumented user 43434 42/50 current_auc = 0.7207167832167832
User 43434 AUC after training: 0.7204739704739704
User 43434 does not improve AUC. Reverting changes.
Training on augumented user 37657 43/50 current_auc = 0.7207167832167832
User 37657 AUC after training: 0.7203768453768453
User 37657 does not improve AUC. Reverting changes.
Training on augumented user 82855 44/50 current_auc = 0.7207167832167832
User 82855 AUC after training: 0.7203282828282828
User 82855 does not improve AUC. Reverting changes.
Training on augumented user 4857 45/50 current_auc = 0.7207167832167832
User 4857 AUC after training: 0.7206196581196581
User 4857 does not improve AUC. Reverting changes.
Training on augumented user 1716 46/50 current_auc = 0.7207167832167832
User 1716 AUC after training: 0.719988344988345
User 1716 does not improve AUC. Reverting changes.
Training on augumented user 129971 47/50 current_auc = 0.7207167832167832
User 129971 AUC after training: 0.720522533022533
User 129971 does not improve AUC. Reverting changes.
Training on augumented user 75660 48/50 current_auc = 0.7207167832167832
User 75660 AUC after training: 0.719988344988345
User 75660 does not improve AUC. Reverting changes.
Training on augumented user 123957 49/50 current_auc = 0.7207167832167832
User 123957 AUC after training: 0.7204254079254079
User 123957 does not improve AUC. Reverting changes.
[2024-12-02 19:45:54.303096] start test user 19416 235/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:54.822724] start test user 19416 235/568 recall augumented users by random, augumented_users = [52530, 115603, 47270, 17076, 119683, 48374, 33719, 72778, 77468, 91792, 69023, 67216, 97460, 14118, 115365, 120881, 1970, 19825, 27601, 61663, 49672, 125259, 8338, 16611, 107405, 103214, 97499, 44155, 37480, 132538, 85954, 104243, 4224, 49959, 45214, 63174, 78655, 113759, 67005, 92201, 22269, 30368, 4794, 55115, 97699, 103981, 34691, 33963, 60705, 5104]
[2024-12-02 19:45:54.838133] user = 19416 Cloud 235/568
[2024-12-02 19:45:54.865945] user = 19416 Local 235/568
[2024-12-02 19:45:54.935834] user = 19416 Local+ 235/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:56.766946] user = 19416 MPDA- 235/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6398745519713263
Training on augumented user 52530 0/50 current_auc = 0.6398745519713263
User 52530 AUC after training: 0.6398745519713263
User 52530 does not improve AUC. Reverting changes.
Training on augumented user 115603 1/50 current_auc = 0.6398745519713263
User 115603 AUC after training: 0.6396057347670251
User 115603 does not improve AUC. Reverting changes.
Training on augumented user 47270 2/50 current_auc = 0.6398745519713263
User 47270 AUC after training: 0.6396953405017921
User 47270 does not improve AUC. Reverting changes.
Training on augumented user 17076 3/50 current_auc = 0.6398745519713263
User 17076 AUC after training: 0.6399641577060933
User 17076 improves AUC. Keeping the model.
Training on augumented user 119683 4/50 current_auc = 0.6399641577060933
User 119683 AUC after training: 0.6389784946236559
User 119683 does not improve AUC. Reverting changes.
Training on augumented user 48374 5/50 current_auc = 0.6399641577060933
User 48374 AUC after training: 0.6401433691756273
User 48374 improves AUC. Keeping the model.
Training on augumented user 33719 6/50 current_auc = 0.6401433691756273
User 33719 AUC after training: 0.6400537634408602
User 33719 does not improve AUC. Reverting changes.
Training on augumented user 72778 7/50 current_auc = 0.6401433691756273
User 72778 AUC after training: 0.639068100358423
User 72778 does not improve AUC. Reverting changes.
Training on augumented user 77468 8/50 current_auc = 0.6401433691756273
User 77468 AUC after training: 0.6398745519713263
User 77468 does not improve AUC. Reverting changes.
Training on augumented user 91792 9/50 current_auc = 0.6401433691756273
User 91792 AUC after training: 0.6400537634408603
User 91792 does not improve AUC. Reverting changes.
Training on augumented user 69023 10/50 current_auc = 0.6401433691756273
User 69023 AUC after training: 0.6405017921146954
User 69023 improves AUC. Keeping the model.
Training on augumented user 67216 11/50 current_auc = 0.6405017921146954
User 67216 AUC after training: 0.6409498207885305
User 67216 improves AUC. Keeping the model.
Training on augumented user 97460 12/50 current_auc = 0.6409498207885305
User 97460 AUC after training: 0.6408602150537634
User 97460 does not improve AUC. Reverting changes.
Training on augumented user 14118 13/50 current_auc = 0.6409498207885305
User 14118 AUC after training: 0.6404121863799284
User 14118 does not improve AUC. Reverting changes.
Training on augumented user 115365 14/50 current_auc = 0.6409498207885305
User 115365 AUC after training: 0.6407706093189964
User 115365 does not improve AUC. Reverting changes.
Training on augumented user 120881 15/50 current_auc = 0.6409498207885305
User 120881 AUC after training: 0.6398745519713263
User 120881 does not improve AUC. Reverting changes.
Training on augumented user 1970 16/50 current_auc = 0.6409498207885305
User 1970 AUC after training: 0.6404121863799282
User 1970 does not improve AUC. Reverting changes.
Training on augumented user 19825 17/50 current_auc = 0.6409498207885305
User 19825 AUC after training: 0.6405913978494624
User 19825 does not improve AUC. Reverting changes.
Training on augumented user 27601 18/50 current_auc = 0.6409498207885305
User 27601 AUC after training: 0.6404121863799284
User 27601 does not improve AUC. Reverting changes.
Training on augumented user 61663 19/50 current_auc = 0.6409498207885305
User 61663 AUC after training: 0.6398745519713263
User 61663 does not improve AUC. Reverting changes.
Training on augumented user 49672 20/50 current_auc = 0.6409498207885305
User 49672 AUC after training: 0.6404121863799284
User 49672 does not improve AUC. Reverting changes.
Training on augumented user 125259 21/50 current_auc = 0.6409498207885305
User 125259 AUC after training: 0.6404121863799284
User 125259 does not improve AUC. Reverting changes.
Training on augumented user 8338 22/50 current_auc = 0.6409498207885305
User 8338 AUC after training: 0.6401433691756272
User 8338 does not improve AUC. Reverting changes.
Training on augumented user 16611 23/50 current_auc = 0.6409498207885305
User 16611 AUC after training: 0.6403225806451613
User 16611 does not improve AUC. Reverting changes.
Training on augumented user 107405 24/50 current_auc = 0.6409498207885305
User 107405 AUC after training: 0.6414874551971326
User 107405 improves AUC. Keeping the model.
Training on augumented user 103214 25/50 current_auc = 0.6414874551971326
User 103214 AUC after training: 0.6408602150537634
User 103214 does not improve AUC. Reverting changes.
Training on augumented user 97499 26/50 current_auc = 0.6414874551971326
User 97499 AUC after training: 0.6409498207885305
User 97499 does not improve AUC. Reverting changes.
Training on augumented user 44155 27/50 current_auc = 0.6414874551971326
User 44155 AUC after training: 0.6411290322580645
User 44155 does not improve AUC. Reverting changes.
Training on augumented user 37480 28/50 current_auc = 0.6414874551971326
User 37480 AUC after training: 0.6412186379928315
User 37480 does not improve AUC. Reverting changes.
Training on augumented user 132538 29/50 current_auc = 0.6414874551971326
User 132538 AUC after training: 0.6413082437275985
User 132538 does not improve AUC. Reverting changes.
Training on augumented user 85954 30/50 current_auc = 0.6414874551971326
User 85954 AUC after training: 0.6413082437275985
User 85954 does not improve AUC. Reverting changes.
Training on augumented user 104243 31/50 current_auc = 0.6414874551971326
User 104243 AUC after training: 0.6413082437275985
User 104243 does not improve AUC. Reverting changes.
Training on augumented user 4224 32/50 current_auc = 0.6414874551971326
User 4224 AUC after training: 0.6405017921146954
User 4224 does not improve AUC. Reverting changes.
Training on augumented user 49959 33/50 current_auc = 0.6414874551971326
User 49959 AUC after training: 0.6411290322580645
User 49959 does not improve AUC. Reverting changes.
Training on augumented user 45214 34/50 current_auc = 0.6414874551971326
User 45214 AUC after training: 0.6406810035842294
User 45214 does not improve AUC. Reverting changes.
Training on augumented user 63174 35/50 current_auc = 0.6414874551971326
User 63174 AUC after training: 0.6423835125448029
User 63174 improves AUC. Keeping the model.
Training on augumented user 78655 36/50 current_auc = 0.6423835125448029
User 78655 AUC after training: 0.6428315412186381
User 78655 improves AUC. Keeping the model.
Training on augumented user 113759 37/50 current_auc = 0.6428315412186381
User 113759 AUC after training: 0.642741935483871
User 113759 does not improve AUC. Reverting changes.
Training on augumented user 67005 38/50 current_auc = 0.6428315412186381
User 67005 AUC after training: 0.642831541218638
User 67005 does not improve AUC. Reverting changes.
Training on augumented user 92201 39/50 current_auc = 0.6428315412186381
User 92201 AUC after training: 0.6429211469534051
User 92201 improves AUC. Keeping the model.
Training on augumented user 22269 40/50 current_auc = 0.6429211469534051
User 22269 AUC after training: 0.6429211469534051
User 22269 does not improve AUC. Reverting changes.
Training on augumented user 30368 41/50 current_auc = 0.6429211469534051
User 30368 AUC after training: 0.6428315412186381
User 30368 does not improve AUC. Reverting changes.
Training on augumented user 4794 42/50 current_auc = 0.6429211469534051
User 4794 AUC after training: 0.6428315412186381
User 4794 does not improve AUC. Reverting changes.
Training on augumented user 55115 43/50 current_auc = 0.6429211469534051
User 55115 AUC after training: 0.6422043010752688
User 55115 does not improve AUC. Reverting changes.
Training on augumented user 97699 44/50 current_auc = 0.6429211469534051
User 97699 AUC after training: 0.6420250896057347
User 97699 does not improve AUC. Reverting changes.
Training on augumented user 103981 45/50 current_auc = 0.6429211469534051
User 103981 AUC after training: 0.6422043010752688
User 103981 does not improve AUC. Reverting changes.
Training on augumented user 34691 46/50 current_auc = 0.6429211469534051
User 34691 AUC after training: 0.6430107526881721
User 34691 improves AUC. Keeping the model.
Training on augumented user 33963 47/50 current_auc = 0.6430107526881721
User 33963 AUC after training: 0.6422939068100358
User 33963 does not improve AUC. Reverting changes.
Training on augumented user 60705 48/50 current_auc = 0.6430107526881721
User 60705 AUC after training: 0.6428315412186381
User 60705 does not improve AUC. Reverting changes.
Training on augumented user 5104 49/50 current_auc = 0.6430107526881721
User 5104 AUC after training: 0.642741935483871
User 5104 does not improve AUC. Reverting changes.
[2024-12-02 19:46:26.586848] start test user 19461 236/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:27.018860] start test user 19461 236/568 recall augumented users by random, augumented_users = [12840, 103930, 18816, 52030, 19394, 6028, 31671, 59297, 102711, 87296, 44249, 77675, 942, 88163, 54010, 116538, 29179, 125018, 1341, 49473, 23678, 70414, 86363, 123491, 64331, 90143, 49979, 19983, 86635, 109718, 46894, 94698, 92426, 83056, 53896, 101547, 86415, 44385, 93280, 90522, 76842, 4238, 24077, 74450, 73741, 40464, 86085, 34303, 83355, 45680]
[2024-12-02 19:46:27.034156] user = 19461 Cloud 236/568
[2024-12-02 19:46:27.044062] user = 19461 Local 236/568
[2024-12-02 19:46:27.085960] user = 19461 Local+ 236/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:29.840414] user = 19461 MPDA- 236/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.2959183673469388
Training on augumented user 12840 0/50 current_auc = 0.2959183673469388
User 12840 AUC after training: 0.2959183673469388
User 12840 does not improve AUC. Reverting changes.
Training on augumented user 103930 1/50 current_auc = 0.2959183673469388
User 103930 AUC after training: 0.2959183673469388
User 103930 does not improve AUC. Reverting changes.
Training on augumented user 18816 2/50 current_auc = 0.2959183673469388
User 18816 AUC after training: 0.2959183673469388
User 18816 does not improve AUC. Reverting changes.
Training on augumented user 52030 3/50 current_auc = 0.2959183673469388
User 52030 AUC after training: 0.2959183673469388
User 52030 does not improve AUC. Reverting changes.
Training on augumented user 19394 4/50 current_auc = 0.2959183673469388
User 19394 AUC after training: 0.2959183673469388
User 19394 does not improve AUC. Reverting changes.
Training on augumented user 6028 5/50 current_auc = 0.2959183673469388
User 6028 AUC after training: 0.2959183673469388
User 6028 does not improve AUC. Reverting changes.
Training on augumented user 31671 6/50 current_auc = 0.2959183673469388
User 31671 AUC after training: 0.2959183673469388
User 31671 does not improve AUC. Reverting changes.
Training on augumented user 59297 7/50 current_auc = 0.2959183673469388
User 59297 AUC after training: 0.2959183673469388
User 59297 does not improve AUC. Reverting changes.
Training on augumented user 102711 8/50 current_auc = 0.2959183673469388
User 102711 AUC after training: 0.2959183673469388
User 102711 does not improve AUC. Reverting changes.
Training on augumented user 87296 9/50 current_auc = 0.2959183673469388
User 87296 AUC after training: 0.2959183673469388
User 87296 does not improve AUC. Reverting changes.
Training on augumented user 44249 10/50 current_auc = 0.2959183673469388
User 44249 AUC after training: 0.2959183673469388
User 44249 does not improve AUC. Reverting changes.
Training on augumented user 77675 11/50 current_auc = 0.2959183673469388
User 77675 AUC after training: 0.2959183673469388
User 77675 does not improve AUC. Reverting changes.
Training on augumented user 942 12/50 current_auc = 0.2959183673469388
User 942 AUC after training: 0.2959183673469388
User 942 does not improve AUC. Reverting changes.
Training on augumented user 88163 13/50 current_auc = 0.2959183673469388
User 88163 AUC after training: 0.2959183673469388
User 88163 does not improve AUC. Reverting changes.
Training on augumented user 54010 14/50 current_auc = 0.2959183673469388
User 54010 AUC after training: 0.2959183673469388
User 54010 does not improve AUC. Reverting changes.
Training on augumented user 116538 15/50 current_auc = 0.2959183673469388
User 116538 AUC after training: 0.2959183673469388
User 116538 does not improve AUC. Reverting changes.
Training on augumented user 29179 16/50 current_auc = 0.2959183673469388
User 29179 AUC after training: 0.2959183673469388
User 29179 does not improve AUC. Reverting changes.
Training on augumented user 125018 17/50 current_auc = 0.2959183673469388
User 125018 AUC after training: 0.2959183673469388
User 125018 does not improve AUC. Reverting changes.
Training on augumented user 1341 18/50 current_auc = 0.2959183673469388
User 1341 AUC after training: 0.2959183673469388
User 1341 does not improve AUC. Reverting changes.
Training on augumented user 49473 19/50 current_auc = 0.2959183673469388
User 49473 AUC after training: 0.2959183673469388
User 49473 does not improve AUC. Reverting changes.
Training on augumented user 23678 20/50 current_auc = 0.2959183673469388
User 23678 AUC after training: 0.2959183673469388
User 23678 does not improve AUC. Reverting changes.
Training on augumented user 70414 21/50 current_auc = 0.2959183673469388
User 70414 AUC after training: 0.2959183673469388
User 70414 does not improve AUC. Reverting changes.
Training on augumented user 86363 22/50 current_auc = 0.2959183673469388
User 86363 AUC after training: 0.2959183673469388
User 86363 does not improve AUC. Reverting changes.
Training on augumented user 123491 23/50 current_auc = 0.2959183673469388
User 123491 AUC after training: 0.2959183673469388
User 123491 does not improve AUC. Reverting changes.
Training on augumented user 64331 24/50 current_auc = 0.2959183673469388
User 64331 AUC after training: 0.2959183673469388
User 64331 does not improve AUC. Reverting changes.
Training on augumented user 90143 25/50 current_auc = 0.2959183673469388
User 90143 AUC after training: 0.2959183673469388
User 90143 does not improve AUC. Reverting changes.
Training on augumented user 49979 26/50 current_auc = 0.2959183673469388
User 49979 AUC after training: 0.2959183673469388
User 49979 does not improve AUC. Reverting changes.
Training on augumented user 19983 27/50 current_auc = 0.2959183673469388
User 19983 AUC after training: 0.2959183673469388
User 19983 does not improve AUC. Reverting changes.
Training on augumented user 86635 28/50 current_auc = 0.2959183673469388
User 86635 AUC after training: 0.3163265306122449
User 86635 improves AUC. Keeping the model.
Training on augumented user 109718 29/50 current_auc = 0.3163265306122449
User 109718 AUC after training: 0.326530612244898
User 109718 improves AUC. Keeping the model.
Training on augumented user 46894 30/50 current_auc = 0.326530612244898
User 46894 AUC after training: 0.326530612244898
User 46894 does not improve AUC. Reverting changes.
Training on augumented user 94698 31/50 current_auc = 0.326530612244898
User 94698 AUC after training: 0.326530612244898
User 94698 does not improve AUC. Reverting changes.
Training on augumented user 92426 32/50 current_auc = 0.326530612244898
User 92426 AUC after training: 0.326530612244898
User 92426 does not improve AUC. Reverting changes.
Training on augumented user 83056 33/50 current_auc = 0.326530612244898
User 83056 AUC after training: 0.326530612244898
User 83056 does not improve AUC. Reverting changes.
Training on augumented user 53896 34/50 current_auc = 0.326530612244898
User 53896 AUC after training: 0.326530612244898
User 53896 does not improve AUC. Reverting changes.
Training on augumented user 101547 35/50 current_auc = 0.326530612244898
User 101547 AUC after training: 0.2959183673469388
User 101547 does not improve AUC. Reverting changes.
Training on augumented user 86415 36/50 current_auc = 0.326530612244898
User 86415 AUC after training: 0.326530612244898
User 86415 does not improve AUC. Reverting changes.
Training on augumented user 44385 37/50 current_auc = 0.326530612244898
User 44385 AUC after training: 0.326530612244898
User 44385 does not improve AUC. Reverting changes.
Training on augumented user 93280 38/50 current_auc = 0.326530612244898
User 93280 AUC after training: 0.326530612244898
User 93280 does not improve AUC. Reverting changes.
Training on augumented user 90522 39/50 current_auc = 0.326530612244898
User 90522 AUC after training: 0.3163265306122449
User 90522 does not improve AUC. Reverting changes.
Training on augumented user 76842 40/50 current_auc = 0.326530612244898
User 76842 AUC after training: 0.326530612244898
User 76842 does not improve AUC. Reverting changes.
Training on augumented user 4238 41/50 current_auc = 0.326530612244898
User 4238 AUC after training: 0.326530612244898
User 4238 does not improve AUC. Reverting changes.
Training on augumented user 24077 42/50 current_auc = 0.326530612244898
User 24077 AUC after training: 0.3163265306122449
User 24077 does not improve AUC. Reverting changes.
Training on augumented user 74450 43/50 current_auc = 0.326530612244898
User 74450 AUC after training: 0.2959183673469388
User 74450 does not improve AUC. Reverting changes.
Training on augumented user 73741 44/50 current_auc = 0.326530612244898
User 73741 AUC after training: 0.326530612244898
User 73741 does not improve AUC. Reverting changes.
Training on augumented user 40464 45/50 current_auc = 0.326530612244898
User 40464 AUC after training: 0.3469387755102041
User 40464 improves AUC. Keeping the model.
Training on augumented user 86085 46/50 current_auc = 0.3469387755102041
User 86085 AUC after training: 0.2959183673469388
User 86085 does not improve AUC. Reverting changes.
Training on augumented user 34303 47/50 current_auc = 0.3469387755102041
User 34303 AUC after training: 0.3469387755102041
User 34303 does not improve AUC. Reverting changes.
Training on augumented user 83355 48/50 current_auc = 0.3469387755102041
User 83355 AUC after training: 0.3163265306122449
User 83355 does not improve AUC. Reverting changes.
Training on augumented user 45680 49/50 current_auc = 0.3469387755102041
User 45680 AUC after training: 0.2959183673469388
User 45680 does not improve AUC. Reverting changes.
[2024-12-02 19:47:00.963422] start test user 19503 237/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:01.552651] start test user 19503 237/568 recall augumented users by random, augumented_users = [124869, 10249, 79246, 46285, 135437, 56764, 15858, 30271, 16585, 128032, 111695, 20339, 115411, 70300, 2442, 118891, 40136, 9966, 29521, 23476, 57520, 37981, 117231, 76810, 109383, 92593, 4614, 7020, 99896, 38777, 1889, 36669, 12569, 31522, 61139, 82231, 102678, 106087, 110881, 101153, 63247, 34307, 93935, 59510, 37314, 105521, 67165, 109804, 76149, 696]
[2024-12-02 19:47:01.586855] user = 19503 Cloud 237/568
[2024-12-02 19:47:01.615836] user = 19503 Local 237/568
[2024-12-02 19:47:01.670004] user = 19503 Local+ 237/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:03.992919] user = 19503 MPDA- 237/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.29268292682926833
Training on augumented user 124869 0/50 current_auc = 0.29268292682926833
User 124869 AUC after training: 0.29268292682926833
User 124869 does not improve AUC. Reverting changes.
Training on augumented user 10249 1/50 current_auc = 0.29268292682926833
User 10249 AUC after training: 0.2913992297817715
User 10249 does not improve AUC. Reverting changes.
Training on augumented user 79246 2/50 current_auc = 0.29268292682926833
User 79246 AUC after training: 0.29396662387676514
User 79246 improves AUC. Keeping the model.
Training on augumented user 46285 3/50 current_auc = 0.29396662387676514
User 46285 AUC after training: 0.29396662387676514
User 46285 does not improve AUC. Reverting changes.
Training on augumented user 135437 4/50 current_auc = 0.29396662387676514
User 135437 AUC after training: 0.29396662387676514
User 135437 does not improve AUC. Reverting changes.
Training on augumented user 56764 5/50 current_auc = 0.29396662387676514
User 56764 AUC after training: 0.2952503209242619
User 56764 improves AUC. Keeping the model.
Training on augumented user 15858 6/50 current_auc = 0.2952503209242619
User 15858 AUC after training: 0.29396662387676514
User 15858 does not improve AUC. Reverting changes.
Training on augumented user 30271 7/50 current_auc = 0.2952503209242619
User 30271 AUC after training: 0.2952503209242619
User 30271 does not improve AUC. Reverting changes.
Training on augumented user 16585 8/50 current_auc = 0.2952503209242619
User 16585 AUC after training: 0.29396662387676514
User 16585 does not improve AUC. Reverting changes.
Training on augumented user 128032 9/50 current_auc = 0.2952503209242619
User 128032 AUC after training: 0.29396662387676514
User 128032 does not improve AUC. Reverting changes.
Training on augumented user 111695 10/50 current_auc = 0.2952503209242619
User 111695 AUC after training: 0.29396662387676514
User 111695 does not improve AUC. Reverting changes.
Training on augumented user 20339 11/50 current_auc = 0.2952503209242619
User 20339 AUC after training: 0.2952503209242619
User 20339 does not improve AUC. Reverting changes.
Training on augumented user 115411 12/50 current_auc = 0.2952503209242619
User 115411 AUC after training: 0.2952503209242619
User 115411 does not improve AUC. Reverting changes.
Training on augumented user 70300 13/50 current_auc = 0.2952503209242619
User 70300 AUC after training: 0.29396662387676514
User 70300 does not improve AUC. Reverting changes.
Training on augumented user 2442 14/50 current_auc = 0.2952503209242619
User 2442 AUC after training: 0.2952503209242619
User 2442 does not improve AUC. Reverting changes.
Training on augumented user 118891 15/50 current_auc = 0.2952503209242619
User 118891 AUC after training: 0.2952503209242619
User 118891 does not improve AUC. Reverting changes.
Training on augumented user 40136 16/50 current_auc = 0.2952503209242619
User 40136 AUC after training: 0.29396662387676514
User 40136 does not improve AUC. Reverting changes.
Training on augumented user 9966 17/50 current_auc = 0.2952503209242619
User 9966 AUC after training: 0.2952503209242619
User 9966 does not improve AUC. Reverting changes.
Training on augumented user 29521 18/50 current_auc = 0.2952503209242619
User 29521 AUC after training: 0.29396662387676514
User 29521 does not improve AUC. Reverting changes.
Training on augumented user 23476 19/50 current_auc = 0.2952503209242619
User 23476 AUC after training: 0.29396662387676514
User 23476 does not improve AUC. Reverting changes.
Training on augumented user 57520 20/50 current_auc = 0.2952503209242619
User 57520 AUC after training: 0.29396662387676514
User 57520 does not improve AUC. Reverting changes.
Training on augumented user 37981 21/50 current_auc = 0.2952503209242619
User 37981 AUC after training: 0.2952503209242619
User 37981 does not improve AUC. Reverting changes.
Training on augumented user 117231 22/50 current_auc = 0.2952503209242619
User 117231 AUC after training: 0.2913992297817716
User 117231 does not improve AUC. Reverting changes.
Training on augumented user 76810 23/50 current_auc = 0.2952503209242619
User 76810 AUC after training: 0.29268292682926833
User 76810 does not improve AUC. Reverting changes.
Training on augumented user 109383 24/50 current_auc = 0.2952503209242619
User 109383 AUC after training: 0.2952503209242619
User 109383 does not improve AUC. Reverting changes.
Training on augumented user 92593 25/50 current_auc = 0.2952503209242619
User 92593 AUC after training: 0.2952503209242619
User 92593 does not improve AUC. Reverting changes.
Training on augumented user 4614 26/50 current_auc = 0.2952503209242619
User 4614 AUC after training: 0.29396662387676514
User 4614 does not improve AUC. Reverting changes.
Training on augumented user 7020 27/50 current_auc = 0.2952503209242619
User 7020 AUC after training: 0.2965340179717587
User 7020 improves AUC. Keeping the model.
Training on augumented user 99896 28/50 current_auc = 0.2965340179717587
User 99896 AUC after training: 0.29396662387676514
User 99896 does not improve AUC. Reverting changes.
Training on augumented user 38777 29/50 current_auc = 0.2965340179717587
User 38777 AUC after training: 0.2952503209242619
User 38777 does not improve AUC. Reverting changes.
Training on augumented user 1889 30/50 current_auc = 0.2965340179717587
User 1889 AUC after training: 0.2952503209242619
User 1889 does not improve AUC. Reverting changes.
Training on augumented user 36669 31/50 current_auc = 0.2965340179717587
User 36669 AUC after training: 0.2952503209242619
User 36669 does not improve AUC. Reverting changes.
Training on augumented user 12569 32/50 current_auc = 0.2965340179717587
User 12569 AUC after training: 0.29268292682926833
User 12569 does not improve AUC. Reverting changes.
Training on augumented user 31522 33/50 current_auc = 0.2965340179717587
User 31522 AUC after training: 0.2965340179717587
User 31522 does not improve AUC. Reverting changes.
Training on augumented user 61139 34/50 current_auc = 0.2965340179717587
User 61139 AUC after training: 0.2952503209242619
User 61139 does not improve AUC. Reverting changes.
Training on augumented user 82231 35/50 current_auc = 0.2965340179717587
User 82231 AUC after training: 0.29396662387676514
User 82231 does not improve AUC. Reverting changes.
Training on augumented user 102678 36/50 current_auc = 0.2965340179717587
User 102678 AUC after training: 0.2952503209242619
User 102678 does not improve AUC. Reverting changes.
Training on augumented user 106087 37/50 current_auc = 0.2965340179717587
User 106087 AUC after training: 0.2952503209242619
User 106087 does not improve AUC. Reverting changes.
Training on augumented user 110881 38/50 current_auc = 0.2965340179717587
User 110881 AUC after training: 0.2965340179717587
User 110881 does not improve AUC. Reverting changes.
Training on augumented user 101153 39/50 current_auc = 0.2965340179717587
User 101153 AUC after training: 0.2965340179717587
User 101153 does not improve AUC. Reverting changes.
Training on augumented user 63247 40/50 current_auc = 0.2965340179717587
User 63247 AUC after training: 0.2939666238767651
User 63247 does not improve AUC. Reverting changes.
Training on augumented user 34307 41/50 current_auc = 0.2965340179717587
User 34307 AUC after training: 0.29268292682926833
User 34307 does not improve AUC. Reverting changes.
Training on augumented user 93935 42/50 current_auc = 0.2965340179717587
User 93935 AUC after training: 0.2952503209242619
User 93935 does not improve AUC. Reverting changes.
Training on augumented user 59510 43/50 current_auc = 0.2965340179717587
User 59510 AUC after training: 0.2952503209242619
User 59510 does not improve AUC. Reverting changes.
Training on augumented user 37314 44/50 current_auc = 0.2965340179717587
User 37314 AUC after training: 0.2965340179717587
User 37314 does not improve AUC. Reverting changes.
Training on augumented user 105521 45/50 current_auc = 0.2965340179717587
User 105521 AUC after training: 0.2952503209242619
User 105521 does not improve AUC. Reverting changes.
Training on augumented user 67165 46/50 current_auc = 0.2965340179717587
User 67165 AUC after training: 0.29268292682926833
User 67165 does not improve AUC. Reverting changes.
Training on augumented user 109804 47/50 current_auc = 0.2965340179717587
User 109804 AUC after training: 0.2952503209242619
User 109804 does not improve AUC. Reverting changes.
Training on augumented user 76149 48/50 current_auc = 0.2965340179717587
User 76149 AUC after training: 0.2965340179717587
User 76149 does not improve AUC. Reverting changes.
Training on augumented user 696 49/50 current_auc = 0.2965340179717587
User 696 AUC after training: 0.2952503209242619
User 696 does not improve AUC. Reverting changes.
[2024-12-02 19:47:33.401041] start test user 19506 238/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:33.941864] start test user 19506 238/568 recall augumented users by random, augumented_users = [124182, 47318, 73270, 50451, 52638, 121747, 60935, 113856, 80580, 123741, 124166, 32902, 125031, 48638, 48348, 34650, 119855, 87406, 16839, 7876, 112282, 19283, 46011, 65139, 96754, 63328, 79362, 50911, 98427, 101688, 34492, 95169, 4751, 63981, 26250, 116177, 133678, 1145, 3689, 8945, 111527, 113926, 119618, 30156, 129946, 121812, 30036, 20779, 126428, 125569]
[2024-12-02 19:47:33.957440] user = 19506 Cloud 238/568
[2024-12-02 19:47:33.982570] user = 19506 Local 238/568
[2024-12-02 19:47:34.026029] user = 19506 Local+ 238/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:37.152651] user = 19506 MPDA- 238/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8571428571428572
Training on augumented user 124182 0/50 current_auc = 0.8571428571428572
User 124182 AUC after training: 0.8452380952380952
User 124182 does not improve AUC. Reverting changes.
Training on augumented user 47318 1/50 current_auc = 0.8571428571428572
User 47318 AUC after training: 0.8571428571428572
User 47318 does not improve AUC. Reverting changes.
Training on augumented user 73270 2/50 current_auc = 0.8571428571428572
User 73270 AUC after training: 0.8476190476190476
User 73270 does not improve AUC. Reverting changes.
Training on augumented user 50451 3/50 current_auc = 0.8571428571428572
User 50451 AUC after training: 0.85
User 50451 does not improve AUC. Reverting changes.
Training on augumented user 52638 4/50 current_auc = 0.8571428571428572
User 52638 AUC after training: 0.8571428571428572
User 52638 does not improve AUC. Reverting changes.
Training on augumented user 121747 5/50 current_auc = 0.8571428571428572
User 121747 AUC after training: 0.8571428571428571
User 121747 does not improve AUC. Reverting changes.
Training on augumented user 60935 6/50 current_auc = 0.8571428571428572
User 60935 AUC after training: 0.8571428571428572
User 60935 does not improve AUC. Reverting changes.
Training on augumented user 113856 7/50 current_auc = 0.8571428571428572
User 113856 AUC after training: 0.8452380952380952
User 113856 does not improve AUC. Reverting changes.
Training on augumented user 80580 8/50 current_auc = 0.8571428571428572
User 80580 AUC after training: 0.8571428571428572
User 80580 does not improve AUC. Reverting changes.
Training on augumented user 123741 9/50 current_auc = 0.8571428571428572
User 123741 AUC after training: 0.8571428571428572
User 123741 does not improve AUC. Reverting changes.
Training on augumented user 124166 10/50 current_auc = 0.8571428571428572
User 124166 AUC after training: 0.8571428571428572
User 124166 does not improve AUC. Reverting changes.
Training on augumented user 32902 11/50 current_auc = 0.8571428571428572
User 32902 AUC after training: 0.8547619047619047
User 32902 does not improve AUC. Reverting changes.
Training on augumented user 125031 12/50 current_auc = 0.8571428571428572
User 125031 AUC after training: 0.8476190476190476
User 125031 does not improve AUC. Reverting changes.
Training on augumented user 48638 13/50 current_auc = 0.8571428571428572
User 48638 AUC after training: 0.8547619047619047
User 48638 does not improve AUC. Reverting changes.
Training on augumented user 48348 14/50 current_auc = 0.8571428571428572
User 48348 AUC after training: 0.8452380952380952
User 48348 does not improve AUC. Reverting changes.
Training on augumented user 34650 15/50 current_auc = 0.8571428571428572
User 34650 AUC after training: 0.8428571428571429
User 34650 does not improve AUC. Reverting changes.
Training on augumented user 119855 16/50 current_auc = 0.8571428571428572
User 119855 AUC after training: 0.8476190476190476
User 119855 does not improve AUC. Reverting changes.
Training on augumented user 87406 17/50 current_auc = 0.8571428571428572
User 87406 AUC after training: 0.8571428571428572
User 87406 does not improve AUC. Reverting changes.
Training on augumented user 16839 18/50 current_auc = 0.8571428571428572
User 16839 AUC after training: 0.8571428571428572
User 16839 does not improve AUC. Reverting changes.
Training on augumented user 7876 19/50 current_auc = 0.8571428571428572
User 7876 AUC after training: 0.8452380952380952
User 7876 does not improve AUC. Reverting changes.
Training on augumented user 112282 20/50 current_auc = 0.8571428571428572
User 112282 AUC after training: 0.8547619047619047
User 112282 does not improve AUC. Reverting changes.
Training on augumented user 19283 21/50 current_auc = 0.8571428571428572
User 19283 AUC after training: 0.8571428571428572
User 19283 does not improve AUC. Reverting changes.
Training on augumented user 46011 22/50 current_auc = 0.8571428571428572
User 46011 AUC after training: 0.8547619047619047
User 46011 does not improve AUC. Reverting changes.
Training on augumented user 65139 23/50 current_auc = 0.8571428571428572
User 65139 AUC after training: 0.8452380952380952
User 65139 does not improve AUC. Reverting changes.
Training on augumented user 96754 24/50 current_auc = 0.8571428571428572
User 96754 AUC after training: 0.8571428571428572
User 96754 does not improve AUC. Reverting changes.
Training on augumented user 63328 25/50 current_auc = 0.8571428571428572
User 63328 AUC after training: 0.8452380952380952
User 63328 does not improve AUC. Reverting changes.
Training on augumented user 79362 26/50 current_auc = 0.8571428571428572
User 79362 AUC after training: 0.8571428571428572
User 79362 does not improve AUC. Reverting changes.
Training on augumented user 50911 27/50 current_auc = 0.8571428571428572
User 50911 AUC after training: 0.8571428571428572
User 50911 does not improve AUC. Reverting changes.
Training on augumented user 98427 28/50 current_auc = 0.8571428571428572
User 98427 AUC after training: 0.8571428571428572
User 98427 does not improve AUC. Reverting changes.
Training on augumented user 101688 29/50 current_auc = 0.8571428571428572
User 101688 AUC after training: 0.8547619047619047
User 101688 does not improve AUC. Reverting changes.
Training on augumented user 34492 30/50 current_auc = 0.8571428571428572
User 34492 AUC after training: 0.8571428571428572
User 34492 does not improve AUC. Reverting changes.
Training on augumented user 95169 31/50 current_auc = 0.8571428571428572
User 95169 AUC after training: 0.8571428571428572
User 95169 does not improve AUC. Reverting changes.
Training on augumented user 4751 32/50 current_auc = 0.8571428571428572
User 4751 AUC after training: 0.8547619047619047
User 4751 does not improve AUC. Reverting changes.
Training on augumented user 63981 33/50 current_auc = 0.8571428571428572
User 63981 AUC after training: 0.8547619047619047
User 63981 does not improve AUC. Reverting changes.
Training on augumented user 26250 34/50 current_auc = 0.8571428571428572
User 26250 AUC after training: 0.8476190476190476
User 26250 does not improve AUC. Reverting changes.
Training on augumented user 116177 35/50 current_auc = 0.8571428571428572
User 116177 AUC after training: 0.8476190476190476
User 116177 does not improve AUC. Reverting changes.
Training on augumented user 133678 36/50 current_auc = 0.8571428571428572
User 133678 AUC after training: 0.8547619047619047
User 133678 does not improve AUC. Reverting changes.
Training on augumented user 1145 37/50 current_auc = 0.8571428571428572
User 1145 AUC after training: 0.8571428571428572
User 1145 does not improve AUC. Reverting changes.
Training on augumented user 3689 38/50 current_auc = 0.8571428571428572
User 3689 AUC after training: 0.8452380952380952
User 3689 does not improve AUC. Reverting changes.
Training on augumented user 8945 39/50 current_auc = 0.8571428571428572
User 8945 AUC after training: 0.8547619047619047
User 8945 does not improve AUC. Reverting changes.
Training on augumented user 111527 40/50 current_auc = 0.8571428571428572
User 111527 AUC after training: 0.8452380952380952
User 111527 does not improve AUC. Reverting changes.
Training on augumented user 113926 41/50 current_auc = 0.8571428571428572
User 113926 AUC after training: 0.8452380952380952
User 113926 does not improve AUC. Reverting changes.
Training on augumented user 119618 42/50 current_auc = 0.8571428571428572
User 119618 AUC after training: 0.8571428571428572
User 119618 does not improve AUC. Reverting changes.
Training on augumented user 30156 43/50 current_auc = 0.8571428571428572
User 30156 AUC after training: 0.8571428571428572
User 30156 does not improve AUC. Reverting changes.
Training on augumented user 129946 44/50 current_auc = 0.8571428571428572
User 129946 AUC after training: 0.8571428571428572
User 129946 does not improve AUC. Reverting changes.
Training on augumented user 121812 45/50 current_auc = 0.8571428571428572
User 121812 AUC after training: 0.8571428571428572
User 121812 does not improve AUC. Reverting changes.
Training on augumented user 30036 46/50 current_auc = 0.8571428571428572
User 30036 AUC after training: 0.8571428571428572
User 30036 does not improve AUC. Reverting changes.
Training on augumented user 20779 47/50 current_auc = 0.8571428571428572
User 20779 AUC after training: 0.8476190476190476
User 20779 does not improve AUC. Reverting changes.
Training on augumented user 126428 48/50 current_auc = 0.8571428571428572
User 126428 AUC after training: 0.8571428571428572
User 126428 does not improve AUC. Reverting changes.
Training on augumented user 125569 49/50 current_auc = 0.8571428571428572
User 125569 AUC after training: 0.8571428571428572
User 125569 does not improve AUC. Reverting changes.
[2024-12-02 19:48:07.409911] start test user 19522 239/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:07.818355] start test user 19522 239/568 recall augumented users by random, augumented_users = [137982, 7716, 65132, 111490, 30449, 105945, 105869, 44289, 119223, 58764, 55917, 75102, 12997, 43126, 13448, 101237, 92118, 79467, 109055, 1232, 53490, 78379, 67043, 57291, 66321, 104823, 133069, 135796, 133180, 39376, 51065, 5012, 108861, 16448, 38771, 52701, 79202, 74608, 10141, 42829, 82444, 63523, 131191, 42891, 18291, 18895, 95127, 9520, 110207, 85977]
[2024-12-02 19:48:07.835399] user = 19522 Cloud 239/568
[2024-12-02 19:48:07.852889] user = 19522 Local 239/568
[2024-12-02 19:48:07.975951] user = 19522 Local+ 239/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:09.685440] user = 19522 MPDA- 239/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6046875
Training on augumented user 137982 0/50 current_auc = 0.6046875
User 137982 AUC after training: 0.6044744318181818
User 137982 does not improve AUC. Reverting changes.
Training on augumented user 7716 1/50 current_auc = 0.6046875
User 7716 AUC after training: 0.6039772727272726
User 7716 does not improve AUC. Reverting changes.
Training on augumented user 65132 2/50 current_auc = 0.6046875
User 65132 AUC after training: 0.6046875
User 65132 does not improve AUC. Reverting changes.
Training on augumented user 111490 3/50 current_auc = 0.6046875
User 111490 AUC after training: 0.6044744318181818
User 111490 does not improve AUC. Reverting changes.
Training on augumented user 30449 4/50 current_auc = 0.6046875
User 30449 AUC after training: 0.6042613636363636
User 30449 does not improve AUC. Reverting changes.
Training on augumented user 105945 5/50 current_auc = 0.6046875
User 105945 AUC after training: 0.6029829545454546
User 105945 does not improve AUC. Reverting changes.
Training on augumented user 105869 6/50 current_auc = 0.6046875
User 105869 AUC after training: 0.604190340909091
User 105869 does not improve AUC. Reverting changes.
Training on augumented user 44289 7/50 current_auc = 0.6046875
User 44289 AUC after training: 0.6045454545454546
User 44289 does not improve AUC. Reverting changes.
Training on augumented user 119223 8/50 current_auc = 0.6046875
User 119223 AUC after training: 0.604190340909091
User 119223 does not improve AUC. Reverting changes.
Training on augumented user 58764 9/50 current_auc = 0.6046875
User 58764 AUC after training: 0.6049005681818183
User 58764 improves AUC. Keeping the model.
Training on augumented user 55917 10/50 current_auc = 0.6049005681818183
User 55917 AUC after training: 0.604190340909091
User 55917 does not improve AUC. Reverting changes.
Training on augumented user 75102 11/50 current_auc = 0.6049005681818183
User 75102 AUC after training: 0.6036221590909092
User 75102 does not improve AUC. Reverting changes.
Training on augumented user 12997 12/50 current_auc = 0.6049005681818183
User 12997 AUC after training: 0.6043323863636364
User 12997 does not improve AUC. Reverting changes.
Training on augumented user 43126 13/50 current_auc = 0.6049005681818183
User 43126 AUC after training: 0.6044744318181818
User 43126 does not improve AUC. Reverting changes.
Training on augumented user 13448 14/50 current_auc = 0.6049005681818183
User 13448 AUC after training: 0.6045454545454546
User 13448 does not improve AUC. Reverting changes.
Training on augumented user 101237 15/50 current_auc = 0.6049005681818183
User 101237 AUC after training: 0.6050426136363637
User 101237 improves AUC. Keeping the model.
Training on augumented user 92118 16/50 current_auc = 0.6050426136363637
User 92118 AUC after training: 0.6051846590909091
User 92118 improves AUC. Keeping the model.
Training on augumented user 79467 17/50 current_auc = 0.6051846590909091
User 79467 AUC after training: 0.6050426136363637
User 79467 does not improve AUC. Reverting changes.
Training on augumented user 109055 18/50 current_auc = 0.6051846590909091
User 109055 AUC after training: 0.6049005681818183
User 109055 does not improve AUC. Reverting changes.
Training on augumented user 1232 19/50 current_auc = 0.6051846590909091
User 1232 AUC after training: 0.60390625
User 1232 does not improve AUC. Reverting changes.
Training on augumented user 53490 20/50 current_auc = 0.6051846590909091
User 53490 AUC after training: 0.6047585227272727
User 53490 does not improve AUC. Reverting changes.
Training on augumented user 78379 21/50 current_auc = 0.6051846590909091
User 78379 AUC after training: 0.6046875
User 78379 does not improve AUC. Reverting changes.
Training on augumented user 67043 22/50 current_auc = 0.6051846590909091
User 67043 AUC after training: 0.6049005681818183
User 67043 does not improve AUC. Reverting changes.
Training on augumented user 57291 23/50 current_auc = 0.6051846590909091
User 57291 AUC after training: 0.605184659090909
User 57291 does not improve AUC. Reverting changes.
Training on augumented user 66321 24/50 current_auc = 0.6051846590909091
User 66321 AUC after training: 0.6050426136363636
User 66321 does not improve AUC. Reverting changes.
Training on augumented user 104823 25/50 current_auc = 0.6051846590909091
User 104823 AUC after training: 0.6047585227272728
User 104823 does not improve AUC. Reverting changes.
Training on augumented user 133069 26/50 current_auc = 0.6051846590909091
User 133069 AUC after training: 0.6046875
User 133069 does not improve AUC. Reverting changes.
Training on augumented user 135796 27/50 current_auc = 0.6051846590909091
User 135796 AUC after training: 0.6053977272727273
User 135796 improves AUC. Keeping the model.
Training on augumented user 133180 28/50 current_auc = 0.6053977272727273
User 133180 AUC after training: 0.6060369318181819
User 133180 improves AUC. Keeping the model.
Training on augumented user 39376 29/50 current_auc = 0.6060369318181819
User 39376 AUC after training: 0.6058948863636364
User 39376 does not improve AUC. Reverting changes.
Training on augumented user 51065 30/50 current_auc = 0.6060369318181819
User 51065 AUC after training: 0.6064630681818182
User 51065 improves AUC. Keeping the model.
Training on augumented user 5012 31/50 current_auc = 0.6064630681818182
User 5012 AUC after training: 0.6068892045454546
User 5012 improves AUC. Keeping the model.
Training on augumented user 108861 32/50 current_auc = 0.6068892045454546
User 108861 AUC after training: 0.6066761363636364
User 108861 does not improve AUC. Reverting changes.
Training on augumented user 16448 33/50 current_auc = 0.6068892045454546
User 16448 AUC after training: 0.6049005681818181
User 16448 does not improve AUC. Reverting changes.
Training on augumented user 38771 34/50 current_auc = 0.6068892045454546
User 38771 AUC after training: 0.6063920454545455
User 38771 does not improve AUC. Reverting changes.
Training on augumented user 52701 35/50 current_auc = 0.6068892045454546
User 52701 AUC after training: 0.6068181818181819
User 52701 does not improve AUC. Reverting changes.
Training on augumented user 79202 36/50 current_auc = 0.6068892045454546
User 79202 AUC after training: 0.6071022727272728
User 79202 improves AUC. Keeping the model.
Training on augumented user 74608 37/50 current_auc = 0.6071022727272728
User 74608 AUC after training: 0.6059659090909091
User 74608 does not improve AUC. Reverting changes.
Training on augumented user 10141 38/50 current_auc = 0.6071022727272728
User 10141 AUC after training: 0.6065340909090909
User 10141 does not improve AUC. Reverting changes.
Training on augumented user 42829 39/50 current_auc = 0.6071022727272728
User 42829 AUC after training: 0.6060369318181819
User 42829 does not improve AUC. Reverting changes.
Training on augumented user 82444 40/50 current_auc = 0.6071022727272728
User 82444 AUC after training: 0.6064630681818182
User 82444 does not improve AUC. Reverting changes.
Training on augumented user 63523 41/50 current_auc = 0.6071022727272728
User 63523 AUC after training: 0.6069602272727274
User 63523 does not improve AUC. Reverting changes.
Training on augumented user 131191 42/50 current_auc = 0.6071022727272728
User 131191 AUC after training: 0.6059659090909091
User 131191 does not improve AUC. Reverting changes.
Training on augumented user 42891 43/50 current_auc = 0.6071022727272728
User 42891 AUC after training: 0.6049715909090909
User 42891 does not improve AUC. Reverting changes.
Training on augumented user 18291 44/50 current_auc = 0.6071022727272728
User 18291 AUC after training: 0.6072443181818182
User 18291 improves AUC. Keeping the model.
Training on augumented user 18895 45/50 current_auc = 0.6072443181818182
User 18895 AUC after training: 0.60625
User 18895 does not improve AUC. Reverting changes.
Training on augumented user 95127 46/50 current_auc = 0.6072443181818182
User 95127 AUC after training: 0.6071022727272728
User 95127 does not improve AUC. Reverting changes.
Training on augumented user 9520 47/50 current_auc = 0.6072443181818182
User 9520 AUC after training: 0.6065340909090909
User 9520 does not improve AUC. Reverting changes.
Training on augumented user 110207 48/50 current_auc = 0.6072443181818182
User 110207 AUC after training: 0.6069602272727272
User 110207 does not improve AUC. Reverting changes.
Training on augumented user 85977 49/50 current_auc = 0.6072443181818182
User 85977 AUC after training: 0.6066051136363636
User 85977 does not improve AUC. Reverting changes.
[2024-12-02 19:48:38.037155] start test user 19560 240/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:38.878110] start test user 19560 240/568 recall augumented users by random, augumented_users = [85267, 67541, 86595, 10002, 28106, 14756, 120623, 113665, 118551, 12355, 46835, 36633, 9165, 96702, 81833, 81502, 128808, 107219, 61731, 17997, 136774, 48699, 107407, 57811, 43827, 117336, 91002, 52966, 137041, 66232, 88556, 36216, 107602, 84002, 41257, 62563, 133516, 89930, 56706, 9362, 18588, 21635, 18475, 85914, 29710, 90614, 75631, 20398, 25752, 88825]
[2024-12-02 19:48:38.894876] user = 19560 Cloud 240/568
[2024-12-02 19:48:38.945947] user = 19560 Local 240/568
[2024-12-02 19:48:39.090628] user = 19560 Local+ 240/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:41.607264] user = 19560 MPDA- 240/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5371082621082621
Training on augumented user 85267 0/50 current_auc = 0.5371082621082621
User 85267 AUC after training: 0.5371438746438746
User 85267 improves AUC. Keeping the model.
Training on augumented user 67541 1/50 current_auc = 0.5371438746438746
User 67541 AUC after training: 0.5371794871794872
User 67541 improves AUC. Keeping the model.
Training on augumented user 86595 2/50 current_auc = 0.5371794871794872
User 86595 AUC after training: 0.5371082621082621
User 86595 does not improve AUC. Reverting changes.
Training on augumented user 10002 3/50 current_auc = 0.5371794871794872
User 10002 AUC after training: 0.5370726495726496
User 10002 does not improve AUC. Reverting changes.
Training on augumented user 28106 4/50 current_auc = 0.5371794871794872
User 28106 AUC after training: 0.5374109686609687
User 28106 improves AUC. Keeping the model.
Training on augumented user 14756 5/50 current_auc = 0.5374109686609687
User 14756 AUC after training: 0.5373219373219373
User 14756 does not improve AUC. Reverting changes.
Training on augumented user 120623 6/50 current_auc = 0.5374109686609687
User 120623 AUC after training: 0.5371972934472934
User 120623 does not improve AUC. Reverting changes.
Training on augumented user 113665 7/50 current_auc = 0.5374109686609687
User 113665 AUC after training: 0.5370548433048433
User 113665 does not improve AUC. Reverting changes.
Training on augumented user 118551 8/50 current_auc = 0.5374109686609687
User 118551 AUC after training: 0.5375
User 118551 improves AUC. Keeping the model.
Training on augumented user 12355 9/50 current_auc = 0.5375
User 12355 AUC after training: 0.5378917378917379
User 12355 improves AUC. Keeping the model.
Training on augumented user 46835 10/50 current_auc = 0.5378917378917379
User 46835 AUC after training: 0.5375178062678063
User 46835 does not improve AUC. Reverting changes.
Training on augumented user 36633 11/50 current_auc = 0.5378917378917379
User 36633 AUC after training: 0.5375534188034188
User 36633 does not improve AUC. Reverting changes.
Training on augumented user 9165 12/50 current_auc = 0.5378917378917379
User 9165 AUC after training: 0.5381410256410256
User 9165 improves AUC. Keeping the model.
Training on augumented user 96702 13/50 current_auc = 0.5381410256410256
User 96702 AUC after training: 0.5375
User 96702 does not improve AUC. Reverting changes.
Training on augumented user 81833 14/50 current_auc = 0.5381410256410256
User 81833 AUC after training: 0.5375890313390312
User 81833 does not improve AUC. Reverting changes.
Training on augumented user 81502 15/50 current_auc = 0.5381410256410256
User 81502 AUC after training: 0.5376068376068377
User 81502 does not improve AUC. Reverting changes.
Training on augumented user 128808 16/50 current_auc = 0.5381410256410256
User 128808 AUC after training: 0.5377492877492878
User 128808 does not improve AUC. Reverting changes.
Training on augumented user 107219 17/50 current_auc = 0.5381410256410256
User 107219 AUC after training: 0.5387820512820513
User 107219 improves AUC. Keeping the model.
Training on augumented user 61731 18/50 current_auc = 0.5387820512820513
User 61731 AUC after training: 0.5386752136752138
User 61731 does not improve AUC. Reverting changes.
Training on augumented user 17997 19/50 current_auc = 0.5387820512820513
User 17997 AUC after training: 0.5388888888888889
User 17997 improves AUC. Keeping the model.
Training on augumented user 136774 20/50 current_auc = 0.5388888888888889
User 136774 AUC after training: 0.538497150997151
User 136774 does not improve AUC. Reverting changes.
Training on augumented user 48699 21/50 current_auc = 0.5388888888888889
User 48699 AUC after training: 0.5388888888888889
User 48699 does not improve AUC. Reverting changes.
Training on augumented user 107407 22/50 current_auc = 0.5388888888888889
User 107407 AUC after training: 0.5386039886039886
User 107407 does not improve AUC. Reverting changes.
Training on augumented user 57811 23/50 current_auc = 0.5388888888888889
User 57811 AUC after training: 0.5393518518518519
User 57811 improves AUC. Keeping the model.
Training on augumented user 43827 24/50 current_auc = 0.5393518518518519
User 43827 AUC after training: 0.5387108262108262
User 43827 does not improve AUC. Reverting changes.
Training on augumented user 117336 25/50 current_auc = 0.5393518518518519
User 117336 AUC after training: 0.5389957264957266
User 117336 does not improve AUC. Reverting changes.
Training on augumented user 91002 26/50 current_auc = 0.5393518518518519
User 91002 AUC after training: 0.5394230769230769
User 91002 improves AUC. Keeping the model.
Training on augumented user 52966 27/50 current_auc = 0.5394230769230769
User 52966 AUC after training: 0.5393518518518519
User 52966 does not improve AUC. Reverting changes.
Training on augumented user 137041 28/50 current_auc = 0.5394230769230769
User 137041 AUC after training: 0.5394408831908832
User 137041 improves AUC. Keeping the model.
Training on augumented user 66232 29/50 current_auc = 0.5394408831908832
User 66232 AUC after training: 0.5393162393162393
User 66232 does not improve AUC. Reverting changes.
Training on augumented user 88556 30/50 current_auc = 0.5394408831908832
User 88556 AUC after training: 0.5391381766381766
User 88556 does not improve AUC. Reverting changes.
Training on augumented user 36216 31/50 current_auc = 0.5394408831908832
User 36216 AUC after training: 0.5392272079772079
User 36216 does not improve AUC. Reverting changes.
Training on augumented user 107602 32/50 current_auc = 0.5394408831908832
User 107602 AUC after training: 0.5392094017094018
User 107602 does not improve AUC. Reverting changes.
Training on augumented user 84002 33/50 current_auc = 0.5394408831908832
User 84002 AUC after training: 0.5391915954415955
User 84002 does not improve AUC. Reverting changes.
Training on augumented user 41257 34/50 current_auc = 0.5394408831908832
User 41257 AUC after training: 0.5391203703703704
User 41257 does not improve AUC. Reverting changes.
Training on augumented user 62563 35/50 current_auc = 0.5394408831908832
User 62563 AUC after training: 0.5395655270655271
User 62563 improves AUC. Keeping the model.
Training on augumented user 133516 36/50 current_auc = 0.5395655270655271
User 133516 AUC after training: 0.5391203703703703
User 133516 does not improve AUC. Reverting changes.
Training on augumented user 89930 37/50 current_auc = 0.5395655270655271
User 89930 AUC after training: 0.5393162393162393
User 89930 does not improve AUC. Reverting changes.
Training on augumented user 56706 38/50 current_auc = 0.5395655270655271
User 56706 AUC after training: 0.5387108262108262
User 56706 does not improve AUC. Reverting changes.
Training on augumented user 9362 39/50 current_auc = 0.5395655270655271
User 9362 AUC after training: 0.5385149572649572
User 9362 does not improve AUC. Reverting changes.
Training on augumented user 18588 40/50 current_auc = 0.5395655270655271
User 18588 AUC after training: 0.5395299145299145
User 18588 does not improve AUC. Reverting changes.
Training on augumented user 21635 41/50 current_auc = 0.5395655270655271
User 21635 AUC after training: 0.5391025641025641
User 21635 does not improve AUC. Reverting changes.
Training on augumented user 18475 42/50 current_auc = 0.5395655270655271
User 18475 AUC after training: 0.539227207977208
User 18475 does not improve AUC. Reverting changes.
Training on augumented user 85914 43/50 current_auc = 0.5395655270655271
User 85914 AUC after training: 0.5394943019943019
User 85914 does not improve AUC. Reverting changes.
Training on augumented user 29710 44/50 current_auc = 0.5395655270655271
User 29710 AUC after training: 0.5392450142450143
User 29710 does not improve AUC. Reverting changes.
Training on augumented user 90614 45/50 current_auc = 0.5395655270655271
User 90614 AUC after training: 0.5393518518518519
User 90614 does not improve AUC. Reverting changes.
Training on augumented user 75631 46/50 current_auc = 0.5395655270655271
User 75631 AUC after training: 0.5394052706552707
User 75631 does not improve AUC. Reverting changes.
Training on augumented user 20398 47/50 current_auc = 0.5395655270655271
User 20398 AUC after training: 0.5390669515669516
User 20398 does not improve AUC. Reverting changes.
Training on augumented user 25752 48/50 current_auc = 0.5395655270655271
User 25752 AUC after training: 0.5391381766381766
User 25752 does not improve AUC. Reverting changes.
Training on augumented user 88825 49/50 current_auc = 0.5395655270655271
User 88825 AUC after training: 0.5392806267806268
User 88825 does not improve AUC. Reverting changes.
[2024-12-02 19:49:09.594105] start test user 19573 241/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:10.140530] start test user 19573 241/568 recall augumented users by random, augumented_users = [91760, 12619, 119198, 129923, 64250, 97010, 70203, 110139, 52907, 56669, 54273, 52242, 125762, 22919, 86899, 98833, 74969, 28736, 71485, 23687, 67238, 27273, 26345, 92378, 66145, 11879, 100035, 91092, 50822, 137492, 105431, 38892, 102774, 61394, 46837, 62615, 49120, 95128, 67937, 132963, 92460, 120827, 81299, 52807, 106629, 24810, 97682, 50861, 22813, 27056]
[2024-12-02 19:49:10.157318] user = 19573 Cloud 241/568
[2024-12-02 19:49:10.167853] user = 19573 Local 241/568
[2024-12-02 19:49:10.367057] user = 19573 Local+ 241/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:12.658367] user = 19573 MPDA- 241/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5806451612903225
Training on augumented user 91760 0/50 current_auc = 0.5806451612903225
User 91760 AUC after training: 0.5806451612903225
User 91760 does not improve AUC. Reverting changes.
Training on augumented user 12619 1/50 current_auc = 0.5806451612903225
User 12619 AUC after training: 0.5806451612903225
User 12619 does not improve AUC. Reverting changes.
Training on augumented user 119198 2/50 current_auc = 0.5806451612903225
User 119198 AUC after training: 0.5806451612903225
User 119198 does not improve AUC. Reverting changes.
Training on augumented user 129923 3/50 current_auc = 0.5806451612903225
User 129923 AUC after training: 0.5806451612903225
User 129923 does not improve AUC. Reverting changes.
Training on augumented user 64250 4/50 current_auc = 0.5806451612903225
User 64250 AUC after training: 0.5806451612903225
User 64250 does not improve AUC. Reverting changes.
Training on augumented user 97010 5/50 current_auc = 0.5806451612903225
User 97010 AUC after training: 0.5741935483870968
User 97010 does not improve AUC. Reverting changes.
Training on augumented user 70203 6/50 current_auc = 0.5806451612903225
User 70203 AUC after training: 0.5806451612903225
User 70203 does not improve AUC. Reverting changes.
Training on augumented user 110139 7/50 current_auc = 0.5806451612903225
User 110139 AUC after training: 0.5741935483870968
User 110139 does not improve AUC. Reverting changes.
Training on augumented user 52907 8/50 current_auc = 0.5806451612903225
User 52907 AUC after training: 0.5806451612903225
User 52907 does not improve AUC. Reverting changes.
Training on augumented user 56669 9/50 current_auc = 0.5806451612903225
User 56669 AUC after training: 0.5806451612903225
User 56669 does not improve AUC. Reverting changes.
Training on augumented user 54273 10/50 current_auc = 0.5806451612903225
User 54273 AUC after training: 0.5806451612903225
User 54273 does not improve AUC. Reverting changes.
Training on augumented user 52242 11/50 current_auc = 0.5806451612903225
User 52242 AUC after training: 0.5806451612903225
User 52242 does not improve AUC. Reverting changes.
Training on augumented user 125762 12/50 current_auc = 0.5806451612903225
User 125762 AUC after training: 0.5806451612903225
User 125762 does not improve AUC. Reverting changes.
Training on augumented user 22919 13/50 current_auc = 0.5806451612903225
User 22919 AUC after training: 0.5806451612903225
User 22919 does not improve AUC. Reverting changes.
Training on augumented user 86899 14/50 current_auc = 0.5806451612903225
User 86899 AUC after training: 0.567741935483871
User 86899 does not improve AUC. Reverting changes.
Training on augumented user 98833 15/50 current_auc = 0.5806451612903225
User 98833 AUC after training: 0.5806451612903225
User 98833 does not improve AUC. Reverting changes.
Training on augumented user 74969 16/50 current_auc = 0.5806451612903225
User 74969 AUC after training: 0.5806451612903225
User 74969 does not improve AUC. Reverting changes.
Training on augumented user 28736 17/50 current_auc = 0.5806451612903225
User 28736 AUC after training: 0.5806451612903225
User 28736 does not improve AUC. Reverting changes.
Training on augumented user 71485 18/50 current_auc = 0.5806451612903225
User 71485 AUC after training: 0.5806451612903225
User 71485 does not improve AUC. Reverting changes.
Training on augumented user 23687 19/50 current_auc = 0.5806451612903225
User 23687 AUC after training: 0.5806451612903225
User 23687 does not improve AUC. Reverting changes.
Training on augumented user 67238 20/50 current_auc = 0.5806451612903225
User 67238 AUC after training: 0.5806451612903225
User 67238 does not improve AUC. Reverting changes.
Training on augumented user 27273 21/50 current_auc = 0.5806451612903225
User 27273 AUC after training: 0.5806451612903225
User 27273 does not improve AUC. Reverting changes.
Training on augumented user 26345 22/50 current_auc = 0.5806451612903225
User 26345 AUC after training: 0.5806451612903225
User 26345 does not improve AUC. Reverting changes.
Training on augumented user 92378 23/50 current_auc = 0.5806451612903225
User 92378 AUC after training: 0.5806451612903225
User 92378 does not improve AUC. Reverting changes.
Training on augumented user 66145 24/50 current_auc = 0.5806451612903225
User 66145 AUC after training: 0.5806451612903225
User 66145 does not improve AUC. Reverting changes.
Training on augumented user 11879 25/50 current_auc = 0.5806451612903225
User 11879 AUC after training: 0.5806451612903225
User 11879 does not improve AUC. Reverting changes.
Training on augumented user 100035 26/50 current_auc = 0.5806451612903225
User 100035 AUC after training: 0.5806451612903225
User 100035 does not improve AUC. Reverting changes.
Training on augumented user 91092 27/50 current_auc = 0.5806451612903225
User 91092 AUC after training: 0.5806451612903225
User 91092 does not improve AUC. Reverting changes.
Training on augumented user 50822 28/50 current_auc = 0.5806451612903225
User 50822 AUC after training: 0.5806451612903225
User 50822 does not improve AUC. Reverting changes.
Training on augumented user 137492 29/50 current_auc = 0.5806451612903225
User 137492 AUC after training: 0.5806451612903225
User 137492 does not improve AUC. Reverting changes.
Training on augumented user 105431 30/50 current_auc = 0.5806451612903225
User 105431 AUC after training: 0.5806451612903225
User 105431 does not improve AUC. Reverting changes.
Training on augumented user 38892 31/50 current_auc = 0.5806451612903225
User 38892 AUC after training: 0.5806451612903225
User 38892 does not improve AUC. Reverting changes.
Training on augumented user 102774 32/50 current_auc = 0.5806451612903225
User 102774 AUC after training: 0.5806451612903225
User 102774 does not improve AUC. Reverting changes.
Training on augumented user 61394 33/50 current_auc = 0.5806451612903225
User 61394 AUC after training: 0.5806451612903225
User 61394 does not improve AUC. Reverting changes.
Training on augumented user 46837 34/50 current_auc = 0.5806451612903225
User 46837 AUC after training: 0.5806451612903225
User 46837 does not improve AUC. Reverting changes.
Training on augumented user 62615 35/50 current_auc = 0.5806451612903225
User 62615 AUC after training: 0.5806451612903225
User 62615 does not improve AUC. Reverting changes.
Training on augumented user 49120 36/50 current_auc = 0.5806451612903225
User 49120 AUC after training: 0.5806451612903225
User 49120 does not improve AUC. Reverting changes.
Training on augumented user 95128 37/50 current_auc = 0.5806451612903225
User 95128 AUC after training: 0.5806451612903225
User 95128 does not improve AUC. Reverting changes.
Training on augumented user 67937 38/50 current_auc = 0.5806451612903225
User 67937 AUC after training: 0.5806451612903225
User 67937 does not improve AUC. Reverting changes.
Training on augumented user 132963 39/50 current_auc = 0.5806451612903225
User 132963 AUC after training: 0.5806451612903225
User 132963 does not improve AUC. Reverting changes.
Training on augumented user 92460 40/50 current_auc = 0.5806451612903225
User 92460 AUC after training: 0.5806451612903225
User 92460 does not improve AUC. Reverting changes.
Training on augumented user 120827 41/50 current_auc = 0.5806451612903225
User 120827 AUC after training: 0.5806451612903225
User 120827 does not improve AUC. Reverting changes.
Training on augumented user 81299 42/50 current_auc = 0.5806451612903225
User 81299 AUC after training: 0.5806451612903225
User 81299 does not improve AUC. Reverting changes.
Training on augumented user 52807 43/50 current_auc = 0.5806451612903225
User 52807 AUC after training: 0.5806451612903225
User 52807 does not improve AUC. Reverting changes.
Training on augumented user 106629 44/50 current_auc = 0.5806451612903225
User 106629 AUC after training: 0.5806451612903225
User 106629 does not improve AUC. Reverting changes.
Training on augumented user 24810 45/50 current_auc = 0.5806451612903225
User 24810 AUC after training: 0.5806451612903225
User 24810 does not improve AUC. Reverting changes.
Training on augumented user 97682 46/50 current_auc = 0.5806451612903225
User 97682 AUC after training: 0.5806451612903225
User 97682 does not improve AUC. Reverting changes.
Training on augumented user 50861 47/50 current_auc = 0.5806451612903225
User 50861 AUC after training: 0.5806451612903225
User 50861 does not improve AUC. Reverting changes.
Training on augumented user 22813 48/50 current_auc = 0.5806451612903225
User 22813 AUC after training: 0.5806451612903225
User 22813 does not improve AUC. Reverting changes.
Training on augumented user 27056 49/50 current_auc = 0.5806451612903225
User 27056 AUC after training: 0.5806451612903225
User 27056 does not improve AUC. Reverting changes.
[2024-12-02 19:49:45.518299] start test user 19574 242/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:46.235428] start test user 19574 242/568 recall augumented users by random, augumented_users = [79906, 114717, 42764, 69952, 12648, 55946, 85944, 42333, 30591, 29919, 134256, 18489, 109881, 29655, 2600, 54245, 68466, 13596, 56228, 135749, 33002, 99023, 121946, 91330, 16203, 48243, 31222, 134046, 95182, 100590, 94944, 84081, 82978, 126651, 59803, 56083, 48008, 67105, 115485, 64106, 84478, 102610, 64563, 1608, 113748, 73138, 24313, 31877, 89829, 89537]
[2024-12-02 19:49:46.258277] user = 19574 Cloud 242/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:49:46.271114] user = 19574 Local 242/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:49:46.435772] user = 19574 Local+ 242/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:49:48.773940] user = 19574 MPDA- 242/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 79906 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79906 AUC after training: 0.5
User 79906 does not improve AUC. Reverting changes.
Training on augumented user 114717 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114717 AUC after training: 0.5
User 114717 does not improve AUC. Reverting changes.
Training on augumented user 42764 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42764 AUC after training: 0.5
User 42764 does not improve AUC. Reverting changes.
Training on augumented user 69952 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69952 AUC after training: 0.5
User 69952 does not improve AUC. Reverting changes.
Training on augumented user 12648 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12648 AUC after training: 0.5
User 12648 does not improve AUC. Reverting changes.
Training on augumented user 55946 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55946 AUC after training: 0.5
User 55946 does not improve AUC. Reverting changes.
Training on augumented user 85944 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85944 AUC after training: 0.5
User 85944 does not improve AUC. Reverting changes.
Training on augumented user 42333 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42333 AUC after training: 0.5
User 42333 does not improve AUC. Reverting changes.
Training on augumented user 30591 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30591 AUC after training: 0.5
User 30591 does not improve AUC. Reverting changes.
Training on augumented user 29919 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29919 AUC after training: 0.5
User 29919 does not improve AUC. Reverting changes.
Training on augumented user 134256 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134256 AUC after training: 0.5
User 134256 does not improve AUC. Reverting changes.
Training on augumented user 18489 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18489 AUC after training: 0.5
User 18489 does not improve AUC. Reverting changes.
Training on augumented user 109881 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109881 AUC after training: 0.5
User 109881 does not improve AUC. Reverting changes.
Training on augumented user 29655 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29655 AUC after training: 0.5
User 29655 does not improve AUC. Reverting changes.
Training on augumented user 2600 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2600 AUC after training: 0.5
User 2600 does not improve AUC. Reverting changes.
Training on augumented user 54245 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54245 AUC after training: 0.5
User 54245 does not improve AUC. Reverting changes.
Training on augumented user 68466 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68466 AUC after training: 0.5
User 68466 does not improve AUC. Reverting changes.
Training on augumented user 13596 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13596 AUC after training: 0.5
User 13596 does not improve AUC. Reverting changes.
Training on augumented user 56228 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56228 AUC after training: 0.5
User 56228 does not improve AUC. Reverting changes.
Training on augumented user 135749 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135749 AUC after training: 0.5
User 135749 does not improve AUC. Reverting changes.
Training on augumented user 33002 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33002 AUC after training: 0.5
User 33002 does not improve AUC. Reverting changes.
Training on augumented user 99023 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99023 AUC after training: 0.5
User 99023 does not improve AUC. Reverting changes.
Training on augumented user 121946 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121946 AUC after training: 0.5
User 121946 does not improve AUC. Reverting changes.
Training on augumented user 91330 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91330 AUC after training: 0.5
User 91330 does not improve AUC. Reverting changes.
Training on augumented user 16203 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16203 AUC after training: 0.5
User 16203 does not improve AUC. Reverting changes.
Training on augumented user 48243 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48243 AUC after training: 0.5
User 48243 does not improve AUC. Reverting changes.
Training on augumented user 31222 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31222 AUC after training: 0.5
User 31222 does not improve AUC. Reverting changes.
Training on augumented user 134046 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134046 AUC after training: 0.5
User 134046 does not improve AUC. Reverting changes.
Training on augumented user 95182 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95182 AUC after training: 0.5
User 95182 does not improve AUC. Reverting changes.
Training on augumented user 100590 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100590 AUC after training: 0.5
User 100590 does not improve AUC. Reverting changes.
Training on augumented user 94944 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94944 AUC after training: 0.5
User 94944 does not improve AUC. Reverting changes.
Training on augumented user 84081 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84081 AUC after training: 0.5
User 84081 does not improve AUC. Reverting changes.
Training on augumented user 82978 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82978 AUC after training: 0.5
User 82978 does not improve AUC. Reverting changes.
Training on augumented user 126651 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126651 AUC after training: 0.5
User 126651 does not improve AUC. Reverting changes.
Training on augumented user 59803 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59803 AUC after training: 0.5
User 59803 does not improve AUC. Reverting changes.
Training on augumented user 56083 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56083 AUC after training: 0.5
User 56083 does not improve AUC. Reverting changes.
Training on augumented user 48008 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48008 AUC after training: 0.5
User 48008 does not improve AUC. Reverting changes.
Training on augumented user 67105 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67105 AUC after training: 0.5
User 67105 does not improve AUC. Reverting changes.
Training on augumented user 115485 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115485 AUC after training: 0.5
User 115485 does not improve AUC. Reverting changes.
Training on augumented user 64106 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64106 AUC after training: 0.5
User 64106 does not improve AUC. Reverting changes.
Training on augumented user 84478 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84478 AUC after training: 0.5
User 84478 does not improve AUC. Reverting changes.
Training on augumented user 102610 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102610 AUC after training: 0.5
User 102610 does not improve AUC. Reverting changes.
Training on augumented user 64563 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64563 AUC after training: 0.5
User 64563 does not improve AUC. Reverting changes.
Training on augumented user 1608 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1608 AUC after training: 0.5
User 1608 does not improve AUC. Reverting changes.
Training on augumented user 113748 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113748 AUC after training: 0.5
User 113748 does not improve AUC. Reverting changes.
Training on augumented user 73138 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73138 AUC after training: 0.5
User 73138 does not improve AUC. Reverting changes.
Training on augumented user 24313 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24313 AUC after training: 0.5
User 24313 does not improve AUC. Reverting changes.
Training on augumented user 31877 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31877 AUC after training: 0.5
User 31877 does not improve AUC. Reverting changes.
Training on augumented user 89829 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89829 AUC after training: 0.5
User 89829 does not improve AUC. Reverting changes.
Training on augumented user 89537 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89537 AUC after training: 0.5
User 89537 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:50:16.421677] start test user 19575 243/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:16.857263] start test user 19575 243/568 recall augumented users by random, augumented_users = [56402, 81518, 29316, 28822, 45115, 137730, 48982, 58745, 86771, 1934, 134661, 103536, 46342, 103522, 53005, 132991, 62915, 52689, 136633, 14143, 46621, 29597, 124486, 118380, 60581, 104501, 106128, 45202, 95430, 16230, 135496, 95867, 52218, 75553, 23845, 9372, 126692, 81191, 70203, 11257, 113640, 22520, 86423, 43788, 19793, 98825, 21502, 67929, 134726, 126699]
[2024-12-02 19:50:16.872733] user = 19575 Cloud 243/568
[2024-12-02 19:50:16.883081] user = 19575 Local 243/568
[2024-12-02 19:50:16.924955] user = 19575 Local+ 243/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:18.521973] user = 19575 MPDA- 243/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7
Training on augumented user 56402 0/50 current_auc = 0.7
User 56402 AUC after training: 0.6976190476190476
User 56402 does not improve AUC. Reverting changes.
Training on augumented user 81518 1/50 current_auc = 0.7
User 81518 AUC after training: 0.7
User 81518 does not improve AUC. Reverting changes.
Training on augumented user 29316 2/50 current_auc = 0.7
User 29316 AUC after training: 0.7
User 29316 does not improve AUC. Reverting changes.
Training on augumented user 28822 3/50 current_auc = 0.7
User 28822 AUC after training: 0.7
User 28822 does not improve AUC. Reverting changes.
Training on augumented user 45115 4/50 current_auc = 0.7
User 45115 AUC after training: 0.7
User 45115 does not improve AUC. Reverting changes.
Training on augumented user 137730 5/50 current_auc = 0.7
User 137730 AUC after training: 0.7
User 137730 does not improve AUC. Reverting changes.
Training on augumented user 48982 6/50 current_auc = 0.7
User 48982 AUC after training: 0.6952380952380952
User 48982 does not improve AUC. Reverting changes.
Training on augumented user 58745 7/50 current_auc = 0.7
User 58745 AUC after training: 0.7
User 58745 does not improve AUC. Reverting changes.
Training on augumented user 86771 8/50 current_auc = 0.7
User 86771 AUC after training: 0.6976190476190476
User 86771 does not improve AUC. Reverting changes.
Training on augumented user 1934 9/50 current_auc = 0.7
User 1934 AUC after training: 0.7
User 1934 does not improve AUC. Reverting changes.
Training on augumented user 134661 10/50 current_auc = 0.7
User 134661 AUC after training: 0.7
User 134661 does not improve AUC. Reverting changes.
Training on augumented user 103536 11/50 current_auc = 0.7
User 103536 AUC after training: 0.7
User 103536 does not improve AUC. Reverting changes.
Training on augumented user 46342 12/50 current_auc = 0.7
User 46342 AUC after training: 0.7
User 46342 does not improve AUC. Reverting changes.
Training on augumented user 103522 13/50 current_auc = 0.7
User 103522 AUC after training: 0.7
User 103522 does not improve AUC. Reverting changes.
Training on augumented user 53005 14/50 current_auc = 0.7
User 53005 AUC after training: 0.7
User 53005 does not improve AUC. Reverting changes.
Training on augumented user 132991 15/50 current_auc = 0.7
User 132991 AUC after training: 0.6976190476190476
User 132991 does not improve AUC. Reverting changes.
Training on augumented user 62915 16/50 current_auc = 0.7
User 62915 AUC after training: 0.7
User 62915 does not improve AUC. Reverting changes.
Training on augumented user 52689 17/50 current_auc = 0.7
User 52689 AUC after training: 0.7
User 52689 does not improve AUC. Reverting changes.
Training on augumented user 136633 18/50 current_auc = 0.7
User 136633 AUC after training: 0.7
User 136633 does not improve AUC. Reverting changes.
Training on augumented user 14143 19/50 current_auc = 0.7
User 14143 AUC after training: 0.7
User 14143 does not improve AUC. Reverting changes.
Training on augumented user 46621 20/50 current_auc = 0.7
User 46621 AUC after training: 0.6976190476190476
User 46621 does not improve AUC. Reverting changes.
Training on augumented user 29597 21/50 current_auc = 0.7
User 29597 AUC after training: 0.7
User 29597 does not improve AUC. Reverting changes.
Training on augumented user 124486 22/50 current_auc = 0.7
User 124486 AUC after training: 0.6976190476190476
User 124486 does not improve AUC. Reverting changes.
Training on augumented user 118380 23/50 current_auc = 0.7
User 118380 AUC after training: 0.7
User 118380 does not improve AUC. Reverting changes.
Training on augumented user 60581 24/50 current_auc = 0.7
User 60581 AUC after training: 0.6976190476190476
User 60581 does not improve AUC. Reverting changes.
Training on augumented user 104501 25/50 current_auc = 0.7
User 104501 AUC after training: 0.7
User 104501 does not improve AUC. Reverting changes.
Training on augumented user 106128 26/50 current_auc = 0.7
User 106128 AUC after training: 0.7
User 106128 does not improve AUC. Reverting changes.
Training on augumented user 45202 27/50 current_auc = 0.7
User 45202 AUC after training: 0.7
User 45202 does not improve AUC. Reverting changes.
Training on augumented user 95430 28/50 current_auc = 0.7
User 95430 AUC after training: 0.7
User 95430 does not improve AUC. Reverting changes.
Training on augumented user 16230 29/50 current_auc = 0.7
User 16230 AUC after training: 0.7
User 16230 does not improve AUC. Reverting changes.
Training on augumented user 135496 30/50 current_auc = 0.7
User 135496 AUC after training: 0.6976190476190476
User 135496 does not improve AUC. Reverting changes.
Training on augumented user 95867 31/50 current_auc = 0.7
User 95867 AUC after training: 0.7
User 95867 does not improve AUC. Reverting changes.
Training on augumented user 52218 32/50 current_auc = 0.7
User 52218 AUC after training: 0.6976190476190476
User 52218 does not improve AUC. Reverting changes.
Training on augumented user 75553 33/50 current_auc = 0.7
User 75553 AUC after training: 0.7
User 75553 does not improve AUC. Reverting changes.
Training on augumented user 23845 34/50 current_auc = 0.7
User 23845 AUC after training: 0.7
User 23845 does not improve AUC. Reverting changes.
Training on augumented user 9372 35/50 current_auc = 0.7
User 9372 AUC after training: 0.7
User 9372 does not improve AUC. Reverting changes.
Training on augumented user 126692 36/50 current_auc = 0.7
User 126692 AUC after training: 0.6976190476190476
User 126692 does not improve AUC. Reverting changes.
Training on augumented user 81191 37/50 current_auc = 0.7
User 81191 AUC after training: 0.7
User 81191 does not improve AUC. Reverting changes.
Training on augumented user 70203 38/50 current_auc = 0.7
User 70203 AUC after training: 0.7
User 70203 does not improve AUC. Reverting changes.
Training on augumented user 11257 39/50 current_auc = 0.7
User 11257 AUC after training: 0.6976190476190476
User 11257 does not improve AUC. Reverting changes.
Training on augumented user 113640 40/50 current_auc = 0.7
User 113640 AUC after training: 0.6976190476190476
User 113640 does not improve AUC. Reverting changes.
Training on augumented user 22520 41/50 current_auc = 0.7
User 22520 AUC after training: 0.7
User 22520 does not improve AUC. Reverting changes.
Training on augumented user 86423 42/50 current_auc = 0.7
User 86423 AUC after training: 0.7
User 86423 does not improve AUC. Reverting changes.
Training on augumented user 43788 43/50 current_auc = 0.7
User 43788 AUC after training: 0.6976190476190476
User 43788 does not improve AUC. Reverting changes.
Training on augumented user 19793 44/50 current_auc = 0.7
User 19793 AUC after training: 0.7
User 19793 does not improve AUC. Reverting changes.
Training on augumented user 98825 45/50 current_auc = 0.7
User 98825 AUC after training: 0.7
User 98825 does not improve AUC. Reverting changes.
Training on augumented user 21502 46/50 current_auc = 0.7
User 21502 AUC after training: 0.6976190476190476
User 21502 does not improve AUC. Reverting changes.
Training on augumented user 67929 47/50 current_auc = 0.7
User 67929 AUC after training: 0.7
User 67929 does not improve AUC. Reverting changes.
Training on augumented user 134726 48/50 current_auc = 0.7
User 134726 AUC after training: 0.7
User 134726 does not improve AUC. Reverting changes.
Training on augumented user 126699 49/50 current_auc = 0.7
User 126699 AUC after training: 0.7
User 126699 does not improve AUC. Reverting changes.
[2024-12-02 19:50:48.905755] start test user 19635 244/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:49.736188] start test user 19635 244/568 recall augumented users by random, augumented_users = [42450, 120838, 81026, 105711, 111466, 135767, 64690, 54516, 76961, 33071, 105135, 122014, 89934, 15923, 92929, 132523, 8469, 98254, 15658, 96651, 29574, 129310, 106471, 109591, 12617, 43775, 79022, 12234, 14930, 38788, 87749, 67874, 96038, 30728, 19233, 96330, 135687, 71012, 48769, 77002, 77147, 50259, 132601, 93220, 43368, 33129, 85498, 14994, 69501, 74659]
[2024-12-02 19:50:49.773995] user = 19635 Cloud 244/568
[2024-12-02 19:50:49.792835] user = 19635 Local 244/568
[2024-12-02 19:50:49.853902] user = 19635 Local+ 244/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:52.190545] user = 19635 MPDA- 244/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7039473684210527
Training on augumented user 42450 0/50 current_auc = 0.7039473684210527
User 42450 AUC after training: 0.6973684210526316
User 42450 does not improve AUC. Reverting changes.
Training on augumented user 120838 1/50 current_auc = 0.7039473684210527
User 120838 AUC after training: 0.7039473684210527
User 120838 does not improve AUC. Reverting changes.
Training on augumented user 81026 2/50 current_auc = 0.7039473684210527
User 81026 AUC after training: 0.7105263157894737
User 81026 improves AUC. Keeping the model.
Training on augumented user 105711 3/50 current_auc = 0.7105263157894737
User 105711 AUC after training: 0.7105263157894737
User 105711 does not improve AUC. Reverting changes.
Training on augumented user 111466 4/50 current_auc = 0.7105263157894737
User 111466 AUC after training: 0.7105263157894737
User 111466 does not improve AUC. Reverting changes.
Training on augumented user 135767 5/50 current_auc = 0.7105263157894737
User 135767 AUC after training: 0.7105263157894737
User 135767 does not improve AUC. Reverting changes.
Training on augumented user 64690 6/50 current_auc = 0.7105263157894737
User 64690 AUC after training: 0.7039473684210527
User 64690 does not improve AUC. Reverting changes.
Training on augumented user 54516 7/50 current_auc = 0.7105263157894737
User 54516 AUC after training: 0.7138157894736843
User 54516 improves AUC. Keeping the model.
Training on augumented user 76961 8/50 current_auc = 0.7138157894736843
User 76961 AUC after training: 0.7039473684210527
User 76961 does not improve AUC. Reverting changes.
Training on augumented user 33071 9/50 current_auc = 0.7138157894736843
User 33071 AUC after training: 0.7138157894736843
User 33071 does not improve AUC. Reverting changes.
Training on augumented user 105135 10/50 current_auc = 0.7138157894736843
User 105135 AUC after training: 0.7138157894736843
User 105135 does not improve AUC. Reverting changes.
Training on augumented user 122014 11/50 current_auc = 0.7138157894736843
User 122014 AUC after training: 0.7138157894736843
User 122014 does not improve AUC. Reverting changes.
Training on augumented user 89934 12/50 current_auc = 0.7138157894736843
User 89934 AUC after training: 0.7138157894736843
User 89934 does not improve AUC. Reverting changes.
Training on augumented user 15923 13/50 current_auc = 0.7138157894736843
User 15923 AUC after training: 0.7138157894736843
User 15923 does not improve AUC. Reverting changes.
Training on augumented user 92929 14/50 current_auc = 0.7138157894736843
User 92929 AUC after training: 0.7105263157894737
User 92929 does not improve AUC. Reverting changes.
Training on augumented user 132523 15/50 current_auc = 0.7138157894736843
User 132523 AUC after training: 0.7105263157894737
User 132523 does not improve AUC. Reverting changes.
Training on augumented user 8469 16/50 current_auc = 0.7138157894736843
User 8469 AUC after training: 0.7138157894736843
User 8469 does not improve AUC. Reverting changes.
Training on augumented user 98254 17/50 current_auc = 0.7138157894736843
User 98254 AUC after training: 0.7105263157894737
User 98254 does not improve AUC. Reverting changes.
Training on augumented user 15658 18/50 current_auc = 0.7138157894736843
User 15658 AUC after training: 0.7105263157894737
User 15658 does not improve AUC. Reverting changes.
Training on augumented user 96651 19/50 current_auc = 0.7138157894736843
User 96651 AUC after training: 0.7105263157894737
User 96651 does not improve AUC. Reverting changes.
Training on augumented user 29574 20/50 current_auc = 0.7138157894736843
User 29574 AUC after training: 0.7138157894736843
User 29574 does not improve AUC. Reverting changes.
Training on augumented user 129310 21/50 current_auc = 0.7138157894736843
User 129310 AUC after training: 0.7105263157894737
User 129310 does not improve AUC. Reverting changes.
Training on augumented user 106471 22/50 current_auc = 0.7138157894736843
User 106471 AUC after training: 0.7138157894736843
User 106471 does not improve AUC. Reverting changes.
Training on augumented user 109591 23/50 current_auc = 0.7138157894736843
User 109591 AUC after training: 0.7039473684210527
User 109591 does not improve AUC. Reverting changes.
Training on augumented user 12617 24/50 current_auc = 0.7138157894736843
User 12617 AUC after training: 0.7138157894736843
User 12617 does not improve AUC. Reverting changes.
Training on augumented user 43775 25/50 current_auc = 0.7138157894736843
User 43775 AUC after training: 0.7138157894736843
User 43775 does not improve AUC. Reverting changes.
Training on augumented user 79022 26/50 current_auc = 0.7138157894736843
User 79022 AUC after training: 0.7105263157894737
User 79022 does not improve AUC. Reverting changes.
Training on augumented user 12234 27/50 current_auc = 0.7138157894736843
User 12234 AUC after training: 0.7105263157894737
User 12234 does not improve AUC. Reverting changes.
Training on augumented user 14930 28/50 current_auc = 0.7138157894736843
User 14930 AUC after training: 0.7105263157894737
User 14930 does not improve AUC. Reverting changes.
Training on augumented user 38788 29/50 current_auc = 0.7138157894736843
User 38788 AUC after training: 0.7105263157894737
User 38788 does not improve AUC. Reverting changes.
Training on augumented user 87749 30/50 current_auc = 0.7138157894736843
User 87749 AUC after training: 0.7138157894736843
User 87749 does not improve AUC. Reverting changes.
Training on augumented user 67874 31/50 current_auc = 0.7138157894736843
User 67874 AUC after training: 0.7072368421052632
User 67874 does not improve AUC. Reverting changes.
Training on augumented user 96038 32/50 current_auc = 0.7138157894736843
User 96038 AUC after training: 0.7138157894736843
User 96038 does not improve AUC. Reverting changes.
Training on augumented user 30728 33/50 current_auc = 0.7138157894736843
User 30728 AUC after training: 0.7138157894736843
User 30728 does not improve AUC. Reverting changes.
Training on augumented user 19233 34/50 current_auc = 0.7138157894736843
User 19233 AUC after training: 0.7138157894736843
User 19233 does not improve AUC. Reverting changes.
Training on augumented user 96330 35/50 current_auc = 0.7138157894736843
User 96330 AUC after training: 0.7138157894736843
User 96330 does not improve AUC. Reverting changes.
Training on augumented user 135687 36/50 current_auc = 0.7138157894736843
User 135687 AUC after training: 0.7105263157894737
User 135687 does not improve AUC. Reverting changes.
Training on augumented user 71012 37/50 current_auc = 0.7138157894736843
User 71012 AUC after training: 0.7105263157894737
User 71012 does not improve AUC. Reverting changes.
Training on augumented user 48769 38/50 current_auc = 0.7138157894736843
User 48769 AUC after training: 0.7138157894736843
User 48769 does not improve AUC. Reverting changes.
Training on augumented user 77002 39/50 current_auc = 0.7138157894736843
User 77002 AUC after training: 0.7203947368421053
User 77002 improves AUC. Keeping the model.
Training on augumented user 77147 40/50 current_auc = 0.7203947368421053
User 77147 AUC after training: 0.7171052631578948
User 77147 does not improve AUC. Reverting changes.
Training on augumented user 50259 41/50 current_auc = 0.7203947368421053
User 50259 AUC after training: 0.7171052631578948
User 50259 does not improve AUC. Reverting changes.
Training on augumented user 132601 42/50 current_auc = 0.7203947368421053
User 132601 AUC after training: 0.7138157894736843
User 132601 does not improve AUC. Reverting changes.
Training on augumented user 93220 43/50 current_auc = 0.7203947368421053
User 93220 AUC after training: 0.7138157894736843
User 93220 does not improve AUC. Reverting changes.
Training on augumented user 43368 44/50 current_auc = 0.7203947368421053
User 43368 AUC after training: 0.7138157894736843
User 43368 does not improve AUC. Reverting changes.
Training on augumented user 33129 45/50 current_auc = 0.7203947368421053
User 33129 AUC after training: 0.7138157894736843
User 33129 does not improve AUC. Reverting changes.
Training on augumented user 85498 46/50 current_auc = 0.7203947368421053
User 85498 AUC after training: 0.7203947368421053
User 85498 does not improve AUC. Reverting changes.
Training on augumented user 14994 47/50 current_auc = 0.7203947368421053
User 14994 AUC after training: 0.7302631578947368
User 14994 improves AUC. Keeping the model.
Training on augumented user 69501 48/50 current_auc = 0.7302631578947368
User 69501 AUC after training: 0.7302631578947368
User 69501 does not improve AUC. Reverting changes.
Training on augumented user 74659 49/50 current_auc = 0.7302631578947368
User 74659 AUC after training: 0.7302631578947368
User 74659 does not improve AUC. Reverting changes.
[2024-12-02 19:51:20.473043] start test user 19639 245/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:21.136000] start test user 19639 245/568 recall augumented users by random, augumented_users = [32066, 96027, 69873, 44255, 55815, 103976, 111823, 68306, 74447, 130981, 106759, 86421, 40613, 65790, 47402, 90984, 70379, 74783, 41408, 30602, 22009, 102781, 57303, 86059, 59440, 40982, 84233, 44212, 135362, 60661, 19672, 94339, 79764, 31881, 62708, 14662, 110028, 40803, 19845, 5469, 97166, 91596, 130936, 40698, 2384, 18543, 60469, 19528, 84512, 121682]
[2024-12-02 19:51:21.150788] user = 19639 Cloud 245/568
[2024-12-02 19:51:21.160548] user = 19639 Local 245/568
[2024-12-02 19:51:21.230998] user = 19639 Local+ 245/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:24.208735] user = 19639 MPDA- 245/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4444444444444444
Training on augumented user 32066 0/50 current_auc = 0.4444444444444444
User 32066 AUC after training: 0.4444444444444444
User 32066 does not improve AUC. Reverting changes.
Training on augumented user 96027 1/50 current_auc = 0.4444444444444444
User 96027 AUC after training: 0.4444444444444444
User 96027 does not improve AUC. Reverting changes.
Training on augumented user 69873 2/50 current_auc = 0.4444444444444444
User 69873 AUC after training: 0.4444444444444444
User 69873 does not improve AUC. Reverting changes.
Training on augumented user 44255 3/50 current_auc = 0.4444444444444444
User 44255 AUC after training: 0.4444444444444444
User 44255 does not improve AUC. Reverting changes.
Training on augumented user 55815 4/50 current_auc = 0.4444444444444444
User 55815 AUC after training: 0.4444444444444444
User 55815 does not improve AUC. Reverting changes.
Training on augumented user 103976 5/50 current_auc = 0.4444444444444444
User 103976 AUC after training: 0.4444444444444444
User 103976 does not improve AUC. Reverting changes.
Training on augumented user 111823 6/50 current_auc = 0.4444444444444444
User 111823 AUC after training: 0.4444444444444444
User 111823 does not improve AUC. Reverting changes.
Training on augumented user 68306 7/50 current_auc = 0.4444444444444444
User 68306 AUC after training: 0.4444444444444444
User 68306 does not improve AUC. Reverting changes.
Training on augumented user 74447 8/50 current_auc = 0.4444444444444444
User 74447 AUC after training: 0.4444444444444444
User 74447 does not improve AUC. Reverting changes.
Training on augumented user 130981 9/50 current_auc = 0.4444444444444444
User 130981 AUC after training: 0.4444444444444444
User 130981 does not improve AUC. Reverting changes.
Training on augumented user 106759 10/50 current_auc = 0.4444444444444444
User 106759 AUC after training: 0.4444444444444444
User 106759 does not improve AUC. Reverting changes.
Training on augumented user 86421 11/50 current_auc = 0.4444444444444444
User 86421 AUC after training: 0.4444444444444444
User 86421 does not improve AUC. Reverting changes.
Training on augumented user 40613 12/50 current_auc = 0.4444444444444444
User 40613 AUC after training: 0.4444444444444444
User 40613 does not improve AUC. Reverting changes.
Training on augumented user 65790 13/50 current_auc = 0.4444444444444444
User 65790 AUC after training: 0.4444444444444444
User 65790 does not improve AUC. Reverting changes.
Training on augumented user 47402 14/50 current_auc = 0.4444444444444444
User 47402 AUC after training: 0.4444444444444444
User 47402 does not improve AUC. Reverting changes.
Training on augumented user 90984 15/50 current_auc = 0.4444444444444444
User 90984 AUC after training: 0.4444444444444444
User 90984 does not improve AUC. Reverting changes.
Training on augumented user 70379 16/50 current_auc = 0.4444444444444444
User 70379 AUC after training: 0.5555555555555556
User 70379 improves AUC. Keeping the model.
Training on augumented user 74783 17/50 current_auc = 0.5555555555555556
User 74783 AUC after training: 0.5555555555555556
User 74783 does not improve AUC. Reverting changes.
Training on augumented user 41408 18/50 current_auc = 0.5555555555555556
User 41408 AUC after training: 0.5555555555555556
User 41408 does not improve AUC. Reverting changes.
Training on augumented user 30602 19/50 current_auc = 0.5555555555555556
User 30602 AUC after training: 0.5555555555555556
User 30602 does not improve AUC. Reverting changes.
Training on augumented user 22009 20/50 current_auc = 0.5555555555555556
User 22009 AUC after training: 0.5555555555555556
User 22009 does not improve AUC. Reverting changes.
Training on augumented user 102781 21/50 current_auc = 0.5555555555555556
User 102781 AUC after training: 0.5555555555555556
User 102781 does not improve AUC. Reverting changes.
Training on augumented user 57303 22/50 current_auc = 0.5555555555555556
User 57303 AUC after training: 0.5555555555555556
User 57303 does not improve AUC. Reverting changes.
Training on augumented user 86059 23/50 current_auc = 0.5555555555555556
User 86059 AUC after training: 0.5555555555555556
User 86059 does not improve AUC. Reverting changes.
Training on augumented user 59440 24/50 current_auc = 0.5555555555555556
User 59440 AUC after training: 0.5555555555555556
User 59440 does not improve AUC. Reverting changes.
Training on augumented user 40982 25/50 current_auc = 0.5555555555555556
User 40982 AUC after training: 0.5555555555555556
User 40982 does not improve AUC. Reverting changes.
Training on augumented user 84233 26/50 current_auc = 0.5555555555555556
User 84233 AUC after training: 0.5555555555555556
User 84233 does not improve AUC. Reverting changes.
Training on augumented user 44212 27/50 current_auc = 0.5555555555555556
User 44212 AUC after training: 0.5555555555555556
User 44212 does not improve AUC. Reverting changes.
Training on augumented user 135362 28/50 current_auc = 0.5555555555555556
User 135362 AUC after training: 0.5555555555555556
User 135362 does not improve AUC. Reverting changes.
Training on augumented user 60661 29/50 current_auc = 0.5555555555555556
User 60661 AUC after training: 0.4444444444444444
User 60661 does not improve AUC. Reverting changes.
Training on augumented user 19672 30/50 current_auc = 0.5555555555555556
User 19672 AUC after training: 0.5555555555555556
User 19672 does not improve AUC. Reverting changes.
Training on augumented user 94339 31/50 current_auc = 0.5555555555555556
User 94339 AUC after training: 0.4444444444444444
User 94339 does not improve AUC. Reverting changes.
Training on augumented user 79764 32/50 current_auc = 0.5555555555555556
User 79764 AUC after training: 0.5555555555555556
User 79764 does not improve AUC. Reverting changes.
Training on augumented user 31881 33/50 current_auc = 0.5555555555555556
User 31881 AUC after training: 0.5555555555555556
User 31881 does not improve AUC. Reverting changes.
Training on augumented user 62708 34/50 current_auc = 0.5555555555555556
User 62708 AUC after training: 0.5555555555555556
User 62708 does not improve AUC. Reverting changes.
Training on augumented user 14662 35/50 current_auc = 0.5555555555555556
User 14662 AUC after training: 0.4444444444444444
User 14662 does not improve AUC. Reverting changes.
Training on augumented user 110028 36/50 current_auc = 0.5555555555555556
User 110028 AUC after training: 0.5555555555555556
User 110028 does not improve AUC. Reverting changes.
Training on augumented user 40803 37/50 current_auc = 0.5555555555555556
User 40803 AUC after training: 0.5555555555555556
User 40803 does not improve AUC. Reverting changes.
Training on augumented user 19845 38/50 current_auc = 0.5555555555555556
User 19845 AUC after training: 0.5555555555555556
User 19845 does not improve AUC. Reverting changes.
Training on augumented user 5469 39/50 current_auc = 0.5555555555555556
User 5469 AUC after training: 0.5555555555555556
User 5469 does not improve AUC. Reverting changes.
Training on augumented user 97166 40/50 current_auc = 0.5555555555555556
User 97166 AUC after training: 0.5555555555555556
User 97166 does not improve AUC. Reverting changes.
Training on augumented user 91596 41/50 current_auc = 0.5555555555555556
User 91596 AUC after training: 0.5555555555555556
User 91596 does not improve AUC. Reverting changes.
Training on augumented user 130936 42/50 current_auc = 0.5555555555555556
User 130936 AUC after training: 0.5555555555555556
User 130936 does not improve AUC. Reverting changes.
Training on augumented user 40698 43/50 current_auc = 0.5555555555555556
User 40698 AUC after training: 0.5555555555555556
User 40698 does not improve AUC. Reverting changes.
Training on augumented user 2384 44/50 current_auc = 0.5555555555555556
User 2384 AUC after training: 0.5555555555555556
User 2384 does not improve AUC. Reverting changes.
Training on augumented user 18543 45/50 current_auc = 0.5555555555555556
User 18543 AUC after training: 0.4444444444444444
User 18543 does not improve AUC. Reverting changes.
Training on augumented user 60469 46/50 current_auc = 0.5555555555555556
User 60469 AUC after training: 0.5555555555555556
User 60469 does not improve AUC. Reverting changes.
Training on augumented user 19528 47/50 current_auc = 0.5555555555555556
User 19528 AUC after training: 0.4444444444444444
User 19528 does not improve AUC. Reverting changes.
Training on augumented user 84512 48/50 current_auc = 0.5555555555555556
User 84512 AUC after training: 0.5555555555555556
User 84512 does not improve AUC. Reverting changes.
Training on augumented user 121682 49/50 current_auc = 0.5555555555555556
User 121682 AUC after training: 0.4444444444444444
User 121682 does not improve AUC. Reverting changes.
[2024-12-02 19:51:55.119643] start test user 19644 246/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:55.544511] start test user 19644 246/568 recall augumented users by random, augumented_users = [5760, 102689, 85604, 76811, 123871, 56445, 92365, 77883, 24966, 79537, 93723, 119145, 101983, 52763, 58537, 43029, 92217, 135906, 31177, 128279, 87106, 100270, 15376, 17816, 31767, 38995, 81083, 41179, 95585, 42284, 23530, 43078, 105974, 89365, 102555, 41001, 94264, 61495, 16045, 35896, 37163, 8243, 27653, 109395, 64640, 111208, 129798, 12152, 51625, 14498]
[2024-12-02 19:51:55.597213] user = 19644 Cloud 246/568
[2024-12-02 19:51:55.647218] user = 19644 Local 246/568
[2024-12-02 19:51:55.727723] user = 19644 Local+ 246/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:57.889258] user = 19644 MPDA- 246/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7589189189189189
Training on augumented user 5760 0/50 current_auc = 0.7589189189189189
User 5760 AUC after training: 0.7596396396396397
User 5760 improves AUC. Keeping the model.
Training on augumented user 102689 1/50 current_auc = 0.7596396396396397
User 102689 AUC after training: 0.7598198198198198
User 102689 improves AUC. Keeping the model.
Training on augumented user 85604 2/50 current_auc = 0.7598198198198198
User 85604 AUC after training: 0.7595495495495496
User 85604 does not improve AUC. Reverting changes.
Training on augumented user 76811 3/50 current_auc = 0.7598198198198198
User 76811 AUC after training: 0.7596396396396397
User 76811 does not improve AUC. Reverting changes.
Training on augumented user 123871 4/50 current_auc = 0.7598198198198198
User 123871 AUC after training: 0.7602702702702703
User 123871 improves AUC. Keeping the model.
Training on augumented user 56445 5/50 current_auc = 0.7602702702702703
User 56445 AUC after training: 0.7598198198198198
User 56445 does not improve AUC. Reverting changes.
Training on augumented user 92365 6/50 current_auc = 0.7602702702702703
User 92365 AUC after training: 0.7602702702702703
User 92365 does not improve AUC. Reverting changes.
Training on augumented user 77883 7/50 current_auc = 0.7602702702702703
User 77883 AUC after training: 0.7604504504504505
User 77883 improves AUC. Keeping the model.
Training on augumented user 24966 8/50 current_auc = 0.7604504504504505
User 24966 AUC after training: 0.7598198198198198
User 24966 does not improve AUC. Reverting changes.
Training on augumented user 79537 9/50 current_auc = 0.7604504504504505
User 79537 AUC after training: 0.7575675675675676
User 79537 does not improve AUC. Reverting changes.
Training on augumented user 93723 10/50 current_auc = 0.7604504504504505
User 93723 AUC after training: 0.7615315315315315
User 93723 improves AUC. Keeping the model.
Training on augumented user 119145 11/50 current_auc = 0.7615315315315315
User 119145 AUC after training: 0.7609009009009009
User 119145 does not improve AUC. Reverting changes.
Training on augumented user 101983 12/50 current_auc = 0.7615315315315315
User 101983 AUC after training: 0.7609009009009009
User 101983 does not improve AUC. Reverting changes.
Training on augumented user 52763 13/50 current_auc = 0.7615315315315315
User 52763 AUC after training: 0.7596396396396397
User 52763 does not improve AUC. Reverting changes.
Training on augumented user 58537 14/50 current_auc = 0.7615315315315315
User 58537 AUC after training: 0.7607207207207207
User 58537 does not improve AUC. Reverting changes.
Training on augumented user 43029 15/50 current_auc = 0.7615315315315315
User 43029 AUC after training: 0.7611711711711712
User 43029 does not improve AUC. Reverting changes.
Training on augumented user 92217 16/50 current_auc = 0.7615315315315315
User 92217 AUC after training: 0.7601801801801803
User 92217 does not improve AUC. Reverting changes.
Training on augumented user 135906 17/50 current_auc = 0.7615315315315315
User 135906 AUC after training: 0.7616216216216216
User 135906 improves AUC. Keeping the model.
Training on augumented user 31177 18/50 current_auc = 0.7616216216216216
User 31177 AUC after training: 0.7614414414414414
User 31177 does not improve AUC. Reverting changes.
Training on augumented user 128279 19/50 current_auc = 0.7616216216216216
User 128279 AUC after training: 0.7612612612612613
User 128279 does not improve AUC. Reverting changes.
Training on augumented user 87106 20/50 current_auc = 0.7616216216216216
User 87106 AUC after training: 0.7609009009009009
User 87106 does not improve AUC. Reverting changes.
Training on augumented user 100270 21/50 current_auc = 0.7616216216216216
User 100270 AUC after training: 0.7605405405405405
User 100270 does not improve AUC. Reverting changes.
Training on augumented user 15376 22/50 current_auc = 0.7616216216216216
User 15376 AUC after training: 0.7609009009009009
User 15376 does not improve AUC. Reverting changes.
Training on augumented user 17816 23/50 current_auc = 0.7616216216216216
User 17816 AUC after training: 0.7612612612612613
User 17816 does not improve AUC. Reverting changes.
Training on augumented user 31767 24/50 current_auc = 0.7616216216216216
User 31767 AUC after training: 0.7612612612612613
User 31767 does not improve AUC. Reverting changes.
Training on augumented user 38995 25/50 current_auc = 0.7616216216216216
User 38995 AUC after training: 0.7616216216216216
User 38995 does not improve AUC. Reverting changes.
Training on augumented user 81083 26/50 current_auc = 0.7616216216216216
User 81083 AUC after training: 0.7596396396396397
User 81083 does not improve AUC. Reverting changes.
Training on augumented user 41179 27/50 current_auc = 0.7616216216216216
User 41179 AUC after training: 0.7618018018018018
User 41179 improves AUC. Keeping the model.
Training on augumented user 95585 28/50 current_auc = 0.7618018018018018
User 95585 AUC after training: 0.763063063063063
User 95585 improves AUC. Keeping the model.
Training on augumented user 42284 29/50 current_auc = 0.763063063063063
User 42284 AUC after training: 0.7605405405405405
User 42284 does not improve AUC. Reverting changes.
Training on augumented user 23530 30/50 current_auc = 0.763063063063063
User 23530 AUC after training: 0.7634234234234234
User 23530 improves AUC. Keeping the model.
Training on augumented user 43078 31/50 current_auc = 0.7634234234234234
User 43078 AUC after training: 0.7628828828828829
User 43078 does not improve AUC. Reverting changes.
Training on augumented user 105974 32/50 current_auc = 0.7634234234234234
User 105974 AUC after training: 0.7632432432432432
User 105974 does not improve AUC. Reverting changes.
Training on augumented user 89365 33/50 current_auc = 0.7634234234234234
User 89365 AUC after training: 0.763063063063063
User 89365 does not improve AUC. Reverting changes.
Training on augumented user 102555 34/50 current_auc = 0.7634234234234234
User 102555 AUC after training: 0.7618018018018018
User 102555 does not improve AUC. Reverting changes.
Training on augumented user 41001 35/50 current_auc = 0.7634234234234234
User 41001 AUC after training: 0.7637837837837838
User 41001 improves AUC. Keeping the model.
Training on augumented user 94264 36/50 current_auc = 0.7637837837837838
User 94264 AUC after training: 0.761981981981982
User 94264 does not improve AUC. Reverting changes.
Training on augumented user 61495 37/50 current_auc = 0.7637837837837838
User 61495 AUC after training: 0.7634234234234234
User 61495 does not improve AUC. Reverting changes.
Training on augumented user 16045 38/50 current_auc = 0.7637837837837838
User 16045 AUC after training: 0.7625225225225225
User 16045 does not improve AUC. Reverting changes.
Training on augumented user 35896 39/50 current_auc = 0.7637837837837838
User 35896 AUC after training: 0.7631531531531531
User 35896 does not improve AUC. Reverting changes.
Training on augumented user 37163 40/50 current_auc = 0.7637837837837838
User 37163 AUC after training: 0.7629729729729731
User 37163 does not improve AUC. Reverting changes.
Training on augumented user 8243 41/50 current_auc = 0.7637837837837838
User 8243 AUC after training: 0.7634234234234234
User 8243 does not improve AUC. Reverting changes.
Training on augumented user 27653 42/50 current_auc = 0.7637837837837838
User 27653 AUC after training: 0.7631531531531532
User 27653 does not improve AUC. Reverting changes.
Training on augumented user 109395 43/50 current_auc = 0.7637837837837838
User 109395 AUC after training: 0.7634234234234234
User 109395 does not improve AUC. Reverting changes.
Training on augumented user 64640 44/50 current_auc = 0.7637837837837838
User 64640 AUC after training: 0.7634234234234234
User 64640 does not improve AUC. Reverting changes.
Training on augumented user 111208 45/50 current_auc = 0.7637837837837838
User 111208 AUC after training: 0.7632432432432432
User 111208 does not improve AUC. Reverting changes.
Training on augumented user 129798 46/50 current_auc = 0.7637837837837838
User 129798 AUC after training: 0.7634234234234234
User 129798 does not improve AUC. Reverting changes.
Training on augumented user 12152 47/50 current_auc = 0.7637837837837838
User 12152 AUC after training: 0.7628828828828829
User 12152 does not improve AUC. Reverting changes.
Training on augumented user 51625 48/50 current_auc = 0.7637837837837838
User 51625 AUC after training: 0.7627927927927929
User 51625 does not improve AUC. Reverting changes.
Training on augumented user 14498 49/50 current_auc = 0.7637837837837838
User 14498 AUC after training: 0.7627927927927929
User 14498 does not improve AUC. Reverting changes.
[2024-12-02 19:52:27.204544] start test user 19650 247/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:27.757603] start test user 19650 247/568 recall augumented users by random, augumented_users = [57610, 132102, 40012, 84236, 2146, 65882, 30310, 92909, 98882, 129668, 9254, 53019, 106285, 27145, 70006, 16234, 1350, 15771, 50918, 126764, 127195, 104581, 52628, 88130, 17484, 42795, 104264, 135744, 132863, 45626, 84600, 47555, 15187, 98243, 20150, 31359, 126339, 127744, 27528, 80025, 15141, 36711, 88684, 52361, 61099, 3644, 105810, 134140, 117337, 51544]
[2024-12-02 19:52:27.774449] user = 19650 Cloud 247/568
[2024-12-02 19:52:27.793722] user = 19650 Local 247/568
[2024-12-02 19:52:27.859282] user = 19650 Local+ 247/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:29.999508] user = 19650 MPDA- 247/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7027972027972028
Training on augumented user 57610 0/50 current_auc = 0.7027972027972028
User 57610 AUC after training: 0.7062937062937064
User 57610 improves AUC. Keeping the model.
Training on augumented user 132102 1/50 current_auc = 0.7062937062937064
User 132102 AUC after training: 0.7062937062937064
User 132102 does not improve AUC. Reverting changes.
Training on augumented user 40012 2/50 current_auc = 0.7062937062937064
User 40012 AUC after training: 0.7027972027972028
User 40012 does not improve AUC. Reverting changes.
Training on augumented user 84236 3/50 current_auc = 0.7062937062937064
User 84236 AUC after training: 0.7062937062937064
User 84236 does not improve AUC. Reverting changes.
Training on augumented user 2146 4/50 current_auc = 0.7062937062937064
User 2146 AUC after training: 0.7062937062937064
User 2146 does not improve AUC. Reverting changes.
Training on augumented user 65882 5/50 current_auc = 0.7062937062937064
User 65882 AUC after training: 0.7097902097902098
User 65882 improves AUC. Keeping the model.
Training on augumented user 30310 6/50 current_auc = 0.7097902097902098
User 30310 AUC after training: 0.7062937062937064
User 30310 does not improve AUC. Reverting changes.
Training on augumented user 92909 7/50 current_auc = 0.7097902097902098
User 92909 AUC after training: 0.7027972027972028
User 92909 does not improve AUC. Reverting changes.
Training on augumented user 98882 8/50 current_auc = 0.7097902097902098
User 98882 AUC after training: 0.7062937062937064
User 98882 does not improve AUC. Reverting changes.
Training on augumented user 129668 9/50 current_auc = 0.7097902097902098
User 129668 AUC after training: 0.7062937062937064
User 129668 does not improve AUC. Reverting changes.
Training on augumented user 9254 10/50 current_auc = 0.7097902097902098
User 9254 AUC after training: 0.7097902097902098
User 9254 does not improve AUC. Reverting changes.
Training on augumented user 53019 11/50 current_auc = 0.7097902097902098
User 53019 AUC after training: 0.7062937062937062
User 53019 does not improve AUC. Reverting changes.
Training on augumented user 106285 12/50 current_auc = 0.7097902097902098
User 106285 AUC after training: 0.7062937062937064
User 106285 does not improve AUC. Reverting changes.
Training on augumented user 27145 13/50 current_auc = 0.7097902097902098
User 27145 AUC after training: 0.7062937062937064
User 27145 does not improve AUC. Reverting changes.
Training on augumented user 70006 14/50 current_auc = 0.7097902097902098
User 70006 AUC after training: 0.7062937062937062
User 70006 does not improve AUC. Reverting changes.
Training on augumented user 16234 15/50 current_auc = 0.7097902097902098
User 16234 AUC after training: 0.7027972027972028
User 16234 does not improve AUC. Reverting changes.
Training on augumented user 1350 16/50 current_auc = 0.7097902097902098
User 1350 AUC after training: 0.7097902097902099
User 1350 improves AUC. Keeping the model.
Training on augumented user 15771 17/50 current_auc = 0.7097902097902099
User 15771 AUC after training: 0.7167832167832168
User 15771 improves AUC. Keeping the model.
Training on augumented user 50918 18/50 current_auc = 0.7167832167832168
User 50918 AUC after training: 0.7097902097902098
User 50918 does not improve AUC. Reverting changes.
Training on augumented user 126764 19/50 current_auc = 0.7167832167832168
User 126764 AUC after training: 0.6993006993006993
User 126764 does not improve AUC. Reverting changes.
Training on augumented user 127195 20/50 current_auc = 0.7167832167832168
User 127195 AUC after training: 0.7132867132867132
User 127195 does not improve AUC. Reverting changes.
Training on augumented user 104581 21/50 current_auc = 0.7167832167832168
User 104581 AUC after training: 0.7062937062937064
User 104581 does not improve AUC. Reverting changes.
Training on augumented user 52628 22/50 current_auc = 0.7167832167832168
User 52628 AUC after training: 0.7167832167832168
User 52628 does not improve AUC. Reverting changes.
Training on augumented user 88130 23/50 current_auc = 0.7167832167832168
User 88130 AUC after training: 0.7132867132867132
User 88130 does not improve AUC. Reverting changes.
Training on augumented user 17484 24/50 current_auc = 0.7167832167832168
User 17484 AUC after training: 0.7132867132867133
User 17484 does not improve AUC. Reverting changes.
Training on augumented user 42795 25/50 current_auc = 0.7167832167832168
User 42795 AUC after training: 0.7132867132867133
User 42795 does not improve AUC. Reverting changes.
Training on augumented user 104264 26/50 current_auc = 0.7167832167832168
User 104264 AUC after training: 0.7097902097902098
User 104264 does not improve AUC. Reverting changes.
Training on augumented user 135744 27/50 current_auc = 0.7167832167832168
User 135744 AUC after training: 0.7097902097902099
User 135744 does not improve AUC. Reverting changes.
Training on augumented user 132863 28/50 current_auc = 0.7167832167832168
User 132863 AUC after training: 0.7167832167832168
User 132863 does not improve AUC. Reverting changes.
Training on augumented user 45626 29/50 current_auc = 0.7167832167832168
User 45626 AUC after training: 0.7097902097902098
User 45626 does not improve AUC. Reverting changes.
Training on augumented user 84600 30/50 current_auc = 0.7167832167832168
User 84600 AUC after training: 0.7027972027972028
User 84600 does not improve AUC. Reverting changes.
Training on augumented user 47555 31/50 current_auc = 0.7167832167832168
User 47555 AUC after training: 0.7097902097902098
User 47555 does not improve AUC. Reverting changes.
Training on augumented user 15187 32/50 current_auc = 0.7167832167832168
User 15187 AUC after training: 0.7097902097902099
User 15187 does not improve AUC. Reverting changes.
Training on augumented user 98243 33/50 current_auc = 0.7167832167832168
User 98243 AUC after training: 0.7097902097902099
User 98243 does not improve AUC. Reverting changes.
Training on augumented user 20150 34/50 current_auc = 0.7167832167832168
User 20150 AUC after training: 0.7097902097902098
User 20150 does not improve AUC. Reverting changes.
Training on augumented user 31359 35/50 current_auc = 0.7167832167832168
User 31359 AUC after training: 0.7062937062937062
User 31359 does not improve AUC. Reverting changes.
Training on augumented user 126339 36/50 current_auc = 0.7167832167832168
User 126339 AUC after training: 0.7097902097902098
User 126339 does not improve AUC. Reverting changes.
Training on augumented user 127744 37/50 current_auc = 0.7167832167832168
User 127744 AUC after training: 0.7062937062937064
User 127744 does not improve AUC. Reverting changes.
Training on augumented user 27528 38/50 current_auc = 0.7167832167832168
User 27528 AUC after training: 0.7062937062937064
User 27528 does not improve AUC. Reverting changes.
Training on augumented user 80025 39/50 current_auc = 0.7167832167832168
User 80025 AUC after training: 0.7132867132867133
User 80025 does not improve AUC. Reverting changes.
Training on augumented user 15141 40/50 current_auc = 0.7167832167832168
User 15141 AUC after training: 0.7062937062937064
User 15141 does not improve AUC. Reverting changes.
Training on augumented user 36711 41/50 current_auc = 0.7167832167832168
User 36711 AUC after training: 0.7167832167832168
User 36711 does not improve AUC. Reverting changes.
Training on augumented user 88684 42/50 current_auc = 0.7167832167832168
User 88684 AUC after training: 0.7132867132867133
User 88684 does not improve AUC. Reverting changes.
Training on augumented user 52361 43/50 current_auc = 0.7167832167832168
User 52361 AUC after training: 0.7132867132867133
User 52361 does not improve AUC. Reverting changes.
Training on augumented user 61099 44/50 current_auc = 0.7167832167832168
User 61099 AUC after training: 0.7062937062937064
User 61099 does not improve AUC. Reverting changes.
Training on augumented user 3644 45/50 current_auc = 0.7167832167832168
User 3644 AUC after training: 0.7167832167832168
User 3644 does not improve AUC. Reverting changes.
Training on augumented user 105810 46/50 current_auc = 0.7167832167832168
User 105810 AUC after training: 0.7167832167832168
User 105810 does not improve AUC. Reverting changes.
Training on augumented user 134140 47/50 current_auc = 0.7167832167832168
User 134140 AUC after training: 0.7062937062937064
User 134140 does not improve AUC. Reverting changes.
Training on augumented user 117337 48/50 current_auc = 0.7167832167832168
User 117337 AUC after training: 0.7202797202797203
User 117337 improves AUC. Keeping the model.
Training on augumented user 51544 49/50 current_auc = 0.7202797202797203
User 51544 AUC after training: 0.7132867132867132
User 51544 does not improve AUC. Reverting changes.
[2024-12-02 19:53:01.202948] start test user 19658 248/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:01.994594] start test user 19658 248/568 recall augumented users by random, augumented_users = [109995, 52742, 79731, 15989, 53474, 18801, 136216, 121901, 56713, 3301, 54136, 68, 49676, 93623, 47451, 76864, 59741, 34661, 113070, 102921, 105336, 41399, 117558, 94674, 92383, 48954, 29982, 17450, 73151, 26228, 33683, 98458, 11073, 35623, 37049, 15613, 40669, 74124, 129862, 89668, 38206, 125652, 98976, 33097, 122647, 17796, 128904, 9351, 113555, 129757]
[2024-12-02 19:53:02.009564] user = 19658 Cloud 248/568
[2024-12-02 19:53:02.020093] user = 19658 Local 248/568
[2024-12-02 19:53:02.068156] user = 19658 Local+ 248/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:04.259035] user = 19658 MPDA- 248/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6242816091954023
Training on augumented user 109995 0/50 current_auc = 0.6242816091954023
User 109995 AUC after training: 0.6257183908045977
User 109995 improves AUC. Keeping the model.
Training on augumented user 52742 1/50 current_auc = 0.6257183908045977
User 52742 AUC after training: 0.6293103448275862
User 52742 improves AUC. Keeping the model.
Training on augumented user 79731 2/50 current_auc = 0.6293103448275862
User 79731 AUC after training: 0.6293103448275862
User 79731 does not improve AUC. Reverting changes.
Training on augumented user 15989 3/50 current_auc = 0.6293103448275862
User 15989 AUC after training: 0.6271551724137931
User 15989 does not improve AUC. Reverting changes.
Training on augumented user 53474 4/50 current_auc = 0.6293103448275862
User 53474 AUC after training: 0.6293103448275862
User 53474 does not improve AUC. Reverting changes.
Training on augumented user 18801 5/50 current_auc = 0.6293103448275862
User 18801 AUC after training: 0.6307471264367815
User 18801 improves AUC. Keeping the model.
Training on augumented user 136216 6/50 current_auc = 0.6307471264367815
User 136216 AUC after training: 0.6307471264367815
User 136216 does not improve AUC. Reverting changes.
Training on augumented user 121901 7/50 current_auc = 0.6307471264367815
User 121901 AUC after training: 0.6307471264367815
User 121901 does not improve AUC. Reverting changes.
Training on augumented user 56713 8/50 current_auc = 0.6307471264367815
User 56713 AUC after training: 0.6293103448275862
User 56713 does not improve AUC. Reverting changes.
Training on augumented user 3301 9/50 current_auc = 0.6307471264367815
User 3301 AUC after training: 0.6307471264367815
User 3301 does not improve AUC. Reverting changes.
Training on augumented user 54136 10/50 current_auc = 0.6307471264367815
User 54136 AUC after training: 0.6307471264367815
User 54136 does not improve AUC. Reverting changes.
Training on augumented user 68 11/50 current_auc = 0.6307471264367815
User 68 AUC after training: 0.6307471264367815
User 68 does not improve AUC. Reverting changes.
Training on augumented user 49676 12/50 current_auc = 0.6307471264367815
User 49676 AUC after training: 0.6206896551724138
User 49676 does not improve AUC. Reverting changes.
Training on augumented user 93623 13/50 current_auc = 0.6307471264367815
User 93623 AUC after training: 0.6307471264367815
User 93623 does not improve AUC. Reverting changes.
Training on augumented user 47451 14/50 current_auc = 0.6307471264367815
User 47451 AUC after training: 0.6321839080459769
User 47451 improves AUC. Keeping the model.
Training on augumented user 76864 15/50 current_auc = 0.6321839080459769
User 76864 AUC after training: 0.632183908045977
User 76864 improves AUC. Keeping the model.
Training on augumented user 59741 16/50 current_auc = 0.632183908045977
User 59741 AUC after training: 0.6336206896551724
User 59741 improves AUC. Keeping the model.
Training on augumented user 34661 17/50 current_auc = 0.6336206896551724
User 34661 AUC after training: 0.632183908045977
User 34661 does not improve AUC. Reverting changes.
Training on augumented user 113070 18/50 current_auc = 0.6336206896551724
User 113070 AUC after training: 0.632183908045977
User 113070 does not improve AUC. Reverting changes.
Training on augumented user 102921 19/50 current_auc = 0.6336206896551724
User 102921 AUC after training: 0.6293103448275862
User 102921 does not improve AUC. Reverting changes.
Training on augumented user 105336 20/50 current_auc = 0.6336206896551724
User 105336 AUC after training: 0.632183908045977
User 105336 does not improve AUC. Reverting changes.
Training on augumented user 41399 21/50 current_auc = 0.6336206896551724
User 41399 AUC after training: 0.6336206896551724
User 41399 does not improve AUC. Reverting changes.
Training on augumented user 117558 22/50 current_auc = 0.6336206896551724
User 117558 AUC after training: 0.632183908045977
User 117558 does not improve AUC. Reverting changes.
Training on augumented user 94674 23/50 current_auc = 0.6336206896551724
User 94674 AUC after training: 0.6350574712643678
User 94674 improves AUC. Keeping the model.
Training on augumented user 92383 24/50 current_auc = 0.6350574712643678
User 92383 AUC after training: 0.6336206896551724
User 92383 does not improve AUC. Reverting changes.
Training on augumented user 48954 25/50 current_auc = 0.6350574712643678
User 48954 AUC after training: 0.6350574712643678
User 48954 does not improve AUC. Reverting changes.
Training on augumented user 29982 26/50 current_auc = 0.6350574712643678
User 29982 AUC after training: 0.6336206896551724
User 29982 does not improve AUC. Reverting changes.
Training on augumented user 17450 27/50 current_auc = 0.6350574712643678
User 17450 AUC after training: 0.6293103448275862
User 17450 does not improve AUC. Reverting changes.
Training on augumented user 73151 28/50 current_auc = 0.6350574712643678
User 73151 AUC after training: 0.6336206896551724
User 73151 does not improve AUC. Reverting changes.
Training on augumented user 26228 29/50 current_auc = 0.6350574712643678
User 26228 AUC after training: 0.6336206896551724
User 26228 does not improve AUC. Reverting changes.
Training on augumented user 33683 30/50 current_auc = 0.6350574712643678
User 33683 AUC after training: 0.6336206896551725
User 33683 does not improve AUC. Reverting changes.
Training on augumented user 98458 31/50 current_auc = 0.6350574712643678
User 98458 AUC after training: 0.6350574712643678
User 98458 does not improve AUC. Reverting changes.
Training on augumented user 11073 32/50 current_auc = 0.6350574712643678
User 11073 AUC after training: 0.6336206896551724
User 11073 does not improve AUC. Reverting changes.
Training on augumented user 35623 33/50 current_auc = 0.6350574712643678
User 35623 AUC after training: 0.6336206896551724
User 35623 does not improve AUC. Reverting changes.
Training on augumented user 37049 34/50 current_auc = 0.6350574712643678
User 37049 AUC after training: 0.6307471264367817
User 37049 does not improve AUC. Reverting changes.
Training on augumented user 15613 35/50 current_auc = 0.6350574712643678
User 15613 AUC after training: 0.6278735632183908
User 15613 does not improve AUC. Reverting changes.
Training on augumented user 40669 36/50 current_auc = 0.6350574712643678
User 40669 AUC after training: 0.6336206896551724
User 40669 does not improve AUC. Reverting changes.
Training on augumented user 74124 37/50 current_auc = 0.6350574712643678
User 74124 AUC after training: 0.6336206896551724
User 74124 does not improve AUC. Reverting changes.
Training on augumented user 129862 38/50 current_auc = 0.6350574712643678
User 129862 AUC after training: 0.6364942528735632
User 129862 improves AUC. Keeping the model.
Training on augumented user 89668 39/50 current_auc = 0.6364942528735632
User 89668 AUC after training: 0.6336206896551724
User 89668 does not improve AUC. Reverting changes.
Training on augumented user 38206 40/50 current_auc = 0.6364942528735632
User 38206 AUC after training: 0.6336206896551724
User 38206 does not improve AUC. Reverting changes.
Training on augumented user 125652 41/50 current_auc = 0.6364942528735632
User 125652 AUC after training: 0.632183908045977
User 125652 does not improve AUC. Reverting changes.
Training on augumented user 98976 42/50 current_auc = 0.6364942528735632
User 98976 AUC after training: 0.6364942528735632
User 98976 does not improve AUC. Reverting changes.
Training on augumented user 33097 43/50 current_auc = 0.6364942528735632
User 33097 AUC after training: 0.6336206896551724
User 33097 does not improve AUC. Reverting changes.
Training on augumented user 122647 44/50 current_auc = 0.6364942528735632
User 122647 AUC after training: 0.6336206896551724
User 122647 does not improve AUC. Reverting changes.
Training on augumented user 17796 45/50 current_auc = 0.6364942528735632
User 17796 AUC after training: 0.6307471264367817
User 17796 does not improve AUC. Reverting changes.
Training on augumented user 128904 46/50 current_auc = 0.6364942528735632
User 128904 AUC after training: 0.632183908045977
User 128904 does not improve AUC. Reverting changes.
Training on augumented user 9351 47/50 current_auc = 0.6364942528735632
User 9351 AUC after training: 0.6350574712643678
User 9351 does not improve AUC. Reverting changes.
Training on augumented user 113555 48/50 current_auc = 0.6364942528735632
User 113555 AUC after training: 0.6350574712643678
User 113555 does not improve AUC. Reverting changes.
Training on augumented user 129757 49/50 current_auc = 0.6364942528735632
User 129757 AUC after training: 0.6336206896551724
User 129757 does not improve AUC. Reverting changes.
[2024-12-02 19:53:35.577249] start test user 19711 249/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:36.004049] start test user 19711 249/568 recall augumented users by random, augumented_users = [138328, 130062, 133957, 25262, 100860, 9941, 74723, 70530, 121910, 105110, 85522, 55376, 114292, 76947, 64217, 46674, 6476, 103554, 13493, 13466, 135737, 42339, 78163, 26073, 62664, 86675, 125107, 58366, 77182, 89859, 51414, 15398, 99143, 130453, 133437, 132059, 120789, 49887, 58362, 27467, 27284, 34619, 26444, 53704, 94879, 85390, 75129, 28861, 23417, 35841]
[2024-12-02 19:53:36.021731] user = 19711 Cloud 249/568
[2024-12-02 19:53:36.081492] user = 19711 Local 249/568
[2024-12-02 19:53:36.286229] user = 19711 Local+ 249/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:38.026127] user = 19711 MPDA- 249/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6047074518772632
Training on augumented user 138328 0/50 current_auc = 0.6047074518772632
User 138328 AUC after training: 0.6046407470935773
User 138328 does not improve AUC. Reverting changes.
Training on augumented user 130062 1/50 current_auc = 0.6047074518772632
User 130062 AUC after training: 0.6046979226224509
User 130062 does not improve AUC. Reverting changes.
Training on augumented user 133957 2/50 current_auc = 0.6047074518772632
User 133957 AUC after training: 0.6047646274061368
User 133957 improves AUC. Keeping the model.
Training on augumented user 25262 3/50 current_auc = 0.6047646274061368
User 25262 AUC after training: 0.6050219172860682
User 25262 improves AUC. Keeping the model.
Training on augumented user 100860 4/50 current_auc = 0.6050219172860682
User 100860 AUC after training: 0.6048789784638842
User 100860 does not improve AUC. Reverting changes.
Training on augumented user 9941 5/50 current_auc = 0.6050219172860682
User 9941 AUC after training: 0.6050219172860682
User 9941 does not improve AUC. Reverting changes.
Training on augumented user 74723 6/50 current_auc = 0.6050219172860682
User 74723 AUC after training: 0.6051076805793786
User 74723 improves AUC. Keeping the model.
Training on augumented user 70530 7/50 current_auc = 0.6051076805793786
User 70530 AUC after training: 0.604878978463884
User 70530 does not improve AUC. Reverting changes.
Training on augumented user 121910 8/50 current_auc = 0.6051076805793786
User 121910 AUC after training: 0.6052506194015628
User 121910 improves AUC. Keeping the model.
Training on augumented user 105110 9/50 current_auc = 0.6052506194015628
User 105110 AUC after training: 0.6049170954831333
User 105110 does not improve AUC. Reverting changes.
Training on augumented user 85522 10/50 current_auc = 0.6052506194015628
User 85522 AUC after training: 0.60494568324757
User 85522 does not improve AUC. Reverting changes.
Training on augumented user 55376 11/50 current_auc = 0.6052506194015628
User 55376 AUC after training: 0.6050743281875358
User 55376 does not improve AUC. Reverting changes.
Training on augumented user 114292 12/50 current_auc = 0.6052506194015628
User 114292 AUC after training: 0.6052506194015628
User 114292 does not improve AUC. Reverting changes.
Training on augumented user 76947 13/50 current_auc = 0.6052506194015628
User 76947 AUC after training: 0.6056889651229274
User 76947 improves AUC. Keeping the model.
Training on augumented user 64217 14/50 current_auc = 0.6056889651229274
User 64217 AUC after training: 0.6059939012769202
User 64217 improves AUC. Keeping the model.
Training on augumented user 46674 15/50 current_auc = 0.6059939012769202
User 46674 AUC after training: 0.6065894797026872
User 46674 improves AUC. Keeping the model.
Training on augumented user 6476 16/50 current_auc = 0.6065894797026872
User 6476 AUC after training: 0.6068324757004002
User 6476 improves AUC. Keeping the model.
Training on augumented user 103554 17/50 current_auc = 0.6068324757004002
User 103554 AUC after training: 0.6068324757004002
User 103554 does not improve AUC. Reverting changes.
Training on augumented user 13493 18/50 current_auc = 0.6068324757004002
User 13493 AUC after training: 0.6066418906041547
User 13493 does not improve AUC. Reverting changes.
Training on augumented user 13466 19/50 current_auc = 0.6068324757004002
User 13466 AUC after training: 0.6054983800266819
User 13466 does not improve AUC. Reverting changes.
Training on augumented user 135737 20/50 current_auc = 0.6068324757004002
User 135737 AUC after training: 0.6066323613493425
User 135737 does not improve AUC. Reverting changes.
Training on augumented user 42339 21/50 current_auc = 0.6068324757004002
User 42339 AUC after training: 0.6068134171907758
User 42339 does not improve AUC. Reverting changes.
Training on augumented user 78163 22/50 current_auc = 0.6068324757004002
User 78163 AUC after training: 0.6069754145225843
User 78163 improves AUC. Keeping the model.
Training on augumented user 26073 23/50 current_auc = 0.6069754145225843
User 26073 AUC after training: 0.6068991804840861
User 26073 does not improve AUC. Reverting changes.
Training on augumented user 62664 24/50 current_auc = 0.6069754145225843
User 62664 AUC after training: 0.6070182961692395
User 62664 improves AUC. Keeping the model.
Training on augumented user 86675 25/50 current_auc = 0.6070182961692395
User 86675 AUC after training: 0.6071326472269869
User 86675 improves AUC. Keeping the model.
Training on augumented user 125107 26/50 current_auc = 0.6071326472269869
User 125107 AUC after training: 0.6073947017343244
User 125107 improves AUC. Keeping the model.
Training on augumented user 58366 27/50 current_auc = 0.6073947017343244
User 58366 AUC after training: 0.6070516485610826
User 58366 does not improve AUC. Reverting changes.
Training on augumented user 77182 28/50 current_auc = 0.6073947017343244
User 77182 AUC after training: 0.6076710501238802
User 77182 improves AUC. Keeping the model.
Training on augumented user 89859 29/50 current_auc = 0.6076710501238802
User 89859 AUC after training: 0.6073994663617305
User 89859 does not improve AUC. Reverting changes.
Training on augumented user 51414 30/50 current_auc = 0.6076710501238802
User 51414 AUC after training: 0.6077186963979417
User 51414 improves AUC. Keeping the model.
Training on augumented user 15398 31/50 current_auc = 0.6077186963979417
User 15398 AUC after training: 0.6076567562416618
User 15398 does not improve AUC. Reverting changes.
Training on augumented user 99143 32/50 current_auc = 0.6077186963979417
User 99143 AUC after training: 0.6078425767105012
User 99143 improves AUC. Keeping the model.
Training on augumented user 130453 33/50 current_auc = 0.6078425767105012
User 130453 AUC after training: 0.6076901086335048
User 130453 does not improve AUC. Reverting changes.
Training on augumented user 133437 34/50 current_auc = 0.6078425767105012
User 133437 AUC after training: 0.6076424623594434
User 133437 does not improve AUC. Reverting changes.
Training on augumented user 132059 35/50 current_auc = 0.6078425767105012
User 132059 AUC after training: 0.6078425767105011
User 132059 does not improve AUC. Reverting changes.
Training on augumented user 120789 36/50 current_auc = 0.6078425767105012
User 120789 AUC after training: 0.6075662283209454
User 120789 does not improve AUC. Reverting changes.
Training on augumented user 49887 37/50 current_auc = 0.6078425767105012
User 49887 AUC after training: 0.6072994091862016
User 49887 does not improve AUC. Reverting changes.
Training on augumented user 58362 38/50 current_auc = 0.6078425767105012
User 58362 AUC after training: 0.60731370306842
User 58362 does not improve AUC. Reverting changes.
Training on augumented user 27467 39/50 current_auc = 0.6078425767105012
User 27467 AUC after training: 0.6079998094149038
User 27467 improves AUC. Keeping the model.
Training on augumented user 27284 40/50 current_auc = 0.6079998094149038
User 27284 AUC after training: 0.6079045168667809
User 27284 does not improve AUC. Reverting changes.
Training on augumented user 34619 41/50 current_auc = 0.6079998094149038
User 34619 AUC after training: 0.6080760434534019
User 34619 improves AUC. Keeping the model.
Training on augumented user 26444 42/50 current_auc = 0.6080760434534019
User 26444 AUC after training: 0.6080141032971222
User 26444 does not improve AUC. Reverting changes.
Training on augumented user 53704 43/50 current_auc = 0.6080760434534019
User 53704 AUC after training: 0.6080331618067467
User 53704 does not improve AUC. Reverting changes.
Training on augumented user 94879 44/50 current_auc = 0.6080760434534019
User 94879 AUC after training: 0.6078235182008767
User 94879 does not improve AUC. Reverting changes.
Training on augumented user 85390 45/50 current_auc = 0.6080760434534019
User 85390 AUC after training: 0.6077139317705356
User 85390 does not improve AUC. Reverting changes.
Training on augumented user 75129 46/50 current_auc = 0.6080760434534019
User 75129 AUC after training: 0.6078473413379075
User 75129 does not improve AUC. Reverting changes.
Training on augumented user 28861 47/50 current_auc = 0.6080760434534019
User 28861 AUC after training: 0.6070040022870211
User 28861 does not improve AUC. Reverting changes.
Training on augumented user 23417 48/50 current_auc = 0.6080760434534019
User 23417 AUC after training: 0.6076043453401944
User 23417 does not improve AUC. Reverting changes.
Training on augumented user 35841 49/50 current_auc = 0.6080760434534019
User 35841 AUC after training: 0.6080474556889651
User 35841 does not improve AUC. Reverting changes.
[2024-12-02 19:54:10.704112] start test user 19722 250/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:11.421393] start test user 19722 250/568 recall augumented users by random, augumented_users = [104771, 86276, 115054, 34998, 136420, 25075, 131523, 98653, 35789, 75856, 34656, 48357, 22790, 104561, 135687, 68371, 87846, 87088, 101200, 2428, 74823, 109092, 115376, 73796, 36313, 16801, 104182, 43912, 23114, 37651, 32935, 99366, 106295, 123050, 81007, 63133, 11132, 72740, 49830, 74961, 75291, 8429, 121207, 101401, 12672, 1993, 61905, 35277, 101980, 85424]
[2024-12-02 19:54:11.440439] user = 19722 Cloud 250/568
[2024-12-02 19:54:11.476488] user = 19722 Local 250/568
[2024-12-02 19:54:11.884434] user = 19722 Local+ 250/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:15.047813] user = 19722 MPDA- 250/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6685232575643534
Training on augumented user 104771 0/50 current_auc = 0.6685232575643534
User 104771 AUC after training: 0.6689748607556827
User 104771 improves AUC. Keeping the model.
Training on augumented user 86276 1/50 current_auc = 0.6689748607556827
User 86276 AUC after training: 0.6683727231672437
User 86276 does not improve AUC. Reverting changes.
Training on augumented user 115054 2/50 current_auc = 0.6689748607556827
User 115054 AUC after training: 0.6686737919614631
User 115054 does not improve AUC. Reverting changes.
Training on augumented user 34998 3/50 current_auc = 0.6689748607556827
User 34998 AUC after training: 0.6688243263585729
User 34998 does not improve AUC. Reverting changes.
Training on augumented user 136420 4/50 current_auc = 0.6689748607556827
User 136420 AUC after training: 0.6701791359325606
User 136420 improves AUC. Keeping the model.
Training on augumented user 25075 5/50 current_auc = 0.6701791359325606
User 25075 AUC after training: 0.6694264639470118
User 25075 does not improve AUC. Reverting changes.
Training on augumented user 131523 6/50 current_auc = 0.6701791359325606
User 131523 AUC after training: 0.6704802047267799
User 131523 improves AUC. Keeping the model.
Training on augumented user 98653 7/50 current_auc = 0.6704802047267799
User 98653 AUC after training: 0.67048020472678
User 98653 improves AUC. Keeping the model.
Training on augumented user 35789 8/50 current_auc = 0.67048020472678
User 35789 AUC after training: 0.6700286015354509
User 35789 does not improve AUC. Reverting changes.
Training on augumented user 75856 9/50 current_auc = 0.67048020472678
User 75856 AUC after training: 0.6698780671383411
User 75856 does not improve AUC. Reverting changes.
Training on augumented user 34656 10/50 current_auc = 0.67048020472678
User 34656 AUC after training: 0.6674695167845852
User 34656 does not improve AUC. Reverting changes.
Training on augumented user 48357 11/50 current_auc = 0.67048020472678
User 48357 AUC after training: 0.6694264639470119
User 48357 does not improve AUC. Reverting changes.
Training on augumented user 22790 12/50 current_auc = 0.67048020472678
User 22790 AUC after training: 0.6695769983441215
User 22790 does not improve AUC. Reverting changes.
Training on augumented user 104561 13/50 current_auc = 0.67048020472678
User 104561 AUC after training: 0.6701791359325606
User 104561 does not improve AUC. Reverting changes.
Training on augumented user 135687 14/50 current_auc = 0.67048020472678
User 135687 AUC after training: 0.6679211199759145
User 135687 does not improve AUC. Reverting changes.
Training on augumented user 68371 15/50 current_auc = 0.67048020472678
User 68371 AUC after training: 0.6692759295499022
User 68371 does not improve AUC. Reverting changes.
Training on augumented user 87846 16/50 current_auc = 0.67048020472678
User 87846 AUC after training: 0.6680716543730243
User 87846 does not improve AUC. Reverting changes.
Training on augumented user 87088 17/50 current_auc = 0.67048020472678
User 87088 AUC after training: 0.6695769983441215
User 87088 does not improve AUC. Reverting changes.
Training on augumented user 101200 18/50 current_auc = 0.67048020472678
User 101200 AUC after training: 0.6691253951527925
User 101200 does not improve AUC. Reverting changes.
Training on augumented user 2428 19/50 current_auc = 0.67048020472678
User 2428 AUC after training: 0.6686737919614631
User 2428 does not improve AUC. Reverting changes.
Training on augumented user 74823 20/50 current_auc = 0.67048020472678
User 74823 AUC after training: 0.6697275327412313
User 74823 does not improve AUC. Reverting changes.
Training on augumented user 109092 21/50 current_auc = 0.67048020472678
User 109092 AUC after training: 0.6695769983441215
User 109092 does not improve AUC. Reverting changes.
Training on augumented user 115376 22/50 current_auc = 0.67048020472678
User 115376 AUC after training: 0.6698780671383411
User 115376 does not improve AUC. Reverting changes.
Training on augumented user 73796 23/50 current_auc = 0.67048020472678
User 73796 AUC after training: 0.6695769983441215
User 73796 does not improve AUC. Reverting changes.
Training on augumented user 36313 24/50 current_auc = 0.67048020472678
User 36313 AUC after training: 0.6677705855788048
User 36313 does not improve AUC. Reverting changes.
Training on augumented user 16801 25/50 current_auc = 0.67048020472678
User 16801 AUC after training: 0.6694264639470119
User 16801 does not improve AUC. Reverting changes.
Training on augumented user 104182 26/50 current_auc = 0.67048020472678
User 104182 AUC after training: 0.6697275327412313
User 104182 does not improve AUC. Reverting changes.
Training on augumented user 43912 27/50 current_auc = 0.67048020472678
User 43912 AUC after training: 0.6695769983441217
User 43912 does not improve AUC. Reverting changes.
Training on augumented user 23114 28/50 current_auc = 0.67048020472678
User 23114 AUC after training: 0.67048020472678
User 23114 does not improve AUC. Reverting changes.
Training on augumented user 37651 29/50 current_auc = 0.67048020472678
User 37651 AUC after training: 0.67048020472678
User 37651 does not improve AUC. Reverting changes.
Training on augumented user 32935 30/50 current_auc = 0.67048020472678
User 32935 AUC after training: 0.6688243263585729
User 32935 does not improve AUC. Reverting changes.
Training on augumented user 99366 31/50 current_auc = 0.67048020472678
User 99366 AUC after training: 0.6701791359325606
User 99366 does not improve AUC. Reverting changes.
Training on augumented user 106295 32/50 current_auc = 0.67048020472678
User 106295 AUC after training: 0.6701791359325606
User 106295 does not improve AUC. Reverting changes.
Training on augumented user 123050 33/50 current_auc = 0.67048020472678
User 123050 AUC after training: 0.6698780671383411
User 123050 does not improve AUC. Reverting changes.
Training on augumented user 81007 34/50 current_auc = 0.67048020472678
User 81007 AUC after training: 0.6689748607556827
User 81007 does not improve AUC. Reverting changes.
Training on augumented user 63133 35/50 current_auc = 0.67048020472678
User 63133 AUC after training: 0.668222188770134
User 63133 does not improve AUC. Reverting changes.
Training on augumented user 11132 36/50 current_auc = 0.67048020472678
User 11132 AUC after training: 0.6680716543730243
User 11132 does not improve AUC. Reverting changes.
Training on augumented user 72740 37/50 current_auc = 0.67048020472678
User 72740 AUC after training: 0.6689748607556827
User 72740 does not improve AUC. Reverting changes.
Training on augumented user 49830 38/50 current_auc = 0.67048020472678
User 49830 AUC after training: 0.6683727231672437
User 49830 does not improve AUC. Reverting changes.
Training on augumented user 74961 39/50 current_auc = 0.67048020472678
User 74961 AUC after training: 0.67048020472678
User 74961 does not improve AUC. Reverting changes.
Training on augumented user 75291 40/50 current_auc = 0.67048020472678
User 75291 AUC after training: 0.6700286015354509
User 75291 does not improve AUC. Reverting changes.
Training on augumented user 8429 41/50 current_auc = 0.67048020472678
User 8429 AUC after training: 0.67048020472678
User 8429 does not improve AUC. Reverting changes.
Training on augumented user 121207 42/50 current_auc = 0.67048020472678
User 121207 AUC after training: 0.6701791359325605
User 121207 does not improve AUC. Reverting changes.
Training on augumented user 101401 43/50 current_auc = 0.67048020472678
User 101401 AUC after training: 0.6697275327412313
User 101401 does not improve AUC. Reverting changes.
Training on augumented user 12672 44/50 current_auc = 0.67048020472678
User 12672 AUC after training: 0.6691253951527923
User 12672 does not improve AUC. Reverting changes.
Training on augumented user 1993 45/50 current_auc = 0.67048020472678
User 1993 AUC after training: 0.6695769983441217
User 1993 does not improve AUC. Reverting changes.
Training on augumented user 61905 46/50 current_auc = 0.67048020472678
User 61905 AUC after training: 0.6691253951527923
User 61905 does not improve AUC. Reverting changes.
Training on augumented user 35277 47/50 current_auc = 0.67048020472678
User 35277 AUC after training: 0.6700286015354509
User 35277 does not improve AUC. Reverting changes.
Training on augumented user 101980 48/50 current_auc = 0.67048020472678
User 101980 AUC after training: 0.6694264639470118
User 101980 does not improve AUC. Reverting changes.
Training on augumented user 85424 49/50 current_auc = 0.67048020472678
User 85424 AUC after training: 0.6697275327412313
User 85424 does not improve AUC. Reverting changes.
[2024-12-02 19:54:47.035575] start test user 19818 251/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:47.742286] start test user 19818 251/568 recall augumented users by random, augumented_users = [101042, 91216, 68935, 27298, 28577, 100994, 12350, 111566, 53486, 44560, 94458, 1104, 133247, 62183, 130575, 4814, 76936, 51948, 61835, 102731, 2516, 52187, 52183, 117052, 91950, 115528, 17267, 31466, 87355, 55948, 63630, 12436, 79034, 40066, 130563, 79975, 79719, 138382, 59566, 121583, 95352, 37713, 1911, 21449, 135604, 51647, 82633, 54122, 37750, 77940]
[2024-12-02 19:54:47.757842] user = 19818 Cloud 251/568
[2024-12-02 19:54:47.772972] user = 19818 Local 251/568
[2024-12-02 19:54:47.887046] user = 19818 Local+ 251/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:49.740857] user = 19818 MPDA- 251/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5964912280701754
Training on augumented user 101042 0/50 current_auc = 0.5964912280701754
User 101042 AUC after training: 0.5964912280701754
User 101042 does not improve AUC. Reverting changes.
Training on augumented user 91216 1/50 current_auc = 0.5964912280701754
User 91216 AUC after training: 0.5964912280701754
User 91216 does not improve AUC. Reverting changes.
Training on augumented user 68935 2/50 current_auc = 0.5964912280701754
User 68935 AUC after training: 0.5964912280701754
User 68935 does not improve AUC. Reverting changes.
Training on augumented user 27298 3/50 current_auc = 0.5964912280701754
User 27298 AUC after training: 0.5964912280701754
User 27298 does not improve AUC. Reverting changes.
Training on augumented user 28577 4/50 current_auc = 0.5964912280701754
User 28577 AUC after training: 0.5964912280701754
User 28577 does not improve AUC. Reverting changes.
Training on augumented user 100994 5/50 current_auc = 0.5964912280701754
User 100994 AUC after training: 0.5964912280701754
User 100994 does not improve AUC. Reverting changes.
Training on augumented user 12350 6/50 current_auc = 0.5964912280701754
User 12350 AUC after training: 0.5964912280701754
User 12350 does not improve AUC. Reverting changes.
Training on augumented user 111566 7/50 current_auc = 0.5964912280701754
User 111566 AUC after training: 0.5929824561403508
User 111566 does not improve AUC. Reverting changes.
Training on augumented user 53486 8/50 current_auc = 0.5964912280701754
User 53486 AUC after training: 0.5964912280701754
User 53486 does not improve AUC. Reverting changes.
Training on augumented user 44560 9/50 current_auc = 0.5964912280701754
User 44560 AUC after training: 0.5964912280701754
User 44560 does not improve AUC. Reverting changes.
Training on augumented user 94458 10/50 current_auc = 0.5964912280701754
User 94458 AUC after training: 0.5964912280701754
User 94458 does not improve AUC. Reverting changes.
Training on augumented user 1104 11/50 current_auc = 0.5964912280701754
User 1104 AUC after training: 0.5964912280701754
User 1104 does not improve AUC. Reverting changes.
Training on augumented user 133247 12/50 current_auc = 0.5964912280701754
User 133247 AUC after training: 0.5964912280701754
User 133247 does not improve AUC. Reverting changes.
Training on augumented user 62183 13/50 current_auc = 0.5964912280701754
User 62183 AUC after training: 0.5929824561403508
User 62183 does not improve AUC. Reverting changes.
Training on augumented user 130575 14/50 current_auc = 0.5964912280701754
User 130575 AUC after training: 0.5964912280701754
User 130575 does not improve AUC. Reverting changes.
Training on augumented user 4814 15/50 current_auc = 0.5964912280701754
User 4814 AUC after training: 0.5964912280701754
User 4814 does not improve AUC. Reverting changes.
Training on augumented user 76936 16/50 current_auc = 0.5964912280701754
User 76936 AUC after training: 0.5964912280701754
User 76936 does not improve AUC. Reverting changes.
Training on augumented user 51948 17/50 current_auc = 0.5964912280701754
User 51948 AUC after training: 0.5929824561403508
User 51948 does not improve AUC. Reverting changes.
Training on augumented user 61835 18/50 current_auc = 0.5964912280701754
User 61835 AUC after training: 0.5964912280701754
User 61835 does not improve AUC. Reverting changes.
Training on augumented user 102731 19/50 current_auc = 0.5964912280701754
User 102731 AUC after training: 0.5964912280701754
User 102731 does not improve AUC. Reverting changes.
Training on augumented user 2516 20/50 current_auc = 0.5964912280701754
User 2516 AUC after training: 0.5964912280701754
User 2516 does not improve AUC. Reverting changes.
Training on augumented user 52187 21/50 current_auc = 0.5964912280701754
User 52187 AUC after training: 0.5964912280701754
User 52187 does not improve AUC. Reverting changes.
Training on augumented user 52183 22/50 current_auc = 0.5964912280701754
User 52183 AUC after training: 0.5964912280701754
User 52183 does not improve AUC. Reverting changes.
Training on augumented user 117052 23/50 current_auc = 0.5964912280701754
User 117052 AUC after training: 0.5964912280701754
User 117052 does not improve AUC. Reverting changes.
Training on augumented user 91950 24/50 current_auc = 0.5964912280701754
User 91950 AUC after training: 0.5964912280701754
User 91950 does not improve AUC. Reverting changes.
Training on augumented user 115528 25/50 current_auc = 0.5964912280701754
User 115528 AUC after training: 0.5964912280701754
User 115528 does not improve AUC. Reverting changes.
Training on augumented user 17267 26/50 current_auc = 0.5964912280701754
User 17267 AUC after training: 0.5929824561403508
User 17267 does not improve AUC. Reverting changes.
Training on augumented user 31466 27/50 current_auc = 0.5964912280701754
User 31466 AUC after training: 0.5964912280701754
User 31466 does not improve AUC. Reverting changes.
Training on augumented user 87355 28/50 current_auc = 0.5964912280701754
User 87355 AUC after training: 0.5964912280701754
User 87355 does not improve AUC. Reverting changes.
Training on augumented user 55948 29/50 current_auc = 0.5964912280701754
User 55948 AUC after training: 0.5929824561403508
User 55948 does not improve AUC. Reverting changes.
Training on augumented user 63630 30/50 current_auc = 0.5964912280701754
User 63630 AUC after training: 0.5964912280701754
User 63630 does not improve AUC. Reverting changes.
Training on augumented user 12436 31/50 current_auc = 0.5964912280701754
User 12436 AUC after training: 0.5964912280701754
User 12436 does not improve AUC. Reverting changes.
Training on augumented user 79034 32/50 current_auc = 0.5964912280701754
User 79034 AUC after training: 0.5929824561403508
User 79034 does not improve AUC. Reverting changes.
Training on augumented user 40066 33/50 current_auc = 0.5964912280701754
User 40066 AUC after training: 0.5964912280701754
User 40066 does not improve AUC. Reverting changes.
Training on augumented user 130563 34/50 current_auc = 0.5964912280701754
User 130563 AUC after training: 0.5964912280701754
User 130563 does not improve AUC. Reverting changes.
Training on augumented user 79975 35/50 current_auc = 0.5964912280701754
User 79975 AUC after training: 0.5964912280701754
User 79975 does not improve AUC. Reverting changes.
Training on augumented user 79719 36/50 current_auc = 0.5964912280701754
User 79719 AUC after training: 0.5964912280701754
User 79719 does not improve AUC. Reverting changes.
Training on augumented user 138382 37/50 current_auc = 0.5964912280701754
User 138382 AUC after training: 0.5964912280701754
User 138382 does not improve AUC. Reverting changes.
Training on augumented user 59566 38/50 current_auc = 0.5964912280701754
User 59566 AUC after training: 0.5964912280701754
User 59566 does not improve AUC. Reverting changes.
Training on augumented user 121583 39/50 current_auc = 0.5964912280701754
User 121583 AUC after training: 0.5964912280701754
User 121583 does not improve AUC. Reverting changes.
Training on augumented user 95352 40/50 current_auc = 0.5964912280701754
User 95352 AUC after training: 0.5964912280701754
User 95352 does not improve AUC. Reverting changes.
Training on augumented user 37713 41/50 current_auc = 0.5964912280701754
User 37713 AUC after training: 0.5964912280701754
User 37713 does not improve AUC. Reverting changes.
Training on augumented user 1911 42/50 current_auc = 0.5964912280701754
User 1911 AUC after training: 0.5964912280701754
User 1911 does not improve AUC. Reverting changes.
Training on augumented user 21449 43/50 current_auc = 0.5964912280701754
User 21449 AUC after training: 0.5964912280701754
User 21449 does not improve AUC. Reverting changes.
Training on augumented user 135604 44/50 current_auc = 0.5964912280701754
User 135604 AUC after training: 0.5964912280701754
User 135604 does not improve AUC. Reverting changes.
Training on augumented user 51647 45/50 current_auc = 0.5964912280701754
User 51647 AUC after training: 0.5964912280701754
User 51647 does not improve AUC. Reverting changes.
Training on augumented user 82633 46/50 current_auc = 0.5964912280701754
User 82633 AUC after training: 0.6
User 82633 improves AUC. Keeping the model.
Training on augumented user 54122 47/50 current_auc = 0.6
User 54122 AUC after training: 0.6
User 54122 does not improve AUC. Reverting changes.
Training on augumented user 37750 48/50 current_auc = 0.6
User 37750 AUC after training: 0.6
User 37750 does not improve AUC. Reverting changes.
Training on augumented user 77940 49/50 current_auc = 0.6
User 77940 AUC after training: 0.6
User 77940 does not improve AUC. Reverting changes.
[2024-12-02 19:55:20.327393] start test user 19829 252/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:20.880663] start test user 19829 252/568 recall augumented users by random, augumented_users = [101244, 51996, 3065, 11429, 109504, 115959, 67225, 37202, 63884, 13385, 61104, 16717, 90936, 55619, 69857, 2764, 103303, 17174, 114865, 96219, 109308, 99385, 40963, 109433, 82583, 127045, 79544, 74760, 97001, 92701, 89023, 126930, 33041, 93632, 17859, 38020, 62875, 96293, 73501, 122872, 36842, 98603, 70568, 38621, 79062, 135698, 123400, 107083, 39997, 35805]
[2024-12-02 19:55:20.912129] user = 19829 Cloud 252/568
[2024-12-02 19:55:20.921255] user = 19829 Local 252/568
[2024-12-02 19:55:20.993889] user = 19829 Local+ 252/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:23.227681] user = 19829 MPDA- 252/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8125
Training on augumented user 101244 0/50 current_auc = 0.8125
User 101244 AUC after training: 0.8125
User 101244 does not improve AUC. Reverting changes.
Training on augumented user 51996 1/50 current_auc = 0.8125
User 51996 AUC after training: 0.8125
User 51996 does not improve AUC. Reverting changes.
Training on augumented user 3065 2/50 current_auc = 0.8125
User 3065 AUC after training: 0.8125
User 3065 does not improve AUC. Reverting changes.
Training on augumented user 11429 3/50 current_auc = 0.8125
User 11429 AUC after training: 0.8125
User 11429 does not improve AUC. Reverting changes.
Training on augumented user 109504 4/50 current_auc = 0.8125
User 109504 AUC after training: 0.8125
User 109504 does not improve AUC. Reverting changes.
Training on augumented user 115959 5/50 current_auc = 0.8125
User 115959 AUC after training: 0.8125
User 115959 does not improve AUC. Reverting changes.
Training on augumented user 67225 6/50 current_auc = 0.8125
User 67225 AUC after training: 0.8125
User 67225 does not improve AUC. Reverting changes.
Training on augumented user 37202 7/50 current_auc = 0.8125
User 37202 AUC after training: 0.8125
User 37202 does not improve AUC. Reverting changes.
Training on augumented user 63884 8/50 current_auc = 0.8125
User 63884 AUC after training: 0.8125
User 63884 does not improve AUC. Reverting changes.
Training on augumented user 13385 9/50 current_auc = 0.8125
User 13385 AUC after training: 0.75
User 13385 does not improve AUC. Reverting changes.
Training on augumented user 61104 10/50 current_auc = 0.8125
User 61104 AUC after training: 0.8125
User 61104 does not improve AUC. Reverting changes.
Training on augumented user 16717 11/50 current_auc = 0.8125
User 16717 AUC after training: 0.8125
User 16717 does not improve AUC. Reverting changes.
Training on augumented user 90936 12/50 current_auc = 0.8125
User 90936 AUC after training: 0.8125
User 90936 does not improve AUC. Reverting changes.
Training on augumented user 55619 13/50 current_auc = 0.8125
User 55619 AUC after training: 0.8125
User 55619 does not improve AUC. Reverting changes.
Training on augumented user 69857 14/50 current_auc = 0.8125
User 69857 AUC after training: 0.8125
User 69857 does not improve AUC. Reverting changes.
Training on augumented user 2764 15/50 current_auc = 0.8125
User 2764 AUC after training: 0.75
User 2764 does not improve AUC. Reverting changes.
Training on augumented user 103303 16/50 current_auc = 0.8125
User 103303 AUC after training: 0.8125
User 103303 does not improve AUC. Reverting changes.
Training on augumented user 17174 17/50 current_auc = 0.8125
User 17174 AUC after training: 0.8125
User 17174 does not improve AUC. Reverting changes.
Training on augumented user 114865 18/50 current_auc = 0.8125
User 114865 AUC after training: 0.8125
User 114865 does not improve AUC. Reverting changes.
Training on augumented user 96219 19/50 current_auc = 0.8125
User 96219 AUC after training: 0.8125
User 96219 does not improve AUC. Reverting changes.
Training on augumented user 109308 20/50 current_auc = 0.8125
User 109308 AUC after training: 0.8125
User 109308 does not improve AUC. Reverting changes.
Training on augumented user 99385 21/50 current_auc = 0.8125
User 99385 AUC after training: 0.8125
User 99385 does not improve AUC. Reverting changes.
Training on augumented user 40963 22/50 current_auc = 0.8125
User 40963 AUC after training: 0.8125
User 40963 does not improve AUC. Reverting changes.
Training on augumented user 109433 23/50 current_auc = 0.8125
User 109433 AUC after training: 0.8125
User 109433 does not improve AUC. Reverting changes.
Training on augumented user 82583 24/50 current_auc = 0.8125
User 82583 AUC after training: 0.75
User 82583 does not improve AUC. Reverting changes.
Training on augumented user 127045 25/50 current_auc = 0.8125
User 127045 AUC after training: 0.8125
User 127045 does not improve AUC. Reverting changes.
Training on augumented user 79544 26/50 current_auc = 0.8125
User 79544 AUC after training: 0.8125
User 79544 does not improve AUC. Reverting changes.
Training on augumented user 74760 27/50 current_auc = 0.8125
User 74760 AUC after training: 0.8125
User 74760 does not improve AUC. Reverting changes.
Training on augumented user 97001 28/50 current_auc = 0.8125
User 97001 AUC after training: 0.75
User 97001 does not improve AUC. Reverting changes.
Training on augumented user 92701 29/50 current_auc = 0.8125
User 92701 AUC after training: 0.8125
User 92701 does not improve AUC. Reverting changes.
Training on augumented user 89023 30/50 current_auc = 0.8125
User 89023 AUC after training: 0.8125
User 89023 does not improve AUC. Reverting changes.
Training on augumented user 126930 31/50 current_auc = 0.8125
User 126930 AUC after training: 0.8125
User 126930 does not improve AUC. Reverting changes.
Training on augumented user 33041 32/50 current_auc = 0.8125
User 33041 AUC after training: 0.8125
User 33041 does not improve AUC. Reverting changes.
Training on augumented user 93632 33/50 current_auc = 0.8125
User 93632 AUC after training: 0.8125
User 93632 does not improve AUC. Reverting changes.
Training on augumented user 17859 34/50 current_auc = 0.8125
User 17859 AUC after training: 0.8125
User 17859 does not improve AUC. Reverting changes.
Training on augumented user 38020 35/50 current_auc = 0.8125
User 38020 AUC after training: 0.8125
User 38020 does not improve AUC. Reverting changes.
Training on augumented user 62875 36/50 current_auc = 0.8125
User 62875 AUC after training: 0.8125
User 62875 does not improve AUC. Reverting changes.
Training on augumented user 96293 37/50 current_auc = 0.8125
User 96293 AUC after training: 0.8125
User 96293 does not improve AUC. Reverting changes.
Training on augumented user 73501 38/50 current_auc = 0.8125
User 73501 AUC after training: 0.75
User 73501 does not improve AUC. Reverting changes.
Training on augumented user 122872 39/50 current_auc = 0.8125
User 122872 AUC after training: 0.75
User 122872 does not improve AUC. Reverting changes.
Training on augumented user 36842 40/50 current_auc = 0.8125
User 36842 AUC after training: 0.8125
User 36842 does not improve AUC. Reverting changes.
Training on augumented user 98603 41/50 current_auc = 0.8125
User 98603 AUC after training: 0.8125
User 98603 does not improve AUC. Reverting changes.
Training on augumented user 70568 42/50 current_auc = 0.8125
User 70568 AUC after training: 0.8125
User 70568 does not improve AUC. Reverting changes.
Training on augumented user 38621 43/50 current_auc = 0.8125
User 38621 AUC after training: 0.8125
User 38621 does not improve AUC. Reverting changes.
Training on augumented user 79062 44/50 current_auc = 0.8125
User 79062 AUC after training: 0.8125
User 79062 does not improve AUC. Reverting changes.
Training on augumented user 135698 45/50 current_auc = 0.8125
User 135698 AUC after training: 0.8125
User 135698 does not improve AUC. Reverting changes.
Training on augumented user 123400 46/50 current_auc = 0.8125
User 123400 AUC after training: 0.8125
User 123400 does not improve AUC. Reverting changes.
Training on augumented user 107083 47/50 current_auc = 0.8125
User 107083 AUC after training: 0.8125
User 107083 does not improve AUC. Reverting changes.
Training on augumented user 39997 48/50 current_auc = 0.8125
User 39997 AUC after training: 0.8125
User 39997 does not improve AUC. Reverting changes.
Training on augumented user 35805 49/50 current_auc = 0.8125
User 35805 AUC after training: 0.8125
User 35805 does not improve AUC. Reverting changes.
[2024-12-02 19:55:49.413332] start test user 19846 253/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:49.842644] start test user 19846 253/568 recall augumented users by random, augumented_users = [11931, 109942, 32226, 28156, 103078, 51982, 96013, 9965, 59510, 47259, 54411, 81635, 73866, 77178, 25121, 137331, 126135, 57394, 106305, 117769, 98283, 17649, 124765, 85078, 20821, 128890, 60170, 63570, 2883, 86788, 93541, 125168, 74510, 47091, 83616, 122436, 15728, 89258, 96365, 115967, 722, 74304, 73091, 8041, 78056, 129058, 17071, 131113, 99640, 90628]
[2024-12-02 19:55:49.857518] user = 19846 Cloud 253/568
[2024-12-02 19:55:49.866790] user = 19846 Local 253/568
[2024-12-02 19:55:49.934283] user = 19846 Local+ 253/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:52.242994] user = 19846 MPDA- 253/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.33333333333333337
Training on augumented user 11931 0/50 current_auc = 0.33333333333333337
User 11931 AUC after training: 0.33333333333333337
User 11931 does not improve AUC. Reverting changes.
Training on augumented user 109942 1/50 current_auc = 0.33333333333333337
User 109942 AUC after training: 0.33333333333333337
User 109942 does not improve AUC. Reverting changes.
Training on augumented user 32226 2/50 current_auc = 0.33333333333333337
User 32226 AUC after training: 0.33333333333333337
User 32226 does not improve AUC. Reverting changes.
Training on augumented user 28156 3/50 current_auc = 0.33333333333333337
User 28156 AUC after training: 0.33333333333333337
User 28156 does not improve AUC. Reverting changes.
Training on augumented user 103078 4/50 current_auc = 0.33333333333333337
User 103078 AUC after training: 0.33333333333333337
User 103078 does not improve AUC. Reverting changes.
Training on augumented user 51982 5/50 current_auc = 0.33333333333333337
User 51982 AUC after training: 0.33333333333333337
User 51982 does not improve AUC. Reverting changes.
Training on augumented user 96013 6/50 current_auc = 0.33333333333333337
User 96013 AUC after training: 0.33333333333333337
User 96013 does not improve AUC. Reverting changes.
Training on augumented user 9965 7/50 current_auc = 0.33333333333333337
User 9965 AUC after training: 0.33333333333333337
User 9965 does not improve AUC. Reverting changes.
Training on augumented user 59510 8/50 current_auc = 0.33333333333333337
User 59510 AUC after training: 0.33333333333333337
User 59510 does not improve AUC. Reverting changes.
Training on augumented user 47259 9/50 current_auc = 0.33333333333333337
User 47259 AUC after training: 0.33333333333333337
User 47259 does not improve AUC. Reverting changes.
Training on augumented user 54411 10/50 current_auc = 0.33333333333333337
User 54411 AUC after training: 0.33333333333333337
User 54411 does not improve AUC. Reverting changes.
Training on augumented user 81635 11/50 current_auc = 0.33333333333333337
User 81635 AUC after training: 0.33333333333333337
User 81635 does not improve AUC. Reverting changes.
Training on augumented user 73866 12/50 current_auc = 0.33333333333333337
User 73866 AUC after training: 0.33333333333333337
User 73866 does not improve AUC. Reverting changes.
Training on augumented user 77178 13/50 current_auc = 0.33333333333333337
User 77178 AUC after training: 0.33333333333333337
User 77178 does not improve AUC. Reverting changes.
Training on augumented user 25121 14/50 current_auc = 0.33333333333333337
User 25121 AUC after training: 0.33333333333333337
User 25121 does not improve AUC. Reverting changes.
Training on augumented user 137331 15/50 current_auc = 0.33333333333333337
User 137331 AUC after training: 0.33333333333333337
User 137331 does not improve AUC. Reverting changes.
Training on augumented user 126135 16/50 current_auc = 0.33333333333333337
User 126135 AUC after training: 0.33333333333333337
User 126135 does not improve AUC. Reverting changes.
Training on augumented user 57394 17/50 current_auc = 0.33333333333333337
User 57394 AUC after training: 0.33333333333333337
User 57394 does not improve AUC. Reverting changes.
Training on augumented user 106305 18/50 current_auc = 0.33333333333333337
User 106305 AUC after training: 0.33333333333333337
User 106305 does not improve AUC. Reverting changes.
Training on augumented user 117769 19/50 current_auc = 0.33333333333333337
User 117769 AUC after training: 0.33333333333333337
User 117769 does not improve AUC. Reverting changes.
Training on augumented user 98283 20/50 current_auc = 0.33333333333333337
User 98283 AUC after training: 0.33333333333333337
User 98283 does not improve AUC. Reverting changes.
Training on augumented user 17649 21/50 current_auc = 0.33333333333333337
User 17649 AUC after training: 0.33333333333333337
User 17649 does not improve AUC. Reverting changes.
Training on augumented user 124765 22/50 current_auc = 0.33333333333333337
User 124765 AUC after training: 0.33333333333333337
User 124765 does not improve AUC. Reverting changes.
Training on augumented user 85078 23/50 current_auc = 0.33333333333333337
User 85078 AUC after training: 0.33333333333333337
User 85078 does not improve AUC. Reverting changes.
Training on augumented user 20821 24/50 current_auc = 0.33333333333333337
User 20821 AUC after training: 0.33333333333333337
User 20821 does not improve AUC. Reverting changes.
Training on augumented user 128890 25/50 current_auc = 0.33333333333333337
User 128890 AUC after training: 0.33333333333333337
User 128890 does not improve AUC. Reverting changes.
Training on augumented user 60170 26/50 current_auc = 0.33333333333333337
User 60170 AUC after training: 0.33333333333333337
User 60170 does not improve AUC. Reverting changes.
Training on augumented user 63570 27/50 current_auc = 0.33333333333333337
User 63570 AUC after training: 0.33333333333333337
User 63570 does not improve AUC. Reverting changes.
Training on augumented user 2883 28/50 current_auc = 0.33333333333333337
User 2883 AUC after training: 0.33333333333333337
User 2883 does not improve AUC. Reverting changes.
Training on augumented user 86788 29/50 current_auc = 0.33333333333333337
User 86788 AUC after training: 0.33333333333333337
User 86788 does not improve AUC. Reverting changes.
Training on augumented user 93541 30/50 current_auc = 0.33333333333333337
User 93541 AUC after training: 0.33333333333333337
User 93541 does not improve AUC. Reverting changes.
Training on augumented user 125168 31/50 current_auc = 0.33333333333333337
User 125168 AUC after training: 0.33333333333333337
User 125168 does not improve AUC. Reverting changes.
Training on augumented user 74510 32/50 current_auc = 0.33333333333333337
User 74510 AUC after training: 0.33333333333333337
User 74510 does not improve AUC. Reverting changes.
Training on augumented user 47091 33/50 current_auc = 0.33333333333333337
User 47091 AUC after training: 0.33333333333333337
User 47091 does not improve AUC. Reverting changes.
Training on augumented user 83616 34/50 current_auc = 0.33333333333333337
User 83616 AUC after training: 0.33333333333333337
User 83616 does not improve AUC. Reverting changes.
Training on augumented user 122436 35/50 current_auc = 0.33333333333333337
User 122436 AUC after training: 0.33333333333333337
User 122436 does not improve AUC. Reverting changes.
Training on augumented user 15728 36/50 current_auc = 0.33333333333333337
User 15728 AUC after training: 0.33333333333333337
User 15728 does not improve AUC. Reverting changes.
Training on augumented user 89258 37/50 current_auc = 0.33333333333333337
User 89258 AUC after training: 0.33333333333333337
User 89258 does not improve AUC. Reverting changes.
Training on augumented user 96365 38/50 current_auc = 0.33333333333333337
User 96365 AUC after training: 0.33333333333333337
User 96365 does not improve AUC. Reverting changes.
Training on augumented user 115967 39/50 current_auc = 0.33333333333333337
User 115967 AUC after training: 0.33333333333333337
User 115967 does not improve AUC. Reverting changes.
Training on augumented user 722 40/50 current_auc = 0.33333333333333337
User 722 AUC after training: 0.33333333333333337
User 722 does not improve AUC. Reverting changes.
Training on augumented user 74304 41/50 current_auc = 0.33333333333333337
User 74304 AUC after training: 0.33333333333333337
User 74304 does not improve AUC. Reverting changes.
Training on augumented user 73091 42/50 current_auc = 0.33333333333333337
User 73091 AUC after training: 0.33333333333333337
User 73091 does not improve AUC. Reverting changes.
Training on augumented user 8041 43/50 current_auc = 0.33333333333333337
User 8041 AUC after training: 0.33333333333333337
User 8041 does not improve AUC. Reverting changes.
Training on augumented user 78056 44/50 current_auc = 0.33333333333333337
User 78056 AUC after training: 0.33333333333333337
User 78056 does not improve AUC. Reverting changes.
Training on augumented user 129058 45/50 current_auc = 0.33333333333333337
User 129058 AUC after training: 0.33333333333333337
User 129058 does not improve AUC. Reverting changes.
Training on augumented user 17071 46/50 current_auc = 0.33333333333333337
User 17071 AUC after training: 0.33333333333333337
User 17071 does not improve AUC. Reverting changes.
Training on augumented user 131113 47/50 current_auc = 0.33333333333333337
User 131113 AUC after training: 0.33333333333333337
User 131113 does not improve AUC. Reverting changes.
Training on augumented user 99640 48/50 current_auc = 0.33333333333333337
User 99640 AUC after training: 0.33333333333333337
User 99640 does not improve AUC. Reverting changes.
Training on augumented user 90628 49/50 current_auc = 0.33333333333333337
User 90628 AUC after training: 0.33333333333333337
User 90628 does not improve AUC. Reverting changes.
[2024-12-02 19:56:18.687492] start test user 19865 254/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:19.108415] start test user 19865 254/568 recall augumented users by random, augumented_users = [130553, 60310, 76687, 114911, 109975, 13697, 117925, 157, 101935, 137735, 94819, 55244, 131591, 69247, 32683, 19539, 37337, 1021, 7017, 90108, 137753, 40, 8311, 43142, 7060, 88443, 59305, 105947, 57530, 12669, 16617, 3087, 59008, 19143, 131544, 112918, 99260, 41468, 31995, 16128, 37269, 37170, 76146, 86142, 125131, 32735, 43597, 34812, 69066, 109817]
[2024-12-02 19:56:19.123347] user = 19865 Cloud 254/568
[2024-12-02 19:56:19.134034] user = 19865 Local 254/568
[2024-12-02 19:56:19.185908] user = 19865 Local+ 254/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:21.470267] user = 19865 MPDA- 254/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.764957264957265
Training on augumented user 130553 0/50 current_auc = 0.764957264957265
User 130553 AUC after training: 0.764957264957265
User 130553 does not improve AUC. Reverting changes.
Training on augumented user 60310 1/50 current_auc = 0.764957264957265
User 60310 AUC after training: 0.764957264957265
User 60310 does not improve AUC. Reverting changes.
Training on augumented user 76687 2/50 current_auc = 0.764957264957265
User 76687 AUC after training: 0.7606837606837606
User 76687 does not improve AUC. Reverting changes.
Training on augumented user 114911 3/50 current_auc = 0.764957264957265
User 114911 AUC after training: 0.764957264957265
User 114911 does not improve AUC. Reverting changes.
Training on augumented user 109975 4/50 current_auc = 0.764957264957265
User 109975 AUC after training: 0.7692307692307693
User 109975 improves AUC. Keeping the model.
Training on augumented user 13697 5/50 current_auc = 0.7692307692307693
User 13697 AUC after training: 0.764957264957265
User 13697 does not improve AUC. Reverting changes.
Training on augumented user 117925 6/50 current_auc = 0.7692307692307693
User 117925 AUC after training: 0.764957264957265
User 117925 does not improve AUC. Reverting changes.
Training on augumented user 157 7/50 current_auc = 0.7692307692307693
User 157 AUC after training: 0.764957264957265
User 157 does not improve AUC. Reverting changes.
Training on augumented user 101935 8/50 current_auc = 0.7692307692307693
User 101935 AUC after training: 0.764957264957265
User 101935 does not improve AUC. Reverting changes.
Training on augumented user 137735 9/50 current_auc = 0.7692307692307693
User 137735 AUC after training: 0.764957264957265
User 137735 does not improve AUC. Reverting changes.
Training on augumented user 94819 10/50 current_auc = 0.7692307692307693
User 94819 AUC after training: 0.764957264957265
User 94819 does not improve AUC. Reverting changes.
Training on augumented user 55244 11/50 current_auc = 0.7692307692307693
User 55244 AUC after training: 0.7692307692307693
User 55244 does not improve AUC. Reverting changes.
Training on augumented user 131591 12/50 current_auc = 0.7692307692307693
User 131591 AUC after training: 0.764957264957265
User 131591 does not improve AUC. Reverting changes.
Training on augumented user 69247 13/50 current_auc = 0.7692307692307693
User 69247 AUC after training: 0.764957264957265
User 69247 does not improve AUC. Reverting changes.
Training on augumented user 32683 14/50 current_auc = 0.7692307692307693
User 32683 AUC after training: 0.7692307692307693
User 32683 does not improve AUC. Reverting changes.
Training on augumented user 19539 15/50 current_auc = 0.7692307692307693
User 19539 AUC after training: 0.764957264957265
User 19539 does not improve AUC. Reverting changes.
Training on augumented user 37337 16/50 current_auc = 0.7692307692307693
User 37337 AUC after training: 0.7692307692307693
User 37337 does not improve AUC. Reverting changes.
Training on augumented user 1021 17/50 current_auc = 0.7692307692307693
User 1021 AUC after training: 0.7692307692307693
User 1021 does not improve AUC. Reverting changes.
Training on augumented user 7017 18/50 current_auc = 0.7692307692307693
User 7017 AUC after training: 0.764957264957265
User 7017 does not improve AUC. Reverting changes.
Training on augumented user 90108 19/50 current_auc = 0.7692307692307693
User 90108 AUC after training: 0.764957264957265
User 90108 does not improve AUC. Reverting changes.
Training on augumented user 137753 20/50 current_auc = 0.7692307692307693
User 137753 AUC after training: 0.764957264957265
User 137753 does not improve AUC. Reverting changes.
Training on augumented user 40 21/50 current_auc = 0.7692307692307693
User 40 AUC after training: 0.764957264957265
User 40 does not improve AUC. Reverting changes.
Training on augumented user 8311 22/50 current_auc = 0.7692307692307693
User 8311 AUC after training: 0.764957264957265
User 8311 does not improve AUC. Reverting changes.
Training on augumented user 43142 23/50 current_auc = 0.7692307692307693
User 43142 AUC after training: 0.7692307692307693
User 43142 does not improve AUC. Reverting changes.
Training on augumented user 7060 24/50 current_auc = 0.7692307692307693
User 7060 AUC after training: 0.764957264957265
User 7060 does not improve AUC. Reverting changes.
Training on augumented user 88443 25/50 current_auc = 0.7692307692307693
User 88443 AUC after training: 0.7692307692307693
User 88443 does not improve AUC. Reverting changes.
Training on augumented user 59305 26/50 current_auc = 0.7692307692307693
User 59305 AUC after training: 0.764957264957265
User 59305 does not improve AUC. Reverting changes.
Training on augumented user 105947 27/50 current_auc = 0.7692307692307693
User 105947 AUC after training: 0.7692307692307693
User 105947 does not improve AUC. Reverting changes.
Training on augumented user 57530 28/50 current_auc = 0.7692307692307693
User 57530 AUC after training: 0.7692307692307693
User 57530 does not improve AUC. Reverting changes.
Training on augumented user 12669 29/50 current_auc = 0.7692307692307693
User 12669 AUC after training: 0.764957264957265
User 12669 does not improve AUC. Reverting changes.
Training on augumented user 16617 30/50 current_auc = 0.7692307692307693
User 16617 AUC after training: 0.764957264957265
User 16617 does not improve AUC. Reverting changes.
Training on augumented user 3087 31/50 current_auc = 0.7692307692307693
User 3087 AUC after training: 0.7692307692307693
User 3087 does not improve AUC. Reverting changes.
Training on augumented user 59008 32/50 current_auc = 0.7692307692307693
User 59008 AUC after training: 0.764957264957265
User 59008 does not improve AUC. Reverting changes.
Training on augumented user 19143 33/50 current_auc = 0.7692307692307693
User 19143 AUC after training: 0.764957264957265
User 19143 does not improve AUC. Reverting changes.
Training on augumented user 131544 34/50 current_auc = 0.7692307692307693
User 131544 AUC after training: 0.764957264957265
User 131544 does not improve AUC. Reverting changes.
Training on augumented user 112918 35/50 current_auc = 0.7692307692307693
User 112918 AUC after training: 0.764957264957265
User 112918 does not improve AUC. Reverting changes.
Training on augumented user 99260 36/50 current_auc = 0.7692307692307693
User 99260 AUC after training: 0.764957264957265
User 99260 does not improve AUC. Reverting changes.
Training on augumented user 41468 37/50 current_auc = 0.7692307692307693
User 41468 AUC after training: 0.764957264957265
User 41468 does not improve AUC. Reverting changes.
Training on augumented user 31995 38/50 current_auc = 0.7692307692307693
User 31995 AUC after training: 0.764957264957265
User 31995 does not improve AUC. Reverting changes.
Training on augumented user 16128 39/50 current_auc = 0.7692307692307693
User 16128 AUC after training: 0.764957264957265
User 16128 does not improve AUC. Reverting changes.
Training on augumented user 37269 40/50 current_auc = 0.7692307692307693
User 37269 AUC after training: 0.764957264957265
User 37269 does not improve AUC. Reverting changes.
Training on augumented user 37170 41/50 current_auc = 0.7692307692307693
User 37170 AUC after training: 0.764957264957265
User 37170 does not improve AUC. Reverting changes.
Training on augumented user 76146 42/50 current_auc = 0.7692307692307693
User 76146 AUC after training: 0.7692307692307693
User 76146 does not improve AUC. Reverting changes.
Training on augumented user 86142 43/50 current_auc = 0.7692307692307693
User 86142 AUC after training: 0.7692307692307693
User 86142 does not improve AUC. Reverting changes.
Training on augumented user 125131 44/50 current_auc = 0.7692307692307693
User 125131 AUC after training: 0.7606837606837606
User 125131 does not improve AUC. Reverting changes.
Training on augumented user 32735 45/50 current_auc = 0.7692307692307693
User 32735 AUC after training: 0.764957264957265
User 32735 does not improve AUC. Reverting changes.
Training on augumented user 43597 46/50 current_auc = 0.7692307692307693
User 43597 AUC after training: 0.764957264957265
User 43597 does not improve AUC. Reverting changes.
Training on augumented user 34812 47/50 current_auc = 0.7692307692307693
User 34812 AUC after training: 0.7692307692307693
User 34812 does not improve AUC. Reverting changes.
Training on augumented user 69066 48/50 current_auc = 0.7692307692307693
User 69066 AUC after training: 0.764957264957265
User 69066 does not improve AUC. Reverting changes.
Training on augumented user 109817 49/50 current_auc = 0.7692307692307693
User 109817 AUC after training: 0.7692307692307693
User 109817 does not improve AUC. Reverting changes.
[2024-12-02 19:56:55.438528] start test user 19874 255/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:55.907509] start test user 19874 255/568 recall augumented users by random, augumented_users = [48652, 101918, 76301, 81540, 55880, 102358, 56472, 60066, 39068, 29092, 126513, 73869, 134141, 41799, 42459, 62977, 87013, 109663, 128681, 20226, 110126, 4471, 25647, 10681, 72396, 55599, 118844, 83068, 47382, 11956, 116693, 125125, 67290, 34918, 79852, 1047, 133074, 135970, 55128, 133981, 42810, 66383, 77070, 16882, 94942, 93166, 72468, 43509, 82113, 134588]
[2024-12-02 19:56:55.922675] user = 19874 Cloud 255/568
[2024-12-02 19:56:55.932200] user = 19874 Local 255/568
[2024-12-02 19:56:55.953459] user = 19874 Local+ 255/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:58.833036] user = 19874 MPDA- 255/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.24242424242424243
Training on augumented user 48652 0/50 current_auc = 0.24242424242424243
User 48652 AUC after training: 0.24242424242424243
User 48652 does not improve AUC. Reverting changes.
Training on augumented user 101918 1/50 current_auc = 0.24242424242424243
User 101918 AUC after training: 0.24242424242424243
User 101918 does not improve AUC. Reverting changes.
Training on augumented user 76301 2/50 current_auc = 0.24242424242424243
User 76301 AUC after training: 0.24242424242424243
User 76301 does not improve AUC. Reverting changes.
Training on augumented user 81540 3/50 current_auc = 0.24242424242424243
User 81540 AUC after training: 0.24242424242424243
User 81540 does not improve AUC. Reverting changes.
Training on augumented user 55880 4/50 current_auc = 0.24242424242424243
User 55880 AUC after training: 0.24242424242424243
User 55880 does not improve AUC. Reverting changes.
Training on augumented user 102358 5/50 current_auc = 0.24242424242424243
User 102358 AUC after training: 0.24242424242424243
User 102358 does not improve AUC. Reverting changes.
Training on augumented user 56472 6/50 current_auc = 0.24242424242424243
User 56472 AUC after training: 0.24242424242424243
User 56472 does not improve AUC. Reverting changes.
Training on augumented user 60066 7/50 current_auc = 0.24242424242424243
User 60066 AUC after training: 0.24242424242424243
User 60066 does not improve AUC. Reverting changes.
Training on augumented user 39068 8/50 current_auc = 0.24242424242424243
User 39068 AUC after training: 0.24242424242424243
User 39068 does not improve AUC. Reverting changes.
Training on augumented user 29092 9/50 current_auc = 0.24242424242424243
User 29092 AUC after training: 0.24242424242424243
User 29092 does not improve AUC. Reverting changes.
Training on augumented user 126513 10/50 current_auc = 0.24242424242424243
User 126513 AUC after training: 0.24242424242424243
User 126513 does not improve AUC. Reverting changes.
Training on augumented user 73869 11/50 current_auc = 0.24242424242424243
User 73869 AUC after training: 0.24242424242424243
User 73869 does not improve AUC. Reverting changes.
Training on augumented user 134141 12/50 current_auc = 0.24242424242424243
User 134141 AUC after training: 0.24242424242424243
User 134141 does not improve AUC. Reverting changes.
Training on augumented user 41799 13/50 current_auc = 0.24242424242424243
User 41799 AUC after training: 0.24242424242424243
User 41799 does not improve AUC. Reverting changes.
Training on augumented user 42459 14/50 current_auc = 0.24242424242424243
User 42459 AUC after training: 0.24242424242424243
User 42459 does not improve AUC. Reverting changes.
Training on augumented user 62977 15/50 current_auc = 0.24242424242424243
User 62977 AUC after training: 0.24242424242424243
User 62977 does not improve AUC. Reverting changes.
Training on augumented user 87013 16/50 current_auc = 0.24242424242424243
User 87013 AUC after training: 0.24242424242424243
User 87013 does not improve AUC. Reverting changes.
Training on augumented user 109663 17/50 current_auc = 0.24242424242424243
User 109663 AUC after training: 0.24242424242424243
User 109663 does not improve AUC. Reverting changes.
Training on augumented user 128681 18/50 current_auc = 0.24242424242424243
User 128681 AUC after training: 0.24242424242424243
User 128681 does not improve AUC. Reverting changes.
Training on augumented user 20226 19/50 current_auc = 0.24242424242424243
User 20226 AUC after training: 0.24242424242424243
User 20226 does not improve AUC. Reverting changes.
Training on augumented user 110126 20/50 current_auc = 0.24242424242424243
User 110126 AUC after training: 0.24242424242424243
User 110126 does not improve AUC. Reverting changes.
Training on augumented user 4471 21/50 current_auc = 0.24242424242424243
User 4471 AUC after training: 0.24242424242424243
User 4471 does not improve AUC. Reverting changes.
Training on augumented user 25647 22/50 current_auc = 0.24242424242424243
User 25647 AUC after training: 0.24242424242424243
User 25647 does not improve AUC. Reverting changes.
Training on augumented user 10681 23/50 current_auc = 0.24242424242424243
User 10681 AUC after training: 0.24242424242424243
User 10681 does not improve AUC. Reverting changes.
Training on augumented user 72396 24/50 current_auc = 0.24242424242424243
User 72396 AUC after training: 0.24242424242424243
User 72396 does not improve AUC. Reverting changes.
Training on augumented user 55599 25/50 current_auc = 0.24242424242424243
User 55599 AUC after training: 0.24242424242424243
User 55599 does not improve AUC. Reverting changes.
Training on augumented user 118844 26/50 current_auc = 0.24242424242424243
User 118844 AUC after training: 0.21212121212121215
User 118844 does not improve AUC. Reverting changes.
Training on augumented user 83068 27/50 current_auc = 0.24242424242424243
User 83068 AUC after training: 0.24242424242424243
User 83068 does not improve AUC. Reverting changes.
Training on augumented user 47382 28/50 current_auc = 0.24242424242424243
User 47382 AUC after training: 0.24242424242424243
User 47382 does not improve AUC. Reverting changes.
Training on augumented user 11956 29/50 current_auc = 0.24242424242424243
User 11956 AUC after training: 0.24242424242424243
User 11956 does not improve AUC. Reverting changes.
Training on augumented user 116693 30/50 current_auc = 0.24242424242424243
User 116693 AUC after training: 0.24242424242424243
User 116693 does not improve AUC. Reverting changes.
Training on augumented user 125125 31/50 current_auc = 0.24242424242424243
User 125125 AUC after training: 0.21212121212121213
User 125125 does not improve AUC. Reverting changes.
Training on augumented user 67290 32/50 current_auc = 0.24242424242424243
User 67290 AUC after training: 0.24242424242424243
User 67290 does not improve AUC. Reverting changes.
Training on augumented user 34918 33/50 current_auc = 0.24242424242424243
User 34918 AUC after training: 0.24242424242424243
User 34918 does not improve AUC. Reverting changes.
Training on augumented user 79852 34/50 current_auc = 0.24242424242424243
User 79852 AUC after training: 0.24242424242424243
User 79852 does not improve AUC. Reverting changes.
Training on augumented user 1047 35/50 current_auc = 0.24242424242424243
User 1047 AUC after training: 0.24242424242424243
User 1047 does not improve AUC. Reverting changes.
Training on augumented user 133074 36/50 current_auc = 0.24242424242424243
User 133074 AUC after training: 0.24242424242424243
User 133074 does not improve AUC. Reverting changes.
Training on augumented user 135970 37/50 current_auc = 0.24242424242424243
User 135970 AUC after training: 0.24242424242424243
User 135970 does not improve AUC. Reverting changes.
Training on augumented user 55128 38/50 current_auc = 0.24242424242424243
User 55128 AUC after training: 0.24242424242424243
User 55128 does not improve AUC. Reverting changes.
Training on augumented user 133981 39/50 current_auc = 0.24242424242424243
User 133981 AUC after training: 0.24242424242424243
User 133981 does not improve AUC. Reverting changes.
Training on augumented user 42810 40/50 current_auc = 0.24242424242424243
User 42810 AUC after training: 0.24242424242424243
User 42810 does not improve AUC. Reverting changes.
Training on augumented user 66383 41/50 current_auc = 0.24242424242424243
User 66383 AUC after training: 0.24242424242424243
User 66383 does not improve AUC. Reverting changes.
Training on augumented user 77070 42/50 current_auc = 0.24242424242424243
User 77070 AUC after training: 0.24242424242424243
User 77070 does not improve AUC. Reverting changes.
Training on augumented user 16882 43/50 current_auc = 0.24242424242424243
User 16882 AUC after training: 0.24242424242424243
User 16882 does not improve AUC. Reverting changes.
Training on augumented user 94942 44/50 current_auc = 0.24242424242424243
User 94942 AUC after training: 0.24242424242424243
User 94942 does not improve AUC. Reverting changes.
Training on augumented user 93166 45/50 current_auc = 0.24242424242424243
User 93166 AUC after training: 0.24242424242424243
User 93166 does not improve AUC. Reverting changes.
Training on augumented user 72468 46/50 current_auc = 0.24242424242424243
User 72468 AUC after training: 0.24242424242424243
User 72468 does not improve AUC. Reverting changes.
Training on augumented user 43509 47/50 current_auc = 0.24242424242424243
User 43509 AUC after training: 0.24242424242424243
User 43509 does not improve AUC. Reverting changes.
Training on augumented user 82113 48/50 current_auc = 0.24242424242424243
User 82113 AUC after training: 0.24242424242424243
User 82113 does not improve AUC. Reverting changes.
Training on augumented user 134588 49/50 current_auc = 0.24242424242424243
User 134588 AUC after training: 0.24242424242424243
User 134588 does not improve AUC. Reverting changes.
[2024-12-02 19:57:27.964238] start test user 19906 256/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:28.576744] start test user 19906 256/568 recall augumented users by random, augumented_users = [66725, 84039, 85793, 53414, 56176, 128065, 93290, 49270, 137731, 63131, 34419, 18908, 10910, 78248, 98054, 68898, 89854, 69929, 124917, 13650, 75291, 15909, 137728, 9026, 22099, 3445, 116914, 103957, 88722, 100236, 60972, 19768, 12615, 7942, 46909, 107524, 11931, 30439, 53375, 32608, 135916, 28215, 105498, 122794, 99497, 15313, 99041, 108436, 46770, 64993]
[2024-12-02 19:57:28.591400] user = 19906 Cloud 256/568
[2024-12-02 19:57:28.605203] user = 19906 Local 256/568
[2024-12-02 19:57:28.664905] user = 19906 Local+ 256/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:31.511256] user = 19906 MPDA- 256/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 66725 0/50 current_auc = 1.0
User 66725 AUC after training: 0.9444444444444445
User 66725 does not improve AUC. Reverting changes.
Training on augumented user 84039 1/50 current_auc = 1.0
User 84039 AUC after training: 1.0
User 84039 does not improve AUC. Reverting changes.
Training on augumented user 85793 2/50 current_auc = 1.0
User 85793 AUC after training: 1.0
User 85793 does not improve AUC. Reverting changes.
Training on augumented user 53414 3/50 current_auc = 1.0
User 53414 AUC after training: 1.0
User 53414 does not improve AUC. Reverting changes.
Training on augumented user 56176 4/50 current_auc = 1.0
User 56176 AUC after training: 1.0
User 56176 does not improve AUC. Reverting changes.
Training on augumented user 128065 5/50 current_auc = 1.0
User 128065 AUC after training: 1.0
User 128065 does not improve AUC. Reverting changes.
Training on augumented user 93290 6/50 current_auc = 1.0
User 93290 AUC after training: 0.9444444444444445
User 93290 does not improve AUC. Reverting changes.
Training on augumented user 49270 7/50 current_auc = 1.0
User 49270 AUC after training: 1.0
User 49270 does not improve AUC. Reverting changes.
Training on augumented user 137731 8/50 current_auc = 1.0
User 137731 AUC after training: 1.0
User 137731 does not improve AUC. Reverting changes.
Training on augumented user 63131 9/50 current_auc = 1.0
User 63131 AUC after training: 1.0
User 63131 does not improve AUC. Reverting changes.
Training on augumented user 34419 10/50 current_auc = 1.0
User 34419 AUC after training: 0.9444444444444445
User 34419 does not improve AUC. Reverting changes.
Training on augumented user 18908 11/50 current_auc = 1.0
User 18908 AUC after training: 1.0
User 18908 does not improve AUC. Reverting changes.
Training on augumented user 10910 12/50 current_auc = 1.0
User 10910 AUC after training: 0.9444444444444445
User 10910 does not improve AUC. Reverting changes.
Training on augumented user 78248 13/50 current_auc = 1.0
User 78248 AUC after training: 1.0
User 78248 does not improve AUC. Reverting changes.
Training on augumented user 98054 14/50 current_auc = 1.0
User 98054 AUC after training: 1.0
User 98054 does not improve AUC. Reverting changes.
Training on augumented user 68898 15/50 current_auc = 1.0
User 68898 AUC after training: 1.0
User 68898 does not improve AUC. Reverting changes.
Training on augumented user 89854 16/50 current_auc = 1.0
User 89854 AUC after training: 0.9444444444444445
User 89854 does not improve AUC. Reverting changes.
Training on augumented user 69929 17/50 current_auc = 1.0
User 69929 AUC after training: 1.0
User 69929 does not improve AUC. Reverting changes.
Training on augumented user 124917 18/50 current_auc = 1.0
User 124917 AUC after training: 1.0
User 124917 does not improve AUC. Reverting changes.
Training on augumented user 13650 19/50 current_auc = 1.0
User 13650 AUC after training: 1.0
User 13650 does not improve AUC. Reverting changes.
Training on augumented user 75291 20/50 current_auc = 1.0
User 75291 AUC after training: 1.0
User 75291 does not improve AUC. Reverting changes.
Training on augumented user 15909 21/50 current_auc = 1.0
User 15909 AUC after training: 0.9444444444444445
User 15909 does not improve AUC. Reverting changes.
Training on augumented user 137728 22/50 current_auc = 1.0
User 137728 AUC after training: 0.9444444444444445
User 137728 does not improve AUC. Reverting changes.
Training on augumented user 9026 23/50 current_auc = 1.0
User 9026 AUC after training: 1.0
User 9026 does not improve AUC. Reverting changes.
Training on augumented user 22099 24/50 current_auc = 1.0
User 22099 AUC after training: 1.0
User 22099 does not improve AUC. Reverting changes.
Training on augumented user 3445 25/50 current_auc = 1.0
User 3445 AUC after training: 1.0
User 3445 does not improve AUC. Reverting changes.
Training on augumented user 116914 26/50 current_auc = 1.0
User 116914 AUC after training: 1.0
User 116914 does not improve AUC. Reverting changes.
Training on augumented user 103957 27/50 current_auc = 1.0
User 103957 AUC after training: 0.9444444444444445
User 103957 does not improve AUC. Reverting changes.
Training on augumented user 88722 28/50 current_auc = 1.0
User 88722 AUC after training: 1.0
User 88722 does not improve AUC. Reverting changes.
Training on augumented user 100236 29/50 current_auc = 1.0
User 100236 AUC after training: 0.9444444444444445
User 100236 does not improve AUC. Reverting changes.
Training on augumented user 60972 30/50 current_auc = 1.0
User 60972 AUC after training: 1.0
User 60972 does not improve AUC. Reverting changes.
Training on augumented user 19768 31/50 current_auc = 1.0
User 19768 AUC after training: 1.0
User 19768 does not improve AUC. Reverting changes.
Training on augumented user 12615 32/50 current_auc = 1.0
User 12615 AUC after training: 1.0
User 12615 does not improve AUC. Reverting changes.
Training on augumented user 7942 33/50 current_auc = 1.0
User 7942 AUC after training: 0.9444444444444445
User 7942 does not improve AUC. Reverting changes.
Training on augumented user 46909 34/50 current_auc = 1.0
User 46909 AUC after training: 0.9444444444444445
User 46909 does not improve AUC. Reverting changes.
Training on augumented user 107524 35/50 current_auc = 1.0
User 107524 AUC after training: 1.0
User 107524 does not improve AUC. Reverting changes.
Training on augumented user 11931 36/50 current_auc = 1.0
User 11931 AUC after training: 1.0
User 11931 does not improve AUC. Reverting changes.
Training on augumented user 30439 37/50 current_auc = 1.0
User 30439 AUC after training: 1.0
User 30439 does not improve AUC. Reverting changes.
Training on augumented user 53375 38/50 current_auc = 1.0
User 53375 AUC after training: 1.0
User 53375 does not improve AUC. Reverting changes.
Training on augumented user 32608 39/50 current_auc = 1.0
User 32608 AUC after training: 1.0
User 32608 does not improve AUC. Reverting changes.
Training on augumented user 135916 40/50 current_auc = 1.0
User 135916 AUC after training: 1.0
User 135916 does not improve AUC. Reverting changes.
Training on augumented user 28215 41/50 current_auc = 1.0
User 28215 AUC after training: 1.0
User 28215 does not improve AUC. Reverting changes.
Training on augumented user 105498 42/50 current_auc = 1.0
User 105498 AUC after training: 1.0
User 105498 does not improve AUC. Reverting changes.
Training on augumented user 122794 43/50 current_auc = 1.0
User 122794 AUC after training: 0.9444444444444445
User 122794 does not improve AUC. Reverting changes.
Training on augumented user 99497 44/50 current_auc = 1.0
User 99497 AUC after training: 0.9444444444444445
User 99497 does not improve AUC. Reverting changes.
Training on augumented user 15313 45/50 current_auc = 1.0
User 15313 AUC after training: 1.0
User 15313 does not improve AUC. Reverting changes.
Training on augumented user 99041 46/50 current_auc = 1.0
User 99041 AUC after training: 0.9444444444444445
User 99041 does not improve AUC. Reverting changes.
Training on augumented user 108436 47/50 current_auc = 1.0
User 108436 AUC after training: 0.9444444444444445
User 108436 does not improve AUC. Reverting changes.
Training on augumented user 46770 48/50 current_auc = 1.0
User 46770 AUC after training: 0.9444444444444445
User 46770 does not improve AUC. Reverting changes.
Training on augumented user 64993 49/50 current_auc = 1.0
User 64993 AUC after training: 1.0
User 64993 does not improve AUC. Reverting changes.
[2024-12-02 19:58:01.378669] start test user 19939 257/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:01.812889] start test user 19939 257/568 recall augumented users by random, augumented_users = [133571, 104981, 3200, 68276, 53196, 41522, 39207, 128481, 96313, 23622, 11985, 42201, 58835, 125850, 58389, 43017, 55713, 69643, 24638, 40857, 83658, 34342, 70184, 30016, 81393, 20056, 76772, 4098, 76620, 95301, 10523, 106664, 32983, 46561, 103573, 17363, 35138, 110439, 31024, 126067, 70825, 59242, 76557, 110766, 63537, 109099, 37634, 76337, 15549, 69959]
[2024-12-02 19:58:01.827672] user = 19939 Cloud 257/568
[2024-12-02 19:58:01.837766] user = 19939 Local 257/568
[2024-12-02 19:58:01.862755] user = 19939 Local+ 257/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:04.225766] user = 19939 MPDA- 257/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5333333333333333
Training on augumented user 133571 0/50 current_auc = 0.5333333333333333
User 133571 AUC after training: 0.5333333333333333
User 133571 does not improve AUC. Reverting changes.
Training on augumented user 104981 1/50 current_auc = 0.5333333333333333
User 104981 AUC after training: 0.5333333333333333
User 104981 does not improve AUC. Reverting changes.
Training on augumented user 3200 2/50 current_auc = 0.5333333333333333
User 3200 AUC after training: 0.5333333333333333
User 3200 does not improve AUC. Reverting changes.
Training on augumented user 68276 3/50 current_auc = 0.5333333333333333
User 68276 AUC after training: 0.5333333333333333
User 68276 does not improve AUC. Reverting changes.
Training on augumented user 53196 4/50 current_auc = 0.5333333333333333
User 53196 AUC after training: 0.5333333333333333
User 53196 does not improve AUC. Reverting changes.
Training on augumented user 41522 5/50 current_auc = 0.5333333333333333
User 41522 AUC after training: 0.5333333333333333
User 41522 does not improve AUC. Reverting changes.
Training on augumented user 39207 6/50 current_auc = 0.5333333333333333
User 39207 AUC after training: 0.5333333333333333
User 39207 does not improve AUC. Reverting changes.
Training on augumented user 128481 7/50 current_auc = 0.5333333333333333
User 128481 AUC after training: 0.5333333333333333
User 128481 does not improve AUC. Reverting changes.
Training on augumented user 96313 8/50 current_auc = 0.5333333333333333
User 96313 AUC after training: 0.5333333333333333
User 96313 does not improve AUC. Reverting changes.
Training on augumented user 23622 9/50 current_auc = 0.5333333333333333
User 23622 AUC after training: 0.5333333333333333
User 23622 does not improve AUC. Reverting changes.
Training on augumented user 11985 10/50 current_auc = 0.5333333333333333
User 11985 AUC after training: 0.5333333333333333
User 11985 does not improve AUC. Reverting changes.
Training on augumented user 42201 11/50 current_auc = 0.5333333333333333
User 42201 AUC after training: 0.5333333333333333
User 42201 does not improve AUC. Reverting changes.
Training on augumented user 58835 12/50 current_auc = 0.5333333333333333
User 58835 AUC after training: 0.5333333333333333
User 58835 does not improve AUC. Reverting changes.
Training on augumented user 125850 13/50 current_auc = 0.5333333333333333
User 125850 AUC after training: 0.5333333333333333
User 125850 does not improve AUC. Reverting changes.
Training on augumented user 58389 14/50 current_auc = 0.5333333333333333
User 58389 AUC after training: 0.5333333333333333
User 58389 does not improve AUC. Reverting changes.
Training on augumented user 43017 15/50 current_auc = 0.5333333333333333
User 43017 AUC after training: 0.5333333333333333
User 43017 does not improve AUC. Reverting changes.
Training on augumented user 55713 16/50 current_auc = 0.5333333333333333
User 55713 AUC after training: 0.5333333333333333
User 55713 does not improve AUC. Reverting changes.
Training on augumented user 69643 17/50 current_auc = 0.5333333333333333
User 69643 AUC after training: 0.5333333333333333
User 69643 does not improve AUC. Reverting changes.
Training on augumented user 24638 18/50 current_auc = 0.5333333333333333
User 24638 AUC after training: 0.5333333333333333
User 24638 does not improve AUC. Reverting changes.
Training on augumented user 40857 19/50 current_auc = 0.5333333333333333
User 40857 AUC after training: 0.5333333333333333
User 40857 does not improve AUC. Reverting changes.
Training on augumented user 83658 20/50 current_auc = 0.5333333333333333
User 83658 AUC after training: 0.5333333333333333
User 83658 does not improve AUC. Reverting changes.
Training on augumented user 34342 21/50 current_auc = 0.5333333333333333
User 34342 AUC after training: 0.5333333333333333
User 34342 does not improve AUC. Reverting changes.
Training on augumented user 70184 22/50 current_auc = 0.5333333333333333
User 70184 AUC after training: 0.5333333333333333
User 70184 does not improve AUC. Reverting changes.
Training on augumented user 30016 23/50 current_auc = 0.5333333333333333
User 30016 AUC after training: 0.5333333333333333
User 30016 does not improve AUC. Reverting changes.
Training on augumented user 81393 24/50 current_auc = 0.5333333333333333
User 81393 AUC after training: 0.5333333333333333
User 81393 does not improve AUC. Reverting changes.
Training on augumented user 20056 25/50 current_auc = 0.5333333333333333
User 20056 AUC after training: 0.5333333333333333
User 20056 does not improve AUC. Reverting changes.
Training on augumented user 76772 26/50 current_auc = 0.5333333333333333
User 76772 AUC after training: 0.5333333333333333
User 76772 does not improve AUC. Reverting changes.
Training on augumented user 4098 27/50 current_auc = 0.5333333333333333
User 4098 AUC after training: 0.5333333333333333
User 4098 does not improve AUC. Reverting changes.
Training on augumented user 76620 28/50 current_auc = 0.5333333333333333
User 76620 AUC after training: 0.5333333333333333
User 76620 does not improve AUC. Reverting changes.
Training on augumented user 95301 29/50 current_auc = 0.5333333333333333
User 95301 AUC after training: 0.5333333333333333
User 95301 does not improve AUC. Reverting changes.
Training on augumented user 10523 30/50 current_auc = 0.5333333333333333
User 10523 AUC after training: 0.5333333333333333
User 10523 does not improve AUC. Reverting changes.
Training on augumented user 106664 31/50 current_auc = 0.5333333333333333
User 106664 AUC after training: 0.5333333333333333
User 106664 does not improve AUC. Reverting changes.
Training on augumented user 32983 32/50 current_auc = 0.5333333333333333
User 32983 AUC after training: 0.5333333333333333
User 32983 does not improve AUC. Reverting changes.
Training on augumented user 46561 33/50 current_auc = 0.5333333333333333
User 46561 AUC after training: 0.5333333333333333
User 46561 does not improve AUC. Reverting changes.
Training on augumented user 103573 34/50 current_auc = 0.5333333333333333
User 103573 AUC after training: 0.5333333333333333
User 103573 does not improve AUC. Reverting changes.
Training on augumented user 17363 35/50 current_auc = 0.5333333333333333
User 17363 AUC after training: 0.5333333333333333
User 17363 does not improve AUC. Reverting changes.
Training on augumented user 35138 36/50 current_auc = 0.5333333333333333
User 35138 AUC after training: 0.5333333333333333
User 35138 does not improve AUC. Reverting changes.
Training on augumented user 110439 37/50 current_auc = 0.5333333333333333
User 110439 AUC after training: 0.5333333333333333
User 110439 does not improve AUC. Reverting changes.
Training on augumented user 31024 38/50 current_auc = 0.5333333333333333
User 31024 AUC after training: 0.5333333333333333
User 31024 does not improve AUC. Reverting changes.
Training on augumented user 126067 39/50 current_auc = 0.5333333333333333
User 126067 AUC after training: 0.5333333333333333
User 126067 does not improve AUC. Reverting changes.
Training on augumented user 70825 40/50 current_auc = 0.5333333333333333
User 70825 AUC after training: 0.5333333333333333
User 70825 does not improve AUC. Reverting changes.
Training on augumented user 59242 41/50 current_auc = 0.5333333333333333
User 59242 AUC after training: 0.5333333333333333
User 59242 does not improve AUC. Reverting changes.
Training on augumented user 76557 42/50 current_auc = 0.5333333333333333
User 76557 AUC after training: 0.5333333333333333
User 76557 does not improve AUC. Reverting changes.
Training on augumented user 110766 43/50 current_auc = 0.5333333333333333
User 110766 AUC after training: 0.5333333333333333
User 110766 does not improve AUC. Reverting changes.
Training on augumented user 63537 44/50 current_auc = 0.5333333333333333
User 63537 AUC after training: 0.5333333333333333
User 63537 does not improve AUC. Reverting changes.
Training on augumented user 109099 45/50 current_auc = 0.5333333333333333
User 109099 AUC after training: 0.5333333333333333
User 109099 does not improve AUC. Reverting changes.
Training on augumented user 37634 46/50 current_auc = 0.5333333333333333
User 37634 AUC after training: 0.5333333333333333
User 37634 does not improve AUC. Reverting changes.
Training on augumented user 76337 47/50 current_auc = 0.5333333333333333
User 76337 AUC after training: 0.5333333333333333
User 76337 does not improve AUC. Reverting changes.
Training on augumented user 15549 48/50 current_auc = 0.5333333333333333
User 15549 AUC after training: 0.5333333333333333
User 15549 does not improve AUC. Reverting changes.
Training on augumented user 69959 49/50 current_auc = 0.5333333333333333
User 69959 AUC after training: 0.5333333333333333
User 69959 does not improve AUC. Reverting changes.
[2024-12-02 19:58:33.028408] start test user 19963 258/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:33.496041] start test user 19963 258/568 recall augumented users by random, augumented_users = [50270, 78736, 117661, 73840, 120362, 65498, 96259, 72653, 21686, 38395, 107463, 76141, 43971, 132674, 90457, 87607, 125789, 14882, 10055, 115143, 3559, 91397, 47308, 116078, 35504, 99836, 80125, 38915, 118045, 131611, 72881, 81604, 78753, 128778, 1972, 105028, 60728, 23266, 90961, 45774, 116914, 21846, 131558, 116222, 104201, 125867, 38294, 120315, 80884, 116272]
[2024-12-02 19:58:33.520895] user = 19963 Cloud 258/568
[2024-12-02 19:58:33.550358] user = 19963 Local 258/568
[2024-12-02 19:58:33.731117] user = 19963 Local+ 258/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:36.611276] user = 19963 MPDA- 258/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6490299823633155
Training on augumented user 50270 0/50 current_auc = 0.6490299823633155
User 50270 AUC after training: 0.6499118165784832
User 50270 improves AUC. Keeping the model.
Training on augumented user 78736 1/50 current_auc = 0.6499118165784832
User 78736 AUC after training: 0.6515285126396237
User 78736 improves AUC. Keeping the model.
Training on augumented user 117661 2/50 current_auc = 0.6515285126396237
User 117661 AUC after training: 0.6506466784244561
User 117661 does not improve AUC. Reverting changes.
Training on augumented user 73840 3/50 current_auc = 0.6515285126396237
User 73840 AUC after training: 0.6522633744855968
User 73840 improves AUC. Keeping the model.
Training on augumented user 120362 4/50 current_auc = 0.6522633744855968
User 120362 AUC after training: 0.6521164021164021
User 120362 does not improve AUC. Reverting changes.
Training on augumented user 65498 5/50 current_auc = 0.6522633744855968
User 65498 AUC after training: 0.6524103468547913
User 65498 improves AUC. Keeping the model.
Training on augumented user 96259 6/50 current_auc = 0.6524103468547913
User 96259 AUC after training: 0.6512345679012346
User 96259 does not improve AUC. Reverting changes.
Training on augumented user 72653 7/50 current_auc = 0.6524103468547913
User 72653 AUC after training: 0.6527042915931806
User 72653 improves AUC. Keeping the model.
Training on augumented user 21686 8/50 current_auc = 0.6527042915931806
User 21686 AUC after training: 0.6515285126396237
User 21686 does not improve AUC. Reverting changes.
Training on augumented user 38395 9/50 current_auc = 0.6527042915931806
User 38395 AUC after training: 0.6518224573780129
User 38395 does not improve AUC. Reverting changes.
Training on augumented user 107463 10/50 current_auc = 0.6527042915931806
User 107463 AUC after training: 0.6507936507936508
User 107463 does not improve AUC. Reverting changes.
Training on augumented user 76141 11/50 current_auc = 0.6527042915931806
User 76141 AUC after training: 0.65108759553204
User 76141 does not improve AUC. Reverting changes.
Training on augumented user 43971 12/50 current_auc = 0.6527042915931806
User 43971 AUC after training: 0.652851263962375
User 43971 improves AUC. Keeping the model.
Training on augumented user 132674 13/50 current_auc = 0.652851263962375
User 132674 AUC after training: 0.6554967666078777
User 132674 improves AUC. Keeping the model.
Training on augumented user 90457 14/50 current_auc = 0.6554967666078777
User 90457 AUC after training: 0.6554967666078777
User 90457 does not improve AUC. Reverting changes.
Training on augumented user 87607 15/50 current_auc = 0.6554967666078777
User 87607 AUC after training: 0.6540270429159318
User 87607 does not improve AUC. Reverting changes.
Training on augumented user 125789 16/50 current_auc = 0.6554967666078777
User 125789 AUC after training: 0.6537330981775427
User 125789 does not improve AUC. Reverting changes.
Training on augumented user 14882 17/50 current_auc = 0.6554967666078777
User 14882 AUC after training: 0.6537330981775427
User 14882 does not improve AUC. Reverting changes.
Training on augumented user 10055 18/50 current_auc = 0.6554967666078777
User 10055 AUC after training: 0.6478542034097591
User 10055 does not improve AUC. Reverting changes.
Training on augumented user 115143 19/50 current_auc = 0.6554967666078777
User 115143 AUC after training: 0.6537330981775427
User 115143 does not improve AUC. Reverting changes.
Training on augumented user 3559 20/50 current_auc = 0.6554967666078777
User 3559 AUC after training: 0.6554967666078777
User 3559 does not improve AUC. Reverting changes.
Training on augumented user 91397 21/50 current_auc = 0.6554967666078777
User 91397 AUC after training: 0.6546149323927102
User 91397 does not improve AUC. Reverting changes.
Training on augumented user 47308 22/50 current_auc = 0.6554967666078777
User 47308 AUC after training: 0.6531452087007643
User 47308 does not improve AUC. Reverting changes.
Training on augumented user 116078 23/50 current_auc = 0.6554967666078777
User 116078 AUC after training: 0.6557907113462669
User 116078 improves AUC. Keeping the model.
Training on augumented user 35504 24/50 current_auc = 0.6557907113462669
User 35504 AUC after training: 0.6552028218694885
User 35504 does not improve AUC. Reverting changes.
Training on augumented user 99836 25/50 current_auc = 0.6557907113462669
User 99836 AUC after training: 0.6549088771310994
User 99836 does not improve AUC. Reverting changes.
Training on augumented user 80125 26/50 current_auc = 0.6557907113462669
User 80125 AUC after training: 0.6546149323927102
User 80125 does not improve AUC. Reverting changes.
Training on augumented user 38915 27/50 current_auc = 0.6557907113462669
User 38915 AUC after training: 0.6540270429159318
User 38915 does not improve AUC. Reverting changes.
Training on augumented user 118045 28/50 current_auc = 0.6557907113462669
User 118045 AUC after training: 0.654320987654321
User 118045 does not improve AUC. Reverting changes.
Training on augumented user 131611 29/50 current_auc = 0.6557907113462669
User 131611 AUC after training: 0.6546149323927101
User 131611 does not improve AUC. Reverting changes.
Training on augumented user 72881 30/50 current_auc = 0.6557907113462669
User 72881 AUC after training: 0.6549088771310994
User 72881 does not improve AUC. Reverting changes.
Training on augumented user 81604 31/50 current_auc = 0.6557907113462669
User 81604 AUC after training: 0.6549088771310992
User 81604 does not improve AUC. Reverting changes.
Training on augumented user 78753 32/50 current_auc = 0.6557907113462669
User 78753 AUC after training: 0.6552028218694885
User 78753 does not improve AUC. Reverting changes.
Training on augumented user 128778 33/50 current_auc = 0.6557907113462669
User 128778 AUC after training: 0.6549088771310994
User 128778 does not improve AUC. Reverting changes.
Training on augumented user 1972 34/50 current_auc = 0.6557907113462669
User 1972 AUC after training: 0.6522633744855967
User 1972 does not improve AUC. Reverting changes.
Training on augumented user 105028 35/50 current_auc = 0.6557907113462669
User 105028 AUC after training: 0.656084656084656
User 105028 improves AUC. Keeping the model.
Training on augumented user 60728 36/50 current_auc = 0.656084656084656
User 60728 AUC after training: 0.6554967666078777
User 60728 does not improve AUC. Reverting changes.
Training on augumented user 23266 37/50 current_auc = 0.656084656084656
User 23266 AUC after training: 0.6552028218694884
User 23266 does not improve AUC. Reverting changes.
Training on augumented user 90961 38/50 current_auc = 0.656084656084656
User 90961 AUC after training: 0.6549088771310994
User 90961 does not improve AUC. Reverting changes.
Training on augumented user 45774 39/50 current_auc = 0.656084656084656
User 45774 AUC after training: 0.6557907113462669
User 45774 does not improve AUC. Reverting changes.
Training on augumented user 116914 40/50 current_auc = 0.656084656084656
User 116914 AUC after training: 0.6554967666078777
User 116914 does not improve AUC. Reverting changes.
Training on augumented user 21846 41/50 current_auc = 0.656084656084656
User 21846 AUC after training: 0.6549088771310994
User 21846 does not improve AUC. Reverting changes.
Training on augumented user 131558 42/50 current_auc = 0.656084656084656
User 131558 AUC after training: 0.6552028218694885
User 131558 does not improve AUC. Reverting changes.
Training on augumented user 116222 43/50 current_auc = 0.656084656084656
User 116222 AUC after training: 0.6552028218694885
User 116222 does not improve AUC. Reverting changes.
Training on augumented user 104201 44/50 current_auc = 0.656084656084656
User 104201 AUC after training: 0.6552028218694885
User 104201 does not improve AUC. Reverting changes.
Training on augumented user 125867 45/50 current_auc = 0.656084656084656
User 125867 AUC after training: 0.6552028218694885
User 125867 does not improve AUC. Reverting changes.
Training on augumented user 38294 46/50 current_auc = 0.656084656084656
User 38294 AUC after training: 0.6521164021164021
User 38294 does not improve AUC. Reverting changes.
Training on augumented user 120315 47/50 current_auc = 0.656084656084656
User 120315 AUC after training: 0.6546149323927101
User 120315 does not improve AUC. Reverting changes.
Training on augumented user 80884 48/50 current_auc = 0.656084656084656
User 80884 AUC after training: 0.656084656084656
User 80884 does not improve AUC. Reverting changes.
Training on augumented user 116272 49/50 current_auc = 0.656084656084656
User 116272 AUC after training: 0.6540270429159318
User 116272 does not improve AUC. Reverting changes.
[2024-12-02 19:59:07.629365] start test user 19971 259/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:08.043313] start test user 19971 259/568 recall augumented users by random, augumented_users = [109338, 5021, 62349, 125056, 23794, 35999, 65841, 137103, 117252, 108564, 73750, 100251, 58423, 46525, 5845, 69172, 72479, 1116, 46148, 96951, 90406, 74833, 8370, 4469, 100630, 59572, 53820, 79364, 18613, 100539, 69748, 54314, 5635, 85679, 46233, 17119, 109511, 48877, 129899, 132747, 131530, 95557, 113568, 65782, 71234, 107210, 58593, 72496, 41452, 130060]
[2024-12-02 19:59:08.058990] user = 19971 Cloud 259/568
[2024-12-02 19:59:08.090532] user = 19971 Local 259/568
[2024-12-02 19:59:08.168549] user = 19971 Local+ 259/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:10.685392] user = 19971 MPDA- 259/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6216
Training on augumented user 109338 0/50 current_auc = 0.6216
User 109338 AUC after training: 0.6216
User 109338 does not improve AUC. Reverting changes.
Training on augumented user 5021 1/50 current_auc = 0.6216
User 5021 AUC after training: 0.6210666666666667
User 5021 does not improve AUC. Reverting changes.
Training on augumented user 62349 2/50 current_auc = 0.6216
User 62349 AUC after training: 0.6215999999999999
User 62349 does not improve AUC. Reverting changes.
Training on augumented user 125056 3/50 current_auc = 0.6216
User 125056 AUC after training: 0.6210666666666668
User 125056 does not improve AUC. Reverting changes.
Training on augumented user 23794 4/50 current_auc = 0.6216
User 23794 AUC after training: 0.6216
User 23794 does not improve AUC. Reverting changes.
Training on augumented user 35999 5/50 current_auc = 0.6216
User 35999 AUC after training: 0.6216
User 35999 does not improve AUC. Reverting changes.
Training on augumented user 65841 6/50 current_auc = 0.6216
User 65841 AUC after training: 0.6218666666666667
User 65841 improves AUC. Keeping the model.
Training on augumented user 137103 7/50 current_auc = 0.6218666666666667
User 137103 AUC after training: 0.6214666666666666
User 137103 does not improve AUC. Reverting changes.
Training on augumented user 117252 8/50 current_auc = 0.6218666666666667
User 117252 AUC after training: 0.6218666666666667
User 117252 does not improve AUC. Reverting changes.
Training on augumented user 108564 9/50 current_auc = 0.6218666666666667
User 108564 AUC after training: 0.6221333333333333
User 108564 improves AUC. Keeping the model.
Training on augumented user 73750 10/50 current_auc = 0.6221333333333333
User 73750 AUC after training: 0.6208
User 73750 does not improve AUC. Reverting changes.
Training on augumented user 100251 11/50 current_auc = 0.6221333333333333
User 100251 AUC after training: 0.6218666666666667
User 100251 does not improve AUC. Reverting changes.
Training on augumented user 58423 12/50 current_auc = 0.6221333333333333
User 58423 AUC after training: 0.6218666666666667
User 58423 does not improve AUC. Reverting changes.
Training on augumented user 46525 13/50 current_auc = 0.6221333333333333
User 46525 AUC after training: 0.6218666666666667
User 46525 does not improve AUC. Reverting changes.
Training on augumented user 5845 14/50 current_auc = 0.6221333333333333
User 5845 AUC after training: 0.6218666666666667
User 5845 does not improve AUC. Reverting changes.
Training on augumented user 69172 15/50 current_auc = 0.6221333333333333
User 69172 AUC after training: 0.6213333333333334
User 69172 does not improve AUC. Reverting changes.
Training on augumented user 72479 16/50 current_auc = 0.6221333333333333
User 72479 AUC after training: 0.6216
User 72479 does not improve AUC. Reverting changes.
Training on augumented user 1116 17/50 current_auc = 0.6221333333333333
User 1116 AUC after training: 0.6218666666666667
User 1116 does not improve AUC. Reverting changes.
Training on augumented user 46148 18/50 current_auc = 0.6221333333333333
User 46148 AUC after training: 0.6224
User 46148 improves AUC. Keeping the model.
Training on augumented user 96951 19/50 current_auc = 0.6224
User 96951 AUC after training: 0.6221333333333333
User 96951 does not improve AUC. Reverting changes.
Training on augumented user 90406 20/50 current_auc = 0.6224
User 90406 AUC after training: 0.6224000000000001
User 90406 improves AUC. Keeping the model.
Training on augumented user 74833 21/50 current_auc = 0.6224000000000001
User 74833 AUC after training: 0.6229333333333333
User 74833 improves AUC. Keeping the model.
Training on augumented user 8370 22/50 current_auc = 0.6229333333333333
User 8370 AUC after training: 0.6226666666666667
User 8370 does not improve AUC. Reverting changes.
Training on augumented user 4469 23/50 current_auc = 0.6229333333333333
User 4469 AUC after training: 0.6224000000000001
User 4469 does not improve AUC. Reverting changes.
Training on augumented user 100630 24/50 current_auc = 0.6229333333333333
User 100630 AUC after training: 0.6221333333333333
User 100630 does not improve AUC. Reverting changes.
Training on augumented user 59572 25/50 current_auc = 0.6229333333333333
User 59572 AUC after training: 0.6229333333333333
User 59572 does not improve AUC. Reverting changes.
Training on augumented user 53820 26/50 current_auc = 0.6229333333333333
User 53820 AUC after training: 0.6229333333333333
User 53820 does not improve AUC. Reverting changes.
Training on augumented user 79364 27/50 current_auc = 0.6229333333333333
User 79364 AUC after training: 0.6229333333333333
User 79364 does not improve AUC. Reverting changes.
Training on augumented user 18613 28/50 current_auc = 0.6229333333333333
User 18613 AUC after training: 0.6234666666666666
User 18613 improves AUC. Keeping the model.
Training on augumented user 100539 29/50 current_auc = 0.6234666666666666
User 100539 AUC after training: 0.6237333333333333
User 100539 improves AUC. Keeping the model.
Training on augumented user 69748 30/50 current_auc = 0.6237333333333333
User 69748 AUC after training: 0.624
User 69748 improves AUC. Keeping the model.
Training on augumented user 54314 31/50 current_auc = 0.624
User 54314 AUC after training: 0.6234666666666667
User 54314 does not improve AUC. Reverting changes.
Training on augumented user 5635 32/50 current_auc = 0.624
User 5635 AUC after training: 0.6242666666666666
User 5635 improves AUC. Keeping the model.
Training on augumented user 85679 33/50 current_auc = 0.6242666666666666
User 85679 AUC after training: 0.6242666666666667
User 85679 improves AUC. Keeping the model.
Training on augumented user 46233 34/50 current_auc = 0.6242666666666667
User 46233 AUC after training: 0.6242666666666666
User 46233 does not improve AUC. Reverting changes.
Training on augumented user 17119 35/50 current_auc = 0.6242666666666667
User 17119 AUC after training: 0.624
User 17119 does not improve AUC. Reverting changes.
Training on augumented user 109511 36/50 current_auc = 0.6242666666666667
User 109511 AUC after training: 0.6242666666666666
User 109511 does not improve AUC. Reverting changes.
Training on augumented user 48877 37/50 current_auc = 0.6242666666666667
User 48877 AUC after training: 0.624
User 48877 does not improve AUC. Reverting changes.
Training on augumented user 129899 38/50 current_auc = 0.6242666666666667
User 129899 AUC after training: 0.6242666666666667
User 129899 does not improve AUC. Reverting changes.
Training on augumented user 132747 39/50 current_auc = 0.6242666666666667
User 132747 AUC after training: 0.6245333333333333
User 132747 improves AUC. Keeping the model.
Training on augumented user 131530 40/50 current_auc = 0.6245333333333333
User 131530 AUC after training: 0.6247999999999999
User 131530 improves AUC. Keeping the model.
Training on augumented user 95557 41/50 current_auc = 0.6247999999999999
User 95557 AUC after training: 0.6237333333333334
User 95557 does not improve AUC. Reverting changes.
Training on augumented user 113568 42/50 current_auc = 0.6247999999999999
User 113568 AUC after training: 0.6248
User 113568 improves AUC. Keeping the model.
Training on augumented user 65782 43/50 current_auc = 0.6248
User 65782 AUC after training: 0.6232
User 65782 does not improve AUC. Reverting changes.
Training on augumented user 71234 44/50 current_auc = 0.6248
User 71234 AUC after training: 0.6239999999999999
User 71234 does not improve AUC. Reverting changes.
Training on augumented user 107210 45/50 current_auc = 0.6248
User 107210 AUC after training: 0.624
User 107210 does not improve AUC. Reverting changes.
Training on augumented user 58593 46/50 current_auc = 0.6248
User 58593 AUC after training: 0.6248
User 58593 does not improve AUC. Reverting changes.
Training on augumented user 72496 47/50 current_auc = 0.6248
User 72496 AUC after training: 0.6242666666666666
User 72496 does not improve AUC. Reverting changes.
Training on augumented user 41452 48/50 current_auc = 0.6248
User 41452 AUC after training: 0.6237333333333334
User 41452 does not improve AUC. Reverting changes.
Training on augumented user 130060 49/50 current_auc = 0.6248
User 130060 AUC after training: 0.6245333333333334
User 130060 does not improve AUC. Reverting changes.
[2024-12-02 19:59:42.873913] start test user 19995 260/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:43.512543] start test user 19995 260/568 recall augumented users by random, augumented_users = [49660, 91066, 35955, 64183, 71687, 46680, 81796, 104064, 78709, 178, 99892, 85706, 97914, 135397, 1189, 120110, 50372, 34915, 89872, 57287, 118020, 97739, 74175, 50657, 109466, 54747, 131372, 61508, 96734, 101888, 67987, 54498, 62441, 127154, 112508, 1018, 138402, 7493, 77856, 17220, 21525, 69582, 27345, 82365, 113864, 65907, 125356, 8453, 90242, 88171]
[2024-12-02 19:59:43.529901] user = 19995 Cloud 260/568
[2024-12-02 19:59:43.541422] user = 19995 Local 260/568
[2024-12-02 19:59:43.645693] user = 19995 Local+ 260/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:46.216982] user = 19995 MPDA- 260/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5151515151515151
Training on augumented user 49660 0/50 current_auc = 0.5151515151515151
User 49660 AUC after training: 0.5119047619047619
User 49660 does not improve AUC. Reverting changes.
Training on augumented user 91066 1/50 current_auc = 0.5151515151515151
User 91066 AUC after training: 0.5108225108225108
User 91066 does not improve AUC. Reverting changes.
Training on augumented user 35955 2/50 current_auc = 0.5151515151515151
User 35955 AUC after training: 0.5151515151515151
User 35955 does not improve AUC. Reverting changes.
Training on augumented user 64183 3/50 current_auc = 0.5151515151515151
User 64183 AUC after training: 0.5140692640692641
User 64183 does not improve AUC. Reverting changes.
Training on augumented user 71687 4/50 current_auc = 0.5151515151515151
User 71687 AUC after training: 0.514069264069264
User 71687 does not improve AUC. Reverting changes.
Training on augumented user 46680 5/50 current_auc = 0.5151515151515151
User 46680 AUC after training: 0.5216450216450217
User 46680 improves AUC. Keeping the model.
Training on augumented user 81796 6/50 current_auc = 0.5216450216450217
User 81796 AUC after training: 0.5281385281385281
User 81796 improves AUC. Keeping the model.
Training on augumented user 104064 7/50 current_auc = 0.5281385281385281
User 104064 AUC after training: 0.5292207792207793
User 104064 improves AUC. Keeping the model.
Training on augumented user 78709 8/50 current_auc = 0.5292207792207793
User 78709 AUC after training: 0.5238095238095238
User 78709 does not improve AUC. Reverting changes.
Training on augumented user 178 9/50 current_auc = 0.5292207792207793
User 178 AUC after training: 0.527056277056277
User 178 does not improve AUC. Reverting changes.
Training on augumented user 99892 10/50 current_auc = 0.5292207792207793
User 99892 AUC after training: 0.5292207792207793
User 99892 does not improve AUC. Reverting changes.
Training on augumented user 85706 11/50 current_auc = 0.5292207792207793
User 85706 AUC after training: 0.5281385281385281
User 85706 does not improve AUC. Reverting changes.
Training on augumented user 97914 12/50 current_auc = 0.5292207792207793
User 97914 AUC after training: 0.5281385281385281
User 97914 does not improve AUC. Reverting changes.
Training on augumented user 135397 13/50 current_auc = 0.5292207792207793
User 135397 AUC after training: 0.5238095238095237
User 135397 does not improve AUC. Reverting changes.
Training on augumented user 1189 14/50 current_auc = 0.5292207792207793
User 1189 AUC after training: 0.5238095238095237
User 1189 does not improve AUC. Reverting changes.
Training on augumented user 120110 15/50 current_auc = 0.5292207792207793
User 120110 AUC after training: 0.5281385281385282
User 120110 does not improve AUC. Reverting changes.
Training on augumented user 50372 16/50 current_auc = 0.5292207792207793
User 50372 AUC after training: 0.525974025974026
User 50372 does not improve AUC. Reverting changes.
Training on augumented user 34915 17/50 current_auc = 0.5292207792207793
User 34915 AUC after training: 0.5216450216450217
User 34915 does not improve AUC. Reverting changes.
Training on augumented user 89872 18/50 current_auc = 0.5292207792207793
User 89872 AUC after training: 0.5238095238095237
User 89872 does not improve AUC. Reverting changes.
Training on augumented user 57287 19/50 current_auc = 0.5292207792207793
User 57287 AUC after training: 0.5216450216450217
User 57287 does not improve AUC. Reverting changes.
Training on augumented user 118020 20/50 current_auc = 0.5292207792207793
User 118020 AUC after training: 0.5292207792207793
User 118020 does not improve AUC. Reverting changes.
Training on augumented user 97739 21/50 current_auc = 0.5292207792207793
User 97739 AUC after training: 0.5281385281385281
User 97739 does not improve AUC. Reverting changes.
Training on augumented user 74175 22/50 current_auc = 0.5292207792207793
User 74175 AUC after training: 0.512987012987013
User 74175 does not improve AUC. Reverting changes.
Training on augumented user 50657 23/50 current_auc = 0.5292207792207793
User 50657 AUC after training: 0.5216450216450217
User 50657 does not improve AUC. Reverting changes.
Training on augumented user 109466 24/50 current_auc = 0.5292207792207793
User 109466 AUC after training: 0.5227272727272727
User 109466 does not improve AUC. Reverting changes.
Training on augumented user 54747 25/50 current_auc = 0.5292207792207793
User 54747 AUC after training: 0.5303030303030303
User 54747 improves AUC. Keeping the model.
Training on augumented user 131372 26/50 current_auc = 0.5303030303030303
User 131372 AUC after training: 0.5303030303030303
User 131372 does not improve AUC. Reverting changes.
Training on augumented user 61508 27/50 current_auc = 0.5303030303030303
User 61508 AUC after training: 0.5292207792207793
User 61508 does not improve AUC. Reverting changes.
Training on augumented user 96734 28/50 current_auc = 0.5303030303030303
User 96734 AUC after training: 0.5313852813852815
User 96734 improves AUC. Keeping the model.
Training on augumented user 101888 29/50 current_auc = 0.5313852813852815
User 101888 AUC after training: 0.5303030303030303
User 101888 does not improve AUC. Reverting changes.
Training on augumented user 67987 30/50 current_auc = 0.5313852813852815
User 67987 AUC after training: 0.5238095238095238
User 67987 does not improve AUC. Reverting changes.
Training on augumented user 54498 31/50 current_auc = 0.5313852813852815
User 54498 AUC after training: 0.5227272727272727
User 54498 does not improve AUC. Reverting changes.
Training on augumented user 62441 32/50 current_auc = 0.5313852813852815
User 62441 AUC after training: 0.5281385281385281
User 62441 does not improve AUC. Reverting changes.
Training on augumented user 127154 33/50 current_auc = 0.5313852813852815
User 127154 AUC after training: 0.524891774891775
User 127154 does not improve AUC. Reverting changes.
Training on augumented user 112508 34/50 current_auc = 0.5313852813852815
User 112508 AUC after training: 0.5281385281385281
User 112508 does not improve AUC. Reverting changes.
Training on augumented user 1018 35/50 current_auc = 0.5313852813852815
User 1018 AUC after training: 0.5313852813852814
User 1018 does not improve AUC. Reverting changes.
Training on augumented user 138402 36/50 current_auc = 0.5313852813852815
User 138402 AUC after training: 0.5313852813852815
User 138402 does not improve AUC. Reverting changes.
Training on augumented user 7493 37/50 current_auc = 0.5313852813852815
User 7493 AUC after training: 0.5238095238095238
User 7493 does not improve AUC. Reverting changes.
Training on augumented user 77856 38/50 current_auc = 0.5313852813852815
User 77856 AUC after training: 0.524891774891775
User 77856 does not improve AUC. Reverting changes.
Training on augumented user 17220 39/50 current_auc = 0.5313852813852815
User 17220 AUC after training: 0.5238095238095237
User 17220 does not improve AUC. Reverting changes.
Training on augumented user 21525 40/50 current_auc = 0.5313852813852815
User 21525 AUC after training: 0.5205627705627706
User 21525 does not improve AUC. Reverting changes.
Training on augumented user 69582 41/50 current_auc = 0.5313852813852815
User 69582 AUC after training: 0.5324675324675325
User 69582 improves AUC. Keeping the model.
Training on augumented user 27345 42/50 current_auc = 0.5324675324675325
User 27345 AUC after training: 0.5335497835497836
User 27345 improves AUC. Keeping the model.
Training on augumented user 82365 43/50 current_auc = 0.5335497835497836
User 82365 AUC after training: 0.527056277056277
User 82365 does not improve AUC. Reverting changes.
Training on augumented user 113864 44/50 current_auc = 0.5335497835497836
User 113864 AUC after training: 0.5324675324675325
User 113864 does not improve AUC. Reverting changes.
Training on augumented user 65907 45/50 current_auc = 0.5335497835497836
User 65907 AUC after training: 0.5346320346320347
User 65907 improves AUC. Keeping the model.
Training on augumented user 125356 46/50 current_auc = 0.5346320346320347
User 125356 AUC after training: 0.5303030303030303
User 125356 does not improve AUC. Reverting changes.
Training on augumented user 8453 47/50 current_auc = 0.5346320346320347
User 8453 AUC after training: 0.5367965367965368
User 8453 improves AUC. Keeping the model.
Training on augumented user 90242 48/50 current_auc = 0.5367965367965368
User 90242 AUC after training: 0.5313852813852814
User 90242 does not improve AUC. Reverting changes.
Training on augumented user 88171 49/50 current_auc = 0.5367965367965368
User 88171 AUC after training: 0.5335497835497836
User 88171 does not improve AUC. Reverting changes.
[2024-12-02 20:00:14.671471] start test user 20011 261/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:15.286932] start test user 20011 261/568 recall augumented users by random, augumented_users = [20186, 94869, 13640, 96911, 42248, 27551, 83550, 107285, 67264, 94350, 74277, 21427, 88731, 134763, 73119, 131013, 87176, 39583, 15271, 2739, 17938, 113018, 12036, 87180, 5710, 6367, 111368, 75529, 52736, 81912, 54254, 132111, 52682, 25285, 55233, 39159, 43764, 83402, 48161, 18868, 128310, 29876, 94550, 57176, 77507, 120434, 94495, 87721, 124736, 18547]
[2024-12-02 20:00:15.311683] user = 20011 Cloud 261/568
[2024-12-02 20:00:15.330738] user = 20011 Local 261/568
[2024-12-02 20:00:15.486891] user = 20011 Local+ 261/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:18.503318] user = 20011 MPDA- 261/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7215686274509805
Training on augumented user 20186 0/50 current_auc = 0.7215686274509805
User 20186 AUC after training: 0.7215686274509805
User 20186 does not improve AUC. Reverting changes.
Training on augumented user 94869 1/50 current_auc = 0.7215686274509805
User 94869 AUC after training: 0.7215686274509805
User 94869 does not improve AUC. Reverting changes.
Training on augumented user 13640 2/50 current_auc = 0.7215686274509805
User 13640 AUC after training: 0.7215686274509805
User 13640 does not improve AUC. Reverting changes.
Training on augumented user 96911 3/50 current_auc = 0.7215686274509805
User 96911 AUC after training: 0.7215686274509805
User 96911 does not improve AUC. Reverting changes.
Training on augumented user 42248 4/50 current_auc = 0.7215686274509805
User 42248 AUC after training: 0.7333333333333334
User 42248 improves AUC. Keeping the model.
Training on augumented user 27551 5/50 current_auc = 0.7333333333333334
User 27551 AUC after training: 0.7215686274509803
User 27551 does not improve AUC. Reverting changes.
Training on augumented user 83550 6/50 current_auc = 0.7333333333333334
User 83550 AUC after training: 0.7294117647058824
User 83550 does not improve AUC. Reverting changes.
Training on augumented user 107285 7/50 current_auc = 0.7333333333333334
User 107285 AUC after training: 0.7294117647058824
User 107285 does not improve AUC. Reverting changes.
Training on augumented user 67264 8/50 current_auc = 0.7333333333333334
User 67264 AUC after training: 0.7411764705882353
User 67264 improves AUC. Keeping the model.
Training on augumented user 94350 9/50 current_auc = 0.7411764705882353
User 94350 AUC after training: 0.7333333333333334
User 94350 does not improve AUC. Reverting changes.
Training on augumented user 74277 10/50 current_auc = 0.7411764705882353
User 74277 AUC after training: 0.7450980392156863
User 74277 improves AUC. Keeping the model.
Training on augumented user 21427 11/50 current_auc = 0.7450980392156863
User 21427 AUC after training: 0.7411764705882353
User 21427 does not improve AUC. Reverting changes.
Training on augumented user 88731 12/50 current_auc = 0.7450980392156863
User 88731 AUC after training: 0.7450980392156863
User 88731 does not improve AUC. Reverting changes.
Training on augumented user 134763 13/50 current_auc = 0.7450980392156863
User 134763 AUC after training: 0.7450980392156863
User 134763 does not improve AUC. Reverting changes.
Training on augumented user 73119 14/50 current_auc = 0.7450980392156863
User 73119 AUC after training: 0.7372549019607844
User 73119 does not improve AUC. Reverting changes.
Training on augumented user 131013 15/50 current_auc = 0.7450980392156863
User 131013 AUC after training: 0.7450980392156863
User 131013 does not improve AUC. Reverting changes.
Training on augumented user 87176 16/50 current_auc = 0.7450980392156863
User 87176 AUC after training: 0.7411764705882353
User 87176 does not improve AUC. Reverting changes.
Training on augumented user 39583 17/50 current_auc = 0.7450980392156863
User 39583 AUC after training: 0.7176470588235293
User 39583 does not improve AUC. Reverting changes.
Training on augumented user 15271 18/50 current_auc = 0.7450980392156863
User 15271 AUC after training: 0.7294117647058824
User 15271 does not improve AUC. Reverting changes.
Training on augumented user 2739 19/50 current_auc = 0.7450980392156863
User 2739 AUC after training: 0.7450980392156863
User 2739 does not improve AUC. Reverting changes.
Training on augumented user 17938 20/50 current_auc = 0.7450980392156863
User 17938 AUC after training: 0.7294117647058824
User 17938 does not improve AUC. Reverting changes.
Training on augumented user 113018 21/50 current_auc = 0.7450980392156863
User 113018 AUC after training: 0.7490196078431373
User 113018 improves AUC. Keeping the model.
Training on augumented user 12036 22/50 current_auc = 0.7490196078431373
User 12036 AUC after training: 0.7333333333333334
User 12036 does not improve AUC. Reverting changes.
Training on augumented user 87180 23/50 current_auc = 0.7490196078431373
User 87180 AUC after training: 0.7490196078431373
User 87180 does not improve AUC. Reverting changes.
Training on augumented user 5710 24/50 current_auc = 0.7490196078431373
User 5710 AUC after training: 0.7411764705882353
User 5710 does not improve AUC. Reverting changes.
Training on augumented user 6367 25/50 current_auc = 0.7490196078431373
User 6367 AUC after training: 0.7372549019607844
User 6367 does not improve AUC. Reverting changes.
Training on augumented user 111368 26/50 current_auc = 0.7490196078431373
User 111368 AUC after training: 0.7490196078431373
User 111368 does not improve AUC. Reverting changes.
Training on augumented user 75529 27/50 current_auc = 0.7490196078431373
User 75529 AUC after training: 0.7450980392156863
User 75529 does not improve AUC. Reverting changes.
Training on augumented user 52736 28/50 current_auc = 0.7490196078431373
User 52736 AUC after training: 0.7529411764705882
User 52736 improves AUC. Keeping the model.
Training on augumented user 81912 29/50 current_auc = 0.7529411764705882
User 81912 AUC after training: 0.7529411764705882
User 81912 does not improve AUC. Reverting changes.
Training on augumented user 54254 30/50 current_auc = 0.7529411764705882
User 54254 AUC after training: 0.7529411764705882
User 54254 does not improve AUC. Reverting changes.
Training on augumented user 132111 31/50 current_auc = 0.7529411764705882
User 132111 AUC after training: 0.7529411764705882
User 132111 does not improve AUC. Reverting changes.
Training on augumented user 52682 32/50 current_auc = 0.7529411764705882
User 52682 AUC after training: 0.7490196078431373
User 52682 does not improve AUC. Reverting changes.
Training on augumented user 25285 33/50 current_auc = 0.7529411764705882
User 25285 AUC after training: 0.7490196078431373
User 25285 does not improve AUC. Reverting changes.
Training on augumented user 55233 34/50 current_auc = 0.7529411764705882
User 55233 AUC after training: 0.7568627450980392
User 55233 improves AUC. Keeping the model.
Training on augumented user 39159 35/50 current_auc = 0.7568627450980392
User 39159 AUC after training: 0.7568627450980392
User 39159 does not improve AUC. Reverting changes.
Training on augumented user 43764 36/50 current_auc = 0.7568627450980392
User 43764 AUC after training: 0.7490196078431373
User 43764 does not improve AUC. Reverting changes.
Training on augumented user 83402 37/50 current_auc = 0.7568627450980392
User 83402 AUC after training: 0.7490196078431373
User 83402 does not improve AUC. Reverting changes.
Training on augumented user 48161 38/50 current_auc = 0.7568627450980392
User 48161 AUC after training: 0.7450980392156863
User 48161 does not improve AUC. Reverting changes.
Training on augumented user 18868 39/50 current_auc = 0.7568627450980392
User 18868 AUC after training: 0.7490196078431373
User 18868 does not improve AUC. Reverting changes.
Training on augumented user 128310 40/50 current_auc = 0.7568627450980392
User 128310 AUC after training: 0.7372549019607844
User 128310 does not improve AUC. Reverting changes.
Training on augumented user 29876 41/50 current_auc = 0.7568627450980392
User 29876 AUC after training: 0.7529411764705882
User 29876 does not improve AUC. Reverting changes.
Training on augumented user 94550 42/50 current_auc = 0.7568627450980392
User 94550 AUC after training: 0.7529411764705882
User 94550 does not improve AUC. Reverting changes.
Training on augumented user 57176 43/50 current_auc = 0.7568627450980392
User 57176 AUC after training: 0.7490196078431373
User 57176 does not improve AUC. Reverting changes.
Training on augumented user 77507 44/50 current_auc = 0.7568627450980392
User 77507 AUC after training: 0.7490196078431373
User 77507 does not improve AUC. Reverting changes.
Training on augumented user 120434 45/50 current_auc = 0.7568627450980392
User 120434 AUC after training: 0.7411764705882353
User 120434 does not improve AUC. Reverting changes.
Training on augumented user 94495 46/50 current_auc = 0.7568627450980392
User 94495 AUC after training: 0.7490196078431373
User 94495 does not improve AUC. Reverting changes.
Training on augumented user 87721 47/50 current_auc = 0.7568627450980392
User 87721 AUC after training: 0.7490196078431373
User 87721 does not improve AUC. Reverting changes.
Training on augumented user 124736 48/50 current_auc = 0.7568627450980392
User 124736 AUC after training: 0.7333333333333334
User 124736 does not improve AUC. Reverting changes.
Training on augumented user 18547 49/50 current_auc = 0.7568627450980392
User 18547 AUC after training: 0.7372549019607844
User 18547 does not improve AUC. Reverting changes.
[2024-12-02 20:00:43.346802] start test user 20054 262/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:43.951020] start test user 20054 262/568 recall augumented users by random, augumented_users = [88729, 73656, 85583, 94723, 38217, 100539, 86184, 61358, 25849, 122029, 108265, 108196, 36820, 12566, 13775, 56698, 117174, 118985, 32335, 137398, 121915, 98102, 24172, 137459, 79243, 87547, 70885, 133690, 23881, 85081, 133735, 60545, 124571, 41481, 10417, 97666, 95322, 42964, 41279, 64413, 25328, 62105, 121895, 132251, 19232, 67352, 71948, 104461, 46470, 138328]
[2024-12-02 20:00:43.965963] user = 20054 Cloud 262/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:00:43.972569] user = 20054 Local 262/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:00:44.019812] user = 20054 Local+ 262/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:00:46.963292] user = 20054 MPDA- 262/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 88729 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88729 AUC after training: 0.5
User 88729 does not improve AUC. Reverting changes.
Training on augumented user 73656 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73656 AUC after training: 0.5
User 73656 does not improve AUC. Reverting changes.
Training on augumented user 85583 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85583 AUC after training: 0.5
User 85583 does not improve AUC. Reverting changes.
Training on augumented user 94723 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94723 AUC after training: 0.5
User 94723 does not improve AUC. Reverting changes.
Training on augumented user 38217 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38217 AUC after training: 0.5
User 38217 does not improve AUC. Reverting changes.
Training on augumented user 100539 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100539 AUC after training: 0.5
User 100539 does not improve AUC. Reverting changes.
Training on augumented user 86184 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86184 AUC after training: 0.5
User 86184 does not improve AUC. Reverting changes.
Training on augumented user 61358 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61358 AUC after training: 0.5
User 61358 does not improve AUC. Reverting changes.
Training on augumented user 25849 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25849 AUC after training: 0.5
User 25849 does not improve AUC. Reverting changes.
Training on augumented user 122029 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122029 AUC after training: 0.5
User 122029 does not improve AUC. Reverting changes.
Training on augumented user 108265 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108265 AUC after training: 0.5
User 108265 does not improve AUC. Reverting changes.
Training on augumented user 108196 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108196 AUC after training: 0.5
User 108196 does not improve AUC. Reverting changes.
Training on augumented user 36820 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36820 AUC after training: 0.5
User 36820 does not improve AUC. Reverting changes.
Training on augumented user 12566 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12566 AUC after training: 0.5
User 12566 does not improve AUC. Reverting changes.
Training on augumented user 13775 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13775 AUC after training: 0.5
User 13775 does not improve AUC. Reverting changes.
Training on augumented user 56698 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56698 AUC after training: 0.5
User 56698 does not improve AUC. Reverting changes.
Training on augumented user 117174 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117174 AUC after training: 0.5
User 117174 does not improve AUC. Reverting changes.
Training on augumented user 118985 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118985 AUC after training: 0.5
User 118985 does not improve AUC. Reverting changes.
Training on augumented user 32335 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32335 AUC after training: 0.5
User 32335 does not improve AUC. Reverting changes.
Training on augumented user 137398 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137398 AUC after training: 0.5
User 137398 does not improve AUC. Reverting changes.
Training on augumented user 121915 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121915 AUC after training: 0.5
User 121915 does not improve AUC. Reverting changes.
Training on augumented user 98102 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98102 AUC after training: 0.5
User 98102 does not improve AUC. Reverting changes.
Training on augumented user 24172 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24172 AUC after training: 0.5
User 24172 does not improve AUC. Reverting changes.
Training on augumented user 137459 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137459 AUC after training: 0.5
User 137459 does not improve AUC. Reverting changes.
Training on augumented user 79243 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79243 AUC after training: 0.5
User 79243 does not improve AUC. Reverting changes.
Training on augumented user 87547 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87547 AUC after training: 0.5
User 87547 does not improve AUC. Reverting changes.
Training on augumented user 70885 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70885 AUC after training: 0.5
User 70885 does not improve AUC. Reverting changes.
Training on augumented user 133690 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133690 AUC after training: 0.5
User 133690 does not improve AUC. Reverting changes.
Training on augumented user 23881 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23881 AUC after training: 0.5
User 23881 does not improve AUC. Reverting changes.
Training on augumented user 85081 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85081 AUC after training: 0.5
User 85081 does not improve AUC. Reverting changes.
Training on augumented user 133735 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133735 AUC after training: 0.5
User 133735 does not improve AUC. Reverting changes.
Training on augumented user 60545 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60545 AUC after training: 0.5
User 60545 does not improve AUC. Reverting changes.
Training on augumented user 124571 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124571 AUC after training: 0.5
User 124571 does not improve AUC. Reverting changes.
Training on augumented user 41481 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41481 AUC after training: 0.5
User 41481 does not improve AUC. Reverting changes.
Training on augumented user 10417 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10417 AUC after training: 0.5
User 10417 does not improve AUC. Reverting changes.
Training on augumented user 97666 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97666 AUC after training: 0.5
User 97666 does not improve AUC. Reverting changes.
Training on augumented user 95322 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95322 AUC after training: 0.5
User 95322 does not improve AUC. Reverting changes.
Training on augumented user 42964 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42964 AUC after training: 0.5
User 42964 does not improve AUC. Reverting changes.
Training on augumented user 41279 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41279 AUC after training: 0.5
User 41279 does not improve AUC. Reverting changes.
Training on augumented user 64413 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64413 AUC after training: 0.5
User 64413 does not improve AUC. Reverting changes.
Training on augumented user 25328 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25328 AUC after training: 0.5
User 25328 does not improve AUC. Reverting changes.
Training on augumented user 62105 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62105 AUC after training: 0.5
User 62105 does not improve AUC. Reverting changes.
Training on augumented user 121895 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121895 AUC after training: 0.5
User 121895 does not improve AUC. Reverting changes.
Training on augumented user 132251 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132251 AUC after training: 0.5
User 132251 does not improve AUC. Reverting changes.
Training on augumented user 19232 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19232 AUC after training: 0.5
User 19232 does not improve AUC. Reverting changes.
Training on augumented user 67352 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67352 AUC after training: 0.5
User 67352 does not improve AUC. Reverting changes.
Training on augumented user 71948 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71948 AUC after training: 0.5
User 71948 does not improve AUC. Reverting changes.
Training on augumented user 104461 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104461 AUC after training: 0.5
User 104461 does not improve AUC. Reverting changes.
Training on augumented user 46470 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46470 AUC after training: 0.5
User 46470 does not improve AUC. Reverting changes.
Training on augumented user 138328 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138328 AUC after training: 0.5
User 138328 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:01:19.216595] start test user 20066 263/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:19.700525] start test user 20066 263/568 recall augumented users by random, augumented_users = [45980, 116230, 106453, 32742, 15097, 115169, 123901, 1420, 16777, 132324, 70429, 62584, 61288, 84446, 137136, 81483, 42279, 64886, 21183, 32102, 80794, 12211, 71845, 89573, 97539, 78139, 19804, 37156, 136331, 4353, 118300, 34624, 118174, 102280, 26937, 121620, 107501, 90553, 773, 107837, 45678, 123006, 75897, 48235, 81960, 27090, 111361, 12065, 108515, 17992]
[2024-12-02 20:01:19.716128] user = 20066 Cloud 263/568
[2024-12-02 20:01:19.726652] user = 20066 Local 263/568
[2024-12-02 20:01:19.779302] user = 20066 Local+ 263/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:21.799164] user = 20066 MPDA- 263/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.823529411764706
Training on augumented user 45980 0/50 current_auc = 0.823529411764706
User 45980 AUC after training: 0.823529411764706
User 45980 does not improve AUC. Reverting changes.
Training on augumented user 116230 1/50 current_auc = 0.823529411764706
User 116230 AUC after training: 0.823529411764706
User 116230 does not improve AUC. Reverting changes.
Training on augumented user 106453 2/50 current_auc = 0.823529411764706
User 106453 AUC after training: 0.823529411764706
User 106453 does not improve AUC. Reverting changes.
Training on augumented user 32742 3/50 current_auc = 0.823529411764706
User 32742 AUC after training: 0.823529411764706
User 32742 does not improve AUC. Reverting changes.
Training on augumented user 15097 4/50 current_auc = 0.823529411764706
User 15097 AUC after training: 0.823529411764706
User 15097 does not improve AUC. Reverting changes.
Training on augumented user 115169 5/50 current_auc = 0.823529411764706
User 115169 AUC after training: 0.823529411764706
User 115169 does not improve AUC. Reverting changes.
Training on augumented user 123901 6/50 current_auc = 0.823529411764706
User 123901 AUC after training: 0.823529411764706
User 123901 does not improve AUC. Reverting changes.
Training on augumented user 1420 7/50 current_auc = 0.823529411764706
User 1420 AUC after training: 0.823529411764706
User 1420 does not improve AUC. Reverting changes.
Training on augumented user 16777 8/50 current_auc = 0.823529411764706
User 16777 AUC after training: 0.823529411764706
User 16777 does not improve AUC. Reverting changes.
Training on augumented user 132324 9/50 current_auc = 0.823529411764706
User 132324 AUC after training: 0.823529411764706
User 132324 does not improve AUC. Reverting changes.
Training on augumented user 70429 10/50 current_auc = 0.823529411764706
User 70429 AUC after training: 0.823529411764706
User 70429 does not improve AUC. Reverting changes.
Training on augumented user 62584 11/50 current_auc = 0.823529411764706
User 62584 AUC after training: 0.823529411764706
User 62584 does not improve AUC. Reverting changes.
Training on augumented user 61288 12/50 current_auc = 0.823529411764706
User 61288 AUC after training: 0.823529411764706
User 61288 does not improve AUC. Reverting changes.
Training on augumented user 84446 13/50 current_auc = 0.823529411764706
User 84446 AUC after training: 0.823529411764706
User 84446 does not improve AUC. Reverting changes.
Training on augumented user 137136 14/50 current_auc = 0.823529411764706
User 137136 AUC after training: 0.823529411764706
User 137136 does not improve AUC. Reverting changes.
Training on augumented user 81483 15/50 current_auc = 0.823529411764706
User 81483 AUC after training: 0.823529411764706
User 81483 does not improve AUC. Reverting changes.
Training on augumented user 42279 16/50 current_auc = 0.823529411764706
User 42279 AUC after training: 0.823529411764706
User 42279 does not improve AUC. Reverting changes.
Training on augumented user 64886 17/50 current_auc = 0.823529411764706
User 64886 AUC after training: 0.823529411764706
User 64886 does not improve AUC. Reverting changes.
Training on augumented user 21183 18/50 current_auc = 0.823529411764706
User 21183 AUC after training: 0.823529411764706
User 21183 does not improve AUC. Reverting changes.
Training on augumented user 32102 19/50 current_auc = 0.823529411764706
User 32102 AUC after training: 0.823529411764706
User 32102 does not improve AUC. Reverting changes.
Training on augumented user 80794 20/50 current_auc = 0.823529411764706
User 80794 AUC after training: 0.823529411764706
User 80794 does not improve AUC. Reverting changes.
Training on augumented user 12211 21/50 current_auc = 0.823529411764706
User 12211 AUC after training: 0.823529411764706
User 12211 does not improve AUC. Reverting changes.
Training on augumented user 71845 22/50 current_auc = 0.823529411764706
User 71845 AUC after training: 0.823529411764706
User 71845 does not improve AUC. Reverting changes.
Training on augumented user 89573 23/50 current_auc = 0.823529411764706
User 89573 AUC after training: 0.823529411764706
User 89573 does not improve AUC. Reverting changes.
Training on augumented user 97539 24/50 current_auc = 0.823529411764706
User 97539 AUC after training: 0.823529411764706
User 97539 does not improve AUC. Reverting changes.
Training on augumented user 78139 25/50 current_auc = 0.823529411764706
User 78139 AUC after training: 0.823529411764706
User 78139 does not improve AUC. Reverting changes.
Training on augumented user 19804 26/50 current_auc = 0.823529411764706
User 19804 AUC after training: 0.823529411764706
User 19804 does not improve AUC. Reverting changes.
Training on augumented user 37156 27/50 current_auc = 0.823529411764706
User 37156 AUC after training: 0.823529411764706
User 37156 does not improve AUC. Reverting changes.
Training on augumented user 136331 28/50 current_auc = 0.823529411764706
User 136331 AUC after training: 0.823529411764706
User 136331 does not improve AUC. Reverting changes.
Training on augumented user 4353 29/50 current_auc = 0.823529411764706
User 4353 AUC after training: 0.823529411764706
User 4353 does not improve AUC. Reverting changes.
Training on augumented user 118300 30/50 current_auc = 0.823529411764706
User 118300 AUC after training: 0.823529411764706
User 118300 does not improve AUC. Reverting changes.
Training on augumented user 34624 31/50 current_auc = 0.823529411764706
User 34624 AUC after training: 0.823529411764706
User 34624 does not improve AUC. Reverting changes.
Training on augumented user 118174 32/50 current_auc = 0.823529411764706
User 118174 AUC after training: 0.8137254901960784
User 118174 does not improve AUC. Reverting changes.
Training on augumented user 102280 33/50 current_auc = 0.823529411764706
User 102280 AUC after training: 0.823529411764706
User 102280 does not improve AUC. Reverting changes.
Training on augumented user 26937 34/50 current_auc = 0.823529411764706
User 26937 AUC after training: 0.823529411764706
User 26937 does not improve AUC. Reverting changes.
Training on augumented user 121620 35/50 current_auc = 0.823529411764706
User 121620 AUC after training: 0.823529411764706
User 121620 does not improve AUC. Reverting changes.
Training on augumented user 107501 36/50 current_auc = 0.823529411764706
User 107501 AUC after training: 0.823529411764706
User 107501 does not improve AUC. Reverting changes.
Training on augumented user 90553 37/50 current_auc = 0.823529411764706
User 90553 AUC after training: 0.823529411764706
User 90553 does not improve AUC. Reverting changes.
Training on augumented user 773 38/50 current_auc = 0.823529411764706
User 773 AUC after training: 0.823529411764706
User 773 does not improve AUC. Reverting changes.
Training on augumented user 107837 39/50 current_auc = 0.823529411764706
User 107837 AUC after training: 0.823529411764706
User 107837 does not improve AUC. Reverting changes.
Training on augumented user 45678 40/50 current_auc = 0.823529411764706
User 45678 AUC after training: 0.823529411764706
User 45678 does not improve AUC. Reverting changes.
Training on augumented user 123006 41/50 current_auc = 0.823529411764706
User 123006 AUC after training: 0.823529411764706
User 123006 does not improve AUC. Reverting changes.
Training on augumented user 75897 42/50 current_auc = 0.823529411764706
User 75897 AUC after training: 0.8137254901960784
User 75897 does not improve AUC. Reverting changes.
Training on augumented user 48235 43/50 current_auc = 0.823529411764706
User 48235 AUC after training: 0.823529411764706
User 48235 does not improve AUC. Reverting changes.
Training on augumented user 81960 44/50 current_auc = 0.823529411764706
User 81960 AUC after training: 0.823529411764706
User 81960 does not improve AUC. Reverting changes.
Training on augumented user 27090 45/50 current_auc = 0.823529411764706
User 27090 AUC after training: 0.823529411764706
User 27090 does not improve AUC. Reverting changes.
Training on augumented user 111361 46/50 current_auc = 0.823529411764706
User 111361 AUC after training: 0.823529411764706
User 111361 does not improve AUC. Reverting changes.
Training on augumented user 12065 47/50 current_auc = 0.823529411764706
User 12065 AUC after training: 0.823529411764706
User 12065 does not improve AUC. Reverting changes.
Training on augumented user 108515 48/50 current_auc = 0.823529411764706
User 108515 AUC after training: 0.823529411764706
User 108515 does not improve AUC. Reverting changes.
Training on augumented user 17992 49/50 current_auc = 0.823529411764706
User 17992 AUC after training: 0.823529411764706
User 17992 does not improve AUC. Reverting changes.
[2024-12-02 20:01:51.497435] start test user 20076 264/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:52.343710] start test user 20076 264/568 recall augumented users by random, augumented_users = [3006, 56791, 22401, 41503, 41242, 94698, 68851, 74945, 88322, 501, 86460, 4020, 38523, 86200, 3423, 121111, 106031, 7278, 3052, 106475, 129408, 71457, 94134, 42454, 87520, 46727, 15275, 39779, 82878, 43206, 83285, 76769, 73763, 74701, 94525, 55543, 86074, 88541, 111940, 75838, 126343, 36225, 19771, 6719, 99620, 137017, 2859, 66733, 45027, 18552]
[2024-12-02 20:01:52.367980] user = 20076 Cloud 264/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:01:52.376490] user = 20076 Local 264/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:01:52.433280] user = 20076 Local+ 264/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:01:55.776407] user = 20076 MPDA- 264/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 3006 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3006 AUC after training: 0.5
User 3006 does not improve AUC. Reverting changes.
Training on augumented user 56791 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56791 AUC after training: 0.5
User 56791 does not improve AUC. Reverting changes.
Training on augumented user 22401 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22401 AUC after training: 0.5
User 22401 does not improve AUC. Reverting changes.
Training on augumented user 41503 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41503 AUC after training: 0.5
User 41503 does not improve AUC. Reverting changes.
Training on augumented user 41242 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41242 AUC after training: 0.5
User 41242 does not improve AUC. Reverting changes.
Training on augumented user 94698 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94698 AUC after training: 0.5
User 94698 does not improve AUC. Reverting changes.
Training on augumented user 68851 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68851 AUC after training: 0.5
User 68851 does not improve AUC. Reverting changes.
Training on augumented user 74945 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74945 AUC after training: 0.5
User 74945 does not improve AUC. Reverting changes.
Training on augumented user 88322 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88322 AUC after training: 0.5
User 88322 does not improve AUC. Reverting changes.
Training on augumented user 501 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 501 AUC after training: 0.5
User 501 does not improve AUC. Reverting changes.
Training on augumented user 86460 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86460 AUC after training: 0.5
User 86460 does not improve AUC. Reverting changes.
Training on augumented user 4020 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4020 AUC after training: 0.5
User 4020 does not improve AUC. Reverting changes.
Training on augumented user 38523 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38523 AUC after training: 0.5
User 38523 does not improve AUC. Reverting changes.
Training on augumented user 86200 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86200 AUC after training: 0.5
User 86200 does not improve AUC. Reverting changes.
Training on augumented user 3423 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3423 AUC after training: 0.5
User 3423 does not improve AUC. Reverting changes.
Training on augumented user 121111 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121111 AUC after training: 0.5
User 121111 does not improve AUC. Reverting changes.
Training on augumented user 106031 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106031 AUC after training: 0.5
User 106031 does not improve AUC. Reverting changes.
Training on augumented user 7278 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7278 AUC after training: 0.5
User 7278 does not improve AUC. Reverting changes.
Training on augumented user 3052 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3052 AUC after training: 0.5
User 3052 does not improve AUC. Reverting changes.
Training on augumented user 106475 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106475 AUC after training: 0.5
User 106475 does not improve AUC. Reverting changes.
Training on augumented user 129408 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129408 AUC after training: 0.5
User 129408 does not improve AUC. Reverting changes.
Training on augumented user 71457 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71457 AUC after training: 0.5
User 71457 does not improve AUC. Reverting changes.
Training on augumented user 94134 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94134 AUC after training: 0.5
User 94134 does not improve AUC. Reverting changes.
Training on augumented user 42454 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42454 AUC after training: 0.5
User 42454 does not improve AUC. Reverting changes.
Training on augumented user 87520 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87520 AUC after training: 0.5
User 87520 does not improve AUC. Reverting changes.
Training on augumented user 46727 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46727 AUC after training: 0.5
User 46727 does not improve AUC. Reverting changes.
Training on augumented user 15275 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15275 AUC after training: 0.5
User 15275 does not improve AUC. Reverting changes.
Training on augumented user 39779 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39779 AUC after training: 0.5
User 39779 does not improve AUC. Reverting changes.
Training on augumented user 82878 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82878 AUC after training: 0.5
User 82878 does not improve AUC. Reverting changes.
Training on augumented user 43206 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43206 AUC after training: 0.5
User 43206 does not improve AUC. Reverting changes.
Training on augumented user 83285 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83285 AUC after training: 0.5
User 83285 does not improve AUC. Reverting changes.
Training on augumented user 76769 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76769 AUC after training: 0.5
User 76769 does not improve AUC. Reverting changes.
Training on augumented user 73763 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73763 AUC after training: 0.5
User 73763 does not improve AUC. Reverting changes.
Training on augumented user 74701 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74701 AUC after training: 0.5
User 74701 does not improve AUC. Reverting changes.
Training on augumented user 94525 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94525 AUC after training: 0.5
User 94525 does not improve AUC. Reverting changes.
Training on augumented user 55543 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55543 AUC after training: 0.5
User 55543 does not improve AUC. Reverting changes.
Training on augumented user 86074 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86074 AUC after training: 0.5
User 86074 does not improve AUC. Reverting changes.
Training on augumented user 88541 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88541 AUC after training: 0.5
User 88541 does not improve AUC. Reverting changes.
Training on augumented user 111940 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111940 AUC after training: 0.5
User 111940 does not improve AUC. Reverting changes.
Training on augumented user 75838 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75838 AUC after training: 0.5
User 75838 does not improve AUC. Reverting changes.
Training on augumented user 126343 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126343 AUC after training: 0.5
User 126343 does not improve AUC. Reverting changes.
Training on augumented user 36225 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36225 AUC after training: 0.5
User 36225 does not improve AUC. Reverting changes.
Training on augumented user 19771 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19771 AUC after training: 0.5
User 19771 does not improve AUC. Reverting changes.
Training on augumented user 6719 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6719 AUC after training: 0.5
User 6719 does not improve AUC. Reverting changes.
Training on augumented user 99620 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99620 AUC after training: 0.5
User 99620 does not improve AUC. Reverting changes.
Training on augumented user 137017 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137017 AUC after training: 0.5
User 137017 does not improve AUC. Reverting changes.
Training on augumented user 2859 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2859 AUC after training: 0.5
User 2859 does not improve AUC. Reverting changes.
Training on augumented user 66733 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66733 AUC after training: 0.5
User 66733 does not improve AUC. Reverting changes.
Training on augumented user 45027 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45027 AUC after training: 0.5
User 45027 does not improve AUC. Reverting changes.
Training on augumented user 18552 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18552 AUC after training: 0.5
User 18552 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:02:26.612606] start test user 20103 265/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:27.099330] start test user 20103 265/568 recall augumented users by random, augumented_users = [62590, 9155, 130508, 58739, 23833, 103819, 131359, 83817, 47099, 135953, 121222, 80208, 18922, 117652, 57331, 122215, 112106, 104814, 96586, 128760, 51666, 136273, 48809, 4659, 4007, 128988, 55184, 57139, 52447, 105762, 38124, 101611, 77365, 29662, 104831, 40857, 76353, 34766, 112784, 69883, 21274, 135967, 25897, 63588, 2351, 32398, 112568, 99355, 38321, 43537]
[2024-12-02 20:02:27.114221] user = 20103 Cloud 265/568
[2024-12-02 20:02:27.139604] user = 20103 Local 265/568
[2024-12-02 20:02:27.211254] user = 20103 Local+ 265/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:29.253032] user = 20103 MPDA- 265/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6681120414673046
Training on augumented user 62590 0/50 current_auc = 0.6681120414673046
User 62590 AUC after training: 0.6691088516746411
User 62590 improves AUC. Keeping the model.
Training on augumented user 9155 1/50 current_auc = 0.6691088516746411
User 9155 AUC after training: 0.6684110845295056
User 9155 does not improve AUC. Reverting changes.
Training on augumented user 130508 2/50 current_auc = 0.6691088516746411
User 130508 AUC after training: 0.6670155502392344
User 130508 does not improve AUC. Reverting changes.
Training on augumented user 58739 3/50 current_auc = 0.6691088516746411
User 58739 AUC after training: 0.6688098086124402
User 58739 does not improve AUC. Reverting changes.
Training on augumented user 23833 4/50 current_auc = 0.6691088516746411
User 23833 AUC after training: 0.6673145933014354
User 23833 does not improve AUC. Reverting changes.
Training on augumented user 103819 5/50 current_auc = 0.6691088516746411
User 103819 AUC after training: 0.6688098086124402
User 103819 does not improve AUC. Reverting changes.
Training on augumented user 131359 6/50 current_auc = 0.6691088516746411
User 131359 AUC after training: 0.6686104465709729
User 131359 does not improve AUC. Reverting changes.
Training on augumented user 83817 7/50 current_auc = 0.6691088516746411
User 83817 AUC after training: 0.6687101275917066
User 83817 does not improve AUC. Reverting changes.
Training on augumented user 47099 8/50 current_auc = 0.6691088516746411
User 47099 AUC after training: 0.6686104465709728
User 47099 does not improve AUC. Reverting changes.
Training on augumented user 135953 9/50 current_auc = 0.6691088516746411
User 135953 AUC after training: 0.6695075757575757
User 135953 improves AUC. Keeping the model.
Training on augumented user 121222 10/50 current_auc = 0.6695075757575757
User 121222 AUC after training: 0.6691088516746412
User 121222 does not improve AUC. Reverting changes.
Training on augumented user 80208 11/50 current_auc = 0.6695075757575757
User 80208 AUC after training: 0.6699062998405103
User 80208 improves AUC. Keeping the model.
Training on augumented user 18922 12/50 current_auc = 0.6699062998405103
User 18922 AUC after training: 0.6706040669856459
User 18922 improves AUC. Keeping the model.
Training on augumented user 117652 13/50 current_auc = 0.6706040669856459
User 117652 AUC after training: 0.6694577352472089
User 117652 does not improve AUC. Reverting changes.
Training on augumented user 57331 14/50 current_auc = 0.6706040669856459
User 57331 AUC after training: 0.6701056618819776
User 57331 does not improve AUC. Reverting changes.
Training on augumented user 122215 15/50 current_auc = 0.6706040669856459
User 122215 AUC after training: 0.6689094896331738
User 122215 does not improve AUC. Reverting changes.
Training on augumented user 112106 16/50 current_auc = 0.6706040669856459
User 112106 AUC after training: 0.6701056618819777
User 112106 does not improve AUC. Reverting changes.
Training on augumented user 104814 17/50 current_auc = 0.6706040669856459
User 104814 AUC after training: 0.6699062998405103
User 104814 does not improve AUC. Reverting changes.
Training on augumented user 96586 18/50 current_auc = 0.6706040669856459
User 96586 AUC after training: 0.6696072567783093
User 96586 does not improve AUC. Reverting changes.
Training on augumented user 128760 19/50 current_auc = 0.6706040669856459
User 128760 AUC after training: 0.6711523125996811
User 128760 improves AUC. Keeping the model.
Training on augumented user 51666 20/50 current_auc = 0.6711523125996811
User 51666 AUC after training: 0.6704545454545454
User 51666 does not improve AUC. Reverting changes.
Training on augumented user 136273 21/50 current_auc = 0.6711523125996811
User 136273 AUC after training: 0.671152312599681
User 136273 does not improve AUC. Reverting changes.
Training on augumented user 48809 22/50 current_auc = 0.6711523125996811
User 48809 AUC after training: 0.6703548644338119
User 48809 does not improve AUC. Reverting changes.
Training on augumented user 4659 23/50 current_auc = 0.6711523125996811
User 4659 AUC after training: 0.6705542264752791
User 4659 does not improve AUC. Reverting changes.
Training on augumented user 4007 24/50 current_auc = 0.6711523125996811
User 4007 AUC after training: 0.6703050239234449
User 4007 does not improve AUC. Reverting changes.
Training on augumented user 128988 25/50 current_auc = 0.6711523125996811
User 128988 AUC after training: 0.6722488038277512
User 128988 improves AUC. Keeping the model.
Training on augumented user 55184 26/50 current_auc = 0.6722488038277512
User 55184 AUC after training: 0.6723484848484849
User 55184 improves AUC. Keeping the model.
Training on augumented user 57139 27/50 current_auc = 0.6723484848484849
User 57139 AUC after training: 0.6704545454545455
User 57139 does not improve AUC. Reverting changes.
Training on augumented user 52447 28/50 current_auc = 0.6723484848484849
User 52447 AUC after training: 0.6720992822966507
User 52447 does not improve AUC. Reverting changes.
Training on augumented user 105762 29/50 current_auc = 0.6723484848484849
User 105762 AUC after training: 0.6695075757575757
User 105762 does not improve AUC. Reverting changes.
Training on augumented user 38124 30/50 current_auc = 0.6723484848484849
User 38124 AUC after training: 0.6719497607655502
User 38124 does not improve AUC. Reverting changes.
Training on augumented user 101611 31/50 current_auc = 0.6723484848484849
User 101611 AUC after training: 0.6680622009569378
User 101611 does not improve AUC. Reverting changes.
Training on augumented user 77365 32/50 current_auc = 0.6723484848484849
User 77365 AUC after training: 0.6719996012759171
User 77365 does not improve AUC. Reverting changes.
Training on augumented user 29662 33/50 current_auc = 0.6723484848484849
User 29662 AUC after training: 0.6702551834130781
User 29662 does not improve AUC. Reverting changes.
Training on augumented user 104831 34/50 current_auc = 0.6723484848484849
User 104831 AUC after training: 0.6716008771929824
User 104831 does not improve AUC. Reverting changes.
Training on augumented user 40857 35/50 current_auc = 0.6723484848484849
User 40857 AUC after training: 0.6715011961722488
User 40857 does not improve AUC. Reverting changes.
Training on augumented user 76353 36/50 current_auc = 0.6723484848484849
User 76353 AUC after training: 0.6698066188197768
User 76353 does not improve AUC. Reverting changes.
Training on augumented user 34766 37/50 current_auc = 0.6723484848484849
User 34766 AUC after training: 0.6718002392344498
User 34766 does not improve AUC. Reverting changes.
Training on augumented user 112784 38/50 current_auc = 0.6723484848484849
User 112784 AUC after training: 0.6722488038277512
User 112784 does not improve AUC. Reverting changes.
Training on augumented user 69883 39/50 current_auc = 0.6723484848484849
User 69883 AUC after training: 0.6704545454545454
User 69883 does not improve AUC. Reverting changes.
Training on augumented user 21274 40/50 current_auc = 0.6723484848484849
User 21274 AUC after training: 0.6716008771929824
User 21274 does not improve AUC. Reverting changes.
Training on augumented user 135967 41/50 current_auc = 0.6723484848484849
User 135967 AUC after training: 0.6703548644338118
User 135967 does not improve AUC. Reverting changes.
Training on augumented user 25897 42/50 current_auc = 0.6723484848484849
User 25897 AUC after training: 0.6721989633173844
User 25897 does not improve AUC. Reverting changes.
Training on augumented user 63588 43/50 current_auc = 0.6723484848484849
User 63588 AUC after training: 0.6721491228070176
User 63588 does not improve AUC. Reverting changes.
Training on augumented user 2351 44/50 current_auc = 0.6723484848484849
User 2351 AUC after training: 0.6702053429027113
User 2351 does not improve AUC. Reverting changes.
Training on augumented user 32398 45/50 current_auc = 0.6723484848484849
User 32398 AUC after training: 0.6714015151515151
User 32398 does not improve AUC. Reverting changes.
Training on augumented user 112568 46/50 current_auc = 0.6723484848484849
User 112568 AUC after training: 0.672298644338118
User 112568 does not improve AUC. Reverting changes.
Training on augumented user 99355 47/50 current_auc = 0.6723484848484849
User 99355 AUC after training: 0.6717005582137161
User 99355 does not improve AUC. Reverting changes.
Training on augumented user 38321 48/50 current_auc = 0.6723484848484849
User 38321 AUC after training: 0.6708034290271132
User 38321 does not improve AUC. Reverting changes.
Training on augumented user 43537 49/50 current_auc = 0.6723484848484849
User 43537 AUC after training: 0.6708034290271133
User 43537 does not improve AUC. Reverting changes.
[2024-12-02 20:03:02.495603] start test user 20119 266/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:03.023055] start test user 20119 266/568 recall augumented users by random, augumented_users = [115063, 53163, 10060, 33893, 60234, 542, 134631, 117044, 125811, 111735, 29392, 37834, 81606, 12280, 99844, 74969, 70149, 34294, 106270, 77816, 85387, 113858, 29017, 67687, 19727, 78134, 92473, 103963, 126342, 48009, 113322, 123654, 96970, 133336, 71777, 127877, 89465, 52107, 92312, 112185, 125678, 31621, 100812, 85643, 124038, 113909, 83397, 99234, 104271, 98427]
[2024-12-02 20:03:03.038242] user = 20119 Cloud 266/568
[2024-12-02 20:03:03.089979] user = 20119 Local 266/568
[2024-12-02 20:03:03.196403] user = 20119 Local+ 266/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:05.298894] user = 20119 MPDA- 266/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7995717082721489
Training on augumented user 115063 0/50 current_auc = 0.7995717082721489
User 115063 AUC after training: 0.798543808125306
User 115063 does not improve AUC. Reverting changes.
Training on augumented user 53163 1/50 current_auc = 0.7995717082721489
User 53163 AUC after training: 0.7988130200685266
User 53163 does not improve AUC. Reverting changes.
Training on augumented user 10060 2/50 current_auc = 0.7995717082721489
User 10060 AUC after training: 0.7990577581987275
User 10060 does not improve AUC. Reverting changes.
Training on augumented user 33893 3/50 current_auc = 0.7995717082721489
User 33893 AUC after training: 0.7987640724424866
User 33893 does not improve AUC. Reverting changes.
Training on augumented user 60234 4/50 current_auc = 0.7995717082721489
User 60234 AUC after training: 0.7999388154674499
User 60234 improves AUC. Keeping the model.
Training on augumented user 542 5/50 current_auc = 0.7999388154674499
User 542 AUC after training: 0.8004282917278512
User 542 improves AUC. Keeping the model.
Training on augumented user 134631 6/50 current_auc = 0.8004282917278512
User 134631 AUC after training: 0.79996328928047
User 134631 does not improve AUC. Reverting changes.
Training on augumented user 117044 7/50 current_auc = 0.8004282917278512
User 117044 AUC after training: 0.7997185511502691
User 117044 does not improve AUC. Reverting changes.
Training on augumented user 125811 8/50 current_auc = 0.8004282917278512
User 125811 AUC after training: 0.8001346059716105
User 125811 does not improve AUC. Reverting changes.
Training on augumented user 111735 9/50 current_auc = 0.8004282917278512
User 111735 AUC after training: 0.8005506607929516
User 111735 improves AUC. Keeping the model.
Training on augumented user 29392 10/50 current_auc = 0.8005506607929516
User 29392 AUC after training: 0.8006118453255017
User 29392 improves AUC. Keeping the model.
Training on augumented user 37834 11/50 current_auc = 0.8006118453255017
User 37834 AUC after training: 0.8013093489965737
User 37834 improves AUC. Keeping the model.
Training on augumented user 81606 12/50 current_auc = 0.8013093489965737
User 81606 AUC after training: 0.800685266764562
User 81606 does not improve AUC. Reverting changes.
Training on augumented user 12280 13/50 current_auc = 0.8013093489965737
User 12280 AUC after training: 0.8011135584924131
User 12280 does not improve AUC. Reverting changes.
Training on augumented user 99844 14/50 current_auc = 0.8013093489965737
User 99844 AUC after training: 0.8023617229564366
User 99844 improves AUC. Keeping the model.
Training on augumented user 74969 15/50 current_auc = 0.8023617229564366
User 74969 AUC after training: 0.8027410670582477
User 74969 improves AUC. Keeping the model.
Training on augumented user 70149 16/50 current_auc = 0.8027410670582477
User 70149 AUC after training: 0.8024229074889868
User 70149 does not improve AUC. Reverting changes.
Training on augumented user 34294 17/50 current_auc = 0.8027410670582477
User 34294 AUC after training: 0.8026309348996574
User 34294 does not improve AUC. Reverting changes.
Training on augumented user 106270 18/50 current_auc = 0.8027410670582477
User 106270 AUC after training: 0.8029246206558982
User 106270 improves AUC. Keeping the model.
Training on augumented user 77816 19/50 current_auc = 0.8029246206558982
User 77816 AUC after training: 0.8000489476260402
User 77816 does not improve AUC. Reverting changes.
Training on augumented user 85387 20/50 current_auc = 0.8029246206558982
User 85387 AUC after training: 0.8011625061184533
User 85387 does not improve AUC. Reverting changes.
Training on augumented user 113858 21/50 current_auc = 0.8029246206558982
User 113858 AUC after training: 0.8023984336759667
User 113858 does not improve AUC. Reverting changes.
Training on augumented user 29017 22/50 current_auc = 0.8029246206558982
User 29017 AUC after training: 0.8030469897209985
User 29017 improves AUC. Keeping the model.
Training on augumented user 67687 23/50 current_auc = 0.8030469897209985
User 67687 AUC after training: 0.8021904062652961
User 67687 does not improve AUC. Reverting changes.
Training on augumented user 19727 24/50 current_auc = 0.8030469897209985
User 19727 AUC after training: 0.8025452765540871
User 19727 does not improve AUC. Reverting changes.
Training on augumented user 78134 25/50 current_auc = 0.8030469897209985
User 78134 AUC after training: 0.8020925110132159
User 78134 does not improve AUC. Reverting changes.
Training on augumented user 92473 26/50 current_auc = 0.8030469897209985
User 92473 AUC after training: 0.8029001468428781
User 92473 does not improve AUC. Reverting changes.
Training on augumented user 103963 27/50 current_auc = 0.8030469897209985
User 103963 AUC after training: 0.8033896231032797
User 103963 improves AUC. Keeping the model.
Training on augumented user 126342 28/50 current_auc = 0.8033896231032797
User 126342 AUC after training: 0.8029001468428782
User 126342 does not improve AUC. Reverting changes.
Training on augumented user 48009 29/50 current_auc = 0.8033896231032797
User 48009 AUC after training: 0.8033284385707293
User 48009 does not improve AUC. Reverting changes.
Training on augumented user 113322 30/50 current_auc = 0.8033896231032797
User 113322 AUC after training: 0.8030347528144886
User 113322 does not improve AUC. Reverting changes.
Training on augumented user 123654 31/50 current_auc = 0.8033896231032797
User 123654 AUC after training: 0.8030714635340186
User 123654 does not improve AUC. Reverting changes.
Training on augumented user 96970 32/50 current_auc = 0.8033896231032797
User 96970 AUC after training: 0.8037567302985805
User 96970 improves AUC. Keeping the model.
Training on augumented user 133336 33/50 current_auc = 0.8037567302985805
User 133336 AUC after training: 0.8036955457660303
User 133336 does not improve AUC. Reverting changes.
Training on augumented user 71777 34/50 current_auc = 0.8037567302985805
User 71777 AUC after training: 0.8040626529613314
User 71777 improves AUC. Keeping the model.
Training on augumented user 127877 35/50 current_auc = 0.8040626529613314
User 127877 AUC after training: 0.8041360744003916
User 127877 improves AUC. Keeping the model.
Training on augumented user 89465 36/50 current_auc = 0.8041360744003916
User 89465 AUC after training: 0.8027900146842879
User 89465 does not improve AUC. Reverting changes.
Training on augumented user 52107 37/50 current_auc = 0.8041360744003916
User 52107 AUC after training: 0.8045031815956926
User 52107 improves AUC. Keeping the model.
Training on augumented user 92312 38/50 current_auc = 0.8045031815956926
User 92312 AUC after training: 0.8041850220264318
User 92312 does not improve AUC. Reverting changes.
Training on augumented user 112185 39/50 current_auc = 0.8045031815956926
User 112185 AUC after training: 0.8038546255506608
User 112185 does not improve AUC. Reverting changes.
Training on augumented user 125678 40/50 current_auc = 0.8045031815956926
User 125678 AUC after training: 0.8045031815956927
User 125678 improves AUC. Keeping the model.
Training on augumented user 31621 41/50 current_auc = 0.8045031815956927
User 31621 AUC after training: 0.8041850220264318
User 31621 does not improve AUC. Reverting changes.
Training on augumented user 100812 42/50 current_auc = 0.8045031815956927
User 100812 AUC after training: 0.8041850220264317
User 100812 does not improve AUC. Reverting changes.
Training on augumented user 85643 43/50 current_auc = 0.8045031815956927
User 85643 AUC after training: 0.8045031815956927
User 85643 does not improve AUC. Reverting changes.
Training on augumented user 124038 44/50 current_auc = 0.8045031815956927
User 124038 AUC after training: 0.8041116005873716
User 124038 does not improve AUC. Reverting changes.
Training on augumented user 113909 45/50 current_auc = 0.8045031815956927
User 113909 AUC after training: 0.8027655408712677
User 113909 does not improve AUC. Reverting changes.
Training on augumented user 83397 46/50 current_auc = 0.8045031815956927
User 83397 AUC after training: 0.804233969652472
User 83397 does not improve AUC. Reverting changes.
Training on augumented user 99234 47/50 current_auc = 0.8045031815956927
User 99234 AUC after training: 0.8041605482134117
User 99234 does not improve AUC. Reverting changes.
Training on augumented user 104271 48/50 current_auc = 0.8045031815956927
User 104271 AUC after training: 0.8041605482134117
User 104271 does not improve AUC. Reverting changes.
Training on augumented user 98427 49/50 current_auc = 0.8045031815956927
User 98427 AUC after training: 0.8019211943220755
User 98427 does not improve AUC. Reverting changes.
[2024-12-02 20:03:37.760787] start test user 20132 267/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:38.176138] start test user 20132 267/568 recall augumented users by random, augumented_users = [43009, 133226, 68791, 116089, 46176, 82959, 29001, 65244, 47344, 113658, 127853, 49561, 49618, 107434, 30009, 129487, 67493, 113247, 53592, 90115, 34049, 120691, 104566, 115340, 115277, 135504, 5813, 108404, 95557, 31855, 117171, 18778, 1376, 114755, 107237, 94696, 51263, 44361, 26951, 59197, 99863, 33741, 107552, 41730, 54220, 123593, 85148, 97065, 107501, 53352]
[2024-12-02 20:03:38.198780] user = 20132 Cloud 267/568
[2024-12-02 20:03:38.230257] user = 20132 Local 267/568
[2024-12-02 20:03:39.074634] user = 20132 Local+ 267/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:41.354934] user = 20132 MPDA- 267/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5978241430700448
Training on augumented user 43009 0/50 current_auc = 0.5978241430700448
User 43009 AUC after training: 0.5961549925484352
User 43009 does not improve AUC. Reverting changes.
Training on augumented user 133226 1/50 current_auc = 0.5978241430700448
User 133226 AUC after training: 0.5980625931445603
User 133226 improves AUC. Keeping the model.
Training on augumented user 68791 2/50 current_auc = 0.5980625931445603
User 68791 AUC after training: 0.597973174366617
User 68791 does not improve AUC. Reverting changes.
Training on augumented user 116089 3/50 current_auc = 0.5980625931445603
User 116089 AUC after training: 0.5972280178837556
User 116089 does not improve AUC. Reverting changes.
Training on augumented user 46176 4/50 current_auc = 0.5980625931445603
User 46176 AUC after training: 0.5990461997019374
User 46176 improves AUC. Keeping the model.
Training on augumented user 82959 5/50 current_auc = 0.5990461997019374
User 82959 AUC after training: 0.5987183308494783
User 82959 does not improve AUC. Reverting changes.
Training on augumented user 29001 6/50 current_auc = 0.5990461997019374
User 29001 AUC after training: 0.6007749627421759
User 29001 improves AUC. Keeping the model.
Training on augumented user 65244 7/50 current_auc = 0.6007749627421759
User 65244 AUC after training: 0.600983606557377
User 65244 improves AUC. Keeping the model.
Training on augumented user 47344 8/50 current_auc = 0.600983606557377
User 47344 AUC after training: 0.6018628912071535
User 47344 improves AUC. Keeping the model.
Training on augumented user 113658 9/50 current_auc = 0.6018628912071535
User 113658 AUC after training: 0.6013412816691506
User 113658 does not improve AUC. Reverting changes.
Training on augumented user 127853 10/50 current_auc = 0.6018628912071535
User 127853 AUC after training: 0.6010730253353205
User 127853 does not improve AUC. Reverting changes.
Training on augumented user 49561 11/50 current_auc = 0.6018628912071535
User 49561 AUC after training: 0.602801788375559
User 49561 improves AUC. Keeping the model.
Training on augumented user 49618 12/50 current_auc = 0.602801788375559
User 49618 AUC after training: 0.6022652757078987
User 49618 does not improve AUC. Reverting changes.
Training on augumented user 107434 13/50 current_auc = 0.602801788375559
User 107434 AUC after training: 0.6015201192250372
User 107434 does not improve AUC. Reverting changes.
Training on augumented user 30009 14/50 current_auc = 0.602801788375559
User 30009 AUC after training: 0.6029210134128168
User 30009 improves AUC. Keeping the model.
Training on augumented user 129487 15/50 current_auc = 0.6029210134128168
User 129487 AUC after training: 0.6033681073025337
User 129487 improves AUC. Keeping the model.
Training on augumented user 67493 16/50 current_auc = 0.6033681073025337
User 67493 AUC after training: 0.6019672131147542
User 67493 does not improve AUC. Reverting changes.
Training on augumented user 113247 17/50 current_auc = 0.6033681073025337
User 113247 AUC after training: 0.6034575260804769
User 113247 improves AUC. Keeping the model.
Training on augumented user 53592 18/50 current_auc = 0.6034575260804769
User 53592 AUC after training: 0.6036661698956781
User 53592 improves AUC. Keeping the model.
Training on augumented user 90115 19/50 current_auc = 0.6036661698956781
User 90115 AUC after training: 0.6024441132637854
User 90115 does not improve AUC. Reverting changes.
Training on augumented user 34049 20/50 current_auc = 0.6036661698956781
User 34049 AUC after training: 0.603070044709389
User 34049 does not improve AUC. Reverting changes.
Training on augumented user 120691 21/50 current_auc = 0.6036661698956781
User 120691 AUC after training: 0.6048584202682564
User 120691 improves AUC. Keeping the model.
Training on augumented user 104566 22/50 current_auc = 0.6048584202682564
User 104566 AUC after training: 0.6045603576751118
User 104566 does not improve AUC. Reverting changes.
Training on augumented user 115340 23/50 current_auc = 0.6048584202682564
User 115340 AUC after training: 0.6048584202682563
User 115340 does not improve AUC. Reverting changes.
Training on augumented user 115277 24/50 current_auc = 0.6048584202682564
User 115277 AUC after training: 0.6045007451564828
User 115277 does not improve AUC. Reverting changes.
Training on augumented user 135504 25/50 current_auc = 0.6048584202682564
User 135504 AUC after training: 0.6059612518628912
User 135504 improves AUC. Keeping the model.
Training on augumented user 5813 26/50 current_auc = 0.6059612518628912
User 5813 AUC after training: 0.6053055141579731
User 5813 does not improve AUC. Reverting changes.
Training on augumented user 108404 27/50 current_auc = 0.6059612518628912
User 108404 AUC after training: 0.6062593144560358
User 108404 improves AUC. Keeping the model.
Training on augumented user 95557 28/50 current_auc = 0.6062593144560358
User 95557 AUC after training: 0.6058420268256334
User 95557 does not improve AUC. Reverting changes.
Training on augumented user 31855 29/50 current_auc = 0.6062593144560358
User 31855 AUC after training: 0.6059314456035767
User 31855 does not improve AUC. Reverting changes.
Training on augumented user 117171 30/50 current_auc = 0.6062593144560358
User 117171 AUC after training: 0.6056631892697467
User 117171 does not improve AUC. Reverting changes.
Training on augumented user 18778 31/50 current_auc = 0.6062593144560358
User 18778 AUC after training: 0.6056333830104321
User 18778 does not improve AUC. Reverting changes.
Training on augumented user 1376 32/50 current_auc = 0.6062593144560358
User 1376 AUC after training: 0.6059016393442622
User 1376 does not improve AUC. Reverting changes.
Training on augumented user 114755 33/50 current_auc = 0.6062593144560358
User 114755 AUC after training: 0.6056631892697466
User 114755 does not improve AUC. Reverting changes.
Training on augumented user 107237 34/50 current_auc = 0.6062593144560358
User 107237 AUC after training: 0.6058122205663189
User 107237 does not improve AUC. Reverting changes.
Training on augumented user 94696 35/50 current_auc = 0.6062593144560358
User 94696 AUC after training: 0.6056035767511178
User 94696 does not improve AUC. Reverting changes.
Training on augumented user 51263 36/50 current_auc = 0.6062593144560358
User 51263 AUC after training: 0.6061698956780923
User 51263 does not improve AUC. Reverting changes.
Training on augumented user 44361 37/50 current_auc = 0.6062593144560358
User 44361 AUC after training: 0.6061102831594635
User 44361 does not improve AUC. Reverting changes.
Training on augumented user 26951 38/50 current_auc = 0.6062593144560358
User 26951 AUC after training: 0.6061400894187778
User 26951 does not improve AUC. Reverting changes.
Training on augumented user 59197 39/50 current_auc = 0.6062593144560358
User 59197 AUC after training: 0.6045305514157974
User 59197 does not improve AUC. Reverting changes.
Training on augumented user 99863 40/50 current_auc = 0.6062593144560358
User 99863 AUC after training: 0.6043219076005961
User 99863 does not improve AUC. Reverting changes.
Training on augumented user 33741 41/50 current_auc = 0.6062593144560358
User 33741 AUC after training: 0.6058420268256335
User 33741 does not improve AUC. Reverting changes.
Training on augumented user 107552 42/50 current_auc = 0.6062593144560358
User 107552 AUC after training: 0.6061251862891207
User 107552 does not improve AUC. Reverting changes.
Training on augumented user 41730 43/50 current_auc = 0.6062593144560358
User 41730 AUC after training: 0.6061997019374069
User 41730 does not improve AUC. Reverting changes.
Training on augumented user 54220 44/50 current_auc = 0.6062593144560358
User 54220 AUC after training: 0.6063487332339792
User 54220 improves AUC. Keeping the model.
Training on augumented user 123593 45/50 current_auc = 0.6063487332339792
User 123593 AUC after training: 0.6053651266766021
User 123593 does not improve AUC. Reverting changes.
Training on augumented user 85148 46/50 current_auc = 0.6063487332339792
User 85148 AUC after training: 0.605365126676602
User 85148 does not improve AUC. Reverting changes.
Training on augumented user 97065 47/50 current_auc = 0.6063487332339792
User 97065 AUC after training: 0.6057228017883755
User 97065 does not improve AUC. Reverting changes.
Training on augumented user 107501 48/50 current_auc = 0.6063487332339792
User 107501 AUC after training: 0.6059612518628913
User 107501 does not improve AUC. Reverting changes.
Training on augumented user 53352 49/50 current_auc = 0.6063487332339792
User 53352 AUC after training: 0.6066467958271237
User 53352 improves AUC. Keeping the model.
[2024-12-02 20:04:13.677455] start test user 20134 268/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:14.317993] start test user 20134 268/568 recall augumented users by random, augumented_users = [70774, 30647, 52439, 102582, 44392, 129481, 51798, 131111, 121274, 48005, 97444, 101907, 73106, 50297, 48728, 101901, 31815, 134243, 36414, 137769, 105155, 35443, 131086, 133104, 60653, 115086, 28081, 56676, 53749, 100317, 35250, 79256, 38309, 131763, 127772, 131853, 27677, 51533, 110697, 12769, 28004, 56454, 42443, 4578, 87516, 1553, 98380, 54581, 124299, 75454]
[2024-12-02 20:04:14.333625] user = 20134 Cloud 268/568
[2024-12-02 20:04:14.347830] user = 20134 Local 268/568
[2024-12-02 20:04:14.407211] user = 20134 Local+ 268/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:17.599885] user = 20134 MPDA- 268/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6825657894736843
Training on augumented user 70774 0/50 current_auc = 0.6825657894736843
User 70774 AUC after training: 0.6822368421052631
User 70774 does not improve AUC. Reverting changes.
Training on augumented user 30647 1/50 current_auc = 0.6825657894736843
User 30647 AUC after training: 0.6822368421052631
User 30647 does not improve AUC. Reverting changes.
Training on augumented user 52439 2/50 current_auc = 0.6825657894736843
User 52439 AUC after training: 0.6782894736842104
User 52439 does not improve AUC. Reverting changes.
Training on augumented user 102582 3/50 current_auc = 0.6825657894736843
User 102582 AUC after training: 0.6822368421052631
User 102582 does not improve AUC. Reverting changes.
Training on augumented user 44392 4/50 current_auc = 0.6825657894736843
User 44392 AUC after training: 0.6822368421052631
User 44392 does not improve AUC. Reverting changes.
Training on augumented user 129481 5/50 current_auc = 0.6825657894736843
User 129481 AUC after training: 0.6825657894736843
User 129481 does not improve AUC. Reverting changes.
Training on augumented user 51798 6/50 current_auc = 0.6825657894736843
User 51798 AUC after training: 0.6825657894736843
User 51798 does not improve AUC. Reverting changes.
Training on augumented user 131111 7/50 current_auc = 0.6825657894736843
User 131111 AUC after training: 0.6815789473684211
User 131111 does not improve AUC. Reverting changes.
Training on augumented user 121274 8/50 current_auc = 0.6825657894736843
User 121274 AUC after training: 0.6822368421052631
User 121274 does not improve AUC. Reverting changes.
Training on augumented user 48005 9/50 current_auc = 0.6825657894736843
User 48005 AUC after training: 0.6815789473684211
User 48005 does not improve AUC. Reverting changes.
Training on augumented user 97444 10/50 current_auc = 0.6825657894736843
User 97444 AUC after training: 0.680921052631579
User 97444 does not improve AUC. Reverting changes.
Training on augumented user 101907 11/50 current_auc = 0.6825657894736843
User 101907 AUC after training: 0.6822368421052631
User 101907 does not improve AUC. Reverting changes.
Training on augumented user 73106 12/50 current_auc = 0.6825657894736843
User 73106 AUC after training: 0.6825657894736843
User 73106 does not improve AUC. Reverting changes.
Training on augumented user 50297 13/50 current_auc = 0.6825657894736843
User 50297 AUC after training: 0.6861842105263158
User 50297 improves AUC. Keeping the model.
Training on augumented user 48728 14/50 current_auc = 0.6861842105263158
User 48728 AUC after training: 0.6855263157894738
User 48728 does not improve AUC. Reverting changes.
Training on augumented user 101901 15/50 current_auc = 0.6861842105263158
User 101901 AUC after training: 0.6868421052631579
User 101901 improves AUC. Keeping the model.
Training on augumented user 31815 16/50 current_auc = 0.6868421052631579
User 31815 AUC after training: 0.6855263157894737
User 31815 does not improve AUC. Reverting changes.
Training on augumented user 134243 17/50 current_auc = 0.6868421052631579
User 134243 AUC after training: 0.6868421052631579
User 134243 does not improve AUC. Reverting changes.
Training on augumented user 36414 18/50 current_auc = 0.6868421052631579
User 36414 AUC after training: 0.6861842105263158
User 36414 does not improve AUC. Reverting changes.
Training on augumented user 137769 19/50 current_auc = 0.6868421052631579
User 137769 AUC after training: 0.6861842105263158
User 137769 does not improve AUC. Reverting changes.
Training on augumented user 105155 20/50 current_auc = 0.6868421052631579
User 105155 AUC after training: 0.6848684210526317
User 105155 does not improve AUC. Reverting changes.
Training on augumented user 35443 21/50 current_auc = 0.6868421052631579
User 35443 AUC after training: 0.6861842105263158
User 35443 does not improve AUC. Reverting changes.
Training on augumented user 131086 22/50 current_auc = 0.6868421052631579
User 131086 AUC after training: 0.6855263157894738
User 131086 does not improve AUC. Reverting changes.
Training on augumented user 133104 23/50 current_auc = 0.6868421052631579
User 133104 AUC after training: 0.6868421052631579
User 133104 does not improve AUC. Reverting changes.
Training on augumented user 60653 24/50 current_auc = 0.6868421052631579
User 60653 AUC after training: 0.6855263157894737
User 60653 does not improve AUC. Reverting changes.
Training on augumented user 115086 25/50 current_auc = 0.6868421052631579
User 115086 AUC after training: 0.6861842105263158
User 115086 does not improve AUC. Reverting changes.
Training on augumented user 28081 26/50 current_auc = 0.6868421052631579
User 28081 AUC after training: 0.6868421052631579
User 28081 does not improve AUC. Reverting changes.
Training on augumented user 56676 27/50 current_auc = 0.6868421052631579
User 56676 AUC after training: 0.6868421052631579
User 56676 does not improve AUC. Reverting changes.
Training on augumented user 53749 28/50 current_auc = 0.6868421052631579
User 53749 AUC after training: 0.6868421052631579
User 53749 does not improve AUC. Reverting changes.
Training on augumented user 100317 29/50 current_auc = 0.6868421052631579
User 100317 AUC after training: 0.6848684210526317
User 100317 does not improve AUC. Reverting changes.
Training on augumented user 35250 30/50 current_auc = 0.6868421052631579
User 35250 AUC after training: 0.6868421052631579
User 35250 does not improve AUC. Reverting changes.
Training on augumented user 79256 31/50 current_auc = 0.6868421052631579
User 79256 AUC after training: 0.6855263157894738
User 79256 does not improve AUC. Reverting changes.
Training on augumented user 38309 32/50 current_auc = 0.6868421052631579
User 38309 AUC after training: 0.6868421052631579
User 38309 does not improve AUC. Reverting changes.
Training on augumented user 131763 33/50 current_auc = 0.6868421052631579
User 131763 AUC after training: 0.6848684210526316
User 131763 does not improve AUC. Reverting changes.
Training on augumented user 127772 34/50 current_auc = 0.6868421052631579
User 127772 AUC after training: 0.6861842105263158
User 127772 does not improve AUC. Reverting changes.
Training on augumented user 131853 35/50 current_auc = 0.6868421052631579
User 131853 AUC after training: 0.6861842105263158
User 131853 does not improve AUC. Reverting changes.
Training on augumented user 27677 36/50 current_auc = 0.6868421052631579
User 27677 AUC after training: 0.6875
User 27677 improves AUC. Keeping the model.
Training on augumented user 51533 37/50 current_auc = 0.6875
User 51533 AUC after training: 0.6868421052631579
User 51533 does not improve AUC. Reverting changes.
Training on augumented user 110697 38/50 current_auc = 0.6875
User 110697 AUC after training: 0.6868421052631579
User 110697 does not improve AUC. Reverting changes.
Training on augumented user 12769 39/50 current_auc = 0.6875
User 12769 AUC after training: 0.6868421052631579
User 12769 does not improve AUC. Reverting changes.
Training on augumented user 28004 40/50 current_auc = 0.6875
User 28004 AUC after training: 0.6868421052631579
User 28004 does not improve AUC. Reverting changes.
Training on augumented user 56454 41/50 current_auc = 0.6875
User 56454 AUC after training: 0.6861842105263158
User 56454 does not improve AUC. Reverting changes.
Training on augumented user 42443 42/50 current_auc = 0.6875
User 42443 AUC after training: 0.6868421052631579
User 42443 does not improve AUC. Reverting changes.
Training on augumented user 4578 43/50 current_auc = 0.6875
User 4578 AUC after training: 0.6881578947368421
User 4578 improves AUC. Keeping the model.
Training on augumented user 87516 44/50 current_auc = 0.6881578947368421
User 87516 AUC after training: 0.6888157894736842
User 87516 improves AUC. Keeping the model.
Training on augumented user 1553 45/50 current_auc = 0.6888157894736842
User 1553 AUC after training: 0.6881578947368421
User 1553 does not improve AUC. Reverting changes.
Training on augumented user 98380 46/50 current_auc = 0.6888157894736842
User 98380 AUC after training: 0.6875
User 98380 does not improve AUC. Reverting changes.
Training on augumented user 54581 47/50 current_auc = 0.6888157894736842
User 54581 AUC after training: 0.6888157894736842
User 54581 does not improve AUC. Reverting changes.
Training on augumented user 124299 48/50 current_auc = 0.6888157894736842
User 124299 AUC after training: 0.6881578947368421
User 124299 does not improve AUC. Reverting changes.
Training on augumented user 75454 49/50 current_auc = 0.6888157894736842
User 75454 AUC after training: 0.6881578947368421
User 75454 does not improve AUC. Reverting changes.
[2024-12-02 20:04:43.319885] start test user 20152 269/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:43.752356] start test user 20152 269/568 recall augumented users by random, augumented_users = [7464, 93036, 85039, 123555, 26296, 27771, 114598, 19554, 107206, 13071, 121243, 429, 9560, 31778, 52011, 110431, 99705, 133290, 103319, 51000, 14484, 122251, 7864, 133065, 69695, 23427, 73301, 23179, 80765, 44157, 113506, 125004, 1105, 120542, 20683, 52306, 90381, 76510, 20000, 48403, 61300, 109497, 35555, 76326, 101392, 107552, 55426, 102050, 88031, 19704]
[2024-12-02 20:04:43.766816] user = 20152 Cloud 269/568
[2024-12-02 20:04:43.779558] user = 20152 Local 269/568
[2024-12-02 20:04:43.811856] user = 20152 Local+ 269/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:46.805917] user = 20152 MPDA- 269/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6388888888888888
Training on augumented user 7464 0/50 current_auc = 0.6388888888888888
User 7464 AUC after training: 0.6402116402116402
User 7464 improves AUC. Keeping the model.
Training on augumented user 93036 1/50 current_auc = 0.6402116402116402
User 93036 AUC after training: 0.6402116402116402
User 93036 does not improve AUC. Reverting changes.
Training on augumented user 85039 2/50 current_auc = 0.6402116402116402
User 85039 AUC after training: 0.6402116402116402
User 85039 does not improve AUC. Reverting changes.
Training on augumented user 123555 3/50 current_auc = 0.6402116402116402
User 123555 AUC after training: 0.6402116402116402
User 123555 does not improve AUC. Reverting changes.
Training on augumented user 26296 4/50 current_auc = 0.6402116402116402
User 26296 AUC after training: 0.6388888888888888
User 26296 does not improve AUC. Reverting changes.
Training on augumented user 27771 5/50 current_auc = 0.6402116402116402
User 27771 AUC after training: 0.6402116402116402
User 27771 does not improve AUC. Reverting changes.
Training on augumented user 114598 6/50 current_auc = 0.6402116402116402
User 114598 AUC after training: 0.6402116402116402
User 114598 does not improve AUC. Reverting changes.
Training on augumented user 19554 7/50 current_auc = 0.6402116402116402
User 19554 AUC after training: 0.6402116402116402
User 19554 does not improve AUC. Reverting changes.
Training on augumented user 107206 8/50 current_auc = 0.6402116402116402
User 107206 AUC after training: 0.6402116402116402
User 107206 does not improve AUC. Reverting changes.
Training on augumented user 13071 9/50 current_auc = 0.6402116402116402
User 13071 AUC after training: 0.6402116402116402
User 13071 does not improve AUC. Reverting changes.
Training on augumented user 121243 10/50 current_auc = 0.6402116402116402
User 121243 AUC after training: 0.6402116402116402
User 121243 does not improve AUC. Reverting changes.
Training on augumented user 429 11/50 current_auc = 0.6402116402116402
User 429 AUC after training: 0.6388888888888888
User 429 does not improve AUC. Reverting changes.
Training on augumented user 9560 12/50 current_auc = 0.6402116402116402
User 9560 AUC after training: 0.6402116402116402
User 9560 does not improve AUC. Reverting changes.
Training on augumented user 31778 13/50 current_auc = 0.6402116402116402
User 31778 AUC after training: 0.6402116402116402
User 31778 does not improve AUC. Reverting changes.
Training on augumented user 52011 14/50 current_auc = 0.6402116402116402
User 52011 AUC after training: 0.6402116402116402
User 52011 does not improve AUC. Reverting changes.
Training on augumented user 110431 15/50 current_auc = 0.6402116402116402
User 110431 AUC after training: 0.6388888888888888
User 110431 does not improve AUC. Reverting changes.
Training on augumented user 99705 16/50 current_auc = 0.6402116402116402
User 99705 AUC after training: 0.6402116402116402
User 99705 does not improve AUC. Reverting changes.
Training on augumented user 133290 17/50 current_auc = 0.6402116402116402
User 133290 AUC after training: 0.6402116402116402
User 133290 does not improve AUC. Reverting changes.
Training on augumented user 103319 18/50 current_auc = 0.6402116402116402
User 103319 AUC after training: 0.6402116402116402
User 103319 does not improve AUC. Reverting changes.
Training on augumented user 51000 19/50 current_auc = 0.6402116402116402
User 51000 AUC after training: 0.6402116402116402
User 51000 does not improve AUC. Reverting changes.
Training on augumented user 14484 20/50 current_auc = 0.6402116402116402
User 14484 AUC after training: 0.6402116402116402
User 14484 does not improve AUC. Reverting changes.
Training on augumented user 122251 21/50 current_auc = 0.6402116402116402
User 122251 AUC after training: 0.6375661375661376
User 122251 does not improve AUC. Reverting changes.
Training on augumented user 7864 22/50 current_auc = 0.6402116402116402
User 7864 AUC after training: 0.6402116402116402
User 7864 does not improve AUC. Reverting changes.
Training on augumented user 133065 23/50 current_auc = 0.6402116402116402
User 133065 AUC after training: 0.6415343915343916
User 133065 improves AUC. Keeping the model.
Training on augumented user 69695 24/50 current_auc = 0.6415343915343916
User 69695 AUC after training: 0.6415343915343916
User 69695 does not improve AUC. Reverting changes.
Training on augumented user 23427 25/50 current_auc = 0.6415343915343916
User 23427 AUC after training: 0.6415343915343916
User 23427 does not improve AUC. Reverting changes.
Training on augumented user 73301 26/50 current_auc = 0.6415343915343916
User 73301 AUC after training: 0.6388888888888888
User 73301 does not improve AUC. Reverting changes.
Training on augumented user 23179 27/50 current_auc = 0.6415343915343916
User 23179 AUC after training: 0.6441798941798942
User 23179 improves AUC. Keeping the model.
Training on augumented user 80765 28/50 current_auc = 0.6441798941798942
User 80765 AUC after training: 0.6441798941798942
User 80765 does not improve AUC. Reverting changes.
Training on augumented user 44157 29/50 current_auc = 0.6441798941798942
User 44157 AUC after training: 0.6441798941798942
User 44157 does not improve AUC. Reverting changes.
Training on augumented user 113506 30/50 current_auc = 0.6441798941798942
User 113506 AUC after training: 0.6415343915343915
User 113506 does not improve AUC. Reverting changes.
Training on augumented user 125004 31/50 current_auc = 0.6441798941798942
User 125004 AUC after training: 0.6428571428571429
User 125004 does not improve AUC. Reverting changes.
Training on augumented user 1105 32/50 current_auc = 0.6441798941798942
User 1105 AUC after training: 0.6428571428571428
User 1105 does not improve AUC. Reverting changes.
Training on augumented user 120542 33/50 current_auc = 0.6441798941798942
User 120542 AUC after training: 0.6428571428571429
User 120542 does not improve AUC. Reverting changes.
Training on augumented user 20683 34/50 current_auc = 0.6441798941798942
User 20683 AUC after training: 0.6428571428571429
User 20683 does not improve AUC. Reverting changes.
Training on augumented user 52306 35/50 current_auc = 0.6441798941798942
User 52306 AUC after training: 0.6441798941798942
User 52306 does not improve AUC. Reverting changes.
Training on augumented user 90381 36/50 current_auc = 0.6441798941798942
User 90381 AUC after training: 0.6415343915343915
User 90381 does not improve AUC. Reverting changes.
Training on augumented user 76510 37/50 current_auc = 0.6441798941798942
User 76510 AUC after training: 0.6441798941798942
User 76510 does not improve AUC. Reverting changes.
Training on augumented user 20000 38/50 current_auc = 0.6441798941798942
User 20000 AUC after training: 0.6428571428571428
User 20000 does not improve AUC. Reverting changes.
Training on augumented user 48403 39/50 current_auc = 0.6441798941798942
User 48403 AUC after training: 0.6388888888888888
User 48403 does not improve AUC. Reverting changes.
Training on augumented user 61300 40/50 current_auc = 0.6441798941798942
User 61300 AUC after training: 0.6441798941798942
User 61300 does not improve AUC. Reverting changes.
Training on augumented user 109497 41/50 current_auc = 0.6441798941798942
User 109497 AUC after training: 0.6402116402116402
User 109497 does not improve AUC. Reverting changes.
Training on augumented user 35555 42/50 current_auc = 0.6441798941798942
User 35555 AUC after training: 0.6441798941798942
User 35555 does not improve AUC. Reverting changes.
Training on augumented user 76326 43/50 current_auc = 0.6441798941798942
User 76326 AUC after training: 0.6415343915343916
User 76326 does not improve AUC. Reverting changes.
Training on augumented user 101392 44/50 current_auc = 0.6441798941798942
User 101392 AUC after training: 0.6441798941798942
User 101392 does not improve AUC. Reverting changes.
Training on augumented user 107552 45/50 current_auc = 0.6441798941798942
User 107552 AUC after training: 0.6455026455026456
User 107552 improves AUC. Keeping the model.
Training on augumented user 55426 46/50 current_auc = 0.6455026455026456
User 55426 AUC after training: 0.6428571428571428
User 55426 does not improve AUC. Reverting changes.
Training on augumented user 102050 47/50 current_auc = 0.6455026455026456
User 102050 AUC after training: 0.6455026455026456
User 102050 does not improve AUC. Reverting changes.
Training on augumented user 88031 48/50 current_auc = 0.6455026455026456
User 88031 AUC after training: 0.6428571428571429
User 88031 does not improve AUC. Reverting changes.
Training on augumented user 19704 49/50 current_auc = 0.6455026455026456
User 19704 AUC after training: 0.6441798941798942
User 19704 does not improve AUC. Reverting changes.
[2024-12-02 20:05:15.223008] start test user 20241 270/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:15.635979] start test user 20241 270/568 recall augumented users by random, augumented_users = [63257, 6196, 43721, 38817, 107910, 61216, 93357, 129466, 7763, 47226, 11308, 99496, 71934, 70583, 103007, 92045, 40177, 86227, 4170, 12871, 47520, 124737, 47324, 41633, 12864, 106609, 11321, 34889, 71764, 72159, 64098, 114164, 124380, 126516, 55550, 128540, 67214, 58384, 67476, 43252, 9901, 7896, 85848, 42381, 76404, 118899, 43884, 26400, 81932, 29057]
[2024-12-02 20:05:15.651083] user = 20241 Cloud 270/568
[2024-12-02 20:05:15.661357] user = 20241 Local 270/568
[2024-12-02 20:05:15.716576] user = 20241 Local+ 270/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:17.389409] user = 20241 MPDA- 270/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.696103896103896
Training on augumented user 63257 0/50 current_auc = 0.696103896103896
User 63257 AUC after training: 0.696103896103896
User 63257 does not improve AUC. Reverting changes.
Training on augumented user 6196 1/50 current_auc = 0.696103896103896
User 6196 AUC after training: 0.6935064935064935
User 6196 does not improve AUC. Reverting changes.
Training on augumented user 43721 2/50 current_auc = 0.696103896103896
User 43721 AUC after training: 0.6935064935064935
User 43721 does not improve AUC. Reverting changes.
Training on augumented user 38817 3/50 current_auc = 0.696103896103896
User 38817 AUC after training: 0.696103896103896
User 38817 does not improve AUC. Reverting changes.
Training on augumented user 107910 4/50 current_auc = 0.696103896103896
User 107910 AUC after training: 0.6948051948051949
User 107910 does not improve AUC. Reverting changes.
Training on augumented user 61216 5/50 current_auc = 0.696103896103896
User 61216 AUC after training: 0.696103896103896
User 61216 does not improve AUC. Reverting changes.
Training on augumented user 93357 6/50 current_auc = 0.696103896103896
User 93357 AUC after training: 0.6974025974025974
User 93357 improves AUC. Keeping the model.
Training on augumented user 129466 7/50 current_auc = 0.6974025974025974
User 129466 AUC after training: 0.6935064935064935
User 129466 does not improve AUC. Reverting changes.
Training on augumented user 7763 8/50 current_auc = 0.6974025974025974
User 7763 AUC after training: 0.6974025974025974
User 7763 does not improve AUC. Reverting changes.
Training on augumented user 47226 9/50 current_auc = 0.6974025974025974
User 47226 AUC after training: 0.696103896103896
User 47226 does not improve AUC. Reverting changes.
Training on augumented user 11308 10/50 current_auc = 0.6974025974025974
User 11308 AUC after training: 0.6974025974025974
User 11308 does not improve AUC. Reverting changes.
Training on augumented user 99496 11/50 current_auc = 0.6974025974025974
User 99496 AUC after training: 0.6974025974025974
User 99496 does not improve AUC. Reverting changes.
Training on augumented user 71934 12/50 current_auc = 0.6974025974025974
User 71934 AUC after training: 0.6987012987012987
User 71934 improves AUC. Keeping the model.
Training on augumented user 70583 13/50 current_auc = 0.6987012987012987
User 70583 AUC after training: 0.6974025974025974
User 70583 does not improve AUC. Reverting changes.
Training on augumented user 103007 14/50 current_auc = 0.6987012987012987
User 103007 AUC after training: 0.6948051948051949
User 103007 does not improve AUC. Reverting changes.
Training on augumented user 92045 15/50 current_auc = 0.6987012987012987
User 92045 AUC after training: 0.6948051948051949
User 92045 does not improve AUC. Reverting changes.
Training on augumented user 40177 16/50 current_auc = 0.6987012987012987
User 40177 AUC after training: 0.696103896103896
User 40177 does not improve AUC. Reverting changes.
Training on augumented user 86227 17/50 current_auc = 0.6987012987012987
User 86227 AUC after training: 0.6987012987012987
User 86227 does not improve AUC. Reverting changes.
Training on augumented user 4170 18/50 current_auc = 0.6987012987012987
User 4170 AUC after training: 0.696103896103896
User 4170 does not improve AUC. Reverting changes.
Training on augumented user 12871 19/50 current_auc = 0.6987012987012987
User 12871 AUC after training: 0.6974025974025974
User 12871 does not improve AUC. Reverting changes.
Training on augumented user 47520 20/50 current_auc = 0.6987012987012987
User 47520 AUC after training: 0.6974025974025974
User 47520 does not improve AUC. Reverting changes.
Training on augumented user 124737 21/50 current_auc = 0.6987012987012987
User 124737 AUC after training: 0.696103896103896
User 124737 does not improve AUC. Reverting changes.
Training on augumented user 47324 22/50 current_auc = 0.6987012987012987
User 47324 AUC after training: 0.6974025974025974
User 47324 does not improve AUC. Reverting changes.
Training on augumented user 41633 23/50 current_auc = 0.6987012987012987
User 41633 AUC after training: 0.6987012987012987
User 41633 does not improve AUC. Reverting changes.
Training on augumented user 12864 24/50 current_auc = 0.6987012987012987
User 12864 AUC after training: 0.696103896103896
User 12864 does not improve AUC. Reverting changes.
Training on augumented user 106609 25/50 current_auc = 0.6987012987012987
User 106609 AUC after training: 0.6974025974025974
User 106609 does not improve AUC. Reverting changes.
Training on augumented user 11321 26/50 current_auc = 0.6987012987012987
User 11321 AUC after training: 0.696103896103896
User 11321 does not improve AUC. Reverting changes.
Training on augumented user 34889 27/50 current_auc = 0.6987012987012987
User 34889 AUC after training: 0.6974025974025974
User 34889 does not improve AUC. Reverting changes.
Training on augumented user 71764 28/50 current_auc = 0.6987012987012987
User 71764 AUC after training: 0.6974025974025974
User 71764 does not improve AUC. Reverting changes.
Training on augumented user 72159 29/50 current_auc = 0.6987012987012987
User 72159 AUC after training: 0.6935064935064935
User 72159 does not improve AUC. Reverting changes.
Training on augumented user 64098 30/50 current_auc = 0.6987012987012987
User 64098 AUC after training: 0.6987012987012987
User 64098 does not improve AUC. Reverting changes.
Training on augumented user 114164 31/50 current_auc = 0.6987012987012987
User 114164 AUC after training: 0.6987012987012987
User 114164 does not improve AUC. Reverting changes.
Training on augumented user 124380 32/50 current_auc = 0.6987012987012987
User 124380 AUC after training: 0.6974025974025974
User 124380 does not improve AUC. Reverting changes.
Training on augumented user 126516 33/50 current_auc = 0.6987012987012987
User 126516 AUC after training: 0.696103896103896
User 126516 does not improve AUC. Reverting changes.
Training on augumented user 55550 34/50 current_auc = 0.6987012987012987
User 55550 AUC after training: 0.6987012987012987
User 55550 does not improve AUC. Reverting changes.
Training on augumented user 128540 35/50 current_auc = 0.6987012987012987
User 128540 AUC after training: 0.6974025974025974
User 128540 does not improve AUC. Reverting changes.
Training on augumented user 67214 36/50 current_auc = 0.6987012987012987
User 67214 AUC after training: 0.696103896103896
User 67214 does not improve AUC. Reverting changes.
Training on augumented user 58384 37/50 current_auc = 0.6987012987012987
User 58384 AUC after training: 0.696103896103896
User 58384 does not improve AUC. Reverting changes.
Training on augumented user 67476 38/50 current_auc = 0.6987012987012987
User 67476 AUC after training: 0.6974025974025974
User 67476 does not improve AUC. Reverting changes.
Training on augumented user 43252 39/50 current_auc = 0.6987012987012987
User 43252 AUC after training: 0.6974025974025974
User 43252 does not improve AUC. Reverting changes.
Training on augumented user 9901 40/50 current_auc = 0.6987012987012987
User 9901 AUC after training: 0.6935064935064935
User 9901 does not improve AUC. Reverting changes.
Training on augumented user 7896 41/50 current_auc = 0.6987012987012987
User 7896 AUC after training: 0.696103896103896
User 7896 does not improve AUC. Reverting changes.
Training on augumented user 85848 42/50 current_auc = 0.6987012987012987
User 85848 AUC after training: 0.6974025974025974
User 85848 does not improve AUC. Reverting changes.
Training on augumented user 42381 43/50 current_auc = 0.6987012987012987
User 42381 AUC after training: 0.6987012987012987
User 42381 does not improve AUC. Reverting changes.
Training on augumented user 76404 44/50 current_auc = 0.6987012987012987
User 76404 AUC after training: 0.6909090909090909
User 76404 does not improve AUC. Reverting changes.
Training on augumented user 118899 45/50 current_auc = 0.6987012987012987
User 118899 AUC after training: 0.6987012987012987
User 118899 does not improve AUC. Reverting changes.
Training on augumented user 43884 46/50 current_auc = 0.6987012987012987
User 43884 AUC after training: 0.6974025974025974
User 43884 does not improve AUC. Reverting changes.
Training on augumented user 26400 47/50 current_auc = 0.6987012987012987
User 26400 AUC after training: 0.6974025974025974
User 26400 does not improve AUC. Reverting changes.
Training on augumented user 81932 48/50 current_auc = 0.6987012987012987
User 81932 AUC after training: 0.6974025974025974
User 81932 does not improve AUC. Reverting changes.
Training on augumented user 29057 49/50 current_auc = 0.6987012987012987
User 29057 AUC after training: 0.6974025974025974
User 29057 does not improve AUC. Reverting changes.
[2024-12-02 20:05:47.917868] start test user 20261 271/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:48.392046] start test user 20261 271/568 recall augumented users by random, augumented_users = [64695, 69172, 63467, 3259, 66293, 80629, 90836, 4115, 138256, 118153, 109610, 80766, 58968, 21434, 7711, 89205, 114952, 91137, 104843, 101679, 28888, 99951, 123126, 9465, 129602, 130839, 23808, 45875, 25713, 30740, 130458, 114244, 113548, 23744, 70771, 54426, 136024, 124883, 37391, 17998, 22648, 74742, 38759, 64292, 94968, 78019, 39256, 50639, 22772, 69691]
[2024-12-02 20:05:48.407519] user = 20261 Cloud 271/568
[2024-12-02 20:05:48.436824] user = 20261 Local 271/568
[2024-12-02 20:05:48.501666] user = 20261 Local+ 271/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:50.370783] user = 20261 MPDA- 271/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6790865384615384
Training on augumented user 64695 0/50 current_auc = 0.6790865384615384
User 64695 AUC after training: 0.6790865384615384
User 64695 does not improve AUC. Reverting changes.
Training on augumented user 69172 1/50 current_auc = 0.6790865384615384
User 69172 AUC after training: 0.6790865384615384
User 69172 does not improve AUC. Reverting changes.
Training on augumented user 63467 2/50 current_auc = 0.6790865384615384
User 63467 AUC after training: 0.6790865384615384
User 63467 does not improve AUC. Reverting changes.
Training on augumented user 3259 3/50 current_auc = 0.6790865384615384
User 3259 AUC after training: 0.6766826923076923
User 3259 does not improve AUC. Reverting changes.
Training on augumented user 66293 4/50 current_auc = 0.6790865384615384
User 66293 AUC after training: 0.6742788461538461
User 66293 does not improve AUC. Reverting changes.
Training on augumented user 80629 5/50 current_auc = 0.6790865384615384
User 80629 AUC after training: 0.6766826923076923
User 80629 does not improve AUC. Reverting changes.
Training on augumented user 90836 6/50 current_auc = 0.6790865384615384
User 90836 AUC after training: 0.6790865384615384
User 90836 does not improve AUC. Reverting changes.
Training on augumented user 4115 7/50 current_auc = 0.6790865384615384
User 4115 AUC after training: 0.6790865384615384
User 4115 does not improve AUC. Reverting changes.
Training on augumented user 138256 8/50 current_auc = 0.6790865384615384
User 138256 AUC after training: 0.6802884615384616
User 138256 improves AUC. Keeping the model.
Training on augumented user 118153 9/50 current_auc = 0.6802884615384616
User 118153 AUC after training: 0.6826923076923077
User 118153 improves AUC. Keeping the model.
Training on augumented user 109610 10/50 current_auc = 0.6826923076923077
User 109610 AUC after training: 0.6766826923076923
User 109610 does not improve AUC. Reverting changes.
Training on augumented user 80766 11/50 current_auc = 0.6826923076923077
User 80766 AUC after training: 0.6778846153846154
User 80766 does not improve AUC. Reverting changes.
Training on augumented user 58968 12/50 current_auc = 0.6826923076923077
User 58968 AUC after training: 0.6802884615384616
User 58968 does not improve AUC. Reverting changes.
Training on augumented user 21434 13/50 current_auc = 0.6826923076923077
User 21434 AUC after training: 0.6826923076923077
User 21434 does not improve AUC. Reverting changes.
Training on augumented user 7711 14/50 current_auc = 0.6826923076923077
User 7711 AUC after training: 0.6838942307692308
User 7711 improves AUC. Keeping the model.
Training on augumented user 89205 15/50 current_auc = 0.6838942307692308
User 89205 AUC after training: 0.6838942307692308
User 89205 does not improve AUC. Reverting changes.
Training on augumented user 114952 16/50 current_auc = 0.6838942307692308
User 114952 AUC after training: 0.6814903846153846
User 114952 does not improve AUC. Reverting changes.
Training on augumented user 91137 17/50 current_auc = 0.6838942307692308
User 91137 AUC after training: 0.6814903846153846
User 91137 does not improve AUC. Reverting changes.
Training on augumented user 104843 18/50 current_auc = 0.6838942307692308
User 104843 AUC after training: 0.6814903846153846
User 104843 does not improve AUC. Reverting changes.
Training on augumented user 101679 19/50 current_auc = 0.6838942307692308
User 101679 AUC after training: 0.6826923076923077
User 101679 does not improve AUC. Reverting changes.
Training on augumented user 28888 20/50 current_auc = 0.6838942307692308
User 28888 AUC after training: 0.6790865384615385
User 28888 does not improve AUC. Reverting changes.
Training on augumented user 99951 21/50 current_auc = 0.6838942307692308
User 99951 AUC after training: 0.6778846153846154
User 99951 does not improve AUC. Reverting changes.
Training on augumented user 123126 22/50 current_auc = 0.6838942307692308
User 123126 AUC after training: 0.6814903846153846
User 123126 does not improve AUC. Reverting changes.
Training on augumented user 9465 23/50 current_auc = 0.6838942307692308
User 9465 AUC after training: 0.6826923076923077
User 9465 does not improve AUC. Reverting changes.
Training on augumented user 129602 24/50 current_auc = 0.6838942307692308
User 129602 AUC after training: 0.6802884615384616
User 129602 does not improve AUC. Reverting changes.
Training on augumented user 130839 25/50 current_auc = 0.6838942307692308
User 130839 AUC after training: 0.6814903846153847
User 130839 does not improve AUC. Reverting changes.
Training on augumented user 23808 26/50 current_auc = 0.6838942307692308
User 23808 AUC after training: 0.6790865384615384
User 23808 does not improve AUC. Reverting changes.
Training on augumented user 45875 27/50 current_auc = 0.6838942307692308
User 45875 AUC after training: 0.6838942307692308
User 45875 does not improve AUC. Reverting changes.
Training on augumented user 25713 28/50 current_auc = 0.6838942307692308
User 25713 AUC after training: 0.6814903846153846
User 25713 does not improve AUC. Reverting changes.
Training on augumented user 30740 29/50 current_auc = 0.6838942307692308
User 30740 AUC after training: 0.6778846153846154
User 30740 does not improve AUC. Reverting changes.
Training on augumented user 130458 30/50 current_auc = 0.6838942307692308
User 130458 AUC after training: 0.6802884615384616
User 130458 does not improve AUC. Reverting changes.
Training on augumented user 114244 31/50 current_auc = 0.6838942307692308
User 114244 AUC after training: 0.6766826923076923
User 114244 does not improve AUC. Reverting changes.
Training on augumented user 113548 32/50 current_auc = 0.6838942307692308
User 113548 AUC after training: 0.6814903846153846
User 113548 does not improve AUC. Reverting changes.
Training on augumented user 23744 33/50 current_auc = 0.6838942307692308
User 23744 AUC after training: 0.6850961538461539
User 23744 improves AUC. Keeping the model.
Training on augumented user 70771 34/50 current_auc = 0.6850961538461539
User 70771 AUC after training: 0.6802884615384616
User 70771 does not improve AUC. Reverting changes.
Training on augumented user 54426 35/50 current_auc = 0.6850961538461539
User 54426 AUC after training: 0.6790865384615385
User 54426 does not improve AUC. Reverting changes.
Training on augumented user 136024 36/50 current_auc = 0.6850961538461539
User 136024 AUC after training: 0.6826923076923077
User 136024 does not improve AUC. Reverting changes.
Training on augumented user 124883 37/50 current_auc = 0.6850961538461539
User 124883 AUC after training: 0.6850961538461539
User 124883 does not improve AUC. Reverting changes.
Training on augumented user 37391 38/50 current_auc = 0.6850961538461539
User 37391 AUC after training: 0.6850961538461539
User 37391 does not improve AUC. Reverting changes.
Training on augumented user 17998 39/50 current_auc = 0.6850961538461539
User 17998 AUC after training: 0.6814903846153846
User 17998 does not improve AUC. Reverting changes.
Training on augumented user 22648 40/50 current_auc = 0.6850961538461539
User 22648 AUC after training: 0.6850961538461539
User 22648 does not improve AUC. Reverting changes.
Training on augumented user 74742 41/50 current_auc = 0.6850961538461539
User 74742 AUC after training: 0.6838942307692308
User 74742 does not improve AUC. Reverting changes.
Training on augumented user 38759 42/50 current_auc = 0.6850961538461539
User 38759 AUC after training: 0.6850961538461539
User 38759 does not improve AUC. Reverting changes.
Training on augumented user 64292 43/50 current_auc = 0.6850961538461539
User 64292 AUC after training: 0.6838942307692307
User 64292 does not improve AUC. Reverting changes.
Training on augumented user 94968 44/50 current_auc = 0.6850961538461539
User 94968 AUC after training: 0.6850961538461539
User 94968 does not improve AUC. Reverting changes.
Training on augumented user 78019 45/50 current_auc = 0.6850961538461539
User 78019 AUC after training: 0.6850961538461539
User 78019 does not improve AUC. Reverting changes.
Training on augumented user 39256 46/50 current_auc = 0.6850961538461539
User 39256 AUC after training: 0.6802884615384616
User 39256 does not improve AUC. Reverting changes.
Training on augumented user 50639 47/50 current_auc = 0.6850961538461539
User 50639 AUC after training: 0.6850961538461539
User 50639 does not improve AUC. Reverting changes.
Training on augumented user 22772 48/50 current_auc = 0.6850961538461539
User 22772 AUC after training: 0.6850961538461539
User 22772 does not improve AUC. Reverting changes.
Training on augumented user 69691 49/50 current_auc = 0.6850961538461539
User 69691 AUC after training: 0.6826923076923077
User 69691 does not improve AUC. Reverting changes.
[2024-12-02 20:06:20.351479] start test user 20273 272/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:21.056390] start test user 20273 272/568 recall augumented users by random, augumented_users = [41359, 121517, 35933, 73115, 114353, 31005, 11126, 112841, 110786, 124389, 55139, 65624, 19061, 92606, 104190, 61048, 76604, 129975, 55244, 45522, 123158, 75419, 121772, 3164, 100161, 113412, 71994, 15693, 137136, 7019, 8867, 134957, 17594, 69401, 65909, 91781, 44642, 6591, 95659, 113621, 16324, 37324, 77674, 27995, 117983, 103264, 7073, 5918, 56375, 120208]
[2024-12-02 20:06:21.081781] user = 20273 Cloud 272/568
[2024-12-02 20:06:21.110017] user = 20273 Local 272/568
[2024-12-02 20:06:21.364761] user = 20273 Local+ 272/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:23.725277] user = 20273 MPDA- 272/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.508235294117647
Training on augumented user 41359 0/50 current_auc = 0.508235294117647
User 41359 AUC after training: 0.508235294117647
User 41359 does not improve AUC. Reverting changes.
Training on augumented user 121517 1/50 current_auc = 0.508235294117647
User 121517 AUC after training: 0.508235294117647
User 121517 does not improve AUC. Reverting changes.
Training on augumented user 35933 2/50 current_auc = 0.508235294117647
User 35933 AUC after training: 0.5105882352941177
User 35933 improves AUC. Keeping the model.
Training on augumented user 73115 3/50 current_auc = 0.5105882352941177
User 73115 AUC after training: 0.5129411764705882
User 73115 improves AUC. Keeping the model.
Training on augumented user 114353 4/50 current_auc = 0.5129411764705882
User 114353 AUC after training: 0.5117647058823529
User 114353 does not improve AUC. Reverting changes.
Training on augumented user 31005 5/50 current_auc = 0.5129411764705882
User 31005 AUC after training: 0.5129411764705882
User 31005 does not improve AUC. Reverting changes.
Training on augumented user 11126 6/50 current_auc = 0.5129411764705882
User 11126 AUC after training: 0.5117647058823529
User 11126 does not improve AUC. Reverting changes.
Training on augumented user 112841 7/50 current_auc = 0.5129411764705882
User 112841 AUC after training: 0.5117647058823529
User 112841 does not improve AUC. Reverting changes.
Training on augumented user 110786 8/50 current_auc = 0.5129411764705882
User 110786 AUC after training: 0.5129411764705882
User 110786 does not improve AUC. Reverting changes.
Training on augumented user 124389 9/50 current_auc = 0.5129411764705882
User 124389 AUC after training: 0.5129411764705882
User 124389 does not improve AUC. Reverting changes.
Training on augumented user 55139 10/50 current_auc = 0.5129411764705882
User 55139 AUC after training: 0.5164705882352941
User 55139 improves AUC. Keeping the model.
Training on augumented user 65624 11/50 current_auc = 0.5164705882352941
User 65624 AUC after training: 0.5117647058823529
User 65624 does not improve AUC. Reverting changes.
Training on augumented user 19061 12/50 current_auc = 0.5164705882352941
User 19061 AUC after training: 0.5176470588235293
User 19061 improves AUC. Keeping the model.
Training on augumented user 92606 13/50 current_auc = 0.5176470588235293
User 92606 AUC after training: 0.5117647058823529
User 92606 does not improve AUC. Reverting changes.
Training on augumented user 104190 14/50 current_auc = 0.5176470588235293
User 104190 AUC after training: 0.5176470588235293
User 104190 does not improve AUC. Reverting changes.
Training on augumented user 61048 15/50 current_auc = 0.5176470588235293
User 61048 AUC after training: 0.5164705882352941
User 61048 does not improve AUC. Reverting changes.
Training on augumented user 76604 16/50 current_auc = 0.5176470588235293
User 76604 AUC after training: 0.5176470588235293
User 76604 does not improve AUC. Reverting changes.
Training on augumented user 129975 17/50 current_auc = 0.5176470588235293
User 129975 AUC after training: 0.516470588235294
User 129975 does not improve AUC. Reverting changes.
Training on augumented user 55244 18/50 current_auc = 0.5176470588235293
User 55244 AUC after training: 0.5129411764705882
User 55244 does not improve AUC. Reverting changes.
Training on augumented user 45522 19/50 current_auc = 0.5176470588235293
User 45522 AUC after training: 0.5164705882352941
User 45522 does not improve AUC. Reverting changes.
Training on augumented user 123158 20/50 current_auc = 0.5176470588235293
User 123158 AUC after training: 0.5141176470588235
User 123158 does not improve AUC. Reverting changes.
Training on augumented user 75419 21/50 current_auc = 0.5176470588235293
User 75419 AUC after training: 0.5164705882352941
User 75419 does not improve AUC. Reverting changes.
Training on augumented user 121772 22/50 current_auc = 0.5176470588235293
User 121772 AUC after training: 0.5152941176470588
User 121772 does not improve AUC. Reverting changes.
Training on augumented user 3164 23/50 current_auc = 0.5176470588235293
User 3164 AUC after training: 0.5152941176470588
User 3164 does not improve AUC. Reverting changes.
Training on augumented user 100161 24/50 current_auc = 0.5176470588235293
User 100161 AUC after training: 0.516470588235294
User 100161 does not improve AUC. Reverting changes.
Training on augumented user 113412 25/50 current_auc = 0.5176470588235293
User 113412 AUC after training: 0.5152941176470588
User 113412 does not improve AUC. Reverting changes.
Training on augumented user 71994 26/50 current_auc = 0.5176470588235293
User 71994 AUC after training: 0.5152941176470588
User 71994 does not improve AUC. Reverting changes.
Training on augumented user 15693 27/50 current_auc = 0.5176470588235293
User 15693 AUC after training: 0.5176470588235293
User 15693 does not improve AUC. Reverting changes.
Training on augumented user 137136 28/50 current_auc = 0.5176470588235293
User 137136 AUC after training: 0.5164705882352941
User 137136 does not improve AUC. Reverting changes.
Training on augumented user 7019 29/50 current_auc = 0.5176470588235293
User 7019 AUC after training: 0.5176470588235293
User 7019 does not improve AUC. Reverting changes.
Training on augumented user 8867 30/50 current_auc = 0.5176470588235293
User 8867 AUC after training: 0.5152941176470588
User 8867 does not improve AUC. Reverting changes.
Training on augumented user 134957 31/50 current_auc = 0.5176470588235293
User 134957 AUC after training: 0.5188235294117647
User 134957 improves AUC. Keeping the model.
Training on augumented user 17594 32/50 current_auc = 0.5188235294117647
User 17594 AUC after training: 0.516470588235294
User 17594 does not improve AUC. Reverting changes.
Training on augumented user 69401 33/50 current_auc = 0.5188235294117647
User 69401 AUC after training: 0.5176470588235293
User 69401 does not improve AUC. Reverting changes.
Training on augumented user 65909 34/50 current_auc = 0.5188235294117647
User 65909 AUC after training: 0.5176470588235293
User 65909 does not improve AUC. Reverting changes.
Training on augumented user 91781 35/50 current_auc = 0.5188235294117647
User 91781 AUC after training: 0.516470588235294
User 91781 does not improve AUC. Reverting changes.
Training on augumented user 44642 36/50 current_auc = 0.5188235294117647
User 44642 AUC after training: 0.5188235294117647
User 44642 does not improve AUC. Reverting changes.
Training on augumented user 6591 37/50 current_auc = 0.5188235294117647
User 6591 AUC after training: 0.5141176470588236
User 6591 does not improve AUC. Reverting changes.
Training on augumented user 95659 38/50 current_auc = 0.5188235294117647
User 95659 AUC after training: 0.5176470588235293
User 95659 does not improve AUC. Reverting changes.
Training on augumented user 113621 39/50 current_auc = 0.5188235294117647
User 113621 AUC after training: 0.5117647058823529
User 113621 does not improve AUC. Reverting changes.
Training on augumented user 16324 40/50 current_auc = 0.5188235294117647
User 16324 AUC after training: 0.516470588235294
User 16324 does not improve AUC. Reverting changes.
Training on augumented user 37324 41/50 current_auc = 0.5188235294117647
User 37324 AUC after training: 0.5164705882352941
User 37324 does not improve AUC. Reverting changes.
Training on augumented user 77674 42/50 current_auc = 0.5188235294117647
User 77674 AUC after training: 0.516470588235294
User 77674 does not improve AUC. Reverting changes.
Training on augumented user 27995 43/50 current_auc = 0.5188235294117647
User 27995 AUC after training: 0.5176470588235293
User 27995 does not improve AUC. Reverting changes.
Training on augumented user 117983 44/50 current_auc = 0.5188235294117647
User 117983 AUC after training: 0.5117647058823529
User 117983 does not improve AUC. Reverting changes.
Training on augumented user 103264 45/50 current_auc = 0.5188235294117647
User 103264 AUC after training: 0.516470588235294
User 103264 does not improve AUC. Reverting changes.
Training on augumented user 7073 46/50 current_auc = 0.5188235294117647
User 7073 AUC after training: 0.5176470588235293
User 7073 does not improve AUC. Reverting changes.
Training on augumented user 5918 47/50 current_auc = 0.5188235294117647
User 5918 AUC after training: 0.5152941176470588
User 5918 does not improve AUC. Reverting changes.
Training on augumented user 56375 48/50 current_auc = 0.5188235294117647
User 56375 AUC after training: 0.5170588235294118
User 56375 does not improve AUC. Reverting changes.
Training on augumented user 120208 49/50 current_auc = 0.5188235294117647
User 120208 AUC after training: 0.5176470588235293
User 120208 does not improve AUC. Reverting changes.
[2024-12-02 20:06:54.835125] start test user 20313 273/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:55.447007] start test user 20313 273/568 recall augumented users by random, augumented_users = [28099, 2191, 103966, 38805, 42027, 112834, 17563, 97460, 115078, 74560, 42070, 138200, 95347, 130960, 109649, 41443, 21983, 46582, 48370, 133621, 58608, 121704, 92738, 75004, 50094, 83036, 73151, 54295, 31898, 132137, 54983, 27564, 7329, 44868, 26940, 94157, 106440, 135652, 65066, 96532, 20341, 128368, 81035, 92932, 113992, 128065, 28291, 96052, 27837, 105000]
[2024-12-02 20:06:55.462409] user = 20313 Cloud 273/568
[2024-12-02 20:06:55.472148] user = 20313 Local 273/568
[2024-12-02 20:06:55.602365] user = 20313 Local+ 273/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:58.439395] user = 20313 MPDA- 273/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5555555555555556
Training on augumented user 28099 0/50 current_auc = 0.5555555555555556
User 28099 AUC after training: 0.5555555555555556
User 28099 does not improve AUC. Reverting changes.
Training on augumented user 2191 1/50 current_auc = 0.5555555555555556
User 2191 AUC after training: 0.5555555555555556
User 2191 does not improve AUC. Reverting changes.
Training on augumented user 103966 2/50 current_auc = 0.5555555555555556
User 103966 AUC after training: 0.5555555555555556
User 103966 does not improve AUC. Reverting changes.
Training on augumented user 38805 3/50 current_auc = 0.5555555555555556
User 38805 AUC after training: 0.5555555555555556
User 38805 does not improve AUC. Reverting changes.
Training on augumented user 42027 4/50 current_auc = 0.5555555555555556
User 42027 AUC after training: 0.5555555555555556
User 42027 does not improve AUC. Reverting changes.
Training on augumented user 112834 5/50 current_auc = 0.5555555555555556
User 112834 AUC after training: 0.5555555555555556
User 112834 does not improve AUC. Reverting changes.
Training on augumented user 17563 6/50 current_auc = 0.5555555555555556
User 17563 AUC after training: 0.5555555555555556
User 17563 does not improve AUC. Reverting changes.
Training on augumented user 97460 7/50 current_auc = 0.5555555555555556
User 97460 AUC after training: 0.5555555555555556
User 97460 does not improve AUC. Reverting changes.
Training on augumented user 115078 8/50 current_auc = 0.5555555555555556
User 115078 AUC after training: 0.5555555555555556
User 115078 does not improve AUC. Reverting changes.
Training on augumented user 74560 9/50 current_auc = 0.5555555555555556
User 74560 AUC after training: 0.5555555555555556
User 74560 does not improve AUC. Reverting changes.
Training on augumented user 42070 10/50 current_auc = 0.5555555555555556
User 42070 AUC after training: 0.5555555555555556
User 42070 does not improve AUC. Reverting changes.
Training on augumented user 138200 11/50 current_auc = 0.5555555555555556
User 138200 AUC after training: 0.5555555555555556
User 138200 does not improve AUC. Reverting changes.
Training on augumented user 95347 12/50 current_auc = 0.5555555555555556
User 95347 AUC after training: 0.5555555555555556
User 95347 does not improve AUC. Reverting changes.
Training on augumented user 130960 13/50 current_auc = 0.5555555555555556
User 130960 AUC after training: 0.5555555555555556
User 130960 does not improve AUC. Reverting changes.
Training on augumented user 109649 14/50 current_auc = 0.5555555555555556
User 109649 AUC after training: 0.5555555555555556
User 109649 does not improve AUC. Reverting changes.
Training on augumented user 41443 15/50 current_auc = 0.5555555555555556
User 41443 AUC after training: 0.5555555555555556
User 41443 does not improve AUC. Reverting changes.
Training on augumented user 21983 16/50 current_auc = 0.5555555555555556
User 21983 AUC after training: 0.5555555555555556
User 21983 does not improve AUC. Reverting changes.
Training on augumented user 46582 17/50 current_auc = 0.5555555555555556
User 46582 AUC after training: 0.5555555555555556
User 46582 does not improve AUC. Reverting changes.
Training on augumented user 48370 18/50 current_auc = 0.5555555555555556
User 48370 AUC after training: 0.5555555555555556
User 48370 does not improve AUC. Reverting changes.
Training on augumented user 133621 19/50 current_auc = 0.5555555555555556
User 133621 AUC after training: 0.5555555555555556
User 133621 does not improve AUC. Reverting changes.
Training on augumented user 58608 20/50 current_auc = 0.5555555555555556
User 58608 AUC after training: 0.5555555555555556
User 58608 does not improve AUC. Reverting changes.
Training on augumented user 121704 21/50 current_auc = 0.5555555555555556
User 121704 AUC after training: 0.5555555555555556
User 121704 does not improve AUC. Reverting changes.
Training on augumented user 92738 22/50 current_auc = 0.5555555555555556
User 92738 AUC after training: 0.5555555555555556
User 92738 does not improve AUC. Reverting changes.
Training on augumented user 75004 23/50 current_auc = 0.5555555555555556
User 75004 AUC after training: 0.5555555555555556
User 75004 does not improve AUC. Reverting changes.
Training on augumented user 50094 24/50 current_auc = 0.5555555555555556
User 50094 AUC after training: 0.5555555555555556
User 50094 does not improve AUC. Reverting changes.
Training on augumented user 83036 25/50 current_auc = 0.5555555555555556
User 83036 AUC after training: 0.5555555555555556
User 83036 does not improve AUC. Reverting changes.
Training on augumented user 73151 26/50 current_auc = 0.5555555555555556
User 73151 AUC after training: 0.5555555555555556
User 73151 does not improve AUC. Reverting changes.
Training on augumented user 54295 27/50 current_auc = 0.5555555555555556
User 54295 AUC after training: 0.5555555555555556
User 54295 does not improve AUC. Reverting changes.
Training on augumented user 31898 28/50 current_auc = 0.5555555555555556
User 31898 AUC after training: 0.5555555555555556
User 31898 does not improve AUC. Reverting changes.
Training on augumented user 132137 29/50 current_auc = 0.5555555555555556
User 132137 AUC after training: 0.5555555555555556
User 132137 does not improve AUC. Reverting changes.
Training on augumented user 54983 30/50 current_auc = 0.5555555555555556
User 54983 AUC after training: 0.5555555555555556
User 54983 does not improve AUC. Reverting changes.
Training on augumented user 27564 31/50 current_auc = 0.5555555555555556
User 27564 AUC after training: 0.5555555555555556
User 27564 does not improve AUC. Reverting changes.
Training on augumented user 7329 32/50 current_auc = 0.5555555555555556
User 7329 AUC after training: 0.5555555555555556
User 7329 does not improve AUC. Reverting changes.
Training on augumented user 44868 33/50 current_auc = 0.5555555555555556
User 44868 AUC after training: 0.5555555555555556
User 44868 does not improve AUC. Reverting changes.
Training on augumented user 26940 34/50 current_auc = 0.5555555555555556
User 26940 AUC after training: 0.5555555555555556
User 26940 does not improve AUC. Reverting changes.
Training on augumented user 94157 35/50 current_auc = 0.5555555555555556
User 94157 AUC after training: 0.5555555555555556
User 94157 does not improve AUC. Reverting changes.
Training on augumented user 106440 36/50 current_auc = 0.5555555555555556
User 106440 AUC after training: 0.5555555555555556
User 106440 does not improve AUC. Reverting changes.
Training on augumented user 135652 37/50 current_auc = 0.5555555555555556
User 135652 AUC after training: 0.5555555555555556
User 135652 does not improve AUC. Reverting changes.
Training on augumented user 65066 38/50 current_auc = 0.5555555555555556
User 65066 AUC after training: 0.5555555555555556
User 65066 does not improve AUC. Reverting changes.
Training on augumented user 96532 39/50 current_auc = 0.5555555555555556
User 96532 AUC after training: 0.5555555555555556
User 96532 does not improve AUC. Reverting changes.
Training on augumented user 20341 40/50 current_auc = 0.5555555555555556
User 20341 AUC after training: 0.5555555555555556
User 20341 does not improve AUC. Reverting changes.
Training on augumented user 128368 41/50 current_auc = 0.5555555555555556
User 128368 AUC after training: 0.5555555555555556
User 128368 does not improve AUC. Reverting changes.
Training on augumented user 81035 42/50 current_auc = 0.5555555555555556
User 81035 AUC after training: 0.5555555555555556
User 81035 does not improve AUC. Reverting changes.
Training on augumented user 92932 43/50 current_auc = 0.5555555555555556
User 92932 AUC after training: 0.5555555555555556
User 92932 does not improve AUC. Reverting changes.
Training on augumented user 113992 44/50 current_auc = 0.5555555555555556
User 113992 AUC after training: 0.5555555555555556
User 113992 does not improve AUC. Reverting changes.
Training on augumented user 128065 45/50 current_auc = 0.5555555555555556
User 128065 AUC after training: 0.5555555555555556
User 128065 does not improve AUC. Reverting changes.
Training on augumented user 28291 46/50 current_auc = 0.5555555555555556
User 28291 AUC after training: 0.5555555555555556
User 28291 does not improve AUC. Reverting changes.
Training on augumented user 96052 47/50 current_auc = 0.5555555555555556
User 96052 AUC after training: 0.5555555555555556
User 96052 does not improve AUC. Reverting changes.
Training on augumented user 27837 48/50 current_auc = 0.5555555555555556
User 27837 AUC after training: 0.5555555555555556
User 27837 does not improve AUC. Reverting changes.
Training on augumented user 105000 49/50 current_auc = 0.5555555555555556
User 105000 AUC after training: 0.5555555555555556
User 105000 does not improve AUC. Reverting changes.
[2024-12-02 20:07:23.907840] start test user 20322 274/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:24.351053] start test user 20322 274/568 recall augumented users by random, augumented_users = [123069, 98568, 122862, 2940, 96000, 122372, 58738, 39910, 89771, 110770, 91893, 128089, 43109, 37769, 18526, 43325, 74967, 23297, 76596, 48957, 94740, 14664, 91971, 130050, 137997, 4766, 77490, 25458, 30423, 10927, 136627, 41339, 23607, 44497, 17995, 61649, 87174, 10531, 129125, 8407, 72921, 94973, 8863, 71013, 66245, 115932, 19013, 77166, 6045, 25471]
[2024-12-02 20:07:24.365720] user = 20322 Cloud 274/568
[2024-12-02 20:07:24.388281] user = 20322 Local 274/568
[2024-12-02 20:07:24.408718] user = 20322 Local+ 274/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:26.893725] user = 20322 MPDA- 274/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6586666666666667
Training on augumented user 123069 0/50 current_auc = 0.6586666666666667
User 123069 AUC after training: 0.6586666666666667
User 123069 does not improve AUC. Reverting changes.
Training on augumented user 98568 1/50 current_auc = 0.6586666666666667
User 98568 AUC after training: 0.6586666666666667
User 98568 does not improve AUC. Reverting changes.
Training on augumented user 122862 2/50 current_auc = 0.6586666666666667
User 122862 AUC after training: 0.6506666666666667
User 122862 does not improve AUC. Reverting changes.
Training on augumented user 2940 3/50 current_auc = 0.6586666666666667
User 2940 AUC after training: 0.656
User 2940 does not improve AUC. Reverting changes.
Training on augumented user 96000 4/50 current_auc = 0.6586666666666667
User 96000 AUC after training: 0.6586666666666667
User 96000 does not improve AUC. Reverting changes.
Training on augumented user 122372 5/50 current_auc = 0.6586666666666667
User 122372 AUC after training: 0.656
User 122372 does not improve AUC. Reverting changes.
Training on augumented user 58738 6/50 current_auc = 0.6586666666666667
User 58738 AUC after training: 0.6533333333333333
User 58738 does not improve AUC. Reverting changes.
Training on augumented user 39910 7/50 current_auc = 0.6586666666666667
User 39910 AUC after training: 0.6586666666666667
User 39910 does not improve AUC. Reverting changes.
Training on augumented user 89771 8/50 current_auc = 0.6586666666666667
User 89771 AUC after training: 0.6586666666666667
User 89771 does not improve AUC. Reverting changes.
Training on augumented user 110770 9/50 current_auc = 0.6586666666666667
User 110770 AUC after training: 0.6586666666666667
User 110770 does not improve AUC. Reverting changes.
Training on augumented user 91893 10/50 current_auc = 0.6586666666666667
User 91893 AUC after training: 0.6586666666666667
User 91893 does not improve AUC. Reverting changes.
Training on augumented user 128089 11/50 current_auc = 0.6586666666666667
User 128089 AUC after training: 0.6586666666666667
User 128089 does not improve AUC. Reverting changes.
Training on augumented user 43109 12/50 current_auc = 0.6586666666666667
User 43109 AUC after training: 0.6586666666666667
User 43109 does not improve AUC. Reverting changes.
Training on augumented user 37769 13/50 current_auc = 0.6586666666666667
User 37769 AUC after training: 0.656
User 37769 does not improve AUC. Reverting changes.
Training on augumented user 18526 14/50 current_auc = 0.6586666666666667
User 18526 AUC after training: 0.6533333333333333
User 18526 does not improve AUC. Reverting changes.
Training on augumented user 43325 15/50 current_auc = 0.6586666666666667
User 43325 AUC after training: 0.656
User 43325 does not improve AUC. Reverting changes.
Training on augumented user 74967 16/50 current_auc = 0.6586666666666667
User 74967 AUC after training: 0.6533333333333333
User 74967 does not improve AUC. Reverting changes.
Training on augumented user 23297 17/50 current_auc = 0.6586666666666667
User 23297 AUC after training: 0.6586666666666667
User 23297 does not improve AUC. Reverting changes.
Training on augumented user 76596 18/50 current_auc = 0.6586666666666667
User 76596 AUC after training: 0.6586666666666667
User 76596 does not improve AUC. Reverting changes.
Training on augumented user 48957 19/50 current_auc = 0.6586666666666667
User 48957 AUC after training: 0.656
User 48957 does not improve AUC. Reverting changes.
Training on augumented user 94740 20/50 current_auc = 0.6586666666666667
User 94740 AUC after training: 0.6613333333333333
User 94740 improves AUC. Keeping the model.
Training on augumented user 14664 21/50 current_auc = 0.6613333333333333
User 14664 AUC after training: 0.6613333333333333
User 14664 does not improve AUC. Reverting changes.
Training on augumented user 91971 22/50 current_auc = 0.6613333333333333
User 91971 AUC after training: 0.6586666666666667
User 91971 does not improve AUC. Reverting changes.
Training on augumented user 130050 23/50 current_auc = 0.6613333333333333
User 130050 AUC after training: 0.6586666666666667
User 130050 does not improve AUC. Reverting changes.
Training on augumented user 137997 24/50 current_auc = 0.6613333333333333
User 137997 AUC after training: 0.6613333333333333
User 137997 does not improve AUC. Reverting changes.
Training on augumented user 4766 25/50 current_auc = 0.6613333333333333
User 4766 AUC after training: 0.6586666666666667
User 4766 does not improve AUC. Reverting changes.
Training on augumented user 77490 26/50 current_auc = 0.6613333333333333
User 77490 AUC after training: 0.6613333333333333
User 77490 does not improve AUC. Reverting changes.
Training on augumented user 25458 27/50 current_auc = 0.6613333333333333
User 25458 AUC after training: 0.6586666666666667
User 25458 does not improve AUC. Reverting changes.
Training on augumented user 30423 28/50 current_auc = 0.6613333333333333
User 30423 AUC after training: 0.6613333333333333
User 30423 does not improve AUC. Reverting changes.
Training on augumented user 10927 29/50 current_auc = 0.6613333333333333
User 10927 AUC after training: 0.6613333333333333
User 10927 does not improve AUC. Reverting changes.
Training on augumented user 136627 30/50 current_auc = 0.6613333333333333
User 136627 AUC after training: 0.6613333333333333
User 136627 does not improve AUC. Reverting changes.
Training on augumented user 41339 31/50 current_auc = 0.6613333333333333
User 41339 AUC after training: 0.6613333333333333
User 41339 does not improve AUC. Reverting changes.
Training on augumented user 23607 32/50 current_auc = 0.6613333333333333
User 23607 AUC after training: 0.6613333333333333
User 23607 does not improve AUC. Reverting changes.
Training on augumented user 44497 33/50 current_auc = 0.6613333333333333
User 44497 AUC after training: 0.6586666666666667
User 44497 does not improve AUC. Reverting changes.
Training on augumented user 17995 34/50 current_auc = 0.6613333333333333
User 17995 AUC after training: 0.6613333333333333
User 17995 does not improve AUC. Reverting changes.
Training on augumented user 61649 35/50 current_auc = 0.6613333333333333
User 61649 AUC after training: 0.6613333333333333
User 61649 does not improve AUC. Reverting changes.
Training on augumented user 87174 36/50 current_auc = 0.6613333333333333
User 87174 AUC after training: 0.6613333333333333
User 87174 does not improve AUC. Reverting changes.
Training on augumented user 10531 37/50 current_auc = 0.6613333333333333
User 10531 AUC after training: 0.6586666666666667
User 10531 does not improve AUC. Reverting changes.
Training on augumented user 129125 38/50 current_auc = 0.6613333333333333
User 129125 AUC after training: 0.6613333333333333
User 129125 does not improve AUC. Reverting changes.
Training on augumented user 8407 39/50 current_auc = 0.6613333333333333
User 8407 AUC after training: 0.6586666666666667
User 8407 does not improve AUC. Reverting changes.
Training on augumented user 72921 40/50 current_auc = 0.6613333333333333
User 72921 AUC after training: 0.6613333333333333
User 72921 does not improve AUC. Reverting changes.
Training on augumented user 94973 41/50 current_auc = 0.6613333333333333
User 94973 AUC after training: 0.6613333333333333
User 94973 does not improve AUC. Reverting changes.
Training on augumented user 8863 42/50 current_auc = 0.6613333333333333
User 8863 AUC after training: 0.6613333333333333
User 8863 does not improve AUC. Reverting changes.
Training on augumented user 71013 43/50 current_auc = 0.6613333333333333
User 71013 AUC after training: 0.6613333333333333
User 71013 does not improve AUC. Reverting changes.
Training on augumented user 66245 44/50 current_auc = 0.6613333333333333
User 66245 AUC after training: 0.6586666666666667
User 66245 does not improve AUC. Reverting changes.
Training on augumented user 115932 45/50 current_auc = 0.6613333333333333
User 115932 AUC after training: 0.656
User 115932 does not improve AUC. Reverting changes.
Training on augumented user 19013 46/50 current_auc = 0.6613333333333333
User 19013 AUC after training: 0.656
User 19013 does not improve AUC. Reverting changes.
Training on augumented user 77166 47/50 current_auc = 0.6613333333333333
User 77166 AUC after training: 0.6586666666666667
User 77166 does not improve AUC. Reverting changes.
Training on augumented user 6045 48/50 current_auc = 0.6613333333333333
User 6045 AUC after training: 0.6586666666666667
User 6045 does not improve AUC. Reverting changes.
Training on augumented user 25471 49/50 current_auc = 0.6613333333333333
User 25471 AUC after training: 0.6613333333333333
User 25471 does not improve AUC. Reverting changes.
[2024-12-02 20:07:55.308588] start test user 20364 275/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:55.749660] start test user 20364 275/568 recall augumented users by random, augumented_users = [7781, 106780, 59000, 58629, 28709, 117582, 126153, 37949, 63822, 114834, 125137, 86279, 99435, 112863, 83012, 77901, 16393, 69885, 71773, 34756, 1465, 86449, 119353, 58635, 42914, 70595, 126255, 82087, 74852, 34203, 59888, 19206, 122647, 40997, 69550, 17816, 102120, 113800, 22637, 35202, 88526, 117549, 83181, 67827, 33114, 91024, 54175, 46614, 52262, 133839]
[2024-12-02 20:07:55.764800] user = 20364 Cloud 275/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:07:55.771713] user = 20364 Local 275/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:07:55.788034] user = 20364 Local+ 275/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:07:57.449920] user = 20364 MPDA- 275/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 7781 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7781 AUC after training: 0.5
User 7781 does not improve AUC. Reverting changes.
Training on augumented user 106780 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106780 AUC after training: 0.5
User 106780 does not improve AUC. Reverting changes.
Training on augumented user 59000 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59000 AUC after training: 0.5
User 59000 does not improve AUC. Reverting changes.
Training on augumented user 58629 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58629 AUC after training: 0.5
User 58629 does not improve AUC. Reverting changes.
Training on augumented user 28709 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28709 AUC after training: 0.5
User 28709 does not improve AUC. Reverting changes.
Training on augumented user 117582 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117582 AUC after training: 0.5
User 117582 does not improve AUC. Reverting changes.
Training on augumented user 126153 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126153 AUC after training: 0.5
User 126153 does not improve AUC. Reverting changes.
Training on augumented user 37949 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37949 AUC after training: 0.5
User 37949 does not improve AUC. Reverting changes.
Training on augumented user 63822 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63822 AUC after training: 0.5
User 63822 does not improve AUC. Reverting changes.
Training on augumented user 114834 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114834 AUC after training: 0.5
User 114834 does not improve AUC. Reverting changes.
Training on augumented user 125137 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125137 AUC after training: 0.5
User 125137 does not improve AUC. Reverting changes.
Training on augumented user 86279 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86279 AUC after training: 0.5
User 86279 does not improve AUC. Reverting changes.
Training on augumented user 99435 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99435 AUC after training: 0.5
User 99435 does not improve AUC. Reverting changes.
Training on augumented user 112863 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112863 AUC after training: 0.5
User 112863 does not improve AUC. Reverting changes.
Training on augumented user 83012 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83012 AUC after training: 0.5
User 83012 does not improve AUC. Reverting changes.
Training on augumented user 77901 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77901 AUC after training: 0.5
User 77901 does not improve AUC. Reverting changes.
Training on augumented user 16393 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16393 AUC after training: 0.5
User 16393 does not improve AUC. Reverting changes.
Training on augumented user 69885 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69885 AUC after training: 0.5
User 69885 does not improve AUC. Reverting changes.
Training on augumented user 71773 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71773 AUC after training: 0.5
User 71773 does not improve AUC. Reverting changes.
Training on augumented user 34756 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34756 AUC after training: 0.5
User 34756 does not improve AUC. Reverting changes.
Training on augumented user 1465 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1465 AUC after training: 0.5
User 1465 does not improve AUC. Reverting changes.
Training on augumented user 86449 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86449 AUC after training: 0.5
User 86449 does not improve AUC. Reverting changes.
Training on augumented user 119353 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119353 AUC after training: 0.5
User 119353 does not improve AUC. Reverting changes.
Training on augumented user 58635 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58635 AUC after training: 0.5
User 58635 does not improve AUC. Reverting changes.
Training on augumented user 42914 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42914 AUC after training: 0.5
User 42914 does not improve AUC. Reverting changes.
Training on augumented user 70595 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70595 AUC after training: 0.5
User 70595 does not improve AUC. Reverting changes.
Training on augumented user 126255 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126255 AUC after training: 0.5
User 126255 does not improve AUC. Reverting changes.
Training on augumented user 82087 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82087 AUC after training: 0.5
User 82087 does not improve AUC. Reverting changes.
Training on augumented user 74852 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74852 AUC after training: 0.5
User 74852 does not improve AUC. Reverting changes.
Training on augumented user 34203 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34203 AUC after training: 0.5
User 34203 does not improve AUC. Reverting changes.
Training on augumented user 59888 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59888 AUC after training: 0.5
User 59888 does not improve AUC. Reverting changes.
Training on augumented user 19206 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19206 AUC after training: 0.5
User 19206 does not improve AUC. Reverting changes.
Training on augumented user 122647 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122647 AUC after training: 0.5
User 122647 does not improve AUC. Reverting changes.
Training on augumented user 40997 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40997 AUC after training: 0.5
User 40997 does not improve AUC. Reverting changes.
Training on augumented user 69550 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69550 AUC after training: 0.5
User 69550 does not improve AUC. Reverting changes.
Training on augumented user 17816 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17816 AUC after training: 0.5
User 17816 does not improve AUC. Reverting changes.
Training on augumented user 102120 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102120 AUC after training: 0.5
User 102120 does not improve AUC. Reverting changes.
Training on augumented user 113800 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113800 AUC after training: 0.5
User 113800 does not improve AUC. Reverting changes.
Training on augumented user 22637 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22637 AUC after training: 0.5
User 22637 does not improve AUC. Reverting changes.
Training on augumented user 35202 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35202 AUC after training: 0.5
User 35202 does not improve AUC. Reverting changes.
Training on augumented user 88526 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88526 AUC after training: 0.5
User 88526 does not improve AUC. Reverting changes.
Training on augumented user 117549 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117549 AUC after training: 0.5
User 117549 does not improve AUC. Reverting changes.
Training on augumented user 83181 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83181 AUC after training: 0.5
User 83181 does not improve AUC. Reverting changes.
Training on augumented user 67827 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67827 AUC after training: 0.5
User 67827 does not improve AUC. Reverting changes.
Training on augumented user 33114 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33114 AUC after training: 0.5
User 33114 does not improve AUC. Reverting changes.
Training on augumented user 91024 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91024 AUC after training: 0.5
User 91024 does not improve AUC. Reverting changes.
Training on augumented user 54175 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54175 AUC after training: 0.5
User 54175 does not improve AUC. Reverting changes.
Training on augumented user 46614 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46614 AUC after training: 0.5
User 46614 does not improve AUC. Reverting changes.
Training on augumented user 52262 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52262 AUC after training: 0.5
User 52262 does not improve AUC. Reverting changes.
Training on augumented user 133839 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133839 AUC after training: 0.5
User 133839 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:08:19.769517] start test user 20388 276/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:20.454874] start test user 20388 276/568 recall augumented users by random, augumented_users = [43562, 41437, 137154, 15887, 127288, 133465, 79386, 76765, 70405, 51795, 63246, 67439, 32775, 126363, 56129, 55566, 49777, 50037, 22483, 137235, 128269, 53596, 8613, 9028, 46592, 54844, 111120, 109653, 124074, 23890, 46060, 5067, 106971, 38819, 78841, 31447, 135592, 67438, 63063, 67932, 3068, 116438, 57816, 39722, 86814, 120304, 84846, 111443, 123838, 75237]
[2024-12-02 20:08:20.471112] user = 20388 Cloud 276/568
[2024-12-02 20:08:20.493883] user = 20388 Local 276/568
[2024-12-02 20:08:20.614151] user = 20388 Local+ 276/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:23.391353] user = 20388 MPDA- 276/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5580872913992297
Training on augumented user 43562 0/50 current_auc = 0.5580872913992297
User 43562 AUC after training: 0.5571245186136071
User 43562 does not improve AUC. Reverting changes.
Training on augumented user 41437 1/50 current_auc = 0.5580872913992297
User 41437 AUC after training: 0.5574454428754814
User 41437 does not improve AUC. Reverting changes.
Training on augumented user 137154 2/50 current_auc = 0.5580872913992297
User 137154 AUC after training: 0.5593709884467265
User 137154 improves AUC. Keeping the model.
Training on augumented user 15887 3/50 current_auc = 0.5593709884467265
User 15887 AUC after training: 0.5580872913992297
User 15887 does not improve AUC. Reverting changes.
Training on augumented user 127288 4/50 current_auc = 0.5593709884467265
User 127288 AUC after training: 0.5577663671373556
User 127288 does not improve AUC. Reverting changes.
Training on augumented user 133465 5/50 current_auc = 0.5593709884467265
User 133465 AUC after training: 0.5593709884467265
User 133465 does not improve AUC. Reverting changes.
Training on augumented user 79386 6/50 current_auc = 0.5593709884467265
User 79386 AUC after training: 0.5577663671373556
User 79386 does not improve AUC. Reverting changes.
Training on augumented user 76765 7/50 current_auc = 0.5593709884467265
User 76765 AUC after training: 0.5577663671373555
User 76765 does not improve AUC. Reverting changes.
Training on augumented user 70405 8/50 current_auc = 0.5593709884467265
User 70405 AUC after training: 0.5574454428754814
User 70405 does not improve AUC. Reverting changes.
Training on augumented user 51795 9/50 current_auc = 0.5593709884467265
User 51795 AUC after training: 0.5587291399229781
User 51795 does not improve AUC. Reverting changes.
Training on augumented user 63246 10/50 current_auc = 0.5593709884467265
User 63246 AUC after training: 0.5584082156611039
User 63246 does not improve AUC. Reverting changes.
Training on augumented user 67439 11/50 current_auc = 0.5593709884467265
User 67439 AUC after training: 0.5580872913992297
User 67439 does not improve AUC. Reverting changes.
Training on augumented user 32775 12/50 current_auc = 0.5593709884467265
User 32775 AUC after training: 0.5587291399229781
User 32775 does not improve AUC. Reverting changes.
Training on augumented user 126363 13/50 current_auc = 0.5593709884467265
User 126363 AUC after training: 0.5584082156611039
User 126363 does not improve AUC. Reverting changes.
Training on augumented user 56129 14/50 current_auc = 0.5593709884467265
User 56129 AUC after training: 0.5574454428754814
User 56129 does not improve AUC. Reverting changes.
Training on augumented user 55566 15/50 current_auc = 0.5593709884467265
User 55566 AUC after training: 0.5590500641848524
User 55566 does not improve AUC. Reverting changes.
Training on augumented user 49777 16/50 current_auc = 0.5593709884467265
User 49777 AUC after training: 0.558408215661104
User 49777 does not improve AUC. Reverting changes.
Training on augumented user 50037 17/50 current_auc = 0.5593709884467265
User 50037 AUC after training: 0.5587291399229781
User 50037 does not improve AUC. Reverting changes.
Training on augumented user 22483 18/50 current_auc = 0.5593709884467265
User 22483 AUC after training: 0.5577663671373556
User 22483 does not improve AUC. Reverting changes.
Training on augumented user 137235 19/50 current_auc = 0.5593709884467265
User 137235 AUC after training: 0.5580872913992297
User 137235 does not improve AUC. Reverting changes.
Training on augumented user 128269 20/50 current_auc = 0.5593709884467265
User 128269 AUC after training: 0.558408215661104
User 128269 does not improve AUC. Reverting changes.
Training on augumented user 53596 21/50 current_auc = 0.5593709884467265
User 53596 AUC after training: 0.5580872913992297
User 53596 does not improve AUC. Reverting changes.
Training on augumented user 8613 22/50 current_auc = 0.5593709884467265
User 8613 AUC after training: 0.5580872913992297
User 8613 does not improve AUC. Reverting changes.
Training on augumented user 9028 23/50 current_auc = 0.5593709884467265
User 9028 AUC after training: 0.5593709884467266
User 9028 improves AUC. Keeping the model.
Training on augumented user 46592 24/50 current_auc = 0.5593709884467266
User 46592 AUC after training: 0.5596919127086007
User 46592 improves AUC. Keeping the model.
Training on augumented user 54844 25/50 current_auc = 0.5596919127086007
User 54844 AUC after training: 0.5590500641848524
User 54844 does not improve AUC. Reverting changes.
Training on augumented user 111120 26/50 current_auc = 0.5596919127086007
User 111120 AUC after training: 0.5590500641848524
User 111120 does not improve AUC. Reverting changes.
Training on augumented user 109653 27/50 current_auc = 0.5596919127086007
User 109653 AUC after training: 0.5590500641848524
User 109653 does not improve AUC. Reverting changes.
Training on augumented user 124074 28/50 current_auc = 0.5596919127086007
User 124074 AUC after training: 0.5584082156611039
User 124074 does not improve AUC. Reverting changes.
Training on augumented user 23890 29/50 current_auc = 0.5596919127086007
User 23890 AUC after training: 0.5587291399229781
User 23890 does not improve AUC. Reverting changes.
Training on augumented user 46060 30/50 current_auc = 0.5596919127086007
User 46060 AUC after training: 0.558408215661104
User 46060 does not improve AUC. Reverting changes.
Training on augumented user 5067 31/50 current_auc = 0.5596919127086007
User 5067 AUC after training: 0.5593709884467265
User 5067 does not improve AUC. Reverting changes.
Training on augumented user 106971 32/50 current_auc = 0.5596919127086007
User 106971 AUC after training: 0.5593709884467265
User 106971 does not improve AUC. Reverting changes.
Training on augumented user 38819 33/50 current_auc = 0.5596919127086007
User 38819 AUC after training: 0.5593709884467265
User 38819 does not improve AUC. Reverting changes.
Training on augumented user 78841 34/50 current_auc = 0.5596919127086007
User 78841 AUC after training: 0.5574454428754814
User 78841 does not improve AUC. Reverting changes.
Training on augumented user 31447 35/50 current_auc = 0.5596919127086007
User 31447 AUC after training: 0.5587291399229781
User 31447 does not improve AUC. Reverting changes.
Training on augumented user 135592 36/50 current_auc = 0.5596919127086007
User 135592 AUC after training: 0.5577663671373556
User 135592 does not improve AUC. Reverting changes.
Training on augumented user 67438 37/50 current_auc = 0.5596919127086007
User 67438 AUC after training: 0.5577663671373555
User 67438 does not improve AUC. Reverting changes.
Training on augumented user 63063 38/50 current_auc = 0.5596919127086007
User 63063 AUC after training: 0.558408215661104
User 63063 does not improve AUC. Reverting changes.
Training on augumented user 67932 39/50 current_auc = 0.5596919127086007
User 67932 AUC after training: 0.5574454428754814
User 67932 does not improve AUC. Reverting changes.
Training on augumented user 3068 40/50 current_auc = 0.5596919127086007
User 3068 AUC after training: 0.5596919127086007
User 3068 does not improve AUC. Reverting changes.
Training on augumented user 116438 41/50 current_auc = 0.5596919127086007
User 116438 AUC after training: 0.558408215661104
User 116438 does not improve AUC. Reverting changes.
Training on augumented user 57816 42/50 current_auc = 0.5596919127086007
User 57816 AUC after training: 0.5590500641848524
User 57816 does not improve AUC. Reverting changes.
Training on augumented user 39722 43/50 current_auc = 0.5596919127086007
User 39722 AUC after training: 0.5580872913992297
User 39722 does not improve AUC. Reverting changes.
Training on augumented user 86814 44/50 current_auc = 0.5596919127086007
User 86814 AUC after training: 0.5577663671373555
User 86814 does not improve AUC. Reverting changes.
Training on augumented user 120304 45/50 current_auc = 0.5596919127086007
User 120304 AUC after training: 0.5577663671373556
User 120304 does not improve AUC. Reverting changes.
Training on augumented user 84846 46/50 current_auc = 0.5596919127086007
User 84846 AUC after training: 0.5593709884467266
User 84846 does not improve AUC. Reverting changes.
Training on augumented user 111443 47/50 current_auc = 0.5596919127086007
User 111443 AUC after training: 0.5590500641848524
User 111443 does not improve AUC. Reverting changes.
Training on augumented user 123838 48/50 current_auc = 0.5596919127086007
User 123838 AUC after training: 0.5571245186136071
User 123838 does not improve AUC. Reverting changes.
Training on augumented user 75237 49/50 current_auc = 0.5596919127086007
User 75237 AUC after training: 0.5596919127086007
User 75237 does not improve AUC. Reverting changes.
[2024-12-02 20:08:51.746409] start test user 20436 277/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:52.157936] start test user 20436 277/568 recall augumented users by random, augumented_users = [85087, 73359, 49400, 25176, 127011, 67744, 38080, 31238, 95117, 50839, 105131, 91061, 135790, 75655, 3249, 127487, 19071, 43942, 53607, 87432, 33699, 44214, 85742, 127810, 117878, 115241, 46516, 101206, 3167, 54051, 125434, 48803, 128816, 62303, 24559, 35521, 90515, 1541, 53223, 26765, 32097, 134543, 63214, 109476, 105492, 74319, 59936, 93874, 68593, 89914]
[2024-12-02 20:08:52.173054] user = 20436 Cloud 277/568
[2024-12-02 20:08:52.182234] user = 20436 Local 277/568
[2024-12-02 20:08:52.262167] user = 20436 Local+ 277/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:54.412792] user = 20436 MPDA- 277/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 85087 0/50 current_auc = 1.0
User 85087 AUC after training: 1.0
User 85087 does not improve AUC. Reverting changes.
Training on augumented user 73359 1/50 current_auc = 1.0
User 73359 AUC after training: 1.0
User 73359 does not improve AUC. Reverting changes.
Training on augumented user 49400 2/50 current_auc = 1.0
User 49400 AUC after training: 1.0
User 49400 does not improve AUC. Reverting changes.
Training on augumented user 25176 3/50 current_auc = 1.0
User 25176 AUC after training: 1.0
User 25176 does not improve AUC. Reverting changes.
Training on augumented user 127011 4/50 current_auc = 1.0
User 127011 AUC after training: 1.0
User 127011 does not improve AUC. Reverting changes.
Training on augumented user 67744 5/50 current_auc = 1.0
User 67744 AUC after training: 1.0
User 67744 does not improve AUC. Reverting changes.
Training on augumented user 38080 6/50 current_auc = 1.0
User 38080 AUC after training: 1.0
User 38080 does not improve AUC. Reverting changes.
Training on augumented user 31238 7/50 current_auc = 1.0
User 31238 AUC after training: 1.0
User 31238 does not improve AUC. Reverting changes.
Training on augumented user 95117 8/50 current_auc = 1.0
User 95117 AUC after training: 1.0
User 95117 does not improve AUC. Reverting changes.
Training on augumented user 50839 9/50 current_auc = 1.0
User 50839 AUC after training: 1.0
User 50839 does not improve AUC. Reverting changes.
Training on augumented user 105131 10/50 current_auc = 1.0
User 105131 AUC after training: 1.0
User 105131 does not improve AUC. Reverting changes.
Training on augumented user 91061 11/50 current_auc = 1.0
User 91061 AUC after training: 1.0
User 91061 does not improve AUC. Reverting changes.
Training on augumented user 135790 12/50 current_auc = 1.0
User 135790 AUC after training: 1.0
User 135790 does not improve AUC. Reverting changes.
Training on augumented user 75655 13/50 current_auc = 1.0
User 75655 AUC after training: 1.0
User 75655 does not improve AUC. Reverting changes.
Training on augumented user 3249 14/50 current_auc = 1.0
User 3249 AUC after training: 1.0
User 3249 does not improve AUC. Reverting changes.
Training on augumented user 127487 15/50 current_auc = 1.0
User 127487 AUC after training: 1.0
User 127487 does not improve AUC. Reverting changes.
Training on augumented user 19071 16/50 current_auc = 1.0
User 19071 AUC after training: 1.0
User 19071 does not improve AUC. Reverting changes.
Training on augumented user 43942 17/50 current_auc = 1.0
User 43942 AUC after training: 1.0
User 43942 does not improve AUC. Reverting changes.
Training on augumented user 53607 18/50 current_auc = 1.0
User 53607 AUC after training: 1.0
User 53607 does not improve AUC. Reverting changes.
Training on augumented user 87432 19/50 current_auc = 1.0
User 87432 AUC after training: 1.0
User 87432 does not improve AUC. Reverting changes.
Training on augumented user 33699 20/50 current_auc = 1.0
User 33699 AUC after training: 1.0
User 33699 does not improve AUC. Reverting changes.
Training on augumented user 44214 21/50 current_auc = 1.0
User 44214 AUC after training: 1.0
User 44214 does not improve AUC. Reverting changes.
Training on augumented user 85742 22/50 current_auc = 1.0
User 85742 AUC after training: 1.0
User 85742 does not improve AUC. Reverting changes.
Training on augumented user 127810 23/50 current_auc = 1.0
User 127810 AUC after training: 1.0
User 127810 does not improve AUC. Reverting changes.
Training on augumented user 117878 24/50 current_auc = 1.0
User 117878 AUC after training: 1.0
User 117878 does not improve AUC. Reverting changes.
Training on augumented user 115241 25/50 current_auc = 1.0
User 115241 AUC after training: 1.0
User 115241 does not improve AUC. Reverting changes.
Training on augumented user 46516 26/50 current_auc = 1.0
User 46516 AUC after training: 1.0
User 46516 does not improve AUC. Reverting changes.
Training on augumented user 101206 27/50 current_auc = 1.0
User 101206 AUC after training: 1.0
User 101206 does not improve AUC. Reverting changes.
Training on augumented user 3167 28/50 current_auc = 1.0
User 3167 AUC after training: 1.0
User 3167 does not improve AUC. Reverting changes.
Training on augumented user 54051 29/50 current_auc = 1.0
User 54051 AUC after training: 1.0
User 54051 does not improve AUC. Reverting changes.
Training on augumented user 125434 30/50 current_auc = 1.0
User 125434 AUC after training: 1.0
User 125434 does not improve AUC. Reverting changes.
Training on augumented user 48803 31/50 current_auc = 1.0
User 48803 AUC after training: 1.0
User 48803 does not improve AUC. Reverting changes.
Training on augumented user 128816 32/50 current_auc = 1.0
User 128816 AUC after training: 1.0
User 128816 does not improve AUC. Reverting changes.
Training on augumented user 62303 33/50 current_auc = 1.0
User 62303 AUC after training: 1.0
User 62303 does not improve AUC. Reverting changes.
Training on augumented user 24559 34/50 current_auc = 1.0
User 24559 AUC after training: 1.0
User 24559 does not improve AUC. Reverting changes.
Training on augumented user 35521 35/50 current_auc = 1.0
User 35521 AUC after training: 1.0
User 35521 does not improve AUC. Reverting changes.
Training on augumented user 90515 36/50 current_auc = 1.0
User 90515 AUC after training: 1.0
User 90515 does not improve AUC. Reverting changes.
Training on augumented user 1541 37/50 current_auc = 1.0
User 1541 AUC after training: 1.0
User 1541 does not improve AUC. Reverting changes.
Training on augumented user 53223 38/50 current_auc = 1.0
User 53223 AUC after training: 1.0
User 53223 does not improve AUC. Reverting changes.
Training on augumented user 26765 39/50 current_auc = 1.0
User 26765 AUC after training: 1.0
User 26765 does not improve AUC. Reverting changes.
Training on augumented user 32097 40/50 current_auc = 1.0
User 32097 AUC after training: 1.0
User 32097 does not improve AUC. Reverting changes.
Training on augumented user 134543 41/50 current_auc = 1.0
User 134543 AUC after training: 1.0
User 134543 does not improve AUC. Reverting changes.
Training on augumented user 63214 42/50 current_auc = 1.0
User 63214 AUC after training: 1.0
User 63214 does not improve AUC. Reverting changes.
Training on augumented user 109476 43/50 current_auc = 1.0
User 109476 AUC after training: 1.0
User 109476 does not improve AUC. Reverting changes.
Training on augumented user 105492 44/50 current_auc = 1.0
User 105492 AUC after training: 1.0
User 105492 does not improve AUC. Reverting changes.
Training on augumented user 74319 45/50 current_auc = 1.0
User 74319 AUC after training: 1.0
User 74319 does not improve AUC. Reverting changes.
Training on augumented user 59936 46/50 current_auc = 1.0
User 59936 AUC after training: 1.0
User 59936 does not improve AUC. Reverting changes.
Training on augumented user 93874 47/50 current_auc = 1.0
User 93874 AUC after training: 1.0
User 93874 does not improve AUC. Reverting changes.
Training on augumented user 68593 48/50 current_auc = 1.0
User 68593 AUC after training: 1.0
User 68593 does not improve AUC. Reverting changes.
Training on augumented user 89914 49/50 current_auc = 1.0
User 89914 AUC after training: 1.0
User 89914 does not improve AUC. Reverting changes.
[2024-12-02 20:09:20.379157] start test user 20453 278/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:21.272099] start test user 20453 278/568 recall augumented users by random, augumented_users = [63102, 13615, 65209, 123629, 113626, 73548, 33750, 107310, 21244, 35933, 98193, 86646, 117602, 32087, 108844, 51018, 28311, 119138, 110626, 67334, 92953, 27770, 10412, 132538, 57210, 22267, 111630, 3293, 29150, 69235, 5410, 116183, 24095, 92417, 22724, 89608, 127453, 28574, 131544, 130815, 119938, 20174, 126182, 30628, 23594, 97941, 111130, 24877, 102474, 129516]
[2024-12-02 20:09:21.303782] user = 20453 Cloud 278/568
[2024-12-02 20:09:21.322555] user = 20453 Local 278/568
[2024-12-02 20:09:21.524092] user = 20453 Local+ 278/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:24.459856] user = 20453 MPDA- 278/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6968325791855203
Training on augumented user 63102 0/50 current_auc = 0.6968325791855203
User 63102 AUC after training: 0.6968325791855203
User 63102 does not improve AUC. Reverting changes.
Training on augumented user 13615 1/50 current_auc = 0.6968325791855203
User 13615 AUC after training: 0.6968325791855203
User 13615 does not improve AUC. Reverting changes.
Training on augumented user 65209 2/50 current_auc = 0.6968325791855203
User 65209 AUC after training: 0.6968325791855203
User 65209 does not improve AUC. Reverting changes.
Training on augumented user 123629 3/50 current_auc = 0.6968325791855203
User 123629 AUC after training: 0.6968325791855203
User 123629 does not improve AUC. Reverting changes.
Training on augumented user 113626 4/50 current_auc = 0.6968325791855203
User 113626 AUC after training: 0.6968325791855203
User 113626 does not improve AUC. Reverting changes.
Training on augumented user 73548 5/50 current_auc = 0.6968325791855203
User 73548 AUC after training: 0.6968325791855203
User 73548 does not improve AUC. Reverting changes.
Training on augumented user 33750 6/50 current_auc = 0.6968325791855203
User 33750 AUC after training: 0.6968325791855203
User 33750 does not improve AUC. Reverting changes.
Training on augumented user 107310 7/50 current_auc = 0.6968325791855203
User 107310 AUC after training: 0.6968325791855203
User 107310 does not improve AUC. Reverting changes.
Training on augumented user 21244 8/50 current_auc = 0.6968325791855203
User 21244 AUC after training: 0.6968325791855203
User 21244 does not improve AUC. Reverting changes.
Training on augumented user 35933 9/50 current_auc = 0.6968325791855203
User 35933 AUC after training: 0.6968325791855203
User 35933 does not improve AUC. Reverting changes.
Training on augumented user 98193 10/50 current_auc = 0.6968325791855203
User 98193 AUC after training: 0.6968325791855203
User 98193 does not improve AUC. Reverting changes.
Training on augumented user 86646 11/50 current_auc = 0.6968325791855203
User 86646 AUC after training: 0.6968325791855203
User 86646 does not improve AUC. Reverting changes.
Training on augumented user 117602 12/50 current_auc = 0.6968325791855203
User 117602 AUC after training: 0.6968325791855203
User 117602 does not improve AUC. Reverting changes.
Training on augumented user 32087 13/50 current_auc = 0.6968325791855203
User 32087 AUC after training: 0.6968325791855203
User 32087 does not improve AUC. Reverting changes.
Training on augumented user 108844 14/50 current_auc = 0.6968325791855203
User 108844 AUC after training: 0.6968325791855203
User 108844 does not improve AUC. Reverting changes.
Training on augumented user 51018 15/50 current_auc = 0.6968325791855203
User 51018 AUC after training: 0.6968325791855203
User 51018 does not improve AUC. Reverting changes.
Training on augumented user 28311 16/50 current_auc = 0.6968325791855203
User 28311 AUC after training: 0.6968325791855203
User 28311 does not improve AUC. Reverting changes.
Training on augumented user 119138 17/50 current_auc = 0.6968325791855203
User 119138 AUC after training: 0.6968325791855203
User 119138 does not improve AUC. Reverting changes.
Training on augumented user 110626 18/50 current_auc = 0.6968325791855203
User 110626 AUC after training: 0.6968325791855203
User 110626 does not improve AUC. Reverting changes.
Training on augumented user 67334 19/50 current_auc = 0.6968325791855203
User 67334 AUC after training: 0.6968325791855203
User 67334 does not improve AUC. Reverting changes.
Training on augumented user 92953 20/50 current_auc = 0.6968325791855203
User 92953 AUC after training: 0.6968325791855203
User 92953 does not improve AUC. Reverting changes.
Training on augumented user 27770 21/50 current_auc = 0.6968325791855203
User 27770 AUC after training: 0.6968325791855203
User 27770 does not improve AUC. Reverting changes.
Training on augumented user 10412 22/50 current_auc = 0.6968325791855203
User 10412 AUC after training: 0.6968325791855203
User 10412 does not improve AUC. Reverting changes.
Training on augumented user 132538 23/50 current_auc = 0.6968325791855203
User 132538 AUC after training: 0.6968325791855203
User 132538 does not improve AUC. Reverting changes.
Training on augumented user 57210 24/50 current_auc = 0.6968325791855203
User 57210 AUC after training: 0.6968325791855203
User 57210 does not improve AUC. Reverting changes.
Training on augumented user 22267 25/50 current_auc = 0.6968325791855203
User 22267 AUC after training: 0.6968325791855203
User 22267 does not improve AUC. Reverting changes.
Training on augumented user 111630 26/50 current_auc = 0.6968325791855203
User 111630 AUC after training: 0.6968325791855203
User 111630 does not improve AUC. Reverting changes.
Training on augumented user 3293 27/50 current_auc = 0.6968325791855203
User 3293 AUC after training: 0.6877828054298643
User 3293 does not improve AUC. Reverting changes.
Training on augumented user 29150 28/50 current_auc = 0.6968325791855203
User 29150 AUC after training: 0.6968325791855203
User 29150 does not improve AUC. Reverting changes.
Training on augumented user 69235 29/50 current_auc = 0.6968325791855203
User 69235 AUC after training: 0.6968325791855203
User 69235 does not improve AUC. Reverting changes.
Training on augumented user 5410 30/50 current_auc = 0.6968325791855203
User 5410 AUC after training: 0.6968325791855203
User 5410 does not improve AUC. Reverting changes.
Training on augumented user 116183 31/50 current_auc = 0.6968325791855203
User 116183 AUC after training: 0.6968325791855203
User 116183 does not improve AUC. Reverting changes.
Training on augumented user 24095 32/50 current_auc = 0.6968325791855203
User 24095 AUC after training: 0.6968325791855203
User 24095 does not improve AUC. Reverting changes.
Training on augumented user 92417 33/50 current_auc = 0.6968325791855203
User 92417 AUC after training: 0.6968325791855203
User 92417 does not improve AUC. Reverting changes.
Training on augumented user 22724 34/50 current_auc = 0.6968325791855203
User 22724 AUC after training: 0.6968325791855203
User 22724 does not improve AUC. Reverting changes.
Training on augumented user 89608 35/50 current_auc = 0.6968325791855203
User 89608 AUC after training: 0.6968325791855203
User 89608 does not improve AUC. Reverting changes.
Training on augumented user 127453 36/50 current_auc = 0.6968325791855203
User 127453 AUC after training: 0.7013574660633484
User 127453 improves AUC. Keeping the model.
Training on augumented user 28574 37/50 current_auc = 0.7013574660633484
User 28574 AUC after training: 0.6968325791855203
User 28574 does not improve AUC. Reverting changes.
Training on augumented user 131544 38/50 current_auc = 0.7013574660633484
User 131544 AUC after training: 0.7013574660633484
User 131544 does not improve AUC. Reverting changes.
Training on augumented user 130815 39/50 current_auc = 0.7013574660633484
User 130815 AUC after training: 0.7058823529411764
User 130815 improves AUC. Keeping the model.
Training on augumented user 119938 40/50 current_auc = 0.7058823529411764
User 119938 AUC after training: 0.7013574660633484
User 119938 does not improve AUC. Reverting changes.
Training on augumented user 20174 41/50 current_auc = 0.7058823529411764
User 20174 AUC after training: 0.7013574660633484
User 20174 does not improve AUC. Reverting changes.
Training on augumented user 126182 42/50 current_auc = 0.7058823529411764
User 126182 AUC after training: 0.7013574660633484
User 126182 does not improve AUC. Reverting changes.
Training on augumented user 30628 43/50 current_auc = 0.7058823529411764
User 30628 AUC after training: 0.7058823529411764
User 30628 does not improve AUC. Reverting changes.
Training on augumented user 23594 44/50 current_auc = 0.7058823529411764
User 23594 AUC after training: 0.6968325791855203
User 23594 does not improve AUC. Reverting changes.
Training on augumented user 97941 45/50 current_auc = 0.7058823529411764
User 97941 AUC after training: 0.7058823529411764
User 97941 does not improve AUC. Reverting changes.
Training on augumented user 111130 46/50 current_auc = 0.7058823529411764
User 111130 AUC after training: 0.6968325791855203
User 111130 does not improve AUC. Reverting changes.
Training on augumented user 24877 47/50 current_auc = 0.7058823529411764
User 24877 AUC after training: 0.7013574660633484
User 24877 does not improve AUC. Reverting changes.
Training on augumented user 102474 48/50 current_auc = 0.7058823529411764
User 102474 AUC after training: 0.7058823529411764
User 102474 does not improve AUC. Reverting changes.
Training on augumented user 129516 49/50 current_auc = 0.7058823529411764
User 129516 AUC after training: 0.6968325791855203
User 129516 does not improve AUC. Reverting changes.
[2024-12-02 20:09:50.293894] start test user 20475 279/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:50.950315] start test user 20475 279/568 recall augumented users by random, augumented_users = [108989, 53301, 61890, 46791, 44859, 10367, 76568, 112793, 77461, 28726, 123047, 32306, 24736, 113886, 98580, 5844, 117478, 97416, 104937, 28609, 25032, 36114, 125886, 21622, 65637, 914, 50843, 129045, 107147, 83437, 90904, 104332, 88433, 66575, 75020, 121796, 91131, 91536, 97940, 116525, 34053, 69534, 79800, 57737, 32260, 52655, 63563, 97130, 7448, 125539]
[2024-12-02 20:09:50.989485] user = 20475 Cloud 279/568
[2024-12-02 20:09:51.011767] user = 20475 Local 279/568
[2024-12-02 20:09:51.098953] user = 20475 Local+ 279/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:53.307728] user = 20475 MPDA- 279/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6637958532695375
Training on augumented user 108989 0/50 current_auc = 0.6637958532695375
User 108989 AUC after training: 0.6641148325358852
User 108989 improves AUC. Keeping the model.
Training on augumented user 53301 1/50 current_auc = 0.6641148325358852
User 53301 AUC after training: 0.6647527910685805
User 53301 improves AUC. Keeping the model.
Training on augumented user 61890 2/50 current_auc = 0.6647527910685805
User 61890 AUC after training: 0.6644338118022329
User 61890 does not improve AUC. Reverting changes.
Training on augumented user 46791 3/50 current_auc = 0.6647527910685805
User 46791 AUC after training: 0.6644338118022329
User 46791 does not improve AUC. Reverting changes.
Training on augumented user 44859 4/50 current_auc = 0.6647527910685805
User 44859 AUC after training: 0.6634768740031899
User 44859 does not improve AUC. Reverting changes.
Training on augumented user 10367 5/50 current_auc = 0.6647527910685805
User 10367 AUC after training: 0.6647527910685805
User 10367 does not improve AUC. Reverting changes.
Training on augumented user 76568 6/50 current_auc = 0.6647527910685805
User 76568 AUC after training: 0.6647527910685805
User 76568 does not improve AUC. Reverting changes.
Training on augumented user 112793 7/50 current_auc = 0.6647527910685805
User 112793 AUC after training: 0.665390749601276
User 112793 improves AUC. Keeping the model.
Training on augumented user 77461 8/50 current_auc = 0.665390749601276
User 77461 AUC after training: 0.6647527910685807
User 77461 does not improve AUC. Reverting changes.
Training on augumented user 28726 9/50 current_auc = 0.665390749601276
User 28726 AUC after training: 0.6644338118022328
User 28726 does not improve AUC. Reverting changes.
Training on augumented user 123047 10/50 current_auc = 0.665390749601276
User 123047 AUC after training: 0.6647527910685807
User 123047 does not improve AUC. Reverting changes.
Training on augumented user 32306 11/50 current_auc = 0.665390749601276
User 32306 AUC after training: 0.6650717703349283
User 32306 does not improve AUC. Reverting changes.
Training on augumented user 24736 12/50 current_auc = 0.665390749601276
User 24736 AUC after training: 0.6647527910685805
User 24736 does not improve AUC. Reverting changes.
Training on augumented user 113886 13/50 current_auc = 0.665390749601276
User 113886 AUC after training: 0.6647527910685805
User 113886 does not improve AUC. Reverting changes.
Training on augumented user 98580 14/50 current_auc = 0.665390749601276
User 98580 AUC after training: 0.6641148325358851
User 98580 does not improve AUC. Reverting changes.
Training on augumented user 5844 15/50 current_auc = 0.665390749601276
User 5844 AUC after training: 0.6650717703349283
User 5844 does not improve AUC. Reverting changes.
Training on augumented user 117478 16/50 current_auc = 0.665390749601276
User 117478 AUC after training: 0.6660287081339713
User 117478 improves AUC. Keeping the model.
Training on augumented user 97416 17/50 current_auc = 0.6660287081339713
User 97416 AUC after training: 0.6660287081339713
User 97416 does not improve AUC. Reverting changes.
Training on augumented user 104937 18/50 current_auc = 0.6660287081339713
User 104937 AUC after training: 0.6669856459330145
User 104937 improves AUC. Keeping the model.
Training on augumented user 28609 19/50 current_auc = 0.6669856459330145
User 28609 AUC after training: 0.6682615629984051
User 28609 improves AUC. Keeping the model.
Training on augumented user 25032 20/50 current_auc = 0.6682615629984051
User 25032 AUC after training: 0.6679425837320574
User 25032 does not improve AUC. Reverting changes.
Training on augumented user 36114 21/50 current_auc = 0.6682615629984051
User 36114 AUC after training: 0.6682615629984051
User 36114 does not improve AUC. Reverting changes.
Training on augumented user 125886 22/50 current_auc = 0.6682615629984051
User 125886 AUC after training: 0.6676236044657097
User 125886 does not improve AUC. Reverting changes.
Training on augumented user 21622 23/50 current_auc = 0.6682615629984051
User 21622 AUC after training: 0.6676236044657097
User 21622 does not improve AUC. Reverting changes.
Training on augumented user 65637 24/50 current_auc = 0.6682615629984051
User 65637 AUC after training: 0.6673046251993621
User 65637 does not improve AUC. Reverting changes.
Training on augumented user 914 25/50 current_auc = 0.6682615629984051
User 914 AUC after training: 0.6685805422647527
User 914 improves AUC. Keeping the model.
Training on augumented user 50843 26/50 current_auc = 0.6685805422647527
User 50843 AUC after training: 0.6685805422647527
User 50843 does not improve AUC. Reverting changes.
Training on augumented user 129045 27/50 current_auc = 0.6685805422647527
User 129045 AUC after training: 0.6685805422647528
User 129045 improves AUC. Keeping the model.
Training on augumented user 107147 28/50 current_auc = 0.6685805422647528
User 107147 AUC after training: 0.6679425837320574
User 107147 does not improve AUC. Reverting changes.
Training on augumented user 83437 29/50 current_auc = 0.6685805422647528
User 83437 AUC after training: 0.6688995215311004
User 83437 improves AUC. Keeping the model.
Training on augumented user 90904 30/50 current_auc = 0.6688995215311004
User 90904 AUC after training: 0.6685805422647528
User 90904 does not improve AUC. Reverting changes.
Training on augumented user 104332 31/50 current_auc = 0.6688995215311004
User 104332 AUC after training: 0.6682615629984051
User 104332 does not improve AUC. Reverting changes.
Training on augumented user 88433 32/50 current_auc = 0.6688995215311004
User 88433 AUC after training: 0.6685805422647528
User 88433 does not improve AUC. Reverting changes.
Training on augumented user 66575 33/50 current_auc = 0.6688995215311004
User 66575 AUC after training: 0.6685805422647528
User 66575 does not improve AUC. Reverting changes.
Training on augumented user 75020 34/50 current_auc = 0.6688995215311004
User 75020 AUC after training: 0.6685805422647528
User 75020 does not improve AUC. Reverting changes.
Training on augumented user 121796 35/50 current_auc = 0.6688995215311004
User 121796 AUC after training: 0.6698564593301436
User 121796 improves AUC. Keeping the model.
Training on augumented user 91131 36/50 current_auc = 0.6698564593301436
User 91131 AUC after training: 0.6701754385964912
User 91131 improves AUC. Keeping the model.
Training on augumented user 91536 37/50 current_auc = 0.6701754385964912
User 91536 AUC after training: 0.6695374800637959
User 91536 does not improve AUC. Reverting changes.
Training on augumented user 97940 38/50 current_auc = 0.6701754385964912
User 97940 AUC after training: 0.6698564593301436
User 97940 does not improve AUC. Reverting changes.
Training on augumented user 116525 39/50 current_auc = 0.6701754385964912
User 116525 AUC after training: 0.6701754385964912
User 116525 does not improve AUC. Reverting changes.
Training on augumented user 34053 40/50 current_auc = 0.6701754385964912
User 34053 AUC after training: 0.6688995215311004
User 34053 does not improve AUC. Reverting changes.
Training on augumented user 69534 41/50 current_auc = 0.6701754385964912
User 69534 AUC after training: 0.6698564593301436
User 69534 does not improve AUC. Reverting changes.
Training on augumented user 79800 42/50 current_auc = 0.6701754385964912
User 79800 AUC after training: 0.6698564593301435
User 79800 does not improve AUC. Reverting changes.
Training on augumented user 57737 43/50 current_auc = 0.6701754385964912
User 57737 AUC after training: 0.6708133971291865
User 57737 improves AUC. Keeping the model.
Training on augumented user 32260 44/50 current_auc = 0.6708133971291865
User 32260 AUC after training: 0.6704944178628389
User 32260 does not improve AUC. Reverting changes.
Training on augumented user 52655 45/50 current_auc = 0.6708133971291865
User 52655 AUC after training: 0.6695374800637959
User 52655 does not improve AUC. Reverting changes.
Training on augumented user 63563 46/50 current_auc = 0.6708133971291865
User 63563 AUC after training: 0.6708133971291865
User 63563 does not improve AUC. Reverting changes.
Training on augumented user 97130 47/50 current_auc = 0.6708133971291865
User 97130 AUC after training: 0.6698564593301435
User 97130 does not improve AUC. Reverting changes.
Training on augumented user 7448 48/50 current_auc = 0.6708133971291865
User 7448 AUC after training: 0.6701754385964912
User 7448 does not improve AUC. Reverting changes.
Training on augumented user 125539 49/50 current_auc = 0.6708133971291865
User 125539 AUC after training: 0.6704944178628389
User 125539 does not improve AUC. Reverting changes.
[2024-12-02 20:10:25.719900] start test user 20506 280/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:26.214770] start test user 20506 280/568 recall augumented users by random, augumented_users = [12526, 21448, 112630, 52009, 46053, 24900, 91119, 85674, 10153, 1424, 19513, 130442, 6007, 39507, 90382, 58135, 105500, 88068, 36278, 71967, 99936, 43779, 82644, 29089, 75278, 11384, 59169, 4439, 46080, 131158, 21106, 99092, 32202, 66344, 80125, 102829, 33483, 57749, 138282, 96083, 34690, 23769, 103430, 133160, 110729, 79157, 71218, 116195, 36249, 80738]
[2024-12-02 20:10:26.231157] user = 20506 Cloud 280/568
[2024-12-02 20:10:26.246610] user = 20506 Local 280/568
[2024-12-02 20:10:26.499026] user = 20506 Local+ 280/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:29.121625] user = 20506 MPDA- 280/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6762917933130699
Training on augumented user 12526 0/50 current_auc = 0.6762917933130699
User 12526 AUC after training: 0.6770516717325228
User 12526 improves AUC. Keeping the model.
Training on augumented user 21448 1/50 current_auc = 0.6770516717325228
User 21448 AUC after training: 0.6770516717325228
User 21448 does not improve AUC. Reverting changes.
Training on augumented user 112630 2/50 current_auc = 0.6770516717325228
User 112630 AUC after training: 0.6732522796352584
User 112630 does not improve AUC. Reverting changes.
Training on augumented user 52009 3/50 current_auc = 0.6770516717325228
User 52009 AUC after training: 0.6778115501519757
User 52009 improves AUC. Keeping the model.
Training on augumented user 46053 4/50 current_auc = 0.6778115501519757
User 46053 AUC after training: 0.6770516717325228
User 46053 does not improve AUC. Reverting changes.
Training on augumented user 24900 5/50 current_auc = 0.6778115501519757
User 24900 AUC after training: 0.6770516717325228
User 24900 does not improve AUC. Reverting changes.
Training on augumented user 91119 6/50 current_auc = 0.6778115501519757
User 91119 AUC after training: 0.6770516717325228
User 91119 does not improve AUC. Reverting changes.
Training on augumented user 85674 7/50 current_auc = 0.6778115501519757
User 85674 AUC after training: 0.6778115501519757
User 85674 does not improve AUC. Reverting changes.
Training on augumented user 10153 8/50 current_auc = 0.6778115501519757
User 10153 AUC after training: 0.6778115501519757
User 10153 does not improve AUC. Reverting changes.
Training on augumented user 1424 9/50 current_auc = 0.6778115501519757
User 1424 AUC after training: 0.6762917933130699
User 1424 does not improve AUC. Reverting changes.
Training on augumented user 19513 10/50 current_auc = 0.6778115501519757
User 19513 AUC after training: 0.6770516717325228
User 19513 does not improve AUC. Reverting changes.
Training on augumented user 130442 11/50 current_auc = 0.6778115501519757
User 130442 AUC after training: 0.6732522796352584
User 130442 does not improve AUC. Reverting changes.
Training on augumented user 6007 12/50 current_auc = 0.6778115501519757
User 6007 AUC after training: 0.6732522796352584
User 6007 does not improve AUC. Reverting changes.
Training on augumented user 39507 13/50 current_auc = 0.6778115501519757
User 39507 AUC after training: 0.6755319148936171
User 39507 does not improve AUC. Reverting changes.
Training on augumented user 90382 14/50 current_auc = 0.6778115501519757
User 90382 AUC after training: 0.6770516717325229
User 90382 does not improve AUC. Reverting changes.
Training on augumented user 58135 15/50 current_auc = 0.6778115501519757
User 58135 AUC after training: 0.6770516717325229
User 58135 does not improve AUC. Reverting changes.
Training on augumented user 105500 16/50 current_auc = 0.6778115501519757
User 105500 AUC after training: 0.6747720364741642
User 105500 does not improve AUC. Reverting changes.
Training on augumented user 88068 17/50 current_auc = 0.6778115501519757
User 88068 AUC after training: 0.6770516717325228
User 88068 does not improve AUC. Reverting changes.
Training on augumented user 36278 18/50 current_auc = 0.6778115501519757
User 36278 AUC after training: 0.67629179331307
User 36278 does not improve AUC. Reverting changes.
Training on augumented user 71967 19/50 current_auc = 0.6778115501519757
User 71967 AUC after training: 0.6770516717325229
User 71967 does not improve AUC. Reverting changes.
Training on augumented user 99936 20/50 current_auc = 0.6778115501519757
User 99936 AUC after training: 0.6785714285714286
User 99936 improves AUC. Keeping the model.
Training on augumented user 43779 21/50 current_auc = 0.6785714285714286
User 43779 AUC after training: 0.6770516717325228
User 43779 does not improve AUC. Reverting changes.
Training on augumented user 82644 22/50 current_auc = 0.6785714285714286
User 82644 AUC after training: 0.6755319148936171
User 82644 does not improve AUC. Reverting changes.
Training on augumented user 29089 23/50 current_auc = 0.6785714285714286
User 29089 AUC after training: 0.6778115501519757
User 29089 does not improve AUC. Reverting changes.
Training on augumented user 75278 24/50 current_auc = 0.6785714285714286
User 75278 AUC after training: 0.6770516717325228
User 75278 does not improve AUC. Reverting changes.
Training on augumented user 11384 25/50 current_auc = 0.6785714285714286
User 11384 AUC after training: 0.6778115501519756
User 11384 does not improve AUC. Reverting changes.
Training on augumented user 59169 26/50 current_auc = 0.6785714285714286
User 59169 AUC after training: 0.6785714285714286
User 59169 does not improve AUC. Reverting changes.
Training on augumented user 4439 27/50 current_auc = 0.6785714285714286
User 4439 AUC after training: 0.6778115501519757
User 4439 does not improve AUC. Reverting changes.
Training on augumented user 46080 28/50 current_auc = 0.6785714285714286
User 46080 AUC after training: 0.67629179331307
User 46080 does not improve AUC. Reverting changes.
Training on augumented user 131158 29/50 current_auc = 0.6785714285714286
User 131158 AUC after training: 0.6778115501519757
User 131158 does not improve AUC. Reverting changes.
Training on augumented user 21106 30/50 current_auc = 0.6785714285714286
User 21106 AUC after training: 0.6778115501519757
User 21106 does not improve AUC. Reverting changes.
Training on augumented user 99092 31/50 current_auc = 0.6785714285714286
User 99092 AUC after training: 0.6740121580547113
User 99092 does not improve AUC. Reverting changes.
Training on augumented user 32202 32/50 current_auc = 0.6785714285714286
User 32202 AUC after training: 0.6785714285714286
User 32202 does not improve AUC. Reverting changes.
Training on augumented user 66344 33/50 current_auc = 0.6785714285714286
User 66344 AUC after training: 0.6770516717325229
User 66344 does not improve AUC. Reverting changes.
Training on augumented user 80125 34/50 current_auc = 0.6785714285714286
User 80125 AUC after training: 0.6793313069908815
User 80125 improves AUC. Keeping the model.
Training on augumented user 102829 35/50 current_auc = 0.6793313069908815
User 102829 AUC after training: 0.6778115501519758
User 102829 does not improve AUC. Reverting changes.
Training on augumented user 33483 36/50 current_auc = 0.6793313069908815
User 33483 AUC after training: 0.6755319148936171
User 33483 does not improve AUC. Reverting changes.
Training on augumented user 57749 37/50 current_auc = 0.6793313069908815
User 57749 AUC after training: 0.6785714285714286
User 57749 does not improve AUC. Reverting changes.
Training on augumented user 138282 38/50 current_auc = 0.6793313069908815
User 138282 AUC after training: 0.67629179331307
User 138282 does not improve AUC. Reverting changes.
Training on augumented user 96083 39/50 current_auc = 0.6793313069908815
User 96083 AUC after training: 0.6781914893617021
User 96083 does not improve AUC. Reverting changes.
Training on augumented user 34690 40/50 current_auc = 0.6793313069908815
User 34690 AUC after training: 0.6770516717325229
User 34690 does not improve AUC. Reverting changes.
Training on augumented user 23769 41/50 current_auc = 0.6793313069908815
User 23769 AUC after training: 0.67629179331307
User 23769 does not improve AUC. Reverting changes.
Training on augumented user 103430 42/50 current_auc = 0.6793313069908815
User 103430 AUC after training: 0.6778115501519757
User 103430 does not improve AUC. Reverting changes.
Training on augumented user 133160 43/50 current_auc = 0.6793313069908815
User 133160 AUC after training: 0.6755319148936171
User 133160 does not improve AUC. Reverting changes.
Training on augumented user 110729 44/50 current_auc = 0.6793313069908815
User 110729 AUC after training: 0.6755319148936171
User 110729 does not improve AUC. Reverting changes.
Training on augumented user 79157 45/50 current_auc = 0.6793313069908815
User 79157 AUC after training: 0.6778115501519757
User 79157 does not improve AUC. Reverting changes.
Training on augumented user 71218 46/50 current_auc = 0.6793313069908815
User 71218 AUC after training: 0.6778115501519757
User 71218 does not improve AUC. Reverting changes.
Training on augumented user 116195 47/50 current_auc = 0.6793313069908815
User 116195 AUC after training: 0.6785714285714286
User 116195 does not improve AUC. Reverting changes.
Training on augumented user 36249 48/50 current_auc = 0.6793313069908815
User 36249 AUC after training: 0.6774316109422494
User 36249 does not improve AUC. Reverting changes.
Training on augumented user 80738 49/50 current_auc = 0.6793313069908815
User 80738 AUC after training: 0.6762917933130699
User 80738 does not improve AUC. Reverting changes.
[2024-12-02 20:10:58.745242] start test user 20530 281/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:59.244017] start test user 20530 281/568 recall augumented users by random, augumented_users = [39740, 77608, 45265, 89588, 75769, 77250, 135837, 75770, 124793, 129475, 51376, 48994, 59997, 83567, 98331, 4527, 125552, 15452, 70289, 7756, 36707, 87017, 60606, 62318, 96052, 88700, 77088, 56202, 4627, 45786, 103783, 124806, 74950, 22398, 97877, 47382, 58729, 89206, 74214, 26743, 99754, 128481, 27818, 118450, 31032, 89502, 106364, 62764, 56654, 132668]
[2024-12-02 20:10:59.259634] user = 20530 Cloud 281/568
[2024-12-02 20:10:59.323091] user = 20530 Local 281/568
[2024-12-02 20:10:59.384952] user = 20530 Local+ 281/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:01.634827] user = 20530 MPDA- 281/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7110040340654415
Training on augumented user 39740 0/50 current_auc = 0.7110040340654415
User 39740 AUC after training: 0.7110680668502274
User 39740 improves AUC. Keeping the model.
Training on augumented user 77608 1/50 current_auc = 0.7110680668502274
User 77608 AUC after training: 0.710811935711084
User 77608 does not improve AUC. Reverting changes.
Training on augumented user 45265 2/50 current_auc = 0.7110680668502274
User 45265 AUC after training: 0.7105077799833515
User 45265 does not improve AUC. Reverting changes.
Training on augumented user 89588 3/50 current_auc = 0.7110680668502274
User 89588 AUC after training: 0.7112921815969777
User 89588 improves AUC. Keeping the model.
Training on augumented user 75769 4/50 current_auc = 0.7112921815969777
User 75769 AUC after training: 0.7116283537171032
User 75769 improves AUC. Keeping the model.
Training on augumented user 77250 5/50 current_auc = 0.7116283537171032
User 77250 AUC after training: 0.7113562143817636
User 77250 does not improve AUC. Reverting changes.
Training on augumented user 135837 6/50 current_auc = 0.7116283537171032
User 135837 AUC after training: 0.7114042389703528
User 135837 does not improve AUC. Reverting changes.
Training on augumented user 75770 7/50 current_auc = 0.7116283537171032
User 75770 AUC after training: 0.7113642184798618
User 75770 does not improve AUC. Reverting changes.
Training on augumented user 124793 8/50 current_auc = 0.7116283537171032
User 124793 AUC after training: 0.7113402061855671
User 124793 does not improve AUC. Reverting changes.
Training on augumented user 129475 9/50 current_auc = 0.7116283537171032
User 129475 AUC after training: 0.7112921815969776
User 129475 does not improve AUC. Reverting changes.
Training on augumented user 51376 10/50 current_auc = 0.7116283537171032
User 51376 AUC after training: 0.7115643209323174
User 51376 does not improve AUC. Reverting changes.
Training on augumented user 48994 11/50 current_auc = 0.7116283537171032
User 48994 AUC after training: 0.7114762758532368
User 48994 does not improve AUC. Reverting changes.
Training on augumented user 59997 12/50 current_auc = 0.7116283537171032
User 59997 AUC after training: 0.7116123455209068
User 59997 does not improve AUC. Reverting changes.
Training on augumented user 83567 13/50 current_auc = 0.7116283537171032
User 83567 AUC after training: 0.7110840750464238
User 83567 does not improve AUC. Reverting changes.
Training on augumented user 98331 14/50 current_auc = 0.7116283537171032
User 98331 AUC after training: 0.7115803291285138
User 98331 does not improve AUC. Reverting changes.
Training on augumented user 4527 15/50 current_auc = 0.7116283537171032
User 4527 AUC after training: 0.7114362553627457
User 4527 does not improve AUC. Reverting changes.
Training on augumented user 125552 16/50 current_auc = 0.7116283537171032
User 125552 AUC after training: 0.7110680668502274
User 125552 does not improve AUC. Reverting changes.
Training on augumented user 15452 17/50 current_auc = 0.7116283537171032
User 15452 AUC after training: 0.7120045463277198
User 15452 improves AUC. Keeping the model.
Training on augumented user 70289 18/50 current_auc = 0.7120045463277198
User 70289 AUC after training: 0.7117644233847731
User 70289 does not improve AUC. Reverting changes.
Training on augumented user 7756 19/50 current_auc = 0.7120045463277198
User 7756 AUC after training: 0.7121646282896844
User 7756 improves AUC. Keeping the model.
Training on augumented user 36707 20/50 current_auc = 0.7121646282896844
User 36707 AUC after training: 0.711164116027406
User 36707 does not improve AUC. Reverting changes.
Training on augumented user 87017 21/50 current_auc = 0.7121646282896844
User 87017 AUC after training: 0.711908497150541
User 87017 does not improve AUC. Reverting changes.
Training on augumented user 60606 22/50 current_auc = 0.7121646282896844
User 60606 AUC after training: 0.7120205545239163
User 60606 does not improve AUC. Reverting changes.
Training on augumented user 62318 23/50 current_auc = 0.7121646282896844
User 62318 AUC after training: 0.7120685791125057
User 62318 does not improve AUC. Reverting changes.
Training on augumented user 96052 24/50 current_auc = 0.7121646282896844
User 96052 AUC after training: 0.7116043414228085
User 96052 does not improve AUC. Reverting changes.
Training on augumented user 88700 25/50 current_auc = 0.7121646282896844
User 88700 AUC after training: 0.7123407184478453
User 88700 improves AUC. Keeping the model.
Training on augumented user 77088 26/50 current_auc = 0.7123407184478453
User 77088 AUC after training: 0.7123487225459435
User 77088 improves AUC. Keeping the model.
Training on augumented user 56202 27/50 current_auc = 0.7123487225459435
User 56202 AUC after training: 0.7113962348722545
User 56202 does not improve AUC. Reverting changes.
Training on augumented user 4627 28/50 current_auc = 0.7123487225459435
User 4627 AUC after training: 0.7122286610744702
User 4627 does not improve AUC. Reverting changes.
Training on augumented user 45786 29/50 current_auc = 0.7123487225459435
User 45786 AUC after training: 0.7123006979573541
User 45786 does not improve AUC. Reverting changes.
Training on augumented user 103783 30/50 current_auc = 0.7123487225459435
User 103783 AUC after training: 0.7125568290964974
User 103783 improves AUC. Keeping the model.
Training on augumented user 124806 31/50 current_auc = 0.7125568290964974
User 124806 AUC after training: 0.7123006979573541
User 124806 does not improve AUC. Reverting changes.
Training on augumented user 74950 32/50 current_auc = 0.7125568290964974
User 74950 AUC after training: 0.712076583210604
User 74950 does not improve AUC. Reverting changes.
Training on augumented user 22398 33/50 current_auc = 0.7125568290964974
User 22398 AUC after training: 0.7124127553307293
User 22398 does not improve AUC. Reverting changes.
Training on augumented user 97877 34/50 current_auc = 0.7125568290964974
User 97877 AUC after training: 0.7122526733687649
User 97877 does not improve AUC. Reverting changes.
Training on augumented user 47382 35/50 current_auc = 0.7125568290964974
User 47382 AUC after training: 0.7124127553307293
User 47382 does not improve AUC. Reverting changes.
Training on augumented user 58729 36/50 current_auc = 0.7125568290964974
User 58729 AUC after training: 0.7121726323877825
User 58729 does not improve AUC. Reverting changes.
Training on augumented user 89206 37/50 current_auc = 0.7125568290964974
User 89206 AUC after training: 0.7121806364858807
User 89206 does not improve AUC. Reverting changes.
Training on augumented user 74214 38/50 current_auc = 0.7125568290964974
User 74214 AUC after training: 0.7120765832106037
User 74214 does not improve AUC. Reverting changes.
Training on augumented user 26743 39/50 current_auc = 0.7125568290964974
User 26743 AUC after training: 0.7124287635269259
User 26743 does not improve AUC. Reverting changes.
Training on augumented user 99754 40/50 current_auc = 0.7125568290964974
User 99754 AUC after training: 0.7115483127361208
User 99754 does not improve AUC. Reverting changes.
Training on augumented user 128481 41/50 current_auc = 0.7125568290964974
User 128481 AUC after training: 0.711940513542934
User 128481 does not improve AUC. Reverting changes.
Training on augumented user 27818 42/50 current_auc = 0.7125568290964974
User 27818 AUC after training: 0.7122526733687649
User 27818 does not improve AUC. Reverting changes.
Training on augumented user 118450 43/50 current_auc = 0.7125568290964974
User 118450 AUC after training: 0.7117964397771659
User 118450 does not improve AUC. Reverting changes.
Training on augumented user 31032 44/50 current_auc = 0.7125568290964974
User 31032 AUC after training: 0.7119805340334251
User 31032 does not improve AUC. Reverting changes.
Training on augumented user 89502 45/50 current_auc = 0.7125568290964974
User 89502 AUC after training: 0.7122526733687649
User 89502 does not improve AUC. Reverting changes.
Training on augumented user 106364 46/50 current_auc = 0.7125568290964974
User 106364 AUC after training: 0.7123487225459435
User 106364 does not improve AUC. Reverting changes.
Training on augumented user 62764 47/50 current_auc = 0.7125568290964974
User 62764 AUC after training: 0.71236473074214
User 62764 does not improve AUC. Reverting changes.
Training on augumented user 56654 48/50 current_auc = 0.7125568290964974
User 56654 AUC after training: 0.7119004930524429
User 56654 does not improve AUC. Reverting changes.
Training on augumented user 132668 49/50 current_auc = 0.7125568290964974
User 132668 AUC after training: 0.7119885381315234
User 132668 does not improve AUC. Reverting changes.
[2024-12-02 20:11:35.628811] start test user 20588 282/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:36.120409] start test user 20588 282/568 recall augumented users by random, augumented_users = [125246, 59684, 1576, 92631, 83516, 65930, 89277, 406, 117424, 134916, 125295, 105135, 38089, 96577, 3703, 89474, 9938, 31378, 72266, 106050, 17541, 17827, 52736, 35173, 60734, 113768, 84917, 52349, 115788, 57456, 89844, 106318, 125308, 64266, 87407, 93116, 71195, 17692, 125464, 98158, 16273, 88645, 102347, 30494, 56073, 112942, 66067, 50802, 369, 47790]
[2024-12-02 20:11:36.141965] user = 20588 Cloud 282/568
[2024-12-02 20:11:36.166343] user = 20588 Local 282/568
[2024-12-02 20:11:36.323926] user = 20588 Local+ 282/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:38.936807] user = 20588 MPDA- 282/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.1
Training on augumented user 125246 0/50 current_auc = 0.1
User 125246 AUC after training: 0.1
User 125246 does not improve AUC. Reverting changes.
Training on augumented user 59684 1/50 current_auc = 0.1
User 59684 AUC after training: 0.1
User 59684 does not improve AUC. Reverting changes.
Training on augumented user 1576 2/50 current_auc = 0.1
User 1576 AUC after training: 0.1
User 1576 does not improve AUC. Reverting changes.
Training on augumented user 92631 3/50 current_auc = 0.1
User 92631 AUC after training: 0.1
User 92631 does not improve AUC. Reverting changes.
Training on augumented user 83516 4/50 current_auc = 0.1
User 83516 AUC after training: 0.1
User 83516 does not improve AUC. Reverting changes.
Training on augumented user 65930 5/50 current_auc = 0.1
User 65930 AUC after training: 0.1
User 65930 does not improve AUC. Reverting changes.
Training on augumented user 89277 6/50 current_auc = 0.1
User 89277 AUC after training: 0.1
User 89277 does not improve AUC. Reverting changes.
Training on augumented user 406 7/50 current_auc = 0.1
User 406 AUC after training: 0.1
User 406 does not improve AUC. Reverting changes.
Training on augumented user 117424 8/50 current_auc = 0.1
User 117424 AUC after training: 0.1
User 117424 does not improve AUC. Reverting changes.
Training on augumented user 134916 9/50 current_auc = 0.1
User 134916 AUC after training: 0.1
User 134916 does not improve AUC. Reverting changes.
Training on augumented user 125295 10/50 current_auc = 0.1
User 125295 AUC after training: 0.1
User 125295 does not improve AUC. Reverting changes.
Training on augumented user 105135 11/50 current_auc = 0.1
User 105135 AUC after training: 0.1
User 105135 does not improve AUC. Reverting changes.
Training on augumented user 38089 12/50 current_auc = 0.1
User 38089 AUC after training: 0.1
User 38089 does not improve AUC. Reverting changes.
Training on augumented user 96577 13/50 current_auc = 0.1
User 96577 AUC after training: 0.1
User 96577 does not improve AUC. Reverting changes.
Training on augumented user 3703 14/50 current_auc = 0.1
User 3703 AUC after training: 0.1
User 3703 does not improve AUC. Reverting changes.
Training on augumented user 89474 15/50 current_auc = 0.1
User 89474 AUC after training: 0.1
User 89474 does not improve AUC. Reverting changes.
Training on augumented user 9938 16/50 current_auc = 0.1
User 9938 AUC after training: 0.1
User 9938 does not improve AUC. Reverting changes.
Training on augumented user 31378 17/50 current_auc = 0.1
User 31378 AUC after training: 0.1
User 31378 does not improve AUC. Reverting changes.
Training on augumented user 72266 18/50 current_auc = 0.1
User 72266 AUC after training: 0.1
User 72266 does not improve AUC. Reverting changes.
Training on augumented user 106050 19/50 current_auc = 0.1
User 106050 AUC after training: 0.1
User 106050 does not improve AUC. Reverting changes.
Training on augumented user 17541 20/50 current_auc = 0.1
User 17541 AUC after training: 0.1
User 17541 does not improve AUC. Reverting changes.
Training on augumented user 17827 21/50 current_auc = 0.1
User 17827 AUC after training: 0.1
User 17827 does not improve AUC. Reverting changes.
Training on augumented user 52736 22/50 current_auc = 0.1
User 52736 AUC after training: 0.1
User 52736 does not improve AUC. Reverting changes.
Training on augumented user 35173 23/50 current_auc = 0.1
User 35173 AUC after training: 0.1
User 35173 does not improve AUC. Reverting changes.
Training on augumented user 60734 24/50 current_auc = 0.1
User 60734 AUC after training: 0.1
User 60734 does not improve AUC. Reverting changes.
Training on augumented user 113768 25/50 current_auc = 0.1
User 113768 AUC after training: 0.1
User 113768 does not improve AUC. Reverting changes.
Training on augumented user 84917 26/50 current_auc = 0.1
User 84917 AUC after training: 0.1
User 84917 does not improve AUC. Reverting changes.
Training on augumented user 52349 27/50 current_auc = 0.1
User 52349 AUC after training: 0.1
User 52349 does not improve AUC. Reverting changes.
Training on augumented user 115788 28/50 current_auc = 0.1
User 115788 AUC after training: 0.1
User 115788 does not improve AUC. Reverting changes.
Training on augumented user 57456 29/50 current_auc = 0.1
User 57456 AUC after training: 0.1
User 57456 does not improve AUC. Reverting changes.
Training on augumented user 89844 30/50 current_auc = 0.1
User 89844 AUC after training: 0.1
User 89844 does not improve AUC. Reverting changes.
Training on augumented user 106318 31/50 current_auc = 0.1
User 106318 AUC after training: 0.1
User 106318 does not improve AUC. Reverting changes.
Training on augumented user 125308 32/50 current_auc = 0.1
User 125308 AUC after training: 0.1
User 125308 does not improve AUC. Reverting changes.
Training on augumented user 64266 33/50 current_auc = 0.1
User 64266 AUC after training: 0.1
User 64266 does not improve AUC. Reverting changes.
Training on augumented user 87407 34/50 current_auc = 0.1
User 87407 AUC after training: 0.1
User 87407 does not improve AUC. Reverting changes.
Training on augumented user 93116 35/50 current_auc = 0.1
User 93116 AUC after training: 0.1
User 93116 does not improve AUC. Reverting changes.
Training on augumented user 71195 36/50 current_auc = 0.1
User 71195 AUC after training: 0.1
User 71195 does not improve AUC. Reverting changes.
Training on augumented user 17692 37/50 current_auc = 0.1
User 17692 AUC after training: 0.1
User 17692 does not improve AUC. Reverting changes.
Training on augumented user 125464 38/50 current_auc = 0.1
User 125464 AUC after training: 0.1
User 125464 does not improve AUC. Reverting changes.
Training on augumented user 98158 39/50 current_auc = 0.1
User 98158 AUC after training: 0.1
User 98158 does not improve AUC. Reverting changes.
Training on augumented user 16273 40/50 current_auc = 0.1
User 16273 AUC after training: 0.1
User 16273 does not improve AUC. Reverting changes.
Training on augumented user 88645 41/50 current_auc = 0.1
User 88645 AUC after training: 0.1
User 88645 does not improve AUC. Reverting changes.
Training on augumented user 102347 42/50 current_auc = 0.1
User 102347 AUC after training: 0.1
User 102347 does not improve AUC. Reverting changes.
Training on augumented user 30494 43/50 current_auc = 0.1
User 30494 AUC after training: 0.1
User 30494 does not improve AUC. Reverting changes.
Training on augumented user 56073 44/50 current_auc = 0.1
User 56073 AUC after training: 0.1
User 56073 does not improve AUC. Reverting changes.
Training on augumented user 112942 45/50 current_auc = 0.1
User 112942 AUC after training: 0.1
User 112942 does not improve AUC. Reverting changes.
Training on augumented user 66067 46/50 current_auc = 0.1
User 66067 AUC after training: 0.1
User 66067 does not improve AUC. Reverting changes.
Training on augumented user 50802 47/50 current_auc = 0.1
User 50802 AUC after training: 0.1
User 50802 does not improve AUC. Reverting changes.
Training on augumented user 369 48/50 current_auc = 0.1
User 369 AUC after training: 0.1
User 369 does not improve AUC. Reverting changes.
Training on augumented user 47790 49/50 current_auc = 0.1
User 47790 AUC after training: 0.1
User 47790 does not improve AUC. Reverting changes.
[2024-12-02 20:12:07.159356] start test user 20596 283/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:07.721428] start test user 20596 283/568 recall augumented users by random, augumented_users = [46345, 98588, 92823, 119044, 5542, 35206, 15013, 78012, 67131, 130444, 12743, 26182, 53468, 58821, 82905, 42600, 87805, 36330, 93461, 32955, 11883, 54403, 9384, 85000, 57209, 83739, 99240, 53793, 46312, 54217, 111711, 41805, 135178, 106060, 85640, 13450, 125542, 115091, 63493, 72453, 106273, 128173, 38976, 90130, 14966, 53443, 49038, 48066, 53223, 134148]
[2024-12-02 20:12:07.736908] user = 20596 Cloud 283/568
[2024-12-02 20:12:07.749088] user = 20596 Local 283/568
[2024-12-02 20:12:07.809557] user = 20596 Local+ 283/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:10.215198] user = 20596 MPDA- 283/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8125
Training on augumented user 46345 0/50 current_auc = 0.8125
User 46345 AUC after training: 0.8125
User 46345 does not improve AUC. Reverting changes.
Training on augumented user 98588 1/50 current_auc = 0.8125
User 98588 AUC after training: 0.8125
User 98588 does not improve AUC. Reverting changes.
Training on augumented user 92823 2/50 current_auc = 0.8125
User 92823 AUC after training: 0.8125
User 92823 does not improve AUC. Reverting changes.
Training on augumented user 119044 3/50 current_auc = 0.8125
User 119044 AUC after training: 0.8125
User 119044 does not improve AUC. Reverting changes.
Training on augumented user 5542 4/50 current_auc = 0.8125
User 5542 AUC after training: 0.8125
User 5542 does not improve AUC. Reverting changes.
Training on augumented user 35206 5/50 current_auc = 0.8125
User 35206 AUC after training: 0.8125
User 35206 does not improve AUC. Reverting changes.
Training on augumented user 15013 6/50 current_auc = 0.8125
User 15013 AUC after training: 0.8125
User 15013 does not improve AUC. Reverting changes.
Training on augumented user 78012 7/50 current_auc = 0.8125
User 78012 AUC after training: 0.8125
User 78012 does not improve AUC. Reverting changes.
Training on augumented user 67131 8/50 current_auc = 0.8125
User 67131 AUC after training: 0.8125
User 67131 does not improve AUC. Reverting changes.
Training on augumented user 130444 9/50 current_auc = 0.8125
User 130444 AUC after training: 0.8125
User 130444 does not improve AUC. Reverting changes.
Training on augumented user 12743 10/50 current_auc = 0.8125
User 12743 AUC after training: 0.8125
User 12743 does not improve AUC. Reverting changes.
Training on augumented user 26182 11/50 current_auc = 0.8125
User 26182 AUC after training: 0.8125
User 26182 does not improve AUC. Reverting changes.
Training on augumented user 53468 12/50 current_auc = 0.8125
User 53468 AUC after training: 0.8125
User 53468 does not improve AUC. Reverting changes.
Training on augumented user 58821 13/50 current_auc = 0.8125
User 58821 AUC after training: 0.8125
User 58821 does not improve AUC. Reverting changes.
Training on augumented user 82905 14/50 current_auc = 0.8125
User 82905 AUC after training: 0.8125
User 82905 does not improve AUC. Reverting changes.
Training on augumented user 42600 15/50 current_auc = 0.8125
User 42600 AUC after training: 0.8125
User 42600 does not improve AUC. Reverting changes.
Training on augumented user 87805 16/50 current_auc = 0.8125
User 87805 AUC after training: 0.8125
User 87805 does not improve AUC. Reverting changes.
Training on augumented user 36330 17/50 current_auc = 0.8125
User 36330 AUC after training: 0.8125
User 36330 does not improve AUC. Reverting changes.
Training on augumented user 93461 18/50 current_auc = 0.8125
User 93461 AUC after training: 0.8125
User 93461 does not improve AUC. Reverting changes.
Training on augumented user 32955 19/50 current_auc = 0.8125
User 32955 AUC after training: 0.8125
User 32955 does not improve AUC. Reverting changes.
Training on augumented user 11883 20/50 current_auc = 0.8125
User 11883 AUC after training: 0.8125
User 11883 does not improve AUC. Reverting changes.
Training on augumented user 54403 21/50 current_auc = 0.8125
User 54403 AUC after training: 0.8125
User 54403 does not improve AUC. Reverting changes.
Training on augumented user 9384 22/50 current_auc = 0.8125
User 9384 AUC after training: 0.8125
User 9384 does not improve AUC. Reverting changes.
Training on augumented user 85000 23/50 current_auc = 0.8125
User 85000 AUC after training: 0.8125
User 85000 does not improve AUC. Reverting changes.
Training on augumented user 57209 24/50 current_auc = 0.8125
User 57209 AUC after training: 0.8125
User 57209 does not improve AUC. Reverting changes.
Training on augumented user 83739 25/50 current_auc = 0.8125
User 83739 AUC after training: 0.8125
User 83739 does not improve AUC. Reverting changes.
Training on augumented user 99240 26/50 current_auc = 0.8125
User 99240 AUC after training: 0.8125
User 99240 does not improve AUC. Reverting changes.
Training on augumented user 53793 27/50 current_auc = 0.8125
User 53793 AUC after training: 0.8125
User 53793 does not improve AUC. Reverting changes.
Training on augumented user 46312 28/50 current_auc = 0.8125
User 46312 AUC after training: 0.8125
User 46312 does not improve AUC. Reverting changes.
Training on augumented user 54217 29/50 current_auc = 0.8125
User 54217 AUC after training: 0.8125
User 54217 does not improve AUC. Reverting changes.
Training on augumented user 111711 30/50 current_auc = 0.8125
User 111711 AUC after training: 0.8125
User 111711 does not improve AUC. Reverting changes.
Training on augumented user 41805 31/50 current_auc = 0.8125
User 41805 AUC after training: 0.8125
User 41805 does not improve AUC. Reverting changes.
Training on augumented user 135178 32/50 current_auc = 0.8125
User 135178 AUC after training: 0.8125
User 135178 does not improve AUC. Reverting changes.
Training on augumented user 106060 33/50 current_auc = 0.8125
User 106060 AUC after training: 0.8125
User 106060 does not improve AUC. Reverting changes.
Training on augumented user 85640 34/50 current_auc = 0.8125
User 85640 AUC after training: 0.8125
User 85640 does not improve AUC. Reverting changes.
Training on augumented user 13450 35/50 current_auc = 0.8125
User 13450 AUC after training: 0.8125
User 13450 does not improve AUC. Reverting changes.
Training on augumented user 125542 36/50 current_auc = 0.8125
User 125542 AUC after training: 0.8125
User 125542 does not improve AUC. Reverting changes.
Training on augumented user 115091 37/50 current_auc = 0.8125
User 115091 AUC after training: 0.8125
User 115091 does not improve AUC. Reverting changes.
Training on augumented user 63493 38/50 current_auc = 0.8125
User 63493 AUC after training: 0.8125
User 63493 does not improve AUC. Reverting changes.
Training on augumented user 72453 39/50 current_auc = 0.8125
User 72453 AUC after training: 0.8125
User 72453 does not improve AUC. Reverting changes.
Training on augumented user 106273 40/50 current_auc = 0.8125
User 106273 AUC after training: 0.8125
User 106273 does not improve AUC. Reverting changes.
Training on augumented user 128173 41/50 current_auc = 0.8125
User 128173 AUC after training: 0.8125
User 128173 does not improve AUC. Reverting changes.
Training on augumented user 38976 42/50 current_auc = 0.8125
User 38976 AUC after training: 0.8125
User 38976 does not improve AUC. Reverting changes.
Training on augumented user 90130 43/50 current_auc = 0.8125
User 90130 AUC after training: 0.8125
User 90130 does not improve AUC. Reverting changes.
Training on augumented user 14966 44/50 current_auc = 0.8125
User 14966 AUC after training: 0.8125
User 14966 does not improve AUC. Reverting changes.
Training on augumented user 53443 45/50 current_auc = 0.8125
User 53443 AUC after training: 0.8125
User 53443 does not improve AUC. Reverting changes.
Training on augumented user 49038 46/50 current_auc = 0.8125
User 49038 AUC after training: 0.8125
User 49038 does not improve AUC. Reverting changes.
Training on augumented user 48066 47/50 current_auc = 0.8125
User 48066 AUC after training: 0.8125
User 48066 does not improve AUC. Reverting changes.
Training on augumented user 53223 48/50 current_auc = 0.8125
User 53223 AUC after training: 0.8125
User 53223 does not improve AUC. Reverting changes.
Training on augumented user 134148 49/50 current_auc = 0.8125
User 134148 AUC after training: 0.8125
User 134148 does not improve AUC. Reverting changes.
[2024-12-02 20:12:38.034081] start test user 20639 284/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:38.606984] start test user 20639 284/568 recall augumented users by random, augumented_users = [64441, 111799, 100841, 6649, 88395, 138268, 19867, 69810, 120250, 1960, 116251, 117572, 116298, 17283, 85955, 91463, 103016, 20415, 129912, 11552, 96962, 78531, 76332, 126145, 114067, 44365, 61134, 39144, 86882, 104807, 122323, 99848, 65902, 90587, 75116, 95941, 13121, 42889, 19609, 114230, 3713, 136419, 122051, 46138, 97065, 4706, 72991, 19632, 131987, 21996]
[2024-12-02 20:12:38.627444] user = 20639 Cloud 284/568
[2024-12-02 20:12:38.650327] user = 20639 Local 284/568
[2024-12-02 20:12:38.759782] user = 20639 Local+ 284/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:41.638618] user = 20639 MPDA- 284/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6575292397660818
Training on augumented user 64441 0/50 current_auc = 0.6575292397660818
User 64441 AUC after training: 0.6564327485380117
User 64441 does not improve AUC. Reverting changes.
Training on augumented user 111799 1/50 current_auc = 0.6575292397660818
User 111799 AUC after training: 0.6633771929824561
User 111799 improves AUC. Keeping the model.
Training on augumented user 100841 2/50 current_auc = 0.6633771929824561
User 100841 AUC after training: 0.6644736842105263
User 100841 improves AUC. Keeping the model.
Training on augumented user 6649 3/50 current_auc = 0.6644736842105263
User 6649 AUC after training: 0.6611842105263158
User 6649 does not improve AUC. Reverting changes.
Training on augumented user 88395 4/50 current_auc = 0.6644736842105263
User 88395 AUC after training: 0.6615497076023391
User 88395 does not improve AUC. Reverting changes.
Training on augumented user 138268 5/50 current_auc = 0.6644736842105263
User 138268 AUC after training: 0.6655701754385965
User 138268 improves AUC. Keeping the model.
Training on augumented user 19867 6/50 current_auc = 0.6655701754385965
User 19867 AUC after training: 0.6589912280701754
User 19867 does not improve AUC. Reverting changes.
Training on augumented user 69810 7/50 current_auc = 0.6655701754385965
User 69810 AUC after training: 0.6681286549707602
User 69810 improves AUC. Keeping the model.
Training on augumented user 120250 8/50 current_auc = 0.6681286549707602
User 120250 AUC after training: 0.6677631578947368
User 120250 does not improve AUC. Reverting changes.
Training on augumented user 1960 9/50 current_auc = 0.6681286549707602
User 1960 AUC after training: 0.6692251461988304
User 1960 improves AUC. Keeping the model.
Training on augumented user 116251 10/50 current_auc = 0.6692251461988304
User 116251 AUC after training: 0.6589912280701754
User 116251 does not improve AUC. Reverting changes.
Training on augumented user 117572 11/50 current_auc = 0.6692251461988304
User 117572 AUC after training: 0.6677631578947367
User 117572 does not improve AUC. Reverting changes.
Training on augumented user 116298 12/50 current_auc = 0.6692251461988304
User 116298 AUC after training: 0.6703216374269005
User 116298 improves AUC. Keeping the model.
Training on augumented user 17283 13/50 current_auc = 0.6703216374269005
User 17283 AUC after training: 0.6706871345029239
User 17283 improves AUC. Keeping the model.
Training on augumented user 85955 14/50 current_auc = 0.6706871345029239
User 85955 AUC after training: 0.6695906432748538
User 85955 does not improve AUC. Reverting changes.
Training on augumented user 91463 15/50 current_auc = 0.6706871345029239
User 91463 AUC after training: 0.6692251461988303
User 91463 does not improve AUC. Reverting changes.
Training on augumented user 103016 16/50 current_auc = 0.6706871345029239
User 103016 AUC after training: 0.6666666666666666
User 103016 does not improve AUC. Reverting changes.
Training on augumented user 20415 17/50 current_auc = 0.6706871345029239
User 20415 AUC after training: 0.6688596491228069
User 20415 does not improve AUC. Reverting changes.
Training on augumented user 129912 18/50 current_auc = 0.6706871345029239
User 129912 AUC after training: 0.668859649122807
User 129912 does not improve AUC. Reverting changes.
Training on augumented user 11552 19/50 current_auc = 0.6706871345029239
User 11552 AUC after training: 0.6717836257309943
User 11552 improves AUC. Keeping the model.
Training on augumented user 96962 20/50 current_auc = 0.6717836257309943
User 96962 AUC after training: 0.6703216374269005
User 96962 does not improve AUC. Reverting changes.
Training on augumented user 78531 21/50 current_auc = 0.6717836257309943
User 78531 AUC after training: 0.6644736842105263
User 78531 does not improve AUC. Reverting changes.
Training on augumented user 76332 22/50 current_auc = 0.6717836257309943
User 76332 AUC after training: 0.6641081871345029
User 76332 does not improve AUC. Reverting changes.
Training on augumented user 126145 23/50 current_auc = 0.6717836257309943
User 126145 AUC after training: 0.6717836257309941
User 126145 does not improve AUC. Reverting changes.
Training on augumented user 114067 24/50 current_auc = 0.6717836257309943
User 114067 AUC after training: 0.6695906432748538
User 114067 does not improve AUC. Reverting changes.
Training on augumented user 44365 25/50 current_auc = 0.6717836257309943
User 44365 AUC after training: 0.674342105263158
User 44365 improves AUC. Keeping the model.
Training on augumented user 61134 26/50 current_auc = 0.674342105263158
User 61134 AUC after training: 0.6714181286549707
User 61134 does not improve AUC. Reverting changes.
Training on augumented user 39144 27/50 current_auc = 0.674342105263158
User 39144 AUC after training: 0.6754385964912282
User 39144 improves AUC. Keeping the model.
Training on augumented user 86882 28/50 current_auc = 0.6754385964912282
User 86882 AUC after training: 0.6714181286549709
User 86882 does not improve AUC. Reverting changes.
Training on augumented user 104807 29/50 current_auc = 0.6754385964912282
User 104807 AUC after training: 0.6717836257309941
User 104807 does not improve AUC. Reverting changes.
Training on augumented user 122323 30/50 current_auc = 0.6754385964912282
User 122323 AUC after training: 0.6739766081871346
User 122323 does not improve AUC. Reverting changes.
Training on augumented user 99848 31/50 current_auc = 0.6754385964912282
User 99848 AUC after training: 0.6736111111111112
User 99848 does not improve AUC. Reverting changes.
Training on augumented user 65902 32/50 current_auc = 0.6754385964912282
User 65902 AUC after training: 0.6765350877192983
User 65902 improves AUC. Keeping the model.
Training on augumented user 90587 33/50 current_auc = 0.6765350877192983
User 90587 AUC after training: 0.6761695906432749
User 90587 does not improve AUC. Reverting changes.
Training on augumented user 75116 34/50 current_auc = 0.6765350877192983
User 75116 AUC after training: 0.6739766081871345
User 75116 does not improve AUC. Reverting changes.
Training on augumented user 95941 35/50 current_auc = 0.6765350877192983
User 95941 AUC after training: 0.6666666666666666
User 95941 does not improve AUC. Reverting changes.
Training on augumented user 13121 36/50 current_auc = 0.6765350877192983
User 13121 AUC after training: 0.6732456140350876
User 13121 does not improve AUC. Reverting changes.
Training on augumented user 42889 37/50 current_auc = 0.6765350877192983
User 42889 AUC after training: 0.672514619883041
User 42889 does not improve AUC. Reverting changes.
Training on augumented user 19609 38/50 current_auc = 0.6765350877192983
User 19609 AUC after training: 0.6739766081871345
User 19609 does not improve AUC. Reverting changes.
Training on augumented user 114230 39/50 current_auc = 0.6765350877192983
User 114230 AUC after training: 0.6754385964912281
User 114230 does not improve AUC. Reverting changes.
Training on augumented user 3713 40/50 current_auc = 0.6765350877192983
User 3713 AUC after training: 0.672514619883041
User 3713 does not improve AUC. Reverting changes.
Training on augumented user 136419 41/50 current_auc = 0.6765350877192983
User 136419 AUC after training: 0.6754385964912281
User 136419 does not improve AUC. Reverting changes.
Training on augumented user 122051 42/50 current_auc = 0.6765350877192983
User 122051 AUC after training: 0.6743421052631579
User 122051 does not improve AUC. Reverting changes.
Training on augumented user 46138 43/50 current_auc = 0.6765350877192983
User 46138 AUC after training: 0.6772660818713451
User 46138 improves AUC. Keeping the model.
Training on augumented user 97065 44/50 current_auc = 0.6772660818713451
User 97065 AUC after training: 0.6769005847953217
User 97065 does not improve AUC. Reverting changes.
Training on augumented user 4706 45/50 current_auc = 0.6772660818713451
User 4706 AUC after training: 0.6710526315789473
User 4706 does not improve AUC. Reverting changes.
Training on augumented user 72991 46/50 current_auc = 0.6772660818713451
User 72991 AUC after training: 0.6805555555555556
User 72991 improves AUC. Keeping the model.
Training on augumented user 19632 47/50 current_auc = 0.6805555555555556
User 19632 AUC after training: 0.6794590643274854
User 19632 does not improve AUC. Reverting changes.
Training on augumented user 131987 48/50 current_auc = 0.6805555555555556
User 131987 AUC after training: 0.6849415204678362
User 131987 improves AUC. Keeping the model.
Training on augumented user 21996 49/50 current_auc = 0.6849415204678362
User 21996 AUC after training: 0.6845760233918128
User 21996 does not improve AUC. Reverting changes.
[2024-12-02 20:13:14.175778] start test user 20661 285/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:14.601296] start test user 20661 285/568 recall augumented users by random, augumented_users = [124050, 84412, 97969, 10914, 36829, 47688, 106471, 16120, 11416, 94781, 120921, 2736, 14239, 112381, 37783, 35668, 113864, 99121, 20196, 73636, 103367, 131325, 60585, 76401, 100013, 94270, 126062, 13323, 34773, 108655, 96996, 47034, 137512, 88725, 84745, 127676, 77164, 82471, 97711, 124509, 79805, 134139, 34033, 40988, 25762, 100353, 71913, 124025, 35868, 28085]
[2024-12-02 20:13:14.616616] user = 20661 Cloud 285/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:13:14.623115] user = 20661 Local 285/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:13:14.667055] user = 20661 Local+ 285/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:13:17.221651] user = 20661 MPDA- 285/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 124050 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124050 AUC after training: 0.5
User 124050 does not improve AUC. Reverting changes.
Training on augumented user 84412 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84412 AUC after training: 0.5
User 84412 does not improve AUC. Reverting changes.
Training on augumented user 97969 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97969 AUC after training: 0.5
User 97969 does not improve AUC. Reverting changes.
Training on augumented user 10914 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10914 AUC after training: 0.5
User 10914 does not improve AUC. Reverting changes.
Training on augumented user 36829 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36829 AUC after training: 0.5
User 36829 does not improve AUC. Reverting changes.
Training on augumented user 47688 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47688 AUC after training: 0.5
User 47688 does not improve AUC. Reverting changes.
Training on augumented user 106471 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106471 AUC after training: 0.5
User 106471 does not improve AUC. Reverting changes.
Training on augumented user 16120 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16120 AUC after training: 0.5
User 16120 does not improve AUC. Reverting changes.
Training on augumented user 11416 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11416 AUC after training: 0.5
User 11416 does not improve AUC. Reverting changes.
Training on augumented user 94781 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94781 AUC after training: 0.5
User 94781 does not improve AUC. Reverting changes.
Training on augumented user 120921 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120921 AUC after training: 0.5
User 120921 does not improve AUC. Reverting changes.
Training on augumented user 2736 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2736 AUC after training: 0.5
User 2736 does not improve AUC. Reverting changes.
Training on augumented user 14239 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14239 AUC after training: 0.5
User 14239 does not improve AUC. Reverting changes.
Training on augumented user 112381 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112381 AUC after training: 0.5
User 112381 does not improve AUC. Reverting changes.
Training on augumented user 37783 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37783 AUC after training: 0.5
User 37783 does not improve AUC. Reverting changes.
Training on augumented user 35668 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35668 AUC after training: 0.5
User 35668 does not improve AUC. Reverting changes.
Training on augumented user 113864 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113864 AUC after training: 0.5
User 113864 does not improve AUC. Reverting changes.
Training on augumented user 99121 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99121 AUC after training: 0.5
User 99121 does not improve AUC. Reverting changes.
Training on augumented user 20196 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20196 AUC after training: 0.5
User 20196 does not improve AUC. Reverting changes.
Training on augumented user 73636 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73636 AUC after training: 0.5
User 73636 does not improve AUC. Reverting changes.
Training on augumented user 103367 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103367 AUC after training: 0.5
User 103367 does not improve AUC. Reverting changes.
Training on augumented user 131325 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131325 AUC after training: 0.5
User 131325 does not improve AUC. Reverting changes.
Training on augumented user 60585 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60585 AUC after training: 0.5
User 60585 does not improve AUC. Reverting changes.
Training on augumented user 76401 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76401 AUC after training: 0.5
User 76401 does not improve AUC. Reverting changes.
Training on augumented user 100013 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100013 AUC after training: 0.5
User 100013 does not improve AUC. Reverting changes.
Training on augumented user 94270 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94270 AUC after training: 0.5
User 94270 does not improve AUC. Reverting changes.
Training on augumented user 126062 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126062 AUC after training: 0.5
User 126062 does not improve AUC. Reverting changes.
Training on augumented user 13323 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13323 AUC after training: 0.5
User 13323 does not improve AUC. Reverting changes.
Training on augumented user 34773 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34773 AUC after training: 0.5
User 34773 does not improve AUC. Reverting changes.
Training on augumented user 108655 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108655 AUC after training: 0.5
User 108655 does not improve AUC. Reverting changes.
Training on augumented user 96996 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96996 AUC after training: 0.5
User 96996 does not improve AUC. Reverting changes.
Training on augumented user 47034 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47034 AUC after training: 0.5
User 47034 does not improve AUC. Reverting changes.
Training on augumented user 137512 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137512 AUC after training: 0.5
User 137512 does not improve AUC. Reverting changes.
Training on augumented user 88725 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88725 AUC after training: 0.5
User 88725 does not improve AUC. Reverting changes.
Training on augumented user 84745 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84745 AUC after training: 0.5
User 84745 does not improve AUC. Reverting changes.
Training on augumented user 127676 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127676 AUC after training: 0.5
User 127676 does not improve AUC. Reverting changes.
Training on augumented user 77164 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77164 AUC after training: 0.5
User 77164 does not improve AUC. Reverting changes.
Training on augumented user 82471 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82471 AUC after training: 0.5
User 82471 does not improve AUC. Reverting changes.
Training on augumented user 97711 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97711 AUC after training: 0.5
User 97711 does not improve AUC. Reverting changes.
Training on augumented user 124509 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124509 AUC after training: 0.5
User 124509 does not improve AUC. Reverting changes.
Training on augumented user 79805 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79805 AUC after training: 0.5
User 79805 does not improve AUC. Reverting changes.
Training on augumented user 134139 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134139 AUC after training: 0.5
User 134139 does not improve AUC. Reverting changes.
Training on augumented user 34033 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34033 AUC after training: 0.5
User 34033 does not improve AUC. Reverting changes.
Training on augumented user 40988 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40988 AUC after training: 0.5
User 40988 does not improve AUC. Reverting changes.
Training on augumented user 25762 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25762 AUC after training: 0.5
User 25762 does not improve AUC. Reverting changes.
Training on augumented user 100353 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100353 AUC after training: 0.5
User 100353 does not improve AUC. Reverting changes.
Training on augumented user 71913 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71913 AUC after training: 0.5
User 71913 does not improve AUC. Reverting changes.
Training on augumented user 124025 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124025 AUC after training: 0.5
User 124025 does not improve AUC. Reverting changes.
Training on augumented user 35868 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35868 AUC after training: 0.5
User 35868 does not improve AUC. Reverting changes.
Training on augumented user 28085 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28085 AUC after training: 0.5
User 28085 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:13:46.324329] start test user 20824 286/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:46.730349] start test user 20824 286/568 recall augumented users by random, augumented_users = [74784, 113450, 52880, 26090, 57964, 125413, 70023, 43457, 117585, 69647, 46934, 32901, 89347, 94758, 134798, 12248, 121392, 20853, 119927, 79307, 68388, 53507, 76511, 72766, 50525, 48950, 101088, 125451, 80655, 125423, 123798, 59264, 51555, 4725, 115729, 47547, 42855, 2074, 62873, 96829, 92868, 104896, 78535, 46938, 70839, 19427, 23776, 98025, 122512, 32179]
[2024-12-02 20:13:46.745674] user = 20824 Cloud 286/568
[2024-12-02 20:13:46.756759] user = 20824 Local 286/568
[2024-12-02 20:13:46.914262] user = 20824 Local+ 286/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:49.289128] user = 20824 MPDA- 286/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6607142857142857
Training on augumented user 74784 0/50 current_auc = 0.6607142857142857
User 74784 AUC after training: 0.6607142857142857
User 74784 does not improve AUC. Reverting changes.
Training on augumented user 113450 1/50 current_auc = 0.6607142857142857
User 113450 AUC after training: 0.6607142857142857
User 113450 does not improve AUC. Reverting changes.
Training on augumented user 52880 2/50 current_auc = 0.6607142857142857
User 52880 AUC after training: 0.6607142857142857
User 52880 does not improve AUC. Reverting changes.
Training on augumented user 26090 3/50 current_auc = 0.6607142857142857
User 26090 AUC after training: 0.6607142857142857
User 26090 does not improve AUC. Reverting changes.
Training on augumented user 57964 4/50 current_auc = 0.6607142857142857
User 57964 AUC after training: 0.6607142857142857
User 57964 does not improve AUC. Reverting changes.
Training on augumented user 125413 5/50 current_auc = 0.6607142857142857
User 125413 AUC after training: 0.6607142857142857
User 125413 does not improve AUC. Reverting changes.
Training on augumented user 70023 6/50 current_auc = 0.6607142857142857
User 70023 AUC after training: 0.6607142857142857
User 70023 does not improve AUC. Reverting changes.
Training on augumented user 43457 7/50 current_auc = 0.6607142857142857
User 43457 AUC after training: 0.6607142857142857
User 43457 does not improve AUC. Reverting changes.
Training on augumented user 117585 8/50 current_auc = 0.6607142857142857
User 117585 AUC after training: 0.6607142857142857
User 117585 does not improve AUC. Reverting changes.
Training on augumented user 69647 9/50 current_auc = 0.6607142857142857
User 69647 AUC after training: 0.6607142857142857
User 69647 does not improve AUC. Reverting changes.
Training on augumented user 46934 10/50 current_auc = 0.6607142857142857
User 46934 AUC after training: 0.6607142857142857
User 46934 does not improve AUC. Reverting changes.
Training on augumented user 32901 11/50 current_auc = 0.6607142857142857
User 32901 AUC after training: 0.6607142857142857
User 32901 does not improve AUC. Reverting changes.
Training on augumented user 89347 12/50 current_auc = 0.6607142857142857
User 89347 AUC after training: 0.6607142857142857
User 89347 does not improve AUC. Reverting changes.
Training on augumented user 94758 13/50 current_auc = 0.6607142857142857
User 94758 AUC after training: 0.6607142857142857
User 94758 does not improve AUC. Reverting changes.
Training on augumented user 134798 14/50 current_auc = 0.6607142857142857
User 134798 AUC after training: 0.6607142857142857
User 134798 does not improve AUC. Reverting changes.
Training on augumented user 12248 15/50 current_auc = 0.6607142857142857
User 12248 AUC after training: 0.6607142857142857
User 12248 does not improve AUC. Reverting changes.
Training on augumented user 121392 16/50 current_auc = 0.6607142857142857
User 121392 AUC after training: 0.6607142857142857
User 121392 does not improve AUC. Reverting changes.
Training on augumented user 20853 17/50 current_auc = 0.6607142857142857
User 20853 AUC after training: 0.6607142857142857
User 20853 does not improve AUC. Reverting changes.
Training on augumented user 119927 18/50 current_auc = 0.6607142857142857
User 119927 AUC after training: 0.6607142857142857
User 119927 does not improve AUC. Reverting changes.
Training on augumented user 79307 19/50 current_auc = 0.6607142857142857
User 79307 AUC after training: 0.6607142857142857
User 79307 does not improve AUC. Reverting changes.
Training on augumented user 68388 20/50 current_auc = 0.6607142857142857
User 68388 AUC after training: 0.6607142857142857
User 68388 does not improve AUC. Reverting changes.
Training on augumented user 53507 21/50 current_auc = 0.6607142857142857
User 53507 AUC after training: 0.6607142857142857
User 53507 does not improve AUC. Reverting changes.
Training on augumented user 76511 22/50 current_auc = 0.6607142857142857
User 76511 AUC after training: 0.6607142857142857
User 76511 does not improve AUC. Reverting changes.
Training on augumented user 72766 23/50 current_auc = 0.6607142857142857
User 72766 AUC after training: 0.6607142857142857
User 72766 does not improve AUC. Reverting changes.
Training on augumented user 50525 24/50 current_auc = 0.6607142857142857
User 50525 AUC after training: 0.6607142857142857
User 50525 does not improve AUC. Reverting changes.
Training on augumented user 48950 25/50 current_auc = 0.6607142857142857
User 48950 AUC after training: 0.6607142857142857
User 48950 does not improve AUC. Reverting changes.
Training on augumented user 101088 26/50 current_auc = 0.6607142857142857
User 101088 AUC after training: 0.6607142857142857
User 101088 does not improve AUC. Reverting changes.
Training on augumented user 125451 27/50 current_auc = 0.6607142857142857
User 125451 AUC after training: 0.6607142857142857
User 125451 does not improve AUC. Reverting changes.
Training on augumented user 80655 28/50 current_auc = 0.6607142857142857
User 80655 AUC after training: 0.6607142857142857
User 80655 does not improve AUC. Reverting changes.
Training on augumented user 125423 29/50 current_auc = 0.6607142857142857
User 125423 AUC after training: 0.6607142857142857
User 125423 does not improve AUC. Reverting changes.
Training on augumented user 123798 30/50 current_auc = 0.6607142857142857
User 123798 AUC after training: 0.6607142857142857
User 123798 does not improve AUC. Reverting changes.
Training on augumented user 59264 31/50 current_auc = 0.6607142857142857
User 59264 AUC after training: 0.6607142857142857
User 59264 does not improve AUC. Reverting changes.
Training on augumented user 51555 32/50 current_auc = 0.6607142857142857
User 51555 AUC after training: 0.6607142857142857
User 51555 does not improve AUC. Reverting changes.
Training on augumented user 4725 33/50 current_auc = 0.6607142857142857
User 4725 AUC after training: 0.6607142857142857
User 4725 does not improve AUC. Reverting changes.
Training on augumented user 115729 34/50 current_auc = 0.6607142857142857
User 115729 AUC after training: 0.6607142857142857
User 115729 does not improve AUC. Reverting changes.
Training on augumented user 47547 35/50 current_auc = 0.6607142857142857
User 47547 AUC after training: 0.6607142857142857
User 47547 does not improve AUC. Reverting changes.
Training on augumented user 42855 36/50 current_auc = 0.6607142857142857
User 42855 AUC after training: 0.6607142857142857
User 42855 does not improve AUC. Reverting changes.
Training on augumented user 2074 37/50 current_auc = 0.6607142857142857
User 2074 AUC after training: 0.6607142857142857
User 2074 does not improve AUC. Reverting changes.
Training on augumented user 62873 38/50 current_auc = 0.6607142857142857
User 62873 AUC after training: 0.6607142857142857
User 62873 does not improve AUC. Reverting changes.
Training on augumented user 96829 39/50 current_auc = 0.6607142857142857
User 96829 AUC after training: 0.6607142857142857
User 96829 does not improve AUC. Reverting changes.
Training on augumented user 92868 40/50 current_auc = 0.6607142857142857
User 92868 AUC after training: 0.6607142857142857
User 92868 does not improve AUC. Reverting changes.
Training on augumented user 104896 41/50 current_auc = 0.6607142857142857
User 104896 AUC after training: 0.6607142857142857
User 104896 does not improve AUC. Reverting changes.
Training on augumented user 78535 42/50 current_auc = 0.6607142857142857
User 78535 AUC after training: 0.6607142857142857
User 78535 does not improve AUC. Reverting changes.
Training on augumented user 46938 43/50 current_auc = 0.6607142857142857
User 46938 AUC after training: 0.6607142857142857
User 46938 does not improve AUC. Reverting changes.
Training on augumented user 70839 44/50 current_auc = 0.6607142857142857
User 70839 AUC after training: 0.6607142857142857
User 70839 does not improve AUC. Reverting changes.
Training on augumented user 19427 45/50 current_auc = 0.6607142857142857
User 19427 AUC after training: 0.6607142857142857
User 19427 does not improve AUC. Reverting changes.
Training on augumented user 23776 46/50 current_auc = 0.6607142857142857
User 23776 AUC after training: 0.6607142857142857
User 23776 does not improve AUC. Reverting changes.
Training on augumented user 98025 47/50 current_auc = 0.6607142857142857
User 98025 AUC after training: 0.6607142857142857
User 98025 does not improve AUC. Reverting changes.
Training on augumented user 122512 48/50 current_auc = 0.6607142857142857
User 122512 AUC after training: 0.6607142857142857
User 122512 does not improve AUC. Reverting changes.
Training on augumented user 32179 49/50 current_auc = 0.6607142857142857
User 32179 AUC after training: 0.6607142857142857
User 32179 does not improve AUC. Reverting changes.
[2024-12-02 20:14:22.034622] start test user 20845 287/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:22.753355] start test user 20845 287/568 recall augumented users by random, augumented_users = [63904, 22843, 77133, 3404, 114072, 94323, 15675, 70928, 24184, 54734, 124669, 125281, 77014, 135221, 94692, 5890, 66145, 70476, 36242, 16170, 19736, 2001, 68602, 93751, 96934, 85742, 22359, 116587, 60937, 26599, 100949, 83582, 126718, 19071, 137945, 80781, 70920, 19385, 29135, 43044, 29926, 65839, 130916, 9894, 41157, 63307, 74921, 136200, 116603, 41831]
[2024-12-02 20:14:22.772207] user = 20845 Cloud 287/568
[2024-12-02 20:14:22.803684] user = 20845 Local 287/568
[2024-12-02 20:14:23.108970] user = 20845 Local+ 287/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:25.745137] user = 20845 MPDA- 287/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.698543412033511
Training on augumented user 63904 0/50 current_auc = 0.698543412033511
User 63904 AUC after training: 0.6985910129474486
User 63904 improves AUC. Keeping the model.
Training on augumented user 22843 1/50 current_auc = 0.6985910129474486
User 22843 AUC after training: 0.6980674028941356
User 22843 does not improve AUC. Reverting changes.
Training on augumented user 77133 2/50 current_auc = 0.6985910129474486
User 77133 AUC after training: 0.6984958111195735
User 77133 does not improve AUC. Reverting changes.
Training on augumented user 3404 3/50 current_auc = 0.6985910129474486
User 3404 AUC after training: 0.6983054074638232
User 3404 does not improve AUC. Reverting changes.
Training on augumented user 114072 4/50 current_auc = 0.6985910129474486
User 114072 AUC after training: 0.698448210205636
User 114072 does not improve AUC. Reverting changes.
Training on augumented user 94323 5/50 current_auc = 0.6985910129474486
User 94323 AUC after training: 0.6982102056359482
User 94323 does not improve AUC. Reverting changes.
Training on augumented user 15675 6/50 current_auc = 0.6985910129474486
User 15675 AUC after training: 0.6982578065498857
User 15675 does not improve AUC. Reverting changes.
Training on augumented user 70928 7/50 current_auc = 0.6985910129474486
User 70928 AUC after training: 0.6979722010662605
User 70928 does not improve AUC. Reverting changes.
Training on augumented user 24184 8/50 current_auc = 0.6985910129474486
User 24184 AUC after training: 0.6983054074638233
User 24184 does not improve AUC. Reverting changes.
Training on augumented user 54734 9/50 current_auc = 0.6985910129474486
User 54734 AUC after training: 0.6983054074638233
User 54734 does not improve AUC. Reverting changes.
Training on augumented user 124669 10/50 current_auc = 0.6985910129474486
User 124669 AUC after training: 0.6984482102056359
User 124669 does not improve AUC. Reverting changes.
Training on augumented user 125281 11/50 current_auc = 0.6985910129474486
User 125281 AUC after training: 0.6986386138613861
User 125281 improves AUC. Keeping the model.
Training on augumented user 77014 12/50 current_auc = 0.6986386138613861
User 77014 AUC after training: 0.6983054074638233
User 77014 does not improve AUC. Reverting changes.
Training on augumented user 135221 13/50 current_auc = 0.6986386138613861
User 135221 AUC after training: 0.6984958111195735
User 135221 does not improve AUC. Reverting changes.
Training on augumented user 94692 14/50 current_auc = 0.6986386138613861
User 94692 AUC after training: 0.6983054074638233
User 94692 does not improve AUC. Reverting changes.
Training on augumented user 5890 15/50 current_auc = 0.6986386138613861
User 5890 AUC after training: 0.6982578065498857
User 5890 does not improve AUC. Reverting changes.
Training on augumented user 66145 16/50 current_auc = 0.6986386138613861
User 66145 AUC after training: 0.6983530083777608
User 66145 does not improve AUC. Reverting changes.
Training on augumented user 70476 17/50 current_auc = 0.6986386138613861
User 70476 AUC after training: 0.6987338156892612
User 70476 improves AUC. Keeping the model.
Training on augumented user 36242 18/50 current_auc = 0.6987338156892612
User 36242 AUC after training: 0.6989242193450114
User 36242 improves AUC. Keeping the model.
Training on augumented user 16170 19/50 current_auc = 0.6989242193450114
User 16170 AUC after training: 0.6988290175171363
User 16170 does not improve AUC. Reverting changes.
Training on augumented user 19736 20/50 current_auc = 0.6989242193450114
User 19736 AUC after training: 0.6986624143183549
User 19736 does not improve AUC. Reverting changes.
Training on augumented user 2001 21/50 current_auc = 0.6989242193450114
User 2001 AUC after training: 0.698971820258949
User 2001 improves AUC. Keeping the model.
Training on augumented user 68602 22/50 current_auc = 0.698971820258949
User 68602 AUC after training: 0.6984006092916984
User 68602 does not improve AUC. Reverting changes.
Training on augumented user 93751 23/50 current_auc = 0.698971820258949
User 93751 AUC after training: 0.699067022086824
User 93751 improves AUC. Keeping the model.
Training on augumented user 96934 24/50 current_auc = 0.699067022086824
User 96934 AUC after training: 0.6990194211728865
User 96934 does not improve AUC. Reverting changes.
Training on augumented user 85742 25/50 current_auc = 0.699067022086824
User 85742 AUC after training: 0.6988290175171362
User 85742 does not improve AUC. Reverting changes.
Training on augumented user 22359 26/50 current_auc = 0.699067022086824
User 22359 AUC after training: 0.6986862147753237
User 22359 does not improve AUC. Reverting changes.
Training on augumented user 116587 27/50 current_auc = 0.699067022086824
User 116587 AUC after training: 0.6989242193450114
User 116587 does not improve AUC. Reverting changes.
Training on augumented user 60937 28/50 current_auc = 0.699067022086824
User 60937 AUC after training: 0.6984958111195735
User 60937 does not improve AUC. Reverting changes.
Training on augumented user 26599 29/50 current_auc = 0.699067022086824
User 26599 AUC after training: 0.6989242193450114
User 26599 does not improve AUC. Reverting changes.
Training on augumented user 100949 30/50 current_auc = 0.699067022086824
User 100949 AUC after training: 0.6989242193450115
User 100949 does not improve AUC. Reverting changes.
Training on augumented user 83582 31/50 current_auc = 0.699067022086824
User 83582 AUC after training: 0.6988528179741051
User 83582 does not improve AUC. Reverting changes.
Training on augumented user 126718 32/50 current_auc = 0.699067022086824
User 126718 AUC after training: 0.6989480198019802
User 126718 does not improve AUC. Reverting changes.
Training on augumented user 19071 33/50 current_auc = 0.699067022086824
User 19071 AUC after training: 0.6986862147753237
User 19071 does not improve AUC. Reverting changes.
Training on augumented user 137945 34/50 current_auc = 0.699067022086824
User 137945 AUC after training: 0.6987814166031987
User 137945 does not improve AUC. Reverting changes.
Training on augumented user 80781 35/50 current_auc = 0.699067022086824
User 80781 AUC after training: 0.698543412033511
User 80781 does not improve AUC. Reverting changes.
Training on augumented user 70920 36/50 current_auc = 0.699067022086824
User 70920 AUC after training: 0.69875761614623
User 70920 does not improve AUC. Reverting changes.
Training on augumented user 19385 37/50 current_auc = 0.699067022086824
User 19385 AUC after training: 0.6988290175171363
User 19385 does not improve AUC. Reverting changes.
Training on augumented user 29135 38/50 current_auc = 0.699067022086824
User 29135 AUC after training: 0.6987814166031987
User 29135 does not improve AUC. Reverting changes.
Training on augumented user 43044 39/50 current_auc = 0.699067022086824
User 43044 AUC after training: 0.6988290175171362
User 43044 does not improve AUC. Reverting changes.
Training on augumented user 29926 40/50 current_auc = 0.699067022086824
User 29926 AUC after training: 0.6990194211728865
User 29926 does not improve AUC. Reverting changes.
Training on augumented user 65839 41/50 current_auc = 0.699067022086824
User 65839 AUC after training: 0.6987338156892613
User 65839 does not improve AUC. Reverting changes.
Training on augumented user 130916 42/50 current_auc = 0.699067022086824
User 130916 AUC after training: 0.6989242193450114
User 130916 does not improve AUC. Reverting changes.
Training on augumented user 9894 43/50 current_auc = 0.699067022086824
User 9894 AUC after training: 0.6988766184310738
User 9894 does not improve AUC. Reverting changes.
Training on augumented user 41157 44/50 current_auc = 0.699067022086824
User 41157 AUC after training: 0.6991146230007615
User 41157 improves AUC. Keeping the model.
Training on augumented user 63307 45/50 current_auc = 0.6991146230007615
User 63307 AUC after training: 0.6991146230007617
User 63307 improves AUC. Keeping the model.
Training on augumented user 74921 46/50 current_auc = 0.6991146230007617
User 74921 AUC after training: 0.6986862147753237
User 74921 does not improve AUC. Reverting changes.
Training on augumented user 136200 47/50 current_auc = 0.6991146230007617
User 136200 AUC after training: 0.6988766184310738
User 136200 does not improve AUC. Reverting changes.
Training on augumented user 116603 48/50 current_auc = 0.6991146230007617
User 116603 AUC after training: 0.6989718202589489
User 116603 does not improve AUC. Reverting changes.
Training on augumented user 41831 49/50 current_auc = 0.6991146230007617
User 41831 AUC after training: 0.6989718202589489
User 41831 does not improve AUC. Reverting changes.
[2024-12-02 20:14:56.393437] start test user 20892 288/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:56.815973] start test user 20892 288/568 recall augumented users by random, augumented_users = [37218, 96172, 52335, 56875, 117125, 44794, 70561, 32930, 86336, 78938, 114441, 132974, 116361, 113611, 31144, 78921, 79332, 104288, 31728, 126468, 91712, 99943, 136653, 97689, 105201, 81075, 94517, 68659, 23352, 110765, 121740, 114883, 104769, 93108, 119102, 39573, 51140, 33901, 23139, 9563, 101429, 47202, 125782, 71157, 98031, 51636, 61433, 71900, 28464, 105198]
[2024-12-02 20:14:56.830521] user = 20892 Cloud 288/568
[2024-12-02 20:14:56.847133] user = 20892 Local 288/568
[2024-12-02 20:14:56.879174] user = 20892 Local+ 288/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:59.608069] user = 20892 MPDA- 288/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7043417366946779
Training on augumented user 37218 0/50 current_auc = 0.7043417366946779
User 37218 AUC after training: 0.7050420168067227
User 37218 improves AUC. Keeping the model.
Training on augumented user 96172 1/50 current_auc = 0.7050420168067227
User 96172 AUC after training: 0.7043417366946779
User 96172 does not improve AUC. Reverting changes.
Training on augumented user 52335 2/50 current_auc = 0.7050420168067227
User 52335 AUC after training: 0.7047619047619048
User 52335 does not improve AUC. Reverting changes.
Training on augumented user 56875 3/50 current_auc = 0.7050420168067227
User 56875 AUC after training: 0.7050420168067227
User 56875 does not improve AUC. Reverting changes.
Training on augumented user 117125 4/50 current_auc = 0.7050420168067227
User 117125 AUC after training: 0.7050420168067227
User 117125 does not improve AUC. Reverting changes.
Training on augumented user 44794 5/50 current_auc = 0.7050420168067227
User 44794 AUC after training: 0.703781512605042
User 44794 does not improve AUC. Reverting changes.
Training on augumented user 70561 6/50 current_auc = 0.7050420168067227
User 70561 AUC after training: 0.7043417366946779
User 70561 does not improve AUC. Reverting changes.
Training on augumented user 32930 7/50 current_auc = 0.7050420168067227
User 32930 AUC after training: 0.7046218487394958
User 32930 does not improve AUC. Reverting changes.
Training on augumented user 86336 8/50 current_auc = 0.7050420168067227
User 86336 AUC after training: 0.7046218487394958
User 86336 does not improve AUC. Reverting changes.
Training on augumented user 78938 9/50 current_auc = 0.7050420168067227
User 78938 AUC after training: 0.7044817927170869
User 78938 does not improve AUC. Reverting changes.
Training on augumented user 114441 10/50 current_auc = 0.7050420168067227
User 114441 AUC after training: 0.7046218487394958
User 114441 does not improve AUC. Reverting changes.
Training on augumented user 132974 11/50 current_auc = 0.7050420168067227
User 132974 AUC after training: 0.7050420168067227
User 132974 does not improve AUC. Reverting changes.
Training on augumented user 116361 12/50 current_auc = 0.7050420168067227
User 116361 AUC after training: 0.7047619047619048
User 116361 does not improve AUC. Reverting changes.
Training on augumented user 113611 13/50 current_auc = 0.7050420168067227
User 113611 AUC after training: 0.7050420168067227
User 113611 does not improve AUC. Reverting changes.
Training on augumented user 31144 14/50 current_auc = 0.7050420168067227
User 31144 AUC after training: 0.7050420168067226
User 31144 does not improve AUC. Reverting changes.
Training on augumented user 78921 15/50 current_auc = 0.7050420168067227
User 78921 AUC after training: 0.7053221288515406
User 78921 improves AUC. Keeping the model.
Training on augumented user 79332 16/50 current_auc = 0.7053221288515406
User 79332 AUC after training: 0.704201680672269
User 79332 does not improve AUC. Reverting changes.
Training on augumented user 104288 17/50 current_auc = 0.7053221288515406
User 104288 AUC after training: 0.7056022408963586
User 104288 improves AUC. Keeping the model.
Training on augumented user 31728 18/50 current_auc = 0.7056022408963586
User 31728 AUC after training: 0.7049019607843137
User 31728 does not improve AUC. Reverting changes.
Training on augumented user 126468 19/50 current_auc = 0.7056022408963586
User 126468 AUC after training: 0.7050420168067226
User 126468 does not improve AUC. Reverting changes.
Training on augumented user 91712 20/50 current_auc = 0.7056022408963586
User 91712 AUC after training: 0.7039215686274509
User 91712 does not improve AUC. Reverting changes.
Training on augumented user 99943 21/50 current_auc = 0.7056022408963586
User 99943 AUC after training: 0.7056022408963586
User 99943 does not improve AUC. Reverting changes.
Training on augumented user 136653 22/50 current_auc = 0.7056022408963586
User 136653 AUC after training: 0.7053221288515406
User 136653 does not improve AUC. Reverting changes.
Training on augumented user 97689 23/50 current_auc = 0.7056022408963586
User 97689 AUC after training: 0.7056022408963586
User 97689 does not improve AUC. Reverting changes.
Training on augumented user 105201 24/50 current_auc = 0.7056022408963586
User 105201 AUC after training: 0.7053221288515406
User 105201 does not improve AUC. Reverting changes.
Training on augumented user 81075 25/50 current_auc = 0.7056022408963586
User 81075 AUC after training: 0.7049019607843138
User 81075 does not improve AUC. Reverting changes.
Training on augumented user 94517 26/50 current_auc = 0.7056022408963586
User 94517 AUC after training: 0.7046218487394958
User 94517 does not improve AUC. Reverting changes.
Training on augumented user 68659 27/50 current_auc = 0.7056022408963586
User 68659 AUC after training: 0.7050420168067226
User 68659 does not improve AUC. Reverting changes.
Training on augumented user 23352 28/50 current_auc = 0.7056022408963586
User 23352 AUC after training: 0.7050420168067226
User 23352 does not improve AUC. Reverting changes.
Training on augumented user 110765 29/50 current_auc = 0.7056022408963586
User 110765 AUC after training: 0.7053221288515406
User 110765 does not improve AUC. Reverting changes.
Training on augumented user 121740 30/50 current_auc = 0.7056022408963586
User 121740 AUC after training: 0.7049019607843137
User 121740 does not improve AUC. Reverting changes.
Training on augumented user 114883 31/50 current_auc = 0.7056022408963586
User 114883 AUC after training: 0.7056022408963586
User 114883 does not improve AUC. Reverting changes.
Training on augumented user 104769 32/50 current_auc = 0.7056022408963586
User 104769 AUC after training: 0.7044817927170869
User 104769 does not improve AUC. Reverting changes.
Training on augumented user 93108 33/50 current_auc = 0.7056022408963586
User 93108 AUC after training: 0.7053221288515406
User 93108 does not improve AUC. Reverting changes.
Training on augumented user 119102 34/50 current_auc = 0.7056022408963586
User 119102 AUC after training: 0.703781512605042
User 119102 does not improve AUC. Reverting changes.
Training on augumented user 39573 35/50 current_auc = 0.7056022408963586
User 39573 AUC after training: 0.7056022408963586
User 39573 does not improve AUC. Reverting changes.
Training on augumented user 51140 36/50 current_auc = 0.7056022408963586
User 51140 AUC after training: 0.7053221288515407
User 51140 does not improve AUC. Reverting changes.
Training on augumented user 33901 37/50 current_auc = 0.7056022408963586
User 33901 AUC after training: 0.7061624649859944
User 33901 improves AUC. Keeping the model.
Training on augumented user 23139 38/50 current_auc = 0.7061624649859944
User 23139 AUC after training: 0.7058823529411765
User 23139 does not improve AUC. Reverting changes.
Training on augumented user 9563 39/50 current_auc = 0.7061624649859944
User 9563 AUC after training: 0.7053221288515406
User 9563 does not improve AUC. Reverting changes.
Training on augumented user 101429 40/50 current_auc = 0.7061624649859944
User 101429 AUC after training: 0.7047619047619047
User 101429 does not improve AUC. Reverting changes.
Training on augumented user 47202 41/50 current_auc = 0.7061624649859944
User 47202 AUC after training: 0.7053221288515406
User 47202 does not improve AUC. Reverting changes.
Training on augumented user 125782 42/50 current_auc = 0.7061624649859944
User 125782 AUC after training: 0.7056022408963586
User 125782 does not improve AUC. Reverting changes.
Training on augumented user 71157 43/50 current_auc = 0.7061624649859944
User 71157 AUC after training: 0.7056022408963585
User 71157 does not improve AUC. Reverting changes.
Training on augumented user 98031 44/50 current_auc = 0.7061624649859944
User 98031 AUC after training: 0.7061624649859944
User 98031 does not improve AUC. Reverting changes.
Training on augumented user 51636 45/50 current_auc = 0.7061624649859944
User 51636 AUC after training: 0.7044817927170868
User 51636 does not improve AUC. Reverting changes.
Training on augumented user 61433 46/50 current_auc = 0.7061624649859944
User 61433 AUC after training: 0.7053221288515406
User 61433 does not improve AUC. Reverting changes.
Training on augumented user 71900 47/50 current_auc = 0.7061624649859944
User 71900 AUC after training: 0.7058823529411765
User 71900 does not improve AUC. Reverting changes.
Training on augumented user 28464 48/50 current_auc = 0.7061624649859944
User 28464 AUC after training: 0.7053221288515407
User 28464 does not improve AUC. Reverting changes.
Training on augumented user 105198 49/50 current_auc = 0.7061624649859944
User 105198 AUC after training: 0.7050420168067226
User 105198 does not improve AUC. Reverting changes.
[2024-12-02 20:15:29.985800] start test user 20899 289/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:30.407096] start test user 20899 289/568 recall augumented users by random, augumented_users = [6975, 28971, 40396, 52965, 105741, 80677, 132059, 109888, 98888, 38080, 18162, 93260, 137440, 122812, 71226, 130393, 64680, 57580, 105675, 51580, 46845, 119700, 63914, 75391, 105091, 34530, 46399, 40367, 83561, 23837, 117634, 10717, 132999, 22656, 66310, 102100, 70203, 39641, 63552, 34999, 6986, 116187, 79544, 22957, 56404, 18846, 110446, 56021, 121883, 101509]
[2024-12-02 20:15:30.422925] user = 20899 Cloud 289/568
[2024-12-02 20:15:30.433278] user = 20899 Local 289/568
[2024-12-02 20:15:30.498465] user = 20899 Local+ 289/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:33.045283] user = 20899 MPDA- 289/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6294642857142857
Training on augumented user 6975 0/50 current_auc = 0.6294642857142857
User 6975 AUC after training: 0.6316964285714286
User 6975 improves AUC. Keeping the model.
Training on augumented user 28971 1/50 current_auc = 0.6316964285714286
User 28971 AUC after training: 0.625
User 28971 does not improve AUC. Reverting changes.
Training on augumented user 40396 2/50 current_auc = 0.6316964285714286
User 40396 AUC after training: 0.6339285714285715
User 40396 improves AUC. Keeping the model.
Training on augumented user 52965 3/50 current_auc = 0.6339285714285715
User 52965 AUC after training: 0.6272321428571428
User 52965 does not improve AUC. Reverting changes.
Training on augumented user 105741 4/50 current_auc = 0.6339285714285715
User 105741 AUC after training: 0.6383928571428572
User 105741 improves AUC. Keeping the model.
Training on augumented user 80677 5/50 current_auc = 0.6383928571428572
User 80677 AUC after training: 0.625
User 80677 does not improve AUC. Reverting changes.
Training on augumented user 132059 6/50 current_auc = 0.6383928571428572
User 132059 AUC after training: 0.6339285714285714
User 132059 does not improve AUC. Reverting changes.
Training on augumented user 109888 7/50 current_auc = 0.6383928571428572
User 109888 AUC after training: 0.6316964285714286
User 109888 does not improve AUC. Reverting changes.
Training on augumented user 98888 8/50 current_auc = 0.6383928571428572
User 98888 AUC after training: 0.6272321428571428
User 98888 does not improve AUC. Reverting changes.
Training on augumented user 38080 9/50 current_auc = 0.6383928571428572
User 38080 AUC after training: 0.6339285714285714
User 38080 does not improve AUC. Reverting changes.
Training on augumented user 18162 10/50 current_auc = 0.6383928571428572
User 18162 AUC after training: 0.6294642857142858
User 18162 does not improve AUC. Reverting changes.
Training on augumented user 93260 11/50 current_auc = 0.6383928571428572
User 93260 AUC after training: 0.640625
User 93260 improves AUC. Keeping the model.
Training on augumented user 137440 12/50 current_auc = 0.640625
User 137440 AUC after training: 0.6383928571428572
User 137440 does not improve AUC. Reverting changes.
Training on augumented user 122812 13/50 current_auc = 0.640625
User 122812 AUC after training: 0.6205357142857143
User 122812 does not improve AUC. Reverting changes.
Training on augumented user 71226 14/50 current_auc = 0.640625
User 71226 AUC after training: 0.6361607142857143
User 71226 does not improve AUC. Reverting changes.
Training on augumented user 130393 15/50 current_auc = 0.640625
User 130393 AUC after training: 0.6361607142857143
User 130393 does not improve AUC. Reverting changes.
Training on augumented user 64680 16/50 current_auc = 0.640625
User 64680 AUC after training: 0.6383928571428572
User 64680 does not improve AUC. Reverting changes.
Training on augumented user 57580 17/50 current_auc = 0.640625
User 57580 AUC after training: 0.6361607142857143
User 57580 does not improve AUC. Reverting changes.
Training on augumented user 105675 18/50 current_auc = 0.640625
User 105675 AUC after training: 0.6339285714285715
User 105675 does not improve AUC. Reverting changes.
Training on augumented user 51580 19/50 current_auc = 0.640625
User 51580 AUC after training: 0.6361607142857143
User 51580 does not improve AUC. Reverting changes.
Training on augumented user 46845 20/50 current_auc = 0.640625
User 46845 AUC after training: 0.6383928571428571
User 46845 does not improve AUC. Reverting changes.
Training on augumented user 119700 21/50 current_auc = 0.640625
User 119700 AUC after training: 0.6339285714285714
User 119700 does not improve AUC. Reverting changes.
Training on augumented user 63914 22/50 current_auc = 0.640625
User 63914 AUC after training: 0.6361607142857143
User 63914 does not improve AUC. Reverting changes.
Training on augumented user 75391 23/50 current_auc = 0.640625
User 75391 AUC after training: 0.640625
User 75391 does not improve AUC. Reverting changes.
Training on augumented user 105091 24/50 current_auc = 0.640625
User 105091 AUC after training: 0.6316964285714286
User 105091 does not improve AUC. Reverting changes.
Training on augumented user 34530 25/50 current_auc = 0.640625
User 34530 AUC after training: 0.6316964285714286
User 34530 does not improve AUC. Reverting changes.
Training on augumented user 46399 26/50 current_auc = 0.640625
User 46399 AUC after training: 0.6361607142857143
User 46399 does not improve AUC. Reverting changes.
Training on augumented user 40367 27/50 current_auc = 0.640625
User 40367 AUC after training: 0.6316964285714286
User 40367 does not improve AUC. Reverting changes.
Training on augumented user 83561 28/50 current_auc = 0.640625
User 83561 AUC after training: 0.6205357142857143
User 83561 does not improve AUC. Reverting changes.
Training on augumented user 23837 29/50 current_auc = 0.640625
User 23837 AUC after training: 0.6361607142857143
User 23837 does not improve AUC. Reverting changes.
Training on augumented user 117634 30/50 current_auc = 0.640625
User 117634 AUC after training: 0.6383928571428571
User 117634 does not improve AUC. Reverting changes.
Training on augumented user 10717 31/50 current_auc = 0.640625
User 10717 AUC after training: 0.6294642857142857
User 10717 does not improve AUC. Reverting changes.
Training on augumented user 132999 32/50 current_auc = 0.640625
User 132999 AUC after training: 0.6383928571428572
User 132999 does not improve AUC. Reverting changes.
Training on augumented user 22656 33/50 current_auc = 0.640625
User 22656 AUC after training: 0.6272321428571428
User 22656 does not improve AUC. Reverting changes.
Training on augumented user 66310 34/50 current_auc = 0.640625
User 66310 AUC after training: 0.640625
User 66310 does not improve AUC. Reverting changes.
Training on augumented user 102100 35/50 current_auc = 0.640625
User 102100 AUC after training: 0.6361607142857143
User 102100 does not improve AUC. Reverting changes.
Training on augumented user 70203 36/50 current_auc = 0.640625
User 70203 AUC after training: 0.6339285714285715
User 70203 does not improve AUC. Reverting changes.
Training on augumented user 39641 37/50 current_auc = 0.640625
User 39641 AUC after training: 0.6383928571428572
User 39641 does not improve AUC. Reverting changes.
Training on augumented user 63552 38/50 current_auc = 0.640625
User 63552 AUC after training: 0.640625
User 63552 does not improve AUC. Reverting changes.
Training on augumented user 34999 39/50 current_auc = 0.640625
User 34999 AUC after training: 0.6339285714285714
User 34999 does not improve AUC. Reverting changes.
Training on augumented user 6986 40/50 current_auc = 0.640625
User 6986 AUC after training: 0.6383928571428572
User 6986 does not improve AUC. Reverting changes.
Training on augumented user 116187 41/50 current_auc = 0.640625
User 116187 AUC after training: 0.6428571428571428
User 116187 improves AUC. Keeping the model.
Training on augumented user 79544 42/50 current_auc = 0.6428571428571428
User 79544 AUC after training: 0.6428571428571429
User 79544 improves AUC. Keeping the model.
Training on augumented user 22957 43/50 current_auc = 0.6428571428571429
User 22957 AUC after training: 0.6428571428571429
User 22957 does not improve AUC. Reverting changes.
Training on augumented user 56404 44/50 current_auc = 0.6428571428571429
User 56404 AUC after training: 0.6428571428571429
User 56404 does not improve AUC. Reverting changes.
Training on augumented user 18846 45/50 current_auc = 0.6428571428571429
User 18846 AUC after training: 0.6227678571428572
User 18846 does not improve AUC. Reverting changes.
Training on augumented user 110446 46/50 current_auc = 0.6428571428571429
User 110446 AUC after training: 0.6428571428571429
User 110446 does not improve AUC. Reverting changes.
Training on augumented user 56021 47/50 current_auc = 0.6428571428571429
User 56021 AUC after training: 0.6428571428571429
User 56021 does not improve AUC. Reverting changes.
Training on augumented user 121883 48/50 current_auc = 0.6428571428571429
User 121883 AUC after training: 0.6450892857142857
User 121883 improves AUC. Keeping the model.
Training on augumented user 101509 49/50 current_auc = 0.6450892857142857
User 101509 AUC after training: 0.6450892857142857
User 101509 does not improve AUC. Reverting changes.
[2024-12-02 20:16:03.477092] start test user 20907 290/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:03.896836] start test user 20907 290/568 recall augumented users by random, augumented_users = [115235, 47003, 15102, 119630, 134855, 132477, 28213, 11871, 78752, 98485, 125118, 96571, 61133, 1515, 98541, 21698, 42910, 108824, 121205, 90517, 28797, 104866, 57734, 31033, 37734, 108909, 42457, 70847, 92393, 27959, 32080, 109214, 110730, 2514, 31413, 25627, 9005, 17186, 130848, 49099, 15536, 26614, 138427, 34518, 96192, 42074, 72616, 45512, 104339, 118299]
[2024-12-02 20:16:03.912536] user = 20907 Cloud 290/568
[2024-12-02 20:16:03.922627] user = 20907 Local 290/568
[2024-12-02 20:16:04.021241] user = 20907 Local+ 290/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:06.795964] user = 20907 MPDA- 290/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.2
Training on augumented user 115235 0/50 current_auc = 0.2
User 115235 AUC after training: 0.2
User 115235 does not improve AUC. Reverting changes.
Training on augumented user 47003 1/50 current_auc = 0.2
User 47003 AUC after training: 0.2
User 47003 does not improve AUC. Reverting changes.
Training on augumented user 15102 2/50 current_auc = 0.2
User 15102 AUC after training: 0.2
User 15102 does not improve AUC. Reverting changes.
Training on augumented user 119630 3/50 current_auc = 0.2
User 119630 AUC after training: 0.2
User 119630 does not improve AUC. Reverting changes.
Training on augumented user 134855 4/50 current_auc = 0.2
User 134855 AUC after training: 0.2
User 134855 does not improve AUC. Reverting changes.
Training on augumented user 132477 5/50 current_auc = 0.2
User 132477 AUC after training: 0.2
User 132477 does not improve AUC. Reverting changes.
Training on augumented user 28213 6/50 current_auc = 0.2
User 28213 AUC after training: 0.2
User 28213 does not improve AUC. Reverting changes.
Training on augumented user 11871 7/50 current_auc = 0.2
User 11871 AUC after training: 0.2
User 11871 does not improve AUC. Reverting changes.
Training on augumented user 78752 8/50 current_auc = 0.2
User 78752 AUC after training: 0.2
User 78752 does not improve AUC. Reverting changes.
Training on augumented user 98485 9/50 current_auc = 0.2
User 98485 AUC after training: 0.2
User 98485 does not improve AUC. Reverting changes.
Training on augumented user 125118 10/50 current_auc = 0.2
User 125118 AUC after training: 0.2
User 125118 does not improve AUC. Reverting changes.
Training on augumented user 96571 11/50 current_auc = 0.2
User 96571 AUC after training: 0.2
User 96571 does not improve AUC. Reverting changes.
Training on augumented user 61133 12/50 current_auc = 0.2
User 61133 AUC after training: 0.2
User 61133 does not improve AUC. Reverting changes.
Training on augumented user 1515 13/50 current_auc = 0.2
User 1515 AUC after training: 0.2
User 1515 does not improve AUC. Reverting changes.
Training on augumented user 98541 14/50 current_auc = 0.2
User 98541 AUC after training: 0.2
User 98541 does not improve AUC. Reverting changes.
Training on augumented user 21698 15/50 current_auc = 0.2
User 21698 AUC after training: 0.2
User 21698 does not improve AUC. Reverting changes.
Training on augumented user 42910 16/50 current_auc = 0.2
User 42910 AUC after training: 0.2
User 42910 does not improve AUC. Reverting changes.
Training on augumented user 108824 17/50 current_auc = 0.2
User 108824 AUC after training: 0.2
User 108824 does not improve AUC. Reverting changes.
Training on augumented user 121205 18/50 current_auc = 0.2
User 121205 AUC after training: 0.2
User 121205 does not improve AUC. Reverting changes.
Training on augumented user 90517 19/50 current_auc = 0.2
User 90517 AUC after training: 0.2
User 90517 does not improve AUC. Reverting changes.
Training on augumented user 28797 20/50 current_auc = 0.2
User 28797 AUC after training: 0.2
User 28797 does not improve AUC. Reverting changes.
Training on augumented user 104866 21/50 current_auc = 0.2
User 104866 AUC after training: 0.2
User 104866 does not improve AUC. Reverting changes.
Training on augumented user 57734 22/50 current_auc = 0.2
User 57734 AUC after training: 0.2
User 57734 does not improve AUC. Reverting changes.
Training on augumented user 31033 23/50 current_auc = 0.2
User 31033 AUC after training: 0.2
User 31033 does not improve AUC. Reverting changes.
Training on augumented user 37734 24/50 current_auc = 0.2
User 37734 AUC after training: 0.2
User 37734 does not improve AUC. Reverting changes.
Training on augumented user 108909 25/50 current_auc = 0.2
User 108909 AUC after training: 0.2
User 108909 does not improve AUC. Reverting changes.
Training on augumented user 42457 26/50 current_auc = 0.2
User 42457 AUC after training: 0.2
User 42457 does not improve AUC. Reverting changes.
Training on augumented user 70847 27/50 current_auc = 0.2
User 70847 AUC after training: 0.2
User 70847 does not improve AUC. Reverting changes.
Training on augumented user 92393 28/50 current_auc = 0.2
User 92393 AUC after training: 0.2
User 92393 does not improve AUC. Reverting changes.
Training on augumented user 27959 29/50 current_auc = 0.2
User 27959 AUC after training: 0.2
User 27959 does not improve AUC. Reverting changes.
Training on augumented user 32080 30/50 current_auc = 0.2
User 32080 AUC after training: 0.2
User 32080 does not improve AUC. Reverting changes.
Training on augumented user 109214 31/50 current_auc = 0.2
User 109214 AUC after training: 0.2
User 109214 does not improve AUC. Reverting changes.
Training on augumented user 110730 32/50 current_auc = 0.2
User 110730 AUC after training: 0.2
User 110730 does not improve AUC. Reverting changes.
Training on augumented user 2514 33/50 current_auc = 0.2
User 2514 AUC after training: 0.2
User 2514 does not improve AUC. Reverting changes.
Training on augumented user 31413 34/50 current_auc = 0.2
User 31413 AUC after training: 0.2
User 31413 does not improve AUC. Reverting changes.
Training on augumented user 25627 35/50 current_auc = 0.2
User 25627 AUC after training: 0.2
User 25627 does not improve AUC. Reverting changes.
Training on augumented user 9005 36/50 current_auc = 0.2
User 9005 AUC after training: 0.2
User 9005 does not improve AUC. Reverting changes.
Training on augumented user 17186 37/50 current_auc = 0.2
User 17186 AUC after training: 0.2
User 17186 does not improve AUC. Reverting changes.
Training on augumented user 130848 38/50 current_auc = 0.2
User 130848 AUC after training: 0.2
User 130848 does not improve AUC. Reverting changes.
Training on augumented user 49099 39/50 current_auc = 0.2
User 49099 AUC after training: 0.2
User 49099 does not improve AUC. Reverting changes.
Training on augumented user 15536 40/50 current_auc = 0.2
User 15536 AUC after training: 0.2
User 15536 does not improve AUC. Reverting changes.
Training on augumented user 26614 41/50 current_auc = 0.2
User 26614 AUC after training: 0.2
User 26614 does not improve AUC. Reverting changes.
Training on augumented user 138427 42/50 current_auc = 0.2
User 138427 AUC after training: 0.2
User 138427 does not improve AUC. Reverting changes.
Training on augumented user 34518 43/50 current_auc = 0.2
User 34518 AUC after training: 0.2
User 34518 does not improve AUC. Reverting changes.
Training on augumented user 96192 44/50 current_auc = 0.2
User 96192 AUC after training: 0.2
User 96192 does not improve AUC. Reverting changes.
Training on augumented user 42074 45/50 current_auc = 0.2
User 42074 AUC after training: 0.2
User 42074 does not improve AUC. Reverting changes.
Training on augumented user 72616 46/50 current_auc = 0.2
User 72616 AUC after training: 0.2
User 72616 does not improve AUC. Reverting changes.
Training on augumented user 45512 47/50 current_auc = 0.2
User 45512 AUC after training: 0.2
User 45512 does not improve AUC. Reverting changes.
Training on augumented user 104339 48/50 current_auc = 0.2
User 104339 AUC after training: 0.2
User 104339 does not improve AUC. Reverting changes.
Training on augumented user 118299 49/50 current_auc = 0.2
User 118299 AUC after training: 0.2
User 118299 does not improve AUC. Reverting changes.
[2024-12-02 20:16:39.588651] start test user 20912 291/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:40.210840] start test user 20912 291/568 recall augumented users by random, augumented_users = [73408, 50690, 96295, 136429, 19892, 1569, 70779, 43623, 29350, 66991, 130922, 61698, 31541, 41781, 41860, 77454, 61416, 52168, 53049, 32304, 131304, 97190, 85136, 125043, 101316, 113821, 43621, 43532, 110477, 83948, 10206, 71911, 128079, 15736, 103437, 114931, 47284, 39146, 101058, 121648, 71512, 3244, 131594, 67432, 108090, 27027, 109879, 77519, 16629, 135041]
[2024-12-02 20:16:40.226249] user = 20912 Cloud 291/568
[2024-12-02 20:16:40.244609] user = 20912 Local 291/568
[2024-12-02 20:16:40.295694] user = 20912 Local+ 291/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:42.774693] user = 20912 MPDA- 291/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7001041305102396
Training on augumented user 73408 0/50 current_auc = 0.7001041305102396
User 73408 AUC after training: 0.7032280458174246
User 73408 improves AUC. Keeping the model.
Training on augumented user 50690 1/50 current_auc = 0.7032280458174246
User 50690 AUC after training: 0.7004512322110379
User 50690 does not improve AUC. Reverting changes.
Training on augumented user 96295 2/50 current_auc = 0.7032280458174246
User 96295 AUC after training: 0.7004512322110378
User 96295 does not improve AUC. Reverting changes.
Training on augumented user 136429 3/50 current_auc = 0.7032280458174246
User 136429 AUC after training: 0.7039222492190211
User 136429 improves AUC. Keeping the model.
Training on augumented user 19892 4/50 current_auc = 0.7039222492190211
User 19892 AUC after training: 0.7028809441166262
User 19892 does not improve AUC. Reverting changes.
Training on augumented user 1569 5/50 current_auc = 0.7039222492190211
User 1569 AUC after training: 0.7021867407150295
User 1569 does not improve AUC. Reverting changes.
Training on augumented user 70779 6/50 current_auc = 0.7039222492190211
User 70779 AUC after training: 0.7039222492190212
User 70779 improves AUC. Keeping the model.
Training on augumented user 43623 7/50 current_auc = 0.7039222492190212
User 43623 AUC after training: 0.7046164526206178
User 43623 improves AUC. Keeping the model.
Training on augumented user 29350 8/50 current_auc = 0.7046164526206178
User 29350 AUC after training: 0.7053106560222145
User 29350 improves AUC. Keeping the model.
Training on augumented user 66991 9/50 current_auc = 0.7053106560222145
User 66991 AUC after training: 0.7063519611246095
User 66991 improves AUC. Keeping the model.
Training on augumented user 130922 10/50 current_auc = 0.7063519611246095
User 130922 AUC after training: 0.7053106560222145
User 130922 does not improve AUC. Reverting changes.
Training on augumented user 61698 11/50 current_auc = 0.7063519611246095
User 61698 AUC after training: 0.7028809441166262
User 61698 does not improve AUC. Reverting changes.
Training on augumented user 31541 12/50 current_auc = 0.7063519611246095
User 31541 AUC after training: 0.7056577577230129
User 31541 does not improve AUC. Reverting changes.
Training on augumented user 41781 13/50 current_auc = 0.7063519611246095
User 41781 AUC after training: 0.7049635543214162
User 41781 does not improve AUC. Reverting changes.
Training on augumented user 41860 14/50 current_auc = 0.7063519611246095
User 41860 AUC after training: 0.7066990628254078
User 41860 improves AUC. Keeping the model.
Training on augumented user 77454 15/50 current_auc = 0.7066990628254078
User 77454 AUC after training: 0.7070461645262062
User 77454 improves AUC. Keeping the model.
Training on augumented user 61416 16/50 current_auc = 0.7070461645262062
User 61416 AUC after training: 0.7094758764317944
User 61416 improves AUC. Keeping the model.
Training on augumented user 52168 17/50 current_auc = 0.7094758764317944
User 52168 AUC after training: 0.7084345713293995
User 52168 does not improve AUC. Reverting changes.
Training on augumented user 53049 18/50 current_auc = 0.7094758764317944
User 53049 AUC after training: 0.7080874696286013
User 53049 does not improve AUC. Reverting changes.
Training on augumented user 32304 19/50 current_auc = 0.7094758764317944
User 32304 AUC after training: 0.7094758764317944
User 32304 does not improve AUC. Reverting changes.
Training on augumented user 131304 20/50 current_auc = 0.7094758764317944
User 131304 AUC after training: 0.7042693509198196
User 131304 does not improve AUC. Reverting changes.
Training on augumented user 97190 21/50 current_auc = 0.7094758764317944
User 97190 AUC after training: 0.7080874696286011
User 97190 does not improve AUC. Reverting changes.
Training on augumented user 85136 22/50 current_auc = 0.7094758764317944
User 85136 AUC after training: 0.7091287747309962
User 85136 does not improve AUC. Reverting changes.
Training on augumented user 125043 23/50 current_auc = 0.7094758764317944
User 125043 AUC after training: 0.7105171815341895
User 125043 improves AUC. Keeping the model.
Training on augumented user 101316 24/50 current_auc = 0.7105171815341895
User 101316 AUC after training: 0.7105171815341895
User 101316 does not improve AUC. Reverting changes.
Training on augumented user 113821 25/50 current_auc = 0.7105171815341895
User 113821 AUC after training: 0.7105171815341895
User 113821 does not improve AUC. Reverting changes.
Training on augumented user 43621 26/50 current_auc = 0.7105171815341895
User 43621 AUC after training: 0.7080874696286011
User 43621 does not improve AUC. Reverting changes.
Training on augumented user 43532 27/50 current_auc = 0.7105171815341895
User 43532 AUC after training: 0.710864283234988
User 43532 improves AUC. Keeping the model.
Training on augumented user 110477 28/50 current_auc = 0.710864283234988
User 110477 AUC after training: 0.7091287747309962
User 110477 does not improve AUC. Reverting changes.
Training on augumented user 83948 29/50 current_auc = 0.710864283234988
User 83948 AUC after training: 0.7077403679278028
User 83948 does not improve AUC. Reverting changes.
Training on augumented user 10206 30/50 current_auc = 0.710864283234988
User 10206 AUC after training: 0.7098229781325929
User 10206 does not improve AUC. Reverting changes.
Training on augumented user 71911 31/50 current_auc = 0.710864283234988
User 71911 AUC after training: 0.7039222492190212
User 71911 does not improve AUC. Reverting changes.
Training on augumented user 128079 32/50 current_auc = 0.710864283234988
User 128079 AUC after training: 0.710864283234988
User 128079 does not improve AUC. Reverting changes.
Training on augumented user 15736 33/50 current_auc = 0.710864283234988
User 15736 AUC after training: 0.7115584866365846
User 15736 improves AUC. Keeping the model.
Training on augumented user 103437 34/50 current_auc = 0.7115584866365846
User 103437 AUC after training: 0.7119055883373828
User 103437 improves AUC. Keeping the model.
Training on augumented user 114931 35/50 current_auc = 0.7119055883373828
User 114931 AUC after training: 0.7101700798333913
User 114931 does not improve AUC. Reverting changes.
Training on augumented user 47284 36/50 current_auc = 0.7119055883373828
User 47284 AUC after training: 0.7066990628254078
User 47284 does not improve AUC. Reverting changes.
Training on augumented user 39146 37/50 current_auc = 0.7119055883373828
User 39146 AUC after training: 0.7115584866365846
User 39146 does not improve AUC. Reverting changes.
Training on augumented user 101058 38/50 current_auc = 0.7119055883373828
User 101058 AUC after training: 0.7122526900381811
User 101058 improves AUC. Keeping the model.
Training on augumented user 121648 39/50 current_auc = 0.7122526900381811
User 121648 AUC after training: 0.7125997917389795
User 121648 improves AUC. Keeping the model.
Training on augumented user 71512 40/50 current_auc = 0.7125997917389795
User 71512 AUC after training: 0.7122526900381811
User 71512 does not improve AUC. Reverting changes.
Training on augumented user 3244 41/50 current_auc = 0.7125997917389795
User 3244 AUC after training: 0.7129468934397778
User 3244 improves AUC. Keeping the model.
Training on augumented user 131594 42/50 current_auc = 0.7129468934397778
User 131594 AUC after training: 0.7119055883373829
User 131594 does not improve AUC. Reverting changes.
Training on augumented user 67432 43/50 current_auc = 0.7129468934397778
User 67432 AUC after training: 0.7129468934397779
User 67432 improves AUC. Keeping the model.
Training on augumented user 108090 44/50 current_auc = 0.7129468934397779
User 108090 AUC after training: 0.7139881985421729
User 108090 improves AUC. Keeping the model.
Training on augumented user 27027 45/50 current_auc = 0.7139881985421729
User 27027 AUC after training: 0.7136410968413746
User 27027 does not improve AUC. Reverting changes.
Training on augumented user 109879 46/50 current_auc = 0.7139881985421729
User 109879 AUC after training: 0.7077403679278028
User 109879 does not improve AUC. Reverting changes.
Training on augumented user 77519 47/50 current_auc = 0.7139881985421729
User 77519 AUC after training: 0.710864283234988
User 77519 does not improve AUC. Reverting changes.
Training on augumented user 16629 48/50 current_auc = 0.7139881985421729
User 16629 AUC after training: 0.7119055883373828
User 16629 does not improve AUC. Reverting changes.
Training on augumented user 135041 49/50 current_auc = 0.7139881985421729
User 135041 AUC after training: 0.7132939951405762
User 135041 does not improve AUC. Reverting changes.
[2024-12-02 20:17:08.998529] start test user 20948 292/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:09.436596] start test user 20948 292/568 recall augumented users by random, augumented_users = [73968, 126176, 117977, 4561, 99204, 617, 109937, 105097, 46780, 40727, 65608, 95702, 73045, 124710, 59367, 73100, 58881, 123314, 43914, 90488, 14073, 71515, 123182, 133697, 63375, 86199, 88785, 59316, 6232, 53730, 27312, 36070, 101525, 115197, 18402, 60191, 58020, 136864, 81153, 14881, 22494, 30575, 59971, 37737, 46958, 69518, 132003, 29014, 23734, 106490]
[2024-12-02 20:17:09.452298] user = 20948 Cloud 292/568
[2024-12-02 20:17:09.492941] user = 20948 Local 292/568
[2024-12-02 20:17:09.562876] user = 20948 Local+ 292/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:11.814316] user = 20948 MPDA- 292/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7468644781144781
Training on augumented user 73968 0/50 current_auc = 0.7468644781144781
User 73968 AUC after training: 0.7472011784511784
User 73968 improves AUC. Keeping the model.
Training on augumented user 126176 1/50 current_auc = 0.7472011784511784
User 126176 AUC after training: 0.7471590909090909
User 126176 does not improve AUC. Reverting changes.
Training on augumented user 117977 2/50 current_auc = 0.7472011784511784
User 117977 AUC after training: 0.747243265993266
User 117977 improves AUC. Keeping the model.
Training on augumented user 4561 3/50 current_auc = 0.747243265993266
User 4561 AUC after training: 0.7469907407407407
User 4561 does not improve AUC. Reverting changes.
Training on augumented user 99204 4/50 current_auc = 0.747243265993266
User 99204 AUC after training: 0.746780303030303
User 99204 does not improve AUC. Reverting changes.
Training on augumented user 617 5/50 current_auc = 0.747243265993266
User 617 AUC after training: 0.7472853535353536
User 617 improves AUC. Keeping the model.
Training on augumented user 109937 6/50 current_auc = 0.7472853535353536
User 109937 AUC after training: 0.7469907407407408
User 109937 does not improve AUC. Reverting changes.
Training on augumented user 105097 7/50 current_auc = 0.7472853535353536
User 105097 AUC after training: 0.7474116161616161
User 105097 improves AUC. Keeping the model.
Training on augumented user 46780 8/50 current_auc = 0.7474116161616161
User 46780 AUC after training: 0.7474957912457911
User 46780 improves AUC. Keeping the model.
Training on augumented user 40727 9/50 current_auc = 0.7474957912457911
User 40727 AUC after training: 0.7473484848484848
User 40727 does not improve AUC. Reverting changes.
Training on augumented user 65608 10/50 current_auc = 0.7474957912457911
User 65608 AUC after training: 0.747243265993266
User 65608 does not improve AUC. Reverting changes.
Training on augumented user 95702 11/50 current_auc = 0.7474957912457911
User 95702 AUC after training: 0.7471170033670034
User 95702 does not improve AUC. Reverting changes.
Training on augumented user 73045 12/50 current_auc = 0.7474957912457911
User 73045 AUC after training: 0.7475168350168351
User 73045 improves AUC. Keeping the model.
Training on augumented user 124710 13/50 current_auc = 0.7475168350168351
User 124710 AUC after training: 0.7464856902356902
User 124710 does not improve AUC. Reverting changes.
Training on augumented user 59367 14/50 current_auc = 0.7475168350168351
User 59367 AUC after training: 0.7473695286195285
User 59367 does not improve AUC. Reverting changes.
Training on augumented user 73100 15/50 current_auc = 0.7475168350168351
User 73100 AUC after training: 0.7469907407407408
User 73100 does not improve AUC. Reverting changes.
Training on augumented user 58881 16/50 current_auc = 0.7475168350168351
User 58881 AUC after training: 0.7476641414141414
User 58881 improves AUC. Keeping the model.
Training on augumented user 123314 17/50 current_auc = 0.7476641414141414
User 123314 AUC after training: 0.7468013468013468
User 123314 does not improve AUC. Reverting changes.
Training on augumented user 43914 18/50 current_auc = 0.7476641414141414
User 43914 AUC after training: 0.7468644781144781
User 43914 does not improve AUC. Reverting changes.
Training on augumented user 90488 19/50 current_auc = 0.7476641414141414
User 90488 AUC after training: 0.7473274410774411
User 90488 does not improve AUC. Reverting changes.
Training on augumented user 14073 20/50 current_auc = 0.7476641414141414
User 14073 AUC after training: 0.7476430976430977
User 14073 does not improve AUC. Reverting changes.
Training on augumented user 71515 21/50 current_auc = 0.7476641414141414
User 71515 AUC after training: 0.7470328282828284
User 71515 does not improve AUC. Reverting changes.
Training on augumented user 123182 22/50 current_auc = 0.7476641414141414
User 123182 AUC after training: 0.7472853535353535
User 123182 does not improve AUC. Reverting changes.
Training on augumented user 133697 23/50 current_auc = 0.7476641414141414
User 133697 AUC after training: 0.7479166666666666
User 133697 improves AUC. Keeping the model.
Training on augumented user 63375 24/50 current_auc = 0.7479166666666666
User 63375 AUC after training: 0.747516835016835
User 63375 does not improve AUC. Reverting changes.
Training on augumented user 86199 25/50 current_auc = 0.7479166666666666
User 86199 AUC after training: 0.7473063973063973
User 86199 does not improve AUC. Reverting changes.
Training on augumented user 88785 26/50 current_auc = 0.7479166666666666
User 88785 AUC after training: 0.748442760942761
User 88785 improves AUC. Keeping the model.
Training on augumented user 59316 27/50 current_auc = 0.748442760942761
User 59316 AUC after training: 0.7478956228956228
User 59316 does not improve AUC. Reverting changes.
Training on augumented user 6232 28/50 current_auc = 0.748442760942761
User 6232 AUC after training: 0.7470117845117845
User 6232 does not improve AUC. Reverting changes.
Training on augumented user 53730 29/50 current_auc = 0.748442760942761
User 53730 AUC after training: 0.7481481481481482
User 53730 does not improve AUC. Reverting changes.
Training on augumented user 27312 30/50 current_auc = 0.748442760942761
User 27312 AUC after training: 0.7480429292929293
User 27312 does not improve AUC. Reverting changes.
Training on augumented user 36070 31/50 current_auc = 0.748442760942761
User 36070 AUC after training: 0.7486952861952862
User 36070 improves AUC. Keeping the model.
Training on augumented user 101525 32/50 current_auc = 0.7486952861952862
User 101525 AUC after training: 0.7484848484848485
User 101525 does not improve AUC. Reverting changes.
Training on augumented user 115197 33/50 current_auc = 0.7486952861952862
User 115197 AUC after training: 0.7458333333333333
User 115197 does not improve AUC. Reverting changes.
Training on augumented user 18402 34/50 current_auc = 0.7486952861952862
User 18402 AUC after training: 0.7484848484848484
User 18402 does not improve AUC. Reverting changes.
Training on augumented user 60191 35/50 current_auc = 0.7486952861952862
User 60191 AUC after training: 0.7485269360269361
User 60191 does not improve AUC. Reverting changes.
Training on augumented user 58020 36/50 current_auc = 0.7486952861952862
User 58020 AUC after training: 0.7481060606060606
User 58020 does not improve AUC. Reverting changes.
Training on augumented user 136864 37/50 current_auc = 0.7486952861952862
User 136864 AUC after training: 0.7486952861952862
User 136864 does not improve AUC. Reverting changes.
Training on augumented user 81153 38/50 current_auc = 0.7486952861952862
User 81153 AUC after training: 0.7482744107744108
User 81153 does not improve AUC. Reverting changes.
Training on augumented user 14881 39/50 current_auc = 0.7486952861952862
User 14881 AUC after training: 0.7484006734006735
User 14881 does not improve AUC. Reverting changes.
Training on augumented user 22494 40/50 current_auc = 0.7486952861952862
User 22494 AUC after training: 0.7484848484848485
User 22494 does not improve AUC. Reverting changes.
Training on augumented user 30575 41/50 current_auc = 0.7486952861952862
User 30575 AUC after training: 0.7486531986531988
User 30575 does not improve AUC. Reverting changes.
Training on augumented user 59971 42/50 current_auc = 0.7486952861952862
User 59971 AUC after training: 0.7484848484848485
User 59971 does not improve AUC. Reverting changes.
Training on augumented user 37737 43/50 current_auc = 0.7486952861952862
User 37737 AUC after training: 0.7486111111111111
User 37737 does not improve AUC. Reverting changes.
Training on augumented user 46958 44/50 current_auc = 0.7486952861952862
User 46958 AUC after training: 0.7484006734006734
User 46958 does not improve AUC. Reverting changes.
Training on augumented user 69518 45/50 current_auc = 0.7486952861952862
User 69518 AUC after training: 0.7484848484848485
User 69518 does not improve AUC. Reverting changes.
Training on augumented user 132003 46/50 current_auc = 0.7486952861952862
User 132003 AUC after training: 0.7480639730639731
User 132003 does not improve AUC. Reverting changes.
Training on augumented user 29014 47/50 current_auc = 0.7486952861952862
User 29014 AUC after training: 0.7481902356902357
User 29014 does not improve AUC. Reverting changes.
Training on augumented user 23734 48/50 current_auc = 0.7486952861952862
User 23734 AUC after training: 0.7483164983164983
User 23734 does not improve AUC. Reverting changes.
Training on augumented user 106490 49/50 current_auc = 0.7486952861952862
User 106490 AUC after training: 0.748358585858586
User 106490 does not improve AUC. Reverting changes.
[2024-12-02 20:17:38.318671] start test user 21007 293/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:38.726558] start test user 21007 293/568 recall augumented users by random, augumented_users = [98228, 98551, 40583, 133296, 47187, 24281, 34315, 127665, 108931, 57055, 103854, 47343, 51136, 94343, 25610, 120669, 72403, 111079, 16046, 27624, 113155, 106449, 4586, 66623, 135030, 35944, 28489, 135874, 32276, 135794, 38485, 83845, 48109, 113542, 44816, 31832, 13218, 60632, 3941, 92545, 15701, 112625, 75246, 76560, 41106, 17791, 14423, 92577, 11048, 111190]
[2024-12-02 20:17:38.741605] user = 21007 Cloud 293/568
[2024-12-02 20:17:38.762710] user = 21007 Local 293/568
[2024-12-02 20:17:38.807864] user = 21007 Local+ 293/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:41.118991] user = 21007 MPDA- 293/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.25
Training on augumented user 98228 0/50 current_auc = 0.25
User 98228 AUC after training: 0.25
User 98228 does not improve AUC. Reverting changes.
Training on augumented user 98551 1/50 current_auc = 0.25
User 98551 AUC after training: 0.25
User 98551 does not improve AUC. Reverting changes.
Training on augumented user 40583 2/50 current_auc = 0.25
User 40583 AUC after training: 0.25
User 40583 does not improve AUC. Reverting changes.
Training on augumented user 133296 3/50 current_auc = 0.25
User 133296 AUC after training: 0.25
User 133296 does not improve AUC. Reverting changes.
Training on augumented user 47187 4/50 current_auc = 0.25
User 47187 AUC after training: 0.25
User 47187 does not improve AUC. Reverting changes.
Training on augumented user 24281 5/50 current_auc = 0.25
User 24281 AUC after training: 0.25
User 24281 does not improve AUC. Reverting changes.
Training on augumented user 34315 6/50 current_auc = 0.25
User 34315 AUC after training: 0.25
User 34315 does not improve AUC. Reverting changes.
Training on augumented user 127665 7/50 current_auc = 0.25
User 127665 AUC after training: 0.25
User 127665 does not improve AUC. Reverting changes.
Training on augumented user 108931 8/50 current_auc = 0.25
User 108931 AUC after training: 0.25
User 108931 does not improve AUC. Reverting changes.
Training on augumented user 57055 9/50 current_auc = 0.25
User 57055 AUC after training: 0.25
User 57055 does not improve AUC. Reverting changes.
Training on augumented user 103854 10/50 current_auc = 0.25
User 103854 AUC after training: 0.25
User 103854 does not improve AUC. Reverting changes.
Training on augumented user 47343 11/50 current_auc = 0.25
User 47343 AUC after training: 0.25
User 47343 does not improve AUC. Reverting changes.
Training on augumented user 51136 12/50 current_auc = 0.25
User 51136 AUC after training: 0.25
User 51136 does not improve AUC. Reverting changes.
Training on augumented user 94343 13/50 current_auc = 0.25
User 94343 AUC after training: 0.25
User 94343 does not improve AUC. Reverting changes.
Training on augumented user 25610 14/50 current_auc = 0.25
User 25610 AUC after training: 0.25
User 25610 does not improve AUC. Reverting changes.
Training on augumented user 120669 15/50 current_auc = 0.25
User 120669 AUC after training: 0.25
User 120669 does not improve AUC. Reverting changes.
Training on augumented user 72403 16/50 current_auc = 0.25
User 72403 AUC after training: 0.25
User 72403 does not improve AUC. Reverting changes.
Training on augumented user 111079 17/50 current_auc = 0.25
User 111079 AUC after training: 0.25
User 111079 does not improve AUC. Reverting changes.
Training on augumented user 16046 18/50 current_auc = 0.25
User 16046 AUC after training: 0.25
User 16046 does not improve AUC. Reverting changes.
Training on augumented user 27624 19/50 current_auc = 0.25
User 27624 AUC after training: 0.25
User 27624 does not improve AUC. Reverting changes.
Training on augumented user 113155 20/50 current_auc = 0.25
User 113155 AUC after training: 0.25
User 113155 does not improve AUC. Reverting changes.
Training on augumented user 106449 21/50 current_auc = 0.25
User 106449 AUC after training: 0.25
User 106449 does not improve AUC. Reverting changes.
Training on augumented user 4586 22/50 current_auc = 0.25
User 4586 AUC after training: 0.25
User 4586 does not improve AUC. Reverting changes.
Training on augumented user 66623 23/50 current_auc = 0.25
User 66623 AUC after training: 0.25
User 66623 does not improve AUC. Reverting changes.
Training on augumented user 135030 24/50 current_auc = 0.25
User 135030 AUC after training: 0.25
User 135030 does not improve AUC. Reverting changes.
Training on augumented user 35944 25/50 current_auc = 0.25
User 35944 AUC after training: 0.25
User 35944 does not improve AUC. Reverting changes.
Training on augumented user 28489 26/50 current_auc = 0.25
User 28489 AUC after training: 0.25
User 28489 does not improve AUC. Reverting changes.
Training on augumented user 135874 27/50 current_auc = 0.25
User 135874 AUC after training: 0.25
User 135874 does not improve AUC. Reverting changes.
Training on augumented user 32276 28/50 current_auc = 0.25
User 32276 AUC after training: 0.25
User 32276 does not improve AUC. Reverting changes.
Training on augumented user 135794 29/50 current_auc = 0.25
User 135794 AUC after training: 0.25
User 135794 does not improve AUC. Reverting changes.
Training on augumented user 38485 30/50 current_auc = 0.25
User 38485 AUC after training: 0.25
User 38485 does not improve AUC. Reverting changes.
Training on augumented user 83845 31/50 current_auc = 0.25
User 83845 AUC after training: 0.25
User 83845 does not improve AUC. Reverting changes.
Training on augumented user 48109 32/50 current_auc = 0.25
User 48109 AUC after training: 0.25
User 48109 does not improve AUC. Reverting changes.
Training on augumented user 113542 33/50 current_auc = 0.25
User 113542 AUC after training: 0.25
User 113542 does not improve AUC. Reverting changes.
Training on augumented user 44816 34/50 current_auc = 0.25
User 44816 AUC after training: 0.25
User 44816 does not improve AUC. Reverting changes.
Training on augumented user 31832 35/50 current_auc = 0.25
User 31832 AUC after training: 0.25
User 31832 does not improve AUC. Reverting changes.
Training on augumented user 13218 36/50 current_auc = 0.25
User 13218 AUC after training: 0.25
User 13218 does not improve AUC. Reverting changes.
Training on augumented user 60632 37/50 current_auc = 0.25
User 60632 AUC after training: 0.25
User 60632 does not improve AUC. Reverting changes.
Training on augumented user 3941 38/50 current_auc = 0.25
User 3941 AUC after training: 0.25
User 3941 does not improve AUC. Reverting changes.
Training on augumented user 92545 39/50 current_auc = 0.25
User 92545 AUC after training: 0.25
User 92545 does not improve AUC. Reverting changes.
Training on augumented user 15701 40/50 current_auc = 0.25
User 15701 AUC after training: 0.25
User 15701 does not improve AUC. Reverting changes.
Training on augumented user 112625 41/50 current_auc = 0.25
User 112625 AUC after training: 0.25
User 112625 does not improve AUC. Reverting changes.
Training on augumented user 75246 42/50 current_auc = 0.25
User 75246 AUC after training: 0.25
User 75246 does not improve AUC. Reverting changes.
Training on augumented user 76560 43/50 current_auc = 0.25
User 76560 AUC after training: 0.25
User 76560 does not improve AUC. Reverting changes.
Training on augumented user 41106 44/50 current_auc = 0.25
User 41106 AUC after training: 0.25
User 41106 does not improve AUC. Reverting changes.
Training on augumented user 17791 45/50 current_auc = 0.25
User 17791 AUC after training: 0.25
User 17791 does not improve AUC. Reverting changes.
Training on augumented user 14423 46/50 current_auc = 0.25
User 14423 AUC after training: 0.25
User 14423 does not improve AUC. Reverting changes.
Training on augumented user 92577 47/50 current_auc = 0.25
User 92577 AUC after training: 0.25
User 92577 does not improve AUC. Reverting changes.
Training on augumented user 11048 48/50 current_auc = 0.25
User 11048 AUC after training: 0.25
User 11048 does not improve AUC. Reverting changes.
Training on augumented user 111190 49/50 current_auc = 0.25
User 111190 AUC after training: 0.25
User 111190 does not improve AUC. Reverting changes.
[2024-12-02 20:18:09.278023] start test user 21011 294/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:09.680314] start test user 21011 294/568 recall augumented users by random, augumented_users = [124741, 21780, 26825, 75614, 763, 58631, 50588, 40706, 102422, 43414, 75885, 55745, 98561, 32736, 84363, 59855, 105052, 104676, 133147, 52576, 68157, 117318, 67623, 54584, 7196, 125091, 83427, 132331, 129991, 101230, 100707, 112501, 78142, 67956, 86544, 43224, 48617, 20785, 85603, 23880, 61269, 50590, 123761, 68062, 44194, 116981, 43751, 35355, 83455, 29363]
[2024-12-02 20:18:09.694850] user = 21011 Cloud 294/568
[2024-12-02 20:18:09.705260] user = 21011 Local 294/568
[2024-12-02 20:18:09.742062] user = 21011 Local+ 294/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:12.275783] user = 21011 MPDA- 294/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8947368421052632
Training on augumented user 124741 0/50 current_auc = 0.8947368421052632
User 124741 AUC after training: 0.8947368421052632
User 124741 does not improve AUC. Reverting changes.
Training on augumented user 21780 1/50 current_auc = 0.8947368421052632
User 21780 AUC after training: 0.8947368421052632
User 21780 does not improve AUC. Reverting changes.
Training on augumented user 26825 2/50 current_auc = 0.8947368421052632
User 26825 AUC after training: 0.8947368421052632
User 26825 does not improve AUC. Reverting changes.
Training on augumented user 75614 3/50 current_auc = 0.8947368421052632
User 75614 AUC after training: 0.8947368421052632
User 75614 does not improve AUC. Reverting changes.
Training on augumented user 763 4/50 current_auc = 0.8947368421052632
User 763 AUC after training: 0.8947368421052632
User 763 does not improve AUC. Reverting changes.
Training on augumented user 58631 5/50 current_auc = 0.8947368421052632
User 58631 AUC after training: 0.8947368421052632
User 58631 does not improve AUC. Reverting changes.
Training on augumented user 50588 6/50 current_auc = 0.8947368421052632
User 50588 AUC after training: 0.8947368421052632
User 50588 does not improve AUC. Reverting changes.
Training on augumented user 40706 7/50 current_auc = 0.8947368421052632
User 40706 AUC after training: 0.8947368421052632
User 40706 does not improve AUC. Reverting changes.
Training on augumented user 102422 8/50 current_auc = 0.8947368421052632
User 102422 AUC after training: 0.8947368421052632
User 102422 does not improve AUC. Reverting changes.
Training on augumented user 43414 9/50 current_auc = 0.8947368421052632
User 43414 AUC after training: 0.8947368421052632
User 43414 does not improve AUC. Reverting changes.
Training on augumented user 75885 10/50 current_auc = 0.8947368421052632
User 75885 AUC after training: 0.8947368421052632
User 75885 does not improve AUC. Reverting changes.
Training on augumented user 55745 11/50 current_auc = 0.8947368421052632
User 55745 AUC after training: 0.8947368421052632
User 55745 does not improve AUC. Reverting changes.
Training on augumented user 98561 12/50 current_auc = 0.8947368421052632
User 98561 AUC after training: 0.8947368421052632
User 98561 does not improve AUC. Reverting changes.
Training on augumented user 32736 13/50 current_auc = 0.8947368421052632
User 32736 AUC after training: 0.8947368421052632
User 32736 does not improve AUC. Reverting changes.
Training on augumented user 84363 14/50 current_auc = 0.8947368421052632
User 84363 AUC after training: 0.8947368421052632
User 84363 does not improve AUC. Reverting changes.
Training on augumented user 59855 15/50 current_auc = 0.8947368421052632
User 59855 AUC after training: 0.8947368421052632
User 59855 does not improve AUC. Reverting changes.
Training on augumented user 105052 16/50 current_auc = 0.8947368421052632
User 105052 AUC after training: 0.8947368421052632
User 105052 does not improve AUC. Reverting changes.
Training on augumented user 104676 17/50 current_auc = 0.8947368421052632
User 104676 AUC after training: 0.8947368421052632
User 104676 does not improve AUC. Reverting changes.
Training on augumented user 133147 18/50 current_auc = 0.8947368421052632
User 133147 AUC after training: 0.8947368421052632
User 133147 does not improve AUC. Reverting changes.
Training on augumented user 52576 19/50 current_auc = 0.8947368421052632
User 52576 AUC after training: 0.8947368421052632
User 52576 does not improve AUC. Reverting changes.
Training on augumented user 68157 20/50 current_auc = 0.8947368421052632
User 68157 AUC after training: 0.8947368421052632
User 68157 does not improve AUC. Reverting changes.
Training on augumented user 117318 21/50 current_auc = 0.8947368421052632
User 117318 AUC after training: 0.8947368421052632
User 117318 does not improve AUC. Reverting changes.
Training on augumented user 67623 22/50 current_auc = 0.8947368421052632
User 67623 AUC after training: 0.8947368421052632
User 67623 does not improve AUC. Reverting changes.
Training on augumented user 54584 23/50 current_auc = 0.8947368421052632
User 54584 AUC after training: 0.8947368421052632
User 54584 does not improve AUC. Reverting changes.
Training on augumented user 7196 24/50 current_auc = 0.8947368421052632
User 7196 AUC after training: 0.8947368421052632
User 7196 does not improve AUC. Reverting changes.
Training on augumented user 125091 25/50 current_auc = 0.8947368421052632
User 125091 AUC after training: 0.8947368421052632
User 125091 does not improve AUC. Reverting changes.
Training on augumented user 83427 26/50 current_auc = 0.8947368421052632
User 83427 AUC after training: 0.8947368421052632
User 83427 does not improve AUC. Reverting changes.
Training on augumented user 132331 27/50 current_auc = 0.8947368421052632
User 132331 AUC after training: 0.8947368421052632
User 132331 does not improve AUC. Reverting changes.
Training on augumented user 129991 28/50 current_auc = 0.8947368421052632
User 129991 AUC after training: 0.8947368421052632
User 129991 does not improve AUC. Reverting changes.
Training on augumented user 101230 29/50 current_auc = 0.8947368421052632
User 101230 AUC after training: 0.8947368421052632
User 101230 does not improve AUC. Reverting changes.
Training on augumented user 100707 30/50 current_auc = 0.8947368421052632
User 100707 AUC after training: 0.8947368421052632
User 100707 does not improve AUC. Reverting changes.
Training on augumented user 112501 31/50 current_auc = 0.8947368421052632
User 112501 AUC after training: 0.8947368421052632
User 112501 does not improve AUC. Reverting changes.
Training on augumented user 78142 32/50 current_auc = 0.8947368421052632
User 78142 AUC after training: 0.8947368421052632
User 78142 does not improve AUC. Reverting changes.
Training on augumented user 67956 33/50 current_auc = 0.8947368421052632
User 67956 AUC after training: 0.8947368421052632
User 67956 does not improve AUC. Reverting changes.
Training on augumented user 86544 34/50 current_auc = 0.8947368421052632
User 86544 AUC after training: 0.8947368421052632
User 86544 does not improve AUC. Reverting changes.
Training on augumented user 43224 35/50 current_auc = 0.8947368421052632
User 43224 AUC after training: 0.8947368421052632
User 43224 does not improve AUC. Reverting changes.
Training on augumented user 48617 36/50 current_auc = 0.8947368421052632
User 48617 AUC after training: 0.8947368421052632
User 48617 does not improve AUC. Reverting changes.
Training on augumented user 20785 37/50 current_auc = 0.8947368421052632
User 20785 AUC after training: 0.8947368421052632
User 20785 does not improve AUC. Reverting changes.
Training on augumented user 85603 38/50 current_auc = 0.8947368421052632
User 85603 AUC after training: 0.8947368421052632
User 85603 does not improve AUC. Reverting changes.
Training on augumented user 23880 39/50 current_auc = 0.8947368421052632
User 23880 AUC after training: 0.8947368421052632
User 23880 does not improve AUC. Reverting changes.
Training on augumented user 61269 40/50 current_auc = 0.8947368421052632
User 61269 AUC after training: 0.8947368421052632
User 61269 does not improve AUC. Reverting changes.
Training on augumented user 50590 41/50 current_auc = 0.8947368421052632
User 50590 AUC after training: 0.8947368421052632
User 50590 does not improve AUC. Reverting changes.
Training on augumented user 123761 42/50 current_auc = 0.8947368421052632
User 123761 AUC after training: 0.8947368421052632
User 123761 does not improve AUC. Reverting changes.
Training on augumented user 68062 43/50 current_auc = 0.8947368421052632
User 68062 AUC after training: 0.8947368421052632
User 68062 does not improve AUC. Reverting changes.
Training on augumented user 44194 44/50 current_auc = 0.8947368421052632
User 44194 AUC after training: 0.8947368421052632
User 44194 does not improve AUC. Reverting changes.
Training on augumented user 116981 45/50 current_auc = 0.8947368421052632
User 116981 AUC after training: 0.8947368421052632
User 116981 does not improve AUC. Reverting changes.
Training on augumented user 43751 46/50 current_auc = 0.8947368421052632
User 43751 AUC after training: 0.8947368421052632
User 43751 does not improve AUC. Reverting changes.
Training on augumented user 35355 47/50 current_auc = 0.8947368421052632
User 35355 AUC after training: 0.8947368421052632
User 35355 does not improve AUC. Reverting changes.
Training on augumented user 83455 48/50 current_auc = 0.8947368421052632
User 83455 AUC after training: 0.8947368421052632
User 83455 does not improve AUC. Reverting changes.
Training on augumented user 29363 49/50 current_auc = 0.8947368421052632
User 29363 AUC after training: 0.8947368421052632
User 29363 does not improve AUC. Reverting changes.
[2024-12-02 20:18:37.421960] start test user 21044 295/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:38.030066] start test user 21044 295/568 recall augumented users by random, augumented_users = [106698, 126959, 78714, 101872, 124955, 47365, 89339, 57961, 32059, 26467, 69531, 40881, 87759, 128062, 22517, 118802, 23122, 58349, 73890, 89768, 18460, 94321, 118430, 53994, 92567, 49698, 128972, 19003, 97935, 61682, 119528, 87498, 128468, 111059, 32979, 35130, 32735, 85048, 35121, 77452, 37411, 56120, 97031, 110094, 23181, 14320, 98681, 85962, 91616, 135893]
[2024-12-02 20:18:38.051511] user = 21044 Cloud 295/568
[2024-12-02 20:18:38.100432] user = 21044 Local 295/568
[2024-12-02 20:18:38.159611] user = 21044 Local+ 295/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:40.623858] user = 21044 MPDA- 295/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7573250820914372
Training on augumented user 106698 0/50 current_auc = 0.7573250820914372
User 106698 AUC after training: 0.7572619348320283
User 106698 does not improve AUC. Reverting changes.
Training on augumented user 126959 1/50 current_auc = 0.7573250820914372
User 126959 AUC after training: 0.7568199040161657
User 126959 does not improve AUC. Reverting changes.
Training on augumented user 78714 2/50 current_auc = 0.7573250820914372
User 78714 AUC after training: 0.7573882293508463
User 78714 improves AUC. Keeping the model.
Training on augumented user 101872 3/50 current_auc = 0.7573882293508463
User 101872 AUC after training: 0.756504167719121
User 101872 does not improve AUC. Reverting changes.
Training on augumented user 124955 4/50 current_auc = 0.7573882293508463
User 124955 AUC after training: 0.7561884314220763
User 124955 does not improve AUC. Reverting changes.
Training on augumented user 47365 5/50 current_auc = 0.7573882293508463
User 47365 AUC after training: 0.7578302601667087
User 47365 improves AUC. Keeping the model.
Training on augumented user 89339 6/50 current_auc = 0.7578302601667087
User 89339 AUC after training: 0.7573882293508462
User 89339 does not improve AUC. Reverting changes.
Training on augumented user 57961 7/50 current_auc = 0.7578302601667087
User 57961 AUC after training: 0.757640818388482
User 57961 does not improve AUC. Reverting changes.
Training on augumented user 32059 8/50 current_auc = 0.7578302601667087
User 32059 AUC after training: 0.7580828492043445
User 32059 improves AUC. Keeping the model.
Training on augumented user 26467 9/50 current_auc = 0.7580828492043445
User 26467 AUC after training: 0.7584617327607982
User 26467 improves AUC. Keeping the model.
Training on augumented user 69531 10/50 current_auc = 0.7584617327607982
User 69531 AUC after training: 0.7580197019449356
User 69531 does not improve AUC. Reverting changes.
Training on augumented user 40881 11/50 current_auc = 0.7584617327607982
User 40881 AUC after training: 0.757577671129073
User 40881 does not improve AUC. Reverting changes.
Training on augumented user 87759 12/50 current_auc = 0.7584617327607982
User 87759 AUC after training: 0.7575145238696641
User 87759 does not improve AUC. Reverting changes.
Training on augumented user 128062 13/50 current_auc = 0.7584617327607982
User 128062 AUC after training: 0.7573882293508462
User 128062 does not improve AUC. Reverting changes.
Training on augumented user 22517 14/50 current_auc = 0.7584617327607982
User 22517 AUC after training: 0.7581459964637534
User 22517 does not improve AUC. Reverting changes.
Training on augumented user 118802 15/50 current_auc = 0.7584617327607982
User 118802 AUC after training: 0.757514523869664
User 118802 does not improve AUC. Reverting changes.
Training on augumented user 23122 16/50 current_auc = 0.7584617327607982
User 23122 AUC after training: 0.7582091437231624
User 23122 does not improve AUC. Reverting changes.
Training on augumented user 58349 17/50 current_auc = 0.7584617327607982
User 58349 AUC after training: 0.7573250820914372
User 58349 does not improve AUC. Reverting changes.
Training on augumented user 73890 18/50 current_auc = 0.7584617327607982
User 73890 AUC after training: 0.7580197019449355
User 73890 does not improve AUC. Reverting changes.
Training on augumented user 89768 19/50 current_auc = 0.7584617327607982
User 89768 AUC after training: 0.7584617327607981
User 89768 does not improve AUC. Reverting changes.
Training on augumented user 18460 20/50 current_auc = 0.7584617327607982
User 18460 AUC after training: 0.7583985855013893
User 18460 does not improve AUC. Reverting changes.
Training on augumented user 94321 21/50 current_auc = 0.7584617327607982
User 94321 AUC after training: 0.7590932053548876
User 94321 improves AUC. Keeping the model.
Training on augumented user 118430 22/50 current_auc = 0.7590932053548876
User 118430 AUC after training: 0.7584617327607983
User 118430 does not improve AUC. Reverting changes.
Training on augumented user 53994 23/50 current_auc = 0.7590932053548876
User 53994 AUC after training: 0.7578302601667087
User 53994 does not improve AUC. Reverting changes.
Training on augumented user 92567 24/50 current_auc = 0.7590932053548876
User 92567 AUC after training: 0.7585248800202072
User 92567 does not improve AUC. Reverting changes.
Training on augumented user 49698 25/50 current_auc = 0.7590932053548876
User 49698 AUC after training: 0.758588027279616
User 49698 does not improve AUC. Reverting changes.
Training on augumented user 128972 26/50 current_auc = 0.7590932053548876
User 128972 AUC after training: 0.7578934074261178
User 128972 does not improve AUC. Reverting changes.
Training on augumented user 19003 27/50 current_auc = 0.7590932053548876
User 19003 AUC after training: 0.7589037635766608
User 19003 does not improve AUC. Reverting changes.
Training on augumented user 97935 28/50 current_auc = 0.7590932053548876
User 97935 AUC after training: 0.7580197019449356
User 97935 does not improve AUC. Reverting changes.
Training on augumented user 61682 29/50 current_auc = 0.7590932053548876
User 61682 AUC after training: 0.7589669108360698
User 61682 does not improve AUC. Reverting changes.
Training on augumented user 119528 30/50 current_auc = 0.7590932053548876
User 119528 AUC after training: 0.7583354382419804
User 119528 does not improve AUC. Reverting changes.
Training on augumented user 87498 31/50 current_auc = 0.7590932053548876
User 87498 AUC after training: 0.7581459964637535
User 87498 does not improve AUC. Reverting changes.
Training on augumented user 128468 32/50 current_auc = 0.7590932053548876
User 128468 AUC after training: 0.7572619348320283
User 128468 does not improve AUC. Reverting changes.
Training on augumented user 111059 33/50 current_auc = 0.7590932053548876
User 111059 AUC after training: 0.7587774690578428
User 111059 does not improve AUC. Reverting changes.
Training on augumented user 32979 34/50 current_auc = 0.7590932053548876
User 32979 AUC after training: 0.7587774690578429
User 32979 does not improve AUC. Reverting changes.
Training on augumented user 35130 35/50 current_auc = 0.7590932053548876
User 35130 AUC after training: 0.7596615306895681
User 35130 improves AUC. Keeping the model.
Training on augumented user 32735 36/50 current_auc = 0.7596615306895681
User 32735 AUC after training: 0.7595983834301592
User 32735 does not improve AUC. Reverting changes.
Training on augumented user 85048 37/50 current_auc = 0.7596615306895681
User 85048 AUC after training: 0.7599141197272038
User 85048 improves AUC. Keeping the model.
Training on augumented user 35121 38/50 current_auc = 0.7599141197272038
User 35121 AUC after training: 0.7593457943925234
User 35121 does not improve AUC. Reverting changes.
Training on augumented user 77452 39/50 current_auc = 0.7599141197272038
User 77452 AUC after training: 0.7589037635766609
User 77452 does not improve AUC. Reverting changes.
Training on augumented user 37411 40/50 current_auc = 0.7599141197272038
User 37411 AUC after training: 0.7594720889113413
User 37411 does not improve AUC. Reverting changes.
Training on augumented user 56120 41/50 current_auc = 0.7599141197272038
User 56120 AUC after training: 0.7593457943925234
User 56120 does not improve AUC. Reverting changes.
Training on augumented user 97031 42/50 current_auc = 0.7599141197272038
User 97031 AUC after training: 0.7602298560242485
User 97031 improves AUC. Keeping the model.
Training on augumented user 110094 43/50 current_auc = 0.7602298560242485
User 110094 AUC after training: 0.7601667087648397
User 110094 does not improve AUC. Reverting changes.
Training on augumented user 23181 44/50 current_auc = 0.7602298560242485
User 23181 AUC after training: 0.7585248800202071
User 23181 does not improve AUC. Reverting changes.
Training on augumented user 14320 45/50 current_auc = 0.7602298560242485
User 14320 AUC after training: 0.7611770649153826
User 14320 improves AUC. Keeping the model.
Training on augumented user 98681 46/50 current_auc = 0.7611770649153826
User 98681 AUC after training: 0.7606718868401111
User 98681 does not improve AUC. Reverting changes.
Training on augumented user 85962 47/50 current_auc = 0.7611770649153826
User 85962 AUC after training: 0.7611770649153827
User 85962 improves AUC. Keeping the model.
Training on augumented user 91616 48/50 current_auc = 0.7611770649153827
User 91616 AUC after training: 0.7605455923212932
User 91616 does not improve AUC. Reverting changes.
Training on augumented user 135893 49/50 current_auc = 0.7611770649153827
User 135893 AUC after training: 0.7613033594342006
User 135893 improves AUC. Keeping the model.
[2024-12-02 20:19:06.557490] start test user 21060 296/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:06.995148] start test user 21060 296/568 recall augumented users by random, augumented_users = [57049, 84292, 134799, 130068, 98322, 1627, 81681, 75919, 127625, 23725, 54255, 66473, 90410, 7930, 32849, 25640, 94665, 105113, 65314, 114458, 43819, 84052, 509, 54795, 69205, 88282, 52084, 126940, 63067, 64676, 124563, 86108, 44301, 75288, 27363, 42927, 21267, 55993, 22097, 65236, 8532, 86089, 71945, 29570, 67666, 75330, 22468, 21588, 111310, 70245]
[2024-12-02 20:19:07.009811] user = 21060 Cloud 296/568
[2024-12-02 20:19:07.020259] user = 21060 Local 296/568
[2024-12-02 20:19:07.039529] user = 21060 Local+ 296/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:09.542247] user = 21060 MPDA- 296/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9166666666666667
Training on augumented user 57049 0/50 current_auc = 0.9166666666666667
User 57049 AUC after training: 0.9166666666666667
User 57049 does not improve AUC. Reverting changes.
Training on augumented user 84292 1/50 current_auc = 0.9166666666666667
User 84292 AUC after training: 0.9166666666666667
User 84292 does not improve AUC. Reverting changes.
Training on augumented user 134799 2/50 current_auc = 0.9166666666666667
User 134799 AUC after training: 0.9166666666666667
User 134799 does not improve AUC. Reverting changes.
Training on augumented user 130068 3/50 current_auc = 0.9166666666666667
User 130068 AUC after training: 0.9166666666666667
User 130068 does not improve AUC. Reverting changes.
Training on augumented user 98322 4/50 current_auc = 0.9166666666666667
User 98322 AUC after training: 0.9166666666666667
User 98322 does not improve AUC. Reverting changes.
Training on augumented user 1627 5/50 current_auc = 0.9166666666666667
User 1627 AUC after training: 0.9166666666666667
User 1627 does not improve AUC. Reverting changes.
Training on augumented user 81681 6/50 current_auc = 0.9166666666666667
User 81681 AUC after training: 0.9166666666666667
User 81681 does not improve AUC. Reverting changes.
Training on augumented user 75919 7/50 current_auc = 0.9166666666666667
User 75919 AUC after training: 0.9166666666666667
User 75919 does not improve AUC. Reverting changes.
Training on augumented user 127625 8/50 current_auc = 0.9166666666666667
User 127625 AUC after training: 0.9166666666666667
User 127625 does not improve AUC. Reverting changes.
Training on augumented user 23725 9/50 current_auc = 0.9166666666666667
User 23725 AUC after training: 0.9166666666666667
User 23725 does not improve AUC. Reverting changes.
Training on augumented user 54255 10/50 current_auc = 0.9166666666666667
User 54255 AUC after training: 0.9166666666666667
User 54255 does not improve AUC. Reverting changes.
Training on augumented user 66473 11/50 current_auc = 0.9166666666666667
User 66473 AUC after training: 0.9166666666666667
User 66473 does not improve AUC. Reverting changes.
Training on augumented user 90410 12/50 current_auc = 0.9166666666666667
User 90410 AUC after training: 0.9166666666666667
User 90410 does not improve AUC. Reverting changes.
Training on augumented user 7930 13/50 current_auc = 0.9166666666666667
User 7930 AUC after training: 0.9166666666666667
User 7930 does not improve AUC. Reverting changes.
Training on augumented user 32849 14/50 current_auc = 0.9166666666666667
User 32849 AUC after training: 0.9166666666666667
User 32849 does not improve AUC. Reverting changes.
Training on augumented user 25640 15/50 current_auc = 0.9166666666666667
User 25640 AUC after training: 0.9166666666666667
User 25640 does not improve AUC. Reverting changes.
Training on augumented user 94665 16/50 current_auc = 0.9166666666666667
User 94665 AUC after training: 0.9166666666666667
User 94665 does not improve AUC. Reverting changes.
Training on augumented user 105113 17/50 current_auc = 0.9166666666666667
User 105113 AUC after training: 0.9166666666666667
User 105113 does not improve AUC. Reverting changes.
Training on augumented user 65314 18/50 current_auc = 0.9166666666666667
User 65314 AUC after training: 0.9166666666666667
User 65314 does not improve AUC. Reverting changes.
Training on augumented user 114458 19/50 current_auc = 0.9166666666666667
User 114458 AUC after training: 0.9166666666666667
User 114458 does not improve AUC. Reverting changes.
Training on augumented user 43819 20/50 current_auc = 0.9166666666666667
User 43819 AUC after training: 0.9166666666666667
User 43819 does not improve AUC. Reverting changes.
Training on augumented user 84052 21/50 current_auc = 0.9166666666666667
User 84052 AUC after training: 0.9166666666666667
User 84052 does not improve AUC. Reverting changes.
Training on augumented user 509 22/50 current_auc = 0.9166666666666667
User 509 AUC after training: 0.9166666666666667
User 509 does not improve AUC. Reverting changes.
Training on augumented user 54795 23/50 current_auc = 0.9166666666666667
User 54795 AUC after training: 0.9166666666666667
User 54795 does not improve AUC. Reverting changes.
Training on augumented user 69205 24/50 current_auc = 0.9166666666666667
User 69205 AUC after training: 0.9166666666666667
User 69205 does not improve AUC. Reverting changes.
Training on augumented user 88282 25/50 current_auc = 0.9166666666666667
User 88282 AUC after training: 0.9166666666666667
User 88282 does not improve AUC. Reverting changes.
Training on augumented user 52084 26/50 current_auc = 0.9166666666666667
User 52084 AUC after training: 0.9166666666666667
User 52084 does not improve AUC. Reverting changes.
Training on augumented user 126940 27/50 current_auc = 0.9166666666666667
User 126940 AUC after training: 0.9166666666666667
User 126940 does not improve AUC. Reverting changes.
Training on augumented user 63067 28/50 current_auc = 0.9166666666666667
User 63067 AUC after training: 0.9166666666666667
User 63067 does not improve AUC. Reverting changes.
Training on augumented user 64676 29/50 current_auc = 0.9166666666666667
User 64676 AUC after training: 0.9166666666666667
User 64676 does not improve AUC. Reverting changes.
Training on augumented user 124563 30/50 current_auc = 0.9166666666666667
User 124563 AUC after training: 0.9166666666666667
User 124563 does not improve AUC. Reverting changes.
Training on augumented user 86108 31/50 current_auc = 0.9166666666666667
User 86108 AUC after training: 0.9166666666666667
User 86108 does not improve AUC. Reverting changes.
Training on augumented user 44301 32/50 current_auc = 0.9166666666666667
User 44301 AUC after training: 0.9166666666666667
User 44301 does not improve AUC. Reverting changes.
Training on augumented user 75288 33/50 current_auc = 0.9166666666666667
User 75288 AUC after training: 0.9166666666666667
User 75288 does not improve AUC. Reverting changes.
Training on augumented user 27363 34/50 current_auc = 0.9166666666666667
User 27363 AUC after training: 0.9166666666666667
User 27363 does not improve AUC. Reverting changes.
Training on augumented user 42927 35/50 current_auc = 0.9166666666666667
User 42927 AUC after training: 0.9166666666666667
User 42927 does not improve AUC. Reverting changes.
Training on augumented user 21267 36/50 current_auc = 0.9166666666666667
User 21267 AUC after training: 0.9166666666666667
User 21267 does not improve AUC. Reverting changes.
Training on augumented user 55993 37/50 current_auc = 0.9166666666666667
User 55993 AUC after training: 0.9166666666666667
User 55993 does not improve AUC. Reverting changes.
Training on augumented user 22097 38/50 current_auc = 0.9166666666666667
User 22097 AUC after training: 0.9166666666666667
User 22097 does not improve AUC. Reverting changes.
Training on augumented user 65236 39/50 current_auc = 0.9166666666666667
User 65236 AUC after training: 0.9166666666666667
User 65236 does not improve AUC. Reverting changes.
Training on augumented user 8532 40/50 current_auc = 0.9166666666666667
User 8532 AUC after training: 0.9166666666666667
User 8532 does not improve AUC. Reverting changes.
Training on augumented user 86089 41/50 current_auc = 0.9166666666666667
User 86089 AUC after training: 0.9166666666666667
User 86089 does not improve AUC. Reverting changes.
Training on augumented user 71945 42/50 current_auc = 0.9166666666666667
User 71945 AUC after training: 0.9166666666666667
User 71945 does not improve AUC. Reverting changes.
Training on augumented user 29570 43/50 current_auc = 0.9166666666666667
User 29570 AUC after training: 0.9166666666666667
User 29570 does not improve AUC. Reverting changes.
Training on augumented user 67666 44/50 current_auc = 0.9166666666666667
User 67666 AUC after training: 0.9166666666666667
User 67666 does not improve AUC. Reverting changes.
Training on augumented user 75330 45/50 current_auc = 0.9166666666666667
User 75330 AUC after training: 0.9166666666666667
User 75330 does not improve AUC. Reverting changes.
Training on augumented user 22468 46/50 current_auc = 0.9166666666666667
User 22468 AUC after training: 0.9166666666666667
User 22468 does not improve AUC. Reverting changes.
Training on augumented user 21588 47/50 current_auc = 0.9166666666666667
User 21588 AUC after training: 0.9166666666666667
User 21588 does not improve AUC. Reverting changes.
Training on augumented user 111310 48/50 current_auc = 0.9166666666666667
User 111310 AUC after training: 0.9166666666666667
User 111310 does not improve AUC. Reverting changes.
Training on augumented user 70245 49/50 current_auc = 0.9166666666666667
User 70245 AUC after training: 0.9166666666666667
User 70245 does not improve AUC. Reverting changes.
[2024-12-02 20:19:38.694882] start test user 21075 297/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:39.342112] start test user 21075 297/568 recall augumented users by random, augumented_users = [3656, 100128, 65297, 32653, 70925, 45318, 37483, 2254, 111411, 67382, 100919, 58873, 137646, 136832, 89891, 70047, 123266, 123625, 82017, 73832, 126709, 17455, 93525, 59626, 46918, 118605, 100096, 20247, 50555, 10280, 81873, 62530, 56814, 95609, 47676, 74709, 119739, 131345, 95493, 55331, 22635, 83556, 104757, 111613, 119815, 74246, 106832, 20430, 39085, 8365]
[2024-12-02 20:19:39.359142] user = 21075 Cloud 297/568
[2024-12-02 20:19:39.393425] user = 21075 Local 297/568
[2024-12-02 20:19:39.440481] user = 21075 Local+ 297/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:42.882514] user = 21075 MPDA- 297/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7369525308156308
Training on augumented user 3656 0/50 current_auc = 0.7369525308156308
User 3656 AUC after training: 0.739247311827957
User 3656 improves AUC. Keeping the model.
Training on augumented user 100128 1/50 current_auc = 0.739247311827957
User 100128 AUC after training: 0.7411487018095988
User 100128 improves AUC. Keeping the model.
Training on augumented user 65297 2/50 current_auc = 0.7411487018095988
User 65297 AUC after training: 0.7420666142145292
User 65297 improves AUC. Keeping the model.
Training on augumented user 32653 3/50 current_auc = 0.7420666142145292
User 32653 AUC after training: 0.7437713086808287
User 32653 improves AUC. Keeping the model.
Training on augumented user 70925 4/50 current_auc = 0.7437713086808287
User 70925 AUC after training: 0.7441646997115132
User 70925 improves AUC. Keeping the model.
Training on augumented user 45318 5/50 current_auc = 0.7441646997115132
User 45318 AUC after training: 0.7440335693679517
User 45318 does not improve AUC. Reverting changes.
Training on augumented user 37483 6/50 current_auc = 0.7441646997115132
User 37483 AUC after training: 0.7440335693679517
User 37483 does not improve AUC. Reverting changes.
Training on augumented user 2254 7/50 current_auc = 0.7441646997115132
User 2254 AUC after training: 0.7454760031471283
User 2254 improves AUC. Keeping the model.
Training on augumented user 111411 8/50 current_auc = 0.7454760031471283
User 111411 AUC after training: 0.7456071334906896
User 111411 improves AUC. Keeping the model.
Training on augumented user 67382 9/50 current_auc = 0.7456071334906896
User 67382 AUC after training: 0.7446892210857593
User 67382 does not improve AUC. Reverting changes.
Training on augumented user 100919 10/50 current_auc = 0.7456071334906896
User 100919 AUC after training: 0.7442958300550747
User 100919 does not improve AUC. Reverting changes.
Training on augumented user 58873 11/50 current_auc = 0.7456071334906896
User 58873 AUC after training: 0.7457382638342512
User 58873 improves AUC. Keeping the model.
Training on augumented user 137646 12/50 current_auc = 0.7457382638342512
User 137646 AUC after training: 0.7437713086808287
User 137646 does not improve AUC. Reverting changes.
Training on augumented user 136832 13/50 current_auc = 0.7457382638342512
User 136832 AUC after training: 0.7460005245213742
User 136832 improves AUC. Keeping the model.
Training on augumented user 89891 14/50 current_auc = 0.7460005245213742
User 89891 AUC after training: 0.7437713086808287
User 89891 does not improve AUC. Reverting changes.
Training on augumented user 70047 15/50 current_auc = 0.7460005245213742
User 70047 AUC after training: 0.7423288749016522
User 70047 does not improve AUC. Reverting changes.
Training on augumented user 123266 16/50 current_auc = 0.7460005245213742
User 123266 AUC after training: 0.7433779176501442
User 123266 does not improve AUC. Reverting changes.
Training on augumented user 123625 17/50 current_auc = 0.7460005245213742
User 123625 AUC after training: 0.7465250458956202
User 123625 improves AUC. Keeping the model.
Training on augumented user 82017 18/50 current_auc = 0.7465250458956202
User 82017 AUC after training: 0.7465250458956202
User 82017 does not improve AUC. Reverting changes.
Training on augumented user 73832 19/50 current_auc = 0.7465250458956202
User 73832 AUC after training: 0.7465250458956202
User 73832 does not improve AUC. Reverting changes.
Training on augumented user 126709 20/50 current_auc = 0.7465250458956202
User 126709 AUC after training: 0.7442958300550747
User 126709 does not improve AUC. Reverting changes.
Training on augumented user 17455 21/50 current_auc = 0.7465250458956202
User 17455 AUC after training: 0.7444269603986363
User 17455 does not improve AUC. Reverting changes.
Training on augumented user 93525 22/50 current_auc = 0.7465250458956202
User 93525 AUC after training: 0.7471806976134278
User 93525 improves AUC. Keeping the model.
Training on augumented user 59626 23/50 current_auc = 0.7471806976134278
User 59626 AUC after training: 0.7465250458956202
User 59626 does not improve AUC. Reverting changes.
Training on augumented user 46918 24/50 current_auc = 0.7471806976134278
User 46918 AUC after training: 0.7467873065827433
User 46918 does not improve AUC. Reverting changes.
Training on augumented user 118605 25/50 current_auc = 0.7471806976134278
User 118605 AUC after training: 0.7465250458956203
User 118605 does not improve AUC. Reverting changes.
Training on augumented user 100096 26/50 current_auc = 0.7471806976134278
User 100096 AUC after training: 0.7462627852084972
User 100096 does not improve AUC. Reverting changes.
Training on augumented user 20247 27/50 current_auc = 0.7471806976134278
User 20247 AUC after training: 0.7462627852084972
User 20247 does not improve AUC. Reverting changes.
Training on augumented user 50555 28/50 current_auc = 0.7471806976134278
User 50555 AUC after training: 0.7467873065827432
User 50555 does not improve AUC. Reverting changes.
Training on augumented user 10280 29/50 current_auc = 0.7471806976134278
User 10280 AUC after training: 0.7450826121164439
User 10280 does not improve AUC. Reverting changes.
Training on augumented user 81873 30/50 current_auc = 0.7471806976134278
User 81873 AUC after training: 0.7470495672698662
User 81873 does not improve AUC. Reverting changes.
Training on augumented user 62530 31/50 current_auc = 0.7471806976134278
User 62530 AUC after training: 0.7463939155520588
User 62530 does not improve AUC. Reverting changes.
Training on augumented user 56814 32/50 current_auc = 0.7471806976134278
User 56814 AUC after training: 0.7463939155520587
User 56814 does not improve AUC. Reverting changes.
Training on augumented user 95609 33/50 current_auc = 0.7471806976134278
User 95609 AUC after training: 0.7465250458956202
User 95609 does not improve AUC. Reverting changes.
Training on augumented user 47676 34/50 current_auc = 0.7471806976134278
User 47676 AUC after training: 0.7461316548649357
User 47676 does not improve AUC. Reverting changes.
Training on augumented user 74709 35/50 current_auc = 0.7471806976134278
User 74709 AUC after training: 0.7465250458956202
User 74709 does not improve AUC. Reverting changes.
Training on augumented user 119739 36/50 current_auc = 0.7471806976134278
User 119739 AUC after training: 0.7465250458956202
User 119739 does not improve AUC. Reverting changes.
Training on augumented user 131345 37/50 current_auc = 0.7471806976134278
User 131345 AUC after training: 0.7467873065827433
User 131345 does not improve AUC. Reverting changes.
Training on augumented user 95493 38/50 current_auc = 0.7471806976134278
User 95493 AUC after training: 0.7470495672698662
User 95493 does not improve AUC. Reverting changes.
Training on augumented user 55331 39/50 current_auc = 0.7471806976134278
User 55331 AUC after training: 0.7456071334906897
User 55331 does not improve AUC. Reverting changes.
Training on augumented user 22635 40/50 current_auc = 0.7471806976134278
User 22635 AUC after training: 0.7467873065827432
User 22635 does not improve AUC. Reverting changes.
Training on augumented user 83556 41/50 current_auc = 0.7471806976134278
User 83556 AUC after training: 0.7421977445580906
User 83556 does not improve AUC. Reverting changes.
Training on augumented user 104757 42/50 current_auc = 0.7471806976134278
User 104757 AUC after training: 0.7469184369263047
User 104757 does not improve AUC. Reverting changes.
Training on augumented user 111613 43/50 current_auc = 0.7471806976134278
User 111613 AUC after training: 0.7462627852084972
User 111613 does not improve AUC. Reverting changes.
Training on augumented user 119815 44/50 current_auc = 0.7471806976134278
User 119815 AUC after training: 0.7460005245213742
User 119815 does not improve AUC. Reverting changes.
Training on augumented user 74246 45/50 current_auc = 0.7471806976134278
User 74246 AUC after training: 0.7467873065827432
User 74246 does not improve AUC. Reverting changes.
Training on augumented user 106832 46/50 current_auc = 0.7471806976134278
User 106832 AUC after training: 0.7469184369263048
User 106832 does not improve AUC. Reverting changes.
Training on augumented user 20430 47/50 current_auc = 0.7471806976134278
User 20430 AUC after training: 0.7465250458956202
User 20430 does not improve AUC. Reverting changes.
Training on augumented user 39085 48/50 current_auc = 0.7471806976134278
User 39085 AUC after training: 0.7428533962758983
User 39085 does not improve AUC. Reverting changes.
Training on augumented user 8365 49/50 current_auc = 0.7471806976134278
User 8365 AUC after training: 0.7466561762391818
User 8365 does not improve AUC. Reverting changes.
[2024-12-02 20:20:12.577472] start test user 21078 298/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:13.104656] start test user 21078 298/568 recall augumented users by random, augumented_users = [41448, 115637, 130486, 72764, 58462, 130158, 99035, 93632, 57694, 104287, 33142, 107401, 73199, 95854, 124809, 110833, 11584, 29531, 49428, 76544, 89691, 122789, 90488, 71678, 57596, 21057, 25809, 71315, 27715, 71997, 36919, 37006, 86243, 71239, 33252, 38982, 19554, 40319, 49354, 34850, 138218, 3555, 7695, 136387, 48988, 83126, 82022, 60835, 130080, 132285]
[2024-12-02 20:20:13.124727] user = 21078 Cloud 298/568
[2024-12-02 20:20:13.136845] user = 21078 Local 298/568
[2024-12-02 20:20:13.627208] user = 21078 Local+ 298/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:16.914023] user = 21078 MPDA- 298/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4132231404958677
Training on augumented user 41448 0/50 current_auc = 0.4132231404958677
User 41448 AUC after training: 0.4104683195592286
User 41448 does not improve AUC. Reverting changes.
Training on augumented user 115637 1/50 current_auc = 0.4132231404958677
User 115637 AUC after training: 0.4132231404958677
User 115637 does not improve AUC. Reverting changes.
Training on augumented user 130486 2/50 current_auc = 0.4132231404958677
User 130486 AUC after training: 0.4132231404958677
User 130486 does not improve AUC. Reverting changes.
Training on augumented user 72764 3/50 current_auc = 0.4132231404958677
User 72764 AUC after training: 0.4132231404958677
User 72764 does not improve AUC. Reverting changes.
Training on augumented user 58462 4/50 current_auc = 0.4132231404958677
User 58462 AUC after training: 0.41597796143250687
User 58462 improves AUC. Keeping the model.
Training on augumented user 130158 5/50 current_auc = 0.41597796143250687
User 130158 AUC after training: 0.4132231404958677
User 130158 does not improve AUC. Reverting changes.
Training on augumented user 99035 6/50 current_auc = 0.41597796143250687
User 99035 AUC after training: 0.4132231404958677
User 99035 does not improve AUC. Reverting changes.
Training on augumented user 93632 7/50 current_auc = 0.41597796143250687
User 93632 AUC after training: 0.41597796143250687
User 93632 does not improve AUC. Reverting changes.
Training on augumented user 57694 8/50 current_auc = 0.41597796143250687
User 57694 AUC after training: 0.4132231404958677
User 57694 does not improve AUC. Reverting changes.
Training on augumented user 104287 9/50 current_auc = 0.41597796143250687
User 104287 AUC after training: 0.418732782369146
User 104287 improves AUC. Keeping the model.
Training on augumented user 33142 10/50 current_auc = 0.418732782369146
User 33142 AUC after training: 0.41597796143250687
User 33142 does not improve AUC. Reverting changes.
Training on augumented user 107401 11/50 current_auc = 0.418732782369146
User 107401 AUC after training: 0.418732782369146
User 107401 does not improve AUC. Reverting changes.
Training on augumented user 73199 12/50 current_auc = 0.418732782369146
User 73199 AUC after training: 0.418732782369146
User 73199 does not improve AUC. Reverting changes.
Training on augumented user 95854 13/50 current_auc = 0.418732782369146
User 95854 AUC after training: 0.418732782369146
User 95854 does not improve AUC. Reverting changes.
Training on augumented user 124809 14/50 current_auc = 0.418732782369146
User 124809 AUC after training: 0.41597796143250687
User 124809 does not improve AUC. Reverting changes.
Training on augumented user 110833 15/50 current_auc = 0.418732782369146
User 110833 AUC after training: 0.418732782369146
User 110833 does not improve AUC. Reverting changes.
Training on augumented user 11584 16/50 current_auc = 0.418732782369146
User 11584 AUC after training: 0.42148760330578505
User 11584 improves AUC. Keeping the model.
Training on augumented user 29531 17/50 current_auc = 0.42148760330578505
User 29531 AUC after training: 0.418732782369146
User 29531 does not improve AUC. Reverting changes.
Training on augumented user 49428 18/50 current_auc = 0.42148760330578505
User 49428 AUC after training: 0.4132231404958677
User 49428 does not improve AUC. Reverting changes.
Training on augumented user 76544 19/50 current_auc = 0.42148760330578505
User 76544 AUC after training: 0.42148760330578505
User 76544 does not improve AUC. Reverting changes.
Training on augumented user 89691 20/50 current_auc = 0.42148760330578505
User 89691 AUC after training: 0.42148760330578505
User 89691 does not improve AUC. Reverting changes.
Training on augumented user 122789 21/50 current_auc = 0.42148760330578505
User 122789 AUC after training: 0.42148760330578505
User 122789 does not improve AUC. Reverting changes.
Training on augumented user 90488 22/50 current_auc = 0.42148760330578505
User 90488 AUC after training: 0.41597796143250687
User 90488 does not improve AUC. Reverting changes.
Training on augumented user 71678 23/50 current_auc = 0.42148760330578505
User 71678 AUC after training: 0.42148760330578505
User 71678 does not improve AUC. Reverting changes.
Training on augumented user 57596 24/50 current_auc = 0.42148760330578505
User 57596 AUC after training: 0.42148760330578505
User 57596 does not improve AUC. Reverting changes.
Training on augumented user 21057 25/50 current_auc = 0.42148760330578505
User 21057 AUC after training: 0.4132231404958677
User 21057 does not improve AUC. Reverting changes.
Training on augumented user 25809 26/50 current_auc = 0.42148760330578505
User 25809 AUC after training: 0.4104683195592286
User 25809 does not improve AUC. Reverting changes.
Training on augumented user 71315 27/50 current_auc = 0.42148760330578505
User 71315 AUC after training: 0.42148760330578505
User 71315 does not improve AUC. Reverting changes.
Training on augumented user 27715 28/50 current_auc = 0.42148760330578505
User 27715 AUC after training: 0.42148760330578505
User 27715 does not improve AUC. Reverting changes.
Training on augumented user 71997 29/50 current_auc = 0.42148760330578505
User 71997 AUC after training: 0.42148760330578505
User 71997 does not improve AUC. Reverting changes.
Training on augumented user 36919 30/50 current_auc = 0.42148760330578505
User 36919 AUC after training: 0.42148760330578505
User 36919 does not improve AUC. Reverting changes.
Training on augumented user 37006 31/50 current_auc = 0.42148760330578505
User 37006 AUC after training: 0.418732782369146
User 37006 does not improve AUC. Reverting changes.
Training on augumented user 86243 32/50 current_auc = 0.42148760330578505
User 86243 AUC after training: 0.42148760330578505
User 86243 does not improve AUC. Reverting changes.
Training on augumented user 71239 33/50 current_auc = 0.42148760330578505
User 71239 AUC after training: 0.42148760330578505
User 71239 does not improve AUC. Reverting changes.
Training on augumented user 33252 34/50 current_auc = 0.42148760330578505
User 33252 AUC after training: 0.42148760330578505
User 33252 does not improve AUC. Reverting changes.
Training on augumented user 38982 35/50 current_auc = 0.42148760330578505
User 38982 AUC after training: 0.42148760330578505
User 38982 does not improve AUC. Reverting changes.
Training on augumented user 19554 36/50 current_auc = 0.42148760330578505
User 19554 AUC after training: 0.42148760330578505
User 19554 does not improve AUC. Reverting changes.
Training on augumented user 40319 37/50 current_auc = 0.42148760330578505
User 40319 AUC after training: 0.42148760330578505
User 40319 does not improve AUC. Reverting changes.
Training on augumented user 49354 38/50 current_auc = 0.42148760330578505
User 49354 AUC after training: 0.418732782369146
User 49354 does not improve AUC. Reverting changes.
Training on augumented user 34850 39/50 current_auc = 0.42148760330578505
User 34850 AUC after training: 0.42148760330578505
User 34850 does not improve AUC. Reverting changes.
Training on augumented user 138218 40/50 current_auc = 0.42148760330578505
User 138218 AUC after training: 0.42148760330578505
User 138218 does not improve AUC. Reverting changes.
Training on augumented user 3555 41/50 current_auc = 0.42148760330578505
User 3555 AUC after training: 0.42148760330578505
User 3555 does not improve AUC. Reverting changes.
Training on augumented user 7695 42/50 current_auc = 0.42148760330578505
User 7695 AUC after training: 0.42148760330578505
User 7695 does not improve AUC. Reverting changes.
Training on augumented user 136387 43/50 current_auc = 0.42148760330578505
User 136387 AUC after training: 0.42148760330578505
User 136387 does not improve AUC. Reverting changes.
Training on augumented user 48988 44/50 current_auc = 0.42148760330578505
User 48988 AUC after training: 0.42148760330578505
User 48988 does not improve AUC. Reverting changes.
Training on augumented user 83126 45/50 current_auc = 0.42148760330578505
User 83126 AUC after training: 0.42148760330578505
User 83126 does not improve AUC. Reverting changes.
Training on augumented user 82022 46/50 current_auc = 0.42148760330578505
User 82022 AUC after training: 0.42148760330578516
User 82022 improves AUC. Keeping the model.
Training on augumented user 60835 47/50 current_auc = 0.42148760330578516
User 60835 AUC after training: 0.42148760330578516
User 60835 does not improve AUC. Reverting changes.
Training on augumented user 130080 48/50 current_auc = 0.42148760330578516
User 130080 AUC after training: 0.42148760330578516
User 130080 does not improve AUC. Reverting changes.
Training on augumented user 132285 49/50 current_auc = 0.42148760330578516
User 132285 AUC after training: 0.42148760330578516
User 132285 does not improve AUC. Reverting changes.
[2024-12-02 20:20:47.189751] start test user 21080 299/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:48.191807] start test user 21080 299/568 recall augumented users by random, augumented_users = [78081, 73034, 36332, 21060, 53211, 51929, 97677, 70492, 120572, 36203, 69140, 33293, 16476, 118050, 29622, 43610, 41257, 128237, 81562, 137640, 48415, 136499, 8495, 49320, 79644, 81708, 1655, 65845, 8169, 124956, 112505, 23799, 134227, 51845, 137773, 131207, 86169, 92219, 33905, 128321, 3692, 53521, 100, 24270, 4643, 101460, 72750, 79463, 50225, 91055]
[2024-12-02 20:20:48.249095] user = 21080 Cloud 299/568
[2024-12-02 20:20:48.293224] user = 21080 Local 299/568
[2024-12-02 20:20:48.348272] user = 21080 Local+ 299/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:50.516199] user = 21080 MPDA- 299/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.531
Training on augumented user 78081 0/50 current_auc = 0.531
User 78081 AUC after training: 0.529
User 78081 does not improve AUC. Reverting changes.
Training on augumented user 73034 1/50 current_auc = 0.531
User 73034 AUC after training: 0.531
User 73034 does not improve AUC. Reverting changes.
Training on augumented user 36332 2/50 current_auc = 0.531
User 36332 AUC after training: 0.531
User 36332 does not improve AUC. Reverting changes.
Training on augumented user 21060 3/50 current_auc = 0.531
User 21060 AUC after training: 0.531
User 21060 does not improve AUC. Reverting changes.
Training on augumented user 53211 4/50 current_auc = 0.531
User 53211 AUC after training: 0.531
User 53211 does not improve AUC. Reverting changes.
Training on augumented user 51929 5/50 current_auc = 0.531
User 51929 AUC after training: 0.531
User 51929 does not improve AUC. Reverting changes.
Training on augumented user 97677 6/50 current_auc = 0.531
User 97677 AUC after training: 0.53
User 97677 does not improve AUC. Reverting changes.
Training on augumented user 70492 7/50 current_auc = 0.531
User 70492 AUC after training: 0.531
User 70492 does not improve AUC. Reverting changes.
Training on augumented user 120572 8/50 current_auc = 0.531
User 120572 AUC after training: 0.531
User 120572 does not improve AUC. Reverting changes.
Training on augumented user 36203 9/50 current_auc = 0.531
User 36203 AUC after training: 0.53
User 36203 does not improve AUC. Reverting changes.
Training on augumented user 69140 10/50 current_auc = 0.531
User 69140 AUC after training: 0.53
User 69140 does not improve AUC. Reverting changes.
Training on augumented user 33293 11/50 current_auc = 0.531
User 33293 AUC after training: 0.531
User 33293 does not improve AUC. Reverting changes.
Training on augumented user 16476 12/50 current_auc = 0.531
User 16476 AUC after training: 0.529
User 16476 does not improve AUC. Reverting changes.
Training on augumented user 118050 13/50 current_auc = 0.531
User 118050 AUC after training: 0.531
User 118050 does not improve AUC. Reverting changes.
Training on augumented user 29622 14/50 current_auc = 0.531
User 29622 AUC after training: 0.53
User 29622 does not improve AUC. Reverting changes.
Training on augumented user 43610 15/50 current_auc = 0.531
User 43610 AUC after training: 0.529
User 43610 does not improve AUC. Reverting changes.
Training on augumented user 41257 16/50 current_auc = 0.531
User 41257 AUC after training: 0.531
User 41257 does not improve AUC. Reverting changes.
Training on augumented user 128237 17/50 current_auc = 0.531
User 128237 AUC after training: 0.531
User 128237 does not improve AUC. Reverting changes.
Training on augumented user 81562 18/50 current_auc = 0.531
User 81562 AUC after training: 0.53
User 81562 does not improve AUC. Reverting changes.
Training on augumented user 137640 19/50 current_auc = 0.531
User 137640 AUC after training: 0.531
User 137640 does not improve AUC. Reverting changes.
Training on augumented user 48415 20/50 current_auc = 0.531
User 48415 AUC after training: 0.53
User 48415 does not improve AUC. Reverting changes.
Training on augumented user 136499 21/50 current_auc = 0.531
User 136499 AUC after training: 0.53
User 136499 does not improve AUC. Reverting changes.
Training on augumented user 8495 22/50 current_auc = 0.531
User 8495 AUC after training: 0.524
User 8495 does not improve AUC. Reverting changes.
Training on augumented user 49320 23/50 current_auc = 0.531
User 49320 AUC after training: 0.531
User 49320 does not improve AUC. Reverting changes.
Training on augumented user 79644 24/50 current_auc = 0.531
User 79644 AUC after training: 0.531
User 79644 does not improve AUC. Reverting changes.
Training on augumented user 81708 25/50 current_auc = 0.531
User 81708 AUC after training: 0.531
User 81708 does not improve AUC. Reverting changes.
Training on augumented user 1655 26/50 current_auc = 0.531
User 1655 AUC after training: 0.53
User 1655 does not improve AUC. Reverting changes.
Training on augumented user 65845 27/50 current_auc = 0.531
User 65845 AUC after training: 0.53
User 65845 does not improve AUC. Reverting changes.
Training on augumented user 8169 28/50 current_auc = 0.531
User 8169 AUC after training: 0.53
User 8169 does not improve AUC. Reverting changes.
Training on augumented user 124956 29/50 current_auc = 0.531
User 124956 AUC after training: 0.53
User 124956 does not improve AUC. Reverting changes.
Training on augumented user 112505 30/50 current_auc = 0.531
User 112505 AUC after training: 0.525
User 112505 does not improve AUC. Reverting changes.
Training on augumented user 23799 31/50 current_auc = 0.531
User 23799 AUC after training: 0.53
User 23799 does not improve AUC. Reverting changes.
Training on augumented user 134227 32/50 current_auc = 0.531
User 134227 AUC after training: 0.526
User 134227 does not improve AUC. Reverting changes.
Training on augumented user 51845 33/50 current_auc = 0.531
User 51845 AUC after training: 0.53
User 51845 does not improve AUC. Reverting changes.
Training on augumented user 137773 34/50 current_auc = 0.531
User 137773 AUC after training: 0.531
User 137773 does not improve AUC. Reverting changes.
Training on augumented user 131207 35/50 current_auc = 0.531
User 131207 AUC after training: 0.53
User 131207 does not improve AUC. Reverting changes.
Training on augumented user 86169 36/50 current_auc = 0.531
User 86169 AUC after training: 0.526
User 86169 does not improve AUC. Reverting changes.
Training on augumented user 92219 37/50 current_auc = 0.531
User 92219 AUC after training: 0.531
User 92219 does not improve AUC. Reverting changes.
Training on augumented user 33905 38/50 current_auc = 0.531
User 33905 AUC after training: 0.531
User 33905 does not improve AUC. Reverting changes.
Training on augumented user 128321 39/50 current_auc = 0.531
User 128321 AUC after training: 0.526
User 128321 does not improve AUC. Reverting changes.
Training on augumented user 3692 40/50 current_auc = 0.531
User 3692 AUC after training: 0.53
User 3692 does not improve AUC. Reverting changes.
Training on augumented user 53521 41/50 current_auc = 0.531
User 53521 AUC after training: 0.531
User 53521 does not improve AUC. Reverting changes.
Training on augumented user 100 42/50 current_auc = 0.531
User 100 AUC after training: 0.531
User 100 does not improve AUC. Reverting changes.
Training on augumented user 24270 43/50 current_auc = 0.531
User 24270 AUC after training: 0.53
User 24270 does not improve AUC. Reverting changes.
Training on augumented user 4643 44/50 current_auc = 0.531
User 4643 AUC after training: 0.53
User 4643 does not improve AUC. Reverting changes.
Training on augumented user 101460 45/50 current_auc = 0.531
User 101460 AUC after training: 0.521
User 101460 does not improve AUC. Reverting changes.
Training on augumented user 72750 46/50 current_auc = 0.531
User 72750 AUC after training: 0.53
User 72750 does not improve AUC. Reverting changes.
Training on augumented user 79463 47/50 current_auc = 0.531
User 79463 AUC after training: 0.529
User 79463 does not improve AUC. Reverting changes.
Training on augumented user 50225 48/50 current_auc = 0.531
User 50225 AUC after training: 0.526
User 50225 does not improve AUC. Reverting changes.
Training on augumented user 91055 49/50 current_auc = 0.531
User 91055 AUC after training: 0.527
User 91055 does not improve AUC. Reverting changes.
[2024-12-02 20:21:19.667149] start test user 21119 300/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:20.136116] start test user 21119 300/568 recall augumented users by random, augumented_users = [54240, 22276, 107802, 56973, 40860, 38314, 82733, 56696, 35877, 45617, 134952, 38908, 117726, 81672, 4718, 127168, 43369, 74824, 29755, 98427, 24205, 24109, 34110, 96253, 16602, 81634, 106643, 28653, 35279, 13033, 84103, 28017, 4649, 9639, 28816, 386, 113468, 49483, 111889, 97389, 12355, 103849, 54363, 94362, 134318, 93452, 97559, 2440, 103579, 12626]
[2024-12-02 20:21:20.157587] user = 21119 Cloud 300/568
[2024-12-02 20:21:20.187162] user = 21119 Local 300/568
[2024-12-02 20:21:20.278206] user = 21119 Local+ 300/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:22.186659] user = 21119 MPDA- 300/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6871345029239766
Training on augumented user 54240 0/50 current_auc = 0.6871345029239766
User 54240 AUC after training: 0.6858813700918964
User 54240 does not improve AUC. Reverting changes.
Training on augumented user 22276 1/50 current_auc = 0.6871345029239766
User 22276 AUC after training: 0.6871345029239766
User 22276 does not improve AUC. Reverting changes.
Training on augumented user 107802 2/50 current_auc = 0.6871345029239766
User 107802 AUC after training: 0.6871345029239767
User 107802 improves AUC. Keeping the model.
Training on augumented user 56973 3/50 current_auc = 0.6871345029239767
User 56973 AUC after training: 0.6875522138680034
User 56973 improves AUC. Keeping the model.
Training on augumented user 40860 4/50 current_auc = 0.6875522138680034
User 40860 AUC after training: 0.68671679197995
User 40860 does not improve AUC. Reverting changes.
Training on augumented user 38314 5/50 current_auc = 0.6875522138680034
User 38314 AUC after training: 0.6875522138680034
User 38314 does not improve AUC. Reverting changes.
Training on augumented user 82733 6/50 current_auc = 0.6875522138680034
User 82733 AUC after training: 0.68671679197995
User 82733 does not improve AUC. Reverting changes.
Training on augumented user 56696 7/50 current_auc = 0.6875522138680034
User 56696 AUC after training: 0.6875522138680034
User 56696 does not improve AUC. Reverting changes.
Training on augumented user 35877 8/50 current_auc = 0.6875522138680034
User 35877 AUC after training: 0.68671679197995
User 35877 does not improve AUC. Reverting changes.
Training on augumented user 45617 9/50 current_auc = 0.6875522138680034
User 45617 AUC after training: 0.6871345029239766
User 45617 does not improve AUC. Reverting changes.
Training on augumented user 134952 10/50 current_auc = 0.6875522138680034
User 134952 AUC after training: 0.6850459482038429
User 134952 does not improve AUC. Reverting changes.
Training on augumented user 38908 11/50 current_auc = 0.6875522138680034
User 38908 AUC after training: 0.68671679197995
User 38908 does not improve AUC. Reverting changes.
Training on augumented user 117726 12/50 current_auc = 0.6875522138680034
User 117726 AUC after training: 0.6883876357560568
User 117726 improves AUC. Keeping the model.
Training on augumented user 81672 13/50 current_auc = 0.6883876357560568
User 81672 AUC after training: 0.6875522138680034
User 81672 does not improve AUC. Reverting changes.
Training on augumented user 4718 14/50 current_auc = 0.6883876357560568
User 4718 AUC after training: 0.6883876357560568
User 4718 does not improve AUC. Reverting changes.
Training on augumented user 127168 15/50 current_auc = 0.6883876357560568
User 127168 AUC after training: 0.6883876357560568
User 127168 does not improve AUC. Reverting changes.
Training on augumented user 43369 16/50 current_auc = 0.6883876357560568
User 43369 AUC after training: 0.6883876357560568
User 43369 does not improve AUC. Reverting changes.
Training on augumented user 74824 17/50 current_auc = 0.6883876357560568
User 74824 AUC after training: 0.6875522138680034
User 74824 does not improve AUC. Reverting changes.
Training on augumented user 29755 18/50 current_auc = 0.6883876357560568
User 29755 AUC after training: 0.6875522138680034
User 29755 does not improve AUC. Reverting changes.
Training on augumented user 98427 19/50 current_auc = 0.6883876357560568
User 98427 AUC after training: 0.6883876357560568
User 98427 does not improve AUC. Reverting changes.
Training on augumented user 24205 20/50 current_auc = 0.6883876357560568
User 24205 AUC after training: 0.6867167919799498
User 24205 does not improve AUC. Reverting changes.
Training on augumented user 24109 21/50 current_auc = 0.6883876357560568
User 24109 AUC after training: 0.6833751044277361
User 24109 does not improve AUC. Reverting changes.
Training on augumented user 34110 22/50 current_auc = 0.6883876357560568
User 34110 AUC after training: 0.6871345029239766
User 34110 does not improve AUC. Reverting changes.
Training on augumented user 96253 23/50 current_auc = 0.6883876357560568
User 96253 AUC after training: 0.6883876357560568
User 96253 does not improve AUC. Reverting changes.
Training on augumented user 16602 24/50 current_auc = 0.6883876357560568
User 16602 AUC after training: 0.6883876357560568
User 16602 does not improve AUC. Reverting changes.
Training on augumented user 81634 25/50 current_auc = 0.6883876357560568
User 81634 AUC after training: 0.6879699248120301
User 81634 does not improve AUC. Reverting changes.
Training on augumented user 106643 26/50 current_auc = 0.6883876357560568
User 106643 AUC after training: 0.6862990810359231
User 106643 does not improve AUC. Reverting changes.
Training on augumented user 28653 27/50 current_auc = 0.6883876357560568
User 28653 AUC after training: 0.6875522138680034
User 28653 does not improve AUC. Reverting changes.
Training on augumented user 35279 28/50 current_auc = 0.6883876357560568
User 35279 AUC after training: 0.6879699248120301
User 35279 does not improve AUC. Reverting changes.
Training on augumented user 13033 29/50 current_auc = 0.6883876357560568
User 13033 AUC after training: 0.6888053467000835
User 13033 improves AUC. Keeping the model.
Training on augumented user 84103 30/50 current_auc = 0.6888053467000835
User 84103 AUC after training: 0.68671679197995
User 84103 does not improve AUC. Reverting changes.
Training on augumented user 28017 31/50 current_auc = 0.6888053467000835
User 28017 AUC after training: 0.6879699248120301
User 28017 does not improve AUC. Reverting changes.
Training on augumented user 4649 32/50 current_auc = 0.6888053467000835
User 4649 AUC after training: 0.68671679197995
User 4649 does not improve AUC. Reverting changes.
Training on augumented user 9639 33/50 current_auc = 0.6888053467000835
User 9639 AUC after training: 0.6883876357560568
User 9639 does not improve AUC. Reverting changes.
Training on augumented user 28816 34/50 current_auc = 0.6888053467000835
User 28816 AUC after training: 0.6879699248120301
User 28816 does not improve AUC. Reverting changes.
Training on augumented user 386 35/50 current_auc = 0.6888053467000835
User 386 AUC after training: 0.6862990810359232
User 386 does not improve AUC. Reverting changes.
Training on augumented user 113468 36/50 current_auc = 0.6888053467000835
User 113468 AUC after training: 0.6871345029239766
User 113468 does not improve AUC. Reverting changes.
Training on augumented user 49483 37/50 current_auc = 0.6888053467000835
User 49483 AUC after training: 0.6879699248120301
User 49483 does not improve AUC. Reverting changes.
Training on augumented user 111889 38/50 current_auc = 0.6888053467000835
User 111889 AUC after training: 0.6879699248120301
User 111889 does not improve AUC. Reverting changes.
Training on augumented user 97389 39/50 current_auc = 0.6888053467000835
User 97389 AUC after training: 0.6879699248120301
User 97389 does not improve AUC. Reverting changes.
Training on augumented user 12355 40/50 current_auc = 0.6888053467000835
User 12355 AUC after training: 0.6871345029239766
User 12355 does not improve AUC. Reverting changes.
Training on augumented user 103849 41/50 current_auc = 0.6888053467000835
User 103849 AUC after training: 0.6875522138680034
User 103849 does not improve AUC. Reverting changes.
Training on augumented user 54363 42/50 current_auc = 0.6888053467000835
User 54363 AUC after training: 0.6867167919799498
User 54363 does not improve AUC. Reverting changes.
Training on augumented user 94362 43/50 current_auc = 0.6888053467000835
User 94362 AUC after training: 0.68671679197995
User 94362 does not improve AUC. Reverting changes.
Training on augumented user 134318 44/50 current_auc = 0.6888053467000835
User 134318 AUC after training: 0.68671679197995
User 134318 does not improve AUC. Reverting changes.
Training on augumented user 93452 45/50 current_auc = 0.6888053467000835
User 93452 AUC after training: 0.6883876357560568
User 93452 does not improve AUC. Reverting changes.
Training on augumented user 97559 46/50 current_auc = 0.6888053467000835
User 97559 AUC after training: 0.6879699248120301
User 97559 does not improve AUC. Reverting changes.
Training on augumented user 2440 47/50 current_auc = 0.6888053467000835
User 2440 AUC after training: 0.6883876357560568
User 2440 does not improve AUC. Reverting changes.
Training on augumented user 103579 48/50 current_auc = 0.6888053467000835
User 103579 AUC after training: 0.6862990810359232
User 103579 does not improve AUC. Reverting changes.
Training on augumented user 12626 49/50 current_auc = 0.6888053467000835
User 12626 AUC after training: 0.6879699248120301
User 12626 does not improve AUC. Reverting changes.
[2024-12-02 20:21:52.870701] start test user 21130 301/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:53.278947] start test user 21130 301/568 recall augumented users by random, augumented_users = [133351, 2978, 96735, 125480, 111607, 52847, 111356, 21443, 49439, 108346, 136696, 131977, 27467, 59576, 50478, 88425, 132926, 88444, 1477, 137955, 54808, 122169, 109885, 6371, 92063, 111957, 103000, 8679, 29320, 69192, 38714, 11988, 132074, 94288, 118362, 121954, 80035, 59323, 49130, 71832, 45571, 10071, 37818, 105723, 112136, 133769, 93006, 134597, 35325, 29084]
[2024-12-02 20:21:53.293014] user = 21130 Cloud 301/568
[2024-12-02 20:21:53.302618] user = 21130 Local 301/568
[2024-12-02 20:21:53.334106] user = 21130 Local+ 301/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:55.248070] user = 21130 MPDA- 301/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7381818181818182
Training on augumented user 133351 0/50 current_auc = 0.7381818181818182
User 133351 AUC after training: 0.7381818181818182
User 133351 does not improve AUC. Reverting changes.
Training on augumented user 2978 1/50 current_auc = 0.7381818181818182
User 2978 AUC after training: 0.7381818181818182
User 2978 does not improve AUC. Reverting changes.
Training on augumented user 96735 2/50 current_auc = 0.7381818181818182
User 96735 AUC after training: 0.7345454545454545
User 96735 does not improve AUC. Reverting changes.
Training on augumented user 125480 3/50 current_auc = 0.7381818181818182
User 125480 AUC after training: 0.7381818181818182
User 125480 does not improve AUC. Reverting changes.
Training on augumented user 111607 4/50 current_auc = 0.7381818181818182
User 111607 AUC after training: 0.7381818181818182
User 111607 does not improve AUC. Reverting changes.
Training on augumented user 52847 5/50 current_auc = 0.7381818181818182
User 52847 AUC after training: 0.7345454545454545
User 52847 does not improve AUC. Reverting changes.
Training on augumented user 111356 6/50 current_auc = 0.7381818181818182
User 111356 AUC after training: 0.7381818181818182
User 111356 does not improve AUC. Reverting changes.
Training on augumented user 21443 7/50 current_auc = 0.7381818181818182
User 21443 AUC after training: 0.7381818181818182
User 21443 does not improve AUC. Reverting changes.
Training on augumented user 49439 8/50 current_auc = 0.7381818181818182
User 49439 AUC after training: 0.7381818181818182
User 49439 does not improve AUC. Reverting changes.
Training on augumented user 108346 9/50 current_auc = 0.7381818181818182
User 108346 AUC after training: 0.7345454545454545
User 108346 does not improve AUC. Reverting changes.
Training on augumented user 136696 10/50 current_auc = 0.7381818181818182
User 136696 AUC after training: 0.7345454545454545
User 136696 does not improve AUC. Reverting changes.
Training on augumented user 131977 11/50 current_auc = 0.7381818181818182
User 131977 AUC after training: 0.7381818181818182
User 131977 does not improve AUC. Reverting changes.
Training on augumented user 27467 12/50 current_auc = 0.7381818181818182
User 27467 AUC after training: 0.7345454545454545
User 27467 does not improve AUC. Reverting changes.
Training on augumented user 59576 13/50 current_auc = 0.7381818181818182
User 59576 AUC after training: 0.7381818181818182
User 59576 does not improve AUC. Reverting changes.
Training on augumented user 50478 14/50 current_auc = 0.7381818181818182
User 50478 AUC after training: 0.7381818181818182
User 50478 does not improve AUC. Reverting changes.
Training on augumented user 88425 15/50 current_auc = 0.7381818181818182
User 88425 AUC after training: 0.7381818181818182
User 88425 does not improve AUC. Reverting changes.
Training on augumented user 132926 16/50 current_auc = 0.7381818181818182
User 132926 AUC after training: 0.7381818181818182
User 132926 does not improve AUC. Reverting changes.
Training on augumented user 88444 17/50 current_auc = 0.7381818181818182
User 88444 AUC after training: 0.7381818181818182
User 88444 does not improve AUC. Reverting changes.
Training on augumented user 1477 18/50 current_auc = 0.7381818181818182
User 1477 AUC after training: 0.7381818181818182
User 1477 does not improve AUC. Reverting changes.
Training on augumented user 137955 19/50 current_auc = 0.7381818181818182
User 137955 AUC after training: 0.7345454545454545
User 137955 does not improve AUC. Reverting changes.
Training on augumented user 54808 20/50 current_auc = 0.7381818181818182
User 54808 AUC after training: 0.7381818181818182
User 54808 does not improve AUC. Reverting changes.
Training on augumented user 122169 21/50 current_auc = 0.7381818181818182
User 122169 AUC after training: 0.7345454545454545
User 122169 does not improve AUC. Reverting changes.
Training on augumented user 109885 22/50 current_auc = 0.7381818181818182
User 109885 AUC after training: 0.7381818181818182
User 109885 does not improve AUC. Reverting changes.
Training on augumented user 6371 23/50 current_auc = 0.7381818181818182
User 6371 AUC after training: 0.7345454545454545
User 6371 does not improve AUC. Reverting changes.
Training on augumented user 92063 24/50 current_auc = 0.7381818181818182
User 92063 AUC after training: 0.7345454545454545
User 92063 does not improve AUC. Reverting changes.
Training on augumented user 111957 25/50 current_auc = 0.7381818181818182
User 111957 AUC after training: 0.7381818181818182
User 111957 does not improve AUC. Reverting changes.
Training on augumented user 103000 26/50 current_auc = 0.7381818181818182
User 103000 AUC after training: 0.7381818181818182
User 103000 does not improve AUC. Reverting changes.
Training on augumented user 8679 27/50 current_auc = 0.7381818181818182
User 8679 AUC after training: 0.7381818181818182
User 8679 does not improve AUC. Reverting changes.
Training on augumented user 29320 28/50 current_auc = 0.7381818181818182
User 29320 AUC after training: 0.7381818181818182
User 29320 does not improve AUC. Reverting changes.
Training on augumented user 69192 29/50 current_auc = 0.7381818181818182
User 69192 AUC after training: 0.7381818181818182
User 69192 does not improve AUC. Reverting changes.
Training on augumented user 38714 30/50 current_auc = 0.7381818181818182
User 38714 AUC after training: 0.7381818181818182
User 38714 does not improve AUC. Reverting changes.
Training on augumented user 11988 31/50 current_auc = 0.7381818181818182
User 11988 AUC after training: 0.7345454545454545
User 11988 does not improve AUC. Reverting changes.
Training on augumented user 132074 32/50 current_auc = 0.7381818181818182
User 132074 AUC after training: 0.7381818181818182
User 132074 does not improve AUC. Reverting changes.
Training on augumented user 94288 33/50 current_auc = 0.7381818181818182
User 94288 AUC after training: 0.7381818181818182
User 94288 does not improve AUC. Reverting changes.
Training on augumented user 118362 34/50 current_auc = 0.7381818181818182
User 118362 AUC after training: 0.7381818181818182
User 118362 does not improve AUC. Reverting changes.
Training on augumented user 121954 35/50 current_auc = 0.7381818181818182
User 121954 AUC after training: 0.7345454545454545
User 121954 does not improve AUC. Reverting changes.
Training on augumented user 80035 36/50 current_auc = 0.7381818181818182
User 80035 AUC after training: 0.7381818181818182
User 80035 does not improve AUC. Reverting changes.
Training on augumented user 59323 37/50 current_auc = 0.7381818181818182
User 59323 AUC after training: 0.7381818181818182
User 59323 does not improve AUC. Reverting changes.
Training on augumented user 49130 38/50 current_auc = 0.7381818181818182
User 49130 AUC after training: 0.7381818181818182
User 49130 does not improve AUC. Reverting changes.
Training on augumented user 71832 39/50 current_auc = 0.7381818181818182
User 71832 AUC after training: 0.7345454545454545
User 71832 does not improve AUC. Reverting changes.
Training on augumented user 45571 40/50 current_auc = 0.7381818181818182
User 45571 AUC after training: 0.7381818181818182
User 45571 does not improve AUC. Reverting changes.
Training on augumented user 10071 41/50 current_auc = 0.7381818181818182
User 10071 AUC after training: 0.7345454545454545
User 10071 does not improve AUC. Reverting changes.
Training on augumented user 37818 42/50 current_auc = 0.7381818181818182
User 37818 AUC after training: 0.7381818181818182
User 37818 does not improve AUC. Reverting changes.
Training on augumented user 105723 43/50 current_auc = 0.7381818181818182
User 105723 AUC after training: 0.7345454545454545
User 105723 does not improve AUC. Reverting changes.
Training on augumented user 112136 44/50 current_auc = 0.7381818181818182
User 112136 AUC after training: 0.7381818181818182
User 112136 does not improve AUC. Reverting changes.
Training on augumented user 133769 45/50 current_auc = 0.7381818181818182
User 133769 AUC after training: 0.7381818181818182
User 133769 does not improve AUC. Reverting changes.
Training on augumented user 93006 46/50 current_auc = 0.7381818181818182
User 93006 AUC after training: 0.7381818181818182
User 93006 does not improve AUC. Reverting changes.
Training on augumented user 134597 47/50 current_auc = 0.7381818181818182
User 134597 AUC after training: 0.7381818181818182
User 134597 does not improve AUC. Reverting changes.
Training on augumented user 35325 48/50 current_auc = 0.7381818181818182
User 35325 AUC after training: 0.7381818181818182
User 35325 does not improve AUC. Reverting changes.
Training on augumented user 29084 49/50 current_auc = 0.7381818181818182
User 29084 AUC after training: 0.7418181818181817
User 29084 improves AUC. Keeping the model.
[2024-12-02 20:22:21.824282] start test user 21132 302/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:22.535005] start test user 21132 302/568 recall augumented users by random, augumented_users = [4120, 105650, 117713, 88087, 77429, 53189, 59284, 120673, 124895, 119736, 31400, 95515, 33781, 61463, 130666, 24945, 23967, 87713, 42351, 110939, 98201, 41664, 83716, 46882, 89904, 49808, 24724, 20430, 125691, 57956, 36072, 24176, 5234, 46887, 46485, 137259, 109750, 70936, 123798, 31793, 103089, 77827, 98571, 133200, 117917, 27302, 62081, 49793, 49364, 54369]
[2024-12-02 20:22:22.548365] user = 21132 Cloud 302/568
[2024-12-02 20:22:22.557447] user = 21132 Local 302/568
[2024-12-02 20:22:22.669784] user = 21132 Local+ 302/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:25.060700] user = 21132 MPDA- 302/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6099999999999999
Training on augumented user 4120 0/50 current_auc = 0.6099999999999999
User 4120 AUC after training: 0.6066666666666667
User 4120 does not improve AUC. Reverting changes.
Training on augumented user 105650 1/50 current_auc = 0.6099999999999999
User 105650 AUC after training: 0.6133333333333333
User 105650 improves AUC. Keeping the model.
Training on augumented user 117713 2/50 current_auc = 0.6133333333333333
User 117713 AUC after training: 0.6099999999999999
User 117713 does not improve AUC. Reverting changes.
Training on augumented user 88087 3/50 current_auc = 0.6133333333333333
User 88087 AUC after training: 0.605
User 88087 does not improve AUC. Reverting changes.
Training on augumented user 77429 4/50 current_auc = 0.6133333333333333
User 77429 AUC after training: 0.6133333333333333
User 77429 does not improve AUC. Reverting changes.
Training on augumented user 53189 5/50 current_auc = 0.6133333333333333
User 53189 AUC after training: 0.61
User 53189 does not improve AUC. Reverting changes.
Training on augumented user 59284 6/50 current_auc = 0.6133333333333333
User 59284 AUC after training: 0.6133333333333333
User 59284 does not improve AUC. Reverting changes.
Training on augumented user 120673 7/50 current_auc = 0.6133333333333333
User 120673 AUC after training: 0.6133333333333333
User 120673 does not improve AUC. Reverting changes.
Training on augumented user 124895 8/50 current_auc = 0.6133333333333333
User 124895 AUC after training: 0.61
User 124895 does not improve AUC. Reverting changes.
Training on augumented user 119736 9/50 current_auc = 0.6133333333333333
User 119736 AUC after training: 0.6133333333333333
User 119736 does not improve AUC. Reverting changes.
Training on augumented user 31400 10/50 current_auc = 0.6133333333333333
User 31400 AUC after training: 0.6133333333333333
User 31400 does not improve AUC. Reverting changes.
Training on augumented user 95515 11/50 current_auc = 0.6133333333333333
User 95515 AUC after training: 0.61
User 95515 does not improve AUC. Reverting changes.
Training on augumented user 33781 12/50 current_auc = 0.6133333333333333
User 33781 AUC after training: 0.6133333333333333
User 33781 does not improve AUC. Reverting changes.
Training on augumented user 61463 13/50 current_auc = 0.6133333333333333
User 61463 AUC after training: 0.61
User 61463 does not improve AUC. Reverting changes.
Training on augumented user 130666 14/50 current_auc = 0.6133333333333333
User 130666 AUC after training: 0.6099999999999999
User 130666 does not improve AUC. Reverting changes.
Training on augumented user 24945 15/50 current_auc = 0.6133333333333333
User 24945 AUC after training: 0.61
User 24945 does not improve AUC. Reverting changes.
Training on augumented user 23967 16/50 current_auc = 0.6133333333333333
User 23967 AUC after training: 0.6133333333333333
User 23967 does not improve AUC. Reverting changes.
Training on augumented user 87713 17/50 current_auc = 0.6133333333333333
User 87713 AUC after training: 0.6133333333333333
User 87713 does not improve AUC. Reverting changes.
Training on augumented user 42351 18/50 current_auc = 0.6133333333333333
User 42351 AUC after training: 0.61
User 42351 does not improve AUC. Reverting changes.
Training on augumented user 110939 19/50 current_auc = 0.6133333333333333
User 110939 AUC after training: 0.6133333333333333
User 110939 does not improve AUC. Reverting changes.
Training on augumented user 98201 20/50 current_auc = 0.6133333333333333
User 98201 AUC after training: 0.6133333333333333
User 98201 does not improve AUC. Reverting changes.
Training on augumented user 41664 21/50 current_auc = 0.6133333333333333
User 41664 AUC after training: 0.6133333333333333
User 41664 does not improve AUC. Reverting changes.
Training on augumented user 83716 22/50 current_auc = 0.6133333333333333
User 83716 AUC after training: 0.6133333333333333
User 83716 does not improve AUC. Reverting changes.
Training on augumented user 46882 23/50 current_auc = 0.6133333333333333
User 46882 AUC after training: 0.6133333333333333
User 46882 does not improve AUC. Reverting changes.
Training on augumented user 89904 24/50 current_auc = 0.6133333333333333
User 89904 AUC after training: 0.6133333333333333
User 89904 does not improve AUC. Reverting changes.
Training on augumented user 49808 25/50 current_auc = 0.6133333333333333
User 49808 AUC after training: 0.6133333333333333
User 49808 does not improve AUC. Reverting changes.
Training on augumented user 24724 26/50 current_auc = 0.6133333333333333
User 24724 AUC after training: 0.6133333333333333
User 24724 does not improve AUC. Reverting changes.
Training on augumented user 20430 27/50 current_auc = 0.6133333333333333
User 20430 AUC after training: 0.6133333333333333
User 20430 does not improve AUC. Reverting changes.
Training on augumented user 125691 28/50 current_auc = 0.6133333333333333
User 125691 AUC after training: 0.6133333333333333
User 125691 does not improve AUC. Reverting changes.
Training on augumented user 57956 29/50 current_auc = 0.6133333333333333
User 57956 AUC after training: 0.61
User 57956 does not improve AUC. Reverting changes.
Training on augumented user 36072 30/50 current_auc = 0.6133333333333333
User 36072 AUC after training: 0.6133333333333333
User 36072 does not improve AUC. Reverting changes.
Training on augumented user 24176 31/50 current_auc = 0.6133333333333333
User 24176 AUC after training: 0.6133333333333333
User 24176 does not improve AUC. Reverting changes.
Training on augumented user 5234 32/50 current_auc = 0.6133333333333333
User 5234 AUC after training: 0.6216666666666667
User 5234 improves AUC. Keeping the model.
Training on augumented user 46887 33/50 current_auc = 0.6216666666666667
User 46887 AUC after training: 0.6183333333333333
User 46887 does not improve AUC. Reverting changes.
Training on augumented user 46485 34/50 current_auc = 0.6216666666666667
User 46485 AUC after training: 0.6216666666666667
User 46485 does not improve AUC. Reverting changes.
Training on augumented user 137259 35/50 current_auc = 0.6216666666666667
User 137259 AUC after training: 0.6099999999999999
User 137259 does not improve AUC. Reverting changes.
Training on augumented user 109750 36/50 current_auc = 0.6216666666666667
User 109750 AUC after training: 0.6133333333333333
User 109750 does not improve AUC. Reverting changes.
Training on augumented user 70936 37/50 current_auc = 0.6216666666666667
User 70936 AUC after training: 0.615
User 70936 does not improve AUC. Reverting changes.
Training on augumented user 123798 38/50 current_auc = 0.6216666666666667
User 123798 AUC after training: 0.6133333333333334
User 123798 does not improve AUC. Reverting changes.
Training on augumented user 31793 39/50 current_auc = 0.6216666666666667
User 31793 AUC after training: 0.6133333333333334
User 31793 does not improve AUC. Reverting changes.
Training on augumented user 103089 40/50 current_auc = 0.6216666666666667
User 103089 AUC after training: 0.6216666666666667
User 103089 does not improve AUC. Reverting changes.
Training on augumented user 77827 41/50 current_auc = 0.6216666666666667
User 77827 AUC after training: 0.6183333333333333
User 77827 does not improve AUC. Reverting changes.
Training on augumented user 98571 42/50 current_auc = 0.6216666666666667
User 98571 AUC after training: 0.6216666666666667
User 98571 does not improve AUC. Reverting changes.
Training on augumented user 133200 43/50 current_auc = 0.6216666666666667
User 133200 AUC after training: 0.6216666666666667
User 133200 does not improve AUC. Reverting changes.
Training on augumented user 117917 44/50 current_auc = 0.6216666666666667
User 117917 AUC after training: 0.6216666666666667
User 117917 does not improve AUC. Reverting changes.
Training on augumented user 27302 45/50 current_auc = 0.6216666666666667
User 27302 AUC after training: 0.6133333333333334
User 27302 does not improve AUC. Reverting changes.
Training on augumented user 62081 46/50 current_auc = 0.6216666666666667
User 62081 AUC after training: 0.6133333333333334
User 62081 does not improve AUC. Reverting changes.
Training on augumented user 49793 47/50 current_auc = 0.6216666666666667
User 49793 AUC after training: 0.6099999999999999
User 49793 does not improve AUC. Reverting changes.
Training on augumented user 49364 48/50 current_auc = 0.6216666666666667
User 49364 AUC after training: 0.6216666666666667
User 49364 does not improve AUC. Reverting changes.
Training on augumented user 54369 49/50 current_auc = 0.6216666666666667
User 54369 AUC after training: 0.6216666666666667
User 54369 does not improve AUC. Reverting changes.
[2024-12-02 20:22:52.918301] start test user 21163 303/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:53.367361] start test user 21163 303/568 recall augumented users by random, augumented_users = [26762, 68944, 55767, 50757, 21493, 30124, 102094, 101363, 129703, 122558, 4607, 82424, 112176, 80771, 59928, 54748, 127814, 37908, 3259, 133350, 41179, 70167, 36415, 23171, 67721, 92604, 19406, 27231, 77085, 34421, 88787, 84196, 55470, 45259, 65169, 70474, 18120, 121781, 127347, 40858, 15006, 34709, 121503, 33571, 80556, 120919, 136523, 70536, 98844, 103785]
[2024-12-02 20:22:53.386123] user = 21163 Cloud 303/568
[2024-12-02 20:22:53.424085] user = 21163 Local 303/568
[2024-12-02 20:22:53.786257] user = 21163 Local+ 303/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:56.395873] user = 21163 MPDA- 303/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6118850257118735
Training on augumented user 26762 0/50 current_auc = 0.6118850257118735
User 26762 AUC after training: 0.6116163941975592
User 26762 does not improve AUC. Reverting changes.
Training on augumented user 68944 1/50 current_auc = 0.6118850257118735
User 68944 AUC after training: 0.6114820784404021
User 68944 does not improve AUC. Reverting changes.
Training on augumented user 55767 2/50 current_auc = 0.6118850257118735
User 55767 AUC after training: 0.6115204543710185
User 55767 does not improve AUC. Reverting changes.
Training on augumented user 50757 3/50 current_auc = 0.6118850257118735
User 50757 AUC after training: 0.6116547701281756
User 50757 does not improve AUC. Reverting changes.
Training on augumented user 21493 4/50 current_auc = 0.6118850257118735
User 21493 AUC after training: 0.6120289354516848
User 21493 improves AUC. Keeping the model.
Training on augumented user 30124 5/50 current_auc = 0.6120289354516848
User 30124 AUC after training: 0.6116355821628675
User 30124 does not improve AUC. Reverting changes.
Training on augumented user 102094 6/50 current_auc = 0.6120289354516848
User 102094 AUC after training: 0.6121344692608794
User 102094 improves AUC. Keeping the model.
Training on augumented user 101363 7/50 current_auc = 0.6121344692608794
User 101363 AUC after training: 0.6121344692608796
User 101363 improves AUC. Keeping the model.
Training on augumented user 129703 8/50 current_auc = 0.6121344692608796
User 129703 AUC after training: 0.6116355821628675
User 129703 does not improve AUC. Reverting changes.
Training on augumented user 122558 9/50 current_auc = 0.6121344692608796
User 122558 AUC after training: 0.6118658377465653
User 122558 does not improve AUC. Reverting changes.
Training on augumented user 4607 10/50 current_auc = 0.6121344692608796
User 4607 AUC after training: 0.6111366950648552
User 4607 does not improve AUC. Reverting changes.
Training on augumented user 82424 11/50 current_auc = 0.6121344692608796
User 82424 AUC after training: 0.6115972062322511
User 82424 does not improve AUC. Reverting changes.
Training on augumented user 112176 12/50 current_auc = 0.6121344692608796
User 112176 AUC after training: 0.6119905595210683
User 112176 does not improve AUC. Reverting changes.
Training on augumented user 80771 13/50 current_auc = 0.6121344692608796
User 80771 AUC after training: 0.6126525443241999
User 80771 improves AUC. Keeping the model.
Training on augumented user 59928 14/50 current_auc = 0.6126525443241999
User 59928 AUC after training: 0.6124798526364266
User 59928 does not improve AUC. Reverting changes.
Training on augumented user 54748 15/50 current_auc = 0.6126525443241999
User 54748 AUC after training: 0.6128827999078977
User 54748 improves AUC. Keeping the model.
Training on augumented user 127814 16/50 current_auc = 0.6128827999078977
User 127814 AUC after training: 0.6127484841507407
User 127814 does not improve AUC. Reverting changes.
Training on augumented user 37908 17/50 current_auc = 0.6128827999078977
User 37908 AUC after training: 0.6130554915956712
User 37908 improves AUC. Keeping the model.
Training on augumented user 3259 18/50 current_auc = 0.6130554915956712
User 3259 AUC after training: 0.6128252360119734
User 3259 does not improve AUC. Reverting changes.
Training on augumented user 133350 19/50 current_auc = 0.6130554915956712
User 133350 AUC after training: 0.6129403638038222
User 133350 does not improve AUC. Reverting changes.
Training on augumented user 41179 20/50 current_auc = 0.6130554915956712
User 41179 AUC after training: 0.6128060480466652
User 41179 does not improve AUC. Reverting changes.
Training on augumented user 70167 21/50 current_auc = 0.6130554915956712
User 70167 AUC after training: 0.6128636119425896
User 70167 does not improve AUC. Reverting changes.
Training on augumented user 36415 22/50 current_auc = 0.6130554915956712
User 36415 AUC after training: 0.6127484841507406
User 36415 does not improve AUC. Reverting changes.
Training on augumented user 23171 23/50 current_auc = 0.6130554915956712
User 23171 AUC after training: 0.613276153196715
User 23171 improves AUC. Keeping the model.
Training on augumented user 67721 24/50 current_auc = 0.613276153196715
User 67721 AUC after training: 0.6131322434569038
User 67721 does not improve AUC. Reverting changes.
Training on augumented user 92604 25/50 current_auc = 0.613276153196715
User 92604 AUC after training: 0.6132665592140609
User 92604 does not improve AUC. Reverting changes.
Training on augumented user 19406 26/50 current_auc = 0.613276153196715
User 19406 AUC after training: 0.6134392509018344
User 19406 improves AUC. Keeping the model.
Training on augumented user 27231 27/50 current_auc = 0.6134392509018344
User 27231 AUC after training: 0.6133049351446773
User 27231 does not improve AUC. Reverting changes.
Training on augumented user 77085 28/50 current_auc = 0.6134392509018344
User 77085 AUC after training: 0.6134968147977587
User 77085 improves AUC. Keeping the model.
Training on augumented user 34421 29/50 current_auc = 0.6134968147977587
User 34421 AUC after training: 0.6134968147977589
User 34421 improves AUC. Keeping the model.
Training on augumented user 88787 30/50 current_auc = 0.6134968147977589
User 88787 AUC after training: 0.6137270703814568
User 88787 improves AUC. Keeping the model.
Training on augumented user 84196 31/50 current_auc = 0.6137270703814568
User 84196 AUC after training: 0.6138421981733058
User 84196 improves AUC. Keeping the model.
Training on augumented user 55470 32/50 current_auc = 0.6138421981733058
User 55470 AUC after training: 0.6138421981733058
User 55470 does not improve AUC. Reverting changes.
Training on augumented user 45259 33/50 current_auc = 0.6138421981733058
User 45259 AUC after training: 0.6136503185202241
User 45259 does not improve AUC. Reverting changes.
Training on augumented user 65169 34/50 current_auc = 0.6138421981733058
User 65169 AUC after training: 0.6136695064855323
User 65169 does not improve AUC. Reverting changes.
Training on augumented user 70474 35/50 current_auc = 0.6138421981733058
User 70474 AUC after training: 0.6138038222426894
User 70474 does not improve AUC. Reverting changes.
Training on augumented user 18120 36/50 current_auc = 0.6138421981733058
User 18120 AUC after training: 0.6139477319825006
User 18120 improves AUC. Keeping the model.
Training on augumented user 121781 37/50 current_auc = 0.6139477319825006
User 121781 AUC after training: 0.6139093560518842
User 121781 does not improve AUC. Reverting changes.
Training on augumented user 127347 38/50 current_auc = 0.6139477319825006
User 127347 AUC after training: 0.613880574103922
User 127347 does not improve AUC. Reverting changes.
Training on augumented user 40858 39/50 current_auc = 0.6139477319825006
User 40858 AUC after training: 0.6136503185202241
User 40858 does not improve AUC. Reverting changes.
Training on augumented user 15006 40/50 current_auc = 0.6139477319825006
User 15006 AUC after training: 0.6140916417223118
User 15006 improves AUC. Keeping the model.
Training on augumented user 34709 41/50 current_auc = 0.6140916417223118
User 34709 AUC after training: 0.6138421981733058
User 34709 does not improve AUC. Reverting changes.
Training on augumented user 121503 42/50 current_auc = 0.6140916417223118
User 121503 AUC after training: 0.6136503185202241
User 121503 does not improve AUC. Reverting changes.
Training on augumented user 33571 43/50 current_auc = 0.6140916417223118
User 33571 AUC after training: 0.6140820477396577
User 33571 does not improve AUC. Reverting changes.
Training on augumented user 80556 44/50 current_auc = 0.6140916417223118
User 80556 AUC after training: 0.6142931153580474
User 80556 improves AUC. Keeping the model.
Training on augumented user 120919 45/50 current_auc = 0.6142931153580474
User 120919 AUC after training: 0.6142643334100851
User 120919 does not improve AUC. Reverting changes.
Training on augumented user 136523 46/50 current_auc = 0.6142931153580474
User 136523 AUC after training: 0.6142259574794688
User 136523 does not improve AUC. Reverting changes.
Training on augumented user 70536 47/50 current_auc = 0.6142931153580474
User 70536 AUC after training: 0.6141300176529281
User 70536 does not improve AUC. Reverting changes.
Training on augumented user 98844 48/50 current_auc = 0.6142931153580474
User 98844 AUC after training: 0.6143218973060097
User 98844 improves AUC. Keeping the model.
Training on augumented user 103785 49/50 current_auc = 0.6143218973060097
User 103785 AUC after training: 0.6145137769590913
User 103785 improves AUC. Keeping the model.
[2024-12-02 20:23:26.178623] start test user 21185 304/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:26.906386] start test user 21185 304/568 recall augumented users by random, augumented_users = [84077, 66995, 76801, 2172, 136305, 53927, 78633, 39004, 53612, 93051, 21993, 94294, 67511, 68793, 69022, 68722, 132689, 122974, 45375, 20223, 34612, 23313, 9993, 127756, 119586, 137385, 52656, 119041, 125414, 6792, 23384, 50656, 48088, 16893, 91468, 80795, 3991, 124559, 120192, 20107, 51761, 93784, 86850, 74094, 14353, 136188, 36754, 52281, 80908, 53802]
[2024-12-02 20:23:26.930774] user = 21185 Cloud 304/568
[2024-12-02 20:23:26.964679] user = 21185 Local 304/568
[2024-12-02 20:23:27.068049] user = 21185 Local+ 304/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:29.402153] user = 21185 MPDA- 304/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6645962732919255
Training on augumented user 84077 0/50 current_auc = 0.6645962732919255
User 84077 AUC after training: 0.6655250478899402
User 84077 improves AUC. Keeping the model.
Training on augumented user 66995 1/50 current_auc = 0.6655250478899402
User 66995 AUC after training: 0.6662216288384513
User 66995 improves AUC. Keeping the model.
Training on augumented user 76801 2/50 current_auc = 0.6662216288384513
User 76801 AUC after training: 0.6659313867765717
User 76801 does not improve AUC. Reverting changes.
Training on augumented user 2172 3/50 current_auc = 0.6662216288384513
User 2172 AUC after training: 0.6646543217043015
User 2172 does not improve AUC. Reverting changes.
Training on augumented user 136305 4/50 current_auc = 0.6662216288384513
User 136305 AUC after training: 0.6699947756428862
User 136305 improves AUC. Keeping the model.
Training on augumented user 53927 5/50 current_auc = 0.6699947756428862
User 53927 AUC after training: 0.6674986939107216
User 53927 does not improve AUC. Reverting changes.
Training on augumented user 78633 6/50 current_auc = 0.6699947756428862
User 78633 AUC after training: 0.6709815986532769
User 78633 improves AUC. Keeping the model.
Training on augumented user 39004 7/50 current_auc = 0.6709815986532769
User 39004 AUC after training: 0.6719103732512917
User 39004 improves AUC. Keeping the model.
Training on augumented user 53612 8/50 current_auc = 0.6719103732512917
User 53612 AUC after training: 0.6674986939107216
User 53612 does not improve AUC. Reverting changes.
Training on augumented user 93051 9/50 current_auc = 0.6719103732512917
User 93051 AUC after training: 0.6704591629418936
User 93051 does not improve AUC. Reverting changes.
Training on augumented user 21993 10/50 current_auc = 0.6719103732512917
User 21993 AUC after training: 0.6705172113542694
User 21993 does not improve AUC. Reverting changes.
Training on augumented user 94294 11/50 current_auc = 0.6719103732512917
User 94294 AUC after training: 0.6712137923027806
User 94294 does not improve AUC. Reverting changes.
Training on augumented user 67511 12/50 current_auc = 0.6719103732512917
User 67511 AUC after training: 0.672316712137923
User 67511 improves AUC. Keeping the model.
Training on augumented user 68793 13/50 current_auc = 0.672316712137923
User 68793 AUC after training: 0.673129389911186
User 68793 improves AUC. Keeping the model.
Training on augumented user 69022 14/50 current_auc = 0.673129389911186
User 69022 AUC after training: 0.6731874383235619
User 69022 improves AUC. Keeping the model.
Training on augumented user 68722 15/50 current_auc = 0.6731874383235619
User 68722 AUC after training: 0.6690660010448715
User 68722 does not improve AUC. Reverting changes.
Training on augumented user 132689 16/50 current_auc = 0.6731874383235619
User 132689 AUC after training: 0.6746966970453357
User 132689 improves AUC. Keeping the model.
Training on augumented user 122974 17/50 current_auc = 0.6746966970453357
User 122974 AUC after training: 0.6738259708596969
User 122974 does not improve AUC. Reverting changes.
Training on augumented user 45375 18/50 current_auc = 0.6746966970453357
User 45375 AUC after training: 0.675335229581471
User 45375 improves AUC. Keeping the model.
Training on augumented user 20223 19/50 current_auc = 0.675335229581471
User 20223 AUC after training: 0.6759737621176061
User 20223 improves AUC. Keeping the model.
Training on augumented user 34612 20/50 current_auc = 0.6759737621176061
User 34612 AUC after training: 0.6760898589423578
User 34612 improves AUC. Keeping the model.
Training on augumented user 23313 21/50 current_auc = 0.6760898589423578
User 23313 AUC after training: 0.6753932779938467
User 23313 does not improve AUC. Reverting changes.
Training on augumented user 9993 22/50 current_auc = 0.6760898589423578
User 9993 AUC after training: 0.6747547454577116
User 9993 does not improve AUC. Reverting changes.
Training on augumented user 127756 23/50 current_auc = 0.6760898589423578
User 127756 AUC after training: 0.6762059557671098
User 127756 improves AUC. Keeping the model.
Training on augumented user 119586 24/50 current_auc = 0.6762059557671098
User 119586 AUC after training: 0.6691240494572473
User 119586 does not improve AUC. Reverting changes.
Training on augumented user 137385 25/50 current_auc = 0.6762059557671098
User 137385 AUC after training: 0.6764381494166134
User 137385 improves AUC. Keeping the model.
Training on augumented user 52656 26/50 current_auc = 0.6764381494166134
User 52656 AUC after training: 0.6781215533755152
User 52656 improves AUC. Keeping the model.
Training on augumented user 119041 27/50 current_auc = 0.6781215533755152
User 119041 AUC after training: 0.6744064549834562
User 119041 does not improve AUC. Reverting changes.
Training on augumented user 125414 28/50 current_auc = 0.6781215533755152
User 125414 AUC after training: 0.6796308120972893
User 125414 improves AUC. Keeping the model.
Training on augumented user 6792 29/50 current_auc = 0.6796308120972893
User 6792 AUC after training: 0.6773669240146283
User 6792 does not improve AUC. Reverting changes.
Training on augumented user 23384 30/50 current_auc = 0.6796308120972893
User 23384 AUC after training: 0.6776571660765077
User 23384 does not improve AUC. Reverting changes.
Training on augumented user 50656 31/50 current_auc = 0.6796308120972893
User 50656 AUC after training: 0.6861322342833923
User 50656 improves AUC. Keeping the model.
Training on augumented user 48088 32/50 current_auc = 0.6861322342833923
User 48088 AUC after training: 0.6851454112730017
User 48088 does not improve AUC. Reverting changes.
Training on augumented user 16893 33/50 current_auc = 0.6861322342833923
User 16893 AUC after training: 0.6867707668195274
User 16893 improves AUC. Keeping the model.
Training on augumented user 91468 34/50 current_auc = 0.6867707668195274
User 91468 AUC after training: 0.6865385731700239
User 91468 does not improve AUC. Reverting changes.
Training on augumented user 80795 35/50 current_auc = 0.6867707668195274
User 80795 AUC after training: 0.687061008881407
User 80795 improves AUC. Keeping the model.
Training on augumented user 3991 36/50 current_auc = 0.687061008881407
User 3991 AUC after training: 0.6869449120566552
User 3991 does not improve AUC. Reverting changes.
Training on augumented user 124559 37/50 current_auc = 0.687061008881407
User 124559 AUC after training: 0.6873512509432868
User 124559 improves AUC. Keeping the model.
Training on augumented user 120192 38/50 current_auc = 0.6873512509432868
User 120192 AUC after training: 0.6865966215823996
User 120192 does not improve AUC. Reverting changes.
Training on augumented user 20107 39/50 current_auc = 0.6873512509432868
User 20107 AUC after training: 0.6868288152319034
User 20107 does not improve AUC. Reverting changes.
Training on augumented user 51761 40/50 current_auc = 0.6873512509432868
User 51761 AUC after training: 0.6874092993556628
User 51761 improves AUC. Keeping the model.
Training on augumented user 93784 41/50 current_auc = 0.6874092993556628
User 93784 AUC after training: 0.6868868636442793
User 93784 does not improve AUC. Reverting changes.
Training on augumented user 86850 42/50 current_auc = 0.6874092993556628
User 86850 AUC after training: 0.6870610088814071
User 86850 does not improve AUC. Reverting changes.
Training on augumented user 74094 43/50 current_auc = 0.6874092993556628
User 74094 AUC after training: 0.6870029604690312
User 74094 does not improve AUC. Reverting changes.
Training on augumented user 14353 44/50 current_auc = 0.6874092993556628
User 14353 AUC after training: 0.6878156382422941
User 14353 improves AUC. Keeping the model.
Training on augumented user 136188 45/50 current_auc = 0.6878156382422941
User 136188 AUC after training: 0.6874092993556625
User 136188 does not improve AUC. Reverting changes.
Training on augumented user 36754 46/50 current_auc = 0.6878156382422941
User 36754 AUC after training: 0.6854356533348812
User 36754 does not improve AUC. Reverting changes.
Training on augumented user 52281 47/50 current_auc = 0.6878156382422941
User 52281 AUC after training: 0.6878736866546701
User 52281 improves AUC. Keeping the model.
Training on augumented user 80908 48/50 current_auc = 0.6878736866546701
User 80908 AUC after training: 0.6878156382422941
User 80908 does not improve AUC. Reverting changes.
Training on augumented user 53802 49/50 current_auc = 0.6878736866546701
User 53802 AUC after training: 0.688570267603181
User 53802 improves AUC. Keeping the model.
[2024-12-02 20:24:00.272092] start test user 21186 305/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:24:00.941921] start test user 21186 305/568 recall augumented users by random, augumented_users = [1470, 15174, 68945, 102262, 11364, 53177, 15621, 39605, 97007, 19784, 31218, 56045, 10780, 89448, 121066, 126404, 105973, 104024, 125669, 42317, 135692, 68208, 82170, 51473, 109156, 16892, 8776, 129223, 62621, 32975, 75935, 18761, 92452, 95187, 122526, 30412, 6923, 97264, 104375, 108730, 109338, 30101, 103638, 57370, 10025, 118376, 65022, 26795, 112621, 62831]
[2024-12-02 20:24:00.995653] user = 21186 Cloud 305/568
[2024-12-02 20:24:01.026291] user = 21186 Local 305/568
[2024-12-02 20:24:01.257640] user = 21186 Local+ 305/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
