[2024-12-02 17:37:37.018535] start transfer model NCF
{'recall_num': 50, 'recall_alg': 'random', 'epochs': 1, 'device': 'cuda:5', 'batch_size': 64, 'task_index': 2, 'num_task': 10, 'lr': 0.001}
test users have been loaded, len = 568
test users = ['27310' '27342' '27365' '27395' '27418' '27449' '27456' '27459' '27461'
 '27469' '27482' '27483' '27551' '27560' '27589' '27610' '27638' '27647'
 '27666' '27673' '27679' '27719' '27769' '27784' '27809' '27810' '27838'
 '27854' '27887' '27902' '27921' '27935' '27943' '27967' '27990' '28016'
 '28027' '28092' '28118' '28125' '28142' '28155' '28195' '28197' '28226'
 '28233' '28238' '28239' '28256' '28279' '28285' '28340' '28357' '28360'
 '28381' '28394' '28398' '28410' '28447' '28456' '28488' '28526' '28529'
 '28539' '28598' '28696' '28724' '28735' '28761' '28771' '28780' '28789'
 '28965' '28969' '29024' '29062' '29063' '29078' '29098' '29115' '29149'
 '29223' '29226' '29261' '29278' '29316' '29317' '29334' '29341' '29464'
 '29499' '29534' '29549' '29557' '29558' '29571' '29633' '29656' '29673'
 '29678' '29687' '29690' '29756' '29778' '29808' '29823' '29824' '29831'
 '29834' '29870' '29882' '29894' '29916' '29918' '29964' '30047' '30092'
 '30100' '30102' '30140' '30144' '30150' '30159' '30166' '30172' '30204'
 '30210' '30235' '30240' '30256' '30272' '30303' '30322' '30360' '30412'
 '30437' '30447' '30497' '30503' '30519' '30607' '30614' '30620' '30631'
 '30664' '30688' '30724' '30731' '30739' '30767' '30778' '30817' '30829'
 '30881' '30895' '30929' '31067' '31076' '31086' '31181' '31192' '31199'
 '31273' '31284' '31291' '31321' '31338' '31405' '31406' '31408' '31434'
 '31440' '31449' '31468' '31499' '31551' '31610' '31654' '31732' '31865'
 '31887' '31891' '31896' '31903' '31922' '32011' '32109' '32122' '32161'
 '32180' '32185' '32198' '32222' '32284' '32337' '32368' '32372' '32386'
 '32391' '32414' '32454' '32487' '32541' '32545' '32613' '32618' '32620'
 '32624' '32640' '32659' '32671' '32675' '32716' '32729' '32768' '32785'
 '32809' '32855' '32899' '32935' '32982' '32984' '33014' '33035' '33074'
 '33082' '33136' '33161' '33205' '33209' '33287' '33319' '33323' '33340'
 '33440' '33452' '33502' '33523' '33553' '33555' '33565' '33575' '33624'
 '33647' '33655' '33690' '33726' '33729' '33736' '33773' '33837' '33848'
 '33912' '33920' '33932' '33936' '33981' '33991' '34046' '34124' '34127'
 '34143' '34156' '34160' '34179' '34187' '34188' '34194' '34224' '34238'
 '34289' '34308' '34324' '34343' '34366' '34402' '34439' '34449' '34467'
 '34478' '34497' '34511' '34576' '34584' '34601' '34617' '34642' '34651'
 '34683' '34692' '34700' '34723' '34743' '34758' '34768' '34770' '34856'
 '34899' '34904' '34950' '34954' '34995' '35022' '35037' '35091' '35095'
 '35098' '35109' '35128' '35155' '35178' '35227' '35246' '35248' '35290'
 '35303' '35411' '35415' '35420' '35436' '35439' '35475' '35538' '35601'
 '35686' '35705' '35709' '35714' '35733' '35746' '35761' '35780' '35854'
 '35856' '35884' '35940' '35945' '35968' '35973' '35985' '36003' '36013'
 '36015' '36038' '36048' '36082' '36093' '36099' '36128' '36176' '36217'
 '36250' '36255' '36308' '36334' '36337' '36347' '36362' '36450' '36463'
 '36481' '36505' '36594' '36628' '36733' '36778' '36786' '36851' '36869'
 '36884' '36920' '36975' '36994' '36995' '37051' '37053' '37069' '37075'
 '37120' '37136' '37145' '37150' '37192' '37217' '37224' '37250' '37251'
 '37264' '37294' '37317' '37352' '37371' '37387' '37469' '37474' '37530'
 '37547' '37585' '37600' '37629' '37636' '37638' '37690' '37692' '37754'
 '37814' '37834' '37888' '37890' '37914' '37936' '37999' '38070' '38082'
 '38107' '38119' '38157' '38160' '38171' '38184' '38187' '38188' '38198'
 '38231' '38235' '38252' '38253' '38264' '38274' '38294' '38335' '38354'
 '38372' '38381' '38383' '38386' '38398' '38404' '38420' '38430' '38455'
 '38526' '38538' '38574' '38615' '38642' '38663' '38670' '38681' '38720'
 '38756' '38773' '38787' '38793' '38800' '38802' '38817' '38820' '38835'
 '38899' '38939' '38957' '38988' '39012' '39017' '39032' '39061' '39071'
 '39154' '39173' '39181' '39222' '39250' '39372' '39382' '39397' '39430'
 '39451' '39454' '39455' '39459' '39495' '39497' '39499' '39570' '39579'
 '39623' '39627' '39647' '39714' '39760' '39766' '39778' '39800' '39820'
 '39847' '39849' '39880' '39902' '39907' '39954' '40008' '40012' '40021'
 '40052' '40053' '40066' '40082' '40093' '40101' '40142' '40166' '40191'
 '40194' '40239' '40261' '40301' '40304' '40339' '40375' '40412' '40424'
 '40446' '40451' '40453' '40514' '40521' '40543' '40592' '40610' '40617'
 '40618' '40643' '40717' '40761' '40773' '40782' '40798' '40880' '40882'
 '40898' '40922' '40938' '41070' '41079' '41083' '41091' '41114' '41130'
 '41131' '41160' '41165' '41185' '41192' '41215' '41244' '41267' '41277'
 '41317' '41329' '41357' '41372' '41384' '41426' '41427' '41430' '41462'
 '41474']
[2024-12-02 17:37:37.031467] start test on test users
[2024-12-02 17:37:37.031514] start test user 27310 0/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:37:39.795393] start test user 27310 0/568 recall augumented users by random, augumented_users = [35172, 55886, 103042, 108279, 55793, 138374, 50944, 81073, 87259, 52921, 91992, 138223, 28118, 14985, 36211, 40502, 50821, 125774, 133131, 78661, 112148, 73680, 128996, 80621, 21509, 132798, 37321, 58050, 87742, 131914, 68928, 11331, 45969, 24229, 118978, 106515, 138018, 34163, 37352, 131774, 52671, 49832, 110721, 27019, 104619, 29368, 5978, 16492, 5036, 124664]
[2024-12-02 17:37:39.814157] user = 27310 Cloud 0/568
[2024-12-02 17:37:44.909621] user = 27310 Local 0/568
[2024-12-02 17:37:45.573731] user = 27310 Local+ 0/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:37:48.335624] user = 27310 MPDA- 0/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.77
Training on augumented user 35172 0/50 current_auc = 0.77
User 35172 AUC after training: 0.78
User 35172 improves AUC. Keeping the model.
Training on augumented user 55886 1/50 current_auc = 0.78
User 55886 AUC after training: 0.78
User 55886 does not improve AUC. Reverting changes.
Training on augumented user 103042 2/50 current_auc = 0.78
User 103042 AUC after training: 0.77
User 103042 does not improve AUC. Reverting changes.
Training on augumented user 108279 3/50 current_auc = 0.78
User 108279 AUC after training: 0.78
User 108279 does not improve AUC. Reverting changes.
Training on augumented user 55793 4/50 current_auc = 0.78
User 55793 AUC after training: 0.78
User 55793 does not improve AUC. Reverting changes.
Training on augumented user 138374 5/50 current_auc = 0.78
User 138374 AUC after training: 0.78
User 138374 does not improve AUC. Reverting changes.
Training on augumented user 50944 6/50 current_auc = 0.78
User 50944 AUC after training: 0.78
User 50944 does not improve AUC. Reverting changes.
Training on augumented user 81073 7/50 current_auc = 0.78
User 81073 AUC after training: 0.78
User 81073 does not improve AUC. Reverting changes.
Training on augumented user 87259 8/50 current_auc = 0.78
User 87259 AUC after training: 0.78
User 87259 does not improve AUC. Reverting changes.
Training on augumented user 52921 9/50 current_auc = 0.78
User 52921 AUC after training: 0.78
User 52921 does not improve AUC. Reverting changes.
Training on augumented user 91992 10/50 current_auc = 0.78
User 91992 AUC after training: 0.78
User 91992 does not improve AUC. Reverting changes.
Training on augumented user 138223 11/50 current_auc = 0.78
User 138223 AUC after training: 0.78
User 138223 does not improve AUC. Reverting changes.
Training on augumented user 28118 12/50 current_auc = 0.78
User 28118 AUC after training: 0.78
User 28118 does not improve AUC. Reverting changes.
Training on augumented user 14985 13/50 current_auc = 0.78
User 14985 AUC after training: 0.78
User 14985 does not improve AUC. Reverting changes.
Training on augumented user 36211 14/50 current_auc = 0.78
User 36211 AUC after training: 0.77
User 36211 does not improve AUC. Reverting changes.
Training on augumented user 40502 15/50 current_auc = 0.78
User 40502 AUC after training: 0.78
User 40502 does not improve AUC. Reverting changes.
Training on augumented user 50821 16/50 current_auc = 0.78
User 50821 AUC after training: 0.77
User 50821 does not improve AUC. Reverting changes.
Training on augumented user 125774 17/50 current_auc = 0.78
User 125774 AUC after training: 0.78
User 125774 does not improve AUC. Reverting changes.
Training on augumented user 133131 18/50 current_auc = 0.78
User 133131 AUC after training: 0.77
User 133131 does not improve AUC. Reverting changes.
Training on augumented user 78661 19/50 current_auc = 0.78
User 78661 AUC after training: 0.78
User 78661 does not improve AUC. Reverting changes.
Training on augumented user 112148 20/50 current_auc = 0.78
User 112148 AUC after training: 0.77
User 112148 does not improve AUC. Reverting changes.
Training on augumented user 73680 21/50 current_auc = 0.78
User 73680 AUC after training: 0.78
User 73680 does not improve AUC. Reverting changes.
Training on augumented user 128996 22/50 current_auc = 0.78
User 128996 AUC after training: 0.77
User 128996 does not improve AUC. Reverting changes.
Training on augumented user 80621 23/50 current_auc = 0.78
User 80621 AUC after training: 0.78
User 80621 does not improve AUC. Reverting changes.
Training on augumented user 21509 24/50 current_auc = 0.78
User 21509 AUC after training: 0.78
User 21509 does not improve AUC. Reverting changes.
Training on augumented user 132798 25/50 current_auc = 0.78
User 132798 AUC after training: 0.77
User 132798 does not improve AUC. Reverting changes.
Training on augumented user 37321 26/50 current_auc = 0.78
User 37321 AUC after training: 0.77
User 37321 does not improve AUC. Reverting changes.
Training on augumented user 58050 27/50 current_auc = 0.78
User 58050 AUC after training: 0.78
User 58050 does not improve AUC. Reverting changes.
Training on augumented user 87742 28/50 current_auc = 0.78
User 87742 AUC after training: 0.78
User 87742 does not improve AUC. Reverting changes.
Training on augumented user 131914 29/50 current_auc = 0.78
User 131914 AUC after training: 0.78
User 131914 does not improve AUC. Reverting changes.
Training on augumented user 68928 30/50 current_auc = 0.78
User 68928 AUC after training: 0.78
User 68928 does not improve AUC. Reverting changes.
Training on augumented user 11331 31/50 current_auc = 0.78
User 11331 AUC after training: 0.78
User 11331 does not improve AUC. Reverting changes.
Training on augumented user 45969 32/50 current_auc = 0.78
User 45969 AUC after training: 0.77
User 45969 does not improve AUC. Reverting changes.
Training on augumented user 24229 33/50 current_auc = 0.78
User 24229 AUC after training: 0.77
User 24229 does not improve AUC. Reverting changes.
Training on augumented user 118978 34/50 current_auc = 0.78
User 118978 AUC after training: 0.77
User 118978 does not improve AUC. Reverting changes.
Training on augumented user 106515 35/50 current_auc = 0.78
User 106515 AUC after training: 0.78
User 106515 does not improve AUC. Reverting changes.
Training on augumented user 138018 36/50 current_auc = 0.78
User 138018 AUC after training: 0.78
User 138018 does not improve AUC. Reverting changes.
Training on augumented user 34163 37/50 current_auc = 0.78
User 34163 AUC after training: 0.78
User 34163 does not improve AUC. Reverting changes.
Training on augumented user 37352 38/50 current_auc = 0.78
User 37352 AUC after training: 0.78
User 37352 does not improve AUC. Reverting changes.
Training on augumented user 131774 39/50 current_auc = 0.78
User 131774 AUC after training: 0.77
User 131774 does not improve AUC. Reverting changes.
Training on augumented user 52671 40/50 current_auc = 0.78
User 52671 AUC after training: 0.77
User 52671 does not improve AUC. Reverting changes.
Training on augumented user 49832 41/50 current_auc = 0.78
User 49832 AUC after training: 0.78
User 49832 does not improve AUC. Reverting changes.
Training on augumented user 110721 42/50 current_auc = 0.78
User 110721 AUC after training: 0.78
User 110721 does not improve AUC. Reverting changes.
Training on augumented user 27019 43/50 current_auc = 0.78
User 27019 AUC after training: 0.78
User 27019 does not improve AUC. Reverting changes.
Training on augumented user 104619 44/50 current_auc = 0.78
User 104619 AUC after training: 0.78
User 104619 does not improve AUC. Reverting changes.
Training on augumented user 29368 45/50 current_auc = 0.78
User 29368 AUC after training: 0.77
User 29368 does not improve AUC. Reverting changes.
Training on augumented user 5978 46/50 current_auc = 0.78
User 5978 AUC after training: 0.77
User 5978 does not improve AUC. Reverting changes.
Training on augumented user 16492 47/50 current_auc = 0.78
User 16492 AUC after training: 0.77
User 16492 does not improve AUC. Reverting changes.
Training on augumented user 5036 48/50 current_auc = 0.78
User 5036 AUC after training: 0.78
User 5036 does not improve AUC. Reverting changes.
Training on augumented user 124664 49/50 current_auc = 0.78
User 124664 AUC after training: 0.77
User 124664 does not improve AUC. Reverting changes.
[2024-12-02 17:38:19.055216] start test user 27342 1/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:19.579536] start test user 27342 1/568 recall augumented users by random, augumented_users = [125543, 10010, 83745, 49782, 87178, 133152, 69694, 110694, 93812, 15954, 35801, 93364, 124700, 104442, 59593, 36749, 2763, 52335, 82736, 85718, 64630, 92139, 72867, 24645, 102011, 47844, 130308, 39276, 83841, 33191, 74510, 70920, 70988, 115702, 51895, 99955, 80906, 3439, 131195, 8458, 12299, 128085, 48648, 97220, 20304, 40032, 105586, 56085, 65705, 34624]
[2024-12-02 17:38:19.608789] user = 27342 Cloud 1/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:38:19.621953] user = 27342 Local 1/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:38:19.665384] user = 27342 Local+ 1/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:38:22.117351] user = 27342 MPDA- 1/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 125543 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125543 AUC after training: 0.5
User 125543 does not improve AUC. Reverting changes.
Training on augumented user 10010 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10010 AUC after training: 0.5
User 10010 does not improve AUC. Reverting changes.
Training on augumented user 83745 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83745 AUC after training: 0.5
User 83745 does not improve AUC. Reverting changes.
Training on augumented user 49782 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49782 AUC after training: 0.5
User 49782 does not improve AUC. Reverting changes.
Training on augumented user 87178 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87178 AUC after training: 0.5
User 87178 does not improve AUC. Reverting changes.
Training on augumented user 133152 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133152 AUC after training: 0.5
User 133152 does not improve AUC. Reverting changes.
Training on augumented user 69694 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69694 AUC after training: 0.5
User 69694 does not improve AUC. Reverting changes.
Training on augumented user 110694 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110694 AUC after training: 0.5
User 110694 does not improve AUC. Reverting changes.
Training on augumented user 93812 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93812 AUC after training: 0.5
User 93812 does not improve AUC. Reverting changes.
Training on augumented user 15954 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15954 AUC after training: 0.5
User 15954 does not improve AUC. Reverting changes.
Training on augumented user 35801 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35801 AUC after training: 0.5
User 35801 does not improve AUC. Reverting changes.
Training on augumented user 93364 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93364 AUC after training: 0.5
User 93364 does not improve AUC. Reverting changes.
Training on augumented user 124700 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124700 AUC after training: 0.5
User 124700 does not improve AUC. Reverting changes.
Training on augumented user 104442 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104442 AUC after training: 0.5
User 104442 does not improve AUC. Reverting changes.
Training on augumented user 59593 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59593 AUC after training: 0.5
User 59593 does not improve AUC. Reverting changes.
Training on augumented user 36749 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36749 AUC after training: 0.5
User 36749 does not improve AUC. Reverting changes.
Training on augumented user 2763 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2763 AUC after training: 0.5
User 2763 does not improve AUC. Reverting changes.
Training on augumented user 52335 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52335 AUC after training: 0.5
User 52335 does not improve AUC. Reverting changes.
Training on augumented user 82736 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82736 AUC after training: 0.5
User 82736 does not improve AUC. Reverting changes.
Training on augumented user 85718 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85718 AUC after training: 0.5
User 85718 does not improve AUC. Reverting changes.
Training on augumented user 64630 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64630 AUC after training: 0.5
User 64630 does not improve AUC. Reverting changes.
Training on augumented user 92139 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92139 AUC after training: 0.5
User 92139 does not improve AUC. Reverting changes.
Training on augumented user 72867 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72867 AUC after training: 0.5
User 72867 does not improve AUC. Reverting changes.
Training on augumented user 24645 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24645 AUC after training: 0.5
User 24645 does not improve AUC. Reverting changes.
Training on augumented user 102011 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102011 AUC after training: 0.5
User 102011 does not improve AUC. Reverting changes.
Training on augumented user 47844 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47844 AUC after training: 0.5
User 47844 does not improve AUC. Reverting changes.
Training on augumented user 130308 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130308 AUC after training: 0.5
User 130308 does not improve AUC. Reverting changes.
Training on augumented user 39276 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39276 AUC after training: 0.5
User 39276 does not improve AUC. Reverting changes.
Training on augumented user 83841 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83841 AUC after training: 0.5
User 83841 does not improve AUC. Reverting changes.
Training on augumented user 33191 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33191 AUC after training: 0.5
User 33191 does not improve AUC. Reverting changes.
Training on augumented user 74510 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74510 AUC after training: 0.5
User 74510 does not improve AUC. Reverting changes.
Training on augumented user 70920 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70920 AUC after training: 0.5
User 70920 does not improve AUC. Reverting changes.
Training on augumented user 70988 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70988 AUC after training: 0.5
User 70988 does not improve AUC. Reverting changes.
Training on augumented user 115702 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115702 AUC after training: 0.5
User 115702 does not improve AUC. Reverting changes.
Training on augumented user 51895 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51895 AUC after training: 0.5
User 51895 does not improve AUC. Reverting changes.
Training on augumented user 99955 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99955 AUC after training: 0.5
User 99955 does not improve AUC. Reverting changes.
Training on augumented user 80906 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80906 AUC after training: 0.5
User 80906 does not improve AUC. Reverting changes.
Training on augumented user 3439 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3439 AUC after training: 0.5
User 3439 does not improve AUC. Reverting changes.
Training on augumented user 131195 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131195 AUC after training: 0.5
User 131195 does not improve AUC. Reverting changes.
Training on augumented user 8458 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8458 AUC after training: 0.5
User 8458 does not improve AUC. Reverting changes.
Training on augumented user 12299 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12299 AUC after training: 0.5
User 12299 does not improve AUC. Reverting changes.
Training on augumented user 128085 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128085 AUC after training: 0.5
User 128085 does not improve AUC. Reverting changes.
Training on augumented user 48648 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48648 AUC after training: 0.5
User 48648 does not improve AUC. Reverting changes.
Training on augumented user 97220 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97220 AUC after training: 0.5
User 97220 does not improve AUC. Reverting changes.
Training on augumented user 20304 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20304 AUC after training: 0.5
User 20304 does not improve AUC. Reverting changes.
Training on augumented user 40032 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40032 AUC after training: 0.5
User 40032 does not improve AUC. Reverting changes.
Training on augumented user 105586 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105586 AUC after training: 0.5
User 105586 does not improve AUC. Reverting changes.
Training on augumented user 56085 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56085 AUC after training: 0.5
User 56085 does not improve AUC. Reverting changes.
Training on augumented user 65705 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65705 AUC after training: 0.5
User 65705 does not improve AUC. Reverting changes.
Training on augumented user 34624 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34624 AUC after training: 0.5
User 34624 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:38:51.214899] start test user 27365 2/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:51.764616] start test user 27365 2/568 recall augumented users by random, augumented_users = [123123, 67553, 77674, 85972, 26608, 4576, 40527, 25841, 63552, 127209, 136356, 27716, 130080, 135680, 46629, 137205, 11685, 74295, 12134, 104085, 129575, 137879, 67342, 116496, 10190, 39434, 36711, 2801, 125944, 71834, 22661, 40128, 34610, 133269, 25267, 77732, 25445, 42829, 93419, 40762, 48395, 10750, 57318, 7376, 80662, 22873, 70973, 67197, 60835, 12685]
[2024-12-02 17:38:51.793688] user = 27365 Cloud 2/568
[2024-12-02 17:38:51.848424] user = 27365 Local 2/568
[2024-12-02 17:38:51.942014] user = 27365 Local+ 2/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:54.170660] user = 27365 MPDA- 2/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6008158508158509
Training on augumented user 123123 0/50 current_auc = 0.6008158508158509
User 123123 AUC after training: 0.6025641025641025
User 123123 improves AUC. Keeping the model.
Training on augumented user 67553 1/50 current_auc = 0.6025641025641025
User 67553 AUC after training: 0.6008158508158509
User 67553 does not improve AUC. Reverting changes.
Training on augumented user 77674 2/50 current_auc = 0.6025641025641025
User 77674 AUC after training: 0.6002331002331003
User 77674 does not improve AUC. Reverting changes.
Training on augumented user 85972 3/50 current_auc = 0.6025641025641025
User 85972 AUC after training: 0.6025641025641026
User 85972 improves AUC. Keeping the model.
Training on augumented user 26608 4/50 current_auc = 0.6025641025641026
User 26608 AUC after training: 0.5984848484848485
User 26608 does not improve AUC. Reverting changes.
Training on augumented user 4576 5/50 current_auc = 0.6025641025641026
User 4576 AUC after training: 0.6008158508158509
User 4576 does not improve AUC. Reverting changes.
Training on augumented user 40527 6/50 current_auc = 0.6025641025641026
User 40527 AUC after training: 0.6025641025641026
User 40527 does not improve AUC. Reverting changes.
Training on augumented user 25841 7/50 current_auc = 0.6025641025641026
User 25841 AUC after training: 0.6008158508158509
User 25841 does not improve AUC. Reverting changes.
Training on augumented user 63552 8/50 current_auc = 0.6025641025641026
User 63552 AUC after training: 0.5990675990675991
User 63552 does not improve AUC. Reverting changes.
Training on augumented user 127209 9/50 current_auc = 0.6025641025641026
User 127209 AUC after training: 0.6013986013986014
User 127209 does not improve AUC. Reverting changes.
Training on augumented user 136356 10/50 current_auc = 0.6025641025641026
User 136356 AUC after training: 0.5932400932400933
User 136356 does not improve AUC. Reverting changes.
Training on augumented user 27716 11/50 current_auc = 0.6025641025641026
User 27716 AUC after training: 0.6019813519813519
User 27716 does not improve AUC. Reverting changes.
Training on augumented user 130080 12/50 current_auc = 0.6025641025641026
User 130080 AUC after training: 0.5996503496503497
User 130080 does not improve AUC. Reverting changes.
Training on augumented user 135680 13/50 current_auc = 0.6025641025641026
User 135680 AUC after training: 0.6002331002331003
User 135680 does not improve AUC. Reverting changes.
Training on augumented user 46629 14/50 current_auc = 0.6025641025641026
User 46629 AUC after training: 0.6002331002331003
User 46629 does not improve AUC. Reverting changes.
Training on augumented user 137205 15/50 current_auc = 0.6025641025641026
User 137205 AUC after training: 0.6031468531468532
User 137205 improves AUC. Keeping the model.
Training on augumented user 11685 16/50 current_auc = 0.6031468531468532
User 11685 AUC after training: 0.6008158508158508
User 11685 does not improve AUC. Reverting changes.
Training on augumented user 74295 17/50 current_auc = 0.6031468531468532
User 74295 AUC after training: 0.6002331002331003
User 74295 does not improve AUC. Reverting changes.
Training on augumented user 12134 18/50 current_auc = 0.6031468531468532
User 12134 AUC after training: 0.6031468531468531
User 12134 does not improve AUC. Reverting changes.
Training on augumented user 104085 19/50 current_auc = 0.6031468531468532
User 104085 AUC after training: 0.6025641025641026
User 104085 does not improve AUC. Reverting changes.
Training on augumented user 129575 20/50 current_auc = 0.6031468531468532
User 129575 AUC after training: 0.6025641025641026
User 129575 does not improve AUC. Reverting changes.
Training on augumented user 137879 21/50 current_auc = 0.6031468531468532
User 137879 AUC after training: 0.5961538461538461
User 137879 does not improve AUC. Reverting changes.
Training on augumented user 67342 22/50 current_auc = 0.6031468531468532
User 67342 AUC after training: 0.6025641025641026
User 67342 does not improve AUC. Reverting changes.
Training on augumented user 116496 23/50 current_auc = 0.6031468531468532
User 116496 AUC after training: 0.6013986013986015
User 116496 does not improve AUC. Reverting changes.
Training on augumented user 10190 24/50 current_auc = 0.6031468531468532
User 10190 AUC after training: 0.6031468531468531
User 10190 does not improve AUC. Reverting changes.
Training on augumented user 39434 25/50 current_auc = 0.6031468531468532
User 39434 AUC after training: 0.594988344988345
User 39434 does not improve AUC. Reverting changes.
Training on augumented user 36711 26/50 current_auc = 0.6031468531468532
User 36711 AUC after training: 0.601981351981352
User 36711 does not improve AUC. Reverting changes.
Training on augumented user 2801 27/50 current_auc = 0.6031468531468532
User 2801 AUC after training: 0.6031468531468532
User 2801 does not improve AUC. Reverting changes.
Training on augumented user 125944 28/50 current_auc = 0.6031468531468532
User 125944 AUC after training: 0.6037296037296037
User 125944 improves AUC. Keeping the model.
Training on augumented user 71834 29/50 current_auc = 0.6037296037296037
User 71834 AUC after training: 0.6037296037296037
User 71834 does not improve AUC. Reverting changes.
Training on augumented user 22661 30/50 current_auc = 0.6037296037296037
User 22661 AUC after training: 0.6031468531468531
User 22661 does not improve AUC. Reverting changes.
Training on augumented user 40128 31/50 current_auc = 0.6037296037296037
User 40128 AUC after training: 0.6008158508158509
User 40128 does not improve AUC. Reverting changes.
Training on augumented user 34610 32/50 current_auc = 0.6037296037296037
User 34610 AUC after training: 0.6060606060606061
User 34610 improves AUC. Keeping the model.
Training on augumented user 133269 33/50 current_auc = 0.6060606060606061
User 133269 AUC after training: 0.6060606060606061
User 133269 does not improve AUC. Reverting changes.
Training on augumented user 25267 34/50 current_auc = 0.6060606060606061
User 25267 AUC after training: 0.6031468531468531
User 25267 does not improve AUC. Reverting changes.
Training on augumented user 77732 35/50 current_auc = 0.6060606060606061
User 77732 AUC after training: 0.6013986013986014
User 77732 does not improve AUC. Reverting changes.
Training on augumented user 25445 36/50 current_auc = 0.6060606060606061
User 25445 AUC after training: 0.6060606060606061
User 25445 does not improve AUC. Reverting changes.
Training on augumented user 42829 37/50 current_auc = 0.6060606060606061
User 42829 AUC after training: 0.6060606060606061
User 42829 does not improve AUC. Reverting changes.
Training on augumented user 93419 38/50 current_auc = 0.6060606060606061
User 93419 AUC after training: 0.6025641025641026
User 93419 does not improve AUC. Reverting changes.
Training on augumented user 40762 39/50 current_auc = 0.6060606060606061
User 40762 AUC after training: 0.6054778554778555
User 40762 does not improve AUC. Reverting changes.
Training on augumented user 48395 40/50 current_auc = 0.6060606060606061
User 48395 AUC after training: 0.5967365967365967
User 48395 does not improve AUC. Reverting changes.
Training on augumented user 10750 41/50 current_auc = 0.6060606060606061
User 10750 AUC after training: 0.6066433566433567
User 10750 improves AUC. Keeping the model.
Training on augumented user 57318 42/50 current_auc = 0.6066433566433567
User 57318 AUC after training: 0.6060606060606061
User 57318 does not improve AUC. Reverting changes.
Training on augumented user 7376 43/50 current_auc = 0.6066433566433567
User 7376 AUC after training: 0.6060606060606061
User 7376 does not improve AUC. Reverting changes.
Training on augumented user 80662 44/50 current_auc = 0.6066433566433567
User 80662 AUC after training: 0.5979020979020979
User 80662 does not improve AUC. Reverting changes.
Training on augumented user 22873 45/50 current_auc = 0.6066433566433567
User 22873 AUC after training: 0.6054778554778555
User 22873 does not improve AUC. Reverting changes.
Training on augumented user 70973 46/50 current_auc = 0.6066433566433567
User 70973 AUC after training: 0.6025641025641025
User 70973 does not improve AUC. Reverting changes.
Training on augumented user 67197 47/50 current_auc = 0.6066433566433567
User 67197 AUC after training: 0.606060606060606
User 67197 does not improve AUC. Reverting changes.
Training on augumented user 60835 48/50 current_auc = 0.6066433566433567
User 60835 AUC after training: 0.6054778554778555
User 60835 does not improve AUC. Reverting changes.
Training on augumented user 12685 49/50 current_auc = 0.6066433566433567
User 12685 AUC after training: 0.6054778554778555
User 12685 does not improve AUC. Reverting changes.
[2024-12-02 17:39:28.859689] start test user 27395 3/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:29.269681] start test user 27395 3/568 recall augumented users by random, augumented_users = [82790, 36688, 110809, 73956, 53636, 8869, 118635, 37274, 71348, 23119, 114550, 11445, 126050, 111484, 58500, 72775, 67196, 77047, 31125, 121123, 27644, 94097, 124667, 58314, 99706, 126440, 45885, 8119, 48303, 57123, 48808, 63420, 86765, 44657, 46899, 21083, 129007, 110136, 136186, 20263, 7346, 28858, 78461, 21012, 102092, 127310, 77299, 136623, 126578, 91733]
[2024-12-02 17:39:29.284776] user = 27395 Cloud 3/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:39:29.293462] user = 27395 Local 3/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:39:29.353740] user = 27395 Local+ 3/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:39:31.343526] user = 27395 MPDA- 3/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 82790 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82790 AUC after training: 0.5
User 82790 does not improve AUC. Reverting changes.
Training on augumented user 36688 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36688 AUC after training: 0.5
User 36688 does not improve AUC. Reverting changes.
Training on augumented user 110809 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110809 AUC after training: 0.5
User 110809 does not improve AUC. Reverting changes.
Training on augumented user 73956 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73956 AUC after training: 0.5
User 73956 does not improve AUC. Reverting changes.
Training on augumented user 53636 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53636 AUC after training: 0.5
User 53636 does not improve AUC. Reverting changes.
Training on augumented user 8869 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8869 AUC after training: 0.5
User 8869 does not improve AUC. Reverting changes.
Training on augumented user 118635 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118635 AUC after training: 0.5
User 118635 does not improve AUC. Reverting changes.
Training on augumented user 37274 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37274 AUC after training: 0.5
User 37274 does not improve AUC. Reverting changes.
Training on augumented user 71348 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71348 AUC after training: 0.5
User 71348 does not improve AUC. Reverting changes.
Training on augumented user 23119 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23119 AUC after training: 0.5
User 23119 does not improve AUC. Reverting changes.
Training on augumented user 114550 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114550 AUC after training: 0.5
User 114550 does not improve AUC. Reverting changes.
Training on augumented user 11445 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11445 AUC after training: 0.5
User 11445 does not improve AUC. Reverting changes.
Training on augumented user 126050 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126050 AUC after training: 0.5
User 126050 does not improve AUC. Reverting changes.
Training on augumented user 111484 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111484 AUC after training: 0.5
User 111484 does not improve AUC. Reverting changes.
Training on augumented user 58500 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58500 AUC after training: 0.5
User 58500 does not improve AUC. Reverting changes.
Training on augumented user 72775 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72775 AUC after training: 0.5
User 72775 does not improve AUC. Reverting changes.
Training on augumented user 67196 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67196 AUC after training: 0.5
User 67196 does not improve AUC. Reverting changes.
Training on augumented user 77047 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77047 AUC after training: 0.5
User 77047 does not improve AUC. Reverting changes.
Training on augumented user 31125 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31125 AUC after training: 0.5
User 31125 does not improve AUC. Reverting changes.
Training on augumented user 121123 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121123 AUC after training: 0.5
User 121123 does not improve AUC. Reverting changes.
Training on augumented user 27644 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27644 AUC after training: 0.5
User 27644 does not improve AUC. Reverting changes.
Training on augumented user 94097 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94097 AUC after training: 0.5
User 94097 does not improve AUC. Reverting changes.
Training on augumented user 124667 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124667 AUC after training: 0.5
User 124667 does not improve AUC. Reverting changes.
Training on augumented user 58314 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58314 AUC after training: 0.5
User 58314 does not improve AUC. Reverting changes.
Training on augumented user 99706 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99706 AUC after training: 0.5
User 99706 does not improve AUC. Reverting changes.
Training on augumented user 126440 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126440 AUC after training: 0.5
User 126440 does not improve AUC. Reverting changes.
Training on augumented user 45885 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45885 AUC after training: 0.5
User 45885 does not improve AUC. Reverting changes.
Training on augumented user 8119 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8119 AUC after training: 0.5
User 8119 does not improve AUC. Reverting changes.
Training on augumented user 48303 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48303 AUC after training: 0.5
User 48303 does not improve AUC. Reverting changes.
Training on augumented user 57123 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57123 AUC after training: 0.5
User 57123 does not improve AUC. Reverting changes.
Training on augumented user 48808 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48808 AUC after training: 0.5
User 48808 does not improve AUC. Reverting changes.
Training on augumented user 63420 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63420 AUC after training: 0.5
User 63420 does not improve AUC. Reverting changes.
Training on augumented user 86765 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86765 AUC after training: 0.5
User 86765 does not improve AUC. Reverting changes.
Training on augumented user 44657 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44657 AUC after training: 0.5
User 44657 does not improve AUC. Reverting changes.
Training on augumented user 46899 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46899 AUC after training: 0.5
User 46899 does not improve AUC. Reverting changes.
Training on augumented user 21083 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21083 AUC after training: 0.5
User 21083 does not improve AUC. Reverting changes.
Training on augumented user 129007 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129007 AUC after training: 0.5
User 129007 does not improve AUC. Reverting changes.
Training on augumented user 110136 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110136 AUC after training: 0.5
User 110136 does not improve AUC. Reverting changes.
Training on augumented user 136186 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136186 AUC after training: 0.5
User 136186 does not improve AUC. Reverting changes.
Training on augumented user 20263 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20263 AUC after training: 0.5
User 20263 does not improve AUC. Reverting changes.
Training on augumented user 7346 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7346 AUC after training: 0.5
User 7346 does not improve AUC. Reverting changes.
Training on augumented user 28858 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28858 AUC after training: 0.5
User 28858 does not improve AUC. Reverting changes.
Training on augumented user 78461 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78461 AUC after training: 0.5
User 78461 does not improve AUC. Reverting changes.
Training on augumented user 21012 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21012 AUC after training: 0.5
User 21012 does not improve AUC. Reverting changes.
Training on augumented user 102092 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102092 AUC after training: 0.5
User 102092 does not improve AUC. Reverting changes.
Training on augumented user 127310 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127310 AUC after training: 0.5
User 127310 does not improve AUC. Reverting changes.
Training on augumented user 77299 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77299 AUC after training: 0.5
User 77299 does not improve AUC. Reverting changes.
Training on augumented user 136623 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136623 AUC after training: 0.5
User 136623 does not improve AUC. Reverting changes.
Training on augumented user 126578 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126578 AUC after training: 0.5
User 126578 does not improve AUC. Reverting changes.
Training on augumented user 91733 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91733 AUC after training: 0.5
User 91733 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:39:59.745819] start test user 27418 4/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:00.171584] start test user 27418 4/568 recall augumented users by random, augumented_users = [12545, 87473, 89002, 64963, 94513, 107395, 131157, 89366, 1026, 89986, 41382, 123069, 13831, 118041, 105249, 98075, 57673, 28829, 4691, 100542, 72117, 125882, 30095, 31736, 39503, 78618, 129228, 117848, 27208, 75167, 4014, 24714, 89272, 118119, 118432, 3893, 98092, 91788, 52254, 11139, 70139, 101250, 118360, 51853, 76509, 72042, 81482, 103320, 7759, 24975]
[2024-12-02 17:40:00.186658] user = 27418 Cloud 4/568
[2024-12-02 17:40:00.197778] user = 27418 Local 4/568
[2024-12-02 17:40:00.255632] user = 27418 Local+ 4/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:02.108076] user = 27418 MPDA- 4/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7628968253968254
Training on augumented user 12545 0/50 current_auc = 0.7628968253968254
User 12545 AUC after training: 0.7599206349206349
User 12545 does not improve AUC. Reverting changes.
Training on augumented user 87473 1/50 current_auc = 0.7628968253968254
User 87473 AUC after training: 0.7628968253968254
User 87473 does not improve AUC. Reverting changes.
Training on augumented user 89002 2/50 current_auc = 0.7628968253968254
User 89002 AUC after training: 0.7628968253968254
User 89002 does not improve AUC. Reverting changes.
Training on augumented user 64963 3/50 current_auc = 0.7628968253968254
User 64963 AUC after training: 0.7628968253968254
User 64963 does not improve AUC. Reverting changes.
Training on augumented user 94513 4/50 current_auc = 0.7628968253968254
User 94513 AUC after training: 0.7628968253968254
User 94513 does not improve AUC. Reverting changes.
Training on augumented user 107395 5/50 current_auc = 0.7628968253968254
User 107395 AUC after training: 0.7599206349206349
User 107395 does not improve AUC. Reverting changes.
Training on augumented user 131157 6/50 current_auc = 0.7628968253968254
User 131157 AUC after training: 0.7599206349206349
User 131157 does not improve AUC. Reverting changes.
Training on augumented user 89366 7/50 current_auc = 0.7628968253968254
User 89366 AUC after training: 0.7638888888888888
User 89366 improves AUC. Keeping the model.
Training on augumented user 1026 8/50 current_auc = 0.7638888888888888
User 1026 AUC after training: 0.7628968253968254
User 1026 does not improve AUC. Reverting changes.
Training on augumented user 89986 9/50 current_auc = 0.7638888888888888
User 89986 AUC after training: 0.7648809523809523
User 89986 improves AUC. Keeping the model.
Training on augumented user 41382 10/50 current_auc = 0.7648809523809523
User 41382 AUC after training: 0.7619047619047619
User 41382 does not improve AUC. Reverting changes.
Training on augumented user 123069 11/50 current_auc = 0.7648809523809523
User 123069 AUC after training: 0.7648809523809523
User 123069 does not improve AUC. Reverting changes.
Training on augumented user 13831 12/50 current_auc = 0.7648809523809523
User 13831 AUC after training: 0.7668650793650793
User 13831 improves AUC. Keeping the model.
Training on augumented user 118041 13/50 current_auc = 0.7668650793650793
User 118041 AUC after training: 0.7599206349206349
User 118041 does not improve AUC. Reverting changes.
Training on augumented user 105249 14/50 current_auc = 0.7668650793650793
User 105249 AUC after training: 0.7609126984126984
User 105249 does not improve AUC. Reverting changes.
Training on augumented user 98075 15/50 current_auc = 0.7668650793650793
User 98075 AUC after training: 0.7619047619047619
User 98075 does not improve AUC. Reverting changes.
Training on augumented user 57673 16/50 current_auc = 0.7668650793650793
User 57673 AUC after training: 0.7648809523809523
User 57673 does not improve AUC. Reverting changes.
Training on augumented user 28829 17/50 current_auc = 0.7668650793650793
User 28829 AUC after training: 0.7658730158730158
User 28829 does not improve AUC. Reverting changes.
Training on augumented user 4691 18/50 current_auc = 0.7668650793650793
User 4691 AUC after training: 0.7658730158730158
User 4691 does not improve AUC. Reverting changes.
Training on augumented user 100542 19/50 current_auc = 0.7668650793650793
User 100542 AUC after training: 0.7609126984126984
User 100542 does not improve AUC. Reverting changes.
Training on augumented user 72117 20/50 current_auc = 0.7668650793650793
User 72117 AUC after training: 0.7648809523809523
User 72117 does not improve AUC. Reverting changes.
Training on augumented user 125882 21/50 current_auc = 0.7668650793650793
User 125882 AUC after training: 0.7668650793650793
User 125882 does not improve AUC. Reverting changes.
Training on augumented user 30095 22/50 current_auc = 0.7668650793650793
User 30095 AUC after training: 0.7668650793650793
User 30095 does not improve AUC. Reverting changes.
Training on augumented user 31736 23/50 current_auc = 0.7668650793650793
User 31736 AUC after training: 0.7678571428571428
User 31736 improves AUC. Keeping the model.
Training on augumented user 39503 24/50 current_auc = 0.7678571428571428
User 39503 AUC after training: 0.7688492063492063
User 39503 improves AUC. Keeping the model.
Training on augumented user 78618 25/50 current_auc = 0.7688492063492063
User 78618 AUC after training: 0.7678571428571428
User 78618 does not improve AUC. Reverting changes.
Training on augumented user 129228 26/50 current_auc = 0.7688492063492063
User 129228 AUC after training: 0.7678571428571428
User 129228 does not improve AUC. Reverting changes.
Training on augumented user 117848 27/50 current_auc = 0.7688492063492063
User 117848 AUC after training: 0.7678571428571428
User 117848 does not improve AUC. Reverting changes.
Training on augumented user 27208 28/50 current_auc = 0.7688492063492063
User 27208 AUC after training: 0.7678571428571428
User 27208 does not improve AUC. Reverting changes.
Training on augumented user 75167 29/50 current_auc = 0.7688492063492063
User 75167 AUC after training: 0.7678571428571428
User 75167 does not improve AUC. Reverting changes.
Training on augumented user 4014 30/50 current_auc = 0.7688492063492063
User 4014 AUC after training: 0.7658730158730158
User 4014 does not improve AUC. Reverting changes.
Training on augumented user 24714 31/50 current_auc = 0.7688492063492063
User 24714 AUC after training: 0.7668650793650793
User 24714 does not improve AUC. Reverting changes.
Training on augumented user 89272 32/50 current_auc = 0.7688492063492063
User 89272 AUC after training: 0.7688492063492063
User 89272 does not improve AUC. Reverting changes.
Training on augumented user 118119 33/50 current_auc = 0.7688492063492063
User 118119 AUC after training: 0.7678571428571428
User 118119 does not improve AUC. Reverting changes.
Training on augumented user 118432 34/50 current_auc = 0.7688492063492063
User 118432 AUC after training: 0.7678571428571428
User 118432 does not improve AUC. Reverting changes.
Training on augumented user 3893 35/50 current_auc = 0.7688492063492063
User 3893 AUC after training: 0.7678571428571428
User 3893 does not improve AUC. Reverting changes.
Training on augumented user 98092 36/50 current_auc = 0.7688492063492063
User 98092 AUC after training: 0.7678571428571428
User 98092 does not improve AUC. Reverting changes.
Training on augumented user 91788 37/50 current_auc = 0.7688492063492063
User 91788 AUC after training: 0.7678571428571428
User 91788 does not improve AUC. Reverting changes.
Training on augumented user 52254 38/50 current_auc = 0.7688492063492063
User 52254 AUC after training: 0.7678571428571428
User 52254 does not improve AUC. Reverting changes.
Training on augumented user 11139 39/50 current_auc = 0.7688492063492063
User 11139 AUC after training: 0.7658730158730158
User 11139 does not improve AUC. Reverting changes.
Training on augumented user 70139 40/50 current_auc = 0.7688492063492063
User 70139 AUC after training: 0.7698412698412698
User 70139 improves AUC. Keeping the model.
Training on augumented user 101250 41/50 current_auc = 0.7698412698412698
User 101250 AUC after training: 0.7698412698412698
User 101250 does not improve AUC. Reverting changes.
Training on augumented user 118360 42/50 current_auc = 0.7698412698412698
User 118360 AUC after training: 0.7678571428571428
User 118360 does not improve AUC. Reverting changes.
Training on augumented user 51853 43/50 current_auc = 0.7698412698412698
User 51853 AUC after training: 0.7668650793650793
User 51853 does not improve AUC. Reverting changes.
Training on augumented user 76509 44/50 current_auc = 0.7698412698412698
User 76509 AUC after training: 0.7619047619047619
User 76509 does not improve AUC. Reverting changes.
Training on augumented user 72042 45/50 current_auc = 0.7698412698412698
User 72042 AUC after training: 0.7648809523809523
User 72042 does not improve AUC. Reverting changes.
Training on augumented user 81482 46/50 current_auc = 0.7698412698412698
User 81482 AUC after training: 0.7658730158730158
User 81482 does not improve AUC. Reverting changes.
Training on augumented user 103320 47/50 current_auc = 0.7698412698412698
User 103320 AUC after training: 0.7688492063492063
User 103320 does not improve AUC. Reverting changes.
Training on augumented user 7759 48/50 current_auc = 0.7698412698412698
User 7759 AUC after training: 0.7678571428571428
User 7759 does not improve AUC. Reverting changes.
Training on augumented user 24975 49/50 current_auc = 0.7698412698412698
User 24975 AUC after training: 0.7698412698412698
User 24975 does not improve AUC. Reverting changes.
[2024-12-02 17:40:36.555039] start test user 27449 5/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:36.983674] start test user 27449 5/568 recall augumented users by random, augumented_users = [95809, 103000, 21394, 11338, 87211, 26070, 44713, 45761, 39305, 15631, 97022, 33078, 10953, 324, 137052, 56821, 133362, 133520, 122531, 89682, 118360, 103121, 47930, 37357, 4243, 33977, 120169, 111920, 5464, 101777, 59715, 121927, 30022, 37433, 71004, 137271, 69710, 60472, 92862, 115907, 12675, 130648, 117477, 102037, 121734, 106109, 9381, 37668, 98365, 71688]
[2024-12-02 17:40:36.998496] user = 27449 Cloud 5/568
[2024-12-02 17:40:37.017040] user = 27449 Local 5/568
[2024-12-02 17:40:37.044000] user = 27449 Local+ 5/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:39.332638] user = 27449 MPDA- 5/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6236601307189542
Training on augumented user 95809 0/50 current_auc = 0.6236601307189542
User 95809 AUC after training: 0.6236601307189543
User 95809 improves AUC. Keeping the model.
Training on augumented user 103000 1/50 current_auc = 0.6236601307189543
User 103000 AUC after training: 0.6247058823529412
User 103000 improves AUC. Keeping the model.
Training on augumented user 21394 2/50 current_auc = 0.6247058823529412
User 21394 AUC after training: 0.6245751633986929
User 21394 does not improve AUC. Reverting changes.
Training on augumented user 11338 3/50 current_auc = 0.6247058823529412
User 11338 AUC after training: 0.6244444444444445
User 11338 does not improve AUC. Reverting changes.
Training on augumented user 87211 4/50 current_auc = 0.6247058823529412
User 87211 AUC after training: 0.6236601307189542
User 87211 does not improve AUC. Reverting changes.
Training on augumented user 26070 5/50 current_auc = 0.6247058823529412
User 26070 AUC after training: 0.6243137254901961
User 26070 does not improve AUC. Reverting changes.
Training on augumented user 44713 6/50 current_auc = 0.6247058823529412
User 44713 AUC after training: 0.6231372549019608
User 44713 does not improve AUC. Reverting changes.
Training on augumented user 45761 7/50 current_auc = 0.6247058823529412
User 45761 AUC after training: 0.624313725490196
User 45761 does not improve AUC. Reverting changes.
Training on augumented user 39305 8/50 current_auc = 0.6247058823529412
User 39305 AUC after training: 0.6247058823529411
User 39305 does not improve AUC. Reverting changes.
Training on augumented user 15631 9/50 current_auc = 0.6247058823529412
User 15631 AUC after training: 0.6250980392156863
User 15631 improves AUC. Keeping the model.
Training on augumented user 97022 10/50 current_auc = 0.6250980392156863
User 97022 AUC after training: 0.6243137254901961
User 97022 does not improve AUC. Reverting changes.
Training on augumented user 33078 11/50 current_auc = 0.6250980392156863
User 33078 AUC after training: 0.6249673202614379
User 33078 does not improve AUC. Reverting changes.
Training on augumented user 10953 12/50 current_auc = 0.6250980392156863
User 10953 AUC after training: 0.624313725490196
User 10953 does not improve AUC. Reverting changes.
Training on augumented user 324 13/50 current_auc = 0.6250980392156863
User 324 AUC after training: 0.6247058823529412
User 324 does not improve AUC. Reverting changes.
Training on augumented user 137052 14/50 current_auc = 0.6250980392156863
User 137052 AUC after training: 0.6244444444444444
User 137052 does not improve AUC. Reverting changes.
Training on augumented user 56821 15/50 current_auc = 0.6250980392156863
User 56821 AUC after training: 0.6244444444444444
User 56821 does not improve AUC. Reverting changes.
Training on augumented user 133362 16/50 current_auc = 0.6250980392156863
User 133362 AUC after training: 0.6231372549019608
User 133362 does not improve AUC. Reverting changes.
Training on augumented user 133520 17/50 current_auc = 0.6250980392156863
User 133520 AUC after training: 0.6254901960784315
User 133520 improves AUC. Keeping the model.
Training on augumented user 122531 18/50 current_auc = 0.6254901960784315
User 122531 AUC after training: 0.625751633986928
User 122531 improves AUC. Keeping the model.
Training on augumented user 89682 19/50 current_auc = 0.625751633986928
User 89682 AUC after training: 0.6244444444444445
User 89682 does not improve AUC. Reverting changes.
Training on augumented user 118360 20/50 current_auc = 0.625751633986928
User 118360 AUC after training: 0.6250980392156863
User 118360 does not improve AUC. Reverting changes.
Training on augumented user 103121 21/50 current_auc = 0.625751633986928
User 103121 AUC after training: 0.6256209150326797
User 103121 does not improve AUC. Reverting changes.
Training on augumented user 47930 22/50 current_auc = 0.625751633986928
User 47930 AUC after training: 0.6260130718954248
User 47930 improves AUC. Keeping the model.
Training on augumented user 37357 23/50 current_auc = 0.6260130718954248
User 37357 AUC after training: 0.6258823529411764
User 37357 does not improve AUC. Reverting changes.
Training on augumented user 4243 24/50 current_auc = 0.6260130718954248
User 4243 AUC after training: 0.624313725490196
User 4243 does not improve AUC. Reverting changes.
Training on augumented user 33977 25/50 current_auc = 0.6260130718954248
User 33977 AUC after training: 0.6256209150326797
User 33977 does not improve AUC. Reverting changes.
Training on augumented user 120169 26/50 current_auc = 0.6260130718954248
User 120169 AUC after training: 0.6250980392156863
User 120169 does not improve AUC. Reverting changes.
Training on augumented user 111920 27/50 current_auc = 0.6260130718954248
User 111920 AUC after training: 0.6260130718954249
User 111920 improves AUC. Keeping the model.
Training on augumented user 5464 28/50 current_auc = 0.6260130718954249
User 5464 AUC after training: 0.6262745098039215
User 5464 improves AUC. Keeping the model.
Training on augumented user 101777 29/50 current_auc = 0.6262745098039215
User 101777 AUC after training: 0.62640522875817
User 101777 improves AUC. Keeping the model.
Training on augumented user 59715 30/50 current_auc = 0.62640522875817
User 59715 AUC after training: 0.6270588235294118
User 59715 improves AUC. Keeping the model.
Training on augumented user 121927 31/50 current_auc = 0.6270588235294118
User 121927 AUC after training: 0.6271895424836601
User 121927 improves AUC. Keeping the model.
Training on augumented user 30022 32/50 current_auc = 0.6271895424836601
User 30022 AUC after training: 0.6270588235294117
User 30022 does not improve AUC. Reverting changes.
Training on augumented user 37433 33/50 current_auc = 0.6271895424836601
User 37433 AUC after training: 0.62640522875817
User 37433 does not improve AUC. Reverting changes.
Training on augumented user 71004 34/50 current_auc = 0.6271895424836601
User 71004 AUC after training: 0.6275816993464052
User 71004 improves AUC. Keeping the model.
Training on augumented user 137271 35/50 current_auc = 0.6275816993464052
User 137271 AUC after training: 0.6279738562091504
User 137271 improves AUC. Keeping the model.
Training on augumented user 69710 36/50 current_auc = 0.6279738562091504
User 69710 AUC after training: 0.6275816993464053
User 69710 does not improve AUC. Reverting changes.
Training on augumented user 60472 37/50 current_auc = 0.6279738562091504
User 60472 AUC after training: 0.6281045751633987
User 60472 improves AUC. Keeping the model.
Training on augumented user 92862 38/50 current_auc = 0.6281045751633987
User 92862 AUC after training: 0.6278431372549019
User 92862 does not improve AUC. Reverting changes.
Training on augumented user 115907 39/50 current_auc = 0.6281045751633987
User 115907 AUC after training: 0.6279738562091504
User 115907 does not improve AUC. Reverting changes.
Training on augumented user 12675 40/50 current_auc = 0.6281045751633987
User 12675 AUC after training: 0.6283660130718953
User 12675 improves AUC. Keeping the model.
Training on augumented user 130648 41/50 current_auc = 0.6283660130718953
User 130648 AUC after training: 0.6264052287581698
User 130648 does not improve AUC. Reverting changes.
Training on augumented user 117477 42/50 current_auc = 0.6283660130718953
User 117477 AUC after training: 0.629281045751634
User 117477 improves AUC. Keeping the model.
Training on augumented user 102037 43/50 current_auc = 0.629281045751634
User 102037 AUC after training: 0.6271895424836601
User 102037 does not improve AUC. Reverting changes.
Training on augumented user 121734 44/50 current_auc = 0.629281045751634
User 121734 AUC after training: 0.6281045751633987
User 121734 does not improve AUC. Reverting changes.
Training on augumented user 106109 45/50 current_auc = 0.629281045751634
User 106109 AUC after training: 0.629281045751634
User 106109 does not improve AUC. Reverting changes.
Training on augumented user 9381 46/50 current_auc = 0.629281045751634
User 9381 AUC after training: 0.628235294117647
User 9381 does not improve AUC. Reverting changes.
Training on augumented user 37668 47/50 current_auc = 0.629281045751634
User 37668 AUC after training: 0.6284967320261439
User 37668 does not improve AUC. Reverting changes.
Training on augumented user 98365 48/50 current_auc = 0.629281045751634
User 98365 AUC after training: 0.628235294117647
User 98365 does not improve AUC. Reverting changes.
Training on augumented user 71688 49/50 current_auc = 0.629281045751634
User 71688 AUC after training: 0.6279738562091504
User 71688 does not improve AUC. Reverting changes.
[2024-12-02 17:41:08.385116] start test user 27456 6/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:08.823204] start test user 27456 6/568 recall augumented users by random, augumented_users = [4369, 134928, 27837, 47061, 48594, 76858, 129548, 25040, 65156, 115917, 126735, 113883, 109314, 64073, 120233, 113171, 73535, 96722, 56579, 120030, 31702, 21750, 51381, 94060, 107609, 76784, 15852, 77710, 108541, 35112, 71087, 65416, 28078, 74278, 4828, 43164, 114186, 54108, 20045, 8703, 37821, 59343, 26624, 63834, 53903, 38578, 40687, 3189, 83159, 30843]
[2024-12-02 17:41:08.837496] user = 27456 Cloud 6/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:41:08.843566] user = 27456 Local 6/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:41:08.873690] user = 27456 Local+ 6/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:41:11.477115] user = 27456 MPDA- 6/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 4369 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4369 AUC after training: 0.5
User 4369 does not improve AUC. Reverting changes.
Training on augumented user 134928 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134928 AUC after training: 0.5
User 134928 does not improve AUC. Reverting changes.
Training on augumented user 27837 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27837 AUC after training: 0.5
User 27837 does not improve AUC. Reverting changes.
Training on augumented user 47061 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47061 AUC after training: 0.5
User 47061 does not improve AUC. Reverting changes.
Training on augumented user 48594 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48594 AUC after training: 0.5
User 48594 does not improve AUC. Reverting changes.
Training on augumented user 76858 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76858 AUC after training: 0.5
User 76858 does not improve AUC. Reverting changes.
Training on augumented user 129548 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129548 AUC after training: 0.5
User 129548 does not improve AUC. Reverting changes.
Training on augumented user 25040 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25040 AUC after training: 0.5
User 25040 does not improve AUC. Reverting changes.
Training on augumented user 65156 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65156 AUC after training: 0.5
User 65156 does not improve AUC. Reverting changes.
Training on augumented user 115917 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115917 AUC after training: 0.5
User 115917 does not improve AUC. Reverting changes.
Training on augumented user 126735 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126735 AUC after training: 0.5
User 126735 does not improve AUC. Reverting changes.
Training on augumented user 113883 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113883 AUC after training: 0.5
User 113883 does not improve AUC. Reverting changes.
Training on augumented user 109314 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109314 AUC after training: 0.5
User 109314 does not improve AUC. Reverting changes.
Training on augumented user 64073 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64073 AUC after training: 0.5
User 64073 does not improve AUC. Reverting changes.
Training on augumented user 120233 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120233 AUC after training: 0.5
User 120233 does not improve AUC. Reverting changes.
Training on augumented user 113171 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113171 AUC after training: 0.5
User 113171 does not improve AUC. Reverting changes.
Training on augumented user 73535 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73535 AUC after training: 0.5
User 73535 does not improve AUC. Reverting changes.
Training on augumented user 96722 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96722 AUC after training: 0.5
User 96722 does not improve AUC. Reverting changes.
Training on augumented user 56579 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56579 AUC after training: 0.5
User 56579 does not improve AUC. Reverting changes.
Training on augumented user 120030 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120030 AUC after training: 0.5
User 120030 does not improve AUC. Reverting changes.
Training on augumented user 31702 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31702 AUC after training: 0.5
User 31702 does not improve AUC. Reverting changes.
Training on augumented user 21750 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21750 AUC after training: 0.5
User 21750 does not improve AUC. Reverting changes.
Training on augumented user 51381 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51381 AUC after training: 0.5
User 51381 does not improve AUC. Reverting changes.
Training on augumented user 94060 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94060 AUC after training: 0.5
User 94060 does not improve AUC. Reverting changes.
Training on augumented user 107609 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107609 AUC after training: 0.5
User 107609 does not improve AUC. Reverting changes.
Training on augumented user 76784 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76784 AUC after training: 0.5
User 76784 does not improve AUC. Reverting changes.
Training on augumented user 15852 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15852 AUC after training: 0.5
User 15852 does not improve AUC. Reverting changes.
Training on augumented user 77710 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77710 AUC after training: 0.5
User 77710 does not improve AUC. Reverting changes.
Training on augumented user 108541 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108541 AUC after training: 0.5
User 108541 does not improve AUC. Reverting changes.
Training on augumented user 35112 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35112 AUC after training: 0.5
User 35112 does not improve AUC. Reverting changes.
Training on augumented user 71087 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71087 AUC after training: 0.5
User 71087 does not improve AUC. Reverting changes.
Training on augumented user 65416 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65416 AUC after training: 0.5
User 65416 does not improve AUC. Reverting changes.
Training on augumented user 28078 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28078 AUC after training: 0.5
User 28078 does not improve AUC. Reverting changes.
Training on augumented user 74278 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74278 AUC after training: 0.5
User 74278 does not improve AUC. Reverting changes.
Training on augumented user 4828 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4828 AUC after training: 0.5
User 4828 does not improve AUC. Reverting changes.
Training on augumented user 43164 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43164 AUC after training: 0.5
User 43164 does not improve AUC. Reverting changes.
Training on augumented user 114186 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114186 AUC after training: 0.5
User 114186 does not improve AUC. Reverting changes.
Training on augumented user 54108 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54108 AUC after training: 0.5
User 54108 does not improve AUC. Reverting changes.
Training on augumented user 20045 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20045 AUC after training: 0.5
User 20045 does not improve AUC. Reverting changes.
Training on augumented user 8703 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8703 AUC after training: 0.5
User 8703 does not improve AUC. Reverting changes.
Training on augumented user 37821 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37821 AUC after training: 0.5
User 37821 does not improve AUC. Reverting changes.
Training on augumented user 59343 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59343 AUC after training: 0.5
User 59343 does not improve AUC. Reverting changes.
Training on augumented user 26624 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26624 AUC after training: 0.5
User 26624 does not improve AUC. Reverting changes.
Training on augumented user 63834 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63834 AUC after training: 0.5
User 63834 does not improve AUC. Reverting changes.
Training on augumented user 53903 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53903 AUC after training: 0.5
User 53903 does not improve AUC. Reverting changes.
Training on augumented user 38578 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38578 AUC after training: 0.5
User 38578 does not improve AUC. Reverting changes.
Training on augumented user 40687 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40687 AUC after training: 0.5
User 40687 does not improve AUC. Reverting changes.
Training on augumented user 3189 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3189 AUC after training: 0.5
User 3189 does not improve AUC. Reverting changes.
Training on augumented user 83159 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83159 AUC after training: 0.5
User 83159 does not improve AUC. Reverting changes.
Training on augumented user 30843 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30843 AUC after training: 0.5
User 30843 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:41:40.611699] start test user 27459 7/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:41.324226] start test user 27459 7/568 recall augumented users by random, augumented_users = [27636, 84187, 6260, 102950, 65698, 92133, 48687, 100899, 126541, 15930, 1951, 562, 67027, 19538, 24260, 18458, 82199, 65654, 16150, 92437, 16724, 69071, 60183, 45230, 112700, 123393, 106818, 122667, 33792, 70745, 94117, 27506, 1876, 39776, 26804, 119595, 45398, 77767, 47132, 50887, 43299, 21994, 46594, 115032, 134054, 58056, 84828, 82650, 113959, 28295]
[2024-12-02 17:41:41.339509] user = 27459 Cloud 7/568
[2024-12-02 17:41:41.355331] user = 27459 Local 7/568
[2024-12-02 17:41:41.466102] user = 27459 Local+ 7/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:43.821771] user = 27459 MPDA- 7/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6506410256410257
Training on augumented user 27636 0/50 current_auc = 0.6506410256410257
User 27636 AUC after training: 0.6474358974358974
User 27636 does not improve AUC. Reverting changes.
Training on augumented user 84187 1/50 current_auc = 0.6506410256410257
User 84187 AUC after training: 0.657051282051282
User 84187 improves AUC. Keeping the model.
Training on augumented user 6260 2/50 current_auc = 0.657051282051282
User 6260 AUC after training: 0.6538461538461539
User 6260 does not improve AUC. Reverting changes.
Training on augumented user 102950 3/50 current_auc = 0.657051282051282
User 102950 AUC after training: 0.6538461538461539
User 102950 does not improve AUC. Reverting changes.
Training on augumented user 65698 4/50 current_auc = 0.657051282051282
User 65698 AUC after training: 0.657051282051282
User 65698 does not improve AUC. Reverting changes.
Training on augumented user 92133 5/50 current_auc = 0.657051282051282
User 92133 AUC after training: 0.6506410256410257
User 92133 does not improve AUC. Reverting changes.
Training on augumented user 48687 6/50 current_auc = 0.657051282051282
User 48687 AUC after training: 0.657051282051282
User 48687 does not improve AUC. Reverting changes.
Training on augumented user 100899 7/50 current_auc = 0.657051282051282
User 100899 AUC after training: 0.657051282051282
User 100899 does not improve AUC. Reverting changes.
Training on augumented user 126541 8/50 current_auc = 0.657051282051282
User 126541 AUC after training: 0.6538461538461539
User 126541 does not improve AUC. Reverting changes.
Training on augumented user 15930 9/50 current_auc = 0.657051282051282
User 15930 AUC after training: 0.657051282051282
User 15930 does not improve AUC. Reverting changes.
Training on augumented user 1951 10/50 current_auc = 0.657051282051282
User 1951 AUC after training: 0.6506410256410257
User 1951 does not improve AUC. Reverting changes.
Training on augumented user 562 11/50 current_auc = 0.657051282051282
User 562 AUC after training: 0.6602564102564102
User 562 improves AUC. Keeping the model.
Training on augumented user 67027 12/50 current_auc = 0.6602564102564102
User 67027 AUC after training: 0.657051282051282
User 67027 does not improve AUC. Reverting changes.
Training on augumented user 19538 13/50 current_auc = 0.6602564102564102
User 19538 AUC after training: 0.657051282051282
User 19538 does not improve AUC. Reverting changes.
Training on augumented user 24260 14/50 current_auc = 0.6602564102564102
User 24260 AUC after training: 0.6506410256410257
User 24260 does not improve AUC. Reverting changes.
Training on augumented user 18458 15/50 current_auc = 0.6602564102564102
User 18458 AUC after training: 0.657051282051282
User 18458 does not improve AUC. Reverting changes.
Training on augumented user 82199 16/50 current_auc = 0.6602564102564102
User 82199 AUC after training: 0.6538461538461539
User 82199 does not improve AUC. Reverting changes.
Training on augumented user 65654 17/50 current_auc = 0.6602564102564102
User 65654 AUC after training: 0.6602564102564102
User 65654 does not improve AUC. Reverting changes.
Training on augumented user 16150 18/50 current_auc = 0.6602564102564102
User 16150 AUC after training: 0.6538461538461539
User 16150 does not improve AUC. Reverting changes.
Training on augumented user 92437 19/50 current_auc = 0.6602564102564102
User 92437 AUC after training: 0.6538461538461539
User 92437 does not improve AUC. Reverting changes.
Training on augumented user 16724 20/50 current_auc = 0.6602564102564102
User 16724 AUC after training: 0.657051282051282
User 16724 does not improve AUC. Reverting changes.
Training on augumented user 69071 21/50 current_auc = 0.6602564102564102
User 69071 AUC after training: 0.657051282051282
User 69071 does not improve AUC. Reverting changes.
Training on augumented user 60183 22/50 current_auc = 0.6602564102564102
User 60183 AUC after training: 0.6602564102564102
User 60183 does not improve AUC. Reverting changes.
Training on augumented user 45230 23/50 current_auc = 0.6602564102564102
User 45230 AUC after training: 0.6538461538461539
User 45230 does not improve AUC. Reverting changes.
Training on augumented user 112700 24/50 current_auc = 0.6602564102564102
User 112700 AUC after training: 0.6538461538461539
User 112700 does not improve AUC. Reverting changes.
Training on augumented user 123393 25/50 current_auc = 0.6602564102564102
User 123393 AUC after training: 0.6538461538461539
User 123393 does not improve AUC. Reverting changes.
Training on augumented user 106818 26/50 current_auc = 0.6602564102564102
User 106818 AUC after training: 0.657051282051282
User 106818 does not improve AUC. Reverting changes.
Training on augumented user 122667 27/50 current_auc = 0.6602564102564102
User 122667 AUC after training: 0.6538461538461539
User 122667 does not improve AUC. Reverting changes.
Training on augumented user 33792 28/50 current_auc = 0.6602564102564102
User 33792 AUC after training: 0.6602564102564102
User 33792 does not improve AUC. Reverting changes.
Training on augumented user 70745 29/50 current_auc = 0.6602564102564102
User 70745 AUC after training: 0.657051282051282
User 70745 does not improve AUC. Reverting changes.
Training on augumented user 94117 30/50 current_auc = 0.6602564102564102
User 94117 AUC after training: 0.657051282051282
User 94117 does not improve AUC. Reverting changes.
Training on augumented user 27506 31/50 current_auc = 0.6602564102564102
User 27506 AUC after training: 0.6474358974358975
User 27506 does not improve AUC. Reverting changes.
Training on augumented user 1876 32/50 current_auc = 0.6602564102564102
User 1876 AUC after training: 0.657051282051282
User 1876 does not improve AUC. Reverting changes.
Training on augumented user 39776 33/50 current_auc = 0.6602564102564102
User 39776 AUC after training: 0.657051282051282
User 39776 does not improve AUC. Reverting changes.
Training on augumented user 26804 34/50 current_auc = 0.6602564102564102
User 26804 AUC after training: 0.657051282051282
User 26804 does not improve AUC. Reverting changes.
Training on augumented user 119595 35/50 current_auc = 0.6602564102564102
User 119595 AUC after training: 0.6602564102564102
User 119595 does not improve AUC. Reverting changes.
Training on augumented user 45398 36/50 current_auc = 0.6602564102564102
User 45398 AUC after training: 0.6506410256410257
User 45398 does not improve AUC. Reverting changes.
Training on augumented user 77767 37/50 current_auc = 0.6602564102564102
User 77767 AUC after training: 0.657051282051282
User 77767 does not improve AUC. Reverting changes.
Training on augumented user 47132 38/50 current_auc = 0.6602564102564102
User 47132 AUC after training: 0.657051282051282
User 47132 does not improve AUC. Reverting changes.
Training on augumented user 50887 39/50 current_auc = 0.6602564102564102
User 50887 AUC after training: 0.657051282051282
User 50887 does not improve AUC. Reverting changes.
Training on augumented user 43299 40/50 current_auc = 0.6602564102564102
User 43299 AUC after training: 0.6602564102564102
User 43299 does not improve AUC. Reverting changes.
Training on augumented user 21994 41/50 current_auc = 0.6602564102564102
User 21994 AUC after training: 0.6538461538461539
User 21994 does not improve AUC. Reverting changes.
Training on augumented user 46594 42/50 current_auc = 0.6602564102564102
User 46594 AUC after training: 0.6538461538461539
User 46594 does not improve AUC. Reverting changes.
Training on augumented user 115032 43/50 current_auc = 0.6602564102564102
User 115032 AUC after training: 0.657051282051282
User 115032 does not improve AUC. Reverting changes.
Training on augumented user 134054 44/50 current_auc = 0.6602564102564102
User 134054 AUC after training: 0.657051282051282
User 134054 does not improve AUC. Reverting changes.
Training on augumented user 58056 45/50 current_auc = 0.6602564102564102
User 58056 AUC after training: 0.6538461538461539
User 58056 does not improve AUC. Reverting changes.
Training on augumented user 84828 46/50 current_auc = 0.6602564102564102
User 84828 AUC after training: 0.657051282051282
User 84828 does not improve AUC. Reverting changes.
Training on augumented user 82650 47/50 current_auc = 0.6602564102564102
User 82650 AUC after training: 0.657051282051282
User 82650 does not improve AUC. Reverting changes.
Training on augumented user 113959 48/50 current_auc = 0.6602564102564102
User 113959 AUC after training: 0.6602564102564102
User 113959 does not improve AUC. Reverting changes.
Training on augumented user 28295 49/50 current_auc = 0.6602564102564102
User 28295 AUC after training: 0.657051282051282
User 28295 does not improve AUC. Reverting changes.
[2024-12-02 17:42:14.886556] start test user 27461 8/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:15.602804] start test user 27461 8/568 recall augumented users by random, augumented_users = [62919, 118977, 2772, 22628, 23328, 129535, 75297, 89979, 85426, 5987, 99806, 8136, 77820, 113979, 112846, 52311, 112618, 115619, 84924, 79445, 65613, 22934, 32499, 45711, 70337, 2394, 61184, 62021, 72066, 89816, 69990, 129000, 72424, 35670, 16194, 76558, 65128, 53696, 26296, 114944, 132320, 67518, 134911, 96020, 86814, 72353, 30922, 91989, 5425, 105721]
[2024-12-02 17:42:15.631165] user = 27461 Cloud 8/568
[2024-12-02 17:42:15.660582] user = 27461 Local 8/568
[2024-12-02 17:42:15.709218] user = 27461 Local+ 8/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:18.561159] user = 27461 MPDA- 8/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8
Training on augumented user 62919 0/50 current_auc = 0.8
User 62919 AUC after training: 0.8
User 62919 does not improve AUC. Reverting changes.
Training on augumented user 118977 1/50 current_auc = 0.8
User 118977 AUC after training: 0.7
User 118977 does not improve AUC. Reverting changes.
Training on augumented user 2772 2/50 current_auc = 0.8
User 2772 AUC after training: 0.8
User 2772 does not improve AUC. Reverting changes.
Training on augumented user 22628 3/50 current_auc = 0.8
User 22628 AUC after training: 0.8
User 22628 does not improve AUC. Reverting changes.
Training on augumented user 23328 4/50 current_auc = 0.8
User 23328 AUC after training: 0.8
User 23328 does not improve AUC. Reverting changes.
Training on augumented user 129535 5/50 current_auc = 0.8
User 129535 AUC after training: 0.8
User 129535 does not improve AUC. Reverting changes.
Training on augumented user 75297 6/50 current_auc = 0.8
User 75297 AUC after training: 0.8
User 75297 does not improve AUC. Reverting changes.
Training on augumented user 89979 7/50 current_auc = 0.8
User 89979 AUC after training: 0.8
User 89979 does not improve AUC. Reverting changes.
Training on augumented user 85426 8/50 current_auc = 0.8
User 85426 AUC after training: 0.8
User 85426 does not improve AUC. Reverting changes.
Training on augumented user 5987 9/50 current_auc = 0.8
User 5987 AUC after training: 0.8
User 5987 does not improve AUC. Reverting changes.
Training on augumented user 99806 10/50 current_auc = 0.8
User 99806 AUC after training: 0.8
User 99806 does not improve AUC. Reverting changes.
Training on augumented user 8136 11/50 current_auc = 0.8
User 8136 AUC after training: 0.7
User 8136 does not improve AUC. Reverting changes.
Training on augumented user 77820 12/50 current_auc = 0.8
User 77820 AUC after training: 0.8
User 77820 does not improve AUC. Reverting changes.
Training on augumented user 113979 13/50 current_auc = 0.8
User 113979 AUC after training: 0.8
User 113979 does not improve AUC. Reverting changes.
Training on augumented user 112846 14/50 current_auc = 0.8
User 112846 AUC after training: 0.8
User 112846 does not improve AUC. Reverting changes.
Training on augumented user 52311 15/50 current_auc = 0.8
User 52311 AUC after training: 0.8
User 52311 does not improve AUC. Reverting changes.
Training on augumented user 112618 16/50 current_auc = 0.8
User 112618 AUC after training: 0.8
User 112618 does not improve AUC. Reverting changes.
Training on augumented user 115619 17/50 current_auc = 0.8
User 115619 AUC after training: 0.8
User 115619 does not improve AUC. Reverting changes.
Training on augumented user 84924 18/50 current_auc = 0.8
User 84924 AUC after training: 0.7
User 84924 does not improve AUC. Reverting changes.
Training on augumented user 79445 19/50 current_auc = 0.8
User 79445 AUC after training: 0.8
User 79445 does not improve AUC. Reverting changes.
Training on augumented user 65613 20/50 current_auc = 0.8
User 65613 AUC after training: 0.8
User 65613 does not improve AUC. Reverting changes.
Training on augumented user 22934 21/50 current_auc = 0.8
User 22934 AUC after training: 0.8
User 22934 does not improve AUC. Reverting changes.
Training on augumented user 32499 22/50 current_auc = 0.8
User 32499 AUC after training: 0.8
User 32499 does not improve AUC. Reverting changes.
Training on augumented user 45711 23/50 current_auc = 0.8
User 45711 AUC after training: 0.8
User 45711 does not improve AUC. Reverting changes.
Training on augumented user 70337 24/50 current_auc = 0.8
User 70337 AUC after training: 0.8
User 70337 does not improve AUC. Reverting changes.
Training on augumented user 2394 25/50 current_auc = 0.8
User 2394 AUC after training: 0.8
User 2394 does not improve AUC. Reverting changes.
Training on augumented user 61184 26/50 current_auc = 0.8
User 61184 AUC after training: 0.8
User 61184 does not improve AUC. Reverting changes.
Training on augumented user 62021 27/50 current_auc = 0.8
User 62021 AUC after training: 0.8
User 62021 does not improve AUC. Reverting changes.
Training on augumented user 72066 28/50 current_auc = 0.8
User 72066 AUC after training: 0.8
User 72066 does not improve AUC. Reverting changes.
Training on augumented user 89816 29/50 current_auc = 0.8
User 89816 AUC after training: 0.8
User 89816 does not improve AUC. Reverting changes.
Training on augumented user 69990 30/50 current_auc = 0.8
User 69990 AUC after training: 0.8
User 69990 does not improve AUC. Reverting changes.
Training on augumented user 129000 31/50 current_auc = 0.8
User 129000 AUC after training: 0.8
User 129000 does not improve AUC. Reverting changes.
Training on augumented user 72424 32/50 current_auc = 0.8
User 72424 AUC after training: 0.8
User 72424 does not improve AUC. Reverting changes.
Training on augumented user 35670 33/50 current_auc = 0.8
User 35670 AUC after training: 0.8
User 35670 does not improve AUC. Reverting changes.
Training on augumented user 16194 34/50 current_auc = 0.8
User 16194 AUC after training: 0.8
User 16194 does not improve AUC. Reverting changes.
Training on augumented user 76558 35/50 current_auc = 0.8
User 76558 AUC after training: 0.8
User 76558 does not improve AUC. Reverting changes.
Training on augumented user 65128 36/50 current_auc = 0.8
User 65128 AUC after training: 0.8
User 65128 does not improve AUC. Reverting changes.
Training on augumented user 53696 37/50 current_auc = 0.8
User 53696 AUC after training: 0.8
User 53696 does not improve AUC. Reverting changes.
Training on augumented user 26296 38/50 current_auc = 0.8
User 26296 AUC after training: 0.8
User 26296 does not improve AUC. Reverting changes.
Training on augumented user 114944 39/50 current_auc = 0.8
User 114944 AUC after training: 0.8
User 114944 does not improve AUC. Reverting changes.
Training on augumented user 132320 40/50 current_auc = 0.8
User 132320 AUC after training: 0.8
User 132320 does not improve AUC. Reverting changes.
Training on augumented user 67518 41/50 current_auc = 0.8
User 67518 AUC after training: 0.8
User 67518 does not improve AUC. Reverting changes.
Training on augumented user 134911 42/50 current_auc = 0.8
User 134911 AUC after training: 0.8
User 134911 does not improve AUC. Reverting changes.
Training on augumented user 96020 43/50 current_auc = 0.8
User 96020 AUC after training: 0.8
User 96020 does not improve AUC. Reverting changes.
Training on augumented user 86814 44/50 current_auc = 0.8
User 86814 AUC after training: 0.8
User 86814 does not improve AUC. Reverting changes.
Training on augumented user 72353 45/50 current_auc = 0.8
User 72353 AUC after training: 0.8
User 72353 does not improve AUC. Reverting changes.
Training on augumented user 30922 46/50 current_auc = 0.8
User 30922 AUC after training: 0.8
User 30922 does not improve AUC. Reverting changes.
Training on augumented user 91989 47/50 current_auc = 0.8
User 91989 AUC after training: 0.8
User 91989 does not improve AUC. Reverting changes.
Training on augumented user 5425 48/50 current_auc = 0.8
User 5425 AUC after training: 0.8
User 5425 does not improve AUC. Reverting changes.
Training on augumented user 105721 49/50 current_auc = 0.8
User 105721 AUC after training: 0.8
User 105721 does not improve AUC. Reverting changes.
[2024-12-02 17:42:51.468660] start test user 27469 9/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:51.966293] start test user 27469 9/568 recall augumented users by random, augumented_users = [22442, 135739, 137498, 3265, 93015, 118298, 45906, 48509, 3797, 51891, 30863, 41308, 8225, 15539, 117185, 50011, 45908, 43439, 66707, 56655, 51762, 50673, 79432, 10222, 48864, 86639, 108650, 23018, 30290, 115791, 32873, 49819, 39632, 25872, 102237, 58354, 83420, 24203, 90411, 126027, 29043, 12647, 16969, 29431, 51325, 94209, 100137, 111974, 25656, 11756]
[2024-12-02 17:42:52.006711] user = 27469 Cloud 9/568
[2024-12-02 17:42:52.248597] user = 27469 Local 9/568
[2024-12-02 17:42:52.919988] user = 27469 Local+ 9/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:55.442168] user = 27469 MPDA- 9/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6917369923365704
Training on augumented user 22442 0/50 current_auc = 0.6917369923365704
User 22442 AUC after training: 0.6918688529676399
User 22442 improves AUC. Keeping the model.
Training on augumented user 135739 1/50 current_auc = 0.6918688529676399
User 135739 AUC after training: 0.6918921224907697
User 135739 improves AUC. Keeping the model.
Training on augumented user 137498 2/50 current_auc = 0.6918921224907697
User 137498 AUC after training: 0.6917447488442803
User 137498 does not improve AUC. Reverting changes.
Training on augumented user 3265 3/50 current_auc = 0.6918921224907697
User 3265 AUC after training: 0.6919037572523348
User 3265 improves AUC. Keeping the model.
Training on augumented user 93015 4/50 current_auc = 0.6919037572523348
User 93015 AUC after training: 0.6919774440755795
User 93015 improves AUC. Keeping the model.
Training on augumented user 118298 5/50 current_auc = 0.6919774440755795
User 118298 AUC after training: 0.6917525053519903
User 118298 does not improve AUC. Reverting changes.
Training on augumented user 45906 6/50 current_auc = 0.6919774440755795
User 45906 AUC after training: 0.6918998789984797
User 45906 does not improve AUC. Reverting changes.
Training on augumented user 48509 7/50 current_auc = 0.6919774440755795
User 48509 AUC after training: 0.6918824268561322
User 48509 does not improve AUC. Reverting changes.
Training on augumented user 3797 8/50 current_auc = 0.6919774440755795
User 3797 AUC after training: 0.6927143123080264
User 3797 improves AUC. Keeping the model.
Training on augumented user 51891 9/50 current_auc = 0.6927143123080264
User 51891 AUC after training: 0.6924971300921473
User 51891 does not improve AUC. Reverting changes.
Training on augumented user 30863 10/50 current_auc = 0.6927143123080264
User 30863 AUC after training: 0.6927918773851262
User 30863 improves AUC. Keeping the model.
Training on augumented user 41308 11/50 current_auc = 0.6927918773851262
User 41308 AUC after training: 0.6928810772237908
User 41308 improves AUC. Keeping the model.
Training on augumented user 8225 12/50 current_auc = 0.6928810772237908
User 8225 AUC after training: 0.6927879991312711
User 8225 does not improve AUC. Reverting changes.
Training on augumented user 15539 13/50 current_auc = 0.6928810772237908
User 15539 AUC after training: 0.6928035121466911
User 15539 does not improve AUC. Reverting changes.
Training on augumented user 117185 14/50 current_auc = 0.6928810772237908
User 117185 AUC after training: 0.6932553287207968
User 117185 improves AUC. Keeping the model.
Training on augumented user 50011 15/50 current_auc = 0.6932553287207968
User 50011 AUC after training: 0.6930594769011201
User 50011 does not improve AUC. Reverting changes.
Training on augumented user 45908 16/50 current_auc = 0.6932553287207968
User 45908 AUC after training: 0.6929198597623406
User 45908 does not improve AUC. Reverting changes.
Training on augumented user 43439 17/50 current_auc = 0.6932553287207968
User 43439 AUC after training: 0.6930943811858149
User 43439 does not improve AUC. Reverting changes.
Training on augumented user 66707 18/50 current_auc = 0.6932553287207968
User 66707 AUC after training: 0.6932417548323043
User 66707 does not improve AUC. Reverting changes.
Training on augumented user 56655 19/50 current_auc = 0.6932553287207968
User 56655 AUC after training: 0.6931777636436971
User 56655 does not improve AUC. Reverting changes.
Training on augumented user 51762 20/50 current_auc = 0.6932553287207968
User 51762 AUC after training: 0.69308274642425
User 51762 does not improve AUC. Reverting changes.
Training on augumented user 50673 21/50 current_auc = 0.6932553287207968
User 50673 AUC after training: 0.6933445285594614
User 50673 improves AUC. Keeping the model.
Training on augumented user 79432 22/50 current_auc = 0.6933445285594614
User 79432 AUC after training: 0.6929043467469207
User 79432 does not improve AUC. Reverting changes.
Training on augumented user 10222 23/50 current_auc = 0.6933445285594614
User 10222 AUC after training: 0.6933367720517514
User 10222 does not improve AUC. Reverting changes.
Training on augumented user 48864 24/50 current_auc = 0.6933445285594614
User 48864 AUC after training: 0.6933833110980112
User 48864 improves AUC. Keeping the model.
Training on augumented user 86639 25/50 current_auc = 0.6933833110980112
User 86639 AUC after training: 0.693197154912972
User 86639 does not improve AUC. Reverting changes.
Training on augumented user 108650 26/50 current_auc = 0.6933833110980112
User 108650 AUC after training: 0.6929896683317303
User 108650 does not improve AUC. Reverting changes.
Training on augumented user 23018 27/50 current_auc = 0.6933833110980112
User 23018 AUC after training: 0.6936606062486427
User 23018 improves AUC. Keeping the model.
Training on augumented user 30290 28/50 current_auc = 0.6936606062486427
User 30290 AUC after training: 0.6937110235487574
User 30290 improves AUC. Keeping the model.
Training on augumented user 115791 29/50 current_auc = 0.6937110235487574
User 115791 AUC after training: 0.6936955105333376
User 115791 does not improve AUC. Reverting changes.
Training on augumented user 32873 30/50 current_auc = 0.6937110235487574
User 32873 AUC after training: 0.6936412149793677
User 32873 does not improve AUC. Reverting changes.
Training on augumented user 49819 31/50 current_auc = 0.6937110235487574
User 49819 AUC after training: 0.6934473022866184
User 49819 does not improve AUC. Reverting changes.
Training on augumented user 39632 32/50 current_auc = 0.6937110235487574
User 39632 AUC after training: 0.6937052061679749
User 39632 does not improve AUC. Reverting changes.
Training on augumented user 25872 33/50 current_auc = 0.6937110235487574
User 25872 AUC after training: 0.693540380379138
User 25872 does not improve AUC. Reverting changes.
Training on augumented user 102237 34/50 current_auc = 0.6937110235487574
User 102237 AUC after training: 0.6936955105333376
User 102237 does not improve AUC. Reverting changes.
Training on augumented user 58354 35/50 current_auc = 0.6937110235487574
User 58354 AUC after training: 0.6936004933138903
User 58354 does not improve AUC. Reverting changes.
Training on augumented user 83420 36/50 current_auc = 0.6937110235487574
User 83420 AUC after training: 0.6936877540256274
User 83420 does not improve AUC. Reverting changes.
Training on augumented user 24203 37/50 current_auc = 0.6937110235487574
User 24203 AUC after training: 0.6936547888678601
User 24203 does not improve AUC. Reverting changes.
Training on augumented user 90411 38/50 current_auc = 0.6937110235487574
User 90411 AUC after training: 0.6935985541869628
User 90411 does not improve AUC. Reverting changes.
Training on augumented user 126027 39/50 current_auc = 0.6937110235487574
User 126027 AUC after training: 0.6937342930718873
User 126027 improves AUC. Keeping the model.
Training on augumented user 29043 40/50 current_auc = 0.6937342930718873
User 29043 AUC after training: 0.6937924668797121
User 29043 improves AUC. Keeping the model.
Training on augumented user 12647 41/50 current_auc = 0.6937924668797121
User 12647 AUC after training: 0.6939437187800565
User 12647 improves AUC. Keeping the model.
Training on augumented user 16969 42/50 current_auc = 0.6939437187800565
User 16969 AUC after training: 0.6938215537836245
User 16969 does not improve AUC. Reverting changes.
Training on augumented user 29431 43/50 current_auc = 0.6939437187800565
User 29431 AUC after training: 0.693792466879712
User 29431 does not improve AUC. Reverting changes.
Training on augumented user 51325 44/50 current_auc = 0.6939437187800565
User 51325 AUC after training: 0.6940057708417362
User 51325 improves AUC. Keeping the model.
Training on augumented user 94209 45/50 current_auc = 0.6940057708417362
User 94209 AUC after training: 0.6939068753684341
User 94209 does not improve AUC. Reverting changes.
Training on augumented user 100137 46/50 current_auc = 0.6940057708417362
User 100137 AUC after training: 0.6938913623530141
User 100137 does not improve AUC. Reverting changes.
Training on augumented user 111974 47/50 current_auc = 0.6940057708417362
User 111974 AUC after training: 0.6940077099686637
User 111974 improves AUC. Keeping the model.
Training on augumented user 25656 48/50 current_auc = 0.6940077099686637
User 25656 AUC after training: 0.6939379013992739
User 25656 does not improve AUC. Reverting changes.
Training on augumented user 11756 49/50 current_auc = 0.6940077099686637
User 11756 AUC after training: 0.6939223883838541
User 11756 does not improve AUC. Reverting changes.
[2024-12-02 17:43:32.660882] start test user 27482 10/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:33.075110] start test user 27482 10/568 recall augumented users by random, augumented_users = [37679, 23559, 136952, 43834, 32374, 72844, 115046, 27532, 111217, 48125, 56827, 78265, 118628, 48215, 100136, 31109, 63202, 29911, 114483, 85821, 78300, 48440, 22474, 32788, 50982, 85508, 91104, 63016, 95056, 2609, 65289, 76935, 34662, 87475, 122178, 94385, 50362, 95287, 126353, 64191, 132938, 61332, 21057, 65592, 130168, 81559, 80286, 6128, 89722, 107325]
[2024-12-02 17:43:33.092576] user = 27482 Cloud 10/568
[2024-12-02 17:43:33.148666] user = 27482 Local 10/568
[2024-12-02 17:43:33.368779] user = 27482 Local+ 10/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:36.338894] user = 27482 MPDA- 10/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5360753239843423
Training on augumented user 37679 0/50 current_auc = 0.5360753239843423
User 37679 AUC after training: 0.5366596359214078
User 37679 improves AUC. Keeping the model.
Training on augumented user 23559 1/50 current_auc = 0.5366596359214078
User 23559 AUC after training: 0.5362795956371376
User 23559 does not improve AUC. Reverting changes.
Training on augumented user 136952 2/50 current_auc = 0.5366596359214078
User 136952 AUC after training: 0.5360183179417017
User 136952 does not improve AUC. Reverting changes.
Training on augumented user 43834 3/50 current_auc = 0.5366596359214078
User 43834 AUC after training: 0.5366168813894273
User 43834 does not improve AUC. Reverting changes.
Training on augumented user 32374 4/50 current_auc = 0.5366596359214078
User 32374 AUC after training: 0.5362700946300307
User 32374 does not improve AUC. Reverting changes.
Training on augumented user 72844 5/50 current_auc = 0.5366596359214078
User 72844 AUC after training: 0.5363603541975449
User 72844 does not improve AUC. Reverting changes.
Training on augumented user 115046 6/50 current_auc = 0.5366596359214078
User 115046 AUC after training: 0.5364078592330787
User 115046 does not improve AUC. Reverting changes.
Training on augumented user 27532 7/50 current_auc = 0.5366596359214078
User 27532 AUC after training: 0.5361608330483031
User 27532 does not improve AUC. Reverting changes.
Training on augumented user 111217 8/50 current_auc = 0.5366596359214078
User 111217 AUC after training: 0.5367593964960286
User 111217 improves AUC. Keeping the model.
Training on augumented user 48125 9/50 current_auc = 0.5367593964960286
User 48125 AUC after training: 0.5370824307376582
User 48125 improves AUC. Keeping the model.
Training on augumented user 56827 10/50 current_auc = 0.5370824307376582
User 56827 AUC after training: 0.5374387185041616
User 56827 improves AUC. Keeping the model.
Training on augumented user 78265 11/50 current_auc = 0.5374387185041616
User 78265 AUC after training: 0.5372249458442595
User 78265 does not improve AUC. Reverting changes.
Training on augumented user 118628 12/50 current_auc = 0.5374387185041616
User 118628 AUC after training: 0.5371346862767454
User 118628 does not improve AUC. Reverting changes.
Training on augumented user 48215 13/50 current_auc = 0.5374387185041616
User 48215 AUC after training: 0.5375384790787824
User 48215 improves AUC. Keeping the model.
Training on augumented user 100136 14/50 current_auc = 0.5375384790787824
User 100136 AUC after training: 0.5379375213772659
User 100136 improves AUC. Keeping the model.
Training on augumented user 31109 15/50 current_auc = 0.5379375213772659
User 31109 AUC after training: 0.537685744688937
User 31109 does not improve AUC. Reverting changes.
Training on augumented user 63202 16/50 current_auc = 0.5379375213772659
User 63202 AUC after training: 0.5381607950442747
User 63202 improves AUC. Keeping the model.
Training on augumented user 29911 17/50 current_auc = 0.5381607950442747
User 29911 AUC after training: 0.5379660243985862
User 29911 does not improve AUC. Reverting changes.
Training on augumented user 114483 18/50 current_auc = 0.5381607950442747
User 114483 AUC after training: 0.538227302094022
User 114483 improves AUC. Keeping the model.
Training on augumented user 85821 19/50 current_auc = 0.538227302094022
User 85821 AUC after training: 0.5381607950442747
User 85821 does not improve AUC. Reverting changes.
Training on augumented user 78300 20/50 current_auc = 0.538227302094022
User 78300 AUC after training: 0.5379802759092464
User 78300 does not improve AUC. Reverting changes.
Training on augumented user 48440 21/50 current_auc = 0.538227302094022
User 48440 AUC after training: 0.5384220727397104
User 48440 improves AUC. Keeping the model.
Training on augumented user 22474 22/50 current_auc = 0.5384220727397104
User 22474 AUC after training: 0.5386595979173792
User 22474 improves AUC. Keeping the model.
Training on augumented user 32788 23/50 current_auc = 0.5386595979173792
User 32788 AUC after training: 0.5381940485691483
User 32788 does not improve AUC. Reverting changes.
Training on augumented user 50982 24/50 current_auc = 0.5386595979173792
User 50982 AUC after training: 0.5375099760574621
User 50982 does not improve AUC. Reverting changes.
Training on augumented user 85508 25/50 current_auc = 0.5386595979173792
User 85508 AUC after training: 0.5379945274199065
User 85508 does not improve AUC. Reverting changes.
Training on augumented user 91104 26/50 current_auc = 0.5386595979173792
User 91104 AUC after training: 0.5381607950442746
User 91104 does not improve AUC. Reverting changes.
Training on augumented user 63016 27/50 current_auc = 0.5386595979173792
User 63016 AUC after training: 0.5387403564777866
User 63016 improves AUC. Keeping the model.
Training on augumented user 95056 28/50 current_auc = 0.5387403564777866
User 95056 AUC after training: 0.5383888192148368
User 95056 does not improve AUC. Reverting changes.
Training on augumented user 2609 29/50 current_auc = 0.5387403564777866
User 2609 AUC after training: 0.5386738494280394
User 2609 does not improve AUC. Reverting changes.
Training on augumented user 65289 30/50 current_auc = 0.5387403564777866
User 65289 AUC after training: 0.5386500969102725
User 65289 does not improve AUC. Reverting changes.
Training on augumented user 76935 31/50 current_auc = 0.5387403564777866
User 76935 AUC after training: 0.5386500969102725
User 76935 does not improve AUC. Reverting changes.
Training on augumented user 34662 32/50 current_auc = 0.5387403564777866
User 34662 AUC after training: 0.5383555656899631
User 34662 does not improve AUC. Reverting changes.
Training on augumented user 87475 33/50 current_auc = 0.5387403564777866
User 87475 AUC after training: 0.5372914528940068
User 87475 does not improve AUC. Reverting changes.
Training on augumented user 122178 34/50 current_auc = 0.5387403564777866
User 122178 AUC after training: 0.5388306160453007
User 122178 improves AUC. Keeping the model.
Training on augumented user 94385 35/50 current_auc = 0.5388306160453007
User 94385 AUC after training: 0.5387831110097671
User 94385 does not improve AUC. Reverting changes.
Training on augumented user 50362 36/50 current_auc = 0.5388306160453007
User 50362 AUC after training: 0.5391441492798237
User 50362 improves AUC. Keeping the model.
Training on augumented user 95287 37/50 current_auc = 0.5391441492798237
User 95287 AUC after training: 0.5388211150381941
User 95287 does not improve AUC. Reverting changes.
Training on augumented user 126353 38/50 current_auc = 0.5391441492798237
User 126353 AUC after training: 0.5390586402158628
User 126353 does not improve AUC. Reverting changes.
Training on augumented user 64191 39/50 current_auc = 0.5391441492798237
User 64191 AUC after training: 0.536046820963022
User 64191 does not improve AUC. Reverting changes.
Training on augumented user 132938 40/50 current_auc = 0.5391441492798237
User 132938 AUC after training: 0.5392296583437846
User 132938 improves AUC. Keeping the model.
Training on augumented user 61332 41/50 current_auc = 0.5392296583437846
User 61332 AUC after training: 0.5394101774788127
User 61332 improves AUC. Keeping the model.
Training on augumented user 21057 42/50 current_auc = 0.5394101774788127
User 21057 AUC after training: 0.5388496180595143
User 21057 does not improve AUC. Reverting changes.
Training on augumented user 65592 43/50 current_auc = 0.5394101774788127
User 65592 AUC after training: 0.5386785999315927
User 65592 does not improve AUC. Reverting changes.
Training on augumented user 130168 44/50 current_auc = 0.5394101774788127
User 130168 AUC after training: 0.5395716945996275
User 130168 improves AUC. Keeping the model.
Training on augumented user 81559 45/50 current_auc = 0.5395716945996275
User 81559 AUC after training: 0.5394481815072398
User 81559 does not improve AUC. Reverting changes.
Training on augumented user 80286 46/50 current_auc = 0.5395716945996275
User 80286 AUC after training: 0.5394291794930262
User 80286 does not improve AUC. Reverting changes.
Training on augumented user 6128 47/50 current_auc = 0.5395716945996275
User 6128 AUC after training: 0.539286664386425
User 6128 does not improve AUC. Reverting changes.
Training on augumented user 89722 48/50 current_auc = 0.5395716945996275
User 89722 AUC after training: 0.5379375213772659
User 89722 does not improve AUC. Reverting changes.
Training on augumented user 107325 49/50 current_auc = 0.5395716945996275
User 107325 AUC after training: 0.5401797590544598
User 107325 improves AUC. Keeping the model.
[2024-12-02 17:44:12.661749] start test user 27483 11/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:13.182356] start test user 27483 11/568 recall augumented users by random, augumented_users = [43531, 73529, 25609, 48595, 8584, 14336, 41507, 69516, 59919, 124870, 12793, 7112, 14785, 74596, 12625, 106073, 12295, 71367, 69210, 91193, 58563, 26481, 87581, 50006, 98564, 67627, 10981, 30868, 70279, 60708, 59737, 123721, 105295, 94265, 93907, 119501, 130003, 13261, 99795, 126564, 135020, 136171, 138210, 3942, 7000, 75629, 46698, 11967, 42250, 100017]
[2024-12-02 17:44:13.198850] user = 27483 Cloud 11/568
[2024-12-02 17:44:13.214544] user = 27483 Local 11/568
[2024-12-02 17:44:13.253972] user = 27483 Local+ 11/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:16.122881] user = 27483 MPDA- 11/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4964285714285714
Training on augumented user 43531 0/50 current_auc = 0.4964285714285714
User 43531 AUC after training: 0.4964285714285714
User 43531 does not improve AUC. Reverting changes.
Training on augumented user 73529 1/50 current_auc = 0.4964285714285714
User 73529 AUC after training: 0.5017857142857143
User 73529 improves AUC. Keeping the model.
Training on augumented user 25609 2/50 current_auc = 0.5017857142857143
User 25609 AUC after training: 0.5017857142857143
User 25609 does not improve AUC. Reverting changes.
Training on augumented user 48595 3/50 current_auc = 0.5017857142857143
User 48595 AUC after training: 0.5
User 48595 does not improve AUC. Reverting changes.
Training on augumented user 8584 4/50 current_auc = 0.5017857142857143
User 8584 AUC after training: 0.5029761904761905
User 8584 improves AUC. Keeping the model.
Training on augumented user 14336 5/50 current_auc = 0.5029761904761905
User 14336 AUC after training: 0.5005952380952381
User 14336 does not improve AUC. Reverting changes.
Training on augumented user 41507 6/50 current_auc = 0.5029761904761905
User 41507 AUC after training: 0.5071428571428571
User 41507 improves AUC. Keeping the model.
Training on augumented user 69516 7/50 current_auc = 0.5071428571428571
User 69516 AUC after training: 0.5053571428571428
User 69516 does not improve AUC. Reverting changes.
Training on augumented user 59919 8/50 current_auc = 0.5071428571428571
User 59919 AUC after training: 0.506547619047619
User 59919 does not improve AUC. Reverting changes.
Training on augumented user 124870 9/50 current_auc = 0.5071428571428571
User 124870 AUC after training: 0.5059523809523809
User 124870 does not improve AUC. Reverting changes.
Training on augumented user 12793 10/50 current_auc = 0.5071428571428571
User 12793 AUC after training: 0.5119047619047619
User 12793 improves AUC. Keeping the model.
Training on augumented user 7112 11/50 current_auc = 0.5119047619047619
User 7112 AUC after training: 0.5119047619047619
User 7112 does not improve AUC. Reverting changes.
Training on augumented user 14785 12/50 current_auc = 0.5119047619047619
User 14785 AUC after training: 0.5142857142857142
User 14785 improves AUC. Keeping the model.
Training on augumented user 74596 13/50 current_auc = 0.5142857142857142
User 74596 AUC after training: 0.5142857142857142
User 74596 does not improve AUC. Reverting changes.
Training on augumented user 12625 14/50 current_auc = 0.5142857142857142
User 12625 AUC after training: 0.5136904761904761
User 12625 does not improve AUC. Reverting changes.
Training on augumented user 106073 15/50 current_auc = 0.5142857142857142
User 106073 AUC after training: 0.5142857142857142
User 106073 does not improve AUC. Reverting changes.
Training on augumented user 12295 16/50 current_auc = 0.5142857142857142
User 12295 AUC after training: 0.5136904761904761
User 12295 does not improve AUC. Reverting changes.
Training on augumented user 71367 17/50 current_auc = 0.5142857142857142
User 71367 AUC after training: 0.5119047619047619
User 71367 does not improve AUC. Reverting changes.
Training on augumented user 69210 18/50 current_auc = 0.5142857142857142
User 69210 AUC after training: 0.5148809523809524
User 69210 improves AUC. Keeping the model.
Training on augumented user 91193 19/50 current_auc = 0.5148809523809524
User 91193 AUC after training: 0.5139880952380952
User 91193 does not improve AUC. Reverting changes.
Training on augumented user 58563 20/50 current_auc = 0.5148809523809524
User 58563 AUC after training: 0.5125
User 58563 does not improve AUC. Reverting changes.
Training on augumented user 26481 21/50 current_auc = 0.5148809523809524
User 26481 AUC after training: 0.5142857142857142
User 26481 does not improve AUC. Reverting changes.
Training on augumented user 87581 22/50 current_auc = 0.5148809523809524
User 87581 AUC after training: 0.5136904761904761
User 87581 does not improve AUC. Reverting changes.
Training on augumented user 50006 23/50 current_auc = 0.5148809523809524
User 50006 AUC after training: 0.5101190476190476
User 50006 does not improve AUC. Reverting changes.
Training on augumented user 98564 24/50 current_auc = 0.5148809523809524
User 98564 AUC after training: 0.5119047619047619
User 98564 does not improve AUC. Reverting changes.
Training on augumented user 67627 25/50 current_auc = 0.5148809523809524
User 67627 AUC after training: 0.5136904761904761
User 67627 does not improve AUC. Reverting changes.
Training on augumented user 10981 26/50 current_auc = 0.5148809523809524
User 10981 AUC after training: 0.5142857142857142
User 10981 does not improve AUC. Reverting changes.
Training on augumented user 30868 27/50 current_auc = 0.5148809523809524
User 30868 AUC after training: 0.5148809523809523
User 30868 does not improve AUC. Reverting changes.
Training on augumented user 70279 28/50 current_auc = 0.5148809523809524
User 70279 AUC after training: 0.5119047619047619
User 70279 does not improve AUC. Reverting changes.
Training on augumented user 60708 29/50 current_auc = 0.5148809523809524
User 60708 AUC after training: 0.5136904761904761
User 60708 does not improve AUC. Reverting changes.
Training on augumented user 59737 30/50 current_auc = 0.5148809523809524
User 59737 AUC after training: 0.5148809523809523
User 59737 does not improve AUC. Reverting changes.
Training on augumented user 123721 31/50 current_auc = 0.5148809523809524
User 123721 AUC after training: 0.5154761904761904
User 123721 improves AUC. Keeping the model.
Training on augumented user 105295 32/50 current_auc = 0.5154761904761904
User 105295 AUC after training: 0.5157738095238096
User 105295 improves AUC. Keeping the model.
Training on augumented user 94265 33/50 current_auc = 0.5157738095238096
User 94265 AUC after training: 0.513095238095238
User 94265 does not improve AUC. Reverting changes.
Training on augumented user 93907 34/50 current_auc = 0.5157738095238096
User 93907 AUC after training: 0.5104166666666666
User 93907 does not improve AUC. Reverting changes.
Training on augumented user 119501 35/50 current_auc = 0.5157738095238096
User 119501 AUC after training: 0.5113095238095238
User 119501 does not improve AUC. Reverting changes.
Training on augumented user 130003 36/50 current_auc = 0.5157738095238096
User 130003 AUC after training: 0.5151785714285715
User 130003 does not improve AUC. Reverting changes.
Training on augumented user 13261 37/50 current_auc = 0.5157738095238096
User 13261 AUC after training: 0.5175595238095239
User 13261 improves AUC. Keeping the model.
Training on augumented user 99795 38/50 current_auc = 0.5175595238095239
User 99795 AUC after training: 0.512202380952381
User 99795 does not improve AUC. Reverting changes.
Training on augumented user 126564 39/50 current_auc = 0.5175595238095239
User 126564 AUC after training: 0.51875
User 126564 improves AUC. Keeping the model.
Training on augumented user 135020 40/50 current_auc = 0.51875
User 135020 AUC after training: 0.5193452380952381
User 135020 improves AUC. Keeping the model.
Training on augumented user 136171 41/50 current_auc = 0.5193452380952381
User 136171 AUC after training: 0.5202380952380953
User 136171 improves AUC. Keeping the model.
Training on augumented user 138210 42/50 current_auc = 0.5202380952380953
User 138210 AUC after training: 0.5208333333333334
User 138210 improves AUC. Keeping the model.
Training on augumented user 3942 43/50 current_auc = 0.5208333333333334
User 3942 AUC after training: 0.5211309523809524
User 3942 improves AUC. Keeping the model.
Training on augumented user 7000 44/50 current_auc = 0.5211309523809524
User 7000 AUC after training: 0.5205357142857143
User 7000 does not improve AUC. Reverting changes.
Training on augumented user 75629 45/50 current_auc = 0.5211309523809524
User 75629 AUC after training: 0.5255952380952381
User 75629 improves AUC. Keeping the model.
Training on augumented user 46698 46/50 current_auc = 0.5255952380952381
User 46698 AUC after training: 0.5229166666666667
User 46698 does not improve AUC. Reverting changes.
Training on augumented user 11967 47/50 current_auc = 0.5255952380952381
User 11967 AUC after training: 0.525
User 11967 does not improve AUC. Reverting changes.
Training on augumented user 42250 48/50 current_auc = 0.5255952380952381
User 42250 AUC after training: 0.5261904761904762
User 42250 improves AUC. Keeping the model.
Training on augumented user 100017 49/50 current_auc = 0.5261904761904762
User 100017 AUC after training: 0.5255952380952381
User 100017 does not improve AUC. Reverting changes.
[2024-12-02 17:44:50.570905] start test user 27551 12/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:51.298667] start test user 27551 12/568 recall augumented users by random, augumented_users = [99663, 104870, 33833, 10174, 92912, 40158, 49253, 109879, 71522, 65617, 20890, 84489, 116103, 74154, 102609, 53546, 114051, 90867, 48540, 47059, 48161, 129013, 92851, 16801, 16936, 118775, 92439, 36131, 76833, 113714, 19414, 111188, 24638, 62659, 90950, 118704, 41141, 77349, 101541, 125461, 121836, 72312, 41453, 124776, 58787, 15667, 64893, 123182, 114326, 62121]
[2024-12-02 17:44:51.314316] user = 27551 Cloud 12/568
[2024-12-02 17:44:51.366288] user = 27551 Local 12/568
[2024-12-02 17:44:51.519484] user = 27551 Local+ 12/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:53.776574] user = 27551 MPDA- 12/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7425699300699301
Training on augumented user 99663 0/50 current_auc = 0.7425699300699301
User 99663 AUC after training: 0.7424388111888113
User 99663 does not improve AUC. Reverting changes.
Training on augumented user 104870 1/50 current_auc = 0.7425699300699301
User 104870 AUC after training: 0.742263986013986
User 104870 does not improve AUC. Reverting changes.
Training on augumented user 33833 2/50 current_auc = 0.7425699300699301
User 33833 AUC after training: 0.7427447552447554
User 33833 improves AUC. Keeping the model.
Training on augumented user 10174 3/50 current_auc = 0.7427447552447554
User 10174 AUC after training: 0.7425262237762237
User 10174 does not improve AUC. Reverting changes.
Training on augumented user 92912 4/50 current_auc = 0.7427447552447554
User 92912 AUC after training: 0.7419580419580419
User 92912 does not improve AUC. Reverting changes.
Training on augumented user 40158 5/50 current_auc = 0.7427447552447554
User 40158 AUC after training: 0.7429632867132866
User 40158 improves AUC. Keeping the model.
Training on augumented user 49253 6/50 current_auc = 0.7429632867132866
User 49253 AUC after training: 0.7420454545454546
User 49253 does not improve AUC. Reverting changes.
Training on augumented user 109879 7/50 current_auc = 0.7429632867132866
User 109879 AUC after training: 0.74256993006993
User 109879 does not improve AUC. Reverting changes.
Training on augumented user 71522 8/50 current_auc = 0.7429632867132866
User 71522 AUC after training: 0.7428758741258742
User 71522 does not improve AUC. Reverting changes.
Training on augumented user 65617 9/50 current_auc = 0.7429632867132866
User 65617 AUC after training: 0.7425699300699301
User 65617 does not improve AUC. Reverting changes.
Training on augumented user 20890 10/50 current_auc = 0.7429632867132866
User 20890 AUC after training: 0.7427447552447553
User 20890 does not improve AUC. Reverting changes.
Training on augumented user 84489 11/50 current_auc = 0.7429632867132866
User 84489 AUC after training: 0.7429632867132868
User 84489 improves AUC. Keeping the model.
Training on augumented user 116103 12/50 current_auc = 0.7429632867132868
User 116103 AUC after training: 0.7428758741258742
User 116103 does not improve AUC. Reverting changes.
Training on augumented user 74154 13/50 current_auc = 0.7429632867132868
User 74154 AUC after training: 0.7429195804195804
User 74154 does not improve AUC. Reverting changes.
Training on augumented user 102609 14/50 current_auc = 0.7429632867132868
User 102609 AUC after training: 0.7431381118881119
User 102609 improves AUC. Keeping the model.
Training on augumented user 53546 15/50 current_auc = 0.7431381118881119
User 53546 AUC after training: 0.7431818181818182
User 53546 improves AUC. Keeping the model.
Training on augumented user 114051 16/50 current_auc = 0.7431818181818182
User 114051 AUC after training: 0.7430944055944055
User 114051 does not improve AUC. Reverting changes.
Training on augumented user 90867 17/50 current_auc = 0.7431818181818182
User 90867 AUC after training: 0.7424388111888112
User 90867 does not improve AUC. Reverting changes.
Training on augumented user 48540 18/50 current_auc = 0.7431818181818182
User 48540 AUC after training: 0.7441870629370629
User 48540 improves AUC. Keeping the model.
Training on augumented user 47059 19/50 current_auc = 0.7441870629370629
User 47059 AUC after training: 0.7450611888111888
User 47059 improves AUC. Keeping the model.
Training on augumented user 48161 20/50 current_auc = 0.7450611888111888
User 48161 AUC after training: 0.7450174825174826
User 48161 does not improve AUC. Reverting changes.
Training on augumented user 129013 21/50 current_auc = 0.7450611888111888
User 129013 AUC after training: 0.7445367132867133
User 129013 does not improve AUC. Reverting changes.
Training on augumented user 92851 22/50 current_auc = 0.7450611888111888
User 92851 AUC after training: 0.7442963286713287
User 92851 does not improve AUC. Reverting changes.
Training on augumented user 16801 23/50 current_auc = 0.7450611888111888
User 16801 AUC after training: 0.7449737762237763
User 16801 does not improve AUC. Reverting changes.
Training on augumented user 16936 24/50 current_auc = 0.7450611888111888
User 16936 AUC after training: 0.7421328671328671
User 16936 does not improve AUC. Reverting changes.
Training on augumented user 118775 25/50 current_auc = 0.7450611888111888
User 118775 AUC after training: 0.7445367132867132
User 118775 does not improve AUC. Reverting changes.
Training on augumented user 92439 26/50 current_auc = 0.7450611888111888
User 92439 AUC after training: 0.7447552447552448
User 92439 does not improve AUC. Reverting changes.
Training on augumented user 36131 27/50 current_auc = 0.7450611888111888
User 36131 AUC after training: 0.7448426573426573
User 36131 does not improve AUC. Reverting changes.
Training on augumented user 76833 28/50 current_auc = 0.7450611888111888
User 76833 AUC after training: 0.7447989510489511
User 76833 does not improve AUC. Reverting changes.
Training on augumented user 113714 29/50 current_auc = 0.7450611888111888
User 113714 AUC after training: 0.7433566433566433
User 113714 does not improve AUC. Reverting changes.
Training on augumented user 19414 30/50 current_auc = 0.7450611888111888
User 19414 AUC after training: 0.7429632867132867
User 19414 does not improve AUC. Reverting changes.
Training on augumented user 111188 31/50 current_auc = 0.7450611888111888
User 111188 AUC after training: 0.7431818181818182
User 111188 does not improve AUC. Reverting changes.
Training on augumented user 24638 32/50 current_auc = 0.7450611888111888
User 24638 AUC after training: 0.7446022727272726
User 24638 does not improve AUC. Reverting changes.
Training on augumented user 62659 33/50 current_auc = 0.7450611888111888
User 62659 AUC after training: 0.7443618881118881
User 62659 does not improve AUC. Reverting changes.
Training on augumented user 90950 34/50 current_auc = 0.7450611888111888
User 90950 AUC after training: 0.7438811188811189
User 90950 does not improve AUC. Reverting changes.
Training on augumented user 118704 35/50 current_auc = 0.7450611888111888
User 118704 AUC after training: 0.7448863636363636
User 118704 does not improve AUC. Reverting changes.
Training on augumented user 41141 36/50 current_auc = 0.7450611888111888
User 41141 AUC after training: 0.7444055944055944
User 41141 does not improve AUC. Reverting changes.
Training on augumented user 77349 37/50 current_auc = 0.7450611888111888
User 77349 AUC after training: 0.7443618881118881
User 77349 does not improve AUC. Reverting changes.
Training on augumented user 101541 38/50 current_auc = 0.7450611888111888
User 101541 AUC after training: 0.7440122377622377
User 101541 does not improve AUC. Reverting changes.
Training on augumented user 125461 39/50 current_auc = 0.7450611888111888
User 125461 AUC after training: 0.7437937062937063
User 125461 does not improve AUC. Reverting changes.
Training on augumented user 121836 40/50 current_auc = 0.7450611888111888
User 121836 AUC after training: 0.7447115384615386
User 121836 does not improve AUC. Reverting changes.
Training on augumented user 72312 41/50 current_auc = 0.7450611888111888
User 72312 AUC after training: 0.7447115384615385
User 72312 does not improve AUC. Reverting changes.
Training on augumented user 41453 42/50 current_auc = 0.7450611888111888
User 41453 AUC after training: 0.744645979020979
User 41453 does not improve AUC. Reverting changes.
Training on augumented user 124776 43/50 current_auc = 0.7450611888111888
User 124776 AUC after training: 0.74375
User 124776 does not improve AUC. Reverting changes.
Training on augumented user 58787 44/50 current_auc = 0.7450611888111888
User 58787 AUC after training: 0.7444055944055944
User 58787 does not improve AUC. Reverting changes.
Training on augumented user 15667 45/50 current_auc = 0.7450611888111888
User 15667 AUC after training: 0.7449300699300699
User 15667 does not improve AUC. Reverting changes.
Training on augumented user 64893 46/50 current_auc = 0.7450611888111888
User 64893 AUC after training: 0.7424388111888112
User 64893 does not improve AUC. Reverting changes.
Training on augumented user 123182 47/50 current_auc = 0.7450611888111888
User 123182 AUC after training: 0.7444055944055945
User 123182 does not improve AUC. Reverting changes.
Training on augumented user 114326 48/50 current_auc = 0.7450611888111888
User 114326 AUC after training: 0.7445804195804195
User 114326 does not improve AUC. Reverting changes.
Training on augumented user 62121 49/50 current_auc = 0.7450611888111888
User 62121 AUC after training: 0.7449300699300699
User 62121 does not improve AUC. Reverting changes.
[2024-12-02 17:45:25.814671] start test user 27560 13/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:26.651474] start test user 27560 13/568 recall augumented users by random, augumented_users = [7977, 58713, 64159, 118958, 1577, 14349, 84342, 61695, 122746, 26841, 25879, 52225, 70361, 30012, 137647, 103431, 9918, 137790, 21329, 62606, 75740, 122731, 82168, 117706, 98359, 89630, 679, 110225, 14296, 4549, 43384, 36922, 104564, 131052, 132668, 32816, 65559, 74722, 15536, 63717, 129481, 38109, 83020, 10548, 125789, 33500, 116535, 80277, 16590, 92130]
[2024-12-02 17:45:26.688092] user = 27560 Cloud 13/568
[2024-12-02 17:45:26.699841] user = 27560 Local 13/568
[2024-12-02 17:45:26.733535] user = 27560 Local+ 13/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:29.290407] user = 27560 MPDA- 13/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5138888888888888
Training on augumented user 7977 0/50 current_auc = 0.5138888888888888
User 7977 AUC after training: 0.5138888888888888
User 7977 does not improve AUC. Reverting changes.
Training on augumented user 58713 1/50 current_auc = 0.5138888888888888
User 58713 AUC after training: 0.5138888888888888
User 58713 does not improve AUC. Reverting changes.
Training on augumented user 64159 2/50 current_auc = 0.5138888888888888
User 64159 AUC after training: 0.5138888888888888
User 64159 does not improve AUC. Reverting changes.
Training on augumented user 118958 3/50 current_auc = 0.5138888888888888
User 118958 AUC after training: 0.5138888888888888
User 118958 does not improve AUC. Reverting changes.
Training on augumented user 1577 4/50 current_auc = 0.5138888888888888
User 1577 AUC after training: 0.5138888888888888
User 1577 does not improve AUC. Reverting changes.
Training on augumented user 14349 5/50 current_auc = 0.5138888888888888
User 14349 AUC after training: 0.5138888888888888
User 14349 does not improve AUC. Reverting changes.
Training on augumented user 84342 6/50 current_auc = 0.5138888888888888
User 84342 AUC after training: 0.5138888888888888
User 84342 does not improve AUC. Reverting changes.
Training on augumented user 61695 7/50 current_auc = 0.5138888888888888
User 61695 AUC after training: 0.5138888888888888
User 61695 does not improve AUC. Reverting changes.
Training on augumented user 122746 8/50 current_auc = 0.5138888888888888
User 122746 AUC after training: 0.5138888888888888
User 122746 does not improve AUC. Reverting changes.
Training on augumented user 26841 9/50 current_auc = 0.5138888888888888
User 26841 AUC after training: 0.5138888888888888
User 26841 does not improve AUC. Reverting changes.
Training on augumented user 25879 10/50 current_auc = 0.5138888888888888
User 25879 AUC after training: 0.5138888888888888
User 25879 does not improve AUC. Reverting changes.
Training on augumented user 52225 11/50 current_auc = 0.5138888888888888
User 52225 AUC after training: 0.5
User 52225 does not improve AUC. Reverting changes.
Training on augumented user 70361 12/50 current_auc = 0.5138888888888888
User 70361 AUC after training: 0.5138888888888888
User 70361 does not improve AUC. Reverting changes.
Training on augumented user 30012 13/50 current_auc = 0.5138888888888888
User 30012 AUC after training: 0.5138888888888888
User 30012 does not improve AUC. Reverting changes.
Training on augumented user 137647 14/50 current_auc = 0.5138888888888888
User 137647 AUC after training: 0.5138888888888888
User 137647 does not improve AUC. Reverting changes.
Training on augumented user 103431 15/50 current_auc = 0.5138888888888888
User 103431 AUC after training: 0.5138888888888888
User 103431 does not improve AUC. Reverting changes.
Training on augumented user 9918 16/50 current_auc = 0.5138888888888888
User 9918 AUC after training: 0.5138888888888888
User 9918 does not improve AUC. Reverting changes.
Training on augumented user 137790 17/50 current_auc = 0.5138888888888888
User 137790 AUC after training: 0.5138888888888888
User 137790 does not improve AUC. Reverting changes.
Training on augumented user 21329 18/50 current_auc = 0.5138888888888888
User 21329 AUC after training: 0.5
User 21329 does not improve AUC. Reverting changes.
Training on augumented user 62606 19/50 current_auc = 0.5138888888888888
User 62606 AUC after training: 0.5138888888888888
User 62606 does not improve AUC. Reverting changes.
Training on augumented user 75740 20/50 current_auc = 0.5138888888888888
User 75740 AUC after training: 0.5138888888888888
User 75740 does not improve AUC. Reverting changes.
Training on augumented user 122731 21/50 current_auc = 0.5138888888888888
User 122731 AUC after training: 0.5277777777777778
User 122731 improves AUC. Keeping the model.
Training on augumented user 82168 22/50 current_auc = 0.5277777777777778
User 82168 AUC after training: 0.5277777777777778
User 82168 does not improve AUC. Reverting changes.
Training on augumented user 117706 23/50 current_auc = 0.5277777777777778
User 117706 AUC after training: 0.5277777777777778
User 117706 does not improve AUC. Reverting changes.
Training on augumented user 98359 24/50 current_auc = 0.5277777777777778
User 98359 AUC after training: 0.5277777777777778
User 98359 does not improve AUC. Reverting changes.
Training on augumented user 89630 25/50 current_auc = 0.5277777777777778
User 89630 AUC after training: 0.5277777777777778
User 89630 does not improve AUC. Reverting changes.
Training on augumented user 679 26/50 current_auc = 0.5277777777777778
User 679 AUC after training: 0.5277777777777778
User 679 does not improve AUC. Reverting changes.
Training on augumented user 110225 27/50 current_auc = 0.5277777777777778
User 110225 AUC after training: 0.5277777777777778
User 110225 does not improve AUC. Reverting changes.
Training on augumented user 14296 28/50 current_auc = 0.5277777777777778
User 14296 AUC after training: 0.5277777777777778
User 14296 does not improve AUC. Reverting changes.
Training on augumented user 4549 29/50 current_auc = 0.5277777777777778
User 4549 AUC after training: 0.5138888888888888
User 4549 does not improve AUC. Reverting changes.
Training on augumented user 43384 30/50 current_auc = 0.5277777777777778
User 43384 AUC after training: 0.5277777777777778
User 43384 does not improve AUC. Reverting changes.
Training on augumented user 36922 31/50 current_auc = 0.5277777777777778
User 36922 AUC after training: 0.5277777777777778
User 36922 does not improve AUC. Reverting changes.
Training on augumented user 104564 32/50 current_auc = 0.5277777777777778
User 104564 AUC after training: 0.5277777777777778
User 104564 does not improve AUC. Reverting changes.
Training on augumented user 131052 33/50 current_auc = 0.5277777777777778
User 131052 AUC after training: 0.5277777777777778
User 131052 does not improve AUC. Reverting changes.
Training on augumented user 132668 34/50 current_auc = 0.5277777777777778
User 132668 AUC after training: 0.5277777777777778
User 132668 does not improve AUC. Reverting changes.
Training on augumented user 32816 35/50 current_auc = 0.5277777777777778
User 32816 AUC after training: 0.5277777777777778
User 32816 does not improve AUC. Reverting changes.
Training on augumented user 65559 36/50 current_auc = 0.5277777777777778
User 65559 AUC after training: 0.5277777777777778
User 65559 does not improve AUC. Reverting changes.
Training on augumented user 74722 37/50 current_auc = 0.5277777777777778
User 74722 AUC after training: 0.5277777777777778
User 74722 does not improve AUC. Reverting changes.
Training on augumented user 15536 38/50 current_auc = 0.5277777777777778
User 15536 AUC after training: 0.5277777777777778
User 15536 does not improve AUC. Reverting changes.
Training on augumented user 63717 39/50 current_auc = 0.5277777777777778
User 63717 AUC after training: 0.5277777777777778
User 63717 does not improve AUC. Reverting changes.
Training on augumented user 129481 40/50 current_auc = 0.5277777777777778
User 129481 AUC after training: 0.5277777777777778
User 129481 does not improve AUC. Reverting changes.
Training on augumented user 38109 41/50 current_auc = 0.5277777777777778
User 38109 AUC after training: 0.5277777777777778
User 38109 does not improve AUC. Reverting changes.
Training on augumented user 83020 42/50 current_auc = 0.5277777777777778
User 83020 AUC after training: 0.5277777777777778
User 83020 does not improve AUC. Reverting changes.
Training on augumented user 10548 43/50 current_auc = 0.5277777777777778
User 10548 AUC after training: 0.5277777777777778
User 10548 does not improve AUC. Reverting changes.
Training on augumented user 125789 44/50 current_auc = 0.5277777777777778
User 125789 AUC after training: 0.5277777777777778
User 125789 does not improve AUC. Reverting changes.
Training on augumented user 33500 45/50 current_auc = 0.5277777777777778
User 33500 AUC after training: 0.5277777777777778
User 33500 does not improve AUC. Reverting changes.
Training on augumented user 116535 46/50 current_auc = 0.5277777777777778
User 116535 AUC after training: 0.5277777777777778
User 116535 does not improve AUC. Reverting changes.
Training on augumented user 80277 47/50 current_auc = 0.5277777777777778
User 80277 AUC after training: 0.5277777777777778
User 80277 does not improve AUC. Reverting changes.
Training on augumented user 16590 48/50 current_auc = 0.5277777777777778
User 16590 AUC after training: 0.5277777777777778
User 16590 does not improve AUC. Reverting changes.
Training on augumented user 92130 49/50 current_auc = 0.5277777777777778
User 92130 AUC after training: 0.5277777777777778
User 92130 does not improve AUC. Reverting changes.
[2024-12-02 17:46:02.515645] start test user 27589 14/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:03.106820] start test user 27589 14/568 recall augumented users by random, augumented_users = [51100, 98259, 109196, 79408, 96406, 132389, 107055, 48950, 57609, 136271, 47383, 39412, 68436, 53025, 53210, 43330, 133439, 64637, 130539, 33679, 26919, 32702, 130665, 43833, 114930, 107038, 56831, 33662, 8412, 107405, 66011, 15750, 75024, 101843, 116909, 120383, 94611, 55790, 117645, 22585, 27234, 22407, 19368, 64832, 107972, 76692, 74202, 108128, 47323, 15070]
[2024-12-02 17:46:03.121972] user = 27589 Cloud 14/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:46:03.135968] user = 27589 Local 14/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:46:03.191860] user = 27589 Local+ 14/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:46:05.927375] user = 27589 MPDA- 14/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 51100 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51100 AUC after training: 0.5
User 51100 does not improve AUC. Reverting changes.
Training on augumented user 98259 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98259 AUC after training: 0.5
User 98259 does not improve AUC. Reverting changes.
Training on augumented user 109196 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109196 AUC after training: 0.5
User 109196 does not improve AUC. Reverting changes.
Training on augumented user 79408 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79408 AUC after training: 0.5
User 79408 does not improve AUC. Reverting changes.
Training on augumented user 96406 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96406 AUC after training: 0.5
User 96406 does not improve AUC. Reverting changes.
Training on augumented user 132389 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132389 AUC after training: 0.5
User 132389 does not improve AUC. Reverting changes.
Training on augumented user 107055 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107055 AUC after training: 0.5
User 107055 does not improve AUC. Reverting changes.
Training on augumented user 48950 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48950 AUC after training: 0.5
User 48950 does not improve AUC. Reverting changes.
Training on augumented user 57609 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57609 AUC after training: 0.5
User 57609 does not improve AUC. Reverting changes.
Training on augumented user 136271 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136271 AUC after training: 0.5
User 136271 does not improve AUC. Reverting changes.
Training on augumented user 47383 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47383 AUC after training: 0.5
User 47383 does not improve AUC. Reverting changes.
Training on augumented user 39412 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39412 AUC after training: 0.5
User 39412 does not improve AUC. Reverting changes.
Training on augumented user 68436 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68436 AUC after training: 0.5
User 68436 does not improve AUC. Reverting changes.
Training on augumented user 53025 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53025 AUC after training: 0.5
User 53025 does not improve AUC. Reverting changes.
Training on augumented user 53210 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53210 AUC after training: 0.5
User 53210 does not improve AUC. Reverting changes.
Training on augumented user 43330 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43330 AUC after training: 0.5
User 43330 does not improve AUC. Reverting changes.
Training on augumented user 133439 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133439 AUC after training: 0.5
User 133439 does not improve AUC. Reverting changes.
Training on augumented user 64637 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64637 AUC after training: 0.5
User 64637 does not improve AUC. Reverting changes.
Training on augumented user 130539 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130539 AUC after training: 0.5
User 130539 does not improve AUC. Reverting changes.
Training on augumented user 33679 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33679 AUC after training: 0.5
User 33679 does not improve AUC. Reverting changes.
Training on augumented user 26919 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26919 AUC after training: 0.5
User 26919 does not improve AUC. Reverting changes.
Training on augumented user 32702 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32702 AUC after training: 0.5
User 32702 does not improve AUC. Reverting changes.
Training on augumented user 130665 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130665 AUC after training: 0.5
User 130665 does not improve AUC. Reverting changes.
Training on augumented user 43833 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43833 AUC after training: 0.5
User 43833 does not improve AUC. Reverting changes.
Training on augumented user 114930 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114930 AUC after training: 0.5
User 114930 does not improve AUC. Reverting changes.
Training on augumented user 107038 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107038 AUC after training: 0.5
User 107038 does not improve AUC. Reverting changes.
Training on augumented user 56831 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56831 AUC after training: 0.5
User 56831 does not improve AUC. Reverting changes.
Training on augumented user 33662 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33662 AUC after training: 0.5
User 33662 does not improve AUC. Reverting changes.
Training on augumented user 8412 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8412 AUC after training: 0.5
User 8412 does not improve AUC. Reverting changes.
Training on augumented user 107405 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107405 AUC after training: 0.5
User 107405 does not improve AUC. Reverting changes.
Training on augumented user 66011 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66011 AUC after training: 0.5
User 66011 does not improve AUC. Reverting changes.
Training on augumented user 15750 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15750 AUC after training: 0.5
User 15750 does not improve AUC. Reverting changes.
Training on augumented user 75024 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75024 AUC after training: 0.5
User 75024 does not improve AUC. Reverting changes.
Training on augumented user 101843 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101843 AUC after training: 0.5
User 101843 does not improve AUC. Reverting changes.
Training on augumented user 116909 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116909 AUC after training: 0.5
User 116909 does not improve AUC. Reverting changes.
Training on augumented user 120383 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120383 AUC after training: 0.5
User 120383 does not improve AUC. Reverting changes.
Training on augumented user 94611 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94611 AUC after training: 0.5
User 94611 does not improve AUC. Reverting changes.
Training on augumented user 55790 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55790 AUC after training: 0.5
User 55790 does not improve AUC. Reverting changes.
Training on augumented user 117645 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117645 AUC after training: 0.5
User 117645 does not improve AUC. Reverting changes.
Training on augumented user 22585 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22585 AUC after training: 0.5
User 22585 does not improve AUC. Reverting changes.
Training on augumented user 27234 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27234 AUC after training: 0.5
User 27234 does not improve AUC. Reverting changes.
Training on augumented user 22407 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22407 AUC after training: 0.5
User 22407 does not improve AUC. Reverting changes.
Training on augumented user 19368 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19368 AUC after training: 0.5
User 19368 does not improve AUC. Reverting changes.
Training on augumented user 64832 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64832 AUC after training: 0.5
User 64832 does not improve AUC. Reverting changes.
Training on augumented user 107972 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107972 AUC after training: 0.5
User 107972 does not improve AUC. Reverting changes.
Training on augumented user 76692 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76692 AUC after training: 0.5
User 76692 does not improve AUC. Reverting changes.
Training on augumented user 74202 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74202 AUC after training: 0.5
User 74202 does not improve AUC. Reverting changes.
Training on augumented user 108128 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108128 AUC after training: 0.5
User 108128 does not improve AUC. Reverting changes.
Training on augumented user 47323 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47323 AUC after training: 0.5
User 47323 does not improve AUC. Reverting changes.
Training on augumented user 15070 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15070 AUC after training: 0.5
User 15070 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:46:39.299619] start test user 27610 15/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:39.936162] start test user 27610 15/568 recall augumented users by random, augumented_users = [41239, 128935, 133868, 38001, 40964, 13062, 29690, 89379, 137154, 38708, 133691, 2712, 42591, 56417, 64390, 41959, 122068, 75581, 34684, 27955, 107791, 64400, 89456, 8435, 49178, 90473, 3559, 86198, 120442, 61665, 67238, 78596, 42589, 101369, 109805, 132979, 102607, 119365, 122095, 30453, 8290, 95202, 116612, 107233, 52048, 82438, 19943, 69573, 130954, 86197]
[2024-12-02 17:46:39.951351] user = 27610 Cloud 15/568
[2024-12-02 17:46:39.970394] user = 27610 Local 15/568
[2024-12-02 17:46:40.127954] user = 27610 Local+ 15/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:42.155007] user = 27610 MPDA- 15/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6116666666666667
Training on augumented user 41239 0/50 current_auc = 0.6116666666666667
User 41239 AUC after training: 0.611
User 41239 does not improve AUC. Reverting changes.
Training on augumented user 128935 1/50 current_auc = 0.6116666666666667
User 128935 AUC after training: 0.6114999999999999
User 128935 does not improve AUC. Reverting changes.
Training on augumented user 133868 2/50 current_auc = 0.6116666666666667
User 133868 AUC after training: 0.6113333333333333
User 133868 does not improve AUC. Reverting changes.
Training on augumented user 38001 3/50 current_auc = 0.6116666666666667
User 38001 AUC after training: 0.6108333333333333
User 38001 does not improve AUC. Reverting changes.
Training on augumented user 40964 4/50 current_auc = 0.6116666666666667
User 40964 AUC after training: 0.6111666666666666
User 40964 does not improve AUC. Reverting changes.
Training on augumented user 13062 5/50 current_auc = 0.6116666666666667
User 13062 AUC after training: 0.6113333333333334
User 13062 does not improve AUC. Reverting changes.
Training on augumented user 29690 6/50 current_auc = 0.6116666666666667
User 29690 AUC after training: 0.6125
User 29690 improves AUC. Keeping the model.
Training on augumented user 89379 7/50 current_auc = 0.6125
User 89379 AUC after training: 0.6121666666666666
User 89379 does not improve AUC. Reverting changes.
Training on augumented user 137154 8/50 current_auc = 0.6125
User 137154 AUC after training: 0.6128333333333333
User 137154 improves AUC. Keeping the model.
Training on augumented user 38708 9/50 current_auc = 0.6128333333333333
User 38708 AUC after training: 0.6123333333333334
User 38708 does not improve AUC. Reverting changes.
Training on augumented user 133691 10/50 current_auc = 0.6128333333333333
User 133691 AUC after training: 0.6146666666666667
User 133691 improves AUC. Keeping the model.
Training on augumented user 2712 11/50 current_auc = 0.6146666666666667
User 2712 AUC after training: 0.6138333333333333
User 2712 does not improve AUC. Reverting changes.
Training on augumented user 42591 12/50 current_auc = 0.6146666666666667
User 42591 AUC after training: 0.6145
User 42591 does not improve AUC. Reverting changes.
Training on augumented user 56417 13/50 current_auc = 0.6146666666666667
User 56417 AUC after training: 0.6151666666666666
User 56417 improves AUC. Keeping the model.
Training on augumented user 64390 14/50 current_auc = 0.6151666666666666
User 64390 AUC after training: 0.6153333333333333
User 64390 improves AUC. Keeping the model.
Training on augumented user 41959 15/50 current_auc = 0.6153333333333333
User 41959 AUC after training: 0.615
User 41959 does not improve AUC. Reverting changes.
Training on augumented user 122068 16/50 current_auc = 0.6153333333333333
User 122068 AUC after training: 0.6153333333333333
User 122068 does not improve AUC. Reverting changes.
Training on augumented user 75581 17/50 current_auc = 0.6153333333333333
User 75581 AUC after training: 0.6148333333333333
User 75581 does not improve AUC. Reverting changes.
Training on augumented user 34684 18/50 current_auc = 0.6153333333333333
User 34684 AUC after training: 0.6151666666666666
User 34684 does not improve AUC. Reverting changes.
Training on augumented user 27955 19/50 current_auc = 0.6153333333333333
User 27955 AUC after training: 0.6154999999999999
User 27955 improves AUC. Keeping the model.
Training on augumented user 107791 20/50 current_auc = 0.6154999999999999
User 107791 AUC after training: 0.6141666666666667
User 107791 does not improve AUC. Reverting changes.
Training on augumented user 64400 21/50 current_auc = 0.6154999999999999
User 64400 AUC after training: 0.6166666666666667
User 64400 improves AUC. Keeping the model.
Training on augumented user 89456 22/50 current_auc = 0.6166666666666667
User 89456 AUC after training: 0.6163333333333334
User 89456 does not improve AUC. Reverting changes.
Training on augumented user 8435 23/50 current_auc = 0.6166666666666667
User 8435 AUC after training: 0.6166666666666667
User 8435 does not improve AUC. Reverting changes.
Training on augumented user 49178 24/50 current_auc = 0.6166666666666667
User 49178 AUC after training: 0.6163333333333334
User 49178 does not improve AUC. Reverting changes.
Training on augumented user 90473 25/50 current_auc = 0.6166666666666667
User 90473 AUC after training: 0.6161666666666666
User 90473 does not improve AUC. Reverting changes.
Training on augumented user 3559 26/50 current_auc = 0.6166666666666667
User 3559 AUC after training: 0.6165
User 3559 does not improve AUC. Reverting changes.
Training on augumented user 86198 27/50 current_auc = 0.6166666666666667
User 86198 AUC after training: 0.616
User 86198 does not improve AUC. Reverting changes.
Training on augumented user 120442 28/50 current_auc = 0.6166666666666667
User 120442 AUC after training: 0.6156666666666667
User 120442 does not improve AUC. Reverting changes.
Training on augumented user 61665 29/50 current_auc = 0.6166666666666667
User 61665 AUC after training: 0.6161666666666668
User 61665 does not improve AUC. Reverting changes.
Training on augumented user 67238 30/50 current_auc = 0.6166666666666667
User 67238 AUC after training: 0.6158333333333333
User 67238 does not improve AUC. Reverting changes.
Training on augumented user 78596 31/50 current_auc = 0.6166666666666667
User 78596 AUC after training: 0.6161666666666668
User 78596 does not improve AUC. Reverting changes.
Training on augumented user 42589 32/50 current_auc = 0.6166666666666667
User 42589 AUC after training: 0.6163333333333334
User 42589 does not improve AUC. Reverting changes.
Training on augumented user 101369 33/50 current_auc = 0.6166666666666667
User 101369 AUC after training: 0.6165
User 101369 does not improve AUC. Reverting changes.
Training on augumented user 109805 34/50 current_auc = 0.6166666666666667
User 109805 AUC after training: 0.6166666666666667
User 109805 does not improve AUC. Reverting changes.
Training on augumented user 132979 35/50 current_auc = 0.6166666666666667
User 132979 AUC after training: 0.6165
User 132979 does not improve AUC. Reverting changes.
Training on augumented user 102607 36/50 current_auc = 0.6166666666666667
User 102607 AUC after training: 0.6160000000000001
User 102607 does not improve AUC. Reverting changes.
Training on augumented user 119365 37/50 current_auc = 0.6166666666666667
User 119365 AUC after training: 0.6155
User 119365 does not improve AUC. Reverting changes.
Training on augumented user 122095 38/50 current_auc = 0.6166666666666667
User 122095 AUC after training: 0.6163333333333334
User 122095 does not improve AUC. Reverting changes.
Training on augumented user 30453 39/50 current_auc = 0.6166666666666667
User 30453 AUC after training: 0.6165
User 30453 does not improve AUC. Reverting changes.
Training on augumented user 8290 40/50 current_auc = 0.6166666666666667
User 8290 AUC after training: 0.6163333333333334
User 8290 does not improve AUC. Reverting changes.
Training on augumented user 95202 41/50 current_auc = 0.6166666666666667
User 95202 AUC after training: 0.6158333333333335
User 95202 does not improve AUC. Reverting changes.
Training on augumented user 116612 42/50 current_auc = 0.6166666666666667
User 116612 AUC after training: 0.6145
User 116612 does not improve AUC. Reverting changes.
Training on augumented user 107233 43/50 current_auc = 0.6166666666666667
User 107233 AUC after training: 0.6161666666666668
User 107233 does not improve AUC. Reverting changes.
Training on augumented user 52048 44/50 current_auc = 0.6166666666666667
User 52048 AUC after training: 0.6158333333333333
User 52048 does not improve AUC. Reverting changes.
Training on augumented user 82438 45/50 current_auc = 0.6166666666666667
User 82438 AUC after training: 0.616
User 82438 does not improve AUC. Reverting changes.
Training on augumented user 19943 46/50 current_auc = 0.6166666666666667
User 19943 AUC after training: 0.6163333333333334
User 19943 does not improve AUC. Reverting changes.
Training on augumented user 69573 47/50 current_auc = 0.6166666666666667
User 69573 AUC after training: 0.6163333333333334
User 69573 does not improve AUC. Reverting changes.
Training on augumented user 130954 48/50 current_auc = 0.6166666666666667
User 130954 AUC after training: 0.6145
User 130954 does not improve AUC. Reverting changes.
Training on augumented user 86197 49/50 current_auc = 0.6166666666666667
User 86197 AUC after training: 0.6153333333333333
User 86197 does not improve AUC. Reverting changes.
[2024-12-02 17:47:12.587015] start test user 27638 16/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:13.342872] start test user 27638 16/568 recall augumented users by random, augumented_users = [104656, 70146, 55117, 39933, 100190, 1831, 90348, 77447, 40520, 31809, 65513, 37864, 134082, 12535, 95878, 27255, 67212, 59366, 105202, 131854, 1014, 43513, 115078, 97919, 96583, 11820, 82520, 56791, 104805, 35472, 105092, 77141, 41976, 134566, 51484, 136097, 65286, 82367, 36600, 3037, 107601, 42031, 77035, 10536, 37140, 35551, 55689, 31752, 33202, 68718]
[2024-12-02 17:47:13.385870] user = 27638 Cloud 16/568
[2024-12-02 17:47:13.395482] user = 27638 Local 16/568
[2024-12-02 17:47:13.608439] user = 27638 Local+ 16/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:16.506196] user = 27638 MPDA- 16/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.25
Training on augumented user 104656 0/50 current_auc = 0.25
User 104656 AUC after training: 0.25
User 104656 does not improve AUC. Reverting changes.
Training on augumented user 70146 1/50 current_auc = 0.25
User 70146 AUC after training: 0.25
User 70146 does not improve AUC. Reverting changes.
Training on augumented user 55117 2/50 current_auc = 0.25
User 55117 AUC after training: 0.25
User 55117 does not improve AUC. Reverting changes.
Training on augumented user 39933 3/50 current_auc = 0.25
User 39933 AUC after training: 0.25
User 39933 does not improve AUC. Reverting changes.
Training on augumented user 100190 4/50 current_auc = 0.25
User 100190 AUC after training: 0.25
User 100190 does not improve AUC. Reverting changes.
Training on augumented user 1831 5/50 current_auc = 0.25
User 1831 AUC after training: 0.25
User 1831 does not improve AUC. Reverting changes.
Training on augumented user 90348 6/50 current_auc = 0.25
User 90348 AUC after training: 0.25
User 90348 does not improve AUC. Reverting changes.
Training on augumented user 77447 7/50 current_auc = 0.25
User 77447 AUC after training: 0.25
User 77447 does not improve AUC. Reverting changes.
Training on augumented user 40520 8/50 current_auc = 0.25
User 40520 AUC after training: 0.25
User 40520 does not improve AUC. Reverting changes.
Training on augumented user 31809 9/50 current_auc = 0.25
User 31809 AUC after training: 0.25
User 31809 does not improve AUC. Reverting changes.
Training on augumented user 65513 10/50 current_auc = 0.25
User 65513 AUC after training: 0.25
User 65513 does not improve AUC. Reverting changes.
Training on augumented user 37864 11/50 current_auc = 0.25
User 37864 AUC after training: 0.25
User 37864 does not improve AUC. Reverting changes.
Training on augumented user 134082 12/50 current_auc = 0.25
User 134082 AUC after training: 0.25
User 134082 does not improve AUC. Reverting changes.
Training on augumented user 12535 13/50 current_auc = 0.25
User 12535 AUC after training: 0.25
User 12535 does not improve AUC. Reverting changes.
Training on augumented user 95878 14/50 current_auc = 0.25
User 95878 AUC after training: 0.25
User 95878 does not improve AUC. Reverting changes.
Training on augumented user 27255 15/50 current_auc = 0.25
User 27255 AUC after training: 0.25
User 27255 does not improve AUC. Reverting changes.
Training on augumented user 67212 16/50 current_auc = 0.25
User 67212 AUC after training: 0.25
User 67212 does not improve AUC. Reverting changes.
Training on augumented user 59366 17/50 current_auc = 0.25
User 59366 AUC after training: 0.25
User 59366 does not improve AUC. Reverting changes.
Training on augumented user 105202 18/50 current_auc = 0.25
User 105202 AUC after training: 0.25
User 105202 does not improve AUC. Reverting changes.
Training on augumented user 131854 19/50 current_auc = 0.25
User 131854 AUC after training: 0.25
User 131854 does not improve AUC. Reverting changes.
Training on augumented user 1014 20/50 current_auc = 0.25
User 1014 AUC after training: 0.25
User 1014 does not improve AUC. Reverting changes.
Training on augumented user 43513 21/50 current_auc = 0.25
User 43513 AUC after training: 0.25
User 43513 does not improve AUC. Reverting changes.
Training on augumented user 115078 22/50 current_auc = 0.25
User 115078 AUC after training: 0.25
User 115078 does not improve AUC. Reverting changes.
Training on augumented user 97919 23/50 current_auc = 0.25
User 97919 AUC after training: 0.25
User 97919 does not improve AUC. Reverting changes.
Training on augumented user 96583 24/50 current_auc = 0.25
User 96583 AUC after training: 0.25
User 96583 does not improve AUC. Reverting changes.
Training on augumented user 11820 25/50 current_auc = 0.25
User 11820 AUC after training: 0.25
User 11820 does not improve AUC. Reverting changes.
Training on augumented user 82520 26/50 current_auc = 0.25
User 82520 AUC after training: 0.25
User 82520 does not improve AUC. Reverting changes.
Training on augumented user 56791 27/50 current_auc = 0.25
User 56791 AUC after training: 0.25
User 56791 does not improve AUC. Reverting changes.
Training on augumented user 104805 28/50 current_auc = 0.25
User 104805 AUC after training: 0.25
User 104805 does not improve AUC. Reverting changes.
Training on augumented user 35472 29/50 current_auc = 0.25
User 35472 AUC after training: 0.25
User 35472 does not improve AUC. Reverting changes.
Training on augumented user 105092 30/50 current_auc = 0.25
User 105092 AUC after training: 0.25
User 105092 does not improve AUC. Reverting changes.
Training on augumented user 77141 31/50 current_auc = 0.25
User 77141 AUC after training: 0.25
User 77141 does not improve AUC. Reverting changes.
Training on augumented user 41976 32/50 current_auc = 0.25
User 41976 AUC after training: 0.25
User 41976 does not improve AUC. Reverting changes.
Training on augumented user 134566 33/50 current_auc = 0.25
User 134566 AUC after training: 0.25
User 134566 does not improve AUC. Reverting changes.
Training on augumented user 51484 34/50 current_auc = 0.25
User 51484 AUC after training: 0.25
User 51484 does not improve AUC. Reverting changes.
Training on augumented user 136097 35/50 current_auc = 0.25
User 136097 AUC after training: 0.25
User 136097 does not improve AUC. Reverting changes.
Training on augumented user 65286 36/50 current_auc = 0.25
User 65286 AUC after training: 0.25
User 65286 does not improve AUC. Reverting changes.
Training on augumented user 82367 37/50 current_auc = 0.25
User 82367 AUC after training: 0.25
User 82367 does not improve AUC. Reverting changes.
Training on augumented user 36600 38/50 current_auc = 0.25
User 36600 AUC after training: 0.25
User 36600 does not improve AUC. Reverting changes.
Training on augumented user 3037 39/50 current_auc = 0.25
User 3037 AUC after training: 0.25
User 3037 does not improve AUC. Reverting changes.
Training on augumented user 107601 40/50 current_auc = 0.25
User 107601 AUC after training: 0.25
User 107601 does not improve AUC. Reverting changes.
Training on augumented user 42031 41/50 current_auc = 0.25
User 42031 AUC after training: 0.25
User 42031 does not improve AUC. Reverting changes.
Training on augumented user 77035 42/50 current_auc = 0.25
User 77035 AUC after training: 0.25
User 77035 does not improve AUC. Reverting changes.
Training on augumented user 10536 43/50 current_auc = 0.25
User 10536 AUC after training: 0.25
User 10536 does not improve AUC. Reverting changes.
Training on augumented user 37140 44/50 current_auc = 0.25
User 37140 AUC after training: 0.25
User 37140 does not improve AUC. Reverting changes.
Training on augumented user 35551 45/50 current_auc = 0.25
User 35551 AUC after training: 0.25
User 35551 does not improve AUC. Reverting changes.
Training on augumented user 55689 46/50 current_auc = 0.25
User 55689 AUC after training: 0.25
User 55689 does not improve AUC. Reverting changes.
Training on augumented user 31752 47/50 current_auc = 0.25
User 31752 AUC after training: 0.25
User 31752 does not improve AUC. Reverting changes.
Training on augumented user 33202 48/50 current_auc = 0.25
User 33202 AUC after training: 0.25
User 33202 does not improve AUC. Reverting changes.
Training on augumented user 68718 49/50 current_auc = 0.25
User 68718 AUC after training: 0.25
User 68718 does not improve AUC. Reverting changes.
[2024-12-02 17:47:48.297525] start test user 27647 17/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:48.837460] start test user 27647 17/568 recall augumented users by random, augumented_users = [67841, 9175, 138246, 61032, 51479, 117677, 47847, 101404, 24252, 101278, 74664, 61845, 8867, 39213, 121572, 129288, 30776, 34094, 12505, 112989, 89312, 18346, 82864, 114177, 29433, 117682, 28349, 112892, 55448, 106587, 64861, 131833, 19850, 42671, 72259, 56031, 136933, 129583, 38584, 93726, 138228, 130700, 53338, 103256, 103325, 50330, 70364, 106697, 5504, 62839]
[2024-12-02 17:47:48.866819] user = 27647 Cloud 17/568
[2024-12-02 17:47:48.950070] user = 27647 Local 17/568
[2024-12-02 17:47:49.017319] user = 27647 Local+ 17/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:52.123478] user = 27647 MPDA- 17/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7184005421890884
Training on augumented user 67841 0/50 current_auc = 0.7184005421890884
User 67841 AUC after training: 0.7183817161790731
User 67841 does not improve AUC. Reverting changes.
Training on augumented user 9175 1/50 current_auc = 0.7184005421890884
User 9175 AUC after training: 0.7184193681991038
User 9175 improves AUC. Keeping the model.
Training on augumented user 138246 2/50 current_auc = 0.7184193681991038
User 138246 AUC after training: 0.7186170413042658
User 138246 improves AUC. Keeping the model.
Training on augumented user 61032 3/50 current_auc = 0.7186170413042658
User 61032 AUC after training: 0.7184946722391657
User 61032 does not improve AUC. Reverting changes.
Training on augumented user 51479 4/50 current_auc = 0.7186170413042658
User 51479 AUC after training: 0.7184758462291503
User 51479 does not improve AUC. Reverting changes.
Training on augumented user 117677 5/50 current_auc = 0.7186170413042658
User 117677 AUC after training: 0.7185699762792274
User 117677 does not improve AUC. Reverting changes.
Training on augumented user 47847 6/50 current_auc = 0.7186170413042658
User 47847 AUC after training: 0.7188711924394745
User 47847 improves AUC. Keeping the model.
Training on augumented user 101404 7/50 current_auc = 0.7188711924394745
User 101404 AUC after training: 0.7187864753944049
User 101404 does not improve AUC. Reverting changes.
Training on augumented user 24252 8/50 current_auc = 0.7188711924394745
User 24252 AUC after training: 0.7188711924394744
User 24252 does not improve AUC. Reverting changes.
Training on augumented user 101278 9/50 current_auc = 0.7188711924394745
User 101278 AUC after training: 0.7189653224895516
User 101278 improves AUC. Keeping the model.
Training on augumented user 74664 10/50 current_auc = 0.7189653224895516
User 74664 AUC after training: 0.7189088444595053
User 74664 does not improve AUC. Reverting changes.
Training on augumented user 61845 11/50 current_auc = 0.7189653224895516
User 61845 AUC after training: 0.7188053014044204
User 61845 does not improve AUC. Reverting changes.
Training on augumented user 8867 12/50 current_auc = 0.7189653224895516
User 8867 AUC after training: 0.7188758989419782
User 8867 does not improve AUC. Reverting changes.
Training on augumented user 39213 13/50 current_auc = 0.7189653224895516
User 39213 AUC after training: 0.7189370834745284
User 39213 does not improve AUC. Reverting changes.
Training on augumented user 121572 14/50 current_auc = 0.7189653224895516
User 121572 AUC after training: 0.7190594525396288
User 121572 improves AUC. Keeping the model.
Training on augumented user 129288 15/50 current_auc = 0.7190594525396288
User 129288 AUC after training: 0.7190123875145902
User 129288 does not improve AUC. Reverting changes.
Training on augumented user 30776 16/50 current_auc = 0.7190594525396288
User 30776 AUC after training: 0.7190782785496441
User 30776 improves AUC. Keeping the model.
Training on augumented user 34094 17/50 current_auc = 0.7190782785496441
User 34094 AUC after training: 0.7188994314544975
User 34094 does not improve AUC. Reverting changes.
Training on augumented user 12505 18/50 current_auc = 0.7190782785496441
User 12505 AUC after training: 0.7190971045596597
User 12505 improves AUC. Keeping the model.
Training on augumented user 112989 19/50 current_auc = 0.7190971045596597
User 112989 AUC after training: 0.7185417372642042
User 112989 does not improve AUC. Reverting changes.
Training on augumented user 89312 20/50 current_auc = 0.7190971045596597
User 89312 AUC after training: 0.7183064121390113
User 89312 does not improve AUC. Reverting changes.
Training on augumented user 18346 21/50 current_auc = 0.7190971045596597
User 18346 AUC after training: 0.7190029745095824
User 18346 does not improve AUC. Reverting changes.
Training on augumented user 82864 22/50 current_auc = 0.7190971045596597
User 82864 AUC after training: 0.719050039534621
User 82864 does not improve AUC. Reverting changes.
Training on augumented user 114177 23/50 current_auc = 0.7190971045596597
User 114177 AUC after training: 0.7190923980571557
User 114177 does not improve AUC. Reverting changes.
Training on augumented user 29433 24/50 current_auc = 0.7190971045596597
User 29433 AUC after training: 0.7190594525396288
User 29433 does not improve AUC. Reverting changes.
Training on augumented user 117682 25/50 current_auc = 0.7190971045596597
User 117682 AUC after training: 0.7189653224895516
User 117682 does not improve AUC. Reverting changes.
Training on augumented user 28349 26/50 current_auc = 0.7190971045596597
User 28349 AUC after training: 0.7192759516548063
User 28349 improves AUC. Keeping the model.
Training on augumented user 112892 27/50 current_auc = 0.7192759516548063
User 112892 AUC after training: 0.7193465491923642
User 112892 improves AUC. Keeping the model.
Training on augumented user 55448 28/50 current_auc = 0.7193465491923642
User 55448 AUC after training: 0.7194500922474492
User 55448 improves AUC. Keeping the model.
Training on augumented user 106587 29/50 current_auc = 0.7194500922474492
User 106587 AUC after training: 0.7190218005195981
User 106587 does not improve AUC. Reverting changes.
Training on augumented user 64861 30/50 current_auc = 0.7194500922474492
User 64861 AUC after training: 0.7192288866297677
User 64861 does not improve AUC. Reverting changes.
Training on augumented user 131833 31/50 current_auc = 0.7194500922474492
User 131833 AUC after training: 0.719257125644791
User 131833 does not improve AUC. Reverting changes.
Training on augumented user 19850 32/50 current_auc = 0.7194500922474492
User 19850 AUC after training: 0.7196007003275726
User 19850 improves AUC. Keeping the model.
Training on augumented user 42671 33/50 current_auc = 0.7196007003275726
User 42671 AUC after training: 0.7194312662374336
User 42671 does not improve AUC. Reverting changes.
Training on augumented user 72259 34/50 current_auc = 0.7196007003275726
User 72259 AUC after training: 0.7193794947098913
User 72259 does not improve AUC. Reverting changes.
Training on augumented user 56031 35/50 current_auc = 0.7196007003275726
User 56031 AUC after training: 0.7191818216047291
User 56031 does not improve AUC. Reverting changes.
Training on augumented user 136933 36/50 current_auc = 0.7196007003275726
User 136933 AUC after training: 0.7194924507699839
User 136933 does not improve AUC. Reverting changes.
Training on augumented user 129583 37/50 current_auc = 0.7196007003275726
User 129583 AUC after training: 0.7187958883994127
User 129583 does not improve AUC. Reverting changes.
Training on augumented user 38584 38/50 current_auc = 0.7196007003275726
User 38584 AUC after training: 0.7197136563876652
User 38584 improves AUC. Keeping the model.
Training on augumented user 93726 39/50 current_auc = 0.7197136563876652
User 93726 AUC after training: 0.7196336458450996
User 93726 does not improve AUC. Reverting changes.
Training on augumented user 138228 40/50 current_auc = 0.7197136563876652
User 138228 AUC after training: 0.7196289393425958
User 138228 does not improve AUC. Reverting changes.
Training on augumented user 130700 41/50 current_auc = 0.7197136563876652
User 130700 AUC after training: 0.7194077337249144
User 130700 does not improve AUC. Reverting changes.
Training on augumented user 53338 42/50 current_auc = 0.7197136563876652
User 53338 AUC after training: 0.7193136036748372
User 53338 does not improve AUC. Reverting changes.
Training on augumented user 103256 43/50 current_auc = 0.7197136563876652
User 103256 AUC after training: 0.719553635302534
User 103256 does not improve AUC. Reverting changes.
Training on augumented user 103325 44/50 current_auc = 0.7197136563876652
User 103325 AUC after training: 0.7196524718551149
User 103325 does not improve AUC. Reverting changes.
Training on augumented user 50330 45/50 current_auc = 0.7197136563876652
User 50330 AUC after training: 0.7194971572724878
User 50330 does not improve AUC. Reverting changes.
Training on augumented user 70364 46/50 current_auc = 0.7197136563876652
User 70364 AUC after training: 0.7193700817048835
User 70364 does not improve AUC. Reverting changes.
Training on augumented user 106697 47/50 current_auc = 0.7197136563876652
User 106697 AUC after training: 0.719614819835084
User 106697 does not improve AUC. Reverting changes.
Training on augumented user 5504 48/50 current_auc = 0.7197136563876652
User 5504 AUC after training: 0.7189747354945593
User 5504 does not improve AUC. Reverting changes.
Training on augumented user 62839 49/50 current_auc = 0.7197136563876652
User 62839 AUC after training: 0.719793666930231
User 62839 improves AUC. Keeping the model.
[2024-12-02 17:48:27.492970] start test user 27666 18/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:28.109941] start test user 27666 18/568 recall augumented users by random, augumented_users = [90306, 32606, 99695, 50632, 9486, 102696, 34649, 62203, 102190, 33439, 10653, 6359, 28331, 65628, 44404, 72247, 2092, 104476, 67866, 91880, 106563, 43703, 19720, 32151, 29887, 6503, 48, 64963, 59882, 105762, 54130, 6752, 35666, 67476, 107232, 51497, 126334, 11119, 75710, 96411, 54345, 17510, 110368, 60711, 44325, 2275, 29859, 23113, 32049, 88917]
[2024-12-02 17:48:28.127147] user = 27666 Cloud 18/568
[2024-12-02 17:48:28.149044] user = 27666 Local 18/568
[2024-12-02 17:48:28.468090] user = 27666 Local+ 18/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:30.896886] user = 27666 MPDA- 18/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.700625
Training on augumented user 90306 0/50 current_auc = 0.700625
User 90306 AUC after training: 0.701875
User 90306 improves AUC. Keeping the model.
Training on augumented user 32606 1/50 current_auc = 0.701875
User 32606 AUC after training: 0.703125
User 32606 improves AUC. Keeping the model.
Training on augumented user 99695 2/50 current_auc = 0.703125
User 99695 AUC after training: 0.701875
User 99695 does not improve AUC. Reverting changes.
Training on augumented user 50632 3/50 current_auc = 0.703125
User 50632 AUC after training: 0.703125
User 50632 does not improve AUC. Reverting changes.
Training on augumented user 9486 4/50 current_auc = 0.703125
User 9486 AUC after training: 0.700625
User 9486 does not improve AUC. Reverting changes.
Training on augumented user 102696 5/50 current_auc = 0.703125
User 102696 AUC after training: 0.7025
User 102696 does not improve AUC. Reverting changes.
Training on augumented user 34649 6/50 current_auc = 0.703125
User 34649 AUC after training: 0.70375
User 34649 improves AUC. Keeping the model.
Training on augumented user 62203 7/50 current_auc = 0.70375
User 62203 AUC after training: 0.7025
User 62203 does not improve AUC. Reverting changes.
Training on augumented user 102190 8/50 current_auc = 0.70375
User 102190 AUC after training: 0.7025
User 102190 does not improve AUC. Reverting changes.
Training on augumented user 33439 9/50 current_auc = 0.70375
User 33439 AUC after training: 0.7025
User 33439 does not improve AUC. Reverting changes.
Training on augumented user 10653 10/50 current_auc = 0.70375
User 10653 AUC after training: 0.70375
User 10653 does not improve AUC. Reverting changes.
Training on augumented user 6359 11/50 current_auc = 0.70375
User 6359 AUC after training: 0.703125
User 6359 does not improve AUC. Reverting changes.
Training on augumented user 28331 12/50 current_auc = 0.70375
User 28331 AUC after training: 0.704375
User 28331 improves AUC. Keeping the model.
Training on augumented user 65628 13/50 current_auc = 0.704375
User 65628 AUC after training: 0.703125
User 65628 does not improve AUC. Reverting changes.
Training on augumented user 44404 14/50 current_auc = 0.704375
User 44404 AUC after training: 0.704375
User 44404 does not improve AUC. Reverting changes.
Training on augumented user 72247 15/50 current_auc = 0.704375
User 72247 AUC after training: 0.7025
User 72247 does not improve AUC. Reverting changes.
Training on augumented user 2092 16/50 current_auc = 0.704375
User 2092 AUC after training: 0.7025
User 2092 does not improve AUC. Reverting changes.
Training on augumented user 104476 17/50 current_auc = 0.704375
User 104476 AUC after training: 0.703125
User 104476 does not improve AUC. Reverting changes.
Training on augumented user 67866 18/50 current_auc = 0.704375
User 67866 AUC after training: 0.701875
User 67866 does not improve AUC. Reverting changes.
Training on augumented user 91880 19/50 current_auc = 0.704375
User 91880 AUC after training: 0.7024999999999999
User 91880 does not improve AUC. Reverting changes.
Training on augumented user 106563 20/50 current_auc = 0.704375
User 106563 AUC after training: 0.704375
User 106563 does not improve AUC. Reverting changes.
Training on augumented user 43703 21/50 current_auc = 0.704375
User 43703 AUC after training: 0.701875
User 43703 does not improve AUC. Reverting changes.
Training on augumented user 19720 22/50 current_auc = 0.704375
User 19720 AUC after training: 0.7050000000000001
User 19720 improves AUC. Keeping the model.
Training on augumented user 32151 23/50 current_auc = 0.7050000000000001
User 32151 AUC after training: 0.704375
User 32151 does not improve AUC. Reverting changes.
Training on augumented user 29887 24/50 current_auc = 0.7050000000000001
User 29887 AUC after training: 0.70375
User 29887 does not improve AUC. Reverting changes.
Training on augumented user 6503 25/50 current_auc = 0.7050000000000001
User 6503 AUC after training: 0.7050000000000001
User 6503 does not improve AUC. Reverting changes.
Training on augumented user 48 26/50 current_auc = 0.7050000000000001
User 48 AUC after training: 0.7050000000000001
User 48 does not improve AUC. Reverting changes.
Training on augumented user 64963 27/50 current_auc = 0.7050000000000001
User 64963 AUC after training: 0.70375
User 64963 does not improve AUC. Reverting changes.
Training on augumented user 59882 28/50 current_auc = 0.7050000000000001
User 59882 AUC after training: 0.7050000000000001
User 59882 does not improve AUC. Reverting changes.
Training on augumented user 105762 29/50 current_auc = 0.7050000000000001
User 105762 AUC after training: 0.704375
User 105762 does not improve AUC. Reverting changes.
Training on augumented user 54130 30/50 current_auc = 0.7050000000000001
User 54130 AUC after training: 0.708125
User 54130 improves AUC. Keeping the model.
Training on augumented user 6752 31/50 current_auc = 0.708125
User 6752 AUC after training: 0.7075
User 6752 does not improve AUC. Reverting changes.
Training on augumented user 35666 32/50 current_auc = 0.708125
User 35666 AUC after training: 0.70625
User 35666 does not improve AUC. Reverting changes.
Training on augumented user 67476 33/50 current_auc = 0.708125
User 67476 AUC after training: 0.704375
User 67476 does not improve AUC. Reverting changes.
Training on augumented user 107232 34/50 current_auc = 0.708125
User 107232 AUC after training: 0.7025
User 107232 does not improve AUC. Reverting changes.
Training on augumented user 51497 35/50 current_auc = 0.708125
User 51497 AUC after training: 0.70625
User 51497 does not improve AUC. Reverting changes.
Training on augumented user 126334 36/50 current_auc = 0.708125
User 126334 AUC after training: 0.7068749999999999
User 126334 does not improve AUC. Reverting changes.
Training on augumented user 11119 37/50 current_auc = 0.708125
User 11119 AUC after training: 0.70625
User 11119 does not improve AUC. Reverting changes.
Training on augumented user 75710 38/50 current_auc = 0.708125
User 75710 AUC after training: 0.7075
User 75710 does not improve AUC. Reverting changes.
Training on augumented user 96411 39/50 current_auc = 0.708125
User 96411 AUC after training: 0.708125
User 96411 does not improve AUC. Reverting changes.
Training on augumented user 54345 40/50 current_auc = 0.708125
User 54345 AUC after training: 0.70625
User 54345 does not improve AUC. Reverting changes.
Training on augumented user 17510 41/50 current_auc = 0.708125
User 17510 AUC after training: 0.7075
User 17510 does not improve AUC. Reverting changes.
Training on augumented user 110368 42/50 current_auc = 0.708125
User 110368 AUC after training: 0.7075
User 110368 does not improve AUC. Reverting changes.
Training on augumented user 60711 43/50 current_auc = 0.708125
User 60711 AUC after training: 0.70875
User 60711 improves AUC. Keeping the model.
Training on augumented user 44325 44/50 current_auc = 0.70875
User 44325 AUC after training: 0.70875
User 44325 does not improve AUC. Reverting changes.
Training on augumented user 2275 45/50 current_auc = 0.70875
User 2275 AUC after training: 0.703125
User 2275 does not improve AUC. Reverting changes.
Training on augumented user 29859 46/50 current_auc = 0.70875
User 29859 AUC after training: 0.708125
User 29859 does not improve AUC. Reverting changes.
Training on augumented user 23113 47/50 current_auc = 0.70875
User 23113 AUC after training: 0.70875
User 23113 does not improve AUC. Reverting changes.
Training on augumented user 32049 48/50 current_auc = 0.70875
User 32049 AUC after training: 0.7068749999999999
User 32049 does not improve AUC. Reverting changes.
Training on augumented user 88917 49/50 current_auc = 0.70875
User 88917 AUC after training: 0.7075
User 88917 does not improve AUC. Reverting changes.
[2024-12-02 17:49:02.015234] start test user 27673 19/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:02.629005] start test user 27673 19/568 recall augumented users by random, augumented_users = [16690, 112619, 47834, 107240, 56302, 92848, 64146, 89888, 86066, 128021, 38810, 115159, 4509, 25643, 49024, 29778, 69724, 116313, 87524, 112321, 33703, 106178, 44442, 96879, 89348, 114774, 68603, 88747, 107574, 73014, 69164, 30485, 90540, 19639, 86348, 73785, 63769, 84483, 38233, 81171, 14885, 117093, 122718, 65528, 104367, 59411, 131081, 112084, 97454, 8367]
[2024-12-02 17:49:02.645345] user = 27673 Cloud 19/568
[2024-12-02 17:49:02.659496] user = 27673 Local 19/568
[2024-12-02 17:49:02.844507] user = 27673 Local+ 19/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:05.711090] user = 27673 MPDA- 19/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9545454545454546
Training on augumented user 16690 0/50 current_auc = 0.9545454545454546
User 16690 AUC after training: 0.9545454545454546
User 16690 does not improve AUC. Reverting changes.
Training on augumented user 112619 1/50 current_auc = 0.9545454545454546
User 112619 AUC after training: 0.9545454545454546
User 112619 does not improve AUC. Reverting changes.
Training on augumented user 47834 2/50 current_auc = 0.9545454545454546
User 47834 AUC after training: 0.9545454545454546
User 47834 does not improve AUC. Reverting changes.
Training on augumented user 107240 3/50 current_auc = 0.9545454545454546
User 107240 AUC after training: 0.9545454545454546
User 107240 does not improve AUC. Reverting changes.
Training on augumented user 56302 4/50 current_auc = 0.9545454545454546
User 56302 AUC after training: 0.9545454545454546
User 56302 does not improve AUC. Reverting changes.
Training on augumented user 92848 5/50 current_auc = 0.9545454545454546
User 92848 AUC after training: 0.9545454545454546
User 92848 does not improve AUC. Reverting changes.
Training on augumented user 64146 6/50 current_auc = 0.9545454545454546
User 64146 AUC after training: 0.9545454545454546
User 64146 does not improve AUC. Reverting changes.
Training on augumented user 89888 7/50 current_auc = 0.9545454545454546
User 89888 AUC after training: 0.9545454545454546
User 89888 does not improve AUC. Reverting changes.
Training on augumented user 86066 8/50 current_auc = 0.9545454545454546
User 86066 AUC after training: 0.9545454545454546
User 86066 does not improve AUC. Reverting changes.
Training on augumented user 128021 9/50 current_auc = 0.9545454545454546
User 128021 AUC after training: 0.9545454545454546
User 128021 does not improve AUC. Reverting changes.
Training on augumented user 38810 10/50 current_auc = 0.9545454545454546
User 38810 AUC after training: 0.9545454545454546
User 38810 does not improve AUC. Reverting changes.
Training on augumented user 115159 11/50 current_auc = 0.9545454545454546
User 115159 AUC after training: 0.9545454545454546
User 115159 does not improve AUC. Reverting changes.
Training on augumented user 4509 12/50 current_auc = 0.9545454545454546
User 4509 AUC after training: 0.9545454545454546
User 4509 does not improve AUC. Reverting changes.
Training on augumented user 25643 13/50 current_auc = 0.9545454545454546
User 25643 AUC after training: 0.9545454545454546
User 25643 does not improve AUC. Reverting changes.
Training on augumented user 49024 14/50 current_auc = 0.9545454545454546
User 49024 AUC after training: 0.9545454545454546
User 49024 does not improve AUC. Reverting changes.
Training on augumented user 29778 15/50 current_auc = 0.9545454545454546
User 29778 AUC after training: 0.9545454545454546
User 29778 does not improve AUC. Reverting changes.
Training on augumented user 69724 16/50 current_auc = 0.9545454545454546
User 69724 AUC after training: 0.9545454545454546
User 69724 does not improve AUC. Reverting changes.
Training on augumented user 116313 17/50 current_auc = 0.9545454545454546
User 116313 AUC after training: 0.9545454545454546
User 116313 does not improve AUC. Reverting changes.
Training on augumented user 87524 18/50 current_auc = 0.9545454545454546
User 87524 AUC after training: 0.9545454545454546
User 87524 does not improve AUC. Reverting changes.
Training on augumented user 112321 19/50 current_auc = 0.9545454545454546
User 112321 AUC after training: 0.9545454545454546
User 112321 does not improve AUC. Reverting changes.
Training on augumented user 33703 20/50 current_auc = 0.9545454545454546
User 33703 AUC after training: 0.9545454545454546
User 33703 does not improve AUC. Reverting changes.
Training on augumented user 106178 21/50 current_auc = 0.9545454545454546
User 106178 AUC after training: 0.9545454545454546
User 106178 does not improve AUC. Reverting changes.
Training on augumented user 44442 22/50 current_auc = 0.9545454545454546
User 44442 AUC after training: 0.9545454545454546
User 44442 does not improve AUC. Reverting changes.
Training on augumented user 96879 23/50 current_auc = 0.9545454545454546
User 96879 AUC after training: 0.9545454545454546
User 96879 does not improve AUC. Reverting changes.
Training on augumented user 89348 24/50 current_auc = 0.9545454545454546
User 89348 AUC after training: 0.9545454545454546
User 89348 does not improve AUC. Reverting changes.
Training on augumented user 114774 25/50 current_auc = 0.9545454545454546
User 114774 AUC after training: 0.9545454545454546
User 114774 does not improve AUC. Reverting changes.
Training on augumented user 68603 26/50 current_auc = 0.9545454545454546
User 68603 AUC after training: 0.9545454545454546
User 68603 does not improve AUC. Reverting changes.
Training on augumented user 88747 27/50 current_auc = 0.9545454545454546
User 88747 AUC after training: 0.9545454545454546
User 88747 does not improve AUC. Reverting changes.
Training on augumented user 107574 28/50 current_auc = 0.9545454545454546
User 107574 AUC after training: 0.9545454545454546
User 107574 does not improve AUC. Reverting changes.
Training on augumented user 73014 29/50 current_auc = 0.9545454545454546
User 73014 AUC after training: 0.9545454545454546
User 73014 does not improve AUC. Reverting changes.
Training on augumented user 69164 30/50 current_auc = 0.9545454545454546
User 69164 AUC after training: 0.9545454545454546
User 69164 does not improve AUC. Reverting changes.
Training on augumented user 30485 31/50 current_auc = 0.9545454545454546
User 30485 AUC after training: 0.9545454545454546
User 30485 does not improve AUC. Reverting changes.
Training on augumented user 90540 32/50 current_auc = 0.9545454545454546
User 90540 AUC after training: 0.9545454545454546
User 90540 does not improve AUC. Reverting changes.
Training on augumented user 19639 33/50 current_auc = 0.9545454545454546
User 19639 AUC after training: 0.9545454545454546
User 19639 does not improve AUC. Reverting changes.
Training on augumented user 86348 34/50 current_auc = 0.9545454545454546
User 86348 AUC after training: 0.9545454545454546
User 86348 does not improve AUC. Reverting changes.
Training on augumented user 73785 35/50 current_auc = 0.9545454545454546
User 73785 AUC after training: 0.9545454545454546
User 73785 does not improve AUC. Reverting changes.
Training on augumented user 63769 36/50 current_auc = 0.9545454545454546
User 63769 AUC after training: 0.9545454545454546
User 63769 does not improve AUC. Reverting changes.
Training on augumented user 84483 37/50 current_auc = 0.9545454545454546
User 84483 AUC after training: 0.9545454545454546
User 84483 does not improve AUC. Reverting changes.
Training on augumented user 38233 38/50 current_auc = 0.9545454545454546
User 38233 AUC after training: 0.9545454545454546
User 38233 does not improve AUC. Reverting changes.
Training on augumented user 81171 39/50 current_auc = 0.9545454545454546
User 81171 AUC after training: 0.9545454545454546
User 81171 does not improve AUC. Reverting changes.
Training on augumented user 14885 40/50 current_auc = 0.9545454545454546
User 14885 AUC after training: 0.9545454545454546
User 14885 does not improve AUC. Reverting changes.
Training on augumented user 117093 41/50 current_auc = 0.9545454545454546
User 117093 AUC after training: 0.9545454545454546
User 117093 does not improve AUC. Reverting changes.
Training on augumented user 122718 42/50 current_auc = 0.9545454545454546
User 122718 AUC after training: 0.9545454545454546
User 122718 does not improve AUC. Reverting changes.
Training on augumented user 65528 43/50 current_auc = 0.9545454545454546
User 65528 AUC after training: 0.9545454545454546
User 65528 does not improve AUC. Reverting changes.
Training on augumented user 104367 44/50 current_auc = 0.9545454545454546
User 104367 AUC after training: 0.9545454545454546
User 104367 does not improve AUC. Reverting changes.
Training on augumented user 59411 45/50 current_auc = 0.9545454545454546
User 59411 AUC after training: 0.9545454545454546
User 59411 does not improve AUC. Reverting changes.
Training on augumented user 131081 46/50 current_auc = 0.9545454545454546
User 131081 AUC after training: 0.9545454545454546
User 131081 does not improve AUC. Reverting changes.
Training on augumented user 112084 47/50 current_auc = 0.9545454545454546
User 112084 AUC after training: 0.9545454545454546
User 112084 does not improve AUC. Reverting changes.
Training on augumented user 97454 48/50 current_auc = 0.9545454545454546
User 97454 AUC after training: 0.9545454545454546
User 97454 does not improve AUC. Reverting changes.
Training on augumented user 8367 49/50 current_auc = 0.9545454545454546
User 8367 AUC after training: 0.9545454545454546
User 8367 does not improve AUC. Reverting changes.
[2024-12-02 17:49:38.597951] start test user 27679 20/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:39.208090] start test user 27679 20/568 recall augumented users by random, augumented_users = [69416, 39349, 60913, 21443, 245, 21007, 81839, 26225, 84085, 29286, 82218, 123671, 97734, 80238, 78628, 27532, 24307, 47058, 27366, 75547, 38041, 5876, 1450, 50028, 92007, 38178, 54919, 113494, 71542, 7843, 60918, 106840, 20275, 87505, 35577, 57355, 44071, 30771, 74154, 49331, 61115, 113078, 9532, 130061, 56209, 14350, 26347, 138145, 16386, 108353]
[2024-12-02 17:49:39.230695] user = 27679 Cloud 20/568
[2024-12-02 17:49:39.258475] user = 27679 Local 20/568
[2024-12-02 17:49:39.417630] user = 27679 Local+ 20/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:42.419646] user = 27679 MPDA- 20/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5733333333333334
Training on augumented user 69416 0/50 current_auc = 0.5733333333333334
User 69416 AUC after training: 0.5733333333333334
User 69416 does not improve AUC. Reverting changes.
Training on augumented user 39349 1/50 current_auc = 0.5733333333333334
User 39349 AUC after training: 0.5733333333333334
User 39349 does not improve AUC. Reverting changes.
Training on augumented user 60913 2/50 current_auc = 0.5733333333333334
User 60913 AUC after training: 0.5866666666666667
User 60913 improves AUC. Keeping the model.
Training on augumented user 21443 3/50 current_auc = 0.5866666666666667
User 21443 AUC after training: 0.5866666666666667
User 21443 does not improve AUC. Reverting changes.
Training on augumented user 245 4/50 current_auc = 0.5866666666666667
User 245 AUC after training: 0.5733333333333334
User 245 does not improve AUC. Reverting changes.
Training on augumented user 21007 5/50 current_auc = 0.5866666666666667
User 21007 AUC after training: 0.5866666666666667
User 21007 does not improve AUC. Reverting changes.
Training on augumented user 81839 6/50 current_auc = 0.5866666666666667
User 81839 AUC after training: 0.5866666666666667
User 81839 does not improve AUC. Reverting changes.
Training on augumented user 26225 7/50 current_auc = 0.5866666666666667
User 26225 AUC after training: 0.5866666666666667
User 26225 does not improve AUC. Reverting changes.
Training on augumented user 84085 8/50 current_auc = 0.5866666666666667
User 84085 AUC after training: 0.5733333333333334
User 84085 does not improve AUC. Reverting changes.
Training on augumented user 29286 9/50 current_auc = 0.5866666666666667
User 29286 AUC after training: 0.5733333333333334
User 29286 does not improve AUC. Reverting changes.
Training on augumented user 82218 10/50 current_auc = 0.5866666666666667
User 82218 AUC after training: 0.5866666666666667
User 82218 does not improve AUC. Reverting changes.
Training on augumented user 123671 11/50 current_auc = 0.5866666666666667
User 123671 AUC after training: 0.5733333333333334
User 123671 does not improve AUC. Reverting changes.
Training on augumented user 97734 12/50 current_auc = 0.5866666666666667
User 97734 AUC after training: 0.5866666666666667
User 97734 does not improve AUC. Reverting changes.
Training on augumented user 80238 13/50 current_auc = 0.5866666666666667
User 80238 AUC after training: 0.5733333333333334
User 80238 does not improve AUC. Reverting changes.
Training on augumented user 78628 14/50 current_auc = 0.5866666666666667
User 78628 AUC after training: 0.5866666666666667
User 78628 does not improve AUC. Reverting changes.
Training on augumented user 27532 15/50 current_auc = 0.5866666666666667
User 27532 AUC after training: 0.5866666666666667
User 27532 does not improve AUC. Reverting changes.
Training on augumented user 24307 16/50 current_auc = 0.5866666666666667
User 24307 AUC after training: 0.5733333333333334
User 24307 does not improve AUC. Reverting changes.
Training on augumented user 47058 17/50 current_auc = 0.5866666666666667
User 47058 AUC after training: 0.5866666666666667
User 47058 does not improve AUC. Reverting changes.
Training on augumented user 27366 18/50 current_auc = 0.5866666666666667
User 27366 AUC after training: 0.5733333333333334
User 27366 does not improve AUC. Reverting changes.
Training on augumented user 75547 19/50 current_auc = 0.5866666666666667
User 75547 AUC after training: 0.5866666666666667
User 75547 does not improve AUC. Reverting changes.
Training on augumented user 38041 20/50 current_auc = 0.5866666666666667
User 38041 AUC after training: 0.5733333333333334
User 38041 does not improve AUC. Reverting changes.
Training on augumented user 5876 21/50 current_auc = 0.5866666666666667
User 5876 AUC after training: 0.5866666666666667
User 5876 does not improve AUC. Reverting changes.
Training on augumented user 1450 22/50 current_auc = 0.5866666666666667
User 1450 AUC after training: 0.5866666666666667
User 1450 does not improve AUC. Reverting changes.
Training on augumented user 50028 23/50 current_auc = 0.5866666666666667
User 50028 AUC after training: 0.5733333333333334
User 50028 does not improve AUC. Reverting changes.
Training on augumented user 92007 24/50 current_auc = 0.5866666666666667
User 92007 AUC after training: 0.5733333333333334
User 92007 does not improve AUC. Reverting changes.
Training on augumented user 38178 25/50 current_auc = 0.5866666666666667
User 38178 AUC after training: 0.5866666666666667
User 38178 does not improve AUC. Reverting changes.
Training on augumented user 54919 26/50 current_auc = 0.5866666666666667
User 54919 AUC after training: 0.5733333333333334
User 54919 does not improve AUC. Reverting changes.
Training on augumented user 113494 27/50 current_auc = 0.5866666666666667
User 113494 AUC after training: 0.5866666666666667
User 113494 does not improve AUC. Reverting changes.
Training on augumented user 71542 28/50 current_auc = 0.5866666666666667
User 71542 AUC after training: 0.5866666666666667
User 71542 does not improve AUC. Reverting changes.
Training on augumented user 7843 29/50 current_auc = 0.5866666666666667
User 7843 AUC after training: 0.5733333333333334
User 7843 does not improve AUC. Reverting changes.
Training on augumented user 60918 30/50 current_auc = 0.5866666666666667
User 60918 AUC after training: 0.5866666666666667
User 60918 does not improve AUC. Reverting changes.
Training on augumented user 106840 31/50 current_auc = 0.5866666666666667
User 106840 AUC after training: 0.5866666666666667
User 106840 does not improve AUC. Reverting changes.
Training on augumented user 20275 32/50 current_auc = 0.5866666666666667
User 20275 AUC after training: 0.5866666666666667
User 20275 does not improve AUC. Reverting changes.
Training on augumented user 87505 33/50 current_auc = 0.5866666666666667
User 87505 AUC after training: 0.5733333333333334
User 87505 does not improve AUC. Reverting changes.
Training on augumented user 35577 34/50 current_auc = 0.5866666666666667
User 35577 AUC after training: 0.5733333333333334
User 35577 does not improve AUC. Reverting changes.
Training on augumented user 57355 35/50 current_auc = 0.5866666666666667
User 57355 AUC after training: 0.56
User 57355 does not improve AUC. Reverting changes.
Training on augumented user 44071 36/50 current_auc = 0.5866666666666667
User 44071 AUC after training: 0.5866666666666667
User 44071 does not improve AUC. Reverting changes.
Training on augumented user 30771 37/50 current_auc = 0.5866666666666667
User 30771 AUC after training: 0.5733333333333334
User 30771 does not improve AUC. Reverting changes.
Training on augumented user 74154 38/50 current_auc = 0.5866666666666667
User 74154 AUC after training: 0.5733333333333334
User 74154 does not improve AUC. Reverting changes.
Training on augumented user 49331 39/50 current_auc = 0.5866666666666667
User 49331 AUC after training: 0.5733333333333334
User 49331 does not improve AUC. Reverting changes.
Training on augumented user 61115 40/50 current_auc = 0.5866666666666667
User 61115 AUC after training: 0.5866666666666667
User 61115 does not improve AUC. Reverting changes.
Training on augumented user 113078 41/50 current_auc = 0.5866666666666667
User 113078 AUC after training: 0.5733333333333334
User 113078 does not improve AUC. Reverting changes.
Training on augumented user 9532 42/50 current_auc = 0.5866666666666667
User 9532 AUC after training: 0.5866666666666667
User 9532 does not improve AUC. Reverting changes.
Training on augumented user 130061 43/50 current_auc = 0.5866666666666667
User 130061 AUC after training: 0.5733333333333334
User 130061 does not improve AUC. Reverting changes.
Training on augumented user 56209 44/50 current_auc = 0.5866666666666667
User 56209 AUC after training: 0.5733333333333334
User 56209 does not improve AUC. Reverting changes.
Training on augumented user 14350 45/50 current_auc = 0.5866666666666667
User 14350 AUC after training: 0.5866666666666667
User 14350 does not improve AUC. Reverting changes.
Training on augumented user 26347 46/50 current_auc = 0.5866666666666667
User 26347 AUC after training: 0.5733333333333334
User 26347 does not improve AUC. Reverting changes.
Training on augumented user 138145 47/50 current_auc = 0.5866666666666667
User 138145 AUC after training: 0.5733333333333334
User 138145 does not improve AUC. Reverting changes.
Training on augumented user 16386 48/50 current_auc = 0.5866666666666667
User 16386 AUC after training: 0.5733333333333334
User 16386 does not improve AUC. Reverting changes.
Training on augumented user 108353 49/50 current_auc = 0.5866666666666667
User 108353 AUC after training: 0.5866666666666667
User 108353 does not improve AUC. Reverting changes.
[2024-12-02 17:50:11.902877] start test user 27719 21/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:12.436957] start test user 27719 21/568 recall augumented users by random, augumented_users = [130517, 120615, 78385, 107517, 41128, 136746, 24686, 126957, 31771, 87357, 53792, 111198, 13076, 37846, 117801, 15998, 35805, 34890, 102592, 104861, 14097, 34920, 47772, 4678, 81125, 128794, 62686, 58916, 60070, 64507, 102269, 123695, 133521, 10991, 106636, 108648, 70915, 105401, 12435, 83362, 5177, 3325, 8774, 126600, 41447, 78115, 39051, 110063, 31055, 98077]
[2024-12-02 17:50:12.453414] user = 27719 Cloud 21/568
[2024-12-02 17:50:12.465344] user = 27719 Local 21/568
[2024-12-02 17:50:12.510624] user = 27719 Local+ 21/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:14.703326] user = 27719 MPDA- 21/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.49255952380952384
Training on augumented user 130517 0/50 current_auc = 0.49255952380952384
User 130517 AUC after training: 0.49255952380952384
User 130517 does not improve AUC. Reverting changes.
Training on augumented user 120615 1/50 current_auc = 0.49255952380952384
User 120615 AUC after training: 0.4910714285714286
User 120615 does not improve AUC. Reverting changes.
Training on augumented user 78385 2/50 current_auc = 0.49255952380952384
User 78385 AUC after training: 0.49255952380952384
User 78385 does not improve AUC. Reverting changes.
Training on augumented user 107517 3/50 current_auc = 0.49255952380952384
User 107517 AUC after training: 0.49404761904761907
User 107517 improves AUC. Keeping the model.
Training on augumented user 41128 4/50 current_auc = 0.49404761904761907
User 41128 AUC after training: 0.49404761904761907
User 41128 does not improve AUC. Reverting changes.
Training on augumented user 136746 5/50 current_auc = 0.49404761904761907
User 136746 AUC after training: 0.4933035714285714
User 136746 does not improve AUC. Reverting changes.
Training on augumented user 24686 6/50 current_auc = 0.49404761904761907
User 24686 AUC after training: 0.49255952380952384
User 24686 does not improve AUC. Reverting changes.
Training on augumented user 126957 7/50 current_auc = 0.49404761904761907
User 126957 AUC after training: 0.49255952380952384
User 126957 does not improve AUC. Reverting changes.
Training on augumented user 31771 8/50 current_auc = 0.49404761904761907
User 31771 AUC after training: 0.49255952380952384
User 31771 does not improve AUC. Reverting changes.
Training on augumented user 87357 9/50 current_auc = 0.49404761904761907
User 87357 AUC after training: 0.49404761904761907
User 87357 does not improve AUC. Reverting changes.
Training on augumented user 53792 10/50 current_auc = 0.49404761904761907
User 53792 AUC after training: 0.48958333333333337
User 53792 does not improve AUC. Reverting changes.
Training on augumented user 111198 11/50 current_auc = 0.49404761904761907
User 111198 AUC after training: 0.49255952380952384
User 111198 does not improve AUC. Reverting changes.
Training on augumented user 13076 12/50 current_auc = 0.49404761904761907
User 13076 AUC after training: 0.49255952380952384
User 13076 does not improve AUC. Reverting changes.
Training on augumented user 37846 13/50 current_auc = 0.49404761904761907
User 37846 AUC after training: 0.48958333333333337
User 37846 does not improve AUC. Reverting changes.
Training on augumented user 117801 14/50 current_auc = 0.49404761904761907
User 117801 AUC after training: 0.49404761904761907
User 117801 does not improve AUC. Reverting changes.
Training on augumented user 15998 15/50 current_auc = 0.49404761904761907
User 15998 AUC after training: 0.49255952380952384
User 15998 does not improve AUC. Reverting changes.
Training on augumented user 35805 16/50 current_auc = 0.49404761904761907
User 35805 AUC after training: 0.49255952380952384
User 35805 does not improve AUC. Reverting changes.
Training on augumented user 34890 17/50 current_auc = 0.49404761904761907
User 34890 AUC after training: 0.49255952380952384
User 34890 does not improve AUC. Reverting changes.
Training on augumented user 102592 18/50 current_auc = 0.49404761904761907
User 102592 AUC after training: 0.48958333333333337
User 102592 does not improve AUC. Reverting changes.
Training on augumented user 104861 19/50 current_auc = 0.49404761904761907
User 104861 AUC after training: 0.4910714285714286
User 104861 does not improve AUC. Reverting changes.
Training on augumented user 14097 20/50 current_auc = 0.49404761904761907
User 14097 AUC after training: 0.49404761904761907
User 14097 does not improve AUC. Reverting changes.
Training on augumented user 34920 21/50 current_auc = 0.49404761904761907
User 34920 AUC after training: 0.4910714285714286
User 34920 does not improve AUC. Reverting changes.
Training on augumented user 47772 22/50 current_auc = 0.49404761904761907
User 47772 AUC after training: 0.4910714285714286
User 47772 does not improve AUC. Reverting changes.
Training on augumented user 4678 23/50 current_auc = 0.49404761904761907
User 4678 AUC after training: 0.4910714285714286
User 4678 does not improve AUC. Reverting changes.
Training on augumented user 81125 24/50 current_auc = 0.49404761904761907
User 81125 AUC after training: 0.49255952380952384
User 81125 does not improve AUC. Reverting changes.
Training on augumented user 128794 25/50 current_auc = 0.49404761904761907
User 128794 AUC after training: 0.4910714285714286
User 128794 does not improve AUC. Reverting changes.
Training on augumented user 62686 26/50 current_auc = 0.49404761904761907
User 62686 AUC after training: 0.48958333333333337
User 62686 does not improve AUC. Reverting changes.
Training on augumented user 58916 27/50 current_auc = 0.49404761904761907
User 58916 AUC after training: 0.4910714285714286
User 58916 does not improve AUC. Reverting changes.
Training on augumented user 60070 28/50 current_auc = 0.49404761904761907
User 60070 AUC after training: 0.4910714285714286
User 60070 does not improve AUC. Reverting changes.
Training on augumented user 64507 29/50 current_auc = 0.49404761904761907
User 64507 AUC after training: 0.49404761904761907
User 64507 does not improve AUC. Reverting changes.
Training on augumented user 102269 30/50 current_auc = 0.49404761904761907
User 102269 AUC after training: 0.4910714285714286
User 102269 does not improve AUC. Reverting changes.
Training on augumented user 123695 31/50 current_auc = 0.49404761904761907
User 123695 AUC after training: 0.49255952380952384
User 123695 does not improve AUC. Reverting changes.
Training on augumented user 133521 32/50 current_auc = 0.49404761904761907
User 133521 AUC after training: 0.49404761904761907
User 133521 does not improve AUC. Reverting changes.
Training on augumented user 10991 33/50 current_auc = 0.49404761904761907
User 10991 AUC after training: 0.49255952380952384
User 10991 does not improve AUC. Reverting changes.
Training on augumented user 106636 34/50 current_auc = 0.49404761904761907
User 106636 AUC after training: 0.49404761904761907
User 106636 does not improve AUC. Reverting changes.
Training on augumented user 108648 35/50 current_auc = 0.49404761904761907
User 108648 AUC after training: 0.49255952380952384
User 108648 does not improve AUC. Reverting changes.
Training on augumented user 70915 36/50 current_auc = 0.49404761904761907
User 70915 AUC after training: 0.49255952380952384
User 70915 does not improve AUC. Reverting changes.
Training on augumented user 105401 37/50 current_auc = 0.49404761904761907
User 105401 AUC after training: 0.4910714285714286
User 105401 does not improve AUC. Reverting changes.
Training on augumented user 12435 38/50 current_auc = 0.49404761904761907
User 12435 AUC after training: 0.4866071428571429
User 12435 does not improve AUC. Reverting changes.
Training on augumented user 83362 39/50 current_auc = 0.49404761904761907
User 83362 AUC after training: 0.49404761904761907
User 83362 does not improve AUC. Reverting changes.
Training on augumented user 5177 40/50 current_auc = 0.49404761904761907
User 5177 AUC after training: 0.4910714285714286
User 5177 does not improve AUC. Reverting changes.
Training on augumented user 3325 41/50 current_auc = 0.49404761904761907
User 3325 AUC after training: 0.49404761904761907
User 3325 does not improve AUC. Reverting changes.
Training on augumented user 8774 42/50 current_auc = 0.49404761904761907
User 8774 AUC after training: 0.49255952380952384
User 8774 does not improve AUC. Reverting changes.
Training on augumented user 126600 43/50 current_auc = 0.49404761904761907
User 126600 AUC after training: 0.49404761904761907
User 126600 does not improve AUC. Reverting changes.
Training on augumented user 41447 44/50 current_auc = 0.49404761904761907
User 41447 AUC after training: 0.4910714285714286
User 41447 does not improve AUC. Reverting changes.
Training on augumented user 78115 45/50 current_auc = 0.49404761904761907
User 78115 AUC after training: 0.49404761904761907
User 78115 does not improve AUC. Reverting changes.
Training on augumented user 39051 46/50 current_auc = 0.49404761904761907
User 39051 AUC after training: 0.49404761904761907
User 39051 does not improve AUC. Reverting changes.
Training on augumented user 110063 47/50 current_auc = 0.49404761904761907
User 110063 AUC after training: 0.49255952380952384
User 110063 does not improve AUC. Reverting changes.
Training on augumented user 31055 48/50 current_auc = 0.49404761904761907
User 31055 AUC after training: 0.49404761904761907
User 31055 does not improve AUC. Reverting changes.
Training on augumented user 98077 49/50 current_auc = 0.49404761904761907
User 98077 AUC after training: 0.49404761904761907
User 98077 does not improve AUC. Reverting changes.
[2024-12-02 17:50:43.891289] start test user 27769 22/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:44.619306] start test user 27769 22/568 recall augumented users by random, augumented_users = [11313, 127088, 14356, 20547, 50210, 65795, 88738, 53172, 87731, 107318, 35655, 11485, 89037, 94578, 43493, 75862, 98850, 17288, 113297, 121033, 120183, 39866, 29898, 75382, 133234, 32856, 21370, 52999, 75733, 2668, 36013, 65805, 43483, 103463, 19552, 67876, 76084, 116953, 41662, 109309, 93887, 29305, 4677, 39012, 134155, 3645, 29761, 134766, 116854, 41900]
[2024-12-02 17:50:44.650260] user = 27769 Cloud 22/568
[2024-12-02 17:50:44.715540] user = 27769 Local 22/568
[2024-12-02 17:50:44.809891] user = 27769 Local+ 22/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:47.308303] user = 27769 MPDA- 22/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6084656084656085
Training on augumented user 11313 0/50 current_auc = 0.6084656084656085
User 11313 AUC after training: 0.6084656084656085
User 11313 does not improve AUC. Reverting changes.
Training on augumented user 127088 1/50 current_auc = 0.6084656084656085
User 127088 AUC after training: 0.6084656084656085
User 127088 does not improve AUC. Reverting changes.
Training on augumented user 14356 2/50 current_auc = 0.6084656084656085
User 14356 AUC after training: 0.6111111111111112
User 14356 improves AUC. Keeping the model.
Training on augumented user 20547 3/50 current_auc = 0.6111111111111112
User 20547 AUC after training: 0.6084656084656085
User 20547 does not improve AUC. Reverting changes.
Training on augumented user 50210 4/50 current_auc = 0.6111111111111112
User 50210 AUC after training: 0.6084656084656085
User 50210 does not improve AUC. Reverting changes.
Training on augumented user 65795 5/50 current_auc = 0.6111111111111112
User 65795 AUC after training: 0.6111111111111112
User 65795 does not improve AUC. Reverting changes.
Training on augumented user 88738 6/50 current_auc = 0.6111111111111112
User 88738 AUC after training: 0.6190476190476191
User 88738 improves AUC. Keeping the model.
Training on augumented user 53172 7/50 current_auc = 0.6190476190476191
User 53172 AUC after training: 0.6190476190476191
User 53172 does not improve AUC. Reverting changes.
Training on augumented user 87731 8/50 current_auc = 0.6190476190476191
User 87731 AUC after training: 0.6190476190476191
User 87731 does not improve AUC. Reverting changes.
Training on augumented user 107318 9/50 current_auc = 0.6190476190476191
User 107318 AUC after training: 0.6190476190476191
User 107318 does not improve AUC. Reverting changes.
Training on augumented user 35655 10/50 current_auc = 0.6190476190476191
User 35655 AUC after training: 0.6190476190476191
User 35655 does not improve AUC. Reverting changes.
Training on augumented user 11485 11/50 current_auc = 0.6190476190476191
User 11485 AUC after training: 0.6190476190476191
User 11485 does not improve AUC. Reverting changes.
Training on augumented user 89037 12/50 current_auc = 0.6190476190476191
User 89037 AUC after training: 0.6216931216931216
User 89037 improves AUC. Keeping the model.
Training on augumented user 94578 13/50 current_auc = 0.6216931216931216
User 94578 AUC after training: 0.6164021164021164
User 94578 does not improve AUC. Reverting changes.
Training on augumented user 43493 14/50 current_auc = 0.6216931216931216
User 43493 AUC after training: 0.6190476190476191
User 43493 does not improve AUC. Reverting changes.
Training on augumented user 75862 15/50 current_auc = 0.6216931216931216
User 75862 AUC after training: 0.6164021164021164
User 75862 does not improve AUC. Reverting changes.
Training on augumented user 98850 16/50 current_auc = 0.6216931216931216
User 98850 AUC after training: 0.6216931216931216
User 98850 does not improve AUC. Reverting changes.
Training on augumented user 17288 17/50 current_auc = 0.6216931216931216
User 17288 AUC after training: 0.6190476190476191
User 17288 does not improve AUC. Reverting changes.
Training on augumented user 113297 18/50 current_auc = 0.6216931216931216
User 113297 AUC after training: 0.6164021164021164
User 113297 does not improve AUC. Reverting changes.
Training on augumented user 121033 19/50 current_auc = 0.6216931216931216
User 121033 AUC after training: 0.6216931216931216
User 121033 does not improve AUC. Reverting changes.
Training on augumented user 120183 20/50 current_auc = 0.6216931216931216
User 120183 AUC after training: 0.6190476190476191
User 120183 does not improve AUC. Reverting changes.
Training on augumented user 39866 21/50 current_auc = 0.6216931216931216
User 39866 AUC after training: 0.6190476190476191
User 39866 does not improve AUC. Reverting changes.
Training on augumented user 29898 22/50 current_auc = 0.6216931216931216
User 29898 AUC after training: 0.6190476190476191
User 29898 does not improve AUC. Reverting changes.
Training on augumented user 75382 23/50 current_auc = 0.6216931216931216
User 75382 AUC after training: 0.6216931216931216
User 75382 does not improve AUC. Reverting changes.
Training on augumented user 133234 24/50 current_auc = 0.6216931216931216
User 133234 AUC after training: 0.6164021164021164
User 133234 does not improve AUC. Reverting changes.
Training on augumented user 32856 25/50 current_auc = 0.6216931216931216
User 32856 AUC after training: 0.6190476190476191
User 32856 does not improve AUC. Reverting changes.
Training on augumented user 21370 26/50 current_auc = 0.6216931216931216
User 21370 AUC after training: 0.6216931216931216
User 21370 does not improve AUC. Reverting changes.
Training on augumented user 52999 27/50 current_auc = 0.6216931216931216
User 52999 AUC after training: 0.6216931216931216
User 52999 does not improve AUC. Reverting changes.
Training on augumented user 75733 28/50 current_auc = 0.6216931216931216
User 75733 AUC after training: 0.6164021164021164
User 75733 does not improve AUC. Reverting changes.
Training on augumented user 2668 29/50 current_auc = 0.6216931216931216
User 2668 AUC after training: 0.6164021164021164
User 2668 does not improve AUC. Reverting changes.
Training on augumented user 36013 30/50 current_auc = 0.6216931216931216
User 36013 AUC after training: 0.6216931216931216
User 36013 does not improve AUC. Reverting changes.
Training on augumented user 65805 31/50 current_auc = 0.6216931216931216
User 65805 AUC after training: 0.6164021164021164
User 65805 does not improve AUC. Reverting changes.
Training on augumented user 43483 32/50 current_auc = 0.6216931216931216
User 43483 AUC after training: 0.6164021164021164
User 43483 does not improve AUC. Reverting changes.
Training on augumented user 103463 33/50 current_auc = 0.6216931216931216
User 103463 AUC after training: 0.6243386243386243
User 103463 improves AUC. Keeping the model.
Training on augumented user 19552 34/50 current_auc = 0.6243386243386243
User 19552 AUC after training: 0.6216931216931216
User 19552 does not improve AUC. Reverting changes.
Training on augumented user 67876 35/50 current_auc = 0.6243386243386243
User 67876 AUC after training: 0.6243386243386243
User 67876 does not improve AUC. Reverting changes.
Training on augumented user 76084 36/50 current_auc = 0.6243386243386243
User 76084 AUC after training: 0.6164021164021164
User 76084 does not improve AUC. Reverting changes.
Training on augumented user 116953 37/50 current_auc = 0.6243386243386243
User 116953 AUC after training: 0.6243386243386243
User 116953 does not improve AUC. Reverting changes.
Training on augumented user 41662 38/50 current_auc = 0.6243386243386243
User 41662 AUC after training: 0.6216931216931216
User 41662 does not improve AUC. Reverting changes.
Training on augumented user 109309 39/50 current_auc = 0.6243386243386243
User 109309 AUC after training: 0.6164021164021164
User 109309 does not improve AUC. Reverting changes.
Training on augumented user 93887 40/50 current_auc = 0.6243386243386243
User 93887 AUC after training: 0.6243386243386244
User 93887 improves AUC. Keeping the model.
Training on augumented user 29305 41/50 current_auc = 0.6243386243386244
User 29305 AUC after training: 0.6322751322751323
User 29305 improves AUC. Keeping the model.
Training on augumented user 4677 42/50 current_auc = 0.6322751322751323
User 4677 AUC after training: 0.6296296296296295
User 4677 does not improve AUC. Reverting changes.
Training on augumented user 39012 43/50 current_auc = 0.6322751322751323
User 39012 AUC after training: 0.626984126984127
User 39012 does not improve AUC. Reverting changes.
Training on augumented user 134155 44/50 current_auc = 0.6322751322751323
User 134155 AUC after training: 0.6216931216931217
User 134155 does not improve AUC. Reverting changes.
Training on augumented user 3645 45/50 current_auc = 0.6322751322751323
User 3645 AUC after training: 0.626984126984127
User 3645 does not improve AUC. Reverting changes.
Training on augumented user 29761 46/50 current_auc = 0.6322751322751323
User 29761 AUC after training: 0.6296296296296297
User 29761 does not improve AUC. Reverting changes.
Training on augumented user 134766 47/50 current_auc = 0.6322751322751323
User 134766 AUC after training: 0.6296296296296297
User 134766 does not improve AUC. Reverting changes.
Training on augumented user 116854 48/50 current_auc = 0.6322751322751323
User 116854 AUC after training: 0.6243386243386244
User 116854 does not improve AUC. Reverting changes.
Training on augumented user 41900 49/50 current_auc = 0.6322751322751323
User 41900 AUC after training: 0.6296296296296297
User 41900 does not improve AUC. Reverting changes.
[2024-12-02 17:51:18.190709] start test user 27784 23/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:18.886580] start test user 27784 23/568 recall augumented users by random, augumented_users = [128583, 61177, 44426, 11303, 24545, 88909, 64513, 106367, 79254, 61422, 126482, 57728, 134530, 96050, 21770, 77248, 92841, 117602, 55755, 131622, 133631, 254, 79291, 99306, 46123, 55719, 55379, 121637, 39878, 37098, 5165, 41161, 42103, 14936, 74558, 100505, 63065, 16032, 64655, 29176, 107329, 56206, 123622, 20831, 103344, 1850, 73834, 124112, 26978, 2655]
[2024-12-02 17:51:18.908263] user = 27784 Cloud 23/568
[2024-12-02 17:51:18.930329] user = 27784 Local 23/568
[2024-12-02 17:51:18.998421] user = 27784 Local+ 23/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:21.556893] user = 27784 MPDA- 23/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3151041666666667
Training on augumented user 128583 0/50 current_auc = 0.3151041666666667
User 128583 AUC after training: 0.3151041666666667
User 128583 does not improve AUC. Reverting changes.
Training on augumented user 61177 1/50 current_auc = 0.3151041666666667
User 61177 AUC after training: 0.3151041666666667
User 61177 does not improve AUC. Reverting changes.
Training on augumented user 44426 2/50 current_auc = 0.3151041666666667
User 44426 AUC after training: 0.3151041666666667
User 44426 does not improve AUC. Reverting changes.
Training on augumented user 11303 3/50 current_auc = 0.3151041666666667
User 11303 AUC after training: 0.3151041666666667
User 11303 does not improve AUC. Reverting changes.
Training on augumented user 24545 4/50 current_auc = 0.3151041666666667
User 24545 AUC after training: 0.3151041666666667
User 24545 does not improve AUC. Reverting changes.
Training on augumented user 88909 5/50 current_auc = 0.3151041666666667
User 88909 AUC after training: 0.3151041666666667
User 88909 does not improve AUC. Reverting changes.
Training on augumented user 64513 6/50 current_auc = 0.3151041666666667
User 64513 AUC after training: 0.3151041666666667
User 64513 does not improve AUC. Reverting changes.
Training on augumented user 106367 7/50 current_auc = 0.3151041666666667
User 106367 AUC after training: 0.3151041666666667
User 106367 does not improve AUC. Reverting changes.
Training on augumented user 79254 8/50 current_auc = 0.3151041666666667
User 79254 AUC after training: 0.31770833333333337
User 79254 improves AUC. Keeping the model.
Training on augumented user 61422 9/50 current_auc = 0.31770833333333337
User 61422 AUC after training: 0.31770833333333337
User 61422 does not improve AUC. Reverting changes.
Training on augumented user 126482 10/50 current_auc = 0.31770833333333337
User 126482 AUC after training: 0.31770833333333337
User 126482 does not improve AUC. Reverting changes.
Training on augumented user 57728 11/50 current_auc = 0.31770833333333337
User 57728 AUC after training: 0.31770833333333337
User 57728 does not improve AUC. Reverting changes.
Training on augumented user 134530 12/50 current_auc = 0.31770833333333337
User 134530 AUC after training: 0.3151041666666667
User 134530 does not improve AUC. Reverting changes.
Training on augumented user 96050 13/50 current_auc = 0.31770833333333337
User 96050 AUC after training: 0.31770833333333337
User 96050 does not improve AUC. Reverting changes.
Training on augumented user 21770 14/50 current_auc = 0.31770833333333337
User 21770 AUC after training: 0.31770833333333337
User 21770 does not improve AUC. Reverting changes.
Training on augumented user 77248 15/50 current_auc = 0.31770833333333337
User 77248 AUC after training: 0.3151041666666667
User 77248 does not improve AUC. Reverting changes.
Training on augumented user 92841 16/50 current_auc = 0.31770833333333337
User 92841 AUC after training: 0.31770833333333337
User 92841 does not improve AUC. Reverting changes.
Training on augumented user 117602 17/50 current_auc = 0.31770833333333337
User 117602 AUC after training: 0.3151041666666667
User 117602 does not improve AUC. Reverting changes.
Training on augumented user 55755 18/50 current_auc = 0.31770833333333337
User 55755 AUC after training: 0.31770833333333337
User 55755 does not improve AUC. Reverting changes.
Training on augumented user 131622 19/50 current_auc = 0.31770833333333337
User 131622 AUC after training: 0.31770833333333337
User 131622 does not improve AUC. Reverting changes.
Training on augumented user 133631 20/50 current_auc = 0.31770833333333337
User 133631 AUC after training: 0.31770833333333337
User 133631 does not improve AUC. Reverting changes.
Training on augumented user 254 21/50 current_auc = 0.31770833333333337
User 254 AUC after training: 0.3151041666666667
User 254 does not improve AUC. Reverting changes.
Training on augumented user 79291 22/50 current_auc = 0.31770833333333337
User 79291 AUC after training: 0.3151041666666667
User 79291 does not improve AUC. Reverting changes.
Training on augumented user 99306 23/50 current_auc = 0.31770833333333337
User 99306 AUC after training: 0.31770833333333337
User 99306 does not improve AUC. Reverting changes.
Training on augumented user 46123 24/50 current_auc = 0.31770833333333337
User 46123 AUC after training: 0.31770833333333337
User 46123 does not improve AUC. Reverting changes.
Training on augumented user 55719 25/50 current_auc = 0.31770833333333337
User 55719 AUC after training: 0.3151041666666667
User 55719 does not improve AUC. Reverting changes.
Training on augumented user 55379 26/50 current_auc = 0.31770833333333337
User 55379 AUC after training: 0.31770833333333337
User 55379 does not improve AUC. Reverting changes.
Training on augumented user 121637 27/50 current_auc = 0.31770833333333337
User 121637 AUC after training: 0.3151041666666667
User 121637 does not improve AUC. Reverting changes.
Training on augumented user 39878 28/50 current_auc = 0.31770833333333337
User 39878 AUC after training: 0.3151041666666667
User 39878 does not improve AUC. Reverting changes.
Training on augumented user 37098 29/50 current_auc = 0.31770833333333337
User 37098 AUC after training: 0.31770833333333337
User 37098 does not improve AUC. Reverting changes.
Training on augumented user 5165 30/50 current_auc = 0.31770833333333337
User 5165 AUC after training: 0.3151041666666667
User 5165 does not improve AUC. Reverting changes.
Training on augumented user 41161 31/50 current_auc = 0.31770833333333337
User 41161 AUC after training: 0.31770833333333337
User 41161 does not improve AUC. Reverting changes.
Training on augumented user 42103 32/50 current_auc = 0.31770833333333337
User 42103 AUC after training: 0.31770833333333337
User 42103 does not improve AUC. Reverting changes.
Training on augumented user 14936 33/50 current_auc = 0.31770833333333337
User 14936 AUC after training: 0.31770833333333337
User 14936 does not improve AUC. Reverting changes.
Training on augumented user 74558 34/50 current_auc = 0.31770833333333337
User 74558 AUC after training: 0.3151041666666667
User 74558 does not improve AUC. Reverting changes.
Training on augumented user 100505 35/50 current_auc = 0.31770833333333337
User 100505 AUC after training: 0.3151041666666667
User 100505 does not improve AUC. Reverting changes.
Training on augumented user 63065 36/50 current_auc = 0.31770833333333337
User 63065 AUC after training: 0.3151041666666667
User 63065 does not improve AUC. Reverting changes.
Training on augumented user 16032 37/50 current_auc = 0.31770833333333337
User 16032 AUC after training: 0.31770833333333337
User 16032 does not improve AUC. Reverting changes.
Training on augumented user 64655 38/50 current_auc = 0.31770833333333337
User 64655 AUC after training: 0.31770833333333337
User 64655 does not improve AUC. Reverting changes.
Training on augumented user 29176 39/50 current_auc = 0.31770833333333337
User 29176 AUC after training: 0.3151041666666667
User 29176 does not improve AUC. Reverting changes.
Training on augumented user 107329 40/50 current_auc = 0.31770833333333337
User 107329 AUC after training: 0.31770833333333337
User 107329 does not improve AUC. Reverting changes.
Training on augumented user 56206 41/50 current_auc = 0.31770833333333337
User 56206 AUC after training: 0.31770833333333337
User 56206 does not improve AUC. Reverting changes.
Training on augumented user 123622 42/50 current_auc = 0.31770833333333337
User 123622 AUC after training: 0.31770833333333337
User 123622 does not improve AUC. Reverting changes.
Training on augumented user 20831 43/50 current_auc = 0.31770833333333337
User 20831 AUC after training: 0.3151041666666667
User 20831 does not improve AUC. Reverting changes.
Training on augumented user 103344 44/50 current_auc = 0.31770833333333337
User 103344 AUC after training: 0.3151041666666667
User 103344 does not improve AUC. Reverting changes.
Training on augumented user 1850 45/50 current_auc = 0.31770833333333337
User 1850 AUC after training: 0.31770833333333337
User 1850 does not improve AUC. Reverting changes.
Training on augumented user 73834 46/50 current_auc = 0.31770833333333337
User 73834 AUC after training: 0.31770833333333337
User 73834 does not improve AUC. Reverting changes.
Training on augumented user 124112 47/50 current_auc = 0.31770833333333337
User 124112 AUC after training: 0.31770833333333337
User 124112 does not improve AUC. Reverting changes.
Training on augumented user 26978 48/50 current_auc = 0.31770833333333337
User 26978 AUC after training: 0.31770833333333337
User 26978 does not improve AUC. Reverting changes.
Training on augumented user 2655 49/50 current_auc = 0.31770833333333337
User 2655 AUC after training: 0.3151041666666667
User 2655 does not improve AUC. Reverting changes.
[2024-12-02 17:51:51.099884] start test user 27809 24/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:51.529738] start test user 27809 24/568 recall augumented users by random, augumented_users = [73046, 40030, 66235, 121384, 5834, 53357, 56153, 117917, 48492, 125930, 12790, 50446, 84065, 138469, 88769, 29098, 79647, 81506, 3198, 19884, 58140, 128834, 66816, 114690, 107587, 49194, 73000, 45926, 136561, 45083, 108886, 57313, 123236, 14468, 81462, 50588, 37602, 103879, 129915, 4814, 119953, 75605, 10804, 35540, 86290, 18400, 129656, 43635, 93398, 27431]
[2024-12-02 17:51:51.545492] user = 27809 Cloud 24/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:51:51.551526] user = 27809 Local 24/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:51:51.682698] user = 27809 Local+ 24/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:51:54.190363] user = 27809 MPDA- 24/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 73046 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73046 AUC after training: 0.5
User 73046 does not improve AUC. Reverting changes.
Training on augumented user 40030 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40030 AUC after training: 0.5
User 40030 does not improve AUC. Reverting changes.
Training on augumented user 66235 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66235 AUC after training: 0.5
User 66235 does not improve AUC. Reverting changes.
Training on augumented user 121384 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121384 AUC after training: 0.5
User 121384 does not improve AUC. Reverting changes.
Training on augumented user 5834 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5834 AUC after training: 0.5
User 5834 does not improve AUC. Reverting changes.
Training on augumented user 53357 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53357 AUC after training: 0.5
User 53357 does not improve AUC. Reverting changes.
Training on augumented user 56153 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56153 AUC after training: 0.5
User 56153 does not improve AUC. Reverting changes.
Training on augumented user 117917 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117917 AUC after training: 0.5
User 117917 does not improve AUC. Reverting changes.
Training on augumented user 48492 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48492 AUC after training: 0.5
User 48492 does not improve AUC. Reverting changes.
Training on augumented user 125930 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125930 AUC after training: 0.5
User 125930 does not improve AUC. Reverting changes.
Training on augumented user 12790 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12790 AUC after training: 0.5
User 12790 does not improve AUC. Reverting changes.
Training on augumented user 50446 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50446 AUC after training: 0.5
User 50446 does not improve AUC. Reverting changes.
Training on augumented user 84065 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84065 AUC after training: 0.5
User 84065 does not improve AUC. Reverting changes.
Training on augumented user 138469 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138469 AUC after training: 0.5
User 138469 does not improve AUC. Reverting changes.
Training on augumented user 88769 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88769 AUC after training: 0.5
User 88769 does not improve AUC. Reverting changes.
Training on augumented user 29098 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29098 AUC after training: 0.5
User 29098 does not improve AUC. Reverting changes.
Training on augumented user 79647 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79647 AUC after training: 0.5
User 79647 does not improve AUC. Reverting changes.
Training on augumented user 81506 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81506 AUC after training: 0.5
User 81506 does not improve AUC. Reverting changes.
Training on augumented user 3198 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3198 AUC after training: 0.5
User 3198 does not improve AUC. Reverting changes.
Training on augumented user 19884 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19884 AUC after training: 0.5
User 19884 does not improve AUC. Reverting changes.
Training on augumented user 58140 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58140 AUC after training: 0.5
User 58140 does not improve AUC. Reverting changes.
Training on augumented user 128834 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128834 AUC after training: 0.5
User 128834 does not improve AUC. Reverting changes.
Training on augumented user 66816 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66816 AUC after training: 0.5
User 66816 does not improve AUC. Reverting changes.
Training on augumented user 114690 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114690 AUC after training: 0.5
User 114690 does not improve AUC. Reverting changes.
Training on augumented user 107587 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107587 AUC after training: 0.5
User 107587 does not improve AUC. Reverting changes.
Training on augumented user 49194 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49194 AUC after training: 0.5
User 49194 does not improve AUC. Reverting changes.
Training on augumented user 73000 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73000 AUC after training: 0.5
User 73000 does not improve AUC. Reverting changes.
Training on augumented user 45926 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45926 AUC after training: 0.5
User 45926 does not improve AUC. Reverting changes.
Training on augumented user 136561 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136561 AUC after training: 0.5
User 136561 does not improve AUC. Reverting changes.
Training on augumented user 45083 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45083 AUC after training: 0.5
User 45083 does not improve AUC. Reverting changes.
Training on augumented user 108886 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108886 AUC after training: 0.5
User 108886 does not improve AUC. Reverting changes.
Training on augumented user 57313 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57313 AUC after training: 0.5
User 57313 does not improve AUC. Reverting changes.
Training on augumented user 123236 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123236 AUC after training: 0.5
User 123236 does not improve AUC. Reverting changes.
Training on augumented user 14468 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14468 AUC after training: 0.5
User 14468 does not improve AUC. Reverting changes.
Training on augumented user 81462 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81462 AUC after training: 0.5
User 81462 does not improve AUC. Reverting changes.
Training on augumented user 50588 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50588 AUC after training: 0.5
User 50588 does not improve AUC. Reverting changes.
Training on augumented user 37602 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37602 AUC after training: 0.5
User 37602 does not improve AUC. Reverting changes.
Training on augumented user 103879 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103879 AUC after training: 0.5
User 103879 does not improve AUC. Reverting changes.
Training on augumented user 129915 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129915 AUC after training: 0.5
User 129915 does not improve AUC. Reverting changes.
Training on augumented user 4814 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4814 AUC after training: 0.5
User 4814 does not improve AUC. Reverting changes.
Training on augumented user 119953 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119953 AUC after training: 0.5
User 119953 does not improve AUC. Reverting changes.
Training on augumented user 75605 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75605 AUC after training: 0.5
User 75605 does not improve AUC. Reverting changes.
Training on augumented user 10804 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10804 AUC after training: 0.5
User 10804 does not improve AUC. Reverting changes.
Training on augumented user 35540 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35540 AUC after training: 0.5
User 35540 does not improve AUC. Reverting changes.
Training on augumented user 86290 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86290 AUC after training: 0.5
User 86290 does not improve AUC. Reverting changes.
Training on augumented user 18400 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18400 AUC after training: 0.5
User 18400 does not improve AUC. Reverting changes.
Training on augumented user 129656 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129656 AUC after training: 0.5
User 129656 does not improve AUC. Reverting changes.
Training on augumented user 43635 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43635 AUC after training: 0.5
User 43635 does not improve AUC. Reverting changes.
Training on augumented user 93398 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93398 AUC after training: 0.5
User 93398 does not improve AUC. Reverting changes.
Training on augumented user 27431 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27431 AUC after training: 0.5
User 27431 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:52:25.586493] start test user 27810 25/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:26.306284] start test user 27810 25/568 recall augumented users by random, augumented_users = [132206, 29063, 79984, 8666, 123961, 51240, 90678, 99575, 135577, 6253, 47930, 78522, 33382, 22877, 10181, 39921, 14043, 63932, 33539, 74025, 85058, 9806, 14439, 39086, 26954, 29463, 111837, 29037, 99088, 10922, 82990, 79230, 123069, 119091, 60256, 91914, 73322, 41855, 36155, 44942, 97279, 21458, 118483, 109679, 20564, 77245, 50738, 128575, 26742, 103267]
[2024-12-02 17:52:26.360774] user = 27810 Cloud 25/568
[2024-12-02 17:52:26.384532] user = 27810 Local 25/568
[2024-12-02 17:52:26.591451] user = 27810 Local+ 25/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:29.536742] user = 27810 MPDA- 25/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.375
Training on augumented user 132206 0/50 current_auc = 0.375
User 132206 AUC after training: 0.375
User 132206 does not improve AUC. Reverting changes.
Training on augumented user 29063 1/50 current_auc = 0.375
User 29063 AUC after training: 0.3916666666666666
User 29063 improves AUC. Keeping the model.
Training on augumented user 79984 2/50 current_auc = 0.3916666666666666
User 79984 AUC after training: 0.3916666666666666
User 79984 does not improve AUC. Reverting changes.
Training on augumented user 8666 3/50 current_auc = 0.3916666666666666
User 8666 AUC after training: 0.3916666666666666
User 8666 does not improve AUC. Reverting changes.
Training on augumented user 123961 4/50 current_auc = 0.3916666666666666
User 123961 AUC after training: 0.3916666666666666
User 123961 does not improve AUC. Reverting changes.
Training on augumented user 51240 5/50 current_auc = 0.3916666666666666
User 51240 AUC after training: 0.4
User 51240 improves AUC. Keeping the model.
Training on augumented user 90678 6/50 current_auc = 0.4
User 90678 AUC after training: 0.39999999999999997
User 90678 does not improve AUC. Reverting changes.
Training on augumented user 99575 7/50 current_auc = 0.4
User 99575 AUC after training: 0.4
User 99575 does not improve AUC. Reverting changes.
Training on augumented user 135577 8/50 current_auc = 0.4
User 135577 AUC after training: 0.3916666666666666
User 135577 does not improve AUC. Reverting changes.
Training on augumented user 6253 9/50 current_auc = 0.4
User 6253 AUC after training: 0.3916666666666666
User 6253 does not improve AUC. Reverting changes.
Training on augumented user 47930 10/50 current_auc = 0.4
User 47930 AUC after training: 0.4
User 47930 does not improve AUC. Reverting changes.
Training on augumented user 78522 11/50 current_auc = 0.4
User 78522 AUC after training: 0.4083333333333333
User 78522 improves AUC. Keeping the model.
Training on augumented user 33382 12/50 current_auc = 0.4083333333333333
User 33382 AUC after training: 0.4083333333333333
User 33382 does not improve AUC. Reverting changes.
Training on augumented user 22877 13/50 current_auc = 0.4083333333333333
User 22877 AUC after training: 0.375
User 22877 does not improve AUC. Reverting changes.
Training on augumented user 10181 14/50 current_auc = 0.4083333333333333
User 10181 AUC after training: 0.4083333333333333
User 10181 does not improve AUC. Reverting changes.
Training on augumented user 39921 15/50 current_auc = 0.4083333333333333
User 39921 AUC after training: 0.39999999999999997
User 39921 does not improve AUC. Reverting changes.
Training on augumented user 14043 16/50 current_auc = 0.4083333333333333
User 14043 AUC after training: 0.4083333333333333
User 14043 does not improve AUC. Reverting changes.
Training on augumented user 63932 17/50 current_auc = 0.4083333333333333
User 63932 AUC after training: 0.375
User 63932 does not improve AUC. Reverting changes.
Training on augumented user 33539 18/50 current_auc = 0.4083333333333333
User 33539 AUC after training: 0.39999999999999997
User 33539 does not improve AUC. Reverting changes.
Training on augumented user 74025 19/50 current_auc = 0.4083333333333333
User 74025 AUC after training: 0.39999999999999997
User 74025 does not improve AUC. Reverting changes.
Training on augumented user 85058 20/50 current_auc = 0.4083333333333333
User 85058 AUC after training: 0.4083333333333333
User 85058 does not improve AUC. Reverting changes.
Training on augumented user 9806 21/50 current_auc = 0.4083333333333333
User 9806 AUC after training: 0.39999999999999997
User 9806 does not improve AUC. Reverting changes.
Training on augumented user 14439 22/50 current_auc = 0.4083333333333333
User 14439 AUC after training: 0.39999999999999997
User 14439 does not improve AUC. Reverting changes.
Training on augumented user 39086 23/50 current_auc = 0.4083333333333333
User 39086 AUC after training: 0.39999999999999997
User 39086 does not improve AUC. Reverting changes.
Training on augumented user 26954 24/50 current_auc = 0.4083333333333333
User 26954 AUC after training: 0.4083333333333333
User 26954 does not improve AUC. Reverting changes.
Training on augumented user 29463 25/50 current_auc = 0.4083333333333333
User 29463 AUC after training: 0.4083333333333333
User 29463 does not improve AUC. Reverting changes.
Training on augumented user 111837 26/50 current_auc = 0.4083333333333333
User 111837 AUC after training: 0.4083333333333333
User 111837 does not improve AUC. Reverting changes.
Training on augumented user 29037 27/50 current_auc = 0.4083333333333333
User 29037 AUC after training: 0.375
User 29037 does not improve AUC. Reverting changes.
Training on augumented user 99088 28/50 current_auc = 0.4083333333333333
User 99088 AUC after training: 0.4083333333333333
User 99088 does not improve AUC. Reverting changes.
Training on augumented user 10922 29/50 current_auc = 0.4083333333333333
User 10922 AUC after training: 0.4083333333333333
User 10922 does not improve AUC. Reverting changes.
Training on augumented user 82990 30/50 current_auc = 0.4083333333333333
User 82990 AUC after training: 0.41666666666666663
User 82990 improves AUC. Keeping the model.
Training on augumented user 79230 31/50 current_auc = 0.41666666666666663
User 79230 AUC after training: 0.4083333333333333
User 79230 does not improve AUC. Reverting changes.
Training on augumented user 123069 32/50 current_auc = 0.41666666666666663
User 123069 AUC after training: 0.4083333333333333
User 123069 does not improve AUC. Reverting changes.
Training on augumented user 119091 33/50 current_auc = 0.41666666666666663
User 119091 AUC after training: 0.4083333333333333
User 119091 does not improve AUC. Reverting changes.
Training on augumented user 60256 34/50 current_auc = 0.41666666666666663
User 60256 AUC after training: 0.4083333333333333
User 60256 does not improve AUC. Reverting changes.
Training on augumented user 91914 35/50 current_auc = 0.41666666666666663
User 91914 AUC after training: 0.4083333333333333
User 91914 does not improve AUC. Reverting changes.
Training on augumented user 73322 36/50 current_auc = 0.41666666666666663
User 73322 AUC after training: 0.4083333333333333
User 73322 does not improve AUC. Reverting changes.
Training on augumented user 41855 37/50 current_auc = 0.41666666666666663
User 41855 AUC after training: 0.41666666666666663
User 41855 does not improve AUC. Reverting changes.
Training on augumented user 36155 38/50 current_auc = 0.41666666666666663
User 36155 AUC after training: 0.4083333333333333
User 36155 does not improve AUC. Reverting changes.
Training on augumented user 44942 39/50 current_auc = 0.41666666666666663
User 44942 AUC after training: 0.4083333333333333
User 44942 does not improve AUC. Reverting changes.
Training on augumented user 97279 40/50 current_auc = 0.41666666666666663
User 97279 AUC after training: 0.41666666666666663
User 97279 does not improve AUC. Reverting changes.
Training on augumented user 21458 41/50 current_auc = 0.41666666666666663
User 21458 AUC after training: 0.41666666666666663
User 21458 does not improve AUC. Reverting changes.
Training on augumented user 118483 42/50 current_auc = 0.41666666666666663
User 118483 AUC after training: 0.41666666666666663
User 118483 does not improve AUC. Reverting changes.
Training on augumented user 109679 43/50 current_auc = 0.41666666666666663
User 109679 AUC after training: 0.4083333333333333
User 109679 does not improve AUC. Reverting changes.
Training on augumented user 20564 44/50 current_auc = 0.41666666666666663
User 20564 AUC after training: 0.4083333333333333
User 20564 does not improve AUC. Reverting changes.
Training on augumented user 77245 45/50 current_auc = 0.41666666666666663
User 77245 AUC after training: 0.4083333333333333
User 77245 does not improve AUC. Reverting changes.
Training on augumented user 50738 46/50 current_auc = 0.41666666666666663
User 50738 AUC after training: 0.4083333333333333
User 50738 does not improve AUC. Reverting changes.
Training on augumented user 128575 47/50 current_auc = 0.41666666666666663
User 128575 AUC after training: 0.41666666666666663
User 128575 does not improve AUC. Reverting changes.
Training on augumented user 26742 48/50 current_auc = 0.41666666666666663
User 26742 AUC after training: 0.41666666666666663
User 26742 does not improve AUC. Reverting changes.
Training on augumented user 103267 49/50 current_auc = 0.41666666666666663
User 103267 AUC after training: 0.41666666666666663
User 103267 does not improve AUC. Reverting changes.
[2024-12-02 17:53:03.264433] start test user 27838 26/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:03.771555] start test user 27838 26/568 recall augumented users by random, augumented_users = [3874, 47290, 33164, 71915, 66890, 103317, 74394, 23296, 90093, 54646, 32055, 59976, 87443, 27226, 31993, 52173, 296, 24111, 18783, 131930, 81585, 79954, 33548, 28806, 64157, 10756, 15589, 14312, 81989, 37121, 87992, 8161, 69376, 100318, 52947, 43722, 101301, 48614, 2071, 96771, 54736, 18865, 73076, 103779, 74039, 38502, 96775, 675, 106183, 54742]
[2024-12-02 17:53:03.787614] user = 27838 Cloud 26/568
[2024-12-02 17:53:03.827087] user = 27838 Local 26/568
[2024-12-02 17:53:03.901341] user = 27838 Local+ 26/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:06.639872] user = 27838 MPDA- 26/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.706439393939394
Training on augumented user 3874 0/50 current_auc = 0.706439393939394
User 3874 AUC after training: 0.7061237373737375
User 3874 does not improve AUC. Reverting changes.
Training on augumented user 47290 1/50 current_auc = 0.706439393939394
User 47290 AUC after training: 0.706439393939394
User 47290 does not improve AUC. Reverting changes.
Training on augumented user 33164 2/50 current_auc = 0.706439393939394
User 33164 AUC after training: 0.7061237373737375
User 33164 does not improve AUC. Reverting changes.
Training on augumented user 71915 3/50 current_auc = 0.706439393939394
User 71915 AUC after training: 0.7061237373737373
User 71915 does not improve AUC. Reverting changes.
Training on augumented user 66890 4/50 current_auc = 0.706439393939394
User 66890 AUC after training: 0.7067550505050505
User 66890 improves AUC. Keeping the model.
Training on augumented user 103317 5/50 current_auc = 0.7067550505050505
User 103317 AUC after training: 0.7054924242424243
User 103317 does not improve AUC. Reverting changes.
Training on augumented user 74394 6/50 current_auc = 0.7067550505050505
User 74394 AUC after training: 0.706439393939394
User 74394 does not improve AUC. Reverting changes.
Training on augumented user 23296 7/50 current_auc = 0.7067550505050505
User 23296 AUC after training: 0.7058080808080808
User 23296 does not improve AUC. Reverting changes.
Training on augumented user 90093 8/50 current_auc = 0.7067550505050505
User 90093 AUC after training: 0.706439393939394
User 90093 does not improve AUC. Reverting changes.
Training on augumented user 54646 9/50 current_auc = 0.7067550505050505
User 54646 AUC after training: 0.7070707070707072
User 54646 improves AUC. Keeping the model.
Training on augumented user 32055 10/50 current_auc = 0.7070707070707072
User 32055 AUC after training: 0.7067550505050505
User 32055 does not improve AUC. Reverting changes.
Training on augumented user 59976 11/50 current_auc = 0.7070707070707072
User 59976 AUC after training: 0.7067550505050506
User 59976 does not improve AUC. Reverting changes.
Training on augumented user 87443 12/50 current_auc = 0.7070707070707072
User 87443 AUC after training: 0.7061237373737373
User 87443 does not improve AUC. Reverting changes.
Training on augumented user 27226 13/50 current_auc = 0.7070707070707072
User 27226 AUC after training: 0.7070707070707072
User 27226 does not improve AUC. Reverting changes.
Training on augumented user 31993 14/50 current_auc = 0.7070707070707072
User 31993 AUC after training: 0.7073863636363638
User 31993 improves AUC. Keeping the model.
Training on augumented user 52173 15/50 current_auc = 0.7073863636363638
User 52173 AUC after training: 0.7067550505050506
User 52173 does not improve AUC. Reverting changes.
Training on augumented user 296 16/50 current_auc = 0.7073863636363638
User 296 AUC after training: 0.706439393939394
User 296 does not improve AUC. Reverting changes.
Training on augumented user 24111 17/50 current_auc = 0.7073863636363638
User 24111 AUC after training: 0.7070707070707072
User 24111 does not improve AUC. Reverting changes.
Training on augumented user 18783 18/50 current_auc = 0.7073863636363638
User 18783 AUC after training: 0.706439393939394
User 18783 does not improve AUC. Reverting changes.
Training on augumented user 131930 19/50 current_auc = 0.7073863636363638
User 131930 AUC after training: 0.7067550505050505
User 131930 does not improve AUC. Reverting changes.
Training on augumented user 81585 20/50 current_auc = 0.7073863636363638
User 81585 AUC after training: 0.7067550505050505
User 81585 does not improve AUC. Reverting changes.
Training on augumented user 79954 21/50 current_auc = 0.7073863636363638
User 79954 AUC after training: 0.7070707070707072
User 79954 does not improve AUC. Reverting changes.
Training on augumented user 33548 22/50 current_auc = 0.7073863636363638
User 33548 AUC after training: 0.7086489898989898
User 33548 improves AUC. Keeping the model.
Training on augumented user 28806 23/50 current_auc = 0.7086489898989898
User 28806 AUC after training: 0.7073863636363638
User 28806 does not improve AUC. Reverting changes.
Training on augumented user 64157 24/50 current_auc = 0.7086489898989898
User 64157 AUC after training: 0.7083333333333335
User 64157 does not improve AUC. Reverting changes.
Training on augumented user 10756 25/50 current_auc = 0.7086489898989898
User 10756 AUC after training: 0.7083333333333333
User 10756 does not improve AUC. Reverting changes.
Training on augumented user 15589 26/50 current_auc = 0.7086489898989898
User 15589 AUC after training: 0.7086489898989898
User 15589 does not improve AUC. Reverting changes.
Training on augumented user 14312 27/50 current_auc = 0.7086489898989898
User 14312 AUC after training: 0.7073863636363636
User 14312 does not improve AUC. Reverting changes.
Training on augumented user 81989 28/50 current_auc = 0.7086489898989898
User 81989 AUC after training: 0.7083333333333333
User 81989 does not improve AUC. Reverting changes.
Training on augumented user 37121 29/50 current_auc = 0.7086489898989898
User 37121 AUC after training: 0.7083333333333335
User 37121 does not improve AUC. Reverting changes.
Training on augumented user 87992 30/50 current_auc = 0.7086489898989898
User 87992 AUC after training: 0.7089646464646464
User 87992 improves AUC. Keeping the model.
Training on augumented user 8161 31/50 current_auc = 0.7089646464646464
User 8161 AUC after training: 0.709280303030303
User 8161 improves AUC. Keeping the model.
Training on augumented user 69376 32/50 current_auc = 0.709280303030303
User 69376 AUC after training: 0.7086489898989901
User 69376 does not improve AUC. Reverting changes.
Training on augumented user 100318 33/50 current_auc = 0.709280303030303
User 100318 AUC after training: 0.7086489898989898
User 100318 does not improve AUC. Reverting changes.
Training on augumented user 52947 34/50 current_auc = 0.709280303030303
User 52947 AUC after training: 0.709280303030303
User 52947 does not improve AUC. Reverting changes.
Training on augumented user 43722 35/50 current_auc = 0.709280303030303
User 43722 AUC after training: 0.7086489898989898
User 43722 does not improve AUC. Reverting changes.
Training on augumented user 101301 36/50 current_auc = 0.709280303030303
User 101301 AUC after training: 0.7086489898989898
User 101301 does not improve AUC. Reverting changes.
Training on augumented user 48614 37/50 current_auc = 0.709280303030303
User 48614 AUC after training: 0.7083333333333334
User 48614 does not improve AUC. Reverting changes.
Training on augumented user 2071 38/50 current_auc = 0.709280303030303
User 2071 AUC after training: 0.7054924242424243
User 2071 does not improve AUC. Reverting changes.
Training on augumented user 96771 39/50 current_auc = 0.709280303030303
User 96771 AUC after training: 0.7089646464646464
User 96771 does not improve AUC. Reverting changes.
Training on augumented user 54736 40/50 current_auc = 0.709280303030303
User 54736 AUC after training: 0.7086489898989901
User 54736 does not improve AUC. Reverting changes.
Training on augumented user 18865 41/50 current_auc = 0.709280303030303
User 18865 AUC after training: 0.7095959595959597
User 18865 improves AUC. Keeping the model.
Training on augumented user 73076 42/50 current_auc = 0.7095959595959597
User 73076 AUC after training: 0.7067550505050506
User 73076 does not improve AUC. Reverting changes.
Training on augumented user 103779 43/50 current_auc = 0.7095959595959597
User 103779 AUC after training: 0.7089646464646465
User 103779 does not improve AUC. Reverting changes.
Training on augumented user 74039 44/50 current_auc = 0.7095959595959597
User 74039 AUC after training: 0.7083333333333335
User 74039 does not improve AUC. Reverting changes.
Training on augumented user 38502 45/50 current_auc = 0.7095959595959597
User 38502 AUC after training: 0.7083333333333334
User 38502 does not improve AUC. Reverting changes.
Training on augumented user 96775 46/50 current_auc = 0.7095959595959597
User 96775 AUC after training: 0.7092803030303031
User 96775 does not improve AUC. Reverting changes.
Training on augumented user 675 47/50 current_auc = 0.7095959595959597
User 675 AUC after training: 0.7080176767676768
User 675 does not improve AUC. Reverting changes.
Training on augumented user 106183 48/50 current_auc = 0.7095959595959597
User 106183 AUC after training: 0.7086489898989898
User 106183 does not improve AUC. Reverting changes.
Training on augumented user 54742 49/50 current_auc = 0.7095959595959597
User 54742 AUC after training: 0.7095959595959597
User 54742 does not improve AUC. Reverting changes.
[2024-12-02 17:53:34.137253] start test user 27854 27/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:34.565486] start test user 27854 27/568 recall augumented users by random, augumented_users = [11893, 120928, 33816, 72596, 97815, 99035, 17505, 75668, 82668, 15083, 43405, 86017, 46188, 131299, 27668, 18834, 113064, 31393, 103815, 76684, 26112, 111712, 80515, 34796, 38285, 65719, 79561, 63279, 86577, 54862, 91893, 13636, 107194, 3467, 92845, 76290, 39580, 44973, 119661, 23563, 56613, 23245, 4275, 84025, 47318, 137805, 118012, 88499, 84559, 78008]
[2024-12-02 17:53:34.582673] user = 27854 Cloud 27/568
[2024-12-02 17:53:34.674949] user = 27854 Local 27/568
[2024-12-02 17:53:34.789543] user = 27854 Local+ 27/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:37.663715] user = 27854 MPDA- 27/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8695842450765865
Training on augumented user 11893 0/50 current_auc = 0.8695842450765865
User 11893 AUC after training: 0.8692866520787746
User 11893 does not improve AUC. Reverting changes.
Training on augumented user 120928 1/50 current_auc = 0.8695842450765865
User 120928 AUC after training: 0.8697417943107221
User 120928 improves AUC. Keeping the model.
Training on augumented user 33816 2/50 current_auc = 0.8697417943107221
User 33816 AUC after training: 0.869671772428884
User 33816 does not improve AUC. Reverting changes.
Training on augumented user 72596 3/50 current_auc = 0.8697417943107221
User 72596 AUC after training: 0.8687789934354486
User 72596 does not improve AUC. Reverting changes.
Training on augumented user 97815 4/50 current_auc = 0.8697417943107221
User 97815 AUC after training: 0.8695667396061271
User 97815 does not improve AUC. Reverting changes.
Training on augumented user 99035 5/50 current_auc = 0.8697417943107221
User 99035 AUC after training: 0.8696017505470459
User 99035 does not improve AUC. Reverting changes.
Training on augumented user 17505 6/50 current_auc = 0.8697417943107221
User 17505 AUC after training: 0.8697067833698031
User 17505 does not improve AUC. Reverting changes.
Training on augumented user 75668 7/50 current_auc = 0.8697417943107221
User 75668 AUC after training: 0.8695842450765864
User 75668 does not improve AUC. Reverting changes.
Training on augumented user 82668 8/50 current_auc = 0.8697417943107221
User 82668 AUC after training: 0.8691641137855579
User 82668 does not improve AUC. Reverting changes.
Training on augumented user 15083 9/50 current_auc = 0.8697417943107221
User 15083 AUC after training: 0.8694442013129103
User 15083 does not improve AUC. Reverting changes.
Training on augumented user 43405 10/50 current_auc = 0.8697417943107221
User 43405 AUC after training: 0.869855579868709
User 43405 improves AUC. Keeping the model.
Training on augumented user 86017 11/50 current_auc = 0.869855579868709
User 86017 AUC after training: 0.8694792122538293
User 86017 does not improve AUC. Reverting changes.
Training on augumented user 46188 12/50 current_auc = 0.869855579868709
User 46188 AUC after training: 0.8693304157549233
User 46188 does not improve AUC. Reverting changes.
Training on augumented user 131299 13/50 current_auc = 0.869855579868709
User 131299 AUC after training: 0.8698293216630196
User 131299 does not improve AUC. Reverting changes.
Training on augumented user 27668 14/50 current_auc = 0.869855579868709
User 27668 AUC after training: 0.8697417943107222
User 27668 does not improve AUC. Reverting changes.
Training on augumented user 18834 15/50 current_auc = 0.869855579868709
User 18834 AUC after training: 0.8696717724288839
User 18834 does not improve AUC. Reverting changes.
Training on augumented user 113064 16/50 current_auc = 0.869855579868709
User 113064 AUC after training: 0.8695142231947482
User 113064 does not improve AUC. Reverting changes.
Training on augumented user 31393 17/50 current_auc = 0.869855579868709
User 31393 AUC after training: 0.8695492341356673
User 31393 does not improve AUC. Reverting changes.
Training on augumented user 103815 18/50 current_auc = 0.869855579868709
User 103815 AUC after training: 0.869531728665208
User 103815 does not improve AUC. Reverting changes.
Training on augumented user 76684 19/50 current_auc = 0.869855579868709
User 76684 AUC after training: 0.8695142231947484
User 76684 does not improve AUC. Reverting changes.
Training on augumented user 26112 20/50 current_auc = 0.869855579868709
User 26112 AUC after training: 0.8694967177242888
User 26112 does not improve AUC. Reverting changes.
Training on augumented user 111712 21/50 current_auc = 0.869855579868709
User 111712 AUC after training: 0.8696105032822756
User 111712 does not improve AUC. Reverting changes.
Training on augumented user 80515 22/50 current_auc = 0.869855579868709
User 80515 AUC after training: 0.869601750547046
User 80515 does not improve AUC. Reverting changes.
Training on augumented user 34796 23/50 current_auc = 0.869855579868709
User 34796 AUC after training: 0.8697330415754924
User 34796 does not improve AUC. Reverting changes.
Training on augumented user 38285 24/50 current_auc = 0.869855579868709
User 38285 AUC after training: 0.8696192560175054
User 38285 does not improve AUC. Reverting changes.
Training on augumented user 65719 25/50 current_auc = 0.869855579868709
User 65719 AUC after training: 0.8693566739606127
User 65719 does not improve AUC. Reverting changes.
Training on augumented user 79561 26/50 current_auc = 0.869855579868709
User 79561 AUC after training: 0.8697417943107221
User 79561 does not improve AUC. Reverting changes.
Training on augumented user 63279 27/50 current_auc = 0.869855579868709
User 63279 AUC after training: 0.8694266958424507
User 63279 does not improve AUC. Reverting changes.
Training on augumented user 86577 28/50 current_auc = 0.869855579868709
User 86577 AUC after training: 0.8689628008752734
User 86577 does not improve AUC. Reverting changes.
Training on augumented user 54862 29/50 current_auc = 0.869855579868709
User 54862 AUC after training: 0.8698293216630197
User 54862 does not improve AUC. Reverting changes.
Training on augumented user 91893 30/50 current_auc = 0.869855579868709
User 91893 AUC after training: 0.8691115973741794
User 91893 does not improve AUC. Reverting changes.
Training on augumented user 13636 31/50 current_auc = 0.869855579868709
User 13636 AUC after training: 0.8696192560175056
User 13636 does not improve AUC. Reverting changes.
Training on augumented user 107194 32/50 current_auc = 0.869855579868709
User 107194 AUC after training: 0.8698643326039388
User 107194 improves AUC. Keeping the model.
Training on augumented user 3467 33/50 current_auc = 0.8698643326039388
User 3467 AUC after training: 0.8696017505470459
User 3467 does not improve AUC. Reverting changes.
Training on augumented user 92845 34/50 current_auc = 0.8698643326039388
User 92845 AUC after training: 0.869636761487965
User 92845 does not improve AUC. Reverting changes.
Training on augumented user 76290 35/50 current_auc = 0.8698643326039388
User 76290 AUC after training: 0.8698118161925602
User 76290 does not improve AUC. Reverting changes.
Training on augumented user 39580 36/50 current_auc = 0.8698643326039388
User 39580 AUC after training: 0.8697330415754924
User 39580 does not improve AUC. Reverting changes.
Training on augumented user 44973 37/50 current_auc = 0.8698643326039388
User 44973 AUC after training: 0.869601750547046
User 44973 does not improve AUC. Reverting changes.
Training on augumented user 119661 38/50 current_auc = 0.8698643326039388
User 119661 AUC after training: 0.8690678336980306
User 119661 does not improve AUC. Reverting changes.
Training on augumented user 23563 39/50 current_auc = 0.8698643326039388
User 23563 AUC after training: 0.870109409190372
User 23563 improves AUC. Keeping the model.
Training on augumented user 56613 40/50 current_auc = 0.870109409190372
User 56613 AUC after training: 0.8699606126914662
User 56613 does not improve AUC. Reverting changes.
Training on augumented user 23245 41/50 current_auc = 0.870109409190372
User 23245 AUC after training: 0.8699693654266958
User 23245 does not improve AUC. Reverting changes.
Training on augumented user 4275 42/50 current_auc = 0.870109409190372
User 4275 AUC after training: 0.8700218818380744
User 4275 does not improve AUC. Reverting changes.
Training on augumented user 84025 43/50 current_auc = 0.870109409190372
User 84025 AUC after training: 0.8696892778993436
User 84025 does not improve AUC. Reverting changes.
Training on augumented user 47318 44/50 current_auc = 0.870109409190372
User 47318 AUC after training: 0.8699168490153173
User 47318 does not improve AUC. Reverting changes.
Training on augumented user 137805 45/50 current_auc = 0.870109409190372
User 137805 AUC after training: 0.869636761487965
User 137805 does not improve AUC. Reverting changes.
Training on augumented user 118012 46/50 current_auc = 0.870109409190372
User 118012 AUC after training: 0.8697067833698031
User 118012 does not improve AUC. Reverting changes.
Training on augumented user 88499 47/50 current_auc = 0.870109409190372
User 88499 AUC after training: 0.8694442013129102
User 88499 does not improve AUC. Reverting changes.
Training on augumented user 84559 48/50 current_auc = 0.870109409190372
User 84559 AUC after training: 0.8697592997811817
User 84559 does not improve AUC. Reverting changes.
Training on augumented user 78008 49/50 current_auc = 0.870109409190372
User 78008 AUC after training: 0.8699693654266958
User 78008 does not improve AUC. Reverting changes.
[2024-12-02 17:54:10.616665] start test user 27887 28/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:11.141203] start test user 27887 28/568 recall augumented users by random, augumented_users = [63399, 132541, 66987, 43635, 96078, 33636, 44426, 110072, 35765, 69221, 55702, 46689, 46771, 67269, 136976, 94175, 119753, 119153, 57251, 117928, 64150, 30138, 136095, 103022, 89480, 9663, 105238, 110226, 137453, 72397, 131615, 4404, 526, 72084, 38193, 40254, 59764, 57, 509, 49452, 22975, 127096, 124505, 137103, 25392, 138272, 84600, 8610, 49649, 119276]
[2024-12-02 17:54:11.156788] user = 27887 Cloud 28/568
[2024-12-02 17:54:11.171426] user = 27887 Local 28/568
[2024-12-02 17:54:11.197543] user = 27887 Local+ 28/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:14.324838] user = 27887 MPDA- 28/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.45959051724137934
Training on augumented user 63399 0/50 current_auc = 0.45959051724137934
User 63399 AUC after training: 0.4601293103448275
User 63399 improves AUC. Keeping the model.
Training on augumented user 132541 1/50 current_auc = 0.4601293103448275
User 132541 AUC after training: 0.45905172413793105
User 132541 does not improve AUC. Reverting changes.
Training on augumented user 66987 2/50 current_auc = 0.4601293103448275
User 66987 AUC after training: 0.46120689655172414
User 66987 improves AUC. Keeping the model.
Training on augumented user 43635 3/50 current_auc = 0.46120689655172414
User 43635 AUC after training: 0.46174568965517243
User 43635 improves AUC. Keeping the model.
Training on augumented user 96078 4/50 current_auc = 0.46174568965517243
User 96078 AUC after training: 0.46282327586206895
User 96078 improves AUC. Keeping the model.
Training on augumented user 33636 5/50 current_auc = 0.46282327586206895
User 33636 AUC after training: 0.46174568965517243
User 33636 does not improve AUC. Reverting changes.
Training on augumented user 44426 6/50 current_auc = 0.46282327586206895
User 44426 AUC after training: 0.4606681034482758
User 44426 does not improve AUC. Reverting changes.
Training on augumented user 110072 7/50 current_auc = 0.46282327586206895
User 110072 AUC after training: 0.4595905172413793
User 110072 does not improve AUC. Reverting changes.
Training on augumented user 35765 8/50 current_auc = 0.46282327586206895
User 35765 AUC after training: 0.4612068965517241
User 35765 does not improve AUC. Reverting changes.
Training on augumented user 69221 9/50 current_auc = 0.46282327586206895
User 69221 AUC after training: 0.4612068965517241
User 69221 does not improve AUC. Reverting changes.
Training on augumented user 55702 10/50 current_auc = 0.46282327586206895
User 55702 AUC after training: 0.4617456896551724
User 55702 does not improve AUC. Reverting changes.
Training on augumented user 46689 11/50 current_auc = 0.46282327586206895
User 46689 AUC after training: 0.4644396551724138
User 46689 improves AUC. Keeping the model.
Training on augumented user 46771 12/50 current_auc = 0.4644396551724138
User 46771 AUC after training: 0.46282327586206895
User 46771 does not improve AUC. Reverting changes.
Training on augumented user 67269 13/50 current_auc = 0.4644396551724138
User 67269 AUC after training: 0.4639008620689655
User 67269 does not improve AUC. Reverting changes.
Training on augumented user 136976 14/50 current_auc = 0.4644396551724138
User 136976 AUC after training: 0.46255387931034475
User 136976 does not improve AUC. Reverting changes.
Training on augumented user 94175 15/50 current_auc = 0.4644396551724138
User 94175 AUC after training: 0.45905172413793105
User 94175 does not improve AUC. Reverting changes.
Training on augumented user 119753 16/50 current_auc = 0.4644396551724138
User 119753 AUC after training: 0.4644396551724138
User 119753 does not improve AUC. Reverting changes.
Training on augumented user 119153 17/50 current_auc = 0.4644396551724138
User 119153 AUC after training: 0.46255387931034486
User 119153 does not improve AUC. Reverting changes.
Training on augumented user 57251 18/50 current_auc = 0.4644396551724138
User 57251 AUC after training: 0.46336206896551724
User 57251 does not improve AUC. Reverting changes.
Training on augumented user 117928 19/50 current_auc = 0.4644396551724138
User 117928 AUC after training: 0.46417025862068967
User 117928 does not improve AUC. Reverting changes.
Training on augumented user 64150 20/50 current_auc = 0.4644396551724138
User 64150 AUC after training: 0.4639008620689655
User 64150 does not improve AUC. Reverting changes.
Training on augumented user 30138 21/50 current_auc = 0.4644396551724138
User 30138 AUC after training: 0.4644396551724138
User 30138 does not improve AUC. Reverting changes.
Training on augumented user 136095 22/50 current_auc = 0.4644396551724138
User 136095 AUC after training: 0.46282327586206895
User 136095 does not improve AUC. Reverting changes.
Training on augumented user 103022 23/50 current_auc = 0.4644396551724138
User 103022 AUC after training: 0.4649784482758621
User 103022 improves AUC. Keeping the model.
Training on augumented user 89480 24/50 current_auc = 0.4649784482758621
User 89480 AUC after training: 0.4622844827586208
User 89480 does not improve AUC. Reverting changes.
Training on augumented user 9663 25/50 current_auc = 0.4649784482758621
User 9663 AUC after training: 0.46228448275862066
User 9663 does not improve AUC. Reverting changes.
Training on augumented user 105238 26/50 current_auc = 0.4649784482758621
User 105238 AUC after training: 0.4644396551724138
User 105238 does not improve AUC. Reverting changes.
Training on augumented user 110226 27/50 current_auc = 0.4649784482758621
User 110226 AUC after training: 0.4625538793103448
User 110226 does not improve AUC. Reverting changes.
Training on augumented user 137453 28/50 current_auc = 0.4649784482758621
User 137453 AUC after training: 0.46363146551724144
User 137453 does not improve AUC. Reverting changes.
Training on augumented user 72397 29/50 current_auc = 0.4649784482758621
User 72397 AUC after training: 0.4649784482758621
User 72397 does not improve AUC. Reverting changes.
Training on augumented user 131615 30/50 current_auc = 0.4649784482758621
User 131615 AUC after training: 0.46336206896551724
User 131615 does not improve AUC. Reverting changes.
Training on augumented user 4404 31/50 current_auc = 0.4649784482758621
User 4404 AUC after training: 0.46336206896551724
User 4404 does not improve AUC. Reverting changes.
Training on augumented user 526 32/50 current_auc = 0.4649784482758621
User 526 AUC after training: 0.46336206896551724
User 526 does not improve AUC. Reverting changes.
Training on augumented user 72084 33/50 current_auc = 0.4649784482758621
User 72084 AUC after training: 0.4655172413793104
User 72084 improves AUC. Keeping the model.
Training on augumented user 38193 34/50 current_auc = 0.4655172413793104
User 38193 AUC after training: 0.46417025862068967
User 38193 does not improve AUC. Reverting changes.
Training on augumented user 40254 35/50 current_auc = 0.4655172413793104
User 40254 AUC after training: 0.4647090517241379
User 40254 does not improve AUC. Reverting changes.
Training on augumented user 59764 36/50 current_auc = 0.4655172413793104
User 59764 AUC after training: 0.4655172413793104
User 59764 does not improve AUC. Reverting changes.
Training on augumented user 57 37/50 current_auc = 0.4655172413793104
User 57 AUC after training: 0.4649784482758621
User 57 does not improve AUC. Reverting changes.
Training on augumented user 509 38/50 current_auc = 0.4655172413793104
User 509 AUC after training: 0.46228448275862066
User 509 does not improve AUC. Reverting changes.
Training on augumented user 49452 39/50 current_auc = 0.4655172413793104
User 49452 AUC after training: 0.4655172413793104
User 49452 does not improve AUC. Reverting changes.
Training on augumented user 22975 40/50 current_auc = 0.4655172413793104
User 22975 AUC after training: 0.4649784482758621
User 22975 does not improve AUC. Reverting changes.
Training on augumented user 127096 41/50 current_auc = 0.4655172413793104
User 127096 AUC after training: 0.4622844827586208
User 127096 does not improve AUC. Reverting changes.
Training on augumented user 124505 42/50 current_auc = 0.4655172413793104
User 124505 AUC after training: 0.46336206896551724
User 124505 does not improve AUC. Reverting changes.
Training on augumented user 137103 43/50 current_auc = 0.4655172413793104
User 137103 AUC after training: 0.4622844827586207
User 137103 does not improve AUC. Reverting changes.
Training on augumented user 25392 44/50 current_auc = 0.4655172413793104
User 25392 AUC after training: 0.46309267241379315
User 25392 does not improve AUC. Reverting changes.
Training on augumented user 138272 45/50 current_auc = 0.4655172413793104
User 138272 AUC after training: 0.4652478448275862
User 138272 does not improve AUC. Reverting changes.
Training on augumented user 84600 46/50 current_auc = 0.4655172413793104
User 84600 AUC after training: 0.46417025862068967
User 84600 does not improve AUC. Reverting changes.
Training on augumented user 8610 47/50 current_auc = 0.4655172413793104
User 8610 AUC after training: 0.4639008620689655
User 8610 does not improve AUC. Reverting changes.
Training on augumented user 49649 48/50 current_auc = 0.4655172413793104
User 49649 AUC after training: 0.4639008620689655
User 49649 does not improve AUC. Reverting changes.
Training on augumented user 119276 49/50 current_auc = 0.4655172413793104
User 119276 AUC after training: 0.4639008620689655
User 119276 does not improve AUC. Reverting changes.
[2024-12-02 17:54:44.349950] start test user 27902 29/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:44.828112] start test user 27902 29/568 recall augumented users by random, augumented_users = [69116, 85266, 29818, 13539, 48924, 74680, 20159, 111181, 44737, 105109, 117571, 38112, 7360, 28682, 97081, 113869, 42211, 5923, 30666, 85325, 114638, 4688, 82235, 98634, 85945, 105928, 12564, 103515, 43800, 93913, 117153, 74348, 68066, 35270, 129383, 132241, 64136, 121039, 97358, 63366, 36105, 71644, 84558, 48648, 94675, 59200, 117504, 138098, 60177, 61603]
[2024-12-02 17:54:44.843424] user = 27902 Cloud 29/568
[2024-12-02 17:54:44.873710] user = 27902 Local 29/568
[2024-12-02 17:54:45.045462] user = 27902 Local+ 29/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:48.416612] user = 27902 MPDA- 29/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5747575625995079
Training on augumented user 69116 0/50 current_auc = 0.5747575625995079
User 69116 AUC after training: 0.5762049500651325
User 69116 improves AUC. Keeping the model.
Training on augumented user 85266 1/50 current_auc = 0.5762049500651325
User 85266 AUC after training: 0.5750470400926327
User 85266 does not improve AUC. Reverting changes.
Training on augumented user 29818 2/50 current_auc = 0.5762049500651325
User 29818 AUC after training: 0.5756259950788827
User 29818 does not improve AUC. Reverting changes.
Training on augumented user 13539 3/50 current_auc = 0.5762049500651325
User 13539 AUC after training: 0.5747575625995078
User 13539 does not improve AUC. Reverting changes.
Training on augumented user 48924 4/50 current_auc = 0.5762049500651325
User 48924 AUC after training: 0.5757707338254451
User 48924 does not improve AUC. Reverting changes.
Training on augumented user 74680 5/50 current_auc = 0.5762049500651325
User 74680 AUC after training: 0.5767839050513822
User 74680 improves AUC. Keeping the model.
Training on augumented user 20159 6/50 current_auc = 0.5767839050513822
User 20159 AUC after training: 0.5757707338254451
User 20159 does not improve AUC. Reverting changes.
Training on augumented user 111181 7/50 current_auc = 0.5767839050513822
User 111181 AUC after training: 0.5764944275582573
User 111181 does not improve AUC. Reverting changes.
Training on augumented user 44737 8/50 current_auc = 0.5767839050513822
User 44737 AUC after training: 0.5751917788391954
User 44737 does not improve AUC. Reverting changes.
Training on augumented user 105109 9/50 current_auc = 0.5767839050513822
User 105109 AUC after training: 0.5760602113185699
User 105109 does not improve AUC. Reverting changes.
Training on augumented user 117571 10/50 current_auc = 0.5767839050513822
User 117571 AUC after training: 0.5772181212910696
User 117571 improves AUC. Keeping the model.
Training on augumented user 38112 11/50 current_auc = 0.5772181212910696
User 38112 AUC after training: 0.577941815023882
User 38112 improves AUC. Keeping the model.
Training on augumented user 7360 12/50 current_auc = 0.577941815023882
User 7360 AUC after training: 0.577652337530757
User 7360 does not improve AUC. Reverting changes.
Training on augumented user 28682 13/50 current_auc = 0.577941815023882
User 28682 AUC after training: 0.5764944275582574
User 28682 does not improve AUC. Reverting changes.
Training on augumented user 97081 14/50 current_auc = 0.577941815023882
User 97081 AUC after training: 0.576349688811695
User 97081 does not improve AUC. Reverting changes.
Training on augumented user 113869 15/50 current_auc = 0.577941815023882
User 113869 AUC after training: 0.5783760312635693
User 113869 improves AUC. Keeping the model.
Training on augumented user 42211 16/50 current_auc = 0.5783760312635693
User 42211 AUC after training: 0.5789549862498191
User 42211 improves AUC. Keeping the model.
Training on augumented user 5923 17/50 current_auc = 0.5789549862498191
User 5923 AUC after training: 0.5783760312635692
User 5923 does not improve AUC. Reverting changes.
Training on augumented user 30666 18/50 current_auc = 0.5789549862498191
User 30666 AUC after training: 0.5785207700101317
User 30666 does not improve AUC. Reverting changes.
Training on augumented user 85325 19/50 current_auc = 0.5789549862498191
User 85325 AUC after training: 0.5782312925170068
User 85325 does not improve AUC. Reverting changes.
Training on augumented user 114638 20/50 current_auc = 0.5789549862498191
User 114638 AUC after training: 0.5779418150238819
User 114638 does not improve AUC. Reverting changes.
Training on augumented user 4688 21/50 current_auc = 0.5789549862498191
User 4688 AUC after training: 0.5780865537704443
User 4688 does not improve AUC. Reverting changes.
Training on augumented user 82235 22/50 current_auc = 0.5789549862498191
User 82235 AUC after training: 0.5796786799826313
User 82235 improves AUC. Keeping the model.
Training on augumented user 98634 23/50 current_auc = 0.5796786799826313
User 98634 AUC after training: 0.5783760312635693
User 98634 does not improve AUC. Reverting changes.
Training on augumented user 85945 24/50 current_auc = 0.5796786799826313
User 85945 AUC after training: 0.5788102475032566
User 85945 does not improve AUC. Reverting changes.
Training on augumented user 105928 25/50 current_auc = 0.5796786799826313
User 105928 AUC after training: 0.5785207700101318
User 105928 does not improve AUC. Reverting changes.
Training on augumented user 12564 26/50 current_auc = 0.5796786799826313
User 12564 AUC after training: 0.577941815023882
User 12564 does not improve AUC. Reverting changes.
Training on augumented user 103515 27/50 current_auc = 0.5796786799826313
User 103515 AUC after training: 0.5777970762773195
User 103515 does not improve AUC. Reverting changes.
Training on augumented user 43800 28/50 current_auc = 0.5796786799826313
User 43800 AUC after training: 0.5776523375307571
User 43800 does not improve AUC. Reverting changes.
Training on augumented user 93913 29/50 current_auc = 0.5796786799826313
User 93913 AUC after training: 0.5777970762773195
User 93913 does not improve AUC. Reverting changes.
Training on augumented user 117153 30/50 current_auc = 0.5796786799826313
User 117153 AUC after training: 0.5770733825445071
User 117153 does not improve AUC. Reverting changes.
Training on augumented user 74348 31/50 current_auc = 0.5796786799826313
User 74348 AUC after training: 0.5788102475032567
User 74348 does not improve AUC. Reverting changes.
Training on augumented user 68066 32/50 current_auc = 0.5796786799826313
User 68066 AUC after training: 0.578954986249819
User 68066 does not improve AUC. Reverting changes.
Training on augumented user 35270 33/50 current_auc = 0.5796786799826313
User 35270 AUC after training: 0.5789549862498191
User 35270 does not improve AUC. Reverting changes.
Training on augumented user 129383 34/50 current_auc = 0.5796786799826313
User 129383 AUC after training: 0.579244463742944
User 129383 does not improve AUC. Reverting changes.
Training on augumented user 132241 35/50 current_auc = 0.5796786799826313
User 132241 AUC after training: 0.5809813287016935
User 132241 improves AUC. Keeping the model.
Training on augumented user 64136 36/50 current_auc = 0.5809813287016935
User 64136 AUC after training: 0.5793892024895065
User 64136 does not improve AUC. Reverting changes.
Training on augumented user 121039 37/50 current_auc = 0.5809813287016935
User 121039 AUC after training: 0.5815602836879433
User 121039 improves AUC. Keeping the model.
Training on augumented user 97358 38/50 current_auc = 0.5815602836879433
User 97358 AUC after training: 0.5786655087566942
User 97358 does not improve AUC. Reverting changes.
Training on augumented user 63366 39/50 current_auc = 0.5815602836879433
User 63366 AUC after training: 0.5801128962223188
User 63366 does not improve AUC. Reverting changes.
Training on augumented user 36105 40/50 current_auc = 0.5815602836879433
User 36105 AUC after training: 0.5828629324070055
User 36105 improves AUC. Keeping the model.
Training on augumented user 71644 41/50 current_auc = 0.5828629324070055
User 71644 AUC after training: 0.580836589955131
User 71644 does not improve AUC. Reverting changes.
Training on augumented user 84558 42/50 current_auc = 0.5828629324070055
User 84558 AUC after training: 0.5802576349688812
User 84558 does not improve AUC. Reverting changes.
Training on augumented user 48648 43/50 current_auc = 0.5828629324070055
User 48648 AUC after training: 0.5828629324070054
User 48648 does not improve AUC. Reverting changes.
Training on augumented user 94675 44/50 current_auc = 0.5828629324070055
User 94675 AUC after training: 0.5815602836879433
User 94675 does not improve AUC. Reverting changes.
Training on augumented user 59200 45/50 current_auc = 0.5828629324070055
User 59200 AUC after training: 0.5809813287016935
User 59200 does not improve AUC. Reverting changes.
Training on augumented user 117504 46/50 current_auc = 0.5828629324070055
User 117504 AUC after training: 0.5821392386741931
User 117504 does not improve AUC. Reverting changes.
Training on augumented user 138098 47/50 current_auc = 0.5828629324070055
User 138098 AUC after training: 0.5837313648863801
User 138098 improves AUC. Keeping the model.
Training on augumented user 60177 48/50 current_auc = 0.5837313648863801
User 60177 AUC after training: 0.5822839774207555
User 60177 does not improve AUC. Reverting changes.
Training on augumented user 61603 49/50 current_auc = 0.5837313648863801
User 61603 AUC after training: 0.5809813287016935
User 61603 does not improve AUC. Reverting changes.
[2024-12-02 17:55:24.757721] start test user 27921 30/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:25.466355] start test user 27921 30/568 recall augumented users by random, augumented_users = [19182, 99349, 61852, 6928, 111979, 53341, 104621, 53676, 71144, 5623, 136768, 56414, 63871, 68448, 15470, 135441, 89566, 97355, 127401, 98331, 64758, 108803, 129434, 21782, 83544, 69189, 49475, 114163, 137273, 49244, 42700, 113813, 49718, 137228, 78287, 126927, 119241, 56970, 87960, 98017, 67248, 67062, 7017, 81261, 24262, 25528, 78891, 85195, 116794, 47657]
[2024-12-02 17:55:25.504441] user = 27921 Cloud 30/568
[2024-12-02 17:55:25.515109] user = 27921 Local 30/568
[2024-12-02 17:55:25.589232] user = 27921 Local+ 30/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:28.667987] user = 27921 MPDA- 30/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7
Training on augumented user 19182 0/50 current_auc = 0.7
User 19182 AUC after training: 0.7
User 19182 does not improve AUC. Reverting changes.
Training on augumented user 99349 1/50 current_auc = 0.7
User 99349 AUC after training: 0.7
User 99349 does not improve AUC. Reverting changes.
Training on augumented user 61852 2/50 current_auc = 0.7
User 61852 AUC after training: 0.7
User 61852 does not improve AUC. Reverting changes.
Training on augumented user 6928 3/50 current_auc = 0.7
User 6928 AUC after training: 0.6666666666666666
User 6928 does not improve AUC. Reverting changes.
Training on augumented user 111979 4/50 current_auc = 0.7
User 111979 AUC after training: 0.7
User 111979 does not improve AUC. Reverting changes.
Training on augumented user 53341 5/50 current_auc = 0.7
User 53341 AUC after training: 0.7
User 53341 does not improve AUC. Reverting changes.
Training on augumented user 104621 6/50 current_auc = 0.7
User 104621 AUC after training: 0.7
User 104621 does not improve AUC. Reverting changes.
Training on augumented user 53676 7/50 current_auc = 0.7
User 53676 AUC after training: 0.7
User 53676 does not improve AUC. Reverting changes.
Training on augumented user 71144 8/50 current_auc = 0.7
User 71144 AUC after training: 0.7
User 71144 does not improve AUC. Reverting changes.
Training on augumented user 5623 9/50 current_auc = 0.7
User 5623 AUC after training: 0.7
User 5623 does not improve AUC. Reverting changes.
Training on augumented user 136768 10/50 current_auc = 0.7
User 136768 AUC after training: 0.7
User 136768 does not improve AUC. Reverting changes.
Training on augumented user 56414 11/50 current_auc = 0.7
User 56414 AUC after training: 0.7
User 56414 does not improve AUC. Reverting changes.
Training on augumented user 63871 12/50 current_auc = 0.7
User 63871 AUC after training: 0.7
User 63871 does not improve AUC. Reverting changes.
Training on augumented user 68448 13/50 current_auc = 0.7
User 68448 AUC after training: 0.7
User 68448 does not improve AUC. Reverting changes.
Training on augumented user 15470 14/50 current_auc = 0.7
User 15470 AUC after training: 0.7
User 15470 does not improve AUC. Reverting changes.
Training on augumented user 135441 15/50 current_auc = 0.7
User 135441 AUC after training: 0.7
User 135441 does not improve AUC. Reverting changes.
Training on augumented user 89566 16/50 current_auc = 0.7
User 89566 AUC after training: 0.7
User 89566 does not improve AUC. Reverting changes.
Training on augumented user 97355 17/50 current_auc = 0.7
User 97355 AUC after training: 0.7
User 97355 does not improve AUC. Reverting changes.
Training on augumented user 127401 18/50 current_auc = 0.7
User 127401 AUC after training: 0.7
User 127401 does not improve AUC. Reverting changes.
Training on augumented user 98331 19/50 current_auc = 0.7
User 98331 AUC after training: 0.7
User 98331 does not improve AUC. Reverting changes.
Training on augumented user 64758 20/50 current_auc = 0.7
User 64758 AUC after training: 0.6666666666666666
User 64758 does not improve AUC. Reverting changes.
Training on augumented user 108803 21/50 current_auc = 0.7
User 108803 AUC after training: 0.7
User 108803 does not improve AUC. Reverting changes.
Training on augumented user 129434 22/50 current_auc = 0.7
User 129434 AUC after training: 0.7
User 129434 does not improve AUC. Reverting changes.
Training on augumented user 21782 23/50 current_auc = 0.7
User 21782 AUC after training: 0.7
User 21782 does not improve AUC. Reverting changes.
Training on augumented user 83544 24/50 current_auc = 0.7
User 83544 AUC after training: 0.7
User 83544 does not improve AUC. Reverting changes.
Training on augumented user 69189 25/50 current_auc = 0.7
User 69189 AUC after training: 0.7
User 69189 does not improve AUC. Reverting changes.
Training on augumented user 49475 26/50 current_auc = 0.7
User 49475 AUC after training: 0.7
User 49475 does not improve AUC. Reverting changes.
Training on augumented user 114163 27/50 current_auc = 0.7
User 114163 AUC after training: 0.7
User 114163 does not improve AUC. Reverting changes.
Training on augumented user 137273 28/50 current_auc = 0.7
User 137273 AUC after training: 0.7
User 137273 does not improve AUC. Reverting changes.
Training on augumented user 49244 29/50 current_auc = 0.7
User 49244 AUC after training: 0.7
User 49244 does not improve AUC. Reverting changes.
Training on augumented user 42700 30/50 current_auc = 0.7
User 42700 AUC after training: 0.7
User 42700 does not improve AUC. Reverting changes.
Training on augumented user 113813 31/50 current_auc = 0.7
User 113813 AUC after training: 0.7
User 113813 does not improve AUC. Reverting changes.
Training on augumented user 49718 32/50 current_auc = 0.7
User 49718 AUC after training: 0.7
User 49718 does not improve AUC. Reverting changes.
Training on augumented user 137228 33/50 current_auc = 0.7
User 137228 AUC after training: 0.7
User 137228 does not improve AUC. Reverting changes.
Training on augumented user 78287 34/50 current_auc = 0.7
User 78287 AUC after training: 0.7
User 78287 does not improve AUC. Reverting changes.
Training on augumented user 126927 35/50 current_auc = 0.7
User 126927 AUC after training: 0.7
User 126927 does not improve AUC. Reverting changes.
Training on augumented user 119241 36/50 current_auc = 0.7
User 119241 AUC after training: 0.7
User 119241 does not improve AUC. Reverting changes.
Training on augumented user 56970 37/50 current_auc = 0.7
User 56970 AUC after training: 0.7
User 56970 does not improve AUC. Reverting changes.
Training on augumented user 87960 38/50 current_auc = 0.7
User 87960 AUC after training: 0.7
User 87960 does not improve AUC. Reverting changes.
Training on augumented user 98017 39/50 current_auc = 0.7
User 98017 AUC after training: 0.7
User 98017 does not improve AUC. Reverting changes.
Training on augumented user 67248 40/50 current_auc = 0.7
User 67248 AUC after training: 0.7
User 67248 does not improve AUC. Reverting changes.
Training on augumented user 67062 41/50 current_auc = 0.7
User 67062 AUC after training: 0.7
User 67062 does not improve AUC. Reverting changes.
Training on augumented user 7017 42/50 current_auc = 0.7
User 7017 AUC after training: 0.7
User 7017 does not improve AUC. Reverting changes.
Training on augumented user 81261 43/50 current_auc = 0.7
User 81261 AUC after training: 0.6666666666666666
User 81261 does not improve AUC. Reverting changes.
Training on augumented user 24262 44/50 current_auc = 0.7
User 24262 AUC after training: 0.7
User 24262 does not improve AUC. Reverting changes.
Training on augumented user 25528 45/50 current_auc = 0.7
User 25528 AUC after training: 0.7
User 25528 does not improve AUC. Reverting changes.
Training on augumented user 78891 46/50 current_auc = 0.7
User 78891 AUC after training: 0.7
User 78891 does not improve AUC. Reverting changes.
Training on augumented user 85195 47/50 current_auc = 0.7
User 85195 AUC after training: 0.7
User 85195 does not improve AUC. Reverting changes.
Training on augumented user 116794 48/50 current_auc = 0.7
User 116794 AUC after training: 0.7
User 116794 does not improve AUC. Reverting changes.
Training on augumented user 47657 49/50 current_auc = 0.7
User 47657 AUC after training: 0.7
User 47657 does not improve AUC. Reverting changes.
[2024-12-02 17:56:03.394653] start test user 27935 31/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:04.132053] start test user 27935 31/568 recall augumented users by random, augumented_users = [121080, 94149, 225, 15805, 110004, 29513, 58304, 9071, 31434, 74795, 36414, 70379, 35932, 77495, 111673, 55312, 38083, 51942, 68659, 42856, 69162, 9714, 84423, 35492, 27224, 78178, 123155, 66906, 133589, 92709, 78591, 86827, 57034, 91014, 138258, 96511, 516, 109163, 74076, 7289, 48571, 18548, 13256, 100935, 129802, 47608, 121939, 50001, 61351, 20931]
[2024-12-02 17:56:04.155232] user = 27935 Cloud 31/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:56:04.178231] user = 27935 Local 31/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:56:04.210748] user = 27935 Local+ 31/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:56:08.523529] user = 27935 MPDA- 31/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 121080 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121080 AUC after training: 0.5
User 121080 does not improve AUC. Reverting changes.
Training on augumented user 94149 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94149 AUC after training: 0.5
User 94149 does not improve AUC. Reverting changes.
Training on augumented user 225 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 225 AUC after training: 0.5
User 225 does not improve AUC. Reverting changes.
Training on augumented user 15805 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15805 AUC after training: 0.5
User 15805 does not improve AUC. Reverting changes.
Training on augumented user 110004 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110004 AUC after training: 0.5
User 110004 does not improve AUC. Reverting changes.
Training on augumented user 29513 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29513 AUC after training: 0.5
User 29513 does not improve AUC. Reverting changes.
Training on augumented user 58304 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58304 AUC after training: 0.5
User 58304 does not improve AUC. Reverting changes.
Training on augumented user 9071 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9071 AUC after training: 0.5
User 9071 does not improve AUC. Reverting changes.
Training on augumented user 31434 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31434 AUC after training: 0.5
User 31434 does not improve AUC. Reverting changes.
Training on augumented user 74795 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74795 AUC after training: 0.5
User 74795 does not improve AUC. Reverting changes.
Training on augumented user 36414 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36414 AUC after training: 0.5
User 36414 does not improve AUC. Reverting changes.
Training on augumented user 70379 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70379 AUC after training: 0.5
User 70379 does not improve AUC. Reverting changes.
Training on augumented user 35932 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35932 AUC after training: 0.5
User 35932 does not improve AUC. Reverting changes.
Training on augumented user 77495 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77495 AUC after training: 0.5
User 77495 does not improve AUC. Reverting changes.
Training on augumented user 111673 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111673 AUC after training: 0.5
User 111673 does not improve AUC. Reverting changes.
Training on augumented user 55312 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55312 AUC after training: 0.5
User 55312 does not improve AUC. Reverting changes.
Training on augumented user 38083 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38083 AUC after training: 0.5
User 38083 does not improve AUC. Reverting changes.
Training on augumented user 51942 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51942 AUC after training: 0.5
User 51942 does not improve AUC. Reverting changes.
Training on augumented user 68659 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68659 AUC after training: 0.5
User 68659 does not improve AUC. Reverting changes.
Training on augumented user 42856 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42856 AUC after training: 0.5
User 42856 does not improve AUC. Reverting changes.
Training on augumented user 69162 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69162 AUC after training: 0.5
User 69162 does not improve AUC. Reverting changes.
Training on augumented user 9714 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9714 AUC after training: 0.5
User 9714 does not improve AUC. Reverting changes.
Training on augumented user 84423 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84423 AUC after training: 0.5
User 84423 does not improve AUC. Reverting changes.
Training on augumented user 35492 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35492 AUC after training: 0.5
User 35492 does not improve AUC. Reverting changes.
Training on augumented user 27224 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27224 AUC after training: 0.5
User 27224 does not improve AUC. Reverting changes.
Training on augumented user 78178 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78178 AUC after training: 0.5
User 78178 does not improve AUC. Reverting changes.
Training on augumented user 123155 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123155 AUC after training: 0.5
User 123155 does not improve AUC. Reverting changes.
Training on augumented user 66906 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66906 AUC after training: 0.5
User 66906 does not improve AUC. Reverting changes.
Training on augumented user 133589 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133589 AUC after training: 0.5
User 133589 does not improve AUC. Reverting changes.
Training on augumented user 92709 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92709 AUC after training: 0.5
User 92709 does not improve AUC. Reverting changes.
Training on augumented user 78591 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78591 AUC after training: 0.5
User 78591 does not improve AUC. Reverting changes.
Training on augumented user 86827 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86827 AUC after training: 0.5
User 86827 does not improve AUC. Reverting changes.
Training on augumented user 57034 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57034 AUC after training: 0.5
User 57034 does not improve AUC. Reverting changes.
Training on augumented user 91014 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91014 AUC after training: 0.5
User 91014 does not improve AUC. Reverting changes.
Training on augumented user 138258 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138258 AUC after training: 0.5
User 138258 does not improve AUC. Reverting changes.
Training on augumented user 96511 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96511 AUC after training: 0.5
User 96511 does not improve AUC. Reverting changes.
Training on augumented user 516 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 516 AUC after training: 0.5
User 516 does not improve AUC. Reverting changes.
Training on augumented user 109163 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109163 AUC after training: 0.5
User 109163 does not improve AUC. Reverting changes.
Training on augumented user 74076 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74076 AUC after training: 0.5
User 74076 does not improve AUC. Reverting changes.
Training on augumented user 7289 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7289 AUC after training: 0.5
User 7289 does not improve AUC. Reverting changes.
Training on augumented user 48571 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48571 AUC after training: 0.5
User 48571 does not improve AUC. Reverting changes.
Training on augumented user 18548 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18548 AUC after training: 0.5
User 18548 does not improve AUC. Reverting changes.
Training on augumented user 13256 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13256 AUC after training: 0.5
User 13256 does not improve AUC. Reverting changes.
Training on augumented user 100935 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100935 AUC after training: 0.5
User 100935 does not improve AUC. Reverting changes.
Training on augumented user 129802 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129802 AUC after training: 0.5
User 129802 does not improve AUC. Reverting changes.
Training on augumented user 47608 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47608 AUC after training: 0.5
User 47608 does not improve AUC. Reverting changes.
Training on augumented user 121939 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121939 AUC after training: 0.5
User 121939 does not improve AUC. Reverting changes.
Training on augumented user 50001 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50001 AUC after training: 0.5
User 50001 does not improve AUC. Reverting changes.
Training on augumented user 61351 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61351 AUC after training: 0.5
User 61351 does not improve AUC. Reverting changes.
Training on augumented user 20931 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20931 AUC after training: 0.5
User 20931 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:56:42.239992] start test user 27943 32/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:42.721353] start test user 27943 32/568 recall augumented users by random, augumented_users = [124328, 92768, 34975, 32985, 117195, 112633, 52927, 86862, 93073, 86747, 7176, 87248, 132531, 94807, 66740, 107762, 97336, 71899, 136002, 20839, 107721, 10389, 7533, 26885, 120007, 14210, 108948, 8957, 42831, 40817, 39573, 122259, 23830, 37751, 58721, 104926, 125067, 99278, 112444, 114534, 132732, 68895, 130967, 100246, 1254, 64617, 20483, 136847, 8983, 24346]
[2024-12-02 17:56:42.737260] user = 27943 Cloud 32/568
[2024-12-02 17:56:42.749412] user = 27943 Local 32/568
[2024-12-02 17:56:42.794781] user = 27943 Local+ 32/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:45.695280] user = 27943 MPDA- 32/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.58
Training on augumented user 124328 0/50 current_auc = 0.58
User 124328 AUC after training: 0.58
User 124328 does not improve AUC. Reverting changes.
Training on augumented user 92768 1/50 current_auc = 0.58
User 92768 AUC after training: 0.58
User 92768 does not improve AUC. Reverting changes.
Training on augumented user 34975 2/50 current_auc = 0.58
User 34975 AUC after training: 0.58
User 34975 does not improve AUC. Reverting changes.
Training on augumented user 32985 3/50 current_auc = 0.58
User 32985 AUC after training: 0.58
User 32985 does not improve AUC. Reverting changes.
Training on augumented user 117195 4/50 current_auc = 0.58
User 117195 AUC after training: 0.58
User 117195 does not improve AUC. Reverting changes.
Training on augumented user 112633 5/50 current_auc = 0.58
User 112633 AUC after training: 0.58
User 112633 does not improve AUC. Reverting changes.
Training on augumented user 52927 6/50 current_auc = 0.58
User 52927 AUC after training: 0.58
User 52927 does not improve AUC. Reverting changes.
Training on augumented user 86862 7/50 current_auc = 0.58
User 86862 AUC after training: 0.59
User 86862 improves AUC. Keeping the model.
Training on augumented user 93073 8/50 current_auc = 0.59
User 93073 AUC after training: 0.59
User 93073 does not improve AUC. Reverting changes.
Training on augumented user 86747 9/50 current_auc = 0.59
User 86747 AUC after training: 0.59
User 86747 does not improve AUC. Reverting changes.
Training on augumented user 7176 10/50 current_auc = 0.59
User 7176 AUC after training: 0.58
User 7176 does not improve AUC. Reverting changes.
Training on augumented user 87248 11/50 current_auc = 0.59
User 87248 AUC after training: 0.59
User 87248 does not improve AUC. Reverting changes.
Training on augumented user 132531 12/50 current_auc = 0.59
User 132531 AUC after training: 0.57
User 132531 does not improve AUC. Reverting changes.
Training on augumented user 94807 13/50 current_auc = 0.59
User 94807 AUC after training: 0.59
User 94807 does not improve AUC. Reverting changes.
Training on augumented user 66740 14/50 current_auc = 0.59
User 66740 AUC after training: 0.59
User 66740 does not improve AUC. Reverting changes.
Training on augumented user 107762 15/50 current_auc = 0.59
User 107762 AUC after training: 0.59
User 107762 does not improve AUC. Reverting changes.
Training on augumented user 97336 16/50 current_auc = 0.59
User 97336 AUC after training: 0.59
User 97336 does not improve AUC. Reverting changes.
Training on augumented user 71899 17/50 current_auc = 0.59
User 71899 AUC after training: 0.59
User 71899 does not improve AUC. Reverting changes.
Training on augumented user 136002 18/50 current_auc = 0.59
User 136002 AUC after training: 0.59
User 136002 does not improve AUC. Reverting changes.
Training on augumented user 20839 19/50 current_auc = 0.59
User 20839 AUC after training: 0.58
User 20839 does not improve AUC. Reverting changes.
Training on augumented user 107721 20/50 current_auc = 0.59
User 107721 AUC after training: 0.58
User 107721 does not improve AUC. Reverting changes.
Training on augumented user 10389 21/50 current_auc = 0.59
User 10389 AUC after training: 0.5599999999999999
User 10389 does not improve AUC. Reverting changes.
Training on augumented user 7533 22/50 current_auc = 0.59
User 7533 AUC after training: 0.6
User 7533 improves AUC. Keeping the model.
Training on augumented user 26885 23/50 current_auc = 0.6
User 26885 AUC after training: 0.58
User 26885 does not improve AUC. Reverting changes.
Training on augumented user 120007 24/50 current_auc = 0.6
User 120007 AUC after training: 0.59
User 120007 does not improve AUC. Reverting changes.
Training on augumented user 14210 25/50 current_auc = 0.6
User 14210 AUC after training: 0.58
User 14210 does not improve AUC. Reverting changes.
Training on augumented user 108948 26/50 current_auc = 0.6
User 108948 AUC after training: 0.6
User 108948 does not improve AUC. Reverting changes.
Training on augumented user 8957 27/50 current_auc = 0.6
User 8957 AUC after training: 0.58
User 8957 does not improve AUC. Reverting changes.
Training on augumented user 42831 28/50 current_auc = 0.6
User 42831 AUC after training: 0.6
User 42831 does not improve AUC. Reverting changes.
Training on augumented user 40817 29/50 current_auc = 0.6
User 40817 AUC after training: 0.6
User 40817 does not improve AUC. Reverting changes.
Training on augumented user 39573 30/50 current_auc = 0.6
User 39573 AUC after training: 0.6
User 39573 does not improve AUC. Reverting changes.
Training on augumented user 122259 31/50 current_auc = 0.6
User 122259 AUC after training: 0.6
User 122259 does not improve AUC. Reverting changes.
Training on augumented user 23830 32/50 current_auc = 0.6
User 23830 AUC after training: 0.6
User 23830 does not improve AUC. Reverting changes.
Training on augumented user 37751 33/50 current_auc = 0.6
User 37751 AUC after training: 0.59
User 37751 does not improve AUC. Reverting changes.
Training on augumented user 58721 34/50 current_auc = 0.6
User 58721 AUC after training: 0.59
User 58721 does not improve AUC. Reverting changes.
Training on augumented user 104926 35/50 current_auc = 0.6
User 104926 AUC after training: 0.6
User 104926 does not improve AUC. Reverting changes.
Training on augumented user 125067 36/50 current_auc = 0.6
User 125067 AUC after training: 0.6
User 125067 does not improve AUC. Reverting changes.
Training on augumented user 99278 37/50 current_auc = 0.6
User 99278 AUC after training: 0.58
User 99278 does not improve AUC. Reverting changes.
Training on augumented user 112444 38/50 current_auc = 0.6
User 112444 AUC after training: 0.6
User 112444 does not improve AUC. Reverting changes.
Training on augumented user 114534 39/50 current_auc = 0.6
User 114534 AUC after training: 0.59
User 114534 does not improve AUC. Reverting changes.
Training on augumented user 132732 40/50 current_auc = 0.6
User 132732 AUC after training: 0.59
User 132732 does not improve AUC. Reverting changes.
Training on augumented user 68895 41/50 current_auc = 0.6
User 68895 AUC after training: 0.6
User 68895 does not improve AUC. Reverting changes.
Training on augumented user 130967 42/50 current_auc = 0.6
User 130967 AUC after training: 0.59
User 130967 does not improve AUC. Reverting changes.
Training on augumented user 100246 43/50 current_auc = 0.6
User 100246 AUC after training: 0.6
User 100246 does not improve AUC. Reverting changes.
Training on augumented user 1254 44/50 current_auc = 0.6
User 1254 AUC after training: 0.59
User 1254 does not improve AUC. Reverting changes.
Training on augumented user 64617 45/50 current_auc = 0.6
User 64617 AUC after training: 0.59
User 64617 does not improve AUC. Reverting changes.
Training on augumented user 20483 46/50 current_auc = 0.6
User 20483 AUC after training: 0.58
User 20483 does not improve AUC. Reverting changes.
Training on augumented user 136847 47/50 current_auc = 0.6
User 136847 AUC after training: 0.6
User 136847 does not improve AUC. Reverting changes.
Training on augumented user 8983 48/50 current_auc = 0.6
User 8983 AUC after training: 0.59
User 8983 does not improve AUC. Reverting changes.
Training on augumented user 24346 49/50 current_auc = 0.6
User 24346 AUC after training: 0.59
User 24346 does not improve AUC. Reverting changes.
[2024-12-02 17:57:19.511066] start test user 27967 33/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:19.969083] start test user 27967 33/568 recall augumented users by random, augumented_users = [30923, 61646, 122601, 30392, 131422, 47428, 32128, 49340, 126203, 127907, 44771, 11426, 81012, 88680, 45809, 70024, 117450, 128751, 104568, 14522, 129394, 94861, 52377, 94103, 62323, 28441, 89451, 134919, 129610, 29433, 59680, 35632, 20052, 125117, 40595, 17298, 43944, 79018, 26303, 26011, 17123, 126777, 86266, 29787, 62598, 95543, 46453, 55328, 89083, 61098]
[2024-12-02 17:57:19.985303] user = 27967 Cloud 33/568
[2024-12-02 17:57:19.998568] user = 27967 Local 33/568
[2024-12-02 17:57:20.042595] user = 27967 Local+ 33/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:22.640078] user = 27967 MPDA- 33/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6440030557677616
Training on augumented user 30923 0/50 current_auc = 0.6440030557677616
User 30923 AUC after training: 0.6440030557677615
User 30923 does not improve AUC. Reverting changes.
Training on augumented user 61646 1/50 current_auc = 0.6440030557677616
User 61646 AUC after training: 0.6447669977081741
User 61646 improves AUC. Keeping the model.
Training on augumented user 122601 2/50 current_auc = 0.6447669977081741
User 122601 AUC after training: 0.641711229946524
User 122601 does not improve AUC. Reverting changes.
Training on augumented user 30392 3/50 current_auc = 0.6447669977081741
User 30392 AUC after training: 0.6440030557677616
User 30392 does not improve AUC. Reverting changes.
Training on augumented user 131422 4/50 current_auc = 0.6447669977081741
User 131422 AUC after training: 0.641711229946524
User 131422 does not improve AUC. Reverting changes.
Training on augumented user 47428 5/50 current_auc = 0.6447669977081741
User 47428 AUC after training: 0.6440030557677616
User 47428 does not improve AUC. Reverting changes.
Training on augumented user 32128 6/50 current_auc = 0.6447669977081741
User 32128 AUC after training: 0.6409472880061117
User 32128 does not improve AUC. Reverting changes.
Training on augumented user 49340 7/50 current_auc = 0.6447669977081741
User 49340 AUC after training: 0.6447669977081741
User 49340 does not improve AUC. Reverting changes.
Training on augumented user 126203 8/50 current_auc = 0.6447669977081741
User 126203 AUC after training: 0.6470588235294117
User 126203 improves AUC. Keeping the model.
Training on augumented user 127907 9/50 current_auc = 0.6470588235294117
User 127907 AUC after training: 0.6462948815889992
User 127907 does not improve AUC. Reverting changes.
Training on augumented user 44771 10/50 current_auc = 0.6470588235294117
User 44771 AUC after training: 0.6417112299465241
User 44771 does not improve AUC. Reverting changes.
Training on augumented user 11426 11/50 current_auc = 0.6470588235294117
User 11426 AUC after training: 0.6447669977081741
User 11426 does not improve AUC. Reverting changes.
Training on augumented user 81012 12/50 current_auc = 0.6470588235294117
User 81012 AUC after training: 0.6478227654698242
User 81012 improves AUC. Keeping the model.
Training on augumented user 88680 13/50 current_auc = 0.6478227654698242
User 88680 AUC after training: 0.6478227654698242
User 88680 does not improve AUC. Reverting changes.
Training on augumented user 45809 14/50 current_auc = 0.6478227654698242
User 45809 AUC after training: 0.6462948815889992
User 45809 does not improve AUC. Reverting changes.
Training on augumented user 70024 15/50 current_auc = 0.6478227654698242
User 70024 AUC after training: 0.6478227654698242
User 70024 does not improve AUC. Reverting changes.
Training on augumented user 117450 16/50 current_auc = 0.6478227654698242
User 117450 AUC after training: 0.6478227654698242
User 117450 does not improve AUC. Reverting changes.
Training on augumented user 128751 17/50 current_auc = 0.6478227654698242
User 128751 AUC after training: 0.6478227654698242
User 128751 does not improve AUC. Reverting changes.
Training on augumented user 104568 18/50 current_auc = 0.6478227654698242
User 104568 AUC after training: 0.6516424751718869
User 104568 improves AUC. Keeping the model.
Training on augumented user 14522 19/50 current_auc = 0.6516424751718869
User 14522 AUC after training: 0.6516424751718869
User 14522 does not improve AUC. Reverting changes.
Training on augumented user 129394 20/50 current_auc = 0.6516424751718869
User 129394 AUC after training: 0.6478227654698242
User 129394 does not improve AUC. Reverting changes.
Training on augumented user 94861 21/50 current_auc = 0.6516424751718869
User 94861 AUC after training: 0.6516424751718869
User 94861 does not improve AUC. Reverting changes.
Training on augumented user 52377 22/50 current_auc = 0.6516424751718869
User 52377 AUC after training: 0.6531703590527119
User 52377 improves AUC. Keeping the model.
Training on augumented user 94103 23/50 current_auc = 0.6531703590527119
User 94103 AUC after training: 0.6524064171122993
User 94103 does not improve AUC. Reverting changes.
Training on augumented user 62323 24/50 current_auc = 0.6531703590527119
User 62323 AUC after training: 0.6501145912910619
User 62323 does not improve AUC. Reverting changes.
Training on augumented user 28441 25/50 current_auc = 0.6531703590527119
User 28441 AUC after training: 0.6524064171122993
User 28441 does not improve AUC. Reverting changes.
Training on augumented user 89451 26/50 current_auc = 0.6531703590527119
User 89451 AUC after training: 0.6508785332314743
User 89451 does not improve AUC. Reverting changes.
Training on augumented user 134919 27/50 current_auc = 0.6531703590527119
User 134919 AUC after training: 0.6516424751718869
User 134919 does not improve AUC. Reverting changes.
Training on augumented user 129610 28/50 current_auc = 0.6531703590527119
User 129610 AUC after training: 0.6524064171122993
User 129610 does not improve AUC. Reverting changes.
Training on augumented user 29433 29/50 current_auc = 0.6531703590527119
User 29433 AUC after training: 0.6524064171122993
User 29433 does not improve AUC. Reverting changes.
Training on augumented user 59680 30/50 current_auc = 0.6531703590527119
User 59680 AUC after training: 0.6432391138273491
User 59680 does not improve AUC. Reverting changes.
Training on augumented user 35632 31/50 current_auc = 0.6531703590527119
User 35632 AUC after training: 0.6524064171122993
User 35632 does not improve AUC. Reverting changes.
Training on augumented user 20052 32/50 current_auc = 0.6531703590527119
User 20052 AUC after training: 0.6478227654698243
User 20052 does not improve AUC. Reverting changes.
Training on augumented user 125117 33/50 current_auc = 0.6531703590527119
User 125117 AUC after training: 0.6524064171122993
User 125117 does not improve AUC. Reverting changes.
Training on augumented user 40595 34/50 current_auc = 0.6531703590527119
User 40595 AUC after training: 0.6501145912910619
User 40595 does not improve AUC. Reverting changes.
Training on augumented user 17298 35/50 current_auc = 0.6531703590527119
User 17298 AUC after training: 0.653170359052712
User 17298 improves AUC. Keeping the model.
Training on augumented user 43944 36/50 current_auc = 0.653170359052712
User 43944 AUC after training: 0.651642475171887
User 43944 does not improve AUC. Reverting changes.
Training on augumented user 79018 37/50 current_auc = 0.653170359052712
User 79018 AUC after training: 0.6524064171122994
User 79018 does not improve AUC. Reverting changes.
Training on augumented user 26303 38/50 current_auc = 0.653170359052712
User 26303 AUC after training: 0.6508785332314744
User 26303 does not improve AUC. Reverting changes.
Training on augumented user 26011 39/50 current_auc = 0.653170359052712
User 26011 AUC after training: 0.6508785332314744
User 26011 does not improve AUC. Reverting changes.
Training on augumented user 17123 40/50 current_auc = 0.653170359052712
User 17123 AUC after training: 0.651642475171887
User 17123 does not improve AUC. Reverting changes.
Training on augumented user 126777 41/50 current_auc = 0.653170359052712
User 126777 AUC after training: 0.6546982429335371
User 126777 improves AUC. Keeping the model.
Training on augumented user 86266 42/50 current_auc = 0.6546982429335371
User 86266 AUC after training: 0.6455309396485868
User 86266 does not improve AUC. Reverting changes.
Training on augumented user 29787 43/50 current_auc = 0.6546982429335371
User 29787 AUC after training: 0.6516424751718869
User 29787 does not improve AUC. Reverting changes.
Training on augumented user 62598 44/50 current_auc = 0.6546982429335371
User 62598 AUC after training: 0.651642475171887
User 62598 does not improve AUC. Reverting changes.
Training on augumented user 95543 45/50 current_auc = 0.6546982429335371
User 95543 AUC after training: 0.6524064171122994
User 95543 does not improve AUC. Reverting changes.
Training on augumented user 46453 46/50 current_auc = 0.6546982429335371
User 46453 AUC after training: 0.6485867074102367
User 46453 does not improve AUC. Reverting changes.
Training on augumented user 55328 47/50 current_auc = 0.6546982429335371
User 55328 AUC after training: 0.651642475171887
User 55328 does not improve AUC. Reverting changes.
Training on augumented user 89083 48/50 current_auc = 0.6546982429335371
User 89083 AUC after training: 0.6508785332314744
User 89083 does not improve AUC. Reverting changes.
Training on augumented user 61098 49/50 current_auc = 0.6546982429335371
User 61098 AUC after training: 0.6531703590527119
User 61098 does not improve AUC. Reverting changes.
[2024-12-02 17:57:56.837299] start test user 27990 34/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:57.676088] start test user 27990 34/568 recall augumented users by random, augumented_users = [52070, 66483, 20765, 7140, 37574, 91226, 113386, 66438, 77503, 17558, 116368, 11290, 4252, 93236, 74968, 75670, 95057, 61798, 38616, 70738, 29129, 45752, 85550, 44797, 25260, 20611, 98649, 39834, 103580, 103242, 25736, 81523, 110674, 127166, 52958, 4495, 102059, 88216, 18884, 70950, 16220, 105516, 26371, 125680, 115670, 10377, 68292, 132078, 101528, 56364]
[2024-12-02 17:57:57.708370] user = 27990 Cloud 34/568
[2024-12-02 17:57:57.730072] user = 27990 Local 34/568
[2024-12-02 17:57:57.904474] user = 27990 Local+ 34/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:00.461705] user = 27990 MPDA- 34/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.75
Training on augumented user 52070 0/50 current_auc = 0.75
User 52070 AUC after training: 0.75
User 52070 does not improve AUC. Reverting changes.
Training on augumented user 66483 1/50 current_auc = 0.75
User 66483 AUC after training: 0.75
User 66483 does not improve AUC. Reverting changes.
Training on augumented user 20765 2/50 current_auc = 0.75
User 20765 AUC after training: 0.75
User 20765 does not improve AUC. Reverting changes.
Training on augumented user 7140 3/50 current_auc = 0.75
User 7140 AUC after training: 0.75
User 7140 does not improve AUC. Reverting changes.
Training on augumented user 37574 4/50 current_auc = 0.75
User 37574 AUC after training: 0.75
User 37574 does not improve AUC. Reverting changes.
Training on augumented user 91226 5/50 current_auc = 0.75
User 91226 AUC after training: 0.75
User 91226 does not improve AUC. Reverting changes.
Training on augumented user 113386 6/50 current_auc = 0.75
User 113386 AUC after training: 0.75
User 113386 does not improve AUC. Reverting changes.
Training on augumented user 66438 7/50 current_auc = 0.75
User 66438 AUC after training: 0.75
User 66438 does not improve AUC. Reverting changes.
Training on augumented user 77503 8/50 current_auc = 0.75
User 77503 AUC after training: 0.75
User 77503 does not improve AUC. Reverting changes.
Training on augumented user 17558 9/50 current_auc = 0.75
User 17558 AUC after training: 0.75
User 17558 does not improve AUC. Reverting changes.
Training on augumented user 116368 10/50 current_auc = 0.75
User 116368 AUC after training: 0.75
User 116368 does not improve AUC. Reverting changes.
Training on augumented user 11290 11/50 current_auc = 0.75
User 11290 AUC after training: 0.75
User 11290 does not improve AUC. Reverting changes.
Training on augumented user 4252 12/50 current_auc = 0.75
User 4252 AUC after training: 0.75
User 4252 does not improve AUC. Reverting changes.
Training on augumented user 93236 13/50 current_auc = 0.75
User 93236 AUC after training: 0.75
User 93236 does not improve AUC. Reverting changes.
Training on augumented user 74968 14/50 current_auc = 0.75
User 74968 AUC after training: 0.75
User 74968 does not improve AUC. Reverting changes.
Training on augumented user 75670 15/50 current_auc = 0.75
User 75670 AUC after training: 0.75
User 75670 does not improve AUC. Reverting changes.
Training on augumented user 95057 16/50 current_auc = 0.75
User 95057 AUC after training: 0.75
User 95057 does not improve AUC. Reverting changes.
Training on augumented user 61798 17/50 current_auc = 0.75
User 61798 AUC after training: 0.75
User 61798 does not improve AUC. Reverting changes.
Training on augumented user 38616 18/50 current_auc = 0.75
User 38616 AUC after training: 0.75
User 38616 does not improve AUC. Reverting changes.
Training on augumented user 70738 19/50 current_auc = 0.75
User 70738 AUC after training: 0.75
User 70738 does not improve AUC. Reverting changes.
Training on augumented user 29129 20/50 current_auc = 0.75
User 29129 AUC after training: 0.75
User 29129 does not improve AUC. Reverting changes.
Training on augumented user 45752 21/50 current_auc = 0.75
User 45752 AUC after training: 0.75
User 45752 does not improve AUC. Reverting changes.
Training on augumented user 85550 22/50 current_auc = 0.75
User 85550 AUC after training: 0.75
User 85550 does not improve AUC. Reverting changes.
Training on augumented user 44797 23/50 current_auc = 0.75
User 44797 AUC after training: 0.75
User 44797 does not improve AUC. Reverting changes.
Training on augumented user 25260 24/50 current_auc = 0.75
User 25260 AUC after training: 0.75
User 25260 does not improve AUC. Reverting changes.
Training on augumented user 20611 25/50 current_auc = 0.75
User 20611 AUC after training: 0.75
User 20611 does not improve AUC. Reverting changes.
Training on augumented user 98649 26/50 current_auc = 0.75
User 98649 AUC after training: 0.75
User 98649 does not improve AUC. Reverting changes.
Training on augumented user 39834 27/50 current_auc = 0.75
User 39834 AUC after training: 0.75
User 39834 does not improve AUC. Reverting changes.
Training on augumented user 103580 28/50 current_auc = 0.75
User 103580 AUC after training: 0.75
User 103580 does not improve AUC. Reverting changes.
Training on augumented user 103242 29/50 current_auc = 0.75
User 103242 AUC after training: 0.75
User 103242 does not improve AUC. Reverting changes.
Training on augumented user 25736 30/50 current_auc = 0.75
User 25736 AUC after training: 0.75
User 25736 does not improve AUC. Reverting changes.
Training on augumented user 81523 31/50 current_auc = 0.75
User 81523 AUC after training: 0.75
User 81523 does not improve AUC. Reverting changes.
Training on augumented user 110674 32/50 current_auc = 0.75
User 110674 AUC after training: 0.75
User 110674 does not improve AUC. Reverting changes.
Training on augumented user 127166 33/50 current_auc = 0.75
User 127166 AUC after training: 0.75
User 127166 does not improve AUC. Reverting changes.
Training on augumented user 52958 34/50 current_auc = 0.75
User 52958 AUC after training: 0.75
User 52958 does not improve AUC. Reverting changes.
Training on augumented user 4495 35/50 current_auc = 0.75
User 4495 AUC after training: 0.75
User 4495 does not improve AUC. Reverting changes.
Training on augumented user 102059 36/50 current_auc = 0.75
User 102059 AUC after training: 0.75
User 102059 does not improve AUC. Reverting changes.
Training on augumented user 88216 37/50 current_auc = 0.75
User 88216 AUC after training: 0.75
User 88216 does not improve AUC. Reverting changes.
Training on augumented user 18884 38/50 current_auc = 0.75
User 18884 AUC after training: 0.75
User 18884 does not improve AUC. Reverting changes.
Training on augumented user 70950 39/50 current_auc = 0.75
User 70950 AUC after training: 0.75
User 70950 does not improve AUC. Reverting changes.
Training on augumented user 16220 40/50 current_auc = 0.75
User 16220 AUC after training: 0.75
User 16220 does not improve AUC. Reverting changes.
Training on augumented user 105516 41/50 current_auc = 0.75
User 105516 AUC after training: 0.75
User 105516 does not improve AUC. Reverting changes.
Training on augumented user 26371 42/50 current_auc = 0.75
User 26371 AUC after training: 0.75
User 26371 does not improve AUC. Reverting changes.
Training on augumented user 125680 43/50 current_auc = 0.75
User 125680 AUC after training: 0.75
User 125680 does not improve AUC. Reverting changes.
Training on augumented user 115670 44/50 current_auc = 0.75
User 115670 AUC after training: 0.75
User 115670 does not improve AUC. Reverting changes.
Training on augumented user 10377 45/50 current_auc = 0.75
User 10377 AUC after training: 0.75
User 10377 does not improve AUC. Reverting changes.
Training on augumented user 68292 46/50 current_auc = 0.75
User 68292 AUC after training: 0.75
User 68292 does not improve AUC. Reverting changes.
Training on augumented user 132078 47/50 current_auc = 0.75
User 132078 AUC after training: 0.75
User 132078 does not improve AUC. Reverting changes.
Training on augumented user 101528 48/50 current_auc = 0.75
User 101528 AUC after training: 0.75
User 101528 does not improve AUC. Reverting changes.
Training on augumented user 56364 49/50 current_auc = 0.75
User 56364 AUC after training: 0.75
User 56364 does not improve AUC. Reverting changes.
[2024-12-02 17:58:33.827748] start test user 28016 35/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:34.485757] start test user 28016 35/568 recall augumented users by random, augumented_users = [123672, 28813, 27217, 84393, 86833, 2886, 86754, 123142, 135136, 21020, 73550, 12816, 52790, 116460, 5104, 22397, 6077, 116892, 67392, 104015, 104817, 137256, 1766, 82273, 120552, 99524, 10593, 91553, 44545, 114604, 47345, 85540, 28719, 89219, 30548, 73130, 117876, 8072, 18083, 56962, 107344, 21808, 120839, 12260, 60083, 103678, 88923, 69763, 2153, 126067]
[2024-12-02 17:58:34.502927] user = 28016 Cloud 35/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:58:34.511008] user = 28016 Local 35/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:58:34.542793] user = 28016 Local+ 35/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:58:38.385843] user = 28016 MPDA- 35/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 123672 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123672 AUC after training: 0.5
User 123672 does not improve AUC. Reverting changes.
Training on augumented user 28813 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28813 AUC after training: 0.5
User 28813 does not improve AUC. Reverting changes.
Training on augumented user 27217 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27217 AUC after training: 0.5
User 27217 does not improve AUC. Reverting changes.
Training on augumented user 84393 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84393 AUC after training: 0.5
User 84393 does not improve AUC. Reverting changes.
Training on augumented user 86833 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86833 AUC after training: 0.5
User 86833 does not improve AUC. Reverting changes.
Training on augumented user 2886 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2886 AUC after training: 0.5
User 2886 does not improve AUC. Reverting changes.
Training on augumented user 86754 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86754 AUC after training: 0.5
User 86754 does not improve AUC. Reverting changes.
Training on augumented user 123142 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123142 AUC after training: 0.5
User 123142 does not improve AUC. Reverting changes.
Training on augumented user 135136 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135136 AUC after training: 0.5
User 135136 does not improve AUC. Reverting changes.
Training on augumented user 21020 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21020 AUC after training: 0.5
User 21020 does not improve AUC. Reverting changes.
Training on augumented user 73550 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73550 AUC after training: 0.5
User 73550 does not improve AUC. Reverting changes.
Training on augumented user 12816 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12816 AUC after training: 0.5
User 12816 does not improve AUC. Reverting changes.
Training on augumented user 52790 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52790 AUC after training: 0.5
User 52790 does not improve AUC. Reverting changes.
Training on augumented user 116460 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116460 AUC after training: 0.5
User 116460 does not improve AUC. Reverting changes.
Training on augumented user 5104 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5104 AUC after training: 0.5
User 5104 does not improve AUC. Reverting changes.
Training on augumented user 22397 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22397 AUC after training: 0.5
User 22397 does not improve AUC. Reverting changes.
Training on augumented user 6077 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6077 AUC after training: 0.5
User 6077 does not improve AUC. Reverting changes.
Training on augumented user 116892 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116892 AUC after training: 0.5
User 116892 does not improve AUC. Reverting changes.
Training on augumented user 67392 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67392 AUC after training: 0.5
User 67392 does not improve AUC. Reverting changes.
Training on augumented user 104015 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104015 AUC after training: 0.5
User 104015 does not improve AUC. Reverting changes.
Training on augumented user 104817 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104817 AUC after training: 0.5
User 104817 does not improve AUC. Reverting changes.
Training on augumented user 137256 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137256 AUC after training: 0.5
User 137256 does not improve AUC. Reverting changes.
Training on augumented user 1766 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1766 AUC after training: 0.5
User 1766 does not improve AUC. Reverting changes.
Training on augumented user 82273 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82273 AUC after training: 0.5
User 82273 does not improve AUC. Reverting changes.
Training on augumented user 120552 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120552 AUC after training: 0.5
User 120552 does not improve AUC. Reverting changes.
Training on augumented user 99524 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99524 AUC after training: 0.5
User 99524 does not improve AUC. Reverting changes.
Training on augumented user 10593 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10593 AUC after training: 0.5
User 10593 does not improve AUC. Reverting changes.
Training on augumented user 91553 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91553 AUC after training: 0.5
User 91553 does not improve AUC. Reverting changes.
Training on augumented user 44545 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44545 AUC after training: 0.5
User 44545 does not improve AUC. Reverting changes.
Training on augumented user 114604 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114604 AUC after training: 0.5
User 114604 does not improve AUC. Reverting changes.
Training on augumented user 47345 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47345 AUC after training: 0.5
User 47345 does not improve AUC. Reverting changes.
Training on augumented user 85540 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85540 AUC after training: 0.5
User 85540 does not improve AUC. Reverting changes.
Training on augumented user 28719 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28719 AUC after training: 0.5
User 28719 does not improve AUC. Reverting changes.
Training on augumented user 89219 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89219 AUC after training: 0.5
User 89219 does not improve AUC. Reverting changes.
Training on augumented user 30548 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30548 AUC after training: 0.5
User 30548 does not improve AUC. Reverting changes.
Training on augumented user 73130 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73130 AUC after training: 0.5
User 73130 does not improve AUC. Reverting changes.
Training on augumented user 117876 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117876 AUC after training: 0.5
User 117876 does not improve AUC. Reverting changes.
Training on augumented user 8072 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8072 AUC after training: 0.5
User 8072 does not improve AUC. Reverting changes.
Training on augumented user 18083 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18083 AUC after training: 0.5
User 18083 does not improve AUC. Reverting changes.
Training on augumented user 56962 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56962 AUC after training: 0.5
User 56962 does not improve AUC. Reverting changes.
Training on augumented user 107344 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107344 AUC after training: 0.5
User 107344 does not improve AUC. Reverting changes.
Training on augumented user 21808 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21808 AUC after training: 0.5
User 21808 does not improve AUC. Reverting changes.
Training on augumented user 120839 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120839 AUC after training: 0.5
User 120839 does not improve AUC. Reverting changes.
Training on augumented user 12260 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12260 AUC after training: 0.5
User 12260 does not improve AUC. Reverting changes.
Training on augumented user 60083 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60083 AUC after training: 0.5
User 60083 does not improve AUC. Reverting changes.
Training on augumented user 103678 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103678 AUC after training: 0.5
User 103678 does not improve AUC. Reverting changes.
Training on augumented user 88923 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88923 AUC after training: 0.5
User 88923 does not improve AUC. Reverting changes.
Training on augumented user 69763 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69763 AUC after training: 0.5
User 69763 does not improve AUC. Reverting changes.
Training on augumented user 2153 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2153 AUC after training: 0.5
User 2153 does not improve AUC. Reverting changes.
Training on augumented user 126067 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126067 AUC after training: 0.5
User 126067 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:59:11.144010] start test user 28027 36/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:11.934959] start test user 28027 36/568 recall augumented users by random, augumented_users = [98709, 134205, 85983, 102076, 88706, 85314, 72686, 91561, 42642, 10410, 60362, 50377, 69748, 15031, 52663, 12989, 130183, 85706, 50390, 28921, 78554, 84696, 10762, 71244, 80754, 42532, 10193, 108033, 98580, 120952, 42549, 112518, 24187, 8491, 22648, 39818, 103874, 46545, 87951, 98501, 44354, 7951, 15197, 10424, 7923, 19324, 84311, 87142, 2616, 126966]
[2024-12-02 17:59:11.952311] user = 28027 Cloud 36/568
[2024-12-02 17:59:11.969624] user = 28027 Local 36/568
[2024-12-02 17:59:12.088855] user = 28027 Local+ 36/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:14.518873] user = 28027 MPDA- 36/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.690940170940171
Training on augumented user 98709 0/50 current_auc = 0.690940170940171
User 98709 AUC after training: 0.6912820512820512
User 98709 improves AUC. Keeping the model.
Training on augumented user 134205 1/50 current_auc = 0.6912820512820512
User 134205 AUC after training: 0.691965811965812
User 134205 improves AUC. Keeping the model.
Training on augumented user 85983 2/50 current_auc = 0.691965811965812
User 85983 AUC after training: 0.691965811965812
User 85983 does not improve AUC. Reverting changes.
Training on augumented user 102076 3/50 current_auc = 0.691965811965812
User 102076 AUC after training: 0.6902564102564103
User 102076 does not improve AUC. Reverting changes.
Training on augumented user 88706 4/50 current_auc = 0.691965811965812
User 88706 AUC after training: 0.68991452991453
User 88706 does not improve AUC. Reverting changes.
Training on augumented user 85314 5/50 current_auc = 0.691965811965812
User 85314 AUC after training: 0.68991452991453
User 85314 does not improve AUC. Reverting changes.
Training on augumented user 72686 6/50 current_auc = 0.691965811965812
User 72686 AUC after training: 0.691965811965812
User 72686 does not improve AUC. Reverting changes.
Training on augumented user 91561 7/50 current_auc = 0.691965811965812
User 91561 AUC after training: 0.690940170940171
User 91561 does not improve AUC. Reverting changes.
Training on augumented user 42642 8/50 current_auc = 0.691965811965812
User 42642 AUC after training: 0.6916239316239317
User 42642 does not improve AUC. Reverting changes.
Training on augumented user 10410 9/50 current_auc = 0.691965811965812
User 10410 AUC after training: 0.6912820512820512
User 10410 does not improve AUC. Reverting changes.
Training on augumented user 60362 10/50 current_auc = 0.691965811965812
User 60362 AUC after training: 0.6895726495726496
User 60362 does not improve AUC. Reverting changes.
Training on augumented user 50377 11/50 current_auc = 0.691965811965812
User 50377 AUC after training: 0.6912820512820513
User 50377 does not improve AUC. Reverting changes.
Training on augumented user 69748 12/50 current_auc = 0.691965811965812
User 69748 AUC after training: 0.6912820512820512
User 69748 does not improve AUC. Reverting changes.
Training on augumented user 15031 13/50 current_auc = 0.691965811965812
User 15031 AUC after training: 0.6916239316239317
User 15031 does not improve AUC. Reverting changes.
Training on augumented user 52663 14/50 current_auc = 0.691965811965812
User 52663 AUC after training: 0.6916239316239317
User 52663 does not improve AUC. Reverting changes.
Training on augumented user 12989 15/50 current_auc = 0.691965811965812
User 12989 AUC after training: 0.6909401709401709
User 12989 does not improve AUC. Reverting changes.
Training on augumented user 130183 16/50 current_auc = 0.691965811965812
User 130183 AUC after training: 0.6916239316239317
User 130183 does not improve AUC. Reverting changes.
Training on augumented user 85706 17/50 current_auc = 0.691965811965812
User 85706 AUC after training: 0.690940170940171
User 85706 does not improve AUC. Reverting changes.
Training on augumented user 50390 18/50 current_auc = 0.691965811965812
User 50390 AUC after training: 0.6923076923076923
User 50390 improves AUC. Keeping the model.
Training on augumented user 28921 19/50 current_auc = 0.6923076923076923
User 28921 AUC after training: 0.6912820512820512
User 28921 does not improve AUC. Reverting changes.
Training on augumented user 78554 20/50 current_auc = 0.6923076923076923
User 78554 AUC after training: 0.6916239316239317
User 78554 does not improve AUC. Reverting changes.
Training on augumented user 84696 21/50 current_auc = 0.6923076923076923
User 84696 AUC after training: 0.6912820512820513
User 84696 does not improve AUC. Reverting changes.
Training on augumented user 10762 22/50 current_auc = 0.6923076923076923
User 10762 AUC after training: 0.6916239316239317
User 10762 does not improve AUC. Reverting changes.
Training on augumented user 71244 23/50 current_auc = 0.6923076923076923
User 71244 AUC after training: 0.6895726495726496
User 71244 does not improve AUC. Reverting changes.
Training on augumented user 80754 24/50 current_auc = 0.6923076923076923
User 80754 AUC after training: 0.6895726495726496
User 80754 does not improve AUC. Reverting changes.
Training on augumented user 42532 25/50 current_auc = 0.6923076923076923
User 42532 AUC after training: 0.6923076923076923
User 42532 does not improve AUC. Reverting changes.
Training on augumented user 10193 26/50 current_auc = 0.6923076923076923
User 10193 AUC after training: 0.6923076923076923
User 10193 does not improve AUC. Reverting changes.
Training on augumented user 108033 27/50 current_auc = 0.6923076923076923
User 108033 AUC after training: 0.68991452991453
User 108033 does not improve AUC. Reverting changes.
Training on augumented user 98580 28/50 current_auc = 0.6923076923076923
User 98580 AUC after training: 0.6905982905982906
User 98580 does not improve AUC. Reverting changes.
Training on augumented user 120952 29/50 current_auc = 0.6923076923076923
User 120952 AUC after training: 0.6905982905982906
User 120952 does not improve AUC. Reverting changes.
Training on augumented user 42549 30/50 current_auc = 0.6923076923076923
User 42549 AUC after training: 0.691965811965812
User 42549 does not improve AUC. Reverting changes.
Training on augumented user 112518 31/50 current_auc = 0.6923076923076923
User 112518 AUC after training: 0.691965811965812
User 112518 does not improve AUC. Reverting changes.
Training on augumented user 24187 32/50 current_auc = 0.6923076923076923
User 24187 AUC after training: 0.691965811965812
User 24187 does not improve AUC. Reverting changes.
Training on augumented user 8491 33/50 current_auc = 0.6923076923076923
User 8491 AUC after training: 0.6923076923076923
User 8491 does not improve AUC. Reverting changes.
Training on augumented user 22648 34/50 current_auc = 0.6923076923076923
User 22648 AUC after training: 0.691965811965812
User 22648 does not improve AUC. Reverting changes.
Training on augumented user 39818 35/50 current_auc = 0.6923076923076923
User 39818 AUC after training: 0.691965811965812
User 39818 does not improve AUC. Reverting changes.
Training on augumented user 103874 36/50 current_auc = 0.6923076923076923
User 103874 AUC after training: 0.6933333333333334
User 103874 improves AUC. Keeping the model.
Training on augumented user 46545 37/50 current_auc = 0.6933333333333334
User 46545 AUC after training: 0.6882051282051282
User 46545 does not improve AUC. Reverting changes.
Training on augumented user 87951 38/50 current_auc = 0.6933333333333334
User 87951 AUC after training: 0.6936752136752137
User 87951 improves AUC. Keeping the model.
Training on augumented user 98501 39/50 current_auc = 0.6936752136752137
User 98501 AUC after training: 0.694017094017094
User 98501 improves AUC. Keeping the model.
Training on augumented user 44354 40/50 current_auc = 0.694017094017094
User 44354 AUC after training: 0.692991452991453
User 44354 does not improve AUC. Reverting changes.
Training on augumented user 7951 41/50 current_auc = 0.694017094017094
User 7951 AUC after training: 0.6933333333333334
User 7951 does not improve AUC. Reverting changes.
Training on augumented user 15197 42/50 current_auc = 0.694017094017094
User 15197 AUC after training: 0.692991452991453
User 15197 does not improve AUC. Reverting changes.
Training on augumented user 10424 43/50 current_auc = 0.694017094017094
User 10424 AUC after training: 0.692991452991453
User 10424 does not improve AUC. Reverting changes.
Training on augumented user 7923 44/50 current_auc = 0.694017094017094
User 7923 AUC after training: 0.6933333333333334
User 7923 does not improve AUC. Reverting changes.
Training on augumented user 19324 45/50 current_auc = 0.694017094017094
User 19324 AUC after training: 0.6916239316239317
User 19324 does not improve AUC. Reverting changes.
Training on augumented user 84311 46/50 current_auc = 0.694017094017094
User 84311 AUC after training: 0.6923076923076923
User 84311 does not improve AUC. Reverting changes.
Training on augumented user 87142 47/50 current_auc = 0.694017094017094
User 87142 AUC after training: 0.692991452991453
User 87142 does not improve AUC. Reverting changes.
Training on augumented user 2616 48/50 current_auc = 0.694017094017094
User 2616 AUC after training: 0.694017094017094
User 2616 does not improve AUC. Reverting changes.
Training on augumented user 126966 49/50 current_auc = 0.694017094017094
User 126966 AUC after training: 0.6929914529914529
User 126966 does not improve AUC. Reverting changes.
[2024-12-02 17:59:45.556358] start test user 28092 37/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:46.554272] start test user 28092 37/568 recall augumented users by random, augumented_users = [17996, 53797, 92089, 134640, 77997, 67378, 352, 43096, 97148, 94915, 14450, 8240, 70823, 67370, 14900, 54726, 8181, 135193, 47784, 105890, 115765, 64849, 27280, 8681, 135582, 81837, 12392, 19277, 129933, 56035, 732, 81072, 45597, 44806, 40686, 40089, 12532, 32502, 49011, 99586, 30863, 78944, 89967, 52028, 89745, 6535, 16860, 19291, 53850, 44812]
[2024-12-02 17:59:46.571248] user = 28092 Cloud 37/568
[2024-12-02 17:59:46.582751] user = 28092 Local 37/568
[2024-12-02 17:59:46.640411] user = 28092 Local+ 37/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:49.471963] user = 28092 MPDA- 37/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5277777777777778
Training on augumented user 17996 0/50 current_auc = 0.5277777777777778
User 17996 AUC after training: 0.5324074074074074
User 17996 improves AUC. Keeping the model.
Training on augumented user 53797 1/50 current_auc = 0.5324074074074074
User 53797 AUC after training: 0.5324074074074074
User 53797 does not improve AUC. Reverting changes.
Training on augumented user 92089 2/50 current_auc = 0.5324074074074074
User 92089 AUC after training: 0.5324074074074074
User 92089 does not improve AUC. Reverting changes.
Training on augumented user 134640 3/50 current_auc = 0.5324074074074074
User 134640 AUC after training: 0.5324074074074074
User 134640 does not improve AUC. Reverting changes.
Training on augumented user 77997 4/50 current_auc = 0.5324074074074074
User 77997 AUC after training: 0.5324074074074074
User 77997 does not improve AUC. Reverting changes.
Training on augumented user 67378 5/50 current_auc = 0.5324074074074074
User 67378 AUC after training: 0.5324074074074074
User 67378 does not improve AUC. Reverting changes.
Training on augumented user 352 6/50 current_auc = 0.5324074074074074
User 352 AUC after training: 0.5324074074074074
User 352 does not improve AUC. Reverting changes.
Training on augumented user 43096 7/50 current_auc = 0.5324074074074074
User 43096 AUC after training: 0.5324074074074074
User 43096 does not improve AUC. Reverting changes.
Training on augumented user 97148 8/50 current_auc = 0.5324074074074074
User 97148 AUC after training: 0.5324074074074074
User 97148 does not improve AUC. Reverting changes.
Training on augumented user 94915 9/50 current_auc = 0.5324074074074074
User 94915 AUC after training: 0.5324074074074074
User 94915 does not improve AUC. Reverting changes.
Training on augumented user 14450 10/50 current_auc = 0.5324074074074074
User 14450 AUC after training: 0.5324074074074074
User 14450 does not improve AUC. Reverting changes.
Training on augumented user 8240 11/50 current_auc = 0.5324074074074074
User 8240 AUC after training: 0.5324074074074074
User 8240 does not improve AUC. Reverting changes.
Training on augumented user 70823 12/50 current_auc = 0.5324074074074074
User 70823 AUC after training: 0.5324074074074074
User 70823 does not improve AUC. Reverting changes.
Training on augumented user 67370 13/50 current_auc = 0.5324074074074074
User 67370 AUC after training: 0.5324074074074074
User 67370 does not improve AUC. Reverting changes.
Training on augumented user 14900 14/50 current_auc = 0.5324074074074074
User 14900 AUC after training: 0.537037037037037
User 14900 improves AUC. Keeping the model.
Training on augumented user 54726 15/50 current_auc = 0.537037037037037
User 54726 AUC after training: 0.537037037037037
User 54726 does not improve AUC. Reverting changes.
Training on augumented user 8181 16/50 current_auc = 0.537037037037037
User 8181 AUC after training: 0.537037037037037
User 8181 does not improve AUC. Reverting changes.
Training on augumented user 135193 17/50 current_auc = 0.537037037037037
User 135193 AUC after training: 0.537037037037037
User 135193 does not improve AUC. Reverting changes.
Training on augumented user 47784 18/50 current_auc = 0.537037037037037
User 47784 AUC after training: 0.5324074074074074
User 47784 does not improve AUC. Reverting changes.
Training on augumented user 105890 19/50 current_auc = 0.537037037037037
User 105890 AUC after training: 0.5277777777777778
User 105890 does not improve AUC. Reverting changes.
Training on augumented user 115765 20/50 current_auc = 0.537037037037037
User 115765 AUC after training: 0.537037037037037
User 115765 does not improve AUC. Reverting changes.
Training on augumented user 64849 21/50 current_auc = 0.537037037037037
User 64849 AUC after training: 0.537037037037037
User 64849 does not improve AUC. Reverting changes.
Training on augumented user 27280 22/50 current_auc = 0.537037037037037
User 27280 AUC after training: 0.5416666666666667
User 27280 improves AUC. Keeping the model.
Training on augumented user 8681 23/50 current_auc = 0.5416666666666667
User 8681 AUC after training: 0.5416666666666667
User 8681 does not improve AUC. Reverting changes.
Training on augumented user 135582 24/50 current_auc = 0.5416666666666667
User 135582 AUC after training: 0.537037037037037
User 135582 does not improve AUC. Reverting changes.
Training on augumented user 81837 25/50 current_auc = 0.5416666666666667
User 81837 AUC after training: 0.5416666666666667
User 81837 does not improve AUC. Reverting changes.
Training on augumented user 12392 26/50 current_auc = 0.5416666666666667
User 12392 AUC after training: 0.537037037037037
User 12392 does not improve AUC. Reverting changes.
Training on augumented user 19277 27/50 current_auc = 0.5416666666666667
User 19277 AUC after training: 0.5416666666666667
User 19277 does not improve AUC. Reverting changes.
Training on augumented user 129933 28/50 current_auc = 0.5416666666666667
User 129933 AUC after training: 0.537037037037037
User 129933 does not improve AUC. Reverting changes.
Training on augumented user 56035 29/50 current_auc = 0.5416666666666667
User 56035 AUC after training: 0.5370370370370371
User 56035 does not improve AUC. Reverting changes.
Training on augumented user 732 30/50 current_auc = 0.5416666666666667
User 732 AUC after training: 0.537037037037037
User 732 does not improve AUC. Reverting changes.
Training on augumented user 81072 31/50 current_auc = 0.5416666666666667
User 81072 AUC after training: 0.537037037037037
User 81072 does not improve AUC. Reverting changes.
Training on augumented user 45597 32/50 current_auc = 0.5416666666666667
User 45597 AUC after training: 0.537037037037037
User 45597 does not improve AUC. Reverting changes.
Training on augumented user 44806 33/50 current_auc = 0.5416666666666667
User 44806 AUC after training: 0.537037037037037
User 44806 does not improve AUC. Reverting changes.
Training on augumented user 40686 34/50 current_auc = 0.5416666666666667
User 40686 AUC after training: 0.537037037037037
User 40686 does not improve AUC. Reverting changes.
Training on augumented user 40089 35/50 current_auc = 0.5416666666666667
User 40089 AUC after training: 0.537037037037037
User 40089 does not improve AUC. Reverting changes.
Training on augumented user 12532 36/50 current_auc = 0.5416666666666667
User 12532 AUC after training: 0.537037037037037
User 12532 does not improve AUC. Reverting changes.
Training on augumented user 32502 37/50 current_auc = 0.5416666666666667
User 32502 AUC after training: 0.537037037037037
User 32502 does not improve AUC. Reverting changes.
Training on augumented user 49011 38/50 current_auc = 0.5416666666666667
User 49011 AUC after training: 0.5416666666666667
User 49011 does not improve AUC. Reverting changes.
Training on augumented user 99586 39/50 current_auc = 0.5416666666666667
User 99586 AUC after training: 0.5416666666666667
User 99586 does not improve AUC. Reverting changes.
Training on augumented user 30863 40/50 current_auc = 0.5416666666666667
User 30863 AUC after training: 0.5416666666666667
User 30863 does not improve AUC. Reverting changes.
Training on augumented user 78944 41/50 current_auc = 0.5416666666666667
User 78944 AUC after training: 0.537037037037037
User 78944 does not improve AUC. Reverting changes.
Training on augumented user 89967 42/50 current_auc = 0.5416666666666667
User 89967 AUC after training: 0.537037037037037
User 89967 does not improve AUC. Reverting changes.
Training on augumented user 52028 43/50 current_auc = 0.5416666666666667
User 52028 AUC after training: 0.537037037037037
User 52028 does not improve AUC. Reverting changes.
Training on augumented user 89745 44/50 current_auc = 0.5416666666666667
User 89745 AUC after training: 0.537037037037037
User 89745 does not improve AUC. Reverting changes.
Training on augumented user 6535 45/50 current_auc = 0.5416666666666667
User 6535 AUC after training: 0.5416666666666667
User 6535 does not improve AUC. Reverting changes.
Training on augumented user 16860 46/50 current_auc = 0.5416666666666667
User 16860 AUC after training: 0.5416666666666667
User 16860 does not improve AUC. Reverting changes.
Training on augumented user 19291 47/50 current_auc = 0.5416666666666667
User 19291 AUC after training: 0.5416666666666667
User 19291 does not improve AUC. Reverting changes.
Training on augumented user 53850 48/50 current_auc = 0.5416666666666667
User 53850 AUC after training: 0.537037037037037
User 53850 does not improve AUC. Reverting changes.
Training on augumented user 44812 49/50 current_auc = 0.5416666666666667
User 44812 AUC after training: 0.537037037037037
User 44812 does not improve AUC. Reverting changes.
[2024-12-02 18:00:20.319601] start test user 28118 38/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:21.092619] start test user 28118 38/568 recall augumented users by random, augumented_users = [33991, 13942, 56044, 52961, 69837, 27245, 92915, 135140, 97402, 10160, 210, 2081, 23282, 71969, 17893, 92972, 84207, 132039, 89623, 102419, 86249, 76681, 26846, 135396, 70472, 42900, 35549, 9817, 77541, 92147, 19679, 52332, 8653, 137603, 112173, 100054, 110192, 55072, 54601, 28061, 62143, 19803, 70085, 17304, 3265, 51646, 13640, 136812, 33626, 28254]
[2024-12-02 18:00:21.135036] user = 28118 Cloud 38/568
[2024-12-02 18:00:21.172630] user = 28118 Local 38/568
[2024-12-02 18:00:21.288541] user = 28118 Local+ 38/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:23.825970] user = 28118 MPDA- 38/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5298701298701298
Training on augumented user 33991 0/50 current_auc = 0.5298701298701298
User 33991 AUC after training: 0.5376623376623376
User 33991 improves AUC. Keeping the model.
Training on augumented user 13942 1/50 current_auc = 0.5376623376623376
User 13942 AUC after training: 0.5285714285714286
User 13942 does not improve AUC. Reverting changes.
Training on augumented user 56044 2/50 current_auc = 0.5376623376623376
User 56044 AUC after training: 0.5376623376623376
User 56044 does not improve AUC. Reverting changes.
Training on augumented user 52961 3/50 current_auc = 0.5376623376623376
User 52961 AUC after training: 0.5376623376623376
User 52961 does not improve AUC. Reverting changes.
Training on augumented user 69837 4/50 current_auc = 0.5376623376623376
User 69837 AUC after training: 0.5324675324675324
User 69837 does not improve AUC. Reverting changes.
Training on augumented user 27245 5/50 current_auc = 0.5376623376623376
User 27245 AUC after training: 0.535064935064935
User 27245 does not improve AUC. Reverting changes.
Training on augumented user 92915 6/50 current_auc = 0.5376623376623376
User 92915 AUC after training: 0.535064935064935
User 92915 does not improve AUC. Reverting changes.
Training on augumented user 135140 7/50 current_auc = 0.5376623376623376
User 135140 AUC after training: 0.5376623376623376
User 135140 does not improve AUC. Reverting changes.
Training on augumented user 97402 8/50 current_auc = 0.5376623376623376
User 97402 AUC after training: 0.5376623376623376
User 97402 does not improve AUC. Reverting changes.
Training on augumented user 10160 9/50 current_auc = 0.5376623376623376
User 10160 AUC after training: 0.535064935064935
User 10160 does not improve AUC. Reverting changes.
Training on augumented user 210 10/50 current_auc = 0.5376623376623376
User 210 AUC after training: 0.535064935064935
User 210 does not improve AUC. Reverting changes.
Training on augumented user 2081 11/50 current_auc = 0.5376623376623376
User 2081 AUC after training: 0.5298701298701298
User 2081 does not improve AUC. Reverting changes.
Training on augumented user 23282 12/50 current_auc = 0.5376623376623376
User 23282 AUC after training: 0.535064935064935
User 23282 does not improve AUC. Reverting changes.
Training on augumented user 71969 13/50 current_auc = 0.5376623376623376
User 71969 AUC after training: 0.535064935064935
User 71969 does not improve AUC. Reverting changes.
Training on augumented user 17893 14/50 current_auc = 0.5376623376623376
User 17893 AUC after training: 0.5376623376623376
User 17893 does not improve AUC. Reverting changes.
Training on augumented user 92972 15/50 current_auc = 0.5376623376623376
User 92972 AUC after training: 0.535064935064935
User 92972 does not improve AUC. Reverting changes.
Training on augumented user 84207 16/50 current_auc = 0.5376623376623376
User 84207 AUC after training: 0.5376623376623376
User 84207 does not improve AUC. Reverting changes.
Training on augumented user 132039 17/50 current_auc = 0.5376623376623376
User 132039 AUC after training: 0.5363636363636364
User 132039 does not improve AUC. Reverting changes.
Training on augumented user 89623 18/50 current_auc = 0.5376623376623376
User 89623 AUC after training: 0.535064935064935
User 89623 does not improve AUC. Reverting changes.
Training on augumented user 102419 19/50 current_auc = 0.5376623376623376
User 102419 AUC after training: 0.5376623376623376
User 102419 does not improve AUC. Reverting changes.
Training on augumented user 86249 20/50 current_auc = 0.5376623376623376
User 86249 AUC after training: 0.535064935064935
User 86249 does not improve AUC. Reverting changes.
Training on augumented user 76681 21/50 current_auc = 0.5376623376623376
User 76681 AUC after training: 0.5363636363636364
User 76681 does not improve AUC. Reverting changes.
Training on augumented user 26846 22/50 current_auc = 0.5376623376623376
User 26846 AUC after training: 0.5324675324675324
User 26846 does not improve AUC. Reverting changes.
Training on augumented user 135396 23/50 current_auc = 0.5376623376623376
User 135396 AUC after training: 0.535064935064935
User 135396 does not improve AUC. Reverting changes.
Training on augumented user 70472 24/50 current_auc = 0.5376623376623376
User 70472 AUC after training: 0.5337662337662338
User 70472 does not improve AUC. Reverting changes.
Training on augumented user 42900 25/50 current_auc = 0.5376623376623376
User 42900 AUC after training: 0.5376623376623376
User 42900 does not improve AUC. Reverting changes.
Training on augumented user 35549 26/50 current_auc = 0.5376623376623376
User 35549 AUC after training: 0.5376623376623376
User 35549 does not improve AUC. Reverting changes.
Training on augumented user 9817 27/50 current_auc = 0.5376623376623376
User 9817 AUC after training: 0.5298701298701298
User 9817 does not improve AUC. Reverting changes.
Training on augumented user 77541 28/50 current_auc = 0.5376623376623376
User 77541 AUC after training: 0.535064935064935
User 77541 does not improve AUC. Reverting changes.
Training on augumented user 92147 29/50 current_auc = 0.5376623376623376
User 92147 AUC after training: 0.5324675324675324
User 92147 does not improve AUC. Reverting changes.
Training on augumented user 19679 30/50 current_auc = 0.5376623376623376
User 19679 AUC after training: 0.535064935064935
User 19679 does not improve AUC. Reverting changes.
Training on augumented user 52332 31/50 current_auc = 0.5376623376623376
User 52332 AUC after training: 0.5376623376623376
User 52332 does not improve AUC. Reverting changes.
Training on augumented user 8653 32/50 current_auc = 0.5376623376623376
User 8653 AUC after training: 0.5324675324675324
User 8653 does not improve AUC. Reverting changes.
Training on augumented user 137603 33/50 current_auc = 0.5376623376623376
User 137603 AUC after training: 0.535064935064935
User 137603 does not improve AUC. Reverting changes.
Training on augumented user 112173 34/50 current_auc = 0.5376623376623376
User 112173 AUC after training: 0.535064935064935
User 112173 does not improve AUC. Reverting changes.
Training on augumented user 100054 35/50 current_auc = 0.5376623376623376
User 100054 AUC after training: 0.535064935064935
User 100054 does not improve AUC. Reverting changes.
Training on augumented user 110192 36/50 current_auc = 0.5376623376623376
User 110192 AUC after training: 0.535064935064935
User 110192 does not improve AUC. Reverting changes.
Training on augumented user 55072 37/50 current_auc = 0.5376623376623376
User 55072 AUC after training: 0.5376623376623376
User 55072 does not improve AUC. Reverting changes.
Training on augumented user 54601 38/50 current_auc = 0.5376623376623376
User 54601 AUC after training: 0.535064935064935
User 54601 does not improve AUC. Reverting changes.
Training on augumented user 28061 39/50 current_auc = 0.5376623376623376
User 28061 AUC after training: 0.5324675324675324
User 28061 does not improve AUC. Reverting changes.
Training on augumented user 62143 40/50 current_auc = 0.5376623376623376
User 62143 AUC after training: 0.535064935064935
User 62143 does not improve AUC. Reverting changes.
Training on augumented user 19803 41/50 current_auc = 0.5376623376623376
User 19803 AUC after training: 0.535064935064935
User 19803 does not improve AUC. Reverting changes.
Training on augumented user 70085 42/50 current_auc = 0.5376623376623376
User 70085 AUC after training: 0.535064935064935
User 70085 does not improve AUC. Reverting changes.
Training on augumented user 17304 43/50 current_auc = 0.5376623376623376
User 17304 AUC after training: 0.5376623376623376
User 17304 does not improve AUC. Reverting changes.
Training on augumented user 3265 44/50 current_auc = 0.5376623376623376
User 3265 AUC after training: 0.5324675324675324
User 3265 does not improve AUC. Reverting changes.
Training on augumented user 51646 45/50 current_auc = 0.5376623376623376
User 51646 AUC after training: 0.5324675324675324
User 51646 does not improve AUC. Reverting changes.
Training on augumented user 13640 46/50 current_auc = 0.5376623376623376
User 13640 AUC after training: 0.5116883116883116
User 13640 does not improve AUC. Reverting changes.
Training on augumented user 136812 47/50 current_auc = 0.5376623376623376
User 136812 AUC after training: 0.535064935064935
User 136812 does not improve AUC. Reverting changes.
Training on augumented user 33626 48/50 current_auc = 0.5376623376623376
User 33626 AUC after training: 0.535064935064935
User 33626 does not improve AUC. Reverting changes.
Training on augumented user 28254 49/50 current_auc = 0.5376623376623376
User 28254 AUC after training: 0.535064935064935
User 28254 does not improve AUC. Reverting changes.
[2024-12-02 18:00:56.092272] start test user 28125 39/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:56.857288] start test user 28125 39/568 recall augumented users by random, augumented_users = [91550, 48913, 4170, 132962, 3725, 51941, 79343, 4377, 25347, 114517, 12425, 36365, 62591, 129067, 5494, 95297, 10105, 136266, 95318, 26019, 60701, 80109, 112336, 113158, 44801, 34075, 8616, 44780, 111259, 26596, 73945, 3716, 37469, 126952, 43754, 137811, 129626, 84217, 117125, 55683, 137256, 8298, 9658, 116804, 117265, 131299, 120137, 48021, 53132, 123180]
[2024-12-02 18:00:56.875740] user = 28125 Cloud 39/568
[2024-12-02 18:00:56.891921] user = 28125 Local 39/568
[2024-12-02 18:00:56.949599] user = 28125 Local+ 39/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:59.374459] user = 28125 MPDA- 39/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5052910052910053
Training on augumented user 91550 0/50 current_auc = 0.5052910052910053
User 91550 AUC after training: 0.5035273368606702
User 91550 does not improve AUC. Reverting changes.
Training on augumented user 48913 1/50 current_auc = 0.5052910052910053
User 48913 AUC after training: 0.5052910052910053
User 48913 does not improve AUC. Reverting changes.
Training on augumented user 4170 2/50 current_auc = 0.5052910052910053
User 4170 AUC after training: 0.5052910052910053
User 4170 does not improve AUC. Reverting changes.
Training on augumented user 132962 3/50 current_auc = 0.5052910052910053
User 132962 AUC after training: 0.5070546737213404
User 132962 improves AUC. Keeping the model.
Training on augumented user 3725 4/50 current_auc = 0.5070546737213404
User 3725 AUC after training: 0.5052910052910053
User 3725 does not improve AUC. Reverting changes.
Training on augumented user 51941 5/50 current_auc = 0.5070546737213404
User 51941 AUC after training: 0.5052910052910053
User 51941 does not improve AUC. Reverting changes.
Training on augumented user 79343 6/50 current_auc = 0.5070546737213404
User 79343 AUC after training: 0.5088183421516754
User 79343 improves AUC. Keeping the model.
Training on augumented user 4377 7/50 current_auc = 0.5088183421516754
User 4377 AUC after training: 0.5035273368606702
User 4377 does not improve AUC. Reverting changes.
Training on augumented user 25347 8/50 current_auc = 0.5088183421516754
User 25347 AUC after training: 0.5088183421516754
User 25347 does not improve AUC. Reverting changes.
Training on augumented user 114517 9/50 current_auc = 0.5088183421516754
User 114517 AUC after training: 0.5070546737213404
User 114517 does not improve AUC. Reverting changes.
Training on augumented user 12425 10/50 current_auc = 0.5088183421516754
User 12425 AUC after training: 0.5105820105820106
User 12425 improves AUC. Keeping the model.
Training on augumented user 36365 11/50 current_auc = 0.5105820105820106
User 36365 AUC after training: 0.5035273368606702
User 36365 does not improve AUC. Reverting changes.
Training on augumented user 62591 12/50 current_auc = 0.5105820105820106
User 62591 AUC after training: 0.5123456790123457
User 62591 improves AUC. Keeping the model.
Training on augumented user 129067 13/50 current_auc = 0.5123456790123457
User 129067 AUC after training: 0.5105820105820106
User 129067 does not improve AUC. Reverting changes.
Training on augumented user 5494 14/50 current_auc = 0.5123456790123457
User 5494 AUC after training: 0.5070546737213404
User 5494 does not improve AUC. Reverting changes.
Training on augumented user 95297 15/50 current_auc = 0.5123456790123457
User 95297 AUC after training: 0.5052910052910053
User 95297 does not improve AUC. Reverting changes.
Training on augumented user 10105 16/50 current_auc = 0.5123456790123457
User 10105 AUC after training: 0.5035273368606702
User 10105 does not improve AUC. Reverting changes.
Training on augumented user 136266 17/50 current_auc = 0.5123456790123457
User 136266 AUC after training: 0.5052910052910053
User 136266 does not improve AUC. Reverting changes.
Training on augumented user 95318 18/50 current_auc = 0.5123456790123457
User 95318 AUC after training: 0.5105820105820106
User 95318 does not improve AUC. Reverting changes.
Training on augumented user 26019 19/50 current_auc = 0.5123456790123457
User 26019 AUC after training: 0.5088183421516754
User 26019 does not improve AUC. Reverting changes.
Training on augumented user 60701 20/50 current_auc = 0.5123456790123457
User 60701 AUC after training: 0.5070546737213404
User 60701 does not improve AUC. Reverting changes.
Training on augumented user 80109 21/50 current_auc = 0.5123456790123457
User 80109 AUC after training: 0.5070546737213404
User 80109 does not improve AUC. Reverting changes.
Training on augumented user 112336 22/50 current_auc = 0.5123456790123457
User 112336 AUC after training: 0.5070546737213404
User 112336 does not improve AUC. Reverting changes.
Training on augumented user 113158 23/50 current_auc = 0.5123456790123457
User 113158 AUC after training: 0.5123456790123457
User 113158 does not improve AUC. Reverting changes.
Training on augumented user 44801 24/50 current_auc = 0.5123456790123457
User 44801 AUC after training: 0.5070546737213404
User 44801 does not improve AUC. Reverting changes.
Training on augumented user 34075 25/50 current_auc = 0.5123456790123457
User 34075 AUC after training: 0.5052910052910053
User 34075 does not improve AUC. Reverting changes.
Training on augumented user 8616 26/50 current_auc = 0.5123456790123457
User 8616 AUC after training: 0.5070546737213404
User 8616 does not improve AUC. Reverting changes.
Training on augumented user 44780 27/50 current_auc = 0.5123456790123457
User 44780 AUC after training: 0.501763668430335
User 44780 does not improve AUC. Reverting changes.
Training on augumented user 111259 28/50 current_auc = 0.5123456790123457
User 111259 AUC after training: 0.5070546737213404
User 111259 does not improve AUC. Reverting changes.
Training on augumented user 26596 29/50 current_auc = 0.5123456790123457
User 26596 AUC after training: 0.5123456790123457
User 26596 does not improve AUC. Reverting changes.
Training on augumented user 73945 30/50 current_auc = 0.5123456790123457
User 73945 AUC after training: 0.5070546737213404
User 73945 does not improve AUC. Reverting changes.
Training on augumented user 3716 31/50 current_auc = 0.5123456790123457
User 3716 AUC after training: 0.5105820105820106
User 3716 does not improve AUC. Reverting changes.
Training on augumented user 37469 32/50 current_auc = 0.5123456790123457
User 37469 AUC after training: 0.5052910052910053
User 37469 does not improve AUC. Reverting changes.
Training on augumented user 126952 33/50 current_auc = 0.5123456790123457
User 126952 AUC after training: 0.5088183421516754
User 126952 does not improve AUC. Reverting changes.
Training on augumented user 43754 34/50 current_auc = 0.5123456790123457
User 43754 AUC after training: 0.5070546737213404
User 43754 does not improve AUC. Reverting changes.
Training on augumented user 137811 35/50 current_auc = 0.5123456790123457
User 137811 AUC after training: 0.5070546737213404
User 137811 does not improve AUC. Reverting changes.
Training on augumented user 129626 36/50 current_auc = 0.5123456790123457
User 129626 AUC after training: 0.5088183421516754
User 129626 does not improve AUC. Reverting changes.
Training on augumented user 84217 37/50 current_auc = 0.5123456790123457
User 84217 AUC after training: 0.5070546737213404
User 84217 does not improve AUC. Reverting changes.
Training on augumented user 117125 38/50 current_auc = 0.5123456790123457
User 117125 AUC after training: 0.5105820105820106
User 117125 does not improve AUC. Reverting changes.
Training on augumented user 55683 39/50 current_auc = 0.5123456790123457
User 55683 AUC after training: 0.5035273368606702
User 55683 does not improve AUC. Reverting changes.
Training on augumented user 137256 40/50 current_auc = 0.5123456790123457
User 137256 AUC after training: 0.5088183421516754
User 137256 does not improve AUC. Reverting changes.
Training on augumented user 8298 41/50 current_auc = 0.5123456790123457
User 8298 AUC after training: 0.5052910052910053
User 8298 does not improve AUC. Reverting changes.
Training on augumented user 9658 42/50 current_auc = 0.5123456790123457
User 9658 AUC after training: 0.5070546737213404
User 9658 does not improve AUC. Reverting changes.
Training on augumented user 116804 43/50 current_auc = 0.5123456790123457
User 116804 AUC after training: 0.5088183421516754
User 116804 does not improve AUC. Reverting changes.
Training on augumented user 117265 44/50 current_auc = 0.5123456790123457
User 117265 AUC after training: 0.5052910052910053
User 117265 does not improve AUC. Reverting changes.
Training on augumented user 131299 45/50 current_auc = 0.5123456790123457
User 131299 AUC after training: 0.5070546737213404
User 131299 does not improve AUC. Reverting changes.
Training on augumented user 120137 46/50 current_auc = 0.5123456790123457
User 120137 AUC after training: 0.5070546737213404
User 120137 does not improve AUC. Reverting changes.
Training on augumented user 48021 47/50 current_auc = 0.5123456790123457
User 48021 AUC after training: 0.5088183421516754
User 48021 does not improve AUC. Reverting changes.
Training on augumented user 53132 48/50 current_auc = 0.5123456790123457
User 53132 AUC after training: 0.5052910052910053
User 53132 does not improve AUC. Reverting changes.
Training on augumented user 123180 49/50 current_auc = 0.5123456790123457
User 123180 AUC after training: 0.5
User 123180 does not improve AUC. Reverting changes.
[2024-12-02 18:01:30.461362] start test user 28142 40/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:30.990283] start test user 28142 40/568 recall augumented users by random, augumented_users = [97022, 2989, 133211, 14599, 122733, 69, 95586, 1982, 96166, 137473, 47169, 27413, 60616, 92567, 123299, 124581, 82371, 102293, 63755, 63862, 10373, 8045, 115940, 119126, 9633, 121476, 59175, 28494, 61342, 78921, 59868, 86637, 55978, 109489, 135078, 33629, 18245, 28523, 55709, 76841, 36311, 107951, 81190, 124781, 78340, 108479, 111071, 58194, 104223, 10557]
[2024-12-02 18:01:31.034665] user = 28142 Cloud 40/568
[2024-12-02 18:01:31.082434] user = 28142 Local 40/568
[2024-12-02 18:01:31.245035] user = 28142 Local+ 40/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:33.892883] user = 28142 MPDA- 40/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6135265700483091
Training on augumented user 97022 0/50 current_auc = 0.6135265700483091
User 97022 AUC after training: 0.6135265700483092
User 97022 improves AUC. Keeping the model.
Training on augumented user 2989 1/50 current_auc = 0.6135265700483092
User 2989 AUC after training: 0.6136607622114869
User 2989 improves AUC. Keeping the model.
Training on augumented user 133211 2/50 current_auc = 0.6136607622114869
User 133211 AUC after training: 0.6132581857219539
User 133211 does not improve AUC. Reverting changes.
Training on augumented user 14599 3/50 current_auc = 0.6136607622114869
User 14599 AUC after training: 0.6140633387010198
User 14599 improves AUC. Keeping the model.
Training on augumented user 122733 4/50 current_auc = 0.6140633387010198
User 122733 AUC after training: 0.6144659151905529
User 122733 improves AUC. Keeping the model.
Training on augumented user 69 5/50 current_auc = 0.6144659151905529
User 69 AUC after training: 0.6133923778851315
User 69 does not improve AUC. Reverting changes.
Training on augumented user 95586 6/50 current_auc = 0.6144659151905529
User 95586 AUC after training: 0.6143317230273752
User 95586 does not improve AUC. Reverting changes.
Training on augumented user 1982 7/50 current_auc = 0.6144659151905529
User 1982 AUC after training: 0.6143317230273753
User 1982 does not improve AUC. Reverting changes.
Training on augumented user 96166 8/50 current_auc = 0.6144659151905529
User 96166 AUC after training: 0.6141304347826086
User 96166 does not improve AUC. Reverting changes.
Training on augumented user 137473 9/50 current_auc = 0.6144659151905529
User 137473 AUC after training: 0.6146001073537306
User 137473 improves AUC. Keeping the model.
Training on augumented user 47169 10/50 current_auc = 0.6146001073537306
User 47169 AUC after training: 0.6150026838432636
User 47169 improves AUC. Keeping the model.
Training on augumented user 27413 11/50 current_auc = 0.6150026838432636
User 27413 AUC after training: 0.6146001073537305
User 27413 does not improve AUC. Reverting changes.
Training on augumented user 60616 12/50 current_auc = 0.6150026838432636
User 60616 AUC after training: 0.6141975308641976
User 60616 does not improve AUC. Reverting changes.
Training on augumented user 92567 13/50 current_auc = 0.6150026838432636
User 92567 AUC after training: 0.6124530327428879
User 92567 does not improve AUC. Reverting changes.
Training on augumented user 123299 14/50 current_auc = 0.6150026838432636
User 123299 AUC after training: 0.6140633387010199
User 123299 does not improve AUC. Reverting changes.
Training on augumented user 124581 15/50 current_auc = 0.6150026838432636
User 124581 AUC after training: 0.6144659151905529
User 124581 does not improve AUC. Reverting changes.
Training on augumented user 82371 16/50 current_auc = 0.6150026838432636
User 82371 AUC after training: 0.6140633387010199
User 82371 does not improve AUC. Reverting changes.
Training on augumented user 102293 17/50 current_auc = 0.6150026838432636
User 102293 AUC after training: 0.6147342995169082
User 102293 does not improve AUC. Reverting changes.
Training on augumented user 63755 18/50 current_auc = 0.6150026838432636
User 63755 AUC after training: 0.6132581857219539
User 63755 does not improve AUC. Reverting changes.
Training on augumented user 63862 19/50 current_auc = 0.6150026838432636
User 63862 AUC after training: 0.6141975308641976
User 63862 does not improve AUC. Reverting changes.
Training on augumented user 10373 20/50 current_auc = 0.6150026838432636
User 10373 AUC after training: 0.6136607622114869
User 10373 does not improve AUC. Reverting changes.
Training on augumented user 8045 21/50 current_auc = 0.6150026838432636
User 8045 AUC after training: 0.6140633387010199
User 8045 does not improve AUC. Reverting changes.
Training on augumented user 115940 22/50 current_auc = 0.6150026838432636
User 115940 AUC after training: 0.6137949543746646
User 115940 does not improve AUC. Reverting changes.
Training on augumented user 119126 23/50 current_auc = 0.6150026838432636
User 119126 AUC after training: 0.6141975308641975
User 119126 does not improve AUC. Reverting changes.
Training on augumented user 9633 24/50 current_auc = 0.6150026838432636
User 9633 AUC after training: 0.6147342995169082
User 9633 does not improve AUC. Reverting changes.
Training on augumented user 121476 25/50 current_auc = 0.6150026838432636
User 121476 AUC after training: 0.6146001073537306
User 121476 does not improve AUC. Reverting changes.
Training on augumented user 59175 26/50 current_auc = 0.6150026838432636
User 59175 AUC after training: 0.6137949543746646
User 59175 does not improve AUC. Reverting changes.
Training on augumented user 28494 27/50 current_auc = 0.6150026838432636
User 28494 AUC after training: 0.615271068169619
User 28494 improves AUC. Keeping the model.
Training on augumented user 61342 28/50 current_auc = 0.615271068169619
User 61342 AUC after training: 0.6141304347826086
User 61342 does not improve AUC. Reverting changes.
Training on augumented user 78921 29/50 current_auc = 0.615271068169619
User 78921 AUC after training: 0.6140633387010199
User 78921 does not improve AUC. Reverting changes.
Training on augumented user 59868 30/50 current_auc = 0.615271068169619
User 59868 AUC after training: 0.6144659151905528
User 59868 does not improve AUC. Reverting changes.
Training on augumented user 86637 31/50 current_auc = 0.615271068169619
User 86637 AUC after training: 0.6162104133118625
User 86637 improves AUC. Keeping the model.
Training on augumented user 55978 32/50 current_auc = 0.6162104133118625
User 55978 AUC after training: 0.6160762211486849
User 55978 does not improve AUC. Reverting changes.
Training on augumented user 109489 33/50 current_auc = 0.6162104133118625
User 109489 AUC after training: 0.6163446054750402
User 109489 improves AUC. Keeping the model.
Training on augumented user 135078 34/50 current_auc = 0.6163446054750402
User 135078 AUC after training: 0.6166129898013957
User 135078 improves AUC. Keeping the model.
Training on augumented user 33629 35/50 current_auc = 0.6166129898013957
User 33629 AUC after training: 0.6171497584541062
User 33629 improves AUC. Keeping the model.
Training on augumented user 18245 36/50 current_auc = 0.6171497584541062
User 18245 AUC after training: 0.6167471819645732
User 18245 does not improve AUC. Reverting changes.
Training on augumented user 28523 37/50 current_auc = 0.6171497584541062
User 28523 AUC after training: 0.6163446054750402
User 28523 does not improve AUC. Reverting changes.
Training on augumented user 55709 38/50 current_auc = 0.6171497584541062
User 55709 AUC after training: 0.616881374127751
User 55709 does not improve AUC. Reverting changes.
Training on augumented user 76841 39/50 current_auc = 0.6171497584541062
User 76841 AUC after training: 0.6174181427804616
User 76841 improves AUC. Keeping the model.
Training on augumented user 36311 40/50 current_auc = 0.6174181427804616
User 36311 AUC after training: 0.616881374127751
User 36311 does not improve AUC. Reverting changes.
Training on augumented user 107951 41/50 current_auc = 0.6174181427804616
User 107951 AUC after training: 0.6176865271068169
User 107951 improves AUC. Keeping the model.
Training on augumented user 81190 42/50 current_auc = 0.6176865271068169
User 81190 AUC after training: 0.6183574879227053
User 81190 improves AUC. Keeping the model.
Training on augumented user 124781 43/50 current_auc = 0.6183574879227053
User 124781 AUC after training: 0.617283950617284
User 124781 does not improve AUC. Reverting changes.
Training on augumented user 78340 44/50 current_auc = 0.6183574879227053
User 78340 AUC after training: 0.6162104133118625
User 78340 does not improve AUC. Reverting changes.
Training on augumented user 108479 45/50 current_auc = 0.6183574879227053
User 108479 AUC after training: 0.6175523349436394
User 108479 does not improve AUC. Reverting changes.
Training on augumented user 111071 46/50 current_auc = 0.6183574879227053
User 111071 AUC after training: 0.6175523349436393
User 111071 does not improve AUC. Reverting changes.
Training on augumented user 58194 47/50 current_auc = 0.6183574879227053
User 58194 AUC after training: 0.6176865271068169
User 58194 does not improve AUC. Reverting changes.
Training on augumented user 104223 48/50 current_auc = 0.6183574879227053
User 104223 AUC after training: 0.6184916800858831
User 104223 improves AUC. Keeping the model.
Training on augumented user 10557 49/50 current_auc = 0.6184916800858831
User 10557 AUC after training: 0.6186258722490606
User 10557 improves AUC. Keeping the model.
[2024-12-02 18:02:01.178550] start test user 28155 41/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:01.693653] start test user 28155 41/568 recall augumented users by random, augumented_users = [18599, 45897, 43173, 61845, 92096, 79206, 37078, 63407, 10528, 58291, 93998, 99091, 24809, 35293, 38895, 65271, 26257, 95679, 90324, 36469, 23004, 95502, 114745, 28241, 82635, 6786, 22349, 60716, 108737, 83093, 89068, 119450, 57276, 22730, 29198, 97239, 55176, 136798, 24968, 138122, 47314, 83192, 29595, 16191, 77126, 14961, 98773, 69755, 135672, 88021]
[2024-12-02 18:02:01.709092] user = 28155 Cloud 41/568
[2024-12-02 18:02:01.764245] user = 28155 Local 41/568
[2024-12-02 18:02:01.898001] user = 28155 Local+ 41/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:04.100674] user = 28155 MPDA- 41/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8186046511627907
Training on augumented user 18599 0/50 current_auc = 0.8186046511627907
User 18599 AUC after training: 0.8188782489740082
User 18599 improves AUC. Keeping the model.
Training on augumented user 45897 1/50 current_auc = 0.8188782489740082
User 45897 AUC after training: 0.8192886456908344
User 45897 improves AUC. Keeping the model.
Training on augumented user 43173 2/50 current_auc = 0.8192886456908344
User 43173 AUC after training: 0.8188782489740082
User 43173 does not improve AUC. Reverting changes.
Training on augumented user 61845 3/50 current_auc = 0.8192886456908344
User 61845 AUC after training: 0.8186046511627907
User 61845 does not improve AUC. Reverting changes.
Training on augumented user 92096 4/50 current_auc = 0.8192886456908344
User 92096 AUC after training: 0.819015047879617
User 92096 does not improve AUC. Reverting changes.
Training on augumented user 79206 5/50 current_auc = 0.8192886456908344
User 79206 AUC after training: 0.8187414500683994
User 79206 does not improve AUC. Reverting changes.
Training on augumented user 37078 6/50 current_auc = 0.8192886456908344
User 37078 AUC after training: 0.8191518467852258
User 37078 does not improve AUC. Reverting changes.
Training on augumented user 63407 7/50 current_auc = 0.8192886456908344
User 63407 AUC after training: 0.8191518467852257
User 63407 does not improve AUC. Reverting changes.
Training on augumented user 10528 8/50 current_auc = 0.8192886456908344
User 10528 AUC after training: 0.8187414500683994
User 10528 does not improve AUC. Reverting changes.
Training on augumented user 58291 9/50 current_auc = 0.8192886456908344
User 58291 AUC after training: 0.8186046511627907
User 58291 does not improve AUC. Reverting changes.
Training on augumented user 93998 10/50 current_auc = 0.8192886456908344
User 93998 AUC after training: 0.8188782489740083
User 93998 does not improve AUC. Reverting changes.
Training on augumented user 99091 11/50 current_auc = 0.8192886456908344
User 99091 AUC after training: 0.8198358413132695
User 99091 improves AUC. Keeping the model.
Training on augumented user 24809 12/50 current_auc = 0.8198358413132695
User 24809 AUC after training: 0.8201094391244871
User 24809 improves AUC. Keeping the model.
Training on augumented user 35293 13/50 current_auc = 0.8201094391244871
User 35293 AUC after training: 0.8202462380300957
User 35293 improves AUC. Keeping the model.
Training on augumented user 38895 14/50 current_auc = 0.8202462380300957
User 38895 AUC after training: 0.8198358413132695
User 38895 does not improve AUC. Reverting changes.
Training on augumented user 65271 15/50 current_auc = 0.8202462380300957
User 65271 AUC after training: 0.820109439124487
User 65271 does not improve AUC. Reverting changes.
Training on augumented user 26257 16/50 current_auc = 0.8202462380300957
User 26257 AUC after training: 0.819562243502052
User 26257 does not improve AUC. Reverting changes.
Training on augumented user 95679 17/50 current_auc = 0.8202462380300957
User 95679 AUC after training: 0.819015047879617
User 95679 does not improve AUC. Reverting changes.
Training on augumented user 90324 18/50 current_auc = 0.8202462380300957
User 90324 AUC after training: 0.8202462380300958
User 90324 improves AUC. Keeping the model.
Training on augumented user 36469 19/50 current_auc = 0.8202462380300958
User 36469 AUC after training: 0.819562243502052
User 36469 does not improve AUC. Reverting changes.
Training on augumented user 23004 20/50 current_auc = 0.8202462380300958
User 23004 AUC after training: 0.8201094391244871
User 23004 does not improve AUC. Reverting changes.
Training on augumented user 95502 21/50 current_auc = 0.8202462380300958
User 95502 AUC after training: 0.8198358413132695
User 95502 does not improve AUC. Reverting changes.
Training on augumented user 114745 22/50 current_auc = 0.8202462380300958
User 114745 AUC after training: 0.8198358413132695
User 114745 does not improve AUC. Reverting changes.
Training on augumented user 28241 23/50 current_auc = 0.8202462380300958
User 28241 AUC after training: 0.8201094391244871
User 28241 does not improve AUC. Reverting changes.
Training on augumented user 82635 24/50 current_auc = 0.8202462380300958
User 82635 AUC after training: 0.8203830369357046
User 82635 improves AUC. Keeping the model.
Training on augumented user 6786 25/50 current_auc = 0.8203830369357046
User 6786 AUC after training: 0.8203830369357045
User 6786 does not improve AUC. Reverting changes.
Training on augumented user 22349 26/50 current_auc = 0.8203830369357046
User 22349 AUC after training: 0.8205198358413134
User 22349 improves AUC. Keeping the model.
Training on augumented user 60716 27/50 current_auc = 0.8205198358413134
User 60716 AUC after training: 0.820109439124487
User 60716 does not improve AUC. Reverting changes.
Training on augumented user 108737 28/50 current_auc = 0.8205198358413134
User 108737 AUC after training: 0.8202462380300958
User 108737 does not improve AUC. Reverting changes.
Training on augumented user 83093 29/50 current_auc = 0.8205198358413134
User 83093 AUC after training: 0.8202462380300958
User 83093 does not improve AUC. Reverting changes.
Training on augumented user 89068 30/50 current_auc = 0.8205198358413134
User 89068 AUC after training: 0.8203830369357046
User 89068 does not improve AUC. Reverting changes.
Training on augumented user 119450 31/50 current_auc = 0.8205198358413134
User 119450 AUC after training: 0.8202462380300958
User 119450 does not improve AUC. Reverting changes.
Training on augumented user 57276 32/50 current_auc = 0.8205198358413134
User 57276 AUC after training: 0.8202462380300957
User 57276 does not improve AUC. Reverting changes.
Training on augumented user 22730 33/50 current_auc = 0.8205198358413134
User 22730 AUC after training: 0.8202462380300958
User 22730 does not improve AUC. Reverting changes.
Training on augumented user 29198 34/50 current_auc = 0.8205198358413134
User 29198 AUC after training: 0.8203830369357046
User 29198 does not improve AUC. Reverting changes.
Training on augumented user 97239 35/50 current_auc = 0.8205198358413134
User 97239 AUC after training: 0.8203830369357046
User 97239 does not improve AUC. Reverting changes.
Training on augumented user 55176 36/50 current_auc = 0.8205198358413134
User 55176 AUC after training: 0.8199726402188782
User 55176 does not improve AUC. Reverting changes.
Training on augumented user 136798 37/50 current_auc = 0.8205198358413134
User 136798 AUC after training: 0.8202462380300958
User 136798 does not improve AUC. Reverting changes.
Training on augumented user 24968 38/50 current_auc = 0.8205198358413134
User 24968 AUC after training: 0.8203830369357045
User 24968 does not improve AUC. Reverting changes.
Training on augumented user 138122 39/50 current_auc = 0.8205198358413134
User 138122 AUC after training: 0.8203830369357045
User 138122 does not improve AUC. Reverting changes.
Training on augumented user 47314 40/50 current_auc = 0.8205198358413134
User 47314 AUC after training: 0.8202462380300958
User 47314 does not improve AUC. Reverting changes.
Training on augumented user 83192 41/50 current_auc = 0.8205198358413134
User 83192 AUC after training: 0.8205198358413133
User 83192 does not improve AUC. Reverting changes.
Training on augumented user 29595 42/50 current_auc = 0.8205198358413134
User 29595 AUC after training: 0.8205198358413133
User 29595 does not improve AUC. Reverting changes.
Training on augumented user 16191 43/50 current_auc = 0.8205198358413134
User 16191 AUC after training: 0.8203830369357045
User 16191 does not improve AUC. Reverting changes.
Training on augumented user 77126 44/50 current_auc = 0.8205198358413134
User 77126 AUC after training: 0.8202462380300958
User 77126 does not improve AUC. Reverting changes.
Training on augumented user 14961 45/50 current_auc = 0.8205198358413134
User 14961 AUC after training: 0.8203830369357046
User 14961 does not improve AUC. Reverting changes.
Training on augumented user 98773 46/50 current_auc = 0.8205198358413134
User 98773 AUC after training: 0.8196990424076607
User 98773 does not improve AUC. Reverting changes.
Training on augumented user 69755 47/50 current_auc = 0.8205198358413134
User 69755 AUC after training: 0.8205198358413133
User 69755 does not improve AUC. Reverting changes.
Training on augumented user 135672 48/50 current_auc = 0.8205198358413134
User 135672 AUC after training: 0.8203830369357045
User 135672 does not improve AUC. Reverting changes.
Training on augumented user 88021 49/50 current_auc = 0.8205198358413134
User 88021 AUC after training: 0.8205198358413133
User 88021 does not improve AUC. Reverting changes.
[2024-12-02 18:02:34.378815] start test user 28195 42/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:35.249101] start test user 28195 42/568 recall augumented users by random, augumented_users = [5996, 21805, 31287, 83000, 126816, 15568, 32353, 118873, 55362, 92951, 2638, 72902, 23633, 26413, 131355, 97148, 24062, 79745, 39284, 57952, 100974, 2584, 25753, 116098, 135796, 115990, 2281, 75659, 101799, 60194, 22499, 120757, 70519, 41683, 105302, 50658, 93514, 23294, 53802, 28290, 2870, 81889, 81737, 111051, 125181, 10050, 119860, 30691, 17561, 85318]
[2024-12-02 18:02:35.266708] user = 28195 Cloud 42/568
[2024-12-02 18:02:35.314391] user = 28195 Local 42/568
[2024-12-02 18:02:35.559851] user = 28195 Local+ 42/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:38.191208] user = 28195 MPDA- 42/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6387740326602848
Training on augumented user 5996 0/50 current_auc = 0.6387740326602848
User 5996 AUC after training: 0.6385809669374951
User 5996 does not improve AUC. Reverting changes.
Training on augumented user 21805 1/50 current_auc = 0.6387740326602848
User 21805 AUC after training: 0.639417585069584
User 21805 improves AUC. Keeping the model.
Training on augumented user 31287 2/50 current_auc = 0.639417585069584
User 31287 AUC after training: 0.6393693186388866
User 31287 does not improve AUC. Reverting changes.
Training on augumented user 83000 3/50 current_auc = 0.639417585069584
User 83000 AUC after training: 0.6389349207626096
User 83000 does not improve AUC. Reverting changes.
Training on augumented user 126816 4/50 current_auc = 0.639417585069584
User 126816 AUC after training: 0.6391842973212131
User 126816 does not improve AUC. Reverting changes.
Training on augumented user 15568 5/50 current_auc = 0.639417585069584
User 15568 AUC after training: 0.6386614109886574
User 15568 does not improve AUC. Reverting changes.
Training on augumented user 32353 6/50 current_auc = 0.639417585069584
User 32353 AUC after training: 0.6388222990909822
User 32353 does not improve AUC. Reverting changes.
Training on augumented user 118873 7/50 current_auc = 0.639417585069584
User 118873 AUC after training: 0.638645322178425
User 118873 does not improve AUC. Reverting changes.
Training on augumented user 55362 8/50 current_auc = 0.639417585069584
User 55362 AUC after training: 0.6392888745877243
User 55362 does not improve AUC. Reverting changes.
Training on augumented user 92951 9/50 current_auc = 0.639417585069584
User 92951 AUC after training: 0.6388866543319122
User 92951 does not improve AUC. Reverting changes.
Training on augumented user 2638 10/50 current_auc = 0.639417585069584
User 2638 AUC after training: 0.638983187193307
User 2638 does not improve AUC. Reverting changes.
Training on augumented user 72902 11/50 current_auc = 0.639417585069584
User 72902 AUC after training: 0.6391842973212131
User 72902 does not improve AUC. Reverting changes.
Training on augumented user 23633 12/50 current_auc = 0.639417585069584
User 23633 AUC after training: 0.6389027431421447
User 23633 does not improve AUC. Reverting changes.
Training on augumented user 26413 13/50 current_auc = 0.639417585069584
User 26413 AUC after training: 0.639449762690049
User 26413 improves AUC. Keeping the model.
Training on augumented user 131355 14/50 current_auc = 0.639449762690049
User 131355 AUC after training: 0.6393773630440029
User 131355 does not improve AUC. Reverting changes.
Training on augumented user 97148 15/50 current_auc = 0.639449762690049
User 97148 AUC after training: 0.6391038532700507
User 97148 does not improve AUC. Reverting changes.
Training on augumented user 24062 16/50 current_auc = 0.639449762690049
User 24062 AUC after training: 0.6390958088649343
User 24062 does not improve AUC. Reverting changes.
Training on augumented user 79745 17/50 current_auc = 0.639449762690049
User 79745 AUC after training: 0.6396589172230713
User 79745 improves AUC. Keeping the model.
Training on augumented user 39284 18/50 current_auc = 0.6396589172230713
User 39284 AUC after training: 0.6400772262891159
User 39284 improves AUC. Keeping the model.
Training on augumented user 57952 19/50 current_auc = 0.6400772262891159
User 57952 AUC after training: 0.6401254927198133
User 57952 improves AUC. Keeping the model.
Training on augumented user 100974 20/50 current_auc = 0.6401254927198133
User 100974 AUC after training: 0.6398037165151638
User 100974 does not improve AUC. Reverting changes.
Training on augumented user 2584 21/50 current_auc = 0.6401254927198133
User 2584 AUC after training: 0.6396267396026064
User 2584 does not improve AUC. Reverting changes.
Training on augumented user 25753 22/50 current_auc = 0.6401254927198133
User 25753 AUC after training: 0.6401254927198134
User 25753 improves AUC. Keeping the model.
Training on augumented user 116098 23/50 current_auc = 0.6401254927198134
User 116098 AUC after training: 0.6403668248733008
User 116098 improves AUC. Keeping the model.
Training on augumented user 135796 24/50 current_auc = 0.6403668248733008
User 135796 AUC after training: 0.6403024696323706
User 135796 does not improve AUC. Reverting changes.
Training on augumented user 115990 25/50 current_auc = 0.6403668248733008
User 115990 AUC after training: 0.6403829136835331
User 115990 improves AUC. Keeping the model.
Training on augumented user 2281 26/50 current_auc = 0.6403829136835331
User 2281 AUC after training: 0.64107473252353
User 2281 improves AUC. Keeping the model.
Training on augumented user 75659 27/50 current_auc = 0.64107473252353
User 75659 AUC after training: 0.6412195318156223
User 75659 improves AUC. Keeping the model.
Training on augumented user 101799 28/50 current_auc = 0.6412195318156223
User 101799 AUC after training: 0.6410505993081812
User 101799 does not improve AUC. Reverting changes.
Training on augumented user 60194 29/50 current_auc = 0.6412195318156223
User 60194 AUC after training: 0.6408092671546939
User 60194 does not improve AUC. Reverting changes.
Training on augumented user 22499 30/50 current_auc = 0.6412195318156223
User 22499 AUC after training: 0.6412356206258547
User 22499 improves AUC. Keeping the model.
Training on augumented user 120757 31/50 current_auc = 0.6412356206258547
User 120757 AUC after training: 0.6410345104979488
User 120757 does not improve AUC. Reverting changes.
Training on augumented user 70519 32/50 current_auc = 0.6412356206258547
User 70519 AUC after training: 0.6410184216877162
User 70519 does not improve AUC. Reverting changes.
Training on augumented user 41683 33/50 current_auc = 0.6412356206258547
User 41683 AUC after training: 0.6408977556109726
User 41683 does not improve AUC. Reverting changes.
Training on augumented user 105302 34/50 current_auc = 0.6412356206258547
User 105302 AUC after training: 0.6412919314616684
User 105302 improves AUC. Keeping the model.
Training on augumented user 50658 35/50 current_auc = 0.6412919314616684
User 50658 AUC after training: 0.6405035797602767
User 50658 does not improve AUC. Reverting changes.
Training on augumented user 93514 36/50 current_auc = 0.6412919314616684
User 93514 AUC after training: 0.6415413080202719
User 93514 improves AUC. Keeping the model.
Training on augumented user 23294 37/50 current_auc = 0.6415413080202719
User 23294 AUC after training: 0.6415573968305044
User 23294 improves AUC. Keeping the model.
Training on augumented user 53802 38/50 current_auc = 0.6415573968305044
User 53802 AUC after training: 0.6410908213337624
User 53802 does not improve AUC. Reverting changes.
Training on augumented user 28290 39/50 current_auc = 0.6415573968305044
User 28290 AUC after training: 0.6416941517174805
User 28290 improves AUC. Keeping the model.
Training on augumented user 2870 40/50 current_auc = 0.6416941517174805
User 2870 AUC after training: 0.6417665513635267
User 2870 improves AUC. Keeping the model.
Training on augumented user 81889 41/50 current_auc = 0.6417665513635267
User 81889 AUC after training: 0.6417343737430616
User 81889 does not improve AUC. Reverting changes.
Training on augumented user 81737 42/50 current_auc = 0.6417665513635267
User 81737 AUC after training: 0.6408334003700427
User 81737 does not improve AUC. Reverting changes.
Training on augumented user 111051 43/50 current_auc = 0.6417665513635267
User 111051 AUC after training: 0.6412034430053898
User 111051 does not improve AUC. Reverting changes.
Training on augumented user 125181 44/50 current_auc = 0.6417665513635267
User 125181 AUC after training: 0.6412356206258547
User 125181 does not improve AUC. Reverting changes.
Training on augumented user 10050 45/50 current_auc = 0.6417665513635267
User 10050 AUC after training: 0.6413321534872496
User 10050 does not improve AUC. Reverting changes.
Training on augumented user 119860 46/50 current_auc = 0.6417665513635267
User 119860 AUC after training: 0.641975705896549
User 119860 improves AUC. Keeping the model.
Training on augumented user 30691 47/50 current_auc = 0.641975705896549
User 30691 AUC after training: 0.6418711286300378
User 30691 does not improve AUC. Reverting changes.
Training on augumented user 17561 48/50 current_auc = 0.641975705896549
User 17561 AUC after training: 0.6416700185021318
User 17561 does not improve AUC. Reverting changes.
Training on augumented user 85318 49/50 current_auc = 0.641975705896549
User 85318 AUC after training: 0.6418469954146891
User 85318 does not improve AUC. Reverting changes.
[2024-12-02 18:03:16.065543] start test user 28197 43/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:16.550911] start test user 28197 43/568 recall augumented users by random, augumented_users = [10610, 45158, 103415, 130393, 98785, 89750, 118945, 128749, 55020, 133633, 88832, 124261, 36764, 74067, 83955, 14345, 12781, 53323, 64569, 85075, 53190, 111225, 130167, 27702, 54934, 1837, 15307, 67847, 4005, 14042, 47590, 79567, 12753, 86609, 106915, 96884, 104401, 53614, 11975, 102918, 72262, 33110, 54212, 112823, 6196, 110937, 61385, 114911, 43502, 92723]
[2024-12-02 18:03:16.565870] user = 28197 Cloud 43/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:03:16.579172] user = 28197 Local 43/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:03:16.601695] user = 28197 Local+ 43/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:03:18.839275] user = 28197 MPDA- 43/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 10610 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10610 AUC after training: 0.5
User 10610 does not improve AUC. Reverting changes.
Training on augumented user 45158 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45158 AUC after training: 0.5
User 45158 does not improve AUC. Reverting changes.
Training on augumented user 103415 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103415 AUC after training: 0.5
User 103415 does not improve AUC. Reverting changes.
Training on augumented user 130393 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130393 AUC after training: 0.5
User 130393 does not improve AUC. Reverting changes.
Training on augumented user 98785 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98785 AUC after training: 0.5
User 98785 does not improve AUC. Reverting changes.
Training on augumented user 89750 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89750 AUC after training: 0.5
User 89750 does not improve AUC. Reverting changes.
Training on augumented user 118945 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118945 AUC after training: 0.5
User 118945 does not improve AUC. Reverting changes.
Training on augumented user 128749 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128749 AUC after training: 0.5
User 128749 does not improve AUC. Reverting changes.
Training on augumented user 55020 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55020 AUC after training: 0.5
User 55020 does not improve AUC. Reverting changes.
Training on augumented user 133633 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133633 AUC after training: 0.5
User 133633 does not improve AUC. Reverting changes.
Training on augumented user 88832 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88832 AUC after training: 0.5
User 88832 does not improve AUC. Reverting changes.
Training on augumented user 124261 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124261 AUC after training: 0.5
User 124261 does not improve AUC. Reverting changes.
Training on augumented user 36764 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36764 AUC after training: 0.5
User 36764 does not improve AUC. Reverting changes.
Training on augumented user 74067 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74067 AUC after training: 0.5
User 74067 does not improve AUC. Reverting changes.
Training on augumented user 83955 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83955 AUC after training: 0.5
User 83955 does not improve AUC. Reverting changes.
Training on augumented user 14345 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14345 AUC after training: 0.5
User 14345 does not improve AUC. Reverting changes.
Training on augumented user 12781 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12781 AUC after training: 0.5
User 12781 does not improve AUC. Reverting changes.
Training on augumented user 53323 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53323 AUC after training: 0.5
User 53323 does not improve AUC. Reverting changes.
Training on augumented user 64569 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64569 AUC after training: 0.5
User 64569 does not improve AUC. Reverting changes.
Training on augumented user 85075 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85075 AUC after training: 0.5
User 85075 does not improve AUC. Reverting changes.
Training on augumented user 53190 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53190 AUC after training: 0.5
User 53190 does not improve AUC. Reverting changes.
Training on augumented user 111225 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111225 AUC after training: 0.5
User 111225 does not improve AUC. Reverting changes.
Training on augumented user 130167 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130167 AUC after training: 0.5
User 130167 does not improve AUC. Reverting changes.
Training on augumented user 27702 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27702 AUC after training: 0.5
User 27702 does not improve AUC. Reverting changes.
Training on augumented user 54934 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54934 AUC after training: 0.5
User 54934 does not improve AUC. Reverting changes.
Training on augumented user 1837 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1837 AUC after training: 0.5
User 1837 does not improve AUC. Reverting changes.
Training on augumented user 15307 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15307 AUC after training: 0.5
User 15307 does not improve AUC. Reverting changes.
Training on augumented user 67847 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67847 AUC after training: 0.5
User 67847 does not improve AUC. Reverting changes.
Training on augumented user 4005 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4005 AUC after training: 0.5
User 4005 does not improve AUC. Reverting changes.
Training on augumented user 14042 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14042 AUC after training: 0.5
User 14042 does not improve AUC. Reverting changes.
Training on augumented user 47590 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47590 AUC after training: 0.5
User 47590 does not improve AUC. Reverting changes.
Training on augumented user 79567 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79567 AUC after training: 0.5
User 79567 does not improve AUC. Reverting changes.
Training on augumented user 12753 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12753 AUC after training: 0.5
User 12753 does not improve AUC. Reverting changes.
Training on augumented user 86609 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86609 AUC after training: 0.5
User 86609 does not improve AUC. Reverting changes.
Training on augumented user 106915 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106915 AUC after training: 0.5
User 106915 does not improve AUC. Reverting changes.
Training on augumented user 96884 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96884 AUC after training: 0.5
User 96884 does not improve AUC. Reverting changes.
Training on augumented user 104401 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104401 AUC after training: 0.5
User 104401 does not improve AUC. Reverting changes.
Training on augumented user 53614 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53614 AUC after training: 0.5
User 53614 does not improve AUC. Reverting changes.
Training on augumented user 11975 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11975 AUC after training: 0.5
User 11975 does not improve AUC. Reverting changes.
Training on augumented user 102918 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102918 AUC after training: 0.5
User 102918 does not improve AUC. Reverting changes.
Training on augumented user 72262 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72262 AUC after training: 0.5
User 72262 does not improve AUC. Reverting changes.
Training on augumented user 33110 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33110 AUC after training: 0.5
User 33110 does not improve AUC. Reverting changes.
Training on augumented user 54212 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54212 AUC after training: 0.5
User 54212 does not improve AUC. Reverting changes.
Training on augumented user 112823 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112823 AUC after training: 0.5
User 112823 does not improve AUC. Reverting changes.
Training on augumented user 6196 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6196 AUC after training: 0.5
User 6196 does not improve AUC. Reverting changes.
Training on augumented user 110937 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110937 AUC after training: 0.5
User 110937 does not improve AUC. Reverting changes.
Training on augumented user 61385 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61385 AUC after training: 0.5
User 61385 does not improve AUC. Reverting changes.
Training on augumented user 114911 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114911 AUC after training: 0.5
User 114911 does not improve AUC. Reverting changes.
Training on augumented user 43502 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43502 AUC after training: 0.5
User 43502 does not improve AUC. Reverting changes.
Training on augumented user 92723 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92723 AUC after training: 0.5
User 92723 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:03:50.417277] start test user 28226 44/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:50.879654] start test user 28226 44/568 recall augumented users by random, augumented_users = [43982, 4774, 103599, 5995, 45551, 31070, 118240, 28660, 31008, 89812, 25883, 22017, 136125, 91928, 60717, 84632, 31533, 9548, 125162, 72231, 18041, 129169, 97543, 138462, 56110, 117308, 106450, 118603, 84441, 89438, 86880, 24870, 81783, 82376, 42532, 28766, 54876, 96444, 138144, 136006, 130531, 71959, 36793, 132029, 114518, 54853, 115503, 74730, 40121, 65748]
[2024-12-02 18:03:50.892220] user = 28226 Cloud 44/568
[2024-12-02 18:03:50.901727] user = 28226 Local 44/568
[2024-12-02 18:03:50.931881] user = 28226 Local+ 44/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:53.277511] user = 28226 MPDA- 44/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7291666666666666
Training on augumented user 43982 0/50 current_auc = 0.7291666666666666
User 43982 AUC after training: 0.7291666666666666
User 43982 does not improve AUC. Reverting changes.
Training on augumented user 4774 1/50 current_auc = 0.7291666666666666
User 4774 AUC after training: 0.7291666666666666
User 4774 does not improve AUC. Reverting changes.
Training on augumented user 103599 2/50 current_auc = 0.7291666666666666
User 103599 AUC after training: 0.7291666666666666
User 103599 does not improve AUC. Reverting changes.
Training on augumented user 5995 3/50 current_auc = 0.7291666666666666
User 5995 AUC after training: 0.7291666666666666
User 5995 does not improve AUC. Reverting changes.
Training on augumented user 45551 4/50 current_auc = 0.7291666666666666
User 45551 AUC after training: 0.7291666666666666
User 45551 does not improve AUC. Reverting changes.
Training on augumented user 31070 5/50 current_auc = 0.7291666666666666
User 31070 AUC after training: 0.7291666666666666
User 31070 does not improve AUC. Reverting changes.
Training on augumented user 118240 6/50 current_auc = 0.7291666666666666
User 118240 AUC after training: 0.7291666666666666
User 118240 does not improve AUC. Reverting changes.
Training on augumented user 28660 7/50 current_auc = 0.7291666666666666
User 28660 AUC after training: 0.7291666666666666
User 28660 does not improve AUC. Reverting changes.
Training on augumented user 31008 8/50 current_auc = 0.7291666666666666
User 31008 AUC after training: 0.7291666666666666
User 31008 does not improve AUC. Reverting changes.
Training on augumented user 89812 9/50 current_auc = 0.7291666666666666
User 89812 AUC after training: 0.7291666666666666
User 89812 does not improve AUC. Reverting changes.
Training on augumented user 25883 10/50 current_auc = 0.7291666666666666
User 25883 AUC after training: 0.7291666666666666
User 25883 does not improve AUC. Reverting changes.
Training on augumented user 22017 11/50 current_auc = 0.7291666666666666
User 22017 AUC after training: 0.7291666666666666
User 22017 does not improve AUC. Reverting changes.
Training on augumented user 136125 12/50 current_auc = 0.7291666666666666
User 136125 AUC after training: 0.7291666666666666
User 136125 does not improve AUC. Reverting changes.
Training on augumented user 91928 13/50 current_auc = 0.7291666666666666
User 91928 AUC after training: 0.7291666666666666
User 91928 does not improve AUC. Reverting changes.
Training on augumented user 60717 14/50 current_auc = 0.7291666666666666
User 60717 AUC after training: 0.7291666666666666
User 60717 does not improve AUC. Reverting changes.
Training on augumented user 84632 15/50 current_auc = 0.7291666666666666
User 84632 AUC after training: 0.7291666666666666
User 84632 does not improve AUC. Reverting changes.
Training on augumented user 31533 16/50 current_auc = 0.7291666666666666
User 31533 AUC after training: 0.7291666666666666
User 31533 does not improve AUC. Reverting changes.
Training on augumented user 9548 17/50 current_auc = 0.7291666666666666
User 9548 AUC after training: 0.7291666666666666
User 9548 does not improve AUC. Reverting changes.
Training on augumented user 125162 18/50 current_auc = 0.7291666666666666
User 125162 AUC after training: 0.7291666666666666
User 125162 does not improve AUC. Reverting changes.
Training on augumented user 72231 19/50 current_auc = 0.7291666666666666
User 72231 AUC after training: 0.7291666666666666
User 72231 does not improve AUC. Reverting changes.
Training on augumented user 18041 20/50 current_auc = 0.7291666666666666
User 18041 AUC after training: 0.7291666666666666
User 18041 does not improve AUC. Reverting changes.
Training on augumented user 129169 21/50 current_auc = 0.7291666666666666
User 129169 AUC after training: 0.7291666666666666
User 129169 does not improve AUC. Reverting changes.
Training on augumented user 97543 22/50 current_auc = 0.7291666666666666
User 97543 AUC after training: 0.7291666666666666
User 97543 does not improve AUC. Reverting changes.
Training on augumented user 138462 23/50 current_auc = 0.7291666666666666
User 138462 AUC after training: 0.7291666666666666
User 138462 does not improve AUC. Reverting changes.
Training on augumented user 56110 24/50 current_auc = 0.7291666666666666
User 56110 AUC after training: 0.7291666666666666
User 56110 does not improve AUC. Reverting changes.
Training on augumented user 117308 25/50 current_auc = 0.7291666666666666
User 117308 AUC after training: 0.7291666666666666
User 117308 does not improve AUC. Reverting changes.
Training on augumented user 106450 26/50 current_auc = 0.7291666666666666
User 106450 AUC after training: 0.7291666666666666
User 106450 does not improve AUC. Reverting changes.
Training on augumented user 118603 27/50 current_auc = 0.7291666666666666
User 118603 AUC after training: 0.7291666666666666
User 118603 does not improve AUC. Reverting changes.
Training on augumented user 84441 28/50 current_auc = 0.7291666666666666
User 84441 AUC after training: 0.7291666666666666
User 84441 does not improve AUC. Reverting changes.
Training on augumented user 89438 29/50 current_auc = 0.7291666666666666
User 89438 AUC after training: 0.7291666666666666
User 89438 does not improve AUC. Reverting changes.
Training on augumented user 86880 30/50 current_auc = 0.7291666666666666
User 86880 AUC after training: 0.7291666666666666
User 86880 does not improve AUC. Reverting changes.
Training on augumented user 24870 31/50 current_auc = 0.7291666666666666
User 24870 AUC after training: 0.7291666666666666
User 24870 does not improve AUC. Reverting changes.
Training on augumented user 81783 32/50 current_auc = 0.7291666666666666
User 81783 AUC after training: 0.7291666666666666
User 81783 does not improve AUC. Reverting changes.
Training on augumented user 82376 33/50 current_auc = 0.7291666666666666
User 82376 AUC after training: 0.7291666666666666
User 82376 does not improve AUC. Reverting changes.
Training on augumented user 42532 34/50 current_auc = 0.7291666666666666
User 42532 AUC after training: 0.7291666666666666
User 42532 does not improve AUC. Reverting changes.
Training on augumented user 28766 35/50 current_auc = 0.7291666666666666
User 28766 AUC after training: 0.7291666666666666
User 28766 does not improve AUC. Reverting changes.
Training on augumented user 54876 36/50 current_auc = 0.7291666666666666
User 54876 AUC after training: 0.7291666666666666
User 54876 does not improve AUC. Reverting changes.
Training on augumented user 96444 37/50 current_auc = 0.7291666666666666
User 96444 AUC after training: 0.7291666666666666
User 96444 does not improve AUC. Reverting changes.
Training on augumented user 138144 38/50 current_auc = 0.7291666666666666
User 138144 AUC after training: 0.7291666666666666
User 138144 does not improve AUC. Reverting changes.
Training on augumented user 136006 39/50 current_auc = 0.7291666666666666
User 136006 AUC after training: 0.7291666666666666
User 136006 does not improve AUC. Reverting changes.
Training on augumented user 130531 40/50 current_auc = 0.7291666666666666
User 130531 AUC after training: 0.7291666666666666
User 130531 does not improve AUC. Reverting changes.
Training on augumented user 71959 41/50 current_auc = 0.7291666666666666
User 71959 AUC after training: 0.7291666666666666
User 71959 does not improve AUC. Reverting changes.
Training on augumented user 36793 42/50 current_auc = 0.7291666666666666
User 36793 AUC after training: 0.7291666666666666
User 36793 does not improve AUC. Reverting changes.
Training on augumented user 132029 43/50 current_auc = 0.7291666666666666
User 132029 AUC after training: 0.7291666666666666
User 132029 does not improve AUC. Reverting changes.
Training on augumented user 114518 44/50 current_auc = 0.7291666666666666
User 114518 AUC after training: 0.7291666666666666
User 114518 does not improve AUC. Reverting changes.
Training on augumented user 54853 45/50 current_auc = 0.7291666666666666
User 54853 AUC after training: 0.7291666666666666
User 54853 does not improve AUC. Reverting changes.
Training on augumented user 115503 46/50 current_auc = 0.7291666666666666
User 115503 AUC after training: 0.7291666666666666
User 115503 does not improve AUC. Reverting changes.
Training on augumented user 74730 47/50 current_auc = 0.7291666666666666
User 74730 AUC after training: 0.7291666666666666
User 74730 does not improve AUC. Reverting changes.
Training on augumented user 40121 48/50 current_auc = 0.7291666666666666
User 40121 AUC after training: 0.7291666666666666
User 40121 does not improve AUC. Reverting changes.
Training on augumented user 65748 49/50 current_auc = 0.7291666666666666
User 65748 AUC after training: 0.7291666666666666
User 65748 does not improve AUC. Reverting changes.
[2024-12-02 18:04:26.806344] start test user 28233 45/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:27.315117] start test user 28233 45/568 recall augumented users by random, augumented_users = [3499, 128567, 79533, 133227, 914, 96504, 102531, 110532, 95919, 96948, 59721, 18150, 30761, 135295, 117002, 5717, 7183, 81642, 105328, 35786, 60103, 79284, 49324, 98383, 171, 9747, 116343, 98439, 25098, 68265, 63729, 4064, 9148, 54666, 107438, 28648, 87063, 11351, 74570, 11631, 124026, 124293, 13183, 37756, 47699, 89439, 46942, 19305, 106248, 28244]
[2024-12-02 18:04:27.331927] user = 28233 Cloud 45/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:04:27.351078] user = 28233 Local 45/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:04:27.400479] user = 28233 Local+ 45/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:04:30.503025] user = 28233 MPDA- 45/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 3499 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3499 AUC after training: 0.5
User 3499 does not improve AUC. Reverting changes.
Training on augumented user 128567 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128567 AUC after training: 0.5
User 128567 does not improve AUC. Reverting changes.
Training on augumented user 79533 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79533 AUC after training: 0.5
User 79533 does not improve AUC. Reverting changes.
Training on augumented user 133227 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133227 AUC after training: 0.5
User 133227 does not improve AUC. Reverting changes.
Training on augumented user 914 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 914 AUC after training: 0.5
User 914 does not improve AUC. Reverting changes.
Training on augumented user 96504 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96504 AUC after training: 0.5
User 96504 does not improve AUC. Reverting changes.
Training on augumented user 102531 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102531 AUC after training: 0.5
User 102531 does not improve AUC. Reverting changes.
Training on augumented user 110532 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110532 AUC after training: 0.5
User 110532 does not improve AUC. Reverting changes.
Training on augumented user 95919 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95919 AUC after training: 0.5
User 95919 does not improve AUC. Reverting changes.
Training on augumented user 96948 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96948 AUC after training: 0.5
User 96948 does not improve AUC. Reverting changes.
Training on augumented user 59721 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59721 AUC after training: 0.5
User 59721 does not improve AUC. Reverting changes.
Training on augumented user 18150 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18150 AUC after training: 0.5
User 18150 does not improve AUC. Reverting changes.
Training on augumented user 30761 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30761 AUC after training: 0.5
User 30761 does not improve AUC. Reverting changes.
Training on augumented user 135295 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135295 AUC after training: 0.5
User 135295 does not improve AUC. Reverting changes.
Training on augumented user 117002 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117002 AUC after training: 0.5
User 117002 does not improve AUC. Reverting changes.
Training on augumented user 5717 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5717 AUC after training: 0.5
User 5717 does not improve AUC. Reverting changes.
Training on augumented user 7183 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7183 AUC after training: 0.5
User 7183 does not improve AUC. Reverting changes.
Training on augumented user 81642 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81642 AUC after training: 0.5
User 81642 does not improve AUC. Reverting changes.
Training on augumented user 105328 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105328 AUC after training: 0.5
User 105328 does not improve AUC. Reverting changes.
Training on augumented user 35786 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35786 AUC after training: 0.5
User 35786 does not improve AUC. Reverting changes.
Training on augumented user 60103 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60103 AUC after training: 0.5
User 60103 does not improve AUC. Reverting changes.
Training on augumented user 79284 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79284 AUC after training: 0.5
User 79284 does not improve AUC. Reverting changes.
Training on augumented user 49324 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49324 AUC after training: 0.5
User 49324 does not improve AUC. Reverting changes.
Training on augumented user 98383 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98383 AUC after training: 0.5
User 98383 does not improve AUC. Reverting changes.
Training on augumented user 171 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 171 AUC after training: 0.5
User 171 does not improve AUC. Reverting changes.
Training on augumented user 9747 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9747 AUC after training: 0.5
User 9747 does not improve AUC. Reverting changes.
Training on augumented user 116343 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116343 AUC after training: 0.5
User 116343 does not improve AUC. Reverting changes.
Training on augumented user 98439 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98439 AUC after training: 0.5
User 98439 does not improve AUC. Reverting changes.
Training on augumented user 25098 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25098 AUC after training: 0.5
User 25098 does not improve AUC. Reverting changes.
Training on augumented user 68265 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68265 AUC after training: 0.5
User 68265 does not improve AUC. Reverting changes.
Training on augumented user 63729 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63729 AUC after training: 0.5
User 63729 does not improve AUC. Reverting changes.
Training on augumented user 4064 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4064 AUC after training: 0.5
User 4064 does not improve AUC. Reverting changes.
Training on augumented user 9148 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9148 AUC after training: 0.5
User 9148 does not improve AUC. Reverting changes.
Training on augumented user 54666 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54666 AUC after training: 0.5
User 54666 does not improve AUC. Reverting changes.
Training on augumented user 107438 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107438 AUC after training: 0.5
User 107438 does not improve AUC. Reverting changes.
Training on augumented user 28648 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28648 AUC after training: 0.5
User 28648 does not improve AUC. Reverting changes.
Training on augumented user 87063 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87063 AUC after training: 0.5
User 87063 does not improve AUC. Reverting changes.
Training on augumented user 11351 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11351 AUC after training: 0.5
User 11351 does not improve AUC. Reverting changes.
Training on augumented user 74570 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74570 AUC after training: 0.5
User 74570 does not improve AUC. Reverting changes.
Training on augumented user 11631 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11631 AUC after training: 0.5
User 11631 does not improve AUC. Reverting changes.
Training on augumented user 124026 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124026 AUC after training: 0.5
User 124026 does not improve AUC. Reverting changes.
Training on augumented user 124293 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124293 AUC after training: 0.5
User 124293 does not improve AUC. Reverting changes.
Training on augumented user 13183 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13183 AUC after training: 0.5
User 13183 does not improve AUC. Reverting changes.
Training on augumented user 37756 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37756 AUC after training: 0.5
User 37756 does not improve AUC. Reverting changes.
Training on augumented user 47699 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47699 AUC after training: 0.5
User 47699 does not improve AUC. Reverting changes.
Training on augumented user 89439 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89439 AUC after training: 0.5
User 89439 does not improve AUC. Reverting changes.
Training on augumented user 46942 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46942 AUC after training: 0.5
User 46942 does not improve AUC. Reverting changes.
Training on augumented user 19305 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19305 AUC after training: 0.5
User 19305 does not improve AUC. Reverting changes.
Training on augumented user 106248 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106248 AUC after training: 0.5
User 106248 does not improve AUC. Reverting changes.
Training on augumented user 28244 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28244 AUC after training: 0.5
User 28244 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:04:59.788923] start test user 28238 46/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:00.317029] start test user 28238 46/568 recall augumented users by random, augumented_users = [1745, 50627, 109346, 14679, 114949, 25191, 27108, 89959, 62894, 42384, 5267, 37316, 55056, 21965, 11345, 136553, 31238, 18161, 131824, 85612, 55154, 58643, 36540, 48951, 113426, 5982, 76601, 26674, 15222, 30263, 67291, 34939, 58766, 31928, 64193, 34972, 54179, 101599, 102037, 13119, 122998, 7480, 1348, 114940, 71981, 136765, 43201, 74295, 11920, 26395]
[2024-12-02 18:05:00.334065] user = 28238 Cloud 46/568
[2024-12-02 18:05:00.345905] user = 28238 Local 46/568
[2024-12-02 18:05:00.445921] user = 28238 Local+ 46/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:02.511413] user = 28238 MPDA- 46/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.31612903225806455
Training on augumented user 1745 0/50 current_auc = 0.31612903225806455
User 1745 AUC after training: 0.3096774193548387
User 1745 does not improve AUC. Reverting changes.
Training on augumented user 50627 1/50 current_auc = 0.31612903225806455
User 50627 AUC after training: 0.31612903225806455
User 50627 does not improve AUC. Reverting changes.
Training on augumented user 109346 2/50 current_auc = 0.31612903225806455
User 109346 AUC after training: 0.31612903225806455
User 109346 does not improve AUC. Reverting changes.
Training on augumented user 14679 3/50 current_auc = 0.31612903225806455
User 14679 AUC after training: 0.31612903225806455
User 14679 does not improve AUC. Reverting changes.
Training on augumented user 114949 4/50 current_auc = 0.31612903225806455
User 114949 AUC after training: 0.3096774193548387
User 114949 does not improve AUC. Reverting changes.
Training on augumented user 25191 5/50 current_auc = 0.31612903225806455
User 25191 AUC after training: 0.3096774193548387
User 25191 does not improve AUC. Reverting changes.
Training on augumented user 27108 6/50 current_auc = 0.31612903225806455
User 27108 AUC after training: 0.3096774193548387
User 27108 does not improve AUC. Reverting changes.
Training on augumented user 89959 7/50 current_auc = 0.31612903225806455
User 89959 AUC after training: 0.31612903225806455
User 89959 does not improve AUC. Reverting changes.
Training on augumented user 62894 8/50 current_auc = 0.31612903225806455
User 62894 AUC after training: 0.31612903225806455
User 62894 does not improve AUC. Reverting changes.
Training on augumented user 42384 9/50 current_auc = 0.31612903225806455
User 42384 AUC after training: 0.31612903225806455
User 42384 does not improve AUC. Reverting changes.
Training on augumented user 5267 10/50 current_auc = 0.31612903225806455
User 5267 AUC after training: 0.31612903225806455
User 5267 does not improve AUC. Reverting changes.
Training on augumented user 37316 11/50 current_auc = 0.31612903225806455
User 37316 AUC after training: 0.31612903225806455
User 37316 does not improve AUC. Reverting changes.
Training on augumented user 55056 12/50 current_auc = 0.31612903225806455
User 55056 AUC after training: 0.3225806451612903
User 55056 improves AUC. Keeping the model.
Training on augumented user 21965 13/50 current_auc = 0.3225806451612903
User 21965 AUC after training: 0.3225806451612903
User 21965 does not improve AUC. Reverting changes.
Training on augumented user 11345 14/50 current_auc = 0.3225806451612903
User 11345 AUC after training: 0.31612903225806455
User 11345 does not improve AUC. Reverting changes.
Training on augumented user 136553 15/50 current_auc = 0.3225806451612903
User 136553 AUC after training: 0.3225806451612903
User 136553 does not improve AUC. Reverting changes.
Training on augumented user 31238 16/50 current_auc = 0.3225806451612903
User 31238 AUC after training: 0.3225806451612903
User 31238 does not improve AUC. Reverting changes.
Training on augumented user 18161 17/50 current_auc = 0.3225806451612903
User 18161 AUC after training: 0.3225806451612903
User 18161 does not improve AUC. Reverting changes.
Training on augumented user 131824 18/50 current_auc = 0.3225806451612903
User 131824 AUC after training: 0.3225806451612903
User 131824 does not improve AUC. Reverting changes.
Training on augumented user 85612 19/50 current_auc = 0.3225806451612903
User 85612 AUC after training: 0.31612903225806455
User 85612 does not improve AUC. Reverting changes.
Training on augumented user 55154 20/50 current_auc = 0.3225806451612903
User 55154 AUC after training: 0.3225806451612903
User 55154 does not improve AUC. Reverting changes.
Training on augumented user 58643 21/50 current_auc = 0.3225806451612903
User 58643 AUC after training: 0.3225806451612903
User 58643 does not improve AUC. Reverting changes.
Training on augumented user 36540 22/50 current_auc = 0.3225806451612903
User 36540 AUC after training: 0.3225806451612903
User 36540 does not improve AUC. Reverting changes.
Training on augumented user 48951 23/50 current_auc = 0.3225806451612903
User 48951 AUC after training: 0.3225806451612903
User 48951 does not improve AUC. Reverting changes.
Training on augumented user 113426 24/50 current_auc = 0.3225806451612903
User 113426 AUC after training: 0.3225806451612903
User 113426 does not improve AUC. Reverting changes.
Training on augumented user 5982 25/50 current_auc = 0.3225806451612903
User 5982 AUC after training: 0.3225806451612903
User 5982 does not improve AUC. Reverting changes.
Training on augumented user 76601 26/50 current_auc = 0.3225806451612903
User 76601 AUC after training: 0.3225806451612903
User 76601 does not improve AUC. Reverting changes.
Training on augumented user 26674 27/50 current_auc = 0.3225806451612903
User 26674 AUC after training: 0.3225806451612903
User 26674 does not improve AUC. Reverting changes.
Training on augumented user 15222 28/50 current_auc = 0.3225806451612903
User 15222 AUC after training: 0.3225806451612903
User 15222 does not improve AUC. Reverting changes.
Training on augumented user 30263 29/50 current_auc = 0.3225806451612903
User 30263 AUC after training: 0.3225806451612903
User 30263 does not improve AUC. Reverting changes.
Training on augumented user 67291 30/50 current_auc = 0.3225806451612903
User 67291 AUC after training: 0.3225806451612903
User 67291 does not improve AUC. Reverting changes.
Training on augumented user 34939 31/50 current_auc = 0.3225806451612903
User 34939 AUC after training: 0.3225806451612903
User 34939 does not improve AUC. Reverting changes.
Training on augumented user 58766 32/50 current_auc = 0.3225806451612903
User 58766 AUC after training: 0.3225806451612903
User 58766 does not improve AUC. Reverting changes.
Training on augumented user 31928 33/50 current_auc = 0.3225806451612903
User 31928 AUC after training: 0.3225806451612903
User 31928 does not improve AUC. Reverting changes.
Training on augumented user 64193 34/50 current_auc = 0.3225806451612903
User 64193 AUC after training: 0.3225806451612903
User 64193 does not improve AUC. Reverting changes.
Training on augumented user 34972 35/50 current_auc = 0.3225806451612903
User 34972 AUC after training: 0.31612903225806455
User 34972 does not improve AUC. Reverting changes.
Training on augumented user 54179 36/50 current_auc = 0.3225806451612903
User 54179 AUC after training: 0.3225806451612903
User 54179 does not improve AUC. Reverting changes.
Training on augumented user 101599 37/50 current_auc = 0.3225806451612903
User 101599 AUC after training: 0.3225806451612903
User 101599 does not improve AUC. Reverting changes.
Training on augumented user 102037 38/50 current_auc = 0.3225806451612903
User 102037 AUC after training: 0.3225806451612903
User 102037 does not improve AUC. Reverting changes.
Training on augumented user 13119 39/50 current_auc = 0.3225806451612903
User 13119 AUC after training: 0.31612903225806455
User 13119 does not improve AUC. Reverting changes.
Training on augumented user 122998 40/50 current_auc = 0.3225806451612903
User 122998 AUC after training: 0.31612903225806455
User 122998 does not improve AUC. Reverting changes.
Training on augumented user 7480 41/50 current_auc = 0.3225806451612903
User 7480 AUC after training: 0.3225806451612903
User 7480 does not improve AUC. Reverting changes.
Training on augumented user 1348 42/50 current_auc = 0.3225806451612903
User 1348 AUC after training: 0.3225806451612903
User 1348 does not improve AUC. Reverting changes.
Training on augumented user 114940 43/50 current_auc = 0.3225806451612903
User 114940 AUC after training: 0.31612903225806455
User 114940 does not improve AUC. Reverting changes.
Training on augumented user 71981 44/50 current_auc = 0.3225806451612903
User 71981 AUC after training: 0.3225806451612903
User 71981 does not improve AUC. Reverting changes.
Training on augumented user 136765 45/50 current_auc = 0.3225806451612903
User 136765 AUC after training: 0.3225806451612903
User 136765 does not improve AUC. Reverting changes.
Training on augumented user 43201 46/50 current_auc = 0.3225806451612903
User 43201 AUC after training: 0.3225806451612903
User 43201 does not improve AUC. Reverting changes.
Training on augumented user 74295 47/50 current_auc = 0.3225806451612903
User 74295 AUC after training: 0.31612903225806455
User 74295 does not improve AUC. Reverting changes.
Training on augumented user 11920 48/50 current_auc = 0.3225806451612903
User 11920 AUC after training: 0.3225806451612903
User 11920 does not improve AUC. Reverting changes.
Training on augumented user 26395 49/50 current_auc = 0.3225806451612903
User 26395 AUC after training: 0.3225806451612903
User 26395 does not improve AUC. Reverting changes.
[2024-12-02 18:05:33.820197] start test user 28239 47/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:34.447561] start test user 28239 47/568 recall augumented users by random, augumented_users = [24823, 125748, 8379, 43218, 47734, 136355, 116824, 85164, 58056, 8336, 60897, 93164, 46345, 104028, 102212, 97634, 73176, 84581, 40806, 70703, 134514, 44079, 75577, 58234, 11431, 108580, 64242, 6146, 1723, 14593, 90152, 110059, 14441, 32954, 11475, 91148, 67900, 104566, 100929, 71365, 25765, 4079, 107949, 77512, 116003, 65135, 31848, 132413, 99503, 87337]
[2024-12-02 18:05:34.463652] user = 28239 Cloud 47/568
[2024-12-02 18:05:34.540513] user = 28239 Local 47/568
[2024-12-02 18:05:34.721743] user = 28239 Local+ 47/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:37.010528] user = 28239 MPDA- 47/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6869896570495373
Training on augumented user 24823 0/50 current_auc = 0.6869896570495373
User 24823 AUC after training: 0.6868570551205282
User 24823 does not improve AUC. Reverting changes.
Training on augumented user 125748 1/50 current_auc = 0.6869896570495373
User 125748 AUC after training: 0.6868989294138995
User 125748 does not improve AUC. Reverting changes.
Training on augumented user 8379 2/50 current_auc = 0.6869896570495373
User 8379 AUC after training: 0.6867802855826807
User 8379 does not improve AUC. Reverting changes.
Training on augumented user 43218 3/50 current_auc = 0.6869896570495373
User 43218 AUC after training: 0.6867942436804712
User 43218 does not improve AUC. Reverting changes.
Training on augumented user 47734 4/50 current_auc = 0.6869896570495373
User 47734 AUC after training: 0.6870524684895943
User 47734 improves AUC. Keeping the model.
Training on augumented user 136355 5/50 current_auc = 0.6870524684895943
User 136355 AUC after training: 0.6866860684225955
User 136355 does not improve AUC. Reverting changes.
Training on augumented user 116824 6/50 current_auc = 0.6870524684895943
User 116824 AUC after training: 0.6862428988177491
User 116824 does not improve AUC. Reverting changes.
Training on augumented user 85164 7/50 current_auc = 0.6870524684895943
User 85164 AUC after training: 0.6868779922672139
User 85164 does not improve AUC. Reverting changes.
Training on augumented user 58056 8/50 current_auc = 0.6870524684895943
User 58056 AUC after training: 0.6867174741426239
User 58056 does not improve AUC. Reverting changes.
Training on augumented user 8336 9/50 current_auc = 0.6870524684895943
User 8336 AUC after training: 0.6868151808271569
User 8336 does not improve AUC. Reverting changes.
Training on augumented user 60897 10/50 current_auc = 0.6870524684895943
User 60897 AUC after training: 0.6870036151473278
User 60897 does not improve AUC. Reverting changes.
Training on augumented user 93164 11/50 current_auc = 0.6870524684895943
User 93164 AUC after training: 0.6866860684225954
User 93164 does not improve AUC. Reverting changes.
Training on augumented user 46345 12/50 current_auc = 0.6870524684895943
User 46345 AUC after training: 0.6866162779336431
User 46345 does not improve AUC. Reverting changes.
Training on augumented user 104028 13/50 current_auc = 0.6870524684895943
User 104028 AUC after training: 0.686884971316109
User 104028 does not improve AUC. Reverting changes.
Training on augumented user 102212 14/50 current_auc = 0.6870524684895943
User 102212 AUC after training: 0.6870385103918037
User 102212 does not improve AUC. Reverting changes.
Training on augumented user 97634 15/50 current_auc = 0.6870524684895943
User 97634 AUC after training: 0.6868710132183186
User 97634 does not improve AUC. Reverting changes.
Training on augumented user 73176 16/50 current_auc = 0.6870524684895943
User 73176 AUC after training: 0.6867244531915191
User 73176 does not improve AUC. Reverting changes.
Training on augumented user 84581 17/50 current_auc = 0.6870524684895943
User 84581 AUC after training: 0.6873700152143266
User 84581 improves AUC. Keeping the model.
Training on augumented user 40806 18/50 current_auc = 0.6873700152143266
User 40806 AUC after training: 0.6874572533255168
User 40806 improves AUC. Keeping the model.
Training on augumented user 70703 19/50 current_auc = 0.6874572533255168
User 70703 AUC after training: 0.6873490780676409
User 70703 does not improve AUC. Reverting changes.
Training on augumented user 134514 20/50 current_auc = 0.6874572533255168
User 134514 AUC after training: 0.6874293371299358
User 134514 does not improve AUC. Reverting changes.
Training on augumented user 44079 21/50 current_auc = 0.6874572533255168
User 44079 AUC after training: 0.6852483843501807
User 44079 does not improve AUC. Reverting changes.
Training on augumented user 75577 22/50 current_auc = 0.6874572533255168
User 75577 AUC after training: 0.6872478818586603
User 75577 does not improve AUC. Reverting changes.
Training on augumented user 58234 23/50 current_auc = 0.6874572533255168
User 58234 AUC after training: 0.6868779922672138
User 58234 does not improve AUC. Reverting changes.
Training on augumented user 11431 24/50 current_auc = 0.6874572533255168
User 11431 AUC after training: 0.6871606437474702
User 11431 does not improve AUC. Reverting changes.
Training on augumented user 108580 25/50 current_auc = 0.6874572533255168
User 108580 AUC after training: 0.6866651312759098
User 108580 does not improve AUC. Reverting changes.
Training on augumented user 64242 26/50 current_auc = 0.6874572533255168
User 64242 AUC after training: 0.6873246513965077
User 64242 does not improve AUC. Reverting changes.
Training on augumented user 6146 27/50 current_auc = 0.6874572533255168
User 6146 AUC after training: 0.6872618399564507
User 6146 does not improve AUC. Reverting changes.
Training on augumented user 1723 28/50 current_auc = 0.6874572533255168
User 1723 AUC after training: 0.6872583504320031
User 1723 does not improve AUC. Reverting changes.
Training on augumented user 14593 29/50 current_auc = 0.6874572533255168
User 14593 AUC after training: 0.6874432952277263
User 14593 does not improve AUC. Reverting changes.
Training on augumented user 90152 30/50 current_auc = 0.6874572533255168
User 90152 AUC after training: 0.6874328266543834
User 90152 does not improve AUC. Reverting changes.
Training on augumented user 110059 31/50 current_auc = 0.6874572533255168
User 110059 AUC after training: 0.6872269447119747
User 110059 does not improve AUC. Reverting changes.
Training on augumented user 14441 32/50 current_auc = 0.6874572533255168
User 14441 AUC after training: 0.6870559580140418
User 14441 does not improve AUC. Reverting changes.
Training on augumented user 32954 33/50 current_auc = 0.6874572533255168
User 32954 AUC after training: 0.6873176723476124
User 32954 does not improve AUC. Reverting changes.
Training on augumented user 11475 34/50 current_auc = 0.6874572533255168
User 11475 AUC after training: 0.6871571542230224
User 11475 does not improve AUC. Reverting changes.
Training on augumented user 91148 35/50 current_auc = 0.6874572533255168
User 91148 AUC after training: 0.687436316178831
User 91148 does not improve AUC. Reverting changes.
Training on augumented user 67900 36/50 current_auc = 0.6874572533255168
User 67900 AUC after training: 0.6875793866811832
User 67900 improves AUC. Keeping the model.
Training on augumented user 104566 37/50 current_auc = 0.6875793866811832
User 104566 AUC after training: 0.6875933447789735
User 104566 improves AUC. Keeping the model.
Training on augumented user 100929 38/50 current_auc = 0.6875933447789735
User 100929 AUC after training: 0.6877957371969348
User 100929 improves AUC. Keeping the model.
Training on augumented user 71365 39/50 current_auc = 0.6877957371969348
User 71365 AUC after training: 0.6867593484359952
User 71365 does not improve AUC. Reverting changes.
Training on augumented user 25765 40/50 current_auc = 0.6877957371969348
User 25765 AUC after training: 0.6877364152813255
User 25765 does not improve AUC. Reverting changes.
Training on augumented user 4079 41/50 current_auc = 0.6877957371969348
User 4079 AUC after training: 0.6875375123878118
User 4079 does not improve AUC. Reverting changes.
Training on augumented user 107949 42/50 current_auc = 0.6877957371969348
User 107949 AUC after training: 0.6878794857836774
User 107949 improves AUC. Keeping the model.
Training on augumented user 77512 43/50 current_auc = 0.6878794857836774
User 77512 AUC after training: 0.6879597448459723
User 77512 improves AUC. Keeping the model.
Training on augumented user 116003 44/50 current_auc = 0.6879597448459723
User 116003 AUC after training: 0.6883854668285806
User 116003 improves AUC. Keeping the model.
Training on augumented user 65135 45/50 current_auc = 0.6883854668285806
User 65135 AUC after training: 0.6882703125218095
User 65135 does not improve AUC. Reverting changes.
Training on augumented user 31848 46/50 current_auc = 0.6883854668285806
User 31848 AUC after training: 0.6883889563530283
User 31848 improves AUC. Keeping the model.
Training on augumented user 132413 47/50 current_auc = 0.6883889563530283
User 132413 AUC after training: 0.6883889563530282
User 132413 does not improve AUC. Reverting changes.
Training on augumented user 99503 48/50 current_auc = 0.6883889563530283
User 99503 AUC after training: 0.6877329257568778
User 99503 does not improve AUC. Reverting changes.
Training on augumented user 87337 49/50 current_auc = 0.6883889563530283
User 87337 AUC after training: 0.6885983278198848
User 87337 improves AUC. Keeping the model.
[2024-12-02 18:06:13.535429] start test user 28256 48/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:14.114355] start test user 28256 48/568 recall augumented users by random, augumented_users = [21454, 85538, 79277, 93804, 6347, 4804, 4509, 117022, 68200, 62371, 92622, 121787, 93918, 72339, 126368, 87969, 52, 59106, 137479, 83530, 75762, 65876, 57227, 75040, 65352, 33115, 75816, 39259, 109926, 40682, 41769, 113536, 92005, 136447, 22423, 5330, 136043, 34900, 90168, 85204, 38517, 60347, 49985, 79565, 75482, 68372, 96624, 74251, 29863, 64039]
[2024-12-02 18:06:14.129693] user = 28256 Cloud 48/568
[2024-12-02 18:06:14.152106] user = 28256 Local 48/568
[2024-12-02 18:06:14.306607] user = 28256 Local+ 48/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:16.628067] user = 28256 MPDA- 48/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6598124098124099
Training on augumented user 21454 0/50 current_auc = 0.6598124098124099
User 21454 AUC after training: 0.6605339105339105
User 21454 improves AUC. Keeping the model.
Training on augumented user 85538 1/50 current_auc = 0.6605339105339105
User 85538 AUC after training: 0.6598124098124099
User 85538 does not improve AUC. Reverting changes.
Training on augumented user 79277 2/50 current_auc = 0.6605339105339105
User 79277 AUC after training: 0.6608946608946609
User 79277 improves AUC. Keeping the model.
Training on augumented user 93804 3/50 current_auc = 0.6608946608946609
User 93804 AUC after training: 0.659992784992785
User 93804 does not improve AUC. Reverting changes.
Training on augumented user 6347 4/50 current_auc = 0.6608946608946609
User 6347 AUC after training: 0.6605339105339105
User 6347 does not improve AUC. Reverting changes.
Training on augumented user 4804 5/50 current_auc = 0.6608946608946609
User 4804 AUC after training: 0.6603535353535354
User 4804 does not improve AUC. Reverting changes.
Training on augumented user 4509 6/50 current_auc = 0.6608946608946609
User 4509 AUC after training: 0.6596320346320347
User 4509 does not improve AUC. Reverting changes.
Training on augumented user 117022 7/50 current_auc = 0.6608946608946609
User 117022 AUC after training: 0.6594516594516595
User 117022 does not improve AUC. Reverting changes.
Training on augumented user 68200 8/50 current_auc = 0.6608946608946609
User 68200 AUC after training: 0.6605339105339105
User 68200 does not improve AUC. Reverting changes.
Training on augumented user 62371 9/50 current_auc = 0.6608946608946609
User 62371 AUC after training: 0.6612554112554113
User 62371 improves AUC. Keeping the model.
Training on augumented user 92622 10/50 current_auc = 0.6612554112554113
User 92622 AUC after training: 0.6612554112554113
User 92622 does not improve AUC. Reverting changes.
Training on augumented user 121787 11/50 current_auc = 0.6612554112554113
User 121787 AUC after training: 0.6603535353535354
User 121787 does not improve AUC. Reverting changes.
Training on augumented user 93918 12/50 current_auc = 0.6612554112554113
User 93918 AUC after training: 0.6637806637806637
User 93918 improves AUC. Keeping the model.
Training on augumented user 72339 13/50 current_auc = 0.6637806637806637
User 72339 AUC after training: 0.6637806637806637
User 72339 does not improve AUC. Reverting changes.
Training on augumented user 126368 14/50 current_auc = 0.6637806637806637
User 126368 AUC after training: 0.6634199134199134
User 126368 does not improve AUC. Reverting changes.
Training on augumented user 87969 15/50 current_auc = 0.6637806637806637
User 87969 AUC after training: 0.660894660894661
User 87969 does not improve AUC. Reverting changes.
Training on augumented user 52 16/50 current_auc = 0.6637806637806637
User 52 AUC after training: 0.6648629148629149
User 52 improves AUC. Keeping the model.
Training on augumented user 59106 17/50 current_auc = 0.6648629148629149
User 59106 AUC after training: 0.6626984126984127
User 59106 does not improve AUC. Reverting changes.
Training on augumented user 137479 18/50 current_auc = 0.6648629148629149
User 137479 AUC after training: 0.6634199134199134
User 137479 does not improve AUC. Reverting changes.
Training on augumented user 83530 19/50 current_auc = 0.6648629148629149
User 83530 AUC after training: 0.6645021645021645
User 83530 does not improve AUC. Reverting changes.
Training on augumented user 75762 20/50 current_auc = 0.6648629148629149
User 75762 AUC after training: 0.6634199134199134
User 75762 does not improve AUC. Reverting changes.
Training on augumented user 65876 21/50 current_auc = 0.6648629148629149
User 65876 AUC after training: 0.6645021645021645
User 65876 does not improve AUC. Reverting changes.
Training on augumented user 57227 22/50 current_auc = 0.6648629148629149
User 57227 AUC after training: 0.6637806637806638
User 57227 does not improve AUC. Reverting changes.
Training on augumented user 75040 23/50 current_auc = 0.6648629148629149
User 75040 AUC after training: 0.665945165945166
User 75040 improves AUC. Keeping the model.
Training on augumented user 65352 24/50 current_auc = 0.665945165945166
User 65352 AUC after training: 0.6612554112554113
User 65352 does not improve AUC. Reverting changes.
Training on augumented user 33115 25/50 current_auc = 0.665945165945166
User 33115 AUC after training: 0.6637806637806637
User 33115 does not improve AUC. Reverting changes.
Training on augumented user 75816 26/50 current_auc = 0.665945165945166
User 75816 AUC after training: 0.6612554112554113
User 75816 does not improve AUC. Reverting changes.
Training on augumented user 39259 27/50 current_auc = 0.665945165945166
User 39259 AUC after training: 0.663059163059163
User 39259 does not improve AUC. Reverting changes.
Training on augumented user 109926 28/50 current_auc = 0.665945165945166
User 109926 AUC after training: 0.6630591630591631
User 109926 does not improve AUC. Reverting changes.
Training on augumented user 40682 29/50 current_auc = 0.665945165945166
User 40682 AUC after training: 0.6652236652236653
User 40682 does not improve AUC. Reverting changes.
Training on augumented user 41769 30/50 current_auc = 0.665945165945166
User 41769 AUC after training: 0.6623376623376623
User 41769 does not improve AUC. Reverting changes.
Training on augumented user 113536 31/50 current_auc = 0.665945165945166
User 113536 AUC after training: 0.6637806637806638
User 113536 does not improve AUC. Reverting changes.
Training on augumented user 92005 32/50 current_auc = 0.665945165945166
User 92005 AUC after training: 0.6637806637806637
User 92005 does not improve AUC. Reverting changes.
Training on augumented user 136447 33/50 current_auc = 0.665945165945166
User 136447 AUC after training: 0.6655844155844156
User 136447 does not improve AUC. Reverting changes.
Training on augumented user 22423 34/50 current_auc = 0.665945165945166
User 22423 AUC after training: 0.6655844155844156
User 22423 does not improve AUC. Reverting changes.
Training on augumented user 5330 35/50 current_auc = 0.665945165945166
User 5330 AUC after training: 0.661976911976912
User 5330 does not improve AUC. Reverting changes.
Training on augumented user 136043 36/50 current_auc = 0.665945165945166
User 136043 AUC after training: 0.6634199134199135
User 136043 does not improve AUC. Reverting changes.
Training on augumented user 34900 37/50 current_auc = 0.665945165945166
User 34900 AUC after training: 0.6645021645021645
User 34900 does not improve AUC. Reverting changes.
Training on augumented user 90168 38/50 current_auc = 0.665945165945166
User 90168 AUC after training: 0.6641414141414141
User 90168 does not improve AUC. Reverting changes.
Training on augumented user 85204 39/50 current_auc = 0.665945165945166
User 85204 AUC after training: 0.6637806637806638
User 85204 does not improve AUC. Reverting changes.
Training on augumented user 38517 40/50 current_auc = 0.665945165945166
User 38517 AUC after training: 0.6645021645021645
User 38517 does not improve AUC. Reverting changes.
Training on augumented user 60347 41/50 current_auc = 0.665945165945166
User 60347 AUC after training: 0.6641414141414141
User 60347 does not improve AUC. Reverting changes.
Training on augumented user 49985 42/50 current_auc = 0.665945165945166
User 49985 AUC after training: 0.6605339105339105
User 49985 does not improve AUC. Reverting changes.
Training on augumented user 79565 43/50 current_auc = 0.665945165945166
User 79565 AUC after training: 0.6652236652236653
User 79565 does not improve AUC. Reverting changes.
Training on augumented user 75482 44/50 current_auc = 0.665945165945166
User 75482 AUC after training: 0.6645021645021645
User 75482 does not improve AUC. Reverting changes.
Training on augumented user 68372 45/50 current_auc = 0.665945165945166
User 68372 AUC after training: 0.6652236652236653
User 68372 does not improve AUC. Reverting changes.
Training on augumented user 96624 46/50 current_auc = 0.665945165945166
User 96624 AUC after training: 0.6623376623376623
User 96624 does not improve AUC. Reverting changes.
Training on augumented user 74251 47/50 current_auc = 0.665945165945166
User 74251 AUC after training: 0.6641414141414141
User 74251 does not improve AUC. Reverting changes.
Training on augumented user 29863 48/50 current_auc = 0.665945165945166
User 29863 AUC after training: 0.6648629148629149
User 29863 does not improve AUC. Reverting changes.
Training on augumented user 64039 49/50 current_auc = 0.665945165945166
User 64039 AUC after training: 0.6637806637806637
User 64039 does not improve AUC. Reverting changes.
[2024-12-02 18:06:49.738010] start test user 28279 49/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:50.570577] start test user 28279 49/568 recall augumented users by random, augumented_users = [134716, 125087, 60268, 121330, 27379, 85055, 59632, 46571, 32109, 117095, 11392, 63673, 59447, 109359, 40473, 109021, 25196, 40120, 136448, 127714, 51647, 115853, 43399, 67423, 47691, 115099, 27868, 7715, 73545, 59539, 126201, 126398, 30576, 127062, 97001, 69236, 37256, 57768, 126148, 47431, 88407, 129837, 76884, 118699, 96389, 69020, 84300, 4787, 5486, 69433]
[2024-12-02 18:06:50.594411] user = 28279 Cloud 49/568
[2024-12-02 18:06:50.614021] user = 28279 Local 49/568
[2024-12-02 18:06:50.698509] user = 28279 Local+ 49/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:52.960110] user = 28279 MPDA- 49/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 134716 0/50 current_auc = 1.0
User 134716 AUC after training: 1.0
User 134716 does not improve AUC. Reverting changes.
Training on augumented user 125087 1/50 current_auc = 1.0
User 125087 AUC after training: 1.0
User 125087 does not improve AUC. Reverting changes.
Training on augumented user 60268 2/50 current_auc = 1.0
User 60268 AUC after training: 1.0
User 60268 does not improve AUC. Reverting changes.
Training on augumented user 121330 3/50 current_auc = 1.0
User 121330 AUC after training: 1.0
User 121330 does not improve AUC. Reverting changes.
Training on augumented user 27379 4/50 current_auc = 1.0
User 27379 AUC after training: 1.0
User 27379 does not improve AUC. Reverting changes.
Training on augumented user 85055 5/50 current_auc = 1.0
User 85055 AUC after training: 1.0
User 85055 does not improve AUC. Reverting changes.
Training on augumented user 59632 6/50 current_auc = 1.0
User 59632 AUC after training: 1.0
User 59632 does not improve AUC. Reverting changes.
Training on augumented user 46571 7/50 current_auc = 1.0
User 46571 AUC after training: 1.0
User 46571 does not improve AUC. Reverting changes.
Training on augumented user 32109 8/50 current_auc = 1.0
User 32109 AUC after training: 1.0
User 32109 does not improve AUC. Reverting changes.
Training on augumented user 117095 9/50 current_auc = 1.0
User 117095 AUC after training: 1.0
User 117095 does not improve AUC. Reverting changes.
Training on augumented user 11392 10/50 current_auc = 1.0
User 11392 AUC after training: 1.0
User 11392 does not improve AUC. Reverting changes.
Training on augumented user 63673 11/50 current_auc = 1.0
User 63673 AUC after training: 1.0
User 63673 does not improve AUC. Reverting changes.
Training on augumented user 59447 12/50 current_auc = 1.0
User 59447 AUC after training: 1.0
User 59447 does not improve AUC. Reverting changes.
Training on augumented user 109359 13/50 current_auc = 1.0
User 109359 AUC after training: 1.0
User 109359 does not improve AUC. Reverting changes.
Training on augumented user 40473 14/50 current_auc = 1.0
User 40473 AUC after training: 1.0
User 40473 does not improve AUC. Reverting changes.
Training on augumented user 109021 15/50 current_auc = 1.0
User 109021 AUC after training: 1.0
User 109021 does not improve AUC. Reverting changes.
Training on augumented user 25196 16/50 current_auc = 1.0
User 25196 AUC after training: 1.0
User 25196 does not improve AUC. Reverting changes.
Training on augumented user 40120 17/50 current_auc = 1.0
User 40120 AUC after training: 1.0
User 40120 does not improve AUC. Reverting changes.
Training on augumented user 136448 18/50 current_auc = 1.0
User 136448 AUC after training: 1.0
User 136448 does not improve AUC. Reverting changes.
Training on augumented user 127714 19/50 current_auc = 1.0
User 127714 AUC after training: 1.0
User 127714 does not improve AUC. Reverting changes.
Training on augumented user 51647 20/50 current_auc = 1.0
User 51647 AUC after training: 1.0
User 51647 does not improve AUC. Reverting changes.
Training on augumented user 115853 21/50 current_auc = 1.0
User 115853 AUC after training: 1.0
User 115853 does not improve AUC. Reverting changes.
Training on augumented user 43399 22/50 current_auc = 1.0
User 43399 AUC after training: 1.0
User 43399 does not improve AUC. Reverting changes.
Training on augumented user 67423 23/50 current_auc = 1.0
User 67423 AUC after training: 1.0
User 67423 does not improve AUC. Reverting changes.
Training on augumented user 47691 24/50 current_auc = 1.0
User 47691 AUC after training: 1.0
User 47691 does not improve AUC. Reverting changes.
Training on augumented user 115099 25/50 current_auc = 1.0
User 115099 AUC after training: 1.0
User 115099 does not improve AUC. Reverting changes.
Training on augumented user 27868 26/50 current_auc = 1.0
User 27868 AUC after training: 1.0
User 27868 does not improve AUC. Reverting changes.
Training on augumented user 7715 27/50 current_auc = 1.0
User 7715 AUC after training: 1.0
User 7715 does not improve AUC. Reverting changes.
Training on augumented user 73545 28/50 current_auc = 1.0
User 73545 AUC after training: 1.0
User 73545 does not improve AUC. Reverting changes.
Training on augumented user 59539 29/50 current_auc = 1.0
User 59539 AUC after training: 1.0
User 59539 does not improve AUC. Reverting changes.
Training on augumented user 126201 30/50 current_auc = 1.0
User 126201 AUC after training: 1.0
User 126201 does not improve AUC. Reverting changes.
Training on augumented user 126398 31/50 current_auc = 1.0
User 126398 AUC after training: 1.0
User 126398 does not improve AUC. Reverting changes.
Training on augumented user 30576 32/50 current_auc = 1.0
User 30576 AUC after training: 1.0
User 30576 does not improve AUC. Reverting changes.
Training on augumented user 127062 33/50 current_auc = 1.0
User 127062 AUC after training: 1.0
User 127062 does not improve AUC. Reverting changes.
Training on augumented user 97001 34/50 current_auc = 1.0
User 97001 AUC after training: 1.0
User 97001 does not improve AUC. Reverting changes.
Training on augumented user 69236 35/50 current_auc = 1.0
User 69236 AUC after training: 1.0
User 69236 does not improve AUC. Reverting changes.
Training on augumented user 37256 36/50 current_auc = 1.0
User 37256 AUC after training: 1.0
User 37256 does not improve AUC. Reverting changes.
Training on augumented user 57768 37/50 current_auc = 1.0
User 57768 AUC after training: 1.0
User 57768 does not improve AUC. Reverting changes.
Training on augumented user 126148 38/50 current_auc = 1.0
User 126148 AUC after training: 1.0
User 126148 does not improve AUC. Reverting changes.
Training on augumented user 47431 39/50 current_auc = 1.0
User 47431 AUC after training: 1.0
User 47431 does not improve AUC. Reverting changes.
Training on augumented user 88407 40/50 current_auc = 1.0
User 88407 AUC after training: 1.0
User 88407 does not improve AUC. Reverting changes.
Training on augumented user 129837 41/50 current_auc = 1.0
User 129837 AUC after training: 1.0
User 129837 does not improve AUC. Reverting changes.
Training on augumented user 76884 42/50 current_auc = 1.0
User 76884 AUC after training: 1.0
User 76884 does not improve AUC. Reverting changes.
Training on augumented user 118699 43/50 current_auc = 1.0
User 118699 AUC after training: 1.0
User 118699 does not improve AUC. Reverting changes.
Training on augumented user 96389 44/50 current_auc = 1.0
User 96389 AUC after training: 1.0
User 96389 does not improve AUC. Reverting changes.
Training on augumented user 69020 45/50 current_auc = 1.0
User 69020 AUC after training: 1.0
User 69020 does not improve AUC. Reverting changes.
Training on augumented user 84300 46/50 current_auc = 1.0
User 84300 AUC after training: 1.0
User 84300 does not improve AUC. Reverting changes.
Training on augumented user 4787 47/50 current_auc = 1.0
User 4787 AUC after training: 1.0
User 4787 does not improve AUC. Reverting changes.
Training on augumented user 5486 48/50 current_auc = 1.0
User 5486 AUC after training: 1.0
User 5486 does not improve AUC. Reverting changes.
Training on augumented user 69433 49/50 current_auc = 1.0
User 69433 AUC after training: 1.0
User 69433 does not improve AUC. Reverting changes.
[2024-12-02 18:07:24.590649] start test user 28285 50/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:24.996982] start test user 28285 50/568 recall augumented users by random, augumented_users = [21755, 133949, 112625, 63089, 112468, 66865, 111918, 51113, 131205, 23889, 40489, 111182, 67055, 100050, 99487, 96352, 88164, 116678, 63911, 94359, 57577, 63561, 12471, 78790, 49561, 8942, 52382, 69471, 48206, 79040, 107760, 31595, 62888, 87538, 65213, 78491, 31721, 40262, 120882, 83759, 4766, 44244, 49764, 43741, 105646, 13138, 34345, 93051, 104530, 1394]
[2024-12-02 18:07:25.011932] user = 28285 Cloud 50/568
[2024-12-02 18:07:25.022154] user = 28285 Local 50/568
[2024-12-02 18:07:25.059854] user = 28285 Local+ 50/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:28.040352] user = 28285 MPDA- 50/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9242424242424242
Training on augumented user 21755 0/50 current_auc = 0.9242424242424242
User 21755 AUC after training: 0.9242424242424242
User 21755 does not improve AUC. Reverting changes.
Training on augumented user 133949 1/50 current_auc = 0.9242424242424242
User 133949 AUC after training: 0.9242424242424242
User 133949 does not improve AUC. Reverting changes.
Training on augumented user 112625 2/50 current_auc = 0.9242424242424242
User 112625 AUC after training: 0.9242424242424242
User 112625 does not improve AUC. Reverting changes.
Training on augumented user 63089 3/50 current_auc = 0.9242424242424242
User 63089 AUC after training: 0.9242424242424242
User 63089 does not improve AUC. Reverting changes.
Training on augumented user 112468 4/50 current_auc = 0.9242424242424242
User 112468 AUC after training: 0.9292929292929293
User 112468 improves AUC. Keeping the model.
Training on augumented user 66865 5/50 current_auc = 0.9292929292929293
User 66865 AUC after training: 0.9292929292929293
User 66865 does not improve AUC. Reverting changes.
Training on augumented user 111918 6/50 current_auc = 0.9292929292929293
User 111918 AUC after training: 0.9292929292929293
User 111918 does not improve AUC. Reverting changes.
Training on augumented user 51113 7/50 current_auc = 0.9292929292929293
User 51113 AUC after training: 0.9242424242424242
User 51113 does not improve AUC. Reverting changes.
Training on augumented user 131205 8/50 current_auc = 0.9292929292929293
User 131205 AUC after training: 0.9292929292929293
User 131205 does not improve AUC. Reverting changes.
Training on augumented user 23889 9/50 current_auc = 0.9292929292929293
User 23889 AUC after training: 0.9292929292929293
User 23889 does not improve AUC. Reverting changes.
Training on augumented user 40489 10/50 current_auc = 0.9292929292929293
User 40489 AUC after training: 0.9292929292929293
User 40489 does not improve AUC. Reverting changes.
Training on augumented user 111182 11/50 current_auc = 0.9292929292929293
User 111182 AUC after training: 0.9292929292929293
User 111182 does not improve AUC. Reverting changes.
Training on augumented user 67055 12/50 current_auc = 0.9292929292929293
User 67055 AUC after training: 0.9242424242424242
User 67055 does not improve AUC. Reverting changes.
Training on augumented user 100050 13/50 current_auc = 0.9292929292929293
User 100050 AUC after training: 0.9292929292929293
User 100050 does not improve AUC. Reverting changes.
Training on augumented user 99487 14/50 current_auc = 0.9292929292929293
User 99487 AUC after training: 0.9292929292929293
User 99487 does not improve AUC. Reverting changes.
Training on augumented user 96352 15/50 current_auc = 0.9292929292929293
User 96352 AUC after training: 0.9292929292929293
User 96352 does not improve AUC. Reverting changes.
Training on augumented user 88164 16/50 current_auc = 0.9292929292929293
User 88164 AUC after training: 0.9292929292929293
User 88164 does not improve AUC. Reverting changes.
Training on augumented user 116678 17/50 current_auc = 0.9292929292929293
User 116678 AUC after training: 0.9292929292929293
User 116678 does not improve AUC. Reverting changes.
Training on augumented user 63911 18/50 current_auc = 0.9292929292929293
User 63911 AUC after training: 0.9292929292929293
User 63911 does not improve AUC. Reverting changes.
Training on augumented user 94359 19/50 current_auc = 0.9292929292929293
User 94359 AUC after training: 0.9292929292929293
User 94359 does not improve AUC. Reverting changes.
Training on augumented user 57577 20/50 current_auc = 0.9292929292929293
User 57577 AUC after training: 0.9242424242424242
User 57577 does not improve AUC. Reverting changes.
Training on augumented user 63561 21/50 current_auc = 0.9292929292929293
User 63561 AUC after training: 0.9292929292929293
User 63561 does not improve AUC. Reverting changes.
Training on augumented user 12471 22/50 current_auc = 0.9292929292929293
User 12471 AUC after training: 0.9292929292929293
User 12471 does not improve AUC. Reverting changes.
Training on augumented user 78790 23/50 current_auc = 0.9292929292929293
User 78790 AUC after training: 0.9292929292929293
User 78790 does not improve AUC. Reverting changes.
Training on augumented user 49561 24/50 current_auc = 0.9292929292929293
User 49561 AUC after training: 0.9292929292929293
User 49561 does not improve AUC. Reverting changes.
Training on augumented user 8942 25/50 current_auc = 0.9292929292929293
User 8942 AUC after training: 0.9292929292929293
User 8942 does not improve AUC. Reverting changes.
Training on augumented user 52382 26/50 current_auc = 0.9292929292929293
User 52382 AUC after training: 0.9242424242424242
User 52382 does not improve AUC. Reverting changes.
Training on augumented user 69471 27/50 current_auc = 0.9292929292929293
User 69471 AUC after training: 0.9292929292929293
User 69471 does not improve AUC. Reverting changes.
Training on augumented user 48206 28/50 current_auc = 0.9292929292929293
User 48206 AUC after training: 0.9242424242424242
User 48206 does not improve AUC. Reverting changes.
Training on augumented user 79040 29/50 current_auc = 0.9292929292929293
User 79040 AUC after training: 0.9292929292929293
User 79040 does not improve AUC. Reverting changes.
Training on augumented user 107760 30/50 current_auc = 0.9292929292929293
User 107760 AUC after training: 0.9292929292929293
User 107760 does not improve AUC. Reverting changes.
Training on augumented user 31595 31/50 current_auc = 0.9292929292929293
User 31595 AUC after training: 0.9292929292929293
User 31595 does not improve AUC. Reverting changes.
Training on augumented user 62888 32/50 current_auc = 0.9292929292929293
User 62888 AUC after training: 0.9292929292929293
User 62888 does not improve AUC. Reverting changes.
Training on augumented user 87538 33/50 current_auc = 0.9292929292929293
User 87538 AUC after training: 0.9292929292929293
User 87538 does not improve AUC. Reverting changes.
Training on augumented user 65213 34/50 current_auc = 0.9292929292929293
User 65213 AUC after training: 0.9292929292929293
User 65213 does not improve AUC. Reverting changes.
Training on augumented user 78491 35/50 current_auc = 0.9292929292929293
User 78491 AUC after training: 0.9292929292929293
User 78491 does not improve AUC. Reverting changes.
Training on augumented user 31721 36/50 current_auc = 0.9292929292929293
User 31721 AUC after training: 0.9292929292929293
User 31721 does not improve AUC. Reverting changes.
Training on augumented user 40262 37/50 current_auc = 0.9292929292929293
User 40262 AUC after training: 0.9292929292929293
User 40262 does not improve AUC. Reverting changes.
Training on augumented user 120882 38/50 current_auc = 0.9292929292929293
User 120882 AUC after training: 0.9292929292929293
User 120882 does not improve AUC. Reverting changes.
Training on augumented user 83759 39/50 current_auc = 0.9292929292929293
User 83759 AUC after training: 0.9292929292929293
User 83759 does not improve AUC. Reverting changes.
Training on augumented user 4766 40/50 current_auc = 0.9292929292929293
User 4766 AUC after training: 0.9292929292929293
User 4766 does not improve AUC. Reverting changes.
Training on augumented user 44244 41/50 current_auc = 0.9292929292929293
User 44244 AUC after training: 0.9292929292929293
User 44244 does not improve AUC. Reverting changes.
Training on augumented user 49764 42/50 current_auc = 0.9292929292929293
User 49764 AUC after training: 0.9242424242424242
User 49764 does not improve AUC. Reverting changes.
Training on augumented user 43741 43/50 current_auc = 0.9292929292929293
User 43741 AUC after training: 0.9292929292929293
User 43741 does not improve AUC. Reverting changes.
Training on augumented user 105646 44/50 current_auc = 0.9292929292929293
User 105646 AUC after training: 0.9292929292929293
User 105646 does not improve AUC. Reverting changes.
Training on augumented user 13138 45/50 current_auc = 0.9292929292929293
User 13138 AUC after training: 0.9292929292929293
User 13138 does not improve AUC. Reverting changes.
Training on augumented user 34345 46/50 current_auc = 0.9292929292929293
User 34345 AUC after training: 0.9292929292929293
User 34345 does not improve AUC. Reverting changes.
Training on augumented user 93051 47/50 current_auc = 0.9292929292929293
User 93051 AUC after training: 0.9292929292929293
User 93051 does not improve AUC. Reverting changes.
Training on augumented user 104530 48/50 current_auc = 0.9292929292929293
User 104530 AUC after training: 0.9292929292929293
User 104530 does not improve AUC. Reverting changes.
Training on augumented user 1394 49/50 current_auc = 0.9292929292929293
User 1394 AUC after training: 0.9292929292929293
User 1394 does not improve AUC. Reverting changes.
[2024-12-02 18:07:53.166526] start test user 28340 51/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:53.397600] start test user 28340 51/568 recall augumented users by random, augumented_users = [127766, 113638, 56439, 98323, 13049, 53218, 72147, 12700, 49605, 14542, 86670, 60779, 107244, 75951, 33253, 108855, 70762, 78204, 71840, 44936, 18283, 77820, 129019, 123840, 59884, 120626, 132658, 29609, 132803, 122195, 47699, 15198, 37150, 228, 58967, 121149, 106529, 13865, 23157, 35108, 27846, 126408, 133334, 126138, 53363, 44109, 116947, 116945, 88766, 28005]
[2024-12-02 18:07:53.405109] user = 28340 Cloud 51/568
[2024-12-02 18:07:53.410087] user = 28340 Local 51/568
[2024-12-02 18:07:53.506427] user = 28340 Local+ 51/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:54.216862] user = 28340 MPDA- 51/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666666
Training on augumented user 127766 0/50 current_auc = 0.6666666666666666
User 127766 AUC after training: 0.6666666666666666
User 127766 does not improve AUC. Reverting changes.
Training on augumented user 113638 1/50 current_auc = 0.6666666666666666
User 113638 AUC after training: 0.6666666666666666
User 113638 does not improve AUC. Reverting changes.
Training on augumented user 56439 2/50 current_auc = 0.6666666666666666
User 56439 AUC after training: 0.6666666666666666
User 56439 does not improve AUC. Reverting changes.
Training on augumented user 98323 3/50 current_auc = 0.6666666666666666
User 98323 AUC after training: 0.6666666666666666
User 98323 does not improve AUC. Reverting changes.
Training on augumented user 13049 4/50 current_auc = 0.6666666666666666
User 13049 AUC after training: 0.6666666666666666
User 13049 does not improve AUC. Reverting changes.
Training on augumented user 53218 5/50 current_auc = 0.6666666666666666
User 53218 AUC after training: 0.6666666666666666
User 53218 does not improve AUC. Reverting changes.
Training on augumented user 72147 6/50 current_auc = 0.6666666666666666
User 72147 AUC after training: 0.6666666666666666
User 72147 does not improve AUC. Reverting changes.
Training on augumented user 12700 7/50 current_auc = 0.6666666666666666
User 12700 AUC after training: 0.6825396825396826
User 12700 improves AUC. Keeping the model.
Training on augumented user 49605 8/50 current_auc = 0.6825396825396826
User 49605 AUC after training: 0.6825396825396826
User 49605 does not improve AUC. Reverting changes.
Training on augumented user 14542 9/50 current_auc = 0.6825396825396826
User 14542 AUC after training: 0.6825396825396826
User 14542 does not improve AUC. Reverting changes.
Training on augumented user 86670 10/50 current_auc = 0.6825396825396826
User 86670 AUC after training: 0.6825396825396826
User 86670 does not improve AUC. Reverting changes.
Training on augumented user 60779 11/50 current_auc = 0.6825396825396826
User 60779 AUC after training: 0.6825396825396826
User 60779 does not improve AUC. Reverting changes.
Training on augumented user 107244 12/50 current_auc = 0.6825396825396826
User 107244 AUC after training: 0.6825396825396826
User 107244 does not improve AUC. Reverting changes.
Training on augumented user 75951 13/50 current_auc = 0.6825396825396826
User 75951 AUC after training: 0.6825396825396826
User 75951 does not improve AUC. Reverting changes.
Training on augumented user 33253 14/50 current_auc = 0.6825396825396826
User 33253 AUC after training: 0.6825396825396826
User 33253 does not improve AUC. Reverting changes.
Training on augumented user 108855 15/50 current_auc = 0.6825396825396826
User 108855 AUC after training: 0.6825396825396826
User 108855 does not improve AUC. Reverting changes.
Training on augumented user 70762 16/50 current_auc = 0.6825396825396826
User 70762 AUC after training: 0.6825396825396826
User 70762 does not improve AUC. Reverting changes.
Training on augumented user 78204 17/50 current_auc = 0.6825396825396826
User 78204 AUC after training: 0.6825396825396826
User 78204 does not improve AUC. Reverting changes.
Training on augumented user 71840 18/50 current_auc = 0.6825396825396826
User 71840 AUC after training: 0.6825396825396826
User 71840 does not improve AUC. Reverting changes.
Training on augumented user 44936 19/50 current_auc = 0.6825396825396826
User 44936 AUC after training: 0.6825396825396826
User 44936 does not improve AUC. Reverting changes.
Training on augumented user 18283 20/50 current_auc = 0.6825396825396826
User 18283 AUC after training: 0.6825396825396826
User 18283 does not improve AUC. Reverting changes.
Training on augumented user 77820 21/50 current_auc = 0.6825396825396826
User 77820 AUC after training: 0.6825396825396826
User 77820 does not improve AUC. Reverting changes.
Training on augumented user 129019 22/50 current_auc = 0.6825396825396826
User 129019 AUC after training: 0.6825396825396826
User 129019 does not improve AUC. Reverting changes.
Training on augumented user 123840 23/50 current_auc = 0.6825396825396826
User 123840 AUC after training: 0.6825396825396826
User 123840 does not improve AUC. Reverting changes.
Training on augumented user 59884 24/50 current_auc = 0.6825396825396826
User 59884 AUC after training: 0.6825396825396826
User 59884 does not improve AUC. Reverting changes.
Training on augumented user 120626 25/50 current_auc = 0.6825396825396826
User 120626 AUC after training: 0.6825396825396826
User 120626 does not improve AUC. Reverting changes.
Training on augumented user 132658 26/50 current_auc = 0.6825396825396826
User 132658 AUC after training: 0.6825396825396826
User 132658 does not improve AUC. Reverting changes.
Training on augumented user 29609 27/50 current_auc = 0.6825396825396826
User 29609 AUC after training: 0.6825396825396826
User 29609 does not improve AUC. Reverting changes.
Training on augumented user 132803 28/50 current_auc = 0.6825396825396826
User 132803 AUC after training: 0.6825396825396826
User 132803 does not improve AUC. Reverting changes.
Training on augumented user 122195 29/50 current_auc = 0.6825396825396826
User 122195 AUC after training: 0.6825396825396826
User 122195 does not improve AUC. Reverting changes.
Training on augumented user 47699 30/50 current_auc = 0.6825396825396826
User 47699 AUC after training: 0.6825396825396826
User 47699 does not improve AUC. Reverting changes.
Training on augumented user 15198 31/50 current_auc = 0.6825396825396826
User 15198 AUC after training: 0.6825396825396826
User 15198 does not improve AUC. Reverting changes.
Training on augumented user 37150 32/50 current_auc = 0.6825396825396826
User 37150 AUC after training: 0.6825396825396826
User 37150 does not improve AUC. Reverting changes.
Training on augumented user 228 33/50 current_auc = 0.6825396825396826
User 228 AUC after training: 0.6825396825396826
User 228 does not improve AUC. Reverting changes.
Training on augumented user 58967 34/50 current_auc = 0.6825396825396826
User 58967 AUC after training: 0.6825396825396826
User 58967 does not improve AUC. Reverting changes.
Training on augumented user 121149 35/50 current_auc = 0.6825396825396826
User 121149 AUC after training: 0.6825396825396826
User 121149 does not improve AUC. Reverting changes.
Training on augumented user 106529 36/50 current_auc = 0.6825396825396826
User 106529 AUC after training: 0.6825396825396826
User 106529 does not improve AUC. Reverting changes.
Training on augumented user 13865 37/50 current_auc = 0.6825396825396826
User 13865 AUC after training: 0.6825396825396826
User 13865 does not improve AUC. Reverting changes.
Training on augumented user 23157 38/50 current_auc = 0.6825396825396826
User 23157 AUC after training: 0.6825396825396826
User 23157 does not improve AUC. Reverting changes.
Training on augumented user 35108 39/50 current_auc = 0.6825396825396826
User 35108 AUC after training: 0.6825396825396826
User 35108 does not improve AUC. Reverting changes.
Training on augumented user 27846 40/50 current_auc = 0.6825396825396826
User 27846 AUC after training: 0.6825396825396826
User 27846 does not improve AUC. Reverting changes.
Training on augumented user 126408 41/50 current_auc = 0.6825396825396826
User 126408 AUC after training: 0.6825396825396826
User 126408 does not improve AUC. Reverting changes.
Training on augumented user 133334 42/50 current_auc = 0.6825396825396826
User 133334 AUC after training: 0.6666666666666666
User 133334 does not improve AUC. Reverting changes.
Training on augumented user 126138 43/50 current_auc = 0.6825396825396826
User 126138 AUC after training: 0.6825396825396826
User 126138 does not improve AUC. Reverting changes.
Training on augumented user 53363 44/50 current_auc = 0.6825396825396826
User 53363 AUC after training: 0.6825396825396826
User 53363 does not improve AUC. Reverting changes.
Training on augumented user 44109 45/50 current_auc = 0.6825396825396826
User 44109 AUC after training: 0.6825396825396826
User 44109 does not improve AUC. Reverting changes.
Training on augumented user 116947 46/50 current_auc = 0.6825396825396826
User 116947 AUC after training: 0.6825396825396826
User 116947 does not improve AUC. Reverting changes.
Training on augumented user 116945 47/50 current_auc = 0.6825396825396826
User 116945 AUC after training: 0.6825396825396826
User 116945 does not improve AUC. Reverting changes.
Training on augumented user 88766 48/50 current_auc = 0.6825396825396826
User 88766 AUC after training: 0.6825396825396826
User 88766 does not improve AUC. Reverting changes.
Training on augumented user 28005 49/50 current_auc = 0.6825396825396826
User 28005 AUC after training: 0.6825396825396826
User 28005 does not improve AUC. Reverting changes.
[2024-12-02 18:08:20.024849] start test user 28357 52/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:20.843428] start test user 28357 52/568 recall augumented users by random, augumented_users = [66333, 61491, 43031, 133987, 59408, 99855, 88769, 112699, 54976, 92760, 52050, 88238, 94383, 84166, 71572, 75180, 107358, 41199, 118552, 107978, 1867, 121819, 22015, 89959, 128751, 55515, 28134, 131818, 76326, 45424, 68617, 86788, 62456, 115986, 104403, 115748, 132016, 75536, 93788, 98189, 26448, 2563, 55547, 28232, 30552, 90203, 74916, 51799, 136676, 85034]
[2024-12-02 18:08:20.871486] user = 28357 Cloud 52/568
[2024-12-02 18:08:20.883575] user = 28357 Local 52/568
[2024-12-02 18:08:20.991931] user = 28357 Local+ 52/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:23.367428] user = 28357 MPDA- 52/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.625
Training on augumented user 66333 0/50 current_auc = 0.625
User 66333 AUC after training: 0.625
User 66333 does not improve AUC. Reverting changes.
Training on augumented user 61491 1/50 current_auc = 0.625
User 61491 AUC after training: 0.625
User 61491 does not improve AUC. Reverting changes.
Training on augumented user 43031 2/50 current_auc = 0.625
User 43031 AUC after training: 0.625
User 43031 does not improve AUC. Reverting changes.
Training on augumented user 133987 3/50 current_auc = 0.625
User 133987 AUC after training: 0.625
User 133987 does not improve AUC. Reverting changes.
Training on augumented user 59408 4/50 current_auc = 0.625
User 59408 AUC after training: 0.625
User 59408 does not improve AUC. Reverting changes.
Training on augumented user 99855 5/50 current_auc = 0.625
User 99855 AUC after training: 0.625
User 99855 does not improve AUC. Reverting changes.
Training on augumented user 88769 6/50 current_auc = 0.625
User 88769 AUC after training: 0.625
User 88769 does not improve AUC. Reverting changes.
Training on augumented user 112699 7/50 current_auc = 0.625
User 112699 AUC after training: 0.625
User 112699 does not improve AUC. Reverting changes.
Training on augumented user 54976 8/50 current_auc = 0.625
User 54976 AUC after training: 0.625
User 54976 does not improve AUC. Reverting changes.
Training on augumented user 92760 9/50 current_auc = 0.625
User 92760 AUC after training: 0.625
User 92760 does not improve AUC. Reverting changes.
Training on augumented user 52050 10/50 current_auc = 0.625
User 52050 AUC after training: 0.625
User 52050 does not improve AUC. Reverting changes.
Training on augumented user 88238 11/50 current_auc = 0.625
User 88238 AUC after training: 0.625
User 88238 does not improve AUC. Reverting changes.
Training on augumented user 94383 12/50 current_auc = 0.625
User 94383 AUC after training: 0.625
User 94383 does not improve AUC. Reverting changes.
Training on augumented user 84166 13/50 current_auc = 0.625
User 84166 AUC after training: 0.625
User 84166 does not improve AUC. Reverting changes.
Training on augumented user 71572 14/50 current_auc = 0.625
User 71572 AUC after training: 0.625
User 71572 does not improve AUC. Reverting changes.
Training on augumented user 75180 15/50 current_auc = 0.625
User 75180 AUC after training: 0.625
User 75180 does not improve AUC. Reverting changes.
Training on augumented user 107358 16/50 current_auc = 0.625
User 107358 AUC after training: 0.625
User 107358 does not improve AUC. Reverting changes.
Training on augumented user 41199 17/50 current_auc = 0.625
User 41199 AUC after training: 0.625
User 41199 does not improve AUC. Reverting changes.
Training on augumented user 118552 18/50 current_auc = 0.625
User 118552 AUC after training: 0.625
User 118552 does not improve AUC. Reverting changes.
Training on augumented user 107978 19/50 current_auc = 0.625
User 107978 AUC after training: 0.625
User 107978 does not improve AUC. Reverting changes.
Training on augumented user 1867 20/50 current_auc = 0.625
User 1867 AUC after training: 0.625
User 1867 does not improve AUC. Reverting changes.
Training on augumented user 121819 21/50 current_auc = 0.625
User 121819 AUC after training: 0.625
User 121819 does not improve AUC. Reverting changes.
Training on augumented user 22015 22/50 current_auc = 0.625
User 22015 AUC after training: 0.625
User 22015 does not improve AUC. Reverting changes.
Training on augumented user 89959 23/50 current_auc = 0.625
User 89959 AUC after training: 0.625
User 89959 does not improve AUC. Reverting changes.
Training on augumented user 128751 24/50 current_auc = 0.625
User 128751 AUC after training: 0.625
User 128751 does not improve AUC. Reverting changes.
Training on augumented user 55515 25/50 current_auc = 0.625
User 55515 AUC after training: 0.625
User 55515 does not improve AUC. Reverting changes.
Training on augumented user 28134 26/50 current_auc = 0.625
User 28134 AUC after training: 0.625
User 28134 does not improve AUC. Reverting changes.
Training on augumented user 131818 27/50 current_auc = 0.625
User 131818 AUC after training: 0.625
User 131818 does not improve AUC. Reverting changes.
Training on augumented user 76326 28/50 current_auc = 0.625
User 76326 AUC after training: 0.6428571428571428
User 76326 improves AUC. Keeping the model.
Training on augumented user 45424 29/50 current_auc = 0.6428571428571428
User 45424 AUC after training: 0.6428571428571428
User 45424 does not improve AUC. Reverting changes.
Training on augumented user 68617 30/50 current_auc = 0.6428571428571428
User 68617 AUC after training: 0.6428571428571428
User 68617 does not improve AUC. Reverting changes.
Training on augumented user 86788 31/50 current_auc = 0.6428571428571428
User 86788 AUC after training: 0.6428571428571428
User 86788 does not improve AUC. Reverting changes.
Training on augumented user 62456 32/50 current_auc = 0.6428571428571428
User 62456 AUC after training: 0.6428571428571428
User 62456 does not improve AUC. Reverting changes.
Training on augumented user 115986 33/50 current_auc = 0.6428571428571428
User 115986 AUC after training: 0.6428571428571428
User 115986 does not improve AUC. Reverting changes.
Training on augumented user 104403 34/50 current_auc = 0.6428571428571428
User 104403 AUC after training: 0.6428571428571428
User 104403 does not improve AUC. Reverting changes.
Training on augumented user 115748 35/50 current_auc = 0.6428571428571428
User 115748 AUC after training: 0.6428571428571428
User 115748 does not improve AUC. Reverting changes.
Training on augumented user 132016 36/50 current_auc = 0.6428571428571428
User 132016 AUC after training: 0.6428571428571428
User 132016 does not improve AUC. Reverting changes.
Training on augumented user 75536 37/50 current_auc = 0.6428571428571428
User 75536 AUC after training: 0.6428571428571428
User 75536 does not improve AUC. Reverting changes.
Training on augumented user 93788 38/50 current_auc = 0.6428571428571428
User 93788 AUC after training: 0.6428571428571428
User 93788 does not improve AUC. Reverting changes.
Training on augumented user 98189 39/50 current_auc = 0.6428571428571428
User 98189 AUC after training: 0.6428571428571428
User 98189 does not improve AUC. Reverting changes.
Training on augumented user 26448 40/50 current_auc = 0.6428571428571428
User 26448 AUC after training: 0.6428571428571428
User 26448 does not improve AUC. Reverting changes.
Training on augumented user 2563 41/50 current_auc = 0.6428571428571428
User 2563 AUC after training: 0.6428571428571428
User 2563 does not improve AUC. Reverting changes.
Training on augumented user 55547 42/50 current_auc = 0.6428571428571428
User 55547 AUC after training: 0.6428571428571428
User 55547 does not improve AUC. Reverting changes.
Training on augumented user 28232 43/50 current_auc = 0.6428571428571428
User 28232 AUC after training: 0.6428571428571428
User 28232 does not improve AUC. Reverting changes.
Training on augumented user 30552 44/50 current_auc = 0.6428571428571428
User 30552 AUC after training: 0.6428571428571428
User 30552 does not improve AUC. Reverting changes.
Training on augumented user 90203 45/50 current_auc = 0.6428571428571428
User 90203 AUC after training: 0.6428571428571428
User 90203 does not improve AUC. Reverting changes.
Training on augumented user 74916 46/50 current_auc = 0.6428571428571428
User 74916 AUC after training: 0.6428571428571428
User 74916 does not improve AUC. Reverting changes.
Training on augumented user 51799 47/50 current_auc = 0.6428571428571428
User 51799 AUC after training: 0.6428571428571428
User 51799 does not improve AUC. Reverting changes.
Training on augumented user 136676 48/50 current_auc = 0.6428571428571428
User 136676 AUC after training: 0.6428571428571428
User 136676 does not improve AUC. Reverting changes.
Training on augumented user 85034 49/50 current_auc = 0.6428571428571428
User 85034 AUC after training: 0.6428571428571428
User 85034 does not improve AUC. Reverting changes.
[2024-12-02 18:08:54.071505] start test user 28360 53/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:54.740060] start test user 28360 53/568 recall augumented users by random, augumented_users = [19799, 115744, 39951, 37126, 121955, 113367, 61159, 30157, 47028, 21296, 54774, 62414, 83105, 13486, 122964, 97615, 98566, 9833, 38903, 107578, 133363, 28422, 125091, 78298, 118302, 119365, 74379, 118467, 27009, 33111, 54689, 102503, 56650, 126407, 122164, 24387, 45936, 30326, 118389, 57673, 42784, 60641, 41864, 87262, 106655, 86759, 79347, 108156, 120707, 124667]
[2024-12-02 18:08:54.768193] user = 28360 Cloud 53/568
[2024-12-02 18:08:54.790643] user = 28360 Local 53/568
[2024-12-02 18:08:54.893026] user = 28360 Local+ 53/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:57.672532] user = 28360 MPDA- 53/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9166666666666666
Training on augumented user 19799 0/50 current_auc = 0.9166666666666666
User 19799 AUC after training: 0.9166666666666666
User 19799 does not improve AUC. Reverting changes.
Training on augumented user 115744 1/50 current_auc = 0.9166666666666666
User 115744 AUC after training: 0.9166666666666666
User 115744 does not improve AUC. Reverting changes.
Training on augumented user 39951 2/50 current_auc = 0.9166666666666666
User 39951 AUC after training: 0.9166666666666666
User 39951 does not improve AUC. Reverting changes.
Training on augumented user 37126 3/50 current_auc = 0.9166666666666666
User 37126 AUC after training: 0.9166666666666666
User 37126 does not improve AUC. Reverting changes.
Training on augumented user 121955 4/50 current_auc = 0.9166666666666666
User 121955 AUC after training: 0.9166666666666666
User 121955 does not improve AUC. Reverting changes.
Training on augumented user 113367 5/50 current_auc = 0.9166666666666666
User 113367 AUC after training: 0.9166666666666666
User 113367 does not improve AUC. Reverting changes.
Training on augumented user 61159 6/50 current_auc = 0.9166666666666666
User 61159 AUC after training: 0.9166666666666666
User 61159 does not improve AUC. Reverting changes.
Training on augumented user 30157 7/50 current_auc = 0.9166666666666666
User 30157 AUC after training: 0.9166666666666666
User 30157 does not improve AUC. Reverting changes.
Training on augumented user 47028 8/50 current_auc = 0.9166666666666666
User 47028 AUC after training: 0.9166666666666666
User 47028 does not improve AUC. Reverting changes.
Training on augumented user 21296 9/50 current_auc = 0.9166666666666666
User 21296 AUC after training: 0.9166666666666666
User 21296 does not improve AUC. Reverting changes.
Training on augumented user 54774 10/50 current_auc = 0.9166666666666666
User 54774 AUC after training: 0.9166666666666666
User 54774 does not improve AUC. Reverting changes.
Training on augumented user 62414 11/50 current_auc = 0.9166666666666666
User 62414 AUC after training: 0.9166666666666666
User 62414 does not improve AUC. Reverting changes.
Training on augumented user 83105 12/50 current_auc = 0.9166666666666666
User 83105 AUC after training: 0.9166666666666666
User 83105 does not improve AUC. Reverting changes.
Training on augumented user 13486 13/50 current_auc = 0.9166666666666666
User 13486 AUC after training: 0.9166666666666666
User 13486 does not improve AUC. Reverting changes.
Training on augumented user 122964 14/50 current_auc = 0.9166666666666666
User 122964 AUC after training: 0.9166666666666666
User 122964 does not improve AUC. Reverting changes.
Training on augumented user 97615 15/50 current_auc = 0.9166666666666666
User 97615 AUC after training: 0.9166666666666666
User 97615 does not improve AUC. Reverting changes.
Training on augumented user 98566 16/50 current_auc = 0.9166666666666666
User 98566 AUC after training: 0.9166666666666666
User 98566 does not improve AUC. Reverting changes.
Training on augumented user 9833 17/50 current_auc = 0.9166666666666666
User 9833 AUC after training: 0.9166666666666666
User 9833 does not improve AUC. Reverting changes.
Training on augumented user 38903 18/50 current_auc = 0.9166666666666666
User 38903 AUC after training: 0.9166666666666666
User 38903 does not improve AUC. Reverting changes.
Training on augumented user 107578 19/50 current_auc = 0.9166666666666666
User 107578 AUC after training: 0.9166666666666666
User 107578 does not improve AUC. Reverting changes.
Training on augumented user 133363 20/50 current_auc = 0.9166666666666666
User 133363 AUC after training: 0.9166666666666666
User 133363 does not improve AUC. Reverting changes.
Training on augumented user 28422 21/50 current_auc = 0.9166666666666666
User 28422 AUC after training: 0.9166666666666666
User 28422 does not improve AUC. Reverting changes.
Training on augumented user 125091 22/50 current_auc = 0.9166666666666666
User 125091 AUC after training: 0.9166666666666666
User 125091 does not improve AUC. Reverting changes.
Training on augumented user 78298 23/50 current_auc = 0.9166666666666666
User 78298 AUC after training: 0.9166666666666666
User 78298 does not improve AUC. Reverting changes.
Training on augumented user 118302 24/50 current_auc = 0.9166666666666666
User 118302 AUC after training: 0.9166666666666666
User 118302 does not improve AUC. Reverting changes.
Training on augumented user 119365 25/50 current_auc = 0.9166666666666666
User 119365 AUC after training: 0.9166666666666666
User 119365 does not improve AUC. Reverting changes.
Training on augumented user 74379 26/50 current_auc = 0.9166666666666666
User 74379 AUC after training: 0.9166666666666666
User 74379 does not improve AUC. Reverting changes.
Training on augumented user 118467 27/50 current_auc = 0.9166666666666666
User 118467 AUC after training: 0.9166666666666666
User 118467 does not improve AUC. Reverting changes.
Training on augumented user 27009 28/50 current_auc = 0.9166666666666666
User 27009 AUC after training: 0.9166666666666666
User 27009 does not improve AUC. Reverting changes.
Training on augumented user 33111 29/50 current_auc = 0.9166666666666666
User 33111 AUC after training: 0.9166666666666666
User 33111 does not improve AUC. Reverting changes.
Training on augumented user 54689 30/50 current_auc = 0.9166666666666666
User 54689 AUC after training: 0.9166666666666666
User 54689 does not improve AUC. Reverting changes.
Training on augumented user 102503 31/50 current_auc = 0.9166666666666666
User 102503 AUC after training: 0.9166666666666666
User 102503 does not improve AUC. Reverting changes.
Training on augumented user 56650 32/50 current_auc = 0.9166666666666666
User 56650 AUC after training: 0.9166666666666666
User 56650 does not improve AUC. Reverting changes.
Training on augumented user 126407 33/50 current_auc = 0.9166666666666666
User 126407 AUC after training: 0.9166666666666666
User 126407 does not improve AUC. Reverting changes.
Training on augumented user 122164 34/50 current_auc = 0.9166666666666666
User 122164 AUC after training: 0.9166666666666666
User 122164 does not improve AUC. Reverting changes.
Training on augumented user 24387 35/50 current_auc = 0.9166666666666666
User 24387 AUC after training: 0.9166666666666666
User 24387 does not improve AUC. Reverting changes.
Training on augumented user 45936 36/50 current_auc = 0.9166666666666666
User 45936 AUC after training: 0.9166666666666666
User 45936 does not improve AUC. Reverting changes.
Training on augumented user 30326 37/50 current_auc = 0.9166666666666666
User 30326 AUC after training: 0.9166666666666666
User 30326 does not improve AUC. Reverting changes.
Training on augumented user 118389 38/50 current_auc = 0.9166666666666666
User 118389 AUC after training: 0.9166666666666666
User 118389 does not improve AUC. Reverting changes.
Training on augumented user 57673 39/50 current_auc = 0.9166666666666666
User 57673 AUC after training: 0.9166666666666666
User 57673 does not improve AUC. Reverting changes.
Training on augumented user 42784 40/50 current_auc = 0.9166666666666666
User 42784 AUC after training: 0.9166666666666666
User 42784 does not improve AUC. Reverting changes.
Training on augumented user 60641 41/50 current_auc = 0.9166666666666666
User 60641 AUC after training: 0.9166666666666666
User 60641 does not improve AUC. Reverting changes.
Training on augumented user 41864 42/50 current_auc = 0.9166666666666666
User 41864 AUC after training: 0.9166666666666666
User 41864 does not improve AUC. Reverting changes.
Training on augumented user 87262 43/50 current_auc = 0.9166666666666666
User 87262 AUC after training: 0.9166666666666666
User 87262 does not improve AUC. Reverting changes.
Training on augumented user 106655 44/50 current_auc = 0.9166666666666666
User 106655 AUC after training: 0.9166666666666666
User 106655 does not improve AUC. Reverting changes.
Training on augumented user 86759 45/50 current_auc = 0.9166666666666666
User 86759 AUC after training: 0.9166666666666666
User 86759 does not improve AUC. Reverting changes.
Training on augumented user 79347 46/50 current_auc = 0.9166666666666666
User 79347 AUC after training: 0.9166666666666666
User 79347 does not improve AUC. Reverting changes.
Training on augumented user 108156 47/50 current_auc = 0.9166666666666666
User 108156 AUC after training: 0.9166666666666666
User 108156 does not improve AUC. Reverting changes.
Training on augumented user 120707 48/50 current_auc = 0.9166666666666666
User 120707 AUC after training: 0.9166666666666666
User 120707 does not improve AUC. Reverting changes.
Training on augumented user 124667 49/50 current_auc = 0.9166666666666666
User 124667 AUC after training: 0.9166666666666666
User 124667 does not improve AUC. Reverting changes.
[2024-12-02 18:09:29.185393] start test user 28381 54/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:29.980655] start test user 28381 54/568 recall augumented users by random, augumented_users = [77143, 76775, 118254, 136116, 138442, 61275, 89866, 12459, 120663, 26621, 44387, 18618, 11428, 29351, 91494, 113769, 104962, 43462, 7036, 4019, 62611, 119457, 51753, 99840, 77926, 11220, 36404, 19500, 129522, 56109, 59298, 15436, 116458, 18951, 111844, 46807, 119200, 74185, 60762, 6703, 61805, 33862, 79881, 100172, 30172, 134912, 10108, 104465, 16297, 49364]
[2024-12-02 18:09:29.996605] user = 28381 Cloud 54/568
[2024-12-02 18:09:30.025400] user = 28381 Local 54/568
[2024-12-02 18:09:30.089425] user = 28381 Local+ 54/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:32.945195] user = 28381 MPDA- 54/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6754496840058337
Training on augumented user 77143 0/50 current_auc = 0.6754496840058337
User 77143 AUC after training: 0.6754496840058337
User 77143 does not improve AUC. Reverting changes.
Training on augumented user 76775 1/50 current_auc = 0.6754496840058337
User 76775 AUC after training: 0.6755955274671852
User 76775 improves AUC. Keeping the model.
Training on augumented user 118254 2/50 current_auc = 0.6755955274671852
User 118254 AUC after training: 0.6759844433641226
User 118254 improves AUC. Keeping the model.
Training on augumented user 136116 3/50 current_auc = 0.6759844433641226
User 136116 AUC after training: 0.6754010695187166
User 136116 does not improve AUC. Reverting changes.
Training on augumented user 138442 4/50 current_auc = 0.6759844433641226
User 138442 AUC after training: 0.6760330578512397
User 138442 improves AUC. Keeping the model.
Training on augumented user 61275 5/50 current_auc = 0.6760330578512397
User 61275 AUC after training: 0.676470588235294
User 61275 improves AUC. Keeping the model.
Training on augumented user 89866 6/50 current_auc = 0.676470588235294
User 89866 AUC after training: 0.6763247447739427
User 89866 does not improve AUC. Reverting changes.
Training on augumented user 12459 7/50 current_auc = 0.676470588235294
User 12459 AUC after training: 0.676470588235294
User 12459 does not improve AUC. Reverting changes.
Training on augumented user 120663 8/50 current_auc = 0.676470588235294
User 120663 AUC after training: 0.6760816723383568
User 120663 does not improve AUC. Reverting changes.
Training on augumented user 26621 9/50 current_auc = 0.676470588235294
User 26621 AUC after training: 0.6757899854156537
User 26621 does not improve AUC. Reverting changes.
Training on augumented user 44387 10/50 current_auc = 0.676470588235294
User 44387 AUC after training: 0.6763733592610598
User 44387 does not improve AUC. Reverting changes.
Training on augumented user 18618 11/50 current_auc = 0.676470588235294
User 18618 AUC after training: 0.6765192027224112
User 18618 improves AUC. Keeping the model.
Training on augumented user 11428 12/50 current_auc = 0.6765192027224112
User 11428 AUC after training: 0.6759844433641224
User 11428 does not improve AUC. Reverting changes.
Training on augumented user 29351 13/50 current_auc = 0.6765192027224112
User 29351 AUC after training: 0.6768108896451143
User 29351 improves AUC. Keeping the model.
Training on augumented user 91494 14/50 current_auc = 0.6768108896451143
User 91494 AUC after training: 0.6765678172095284
User 91494 does not improve AUC. Reverting changes.
Training on augumented user 113769 15/50 current_auc = 0.6768108896451143
User 113769 AUC after training: 0.6760330578512397
User 113769 does not improve AUC. Reverting changes.
Training on augumented user 104962 16/50 current_auc = 0.6768108896451143
User 104962 AUC after training: 0.6763733592610598
User 104962 does not improve AUC. Reverting changes.
Training on augumented user 43462 17/50 current_auc = 0.6768108896451143
User 43462 AUC after training: 0.6768595041322313
User 43462 improves AUC. Keeping the model.
Training on augumented user 7036 18/50 current_auc = 0.6768595041322313
User 7036 AUC after training: 0.6762761302868254
User 7036 does not improve AUC. Reverting changes.
Training on augumented user 4019 19/50 current_auc = 0.6768595041322313
User 4019 AUC after training: 0.6765678172095284
User 4019 does not improve AUC. Reverting changes.
Training on augumented user 62611 20/50 current_auc = 0.6768595041322313
User 62611 AUC after training: 0.6756441419543023
User 62611 does not improve AUC. Reverting changes.
Training on augumented user 119457 21/50 current_auc = 0.6768595041322313
User 119457 AUC after training: 0.676130286825474
User 119457 does not improve AUC. Reverting changes.
Training on augumented user 51753 22/50 current_auc = 0.6768595041322313
User 51753 AUC after training: 0.6768108896451142
User 51753 does not improve AUC. Reverting changes.
Training on augumented user 99840 23/50 current_auc = 0.6768595041322313
User 99840 AUC after training: 0.6764705882352942
User 99840 does not improve AUC. Reverting changes.
Training on augumented user 77926 24/50 current_auc = 0.6768595041322313
User 77926 AUC after training: 0.6767136606708799
User 77926 does not improve AUC. Reverting changes.
Training on augumented user 11220 25/50 current_auc = 0.6768595041322313
User 11220 AUC after training: 0.6768595041322314
User 11220 improves AUC. Keeping the model.
Training on augumented user 36404 26/50 current_auc = 0.6768595041322314
User 36404 AUC after training: 0.6764219737481769
User 36404 does not improve AUC. Reverting changes.
Training on augumented user 19500 27/50 current_auc = 0.6768595041322314
User 19500 AUC after training: 0.6768595041322313
User 19500 does not improve AUC. Reverting changes.
Training on augumented user 129522 28/50 current_auc = 0.6768595041322314
User 129522 AUC after training: 0.6768595041322313
User 129522 does not improve AUC. Reverting changes.
Training on augumented user 56109 29/50 current_auc = 0.6768595041322314
User 56109 AUC after training: 0.6763733592610598
User 56109 does not improve AUC. Reverting changes.
Training on augumented user 59298 30/50 current_auc = 0.6768595041322314
User 59298 AUC after training: 0.6770053475935829
User 59298 improves AUC. Keeping the model.
Training on augumented user 15436 31/50 current_auc = 0.6770053475935829
User 15436 AUC after training: 0.676762275157997
User 15436 does not improve AUC. Reverting changes.
Training on augumented user 116458 32/50 current_auc = 0.6770053475935829
User 116458 AUC after training: 0.6768595041322313
User 116458 does not improve AUC. Reverting changes.
Training on augumented user 18951 33/50 current_auc = 0.6770053475935829
User 18951 AUC after training: 0.6766164316966455
User 18951 does not improve AUC. Reverting changes.
Training on augumented user 111844 34/50 current_auc = 0.6770053475935829
User 111844 AUC after training: 0.6760330578512397
User 111844 does not improve AUC. Reverting changes.
Training on augumented user 46807 35/50 current_auc = 0.6770053475935829
User 46807 AUC after training: 0.6759844433641224
User 46807 does not improve AUC. Reverting changes.
Training on augumented user 119200 36/50 current_auc = 0.6770053475935829
User 119200 AUC after training: 0.6764219737481769
User 119200 does not improve AUC. Reverting changes.
Training on augumented user 74185 37/50 current_auc = 0.6770053475935829
User 74185 AUC after training: 0.676300437530384
User 74185 does not improve AUC. Reverting changes.
Training on augumented user 60762 38/50 current_auc = 0.6770053475935829
User 60762 AUC after training: 0.6759358288770052
User 60762 does not improve AUC. Reverting changes.
Training on augumented user 6703 39/50 current_auc = 0.6770053475935829
User 6703 AUC after training: 0.6767622751579971
User 6703 does not improve AUC. Reverting changes.
Training on augumented user 61805 40/50 current_auc = 0.6770053475935829
User 61805 AUC after training: 0.6766893534273213
User 61805 does not improve AUC. Reverting changes.
Training on augumented user 33862 41/50 current_auc = 0.6770053475935829
User 33862 AUC after training: 0.6768108896451142
User 33862 does not improve AUC. Reverting changes.
Training on augumented user 79881 42/50 current_auc = 0.6770053475935829
User 79881 AUC after training: 0.676470588235294
User 79881 does not improve AUC. Reverting changes.
Training on augumented user 100172 43/50 current_auc = 0.6770053475935829
User 100172 AUC after training: 0.6769567331064658
User 100172 does not improve AUC. Reverting changes.
Training on augumented user 30172 44/50 current_auc = 0.6770053475935829
User 30172 AUC after training: 0.6771998055420516
User 30172 improves AUC. Keeping the model.
Training on augumented user 134912 45/50 current_auc = 0.6771998055420516
User 134912 AUC after training: 0.6772970345162859
User 134912 improves AUC. Keeping the model.
Training on augumented user 10108 46/50 current_auc = 0.6772970345162859
User 10108 AUC after training: 0.6774185707340787
User 10108 improves AUC. Keeping the model.
Training on augumented user 104465 47/50 current_auc = 0.6774185707340787
User 104465 AUC after training: 0.6772241127856101
User 104465 does not improve AUC. Reverting changes.
Training on augumented user 16297 48/50 current_auc = 0.6774185707340787
User 16297 AUC after training: 0.6768595041322314
User 16297 does not improve AUC. Reverting changes.
Training on augumented user 49364 49/50 current_auc = 0.6774185707340787
User 49364 AUC after training: 0.6776616431696646
User 49364 improves AUC. Keeping the model.
[2024-12-02 18:10:04.481120] start test user 28394 55/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:05.095766] start test user 28394 55/568 recall augumented users by random, augumented_users = [111895, 6147, 61772, 137154, 121144, 27742, 111183, 75689, 87660, 103428, 75884, 137164, 25388, 82079, 89006, 76699, 136165, 14877, 38130, 80061, 108696, 125574, 3976, 34615, 84073, 123138, 120417, 85181, 31106, 50560, 47278, 81837, 14225, 99875, 76406, 49240, 39568, 136142, 41400, 88852, 59893, 41821, 127937, 111313, 106490, 99782, 69445, 57915, 20941, 51094]
[2024-12-02 18:10:05.109029] user = 28394 Cloud 55/568
[2024-12-02 18:10:05.125342] user = 28394 Local 55/568
[2024-12-02 18:10:05.261333] user = 28394 Local+ 55/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:08.113750] user = 28394 MPDA- 55/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6428571428571428
Training on augumented user 111895 0/50 current_auc = 0.6428571428571428
User 111895 AUC after training: 0.6428571428571428
User 111895 does not improve AUC. Reverting changes.
Training on augumented user 6147 1/50 current_auc = 0.6428571428571428
User 6147 AUC after training: 0.6428571428571428
User 6147 does not improve AUC. Reverting changes.
Training on augumented user 61772 2/50 current_auc = 0.6428571428571428
User 61772 AUC after training: 0.6428571428571428
User 61772 does not improve AUC. Reverting changes.
Training on augumented user 137154 3/50 current_auc = 0.6428571428571428
User 137154 AUC after training: 0.6428571428571428
User 137154 does not improve AUC. Reverting changes.
Training on augumented user 121144 4/50 current_auc = 0.6428571428571428
User 121144 AUC after training: 0.6428571428571428
User 121144 does not improve AUC. Reverting changes.
Training on augumented user 27742 5/50 current_auc = 0.6428571428571428
User 27742 AUC after training: 0.6428571428571428
User 27742 does not improve AUC. Reverting changes.
Training on augumented user 111183 6/50 current_auc = 0.6428571428571428
User 111183 AUC after training: 0.6785714285714285
User 111183 improves AUC. Keeping the model.
Training on augumented user 75689 7/50 current_auc = 0.6785714285714285
User 75689 AUC after training: 0.6785714285714285
User 75689 does not improve AUC. Reverting changes.
Training on augumented user 87660 8/50 current_auc = 0.6785714285714285
User 87660 AUC after training: 0.6785714285714285
User 87660 does not improve AUC. Reverting changes.
Training on augumented user 103428 9/50 current_auc = 0.6785714285714285
User 103428 AUC after training: 0.6785714285714285
User 103428 does not improve AUC. Reverting changes.
Training on augumented user 75884 10/50 current_auc = 0.6785714285714285
User 75884 AUC after training: 0.6428571428571428
User 75884 does not improve AUC. Reverting changes.
Training on augumented user 137164 11/50 current_auc = 0.6785714285714285
User 137164 AUC after training: 0.6785714285714285
User 137164 does not improve AUC. Reverting changes.
Training on augumented user 25388 12/50 current_auc = 0.6785714285714285
User 25388 AUC after training: 0.6428571428571428
User 25388 does not improve AUC. Reverting changes.
Training on augumented user 82079 13/50 current_auc = 0.6785714285714285
User 82079 AUC after training: 0.6785714285714285
User 82079 does not improve AUC. Reverting changes.
Training on augumented user 89006 14/50 current_auc = 0.6785714285714285
User 89006 AUC after training: 0.6428571428571428
User 89006 does not improve AUC. Reverting changes.
Training on augumented user 76699 15/50 current_auc = 0.6785714285714285
User 76699 AUC after training: 0.6428571428571428
User 76699 does not improve AUC. Reverting changes.
Training on augumented user 136165 16/50 current_auc = 0.6785714285714285
User 136165 AUC after training: 0.6428571428571428
User 136165 does not improve AUC. Reverting changes.
Training on augumented user 14877 17/50 current_auc = 0.6785714285714285
User 14877 AUC after training: 0.6785714285714285
User 14877 does not improve AUC. Reverting changes.
Training on augumented user 38130 18/50 current_auc = 0.6785714285714285
User 38130 AUC after training: 0.6785714285714285
User 38130 does not improve AUC. Reverting changes.
Training on augumented user 80061 19/50 current_auc = 0.6785714285714285
User 80061 AUC after training: 0.6785714285714285
User 80061 does not improve AUC. Reverting changes.
Training on augumented user 108696 20/50 current_auc = 0.6785714285714285
User 108696 AUC after training: 0.6785714285714285
User 108696 does not improve AUC. Reverting changes.
Training on augumented user 125574 21/50 current_auc = 0.6785714285714285
User 125574 AUC after training: 0.6785714285714285
User 125574 does not improve AUC. Reverting changes.
Training on augumented user 3976 22/50 current_auc = 0.6785714285714285
User 3976 AUC after training: 0.6785714285714285
User 3976 does not improve AUC. Reverting changes.
Training on augumented user 34615 23/50 current_auc = 0.6785714285714285
User 34615 AUC after training: 0.6785714285714285
User 34615 does not improve AUC. Reverting changes.
Training on augumented user 84073 24/50 current_auc = 0.6785714285714285
User 84073 AUC after training: 0.6785714285714285
User 84073 does not improve AUC. Reverting changes.
Training on augumented user 123138 25/50 current_auc = 0.6785714285714285
User 123138 AUC after training: 0.6785714285714285
User 123138 does not improve AUC. Reverting changes.
Training on augumented user 120417 26/50 current_auc = 0.6785714285714285
User 120417 AUC after training: 0.6785714285714285
User 120417 does not improve AUC. Reverting changes.
Training on augumented user 85181 27/50 current_auc = 0.6785714285714285
User 85181 AUC after training: 0.6785714285714285
User 85181 does not improve AUC. Reverting changes.
Training on augumented user 31106 28/50 current_auc = 0.6785714285714285
User 31106 AUC after training: 0.6785714285714285
User 31106 does not improve AUC. Reverting changes.
Training on augumented user 50560 29/50 current_auc = 0.6785714285714285
User 50560 AUC after training: 0.6785714285714285
User 50560 does not improve AUC. Reverting changes.
Training on augumented user 47278 30/50 current_auc = 0.6785714285714285
User 47278 AUC after training: 0.6785714285714285
User 47278 does not improve AUC. Reverting changes.
Training on augumented user 81837 31/50 current_auc = 0.6785714285714285
User 81837 AUC after training: 0.6785714285714285
User 81837 does not improve AUC. Reverting changes.
Training on augumented user 14225 32/50 current_auc = 0.6785714285714285
User 14225 AUC after training: 0.6785714285714285
User 14225 does not improve AUC. Reverting changes.
Training on augumented user 99875 33/50 current_auc = 0.6785714285714285
User 99875 AUC after training: 0.6785714285714285
User 99875 does not improve AUC. Reverting changes.
Training on augumented user 76406 34/50 current_auc = 0.6785714285714285
User 76406 AUC after training: 0.6785714285714285
User 76406 does not improve AUC. Reverting changes.
Training on augumented user 49240 35/50 current_auc = 0.6785714285714285
User 49240 AUC after training: 0.6428571428571428
User 49240 does not improve AUC. Reverting changes.
Training on augumented user 39568 36/50 current_auc = 0.6785714285714285
User 39568 AUC after training: 0.6785714285714285
User 39568 does not improve AUC. Reverting changes.
Training on augumented user 136142 37/50 current_auc = 0.6785714285714285
User 136142 AUC after training: 0.6785714285714285
User 136142 does not improve AUC. Reverting changes.
Training on augumented user 41400 38/50 current_auc = 0.6785714285714285
User 41400 AUC after training: 0.6785714285714285
User 41400 does not improve AUC. Reverting changes.
Training on augumented user 88852 39/50 current_auc = 0.6785714285714285
User 88852 AUC after training: 0.6785714285714285
User 88852 does not improve AUC. Reverting changes.
Training on augumented user 59893 40/50 current_auc = 0.6785714285714285
User 59893 AUC after training: 0.6428571428571428
User 59893 does not improve AUC. Reverting changes.
Training on augumented user 41821 41/50 current_auc = 0.6785714285714285
User 41821 AUC after training: 0.6785714285714285
User 41821 does not improve AUC. Reverting changes.
Training on augumented user 127937 42/50 current_auc = 0.6785714285714285
User 127937 AUC after training: 0.6785714285714285
User 127937 does not improve AUC. Reverting changes.
Training on augumented user 111313 43/50 current_auc = 0.6785714285714285
User 111313 AUC after training: 0.6785714285714285
User 111313 does not improve AUC. Reverting changes.
Training on augumented user 106490 44/50 current_auc = 0.6785714285714285
User 106490 AUC after training: 0.6785714285714285
User 106490 does not improve AUC. Reverting changes.
Training on augumented user 99782 45/50 current_auc = 0.6785714285714285
User 99782 AUC after training: 0.6785714285714285
User 99782 does not improve AUC. Reverting changes.
Training on augumented user 69445 46/50 current_auc = 0.6785714285714285
User 69445 AUC after training: 0.6785714285714285
User 69445 does not improve AUC. Reverting changes.
Training on augumented user 57915 47/50 current_auc = 0.6785714285714285
User 57915 AUC after training: 0.6785714285714285
User 57915 does not improve AUC. Reverting changes.
Training on augumented user 20941 48/50 current_auc = 0.6785714285714285
User 20941 AUC after training: 0.6785714285714285
User 20941 does not improve AUC. Reverting changes.
Training on augumented user 51094 49/50 current_auc = 0.6785714285714285
User 51094 AUC after training: 0.6785714285714285
User 51094 does not improve AUC. Reverting changes.
[2024-12-02 18:10:37.498900] start test user 28398 56/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:38.321069] start test user 28398 56/568 recall augumented users by random, augumented_users = [71905, 70240, 60530, 60198, 126381, 39775, 64790, 46732, 76637, 78188, 61332, 79384, 22654, 69607, 62362, 76074, 66436, 53916, 114616, 23510, 40754, 35406, 60893, 131002, 53126, 122404, 21289, 102132, 14232, 8031, 47106, 5428, 72511, 34031, 86526, 3983, 47679, 133230, 62640, 58475, 41276, 121448, 37045, 31951, 117043, 50644, 117451, 127885, 18080, 91637]
[2024-12-02 18:10:38.344684] user = 28398 Cloud 56/568
[2024-12-02 18:10:38.368932] user = 28398 Local 56/568
[2024-12-02 18:10:38.653291] user = 28398 Local+ 56/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:40.967422] user = 28398 MPDA- 56/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6076923076923076
Training on augumented user 71905 0/50 current_auc = 0.6076923076923076
User 71905 AUC after training: 0.6076923076923076
User 71905 does not improve AUC. Reverting changes.
Training on augumented user 70240 1/50 current_auc = 0.6076923076923076
User 70240 AUC after training: 0.6
User 70240 does not improve AUC. Reverting changes.
Training on augumented user 60530 2/50 current_auc = 0.6076923076923076
User 60530 AUC after training: 0.6076923076923076
User 60530 does not improve AUC. Reverting changes.
Training on augumented user 60198 3/50 current_auc = 0.6076923076923076
User 60198 AUC after training: 0.6
User 60198 does not improve AUC. Reverting changes.
Training on augumented user 126381 4/50 current_auc = 0.6076923076923076
User 126381 AUC after training: 0.6076923076923076
User 126381 does not improve AUC. Reverting changes.
Training on augumented user 39775 5/50 current_auc = 0.6076923076923076
User 39775 AUC after training: 0.6076923076923076
User 39775 does not improve AUC. Reverting changes.
Training on augumented user 64790 6/50 current_auc = 0.6076923076923076
User 64790 AUC after training: 0.6076923076923076
User 64790 does not improve AUC. Reverting changes.
Training on augumented user 46732 7/50 current_auc = 0.6076923076923076
User 46732 AUC after training: 0.6076923076923076
User 46732 does not improve AUC. Reverting changes.
Training on augumented user 76637 8/50 current_auc = 0.6076923076923076
User 76637 AUC after training: 0.6076923076923076
User 76637 does not improve AUC. Reverting changes.
Training on augumented user 78188 9/50 current_auc = 0.6076923076923076
User 78188 AUC after training: 0.6076923076923076
User 78188 does not improve AUC. Reverting changes.
Training on augumented user 61332 10/50 current_auc = 0.6076923076923076
User 61332 AUC after training: 0.6076923076923076
User 61332 does not improve AUC. Reverting changes.
Training on augumented user 79384 11/50 current_auc = 0.6076923076923076
User 79384 AUC after training: 0.6
User 79384 does not improve AUC. Reverting changes.
Training on augumented user 22654 12/50 current_auc = 0.6076923076923076
User 22654 AUC after training: 0.6076923076923076
User 22654 does not improve AUC. Reverting changes.
Training on augumented user 69607 13/50 current_auc = 0.6076923076923076
User 69607 AUC after training: 0.6076923076923076
User 69607 does not improve AUC. Reverting changes.
Training on augumented user 62362 14/50 current_auc = 0.6076923076923076
User 62362 AUC after training: 0.5923076923076923
User 62362 does not improve AUC. Reverting changes.
Training on augumented user 76074 15/50 current_auc = 0.6076923076923076
User 76074 AUC after training: 0.6076923076923076
User 76074 does not improve AUC. Reverting changes.
Training on augumented user 66436 16/50 current_auc = 0.6076923076923076
User 66436 AUC after training: 0.6076923076923076
User 66436 does not improve AUC. Reverting changes.
Training on augumented user 53916 17/50 current_auc = 0.6076923076923076
User 53916 AUC after training: 0.5923076923076923
User 53916 does not improve AUC. Reverting changes.
Training on augumented user 114616 18/50 current_auc = 0.6076923076923076
User 114616 AUC after training: 0.6076923076923076
User 114616 does not improve AUC. Reverting changes.
Training on augumented user 23510 19/50 current_auc = 0.6076923076923076
User 23510 AUC after training: 0.5923076923076923
User 23510 does not improve AUC. Reverting changes.
Training on augumented user 40754 20/50 current_auc = 0.6076923076923076
User 40754 AUC after training: 0.6076923076923076
User 40754 does not improve AUC. Reverting changes.
Training on augumented user 35406 21/50 current_auc = 0.6076923076923076
User 35406 AUC after training: 0.6
User 35406 does not improve AUC. Reverting changes.
Training on augumented user 60893 22/50 current_auc = 0.6076923076923076
User 60893 AUC after training: 0.6076923076923076
User 60893 does not improve AUC. Reverting changes.
Training on augumented user 131002 23/50 current_auc = 0.6076923076923076
User 131002 AUC after training: 0.6
User 131002 does not improve AUC. Reverting changes.
Training on augumented user 53126 24/50 current_auc = 0.6076923076923076
User 53126 AUC after training: 0.6
User 53126 does not improve AUC. Reverting changes.
Training on augumented user 122404 25/50 current_auc = 0.6076923076923076
User 122404 AUC after training: 0.6076923076923076
User 122404 does not improve AUC. Reverting changes.
Training on augumented user 21289 26/50 current_auc = 0.6076923076923076
User 21289 AUC after training: 0.6
User 21289 does not improve AUC. Reverting changes.
Training on augumented user 102132 27/50 current_auc = 0.6076923076923076
User 102132 AUC after training: 0.6
User 102132 does not improve AUC. Reverting changes.
Training on augumented user 14232 28/50 current_auc = 0.6076923076923076
User 14232 AUC after training: 0.6076923076923076
User 14232 does not improve AUC. Reverting changes.
Training on augumented user 8031 29/50 current_auc = 0.6076923076923076
User 8031 AUC after training: 0.6076923076923076
User 8031 does not improve AUC. Reverting changes.
Training on augumented user 47106 30/50 current_auc = 0.6076923076923076
User 47106 AUC after training: 0.6076923076923076
User 47106 does not improve AUC. Reverting changes.
Training on augumented user 5428 31/50 current_auc = 0.6076923076923076
User 5428 AUC after training: 0.6
User 5428 does not improve AUC. Reverting changes.
Training on augumented user 72511 32/50 current_auc = 0.6076923076923076
User 72511 AUC after training: 0.6
User 72511 does not improve AUC. Reverting changes.
Training on augumented user 34031 33/50 current_auc = 0.6076923076923076
User 34031 AUC after training: 0.6
User 34031 does not improve AUC. Reverting changes.
Training on augumented user 86526 34/50 current_auc = 0.6076923076923076
User 86526 AUC after training: 0.6076923076923076
User 86526 does not improve AUC. Reverting changes.
Training on augumented user 3983 35/50 current_auc = 0.6076923076923076
User 3983 AUC after training: 0.6
User 3983 does not improve AUC. Reverting changes.
Training on augumented user 47679 36/50 current_auc = 0.6076923076923076
User 47679 AUC after training: 0.6076923076923076
User 47679 does not improve AUC. Reverting changes.
Training on augumented user 133230 37/50 current_auc = 0.6076923076923076
User 133230 AUC after training: 0.6076923076923076
User 133230 does not improve AUC. Reverting changes.
Training on augumented user 62640 38/50 current_auc = 0.6076923076923076
User 62640 AUC after training: 0.6076923076923076
User 62640 does not improve AUC. Reverting changes.
Training on augumented user 58475 39/50 current_auc = 0.6076923076923076
User 58475 AUC after training: 0.6
User 58475 does not improve AUC. Reverting changes.
Training on augumented user 41276 40/50 current_auc = 0.6076923076923076
User 41276 AUC after training: 0.6076923076923076
User 41276 does not improve AUC. Reverting changes.
Training on augumented user 121448 41/50 current_auc = 0.6076923076923076
User 121448 AUC after training: 0.6076923076923076
User 121448 does not improve AUC. Reverting changes.
Training on augumented user 37045 42/50 current_auc = 0.6076923076923076
User 37045 AUC after training: 0.6076923076923076
User 37045 does not improve AUC. Reverting changes.
Training on augumented user 31951 43/50 current_auc = 0.6076923076923076
User 31951 AUC after training: 0.6076923076923076
User 31951 does not improve AUC. Reverting changes.
Training on augumented user 117043 44/50 current_auc = 0.6076923076923076
User 117043 AUC after training: 0.6076923076923076
User 117043 does not improve AUC. Reverting changes.
Training on augumented user 50644 45/50 current_auc = 0.6076923076923076
User 50644 AUC after training: 0.6
User 50644 does not improve AUC. Reverting changes.
Training on augumented user 117451 46/50 current_auc = 0.6076923076923076
User 117451 AUC after training: 0.6076923076923076
User 117451 does not improve AUC. Reverting changes.
Training on augumented user 127885 47/50 current_auc = 0.6076923076923076
User 127885 AUC after training: 0.6076923076923076
User 127885 does not improve AUC. Reverting changes.
Training on augumented user 18080 48/50 current_auc = 0.6076923076923076
User 18080 AUC after training: 0.6
User 18080 does not improve AUC. Reverting changes.
Training on augumented user 91637 49/50 current_auc = 0.6076923076923076
User 91637 AUC after training: 0.6076923076923076
User 91637 does not improve AUC. Reverting changes.
[2024-12-02 18:11:12.011117] start test user 28410 57/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:12.849608] start test user 28410 57/568 recall augumented users by random, augumented_users = [81163, 24120, 21968, 128239, 1166, 79933, 61435, 51603, 123440, 21417, 24830, 96193, 49700, 42235, 137757, 125590, 23753, 54148, 96756, 118138, 30449, 61765, 86284, 46876, 81002, 123752, 35429, 72006, 11089, 44595, 125586, 70579, 71387, 3903, 136128, 65028, 57996, 84540, 103640, 50676, 34108, 103240, 115046, 118225, 112945, 62964, 40285, 7587, 111138, 74814]
[2024-12-02 18:11:12.910606] user = 28410 Cloud 57/568
[2024-12-02 18:11:12.949869] user = 28410 Local 57/568
[2024-12-02 18:11:12.973795] user = 28410 Local+ 57/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:16.187401] user = 28410 MPDA- 57/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.22222222222222224
Training on augumented user 81163 0/50 current_auc = 0.22222222222222224
User 81163 AUC after training: 0.22222222222222224
User 81163 does not improve AUC. Reverting changes.
Training on augumented user 24120 1/50 current_auc = 0.22222222222222224
User 24120 AUC after training: 0.22222222222222224
User 24120 does not improve AUC. Reverting changes.
Training on augumented user 21968 2/50 current_auc = 0.22222222222222224
User 21968 AUC after training: 0.22222222222222224
User 21968 does not improve AUC. Reverting changes.
Training on augumented user 128239 3/50 current_auc = 0.22222222222222224
User 128239 AUC after training: 0.22222222222222224
User 128239 does not improve AUC. Reverting changes.
Training on augumented user 1166 4/50 current_auc = 0.22222222222222224
User 1166 AUC after training: 0.22222222222222224
User 1166 does not improve AUC. Reverting changes.
Training on augumented user 79933 5/50 current_auc = 0.22222222222222224
User 79933 AUC after training: 0.22222222222222224
User 79933 does not improve AUC. Reverting changes.
Training on augumented user 61435 6/50 current_auc = 0.22222222222222224
User 61435 AUC after training: 0.22222222222222224
User 61435 does not improve AUC. Reverting changes.
Training on augumented user 51603 7/50 current_auc = 0.22222222222222224
User 51603 AUC after training: 0.22222222222222224
User 51603 does not improve AUC. Reverting changes.
Training on augumented user 123440 8/50 current_auc = 0.22222222222222224
User 123440 AUC after training: 0.22222222222222224
User 123440 does not improve AUC. Reverting changes.
Training on augumented user 21417 9/50 current_auc = 0.22222222222222224
User 21417 AUC after training: 0.22222222222222224
User 21417 does not improve AUC. Reverting changes.
Training on augumented user 24830 10/50 current_auc = 0.22222222222222224
User 24830 AUC after training: 0.22222222222222224
User 24830 does not improve AUC. Reverting changes.
Training on augumented user 96193 11/50 current_auc = 0.22222222222222224
User 96193 AUC after training: 0.22222222222222224
User 96193 does not improve AUC. Reverting changes.
Training on augumented user 49700 12/50 current_auc = 0.22222222222222224
User 49700 AUC after training: 0.22222222222222224
User 49700 does not improve AUC. Reverting changes.
Training on augumented user 42235 13/50 current_auc = 0.22222222222222224
User 42235 AUC after training: 0.22222222222222224
User 42235 does not improve AUC. Reverting changes.
Training on augumented user 137757 14/50 current_auc = 0.22222222222222224
User 137757 AUC after training: 0.22222222222222224
User 137757 does not improve AUC. Reverting changes.
Training on augumented user 125590 15/50 current_auc = 0.22222222222222224
User 125590 AUC after training: 0.22222222222222224
User 125590 does not improve AUC. Reverting changes.
Training on augumented user 23753 16/50 current_auc = 0.22222222222222224
User 23753 AUC after training: 0.22222222222222224
User 23753 does not improve AUC. Reverting changes.
Training on augumented user 54148 17/50 current_auc = 0.22222222222222224
User 54148 AUC after training: 0.22222222222222224
User 54148 does not improve AUC. Reverting changes.
Training on augumented user 96756 18/50 current_auc = 0.22222222222222224
User 96756 AUC after training: 0.22222222222222224
User 96756 does not improve AUC. Reverting changes.
Training on augumented user 118138 19/50 current_auc = 0.22222222222222224
User 118138 AUC after training: 0.22222222222222224
User 118138 does not improve AUC. Reverting changes.
Training on augumented user 30449 20/50 current_auc = 0.22222222222222224
User 30449 AUC after training: 0.22222222222222224
User 30449 does not improve AUC. Reverting changes.
Training on augumented user 61765 21/50 current_auc = 0.22222222222222224
User 61765 AUC after training: 0.22222222222222224
User 61765 does not improve AUC. Reverting changes.
Training on augumented user 86284 22/50 current_auc = 0.22222222222222224
User 86284 AUC after training: 0.22222222222222224
User 86284 does not improve AUC. Reverting changes.
Training on augumented user 46876 23/50 current_auc = 0.22222222222222224
User 46876 AUC after training: 0.22222222222222224
User 46876 does not improve AUC. Reverting changes.
Training on augumented user 81002 24/50 current_auc = 0.22222222222222224
User 81002 AUC after training: 0.22222222222222224
User 81002 does not improve AUC. Reverting changes.
Training on augumented user 123752 25/50 current_auc = 0.22222222222222224
User 123752 AUC after training: 0.22222222222222224
User 123752 does not improve AUC. Reverting changes.
Training on augumented user 35429 26/50 current_auc = 0.22222222222222224
User 35429 AUC after training: 0.22222222222222224
User 35429 does not improve AUC. Reverting changes.
Training on augumented user 72006 27/50 current_auc = 0.22222222222222224
User 72006 AUC after training: 0.22222222222222224
User 72006 does not improve AUC. Reverting changes.
Training on augumented user 11089 28/50 current_auc = 0.22222222222222224
User 11089 AUC after training: 0.22222222222222224
User 11089 does not improve AUC. Reverting changes.
Training on augumented user 44595 29/50 current_auc = 0.22222222222222224
User 44595 AUC after training: 0.22222222222222224
User 44595 does not improve AUC. Reverting changes.
Training on augumented user 125586 30/50 current_auc = 0.22222222222222224
User 125586 AUC after training: 0.22222222222222224
User 125586 does not improve AUC. Reverting changes.
Training on augumented user 70579 31/50 current_auc = 0.22222222222222224
User 70579 AUC after training: 0.22222222222222224
User 70579 does not improve AUC. Reverting changes.
Training on augumented user 71387 32/50 current_auc = 0.22222222222222224
User 71387 AUC after training: 0.22222222222222224
User 71387 does not improve AUC. Reverting changes.
Training on augumented user 3903 33/50 current_auc = 0.22222222222222224
User 3903 AUC after training: 0.22222222222222224
User 3903 does not improve AUC. Reverting changes.
Training on augumented user 136128 34/50 current_auc = 0.22222222222222224
User 136128 AUC after training: 0.22222222222222224
User 136128 does not improve AUC. Reverting changes.
Training on augumented user 65028 35/50 current_auc = 0.22222222222222224
User 65028 AUC after training: 0.22222222222222224
User 65028 does not improve AUC. Reverting changes.
Training on augumented user 57996 36/50 current_auc = 0.22222222222222224
User 57996 AUC after training: 0.22222222222222224
User 57996 does not improve AUC. Reverting changes.
Training on augumented user 84540 37/50 current_auc = 0.22222222222222224
User 84540 AUC after training: 0.22222222222222224
User 84540 does not improve AUC. Reverting changes.
Training on augumented user 103640 38/50 current_auc = 0.22222222222222224
User 103640 AUC after training: 0.22222222222222224
User 103640 does not improve AUC. Reverting changes.
Training on augumented user 50676 39/50 current_auc = 0.22222222222222224
User 50676 AUC after training: 0.22222222222222224
User 50676 does not improve AUC. Reverting changes.
Training on augumented user 34108 40/50 current_auc = 0.22222222222222224
User 34108 AUC after training: 0.22222222222222224
User 34108 does not improve AUC. Reverting changes.
Training on augumented user 103240 41/50 current_auc = 0.22222222222222224
User 103240 AUC after training: 0.22222222222222224
User 103240 does not improve AUC. Reverting changes.
Training on augumented user 115046 42/50 current_auc = 0.22222222222222224
User 115046 AUC after training: 0.22222222222222224
User 115046 does not improve AUC. Reverting changes.
Training on augumented user 118225 43/50 current_auc = 0.22222222222222224
User 118225 AUC after training: 0.22222222222222224
User 118225 does not improve AUC. Reverting changes.
Training on augumented user 112945 44/50 current_auc = 0.22222222222222224
User 112945 AUC after training: 0.22222222222222224
User 112945 does not improve AUC. Reverting changes.
Training on augumented user 62964 45/50 current_auc = 0.22222222222222224
User 62964 AUC after training: 0.22222222222222224
User 62964 does not improve AUC. Reverting changes.
Training on augumented user 40285 46/50 current_auc = 0.22222222222222224
User 40285 AUC after training: 0.22222222222222224
User 40285 does not improve AUC. Reverting changes.
Training on augumented user 7587 47/50 current_auc = 0.22222222222222224
User 7587 AUC after training: 0.22222222222222224
User 7587 does not improve AUC. Reverting changes.
Training on augumented user 111138 48/50 current_auc = 0.22222222222222224
User 111138 AUC after training: 0.22222222222222224
User 111138 does not improve AUC. Reverting changes.
Training on augumented user 74814 49/50 current_auc = 0.22222222222222224
User 74814 AUC after training: 0.22222222222222224
User 74814 does not improve AUC. Reverting changes.
[2024-12-02 18:11:47.310955] start test user 28447 58/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:47.874970] start test user 28447 58/568 recall augumented users by random, augumented_users = [58323, 62773, 37481, 122349, 70735, 34715, 86291, 101623, 29571, 98827, 60945, 88828, 137323, 41091, 47767, 79014, 29120, 42133, 121391, 78389, 48648, 37827, 132046, 29399, 13851, 77393, 58999, 76326, 73985, 92834, 83814, 134297, 35695, 70956, 73638, 103533, 59154, 105364, 78834, 112053, 38493, 11783, 89357, 90584, 79537, 98889, 135394, 119222, 33327, 88631]
[2024-12-02 18:11:47.893680] user = 28447 Cloud 58/568
[2024-12-02 18:11:47.914904] user = 28447 Local 58/568
[2024-12-02 18:11:47.984462] user = 28447 Local+ 58/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:50.681246] user = 28447 MPDA- 58/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6384926548860975
Training on augumented user 58323 0/50 current_auc = 0.6384926548860975
User 58323 AUC after training: 0.6401958697040665
User 58323 improves AUC. Keeping the model.
Training on augumented user 62773 1/50 current_auc = 0.6401958697040665
User 62773 AUC after training: 0.6380668511816053
User 62773 does not improve AUC. Reverting changes.
Training on augumented user 37481 2/50 current_auc = 0.6401958697040665
User 37481 AUC after training: 0.6410474771130509
User 37481 improves AUC. Keeping the model.
Training on augumented user 122349 3/50 current_auc = 0.6410474771130509
User 122349 AUC after training: 0.6404087715563126
User 122349 does not improve AUC. Reverting changes.
Training on augumented user 70735 4/50 current_auc = 0.6410474771130509
User 70735 AUC after training: 0.6411539280391739
User 70735 improves AUC. Keeping the model.
Training on augumented user 34715 5/50 current_auc = 0.6411539280391739
User 34715 AUC after training: 0.6406216734085587
User 34715 does not improve AUC. Reverting changes.
Training on augumented user 86291 6/50 current_auc = 0.6411539280391739
User 86291 AUC after training: 0.6404087715563125
User 86291 does not improve AUC. Reverting changes.
Training on augumented user 101623 7/50 current_auc = 0.6411539280391739
User 101623 AUC after training: 0.6408345752608048
User 101623 does not improve AUC. Reverting changes.
Training on augumented user 29571 8/50 current_auc = 0.6411539280391739
User 29571 AUC after training: 0.6410474771130509
User 29571 does not improve AUC. Reverting changes.
Training on augumented user 98827 9/50 current_auc = 0.6411539280391739
User 98827 AUC after training: 0.6323185011709602
User 98827 does not improve AUC. Reverting changes.
Training on augumented user 60945 10/50 current_auc = 0.6411539280391739
User 60945 AUC after training: 0.6408345752608048
User 60945 does not improve AUC. Reverting changes.
Training on augumented user 88828 11/50 current_auc = 0.6411539280391739
User 88828 AUC after training: 0.6341281669150521
User 88828 does not improve AUC. Reverting changes.
Training on augumented user 137323 12/50 current_auc = 0.6411539280391739
User 137323 AUC after training: 0.6404087715563126
User 137323 does not improve AUC. Reverting changes.
Training on augumented user 41091 13/50 current_auc = 0.6411539280391739
User 41091 AUC after training: 0.6367894400681285
User 41091 does not improve AUC. Reverting changes.
Training on augumented user 47767 14/50 current_auc = 0.6411539280391739
User 47767 AUC after training: 0.6408345752608048
User 47767 does not improve AUC. Reverting changes.
Training on augumented user 79014 15/50 current_auc = 0.6411539280391739
User 79014 AUC after training: 0.6408345752608048
User 79014 does not improve AUC. Reverting changes.
Training on augumented user 29120 16/50 current_auc = 0.6411539280391739
User 29120 AUC after training: 0.6406216734085587
User 29120 does not improve AUC. Reverting changes.
Training on augumented user 42133 17/50 current_auc = 0.6411539280391739
User 42133 AUC after training: 0.6404087715563126
User 42133 does not improve AUC. Reverting changes.
Training on augumented user 121391 18/50 current_auc = 0.6411539280391739
User 121391 AUC after training: 0.6406216734085586
User 121391 does not improve AUC. Reverting changes.
Training on augumented user 78389 19/50 current_auc = 0.6411539280391739
User 78389 AUC after training: 0.6397700659995743
User 78389 does not improve AUC. Reverting changes.
Training on augumented user 48648 20/50 current_auc = 0.6411539280391739
User 48648 AUC after training: 0.6421119863742815
User 48648 improves AUC. Keeping the model.
Training on augumented user 37827 21/50 current_auc = 0.6421119863742815
User 37827 AUC after training: 0.6421119863742815
User 37827 does not improve AUC. Reverting changes.
Training on augumented user 132046 22/50 current_auc = 0.6421119863742815
User 132046 AUC after training: 0.6438152011922504
User 132046 improves AUC. Keeping the model.
Training on augumented user 29399 23/50 current_auc = 0.6438152011922504
User 29399 AUC after training: 0.6427506919310197
User 29399 does not improve AUC. Reverting changes.
Training on augumented user 13851 24/50 current_auc = 0.6438152011922504
User 13851 AUC after training: 0.6444539067489887
User 13851 improves AUC. Keeping the model.
Training on augumented user 77393 25/50 current_auc = 0.6444539067489887
User 77393 AUC after training: 0.6442410048967425
User 77393 does not improve AUC. Reverting changes.
Training on augumented user 58999 26/50 current_auc = 0.6444539067489887
User 58999 AUC after training: 0.6438152011922503
User 58999 does not improve AUC. Reverting changes.
Training on augumented user 76326 27/50 current_auc = 0.6444539067489887
User 76326 AUC after training: 0.6404087715563126
User 76326 does not improve AUC. Reverting changes.
Training on augumented user 73985 28/50 current_auc = 0.6444539067489887
User 73985 AUC after training: 0.6463700234192038
User 73985 improves AUC. Keeping the model.
Training on augumented user 92834 29/50 current_auc = 0.6463700234192038
User 92834 AUC after training: 0.6457313178624654
User 92834 does not improve AUC. Reverting changes.
Training on augumented user 83814 30/50 current_auc = 0.6463700234192038
User 83814 AUC after training: 0.646795827123696
User 83814 improves AUC. Keeping the model.
Training on augumented user 134297 31/50 current_auc = 0.646795827123696
User 134297 AUC after training: 0.6441345539706195
User 134297 does not improve AUC. Reverting changes.
Training on augumented user 35695 32/50 current_auc = 0.646795827123696
User 35695 AUC after training: 0.646795827123696
User 35695 does not improve AUC. Reverting changes.
Training on augumented user 70956 33/50 current_auc = 0.646795827123696
User 70956 AUC after training: 0.6461571215669576
User 70956 does not improve AUC. Reverting changes.
Training on augumented user 73638 34/50 current_auc = 0.646795827123696
User 73638 AUC after training: 0.6457313178624654
User 73638 does not improve AUC. Reverting changes.
Training on augumented user 103533 35/50 current_auc = 0.646795827123696
User 103533 AUC after training: 0.6446668086012347
User 103533 does not improve AUC. Reverting changes.
Training on augumented user 59154 36/50 current_auc = 0.646795827123696
User 59154 AUC after training: 0.6433893974877581
User 59154 does not improve AUC. Reverting changes.
Training on augumented user 105364 37/50 current_auc = 0.646795827123696
User 105364 AUC after training: 0.6457313178624654
User 105364 does not improve AUC. Reverting changes.
Training on augumented user 78834 38/50 current_auc = 0.646795827123696
User 78834 AUC after training: 0.6457313178624654
User 78834 does not improve AUC. Reverting changes.
Training on augumented user 112053 39/50 current_auc = 0.646795827123696
User 112053 AUC after training: 0.6470087289759421
User 112053 improves AUC. Keeping the model.
Training on augumented user 38493 40/50 current_auc = 0.6470087289759421
User 38493 AUC after training: 0.6340217159889291
User 38493 does not improve AUC. Reverting changes.
Training on augumented user 11783 41/50 current_auc = 0.6470087289759421
User 11783 AUC after training: 0.6450926123057271
User 11783 does not improve AUC. Reverting changes.
Training on augumented user 89357 42/50 current_auc = 0.6470087289759421
User 89357 AUC after training: 0.6461571215669577
User 89357 does not improve AUC. Reverting changes.
Training on augumented user 90584 43/50 current_auc = 0.6470087289759421
User 90584 AUC after training: 0.6404087715563126
User 90584 does not improve AUC. Reverting changes.
Training on augumented user 79537 44/50 current_auc = 0.6470087289759421
User 79537 AUC after training: 0.6470087289759422
User 79537 improves AUC. Keeping the model.
Training on augumented user 98889 45/50 current_auc = 0.6470087289759422
User 98889 AUC after training: 0.6448797104534809
User 98889 does not improve AUC. Reverting changes.
Training on augumented user 135394 46/50 current_auc = 0.6470087289759422
User 135394 AUC after training: 0.6459442197147115
User 135394 does not improve AUC. Reverting changes.
Training on augumented user 119222 47/50 current_auc = 0.6470087289759422
User 119222 AUC after training: 0.6443474558228657
User 119222 does not improve AUC. Reverting changes.
Training on augumented user 33327 48/50 current_auc = 0.6470087289759422
User 33327 AUC after training: 0.6476474345326805
User 33327 improves AUC. Keeping the model.
Training on augumented user 88631 49/50 current_auc = 0.6476474345326805
User 88631 AUC after training: 0.646795827123696
User 88631 does not improve AUC. Reverting changes.
[2024-12-02 18:12:25.187802] start test user 28456 59/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:25.811916] start test user 28456 59/568 recall augumented users by random, augumented_users = [117860, 42995, 119211, 149, 29028, 124955, 40534, 105627, 108684, 101693, 77751, 50708, 6405, 3343, 52251, 60408, 91788, 76027, 65380, 82034, 60639, 8668, 106559, 4385, 39503, 37811, 37277, 63031, 106005, 121933, 60964, 12982, 5381, 23565, 29391, 129422, 128944, 92675, 25649, 8782, 104349, 87086, 30017, 109730, 11377, 113864, 66559, 75931, 13904, 52615]
[2024-12-02 18:12:25.841631] user = 28456 Cloud 59/568
[2024-12-02 18:12:25.903788] user = 28456 Local 59/568
[2024-12-02 18:12:26.143547] user = 28456 Local+ 59/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:29.811972] user = 28456 MPDA- 59/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4873497786211259
Training on augumented user 117860 0/50 current_auc = 0.4873497786211259
User 117860 AUC after training: 0.4896584440227704
User 117860 improves AUC. Keeping the model.
Training on augumented user 42995 1/50 current_auc = 0.4896584440227704
User 42995 AUC after training: 0.48975332068311195
User 42995 improves AUC. Keeping the model.
Training on augumented user 119211 2/50 current_auc = 0.48975332068311195
User 119211 AUC after training: 0.49171410499683743
User 119211 improves AUC. Keeping the model.
Training on augumented user 149 3/50 current_auc = 0.49171410499683743
User 149 AUC after training: 0.48893105629348516
User 149 does not improve AUC. Reverting changes.
Training on augumented user 29028 4/50 current_auc = 0.49171410499683743
User 29028 AUC after training: 0.4941492726122707
User 29028 improves AUC. Keeping the model.
Training on augumented user 124955 5/50 current_auc = 0.4941492726122707
User 124955 AUC after training: 0.49544592030360535
User 124955 improves AUC. Keeping the model.
Training on augumented user 40534 6/50 current_auc = 0.49544592030360535
User 40534 AUC after training: 0.49693232131562304
User 40534 improves AUC. Keeping the model.
Training on augumented user 105627 7/50 current_auc = 0.49693232131562304
User 105627 AUC after training: 0.49155597722960154
User 105627 does not improve AUC. Reverting changes.
Training on augumented user 108684 8/50 current_auc = 0.49693232131562304
User 108684 AUC after training: 0.5007273877292853
User 108684 improves AUC. Keeping the model.
Training on augumented user 101693 9/50 current_auc = 0.5007273877292853
User 101693 AUC after training: 0.49939911448450347
User 101693 does not improve AUC. Reverting changes.
Training on augumented user 77751 10/50 current_auc = 0.5007273877292853
User 77751 AUC after training: 0.5010120177103099
User 77751 improves AUC. Keeping the model.
Training on augumented user 50708 11/50 current_auc = 0.5010120177103099
User 50708 AUC after training: 0.5106894370651487
User 50708 improves AUC. Keeping the model.
Training on augumented user 6405 12/50 current_auc = 0.5106894370651487
User 6405 AUC after training: 0.5119228336495889
User 6405 improves AUC. Keeping the model.
Training on augumented user 3343 13/50 current_auc = 0.5119228336495889
User 3343 AUC after training: 0.5122074636306135
User 3343 improves AUC. Keeping the model.
Training on augumented user 52251 14/50 current_auc = 0.5122074636306135
User 52251 AUC after training: 0.5111954459203036
User 52251 does not improve AUC. Reverting changes.
Training on augumented user 60408 15/50 current_auc = 0.5122074636306135
User 60408 AUC after training: 0.5119544592030361
User 60408 does not improve AUC. Reverting changes.
Training on augumented user 91788 16/50 current_auc = 0.5122074636306135
User 91788 AUC after training: 0.5136306135357368
User 91788 improves AUC. Keeping the model.
Training on augumented user 76027 17/50 current_auc = 0.5136306135357368
User 76027 AUC after training: 0.513314358001265
User 76027 does not improve AUC. Reverting changes.
Training on augumented user 65380 18/50 current_auc = 0.5136306135357368
User 65380 AUC after training: 0.5098671726755218
User 65380 does not improve AUC. Reverting changes.
Training on augumented user 82034 19/50 current_auc = 0.5136306135357368
User 82034 AUC after training: 0.5164136622390892
User 82034 improves AUC. Keeping the model.
Training on augumented user 60639 20/50 current_auc = 0.5164136622390892
User 60639 AUC after training: 0.5166034155597723
User 60639 improves AUC. Keeping the model.
Training on augumented user 8668 21/50 current_auc = 0.5166034155597723
User 8668 AUC after training: 0.5145477545857052
User 8668 does not improve AUC. Reverting changes.
Training on augumented user 106559 22/50 current_auc = 0.5166034155597723
User 106559 AUC after training: 0.5183744465528146
User 106559 improves AUC. Keeping the model.
Training on augumented user 4385 23/50 current_auc = 0.5183744465528146
User 4385 AUC after training: 0.5153700189753321
User 4385 does not improve AUC. Reverting changes.
Training on augumented user 39503 24/50 current_auc = 0.5183744465528146
User 39503 AUC after training: 0.5181530676786843
User 39503 does not improve AUC. Reverting changes.
Training on augumented user 37811 25/50 current_auc = 0.5183744465528146
User 37811 AUC after training: 0.5182795698924731
User 37811 does not improve AUC. Reverting changes.
Training on augumented user 37277 26/50 current_auc = 0.5183744465528146
User 37277 AUC after training: 0.5188488298545224
User 37277 improves AUC. Keeping the model.
Training on augumented user 63031 27/50 current_auc = 0.5188488298545224
User 63031 AUC after training: 0.5128399746995573
User 63031 does not improve AUC. Reverting changes.
Training on augumented user 106005 28/50 current_auc = 0.5188488298545224
User 106005 AUC after training: 0.5173940543959519
User 106005 does not improve AUC. Reverting changes.
Training on augumented user 121933 29/50 current_auc = 0.5188488298545224
User 121933 AUC after training: 0.5191650853889943
User 121933 improves AUC. Keeping the model.
Training on augumented user 60964 30/50 current_auc = 0.5191650853889943
User 60964 AUC after training: 0.5197343453510437
User 60964 improves AUC. Keeping the model.
Training on augumented user 12982 31/50 current_auc = 0.5197343453510437
User 12982 AUC after training: 0.5178684376976597
User 12982 does not improve AUC. Reverting changes.
Training on augumented user 5381 32/50 current_auc = 0.5197343453510437
User 5381 AUC after training: 0.5206831119544592
User 5381 improves AUC. Keeping the model.
Training on augumented user 23565 33/50 current_auc = 0.5206831119544592
User 23565 AUC after training: 0.5190069576217584
User 23565 does not improve AUC. Reverting changes.
Training on augumented user 29391 34/50 current_auc = 0.5206831119544592
User 29391 AUC after training: 0.515876027830487
User 29391 does not improve AUC. Reverting changes.
Training on augumented user 129422 35/50 current_auc = 0.5206831119544592
User 129422 AUC after training: 0.5200189753320683
User 129422 does not improve AUC. Reverting changes.
Training on augumented user 128944 36/50 current_auc = 0.5206831119544592
User 128944 AUC after training: 0.5205882352941176
User 128944 does not improve AUC. Reverting changes.
Training on augumented user 92675 37/50 current_auc = 0.5206831119544592
User 92675 AUC after training: 0.5195762175838077
User 92675 does not improve AUC. Reverting changes.
Training on augumented user 25649 38/50 current_auc = 0.5206831119544592
User 25649 AUC after training: 0.5200822264389626
User 25649 does not improve AUC. Reverting changes.
Training on augumented user 8782 39/50 current_auc = 0.5206831119544592
User 8782 AUC after training: 0.5205882352941177
User 8782 does not improve AUC. Reverting changes.
Training on augumented user 104349 40/50 current_auc = 0.5206831119544592
User 104349 AUC after training: 0.5164452877925364
User 104349 does not improve AUC. Reverting changes.
Training on augumented user 87086 41/50 current_auc = 0.5206831119544592
User 87086 AUC after training: 0.5207779886148008
User 87086 improves AUC. Keeping the model.
Training on augumented user 30017 42/50 current_auc = 0.5207779886148008
User 30017 AUC after training: 0.5199873497786212
User 30017 does not improve AUC. Reverting changes.
Training on augumented user 109730 43/50 current_auc = 0.5207779886148008
User 109730 AUC after training: 0.5178684376976597
User 109730 does not improve AUC. Reverting changes.
Training on augumented user 11377 44/50 current_auc = 0.5207779886148008
User 11377 AUC after training: 0.5205249841872233
User 11377 does not improve AUC. Reverting changes.
Training on augumented user 113864 45/50 current_auc = 0.5207779886148008
User 113864 AUC after training: 0.5179633143580012
User 113864 does not improve AUC. Reverting changes.
Training on augumented user 66559 46/50 current_auc = 0.5207779886148008
User 66559 AUC after training: 0.5203984819734345
User 66559 does not improve AUC. Reverting changes.
Training on augumented user 75931 47/50 current_auc = 0.5207779886148008
User 75931 AUC after training: 0.5210942441492726
User 75931 improves AUC. Keeping the model.
Training on augumented user 13904 48/50 current_auc = 0.5210942441492726
User 13904 AUC after training: 0.5206198608475648
User 13904 does not improve AUC. Reverting changes.
Training on augumented user 52615 49/50 current_auc = 0.5210942441492726
User 52615 AUC after training: 0.520999367488931
User 52615 does not improve AUC. Reverting changes.
[2024-12-02 18:13:04.524374] start test user 28488 60/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:05.097314] start test user 28488 60/568 recall augumented users by random, augumented_users = [62121, 25434, 15835, 51406, 120530, 89864, 17164, 102395, 75699, 48767, 130371, 118202, 97183, 11229, 89218, 83441, 27257, 82824, 91766, 9931, 51841, 104417, 114064, 79913, 85939, 126007, 127903, 131229, 97095, 7555, 10169, 13483, 116236, 57182, 130551, 112794, 112152, 121041, 112521, 79838, 10862, 24264, 109669, 113301, 54283, 79656, 115561, 46184, 103349, 52986]
[2024-12-02 18:13:05.113625] user = 28488 Cloud 60/568
[2024-12-02 18:13:05.132612] user = 28488 Local 60/568
[2024-12-02 18:13:05.181607] user = 28488 Local+ 60/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:07.514369] user = 28488 MPDA- 60/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7023809523809523
Training on augumented user 62121 0/50 current_auc = 0.7023809523809523
User 62121 AUC after training: 0.7023809523809523
User 62121 does not improve AUC. Reverting changes.
Training on augumented user 25434 1/50 current_auc = 0.7023809523809523
User 25434 AUC after training: 0.7023809523809523
User 25434 does not improve AUC. Reverting changes.
Training on augumented user 15835 2/50 current_auc = 0.7023809523809523
User 15835 AUC after training: 0.7023809523809523
User 15835 does not improve AUC. Reverting changes.
Training on augumented user 51406 3/50 current_auc = 0.7023809523809523
User 51406 AUC after training: 0.7023809523809523
User 51406 does not improve AUC. Reverting changes.
Training on augumented user 120530 4/50 current_auc = 0.7023809523809523
User 120530 AUC after training: 0.6984126984126984
User 120530 does not improve AUC. Reverting changes.
Training on augumented user 89864 5/50 current_auc = 0.7023809523809523
User 89864 AUC after training: 0.6984126984126984
User 89864 does not improve AUC. Reverting changes.
Training on augumented user 17164 6/50 current_auc = 0.7023809523809523
User 17164 AUC after training: 0.6984126984126984
User 17164 does not improve AUC. Reverting changes.
Training on augumented user 102395 7/50 current_auc = 0.7023809523809523
User 102395 AUC after training: 0.6984126984126984
User 102395 does not improve AUC. Reverting changes.
Training on augumented user 75699 8/50 current_auc = 0.7023809523809523
User 75699 AUC after training: 0.7023809523809523
User 75699 does not improve AUC. Reverting changes.
Training on augumented user 48767 9/50 current_auc = 0.7023809523809523
User 48767 AUC after training: 0.7023809523809523
User 48767 does not improve AUC. Reverting changes.
Training on augumented user 130371 10/50 current_auc = 0.7023809523809523
User 130371 AUC after training: 0.7023809523809523
User 130371 does not improve AUC. Reverting changes.
Training on augumented user 118202 11/50 current_auc = 0.7023809523809523
User 118202 AUC after training: 0.7023809523809523
User 118202 does not improve AUC. Reverting changes.
Training on augumented user 97183 12/50 current_auc = 0.7023809523809523
User 97183 AUC after training: 0.6984126984126984
User 97183 does not improve AUC. Reverting changes.
Training on augumented user 11229 13/50 current_auc = 0.7023809523809523
User 11229 AUC after training: 0.6904761904761905
User 11229 does not improve AUC. Reverting changes.
Training on augumented user 89218 14/50 current_auc = 0.7023809523809523
User 89218 AUC after training: 0.6944444444444444
User 89218 does not improve AUC. Reverting changes.
Training on augumented user 83441 15/50 current_auc = 0.7023809523809523
User 83441 AUC after training: 0.7023809523809523
User 83441 does not improve AUC. Reverting changes.
Training on augumented user 27257 16/50 current_auc = 0.7023809523809523
User 27257 AUC after training: 0.7023809523809523
User 27257 does not improve AUC. Reverting changes.
Training on augumented user 82824 17/50 current_auc = 0.7023809523809523
User 82824 AUC after training: 0.7023809523809523
User 82824 does not improve AUC. Reverting changes.
Training on augumented user 91766 18/50 current_auc = 0.7023809523809523
User 91766 AUC after training: 0.6984126984126984
User 91766 does not improve AUC. Reverting changes.
Training on augumented user 9931 19/50 current_auc = 0.7023809523809523
User 9931 AUC after training: 0.7023809523809523
User 9931 does not improve AUC. Reverting changes.
Training on augumented user 51841 20/50 current_auc = 0.7023809523809523
User 51841 AUC after training: 0.6984126984126984
User 51841 does not improve AUC. Reverting changes.
Training on augumented user 104417 21/50 current_auc = 0.7023809523809523
User 104417 AUC after training: 0.7023809523809523
User 104417 does not improve AUC. Reverting changes.
Training on augumented user 114064 22/50 current_auc = 0.7023809523809523
User 114064 AUC after training: 0.6984126984126984
User 114064 does not improve AUC. Reverting changes.
Training on augumented user 79913 23/50 current_auc = 0.7023809523809523
User 79913 AUC after training: 0.7023809523809523
User 79913 does not improve AUC. Reverting changes.
Training on augumented user 85939 24/50 current_auc = 0.7023809523809523
User 85939 AUC after training: 0.7023809523809523
User 85939 does not improve AUC. Reverting changes.
Training on augumented user 126007 25/50 current_auc = 0.7023809523809523
User 126007 AUC after training: 0.7023809523809523
User 126007 does not improve AUC. Reverting changes.
Training on augumented user 127903 26/50 current_auc = 0.7023809523809523
User 127903 AUC after training: 0.7023809523809523
User 127903 does not improve AUC. Reverting changes.
Training on augumented user 131229 27/50 current_auc = 0.7023809523809523
User 131229 AUC after training: 0.7023809523809523
User 131229 does not improve AUC. Reverting changes.
Training on augumented user 97095 28/50 current_auc = 0.7023809523809523
User 97095 AUC after training: 0.7023809523809523
User 97095 does not improve AUC. Reverting changes.
Training on augumented user 7555 29/50 current_auc = 0.7023809523809523
User 7555 AUC after training: 0.6984126984126984
User 7555 does not improve AUC. Reverting changes.
Training on augumented user 10169 30/50 current_auc = 0.7023809523809523
User 10169 AUC after training: 0.6984126984126984
User 10169 does not improve AUC. Reverting changes.
Training on augumented user 13483 31/50 current_auc = 0.7023809523809523
User 13483 AUC after training: 0.6984126984126984
User 13483 does not improve AUC. Reverting changes.
Training on augumented user 116236 32/50 current_auc = 0.7023809523809523
User 116236 AUC after training: 0.7023809523809523
User 116236 does not improve AUC. Reverting changes.
Training on augumented user 57182 33/50 current_auc = 0.7023809523809523
User 57182 AUC after training: 0.7023809523809523
User 57182 does not improve AUC. Reverting changes.
Training on augumented user 130551 34/50 current_auc = 0.7023809523809523
User 130551 AUC after training: 0.6984126984126984
User 130551 does not improve AUC. Reverting changes.
Training on augumented user 112794 35/50 current_auc = 0.7023809523809523
User 112794 AUC after training: 0.7023809523809523
User 112794 does not improve AUC. Reverting changes.
Training on augumented user 112152 36/50 current_auc = 0.7023809523809523
User 112152 AUC after training: 0.7023809523809523
User 112152 does not improve AUC. Reverting changes.
Training on augumented user 121041 37/50 current_auc = 0.7023809523809523
User 121041 AUC after training: 0.7023809523809523
User 121041 does not improve AUC. Reverting changes.
Training on augumented user 112521 38/50 current_auc = 0.7023809523809523
User 112521 AUC after training: 0.7023809523809523
User 112521 does not improve AUC. Reverting changes.
Training on augumented user 79838 39/50 current_auc = 0.7023809523809523
User 79838 AUC after training: 0.6984126984126984
User 79838 does not improve AUC. Reverting changes.
Training on augumented user 10862 40/50 current_auc = 0.7023809523809523
User 10862 AUC after training: 0.7023809523809523
User 10862 does not improve AUC. Reverting changes.
Training on augumented user 24264 41/50 current_auc = 0.7023809523809523
User 24264 AUC after training: 0.7023809523809523
User 24264 does not improve AUC. Reverting changes.
Training on augumented user 109669 42/50 current_auc = 0.7023809523809523
User 109669 AUC after training: 0.7023809523809523
User 109669 does not improve AUC. Reverting changes.
Training on augumented user 113301 43/50 current_auc = 0.7023809523809523
User 113301 AUC after training: 0.7023809523809523
User 113301 does not improve AUC. Reverting changes.
Training on augumented user 54283 44/50 current_auc = 0.7023809523809523
User 54283 AUC after training: 0.6944444444444444
User 54283 does not improve AUC. Reverting changes.
Training on augumented user 79656 45/50 current_auc = 0.7023809523809523
User 79656 AUC after training: 0.7023809523809523
User 79656 does not improve AUC. Reverting changes.
Training on augumented user 115561 46/50 current_auc = 0.7023809523809523
User 115561 AUC after training: 0.6984126984126984
User 115561 does not improve AUC. Reverting changes.
Training on augumented user 46184 47/50 current_auc = 0.7023809523809523
User 46184 AUC after training: 0.6984126984126984
User 46184 does not improve AUC. Reverting changes.
Training on augumented user 103349 48/50 current_auc = 0.7023809523809523
User 103349 AUC after training: 0.6984126984126984
User 103349 does not improve AUC. Reverting changes.
Training on augumented user 52986 49/50 current_auc = 0.7023809523809523
User 52986 AUC after training: 0.7023809523809523
User 52986 does not improve AUC. Reverting changes.
[2024-12-02 18:13:40.837009] start test user 28526 61/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:41.373994] start test user 28526 61/568 recall augumented users by random, augumented_users = [19457, 11430, 31911, 7636, 51723, 109607, 92163, 45644, 37907, 65193, 113210, 105492, 46571, 96259, 34988, 108742, 42397, 75511, 138253, 81135, 102844, 44636, 3613, 67588, 66274, 55111, 39460, 102822, 11431, 86956, 130801, 69284, 59462, 89920, 3184, 118770, 101126, 91181, 88067, 72460, 95796, 92795, 121649, 75309, 148, 105617, 81097, 626, 11524, 133059]
[2024-12-02 18:13:41.401349] user = 28526 Cloud 61/568
[2024-12-02 18:13:41.427888] user = 28526 Local 61/568
[2024-12-02 18:13:41.491402] user = 28526 Local+ 61/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:44.121028] user = 28526 MPDA- 61/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6700980392156863
Training on augumented user 19457 0/50 current_auc = 0.6700980392156863
User 19457 AUC after training: 0.6725490196078431
User 19457 improves AUC. Keeping the model.
Training on augumented user 11430 1/50 current_auc = 0.6725490196078431
User 11430 AUC after training: 0.6735294117647058
User 11430 improves AUC. Keeping the model.
Training on augumented user 31911 2/50 current_auc = 0.6735294117647058
User 31911 AUC after training: 0.6710784313725491
User 31911 does not improve AUC. Reverting changes.
Training on augumented user 7636 3/50 current_auc = 0.6735294117647058
User 7636 AUC after training: 0.6715686274509804
User 7636 does not improve AUC. Reverting changes.
Training on augumented user 51723 4/50 current_auc = 0.6735294117647058
User 51723 AUC after training: 0.6725490196078431
User 51723 does not improve AUC. Reverting changes.
Training on augumented user 109607 5/50 current_auc = 0.6735294117647058
User 109607 AUC after training: 0.6710784313725491
User 109607 does not improve AUC. Reverting changes.
Training on augumented user 92163 6/50 current_auc = 0.6735294117647058
User 92163 AUC after training: 0.6705882352941177
User 92163 does not improve AUC. Reverting changes.
Training on augumented user 45644 7/50 current_auc = 0.6735294117647058
User 45644 AUC after training: 0.6720588235294118
User 45644 does not improve AUC. Reverting changes.
Training on augumented user 37907 8/50 current_auc = 0.6735294117647058
User 37907 AUC after training: 0.6720588235294117
User 37907 does not improve AUC. Reverting changes.
Training on augumented user 65193 9/50 current_auc = 0.6735294117647058
User 65193 AUC after training: 0.6735294117647058
User 65193 does not improve AUC. Reverting changes.
Training on augumented user 113210 10/50 current_auc = 0.6735294117647058
User 113210 AUC after training: 0.6730392156862745
User 113210 does not improve AUC. Reverting changes.
Training on augumented user 105492 11/50 current_auc = 0.6735294117647058
User 105492 AUC after training: 0.675
User 105492 improves AUC. Keeping the model.
Training on augumented user 46571 12/50 current_auc = 0.675
User 46571 AUC after training: 0.6745098039215687
User 46571 does not improve AUC. Reverting changes.
Training on augumented user 96259 13/50 current_auc = 0.675
User 96259 AUC after training: 0.6745098039215686
User 96259 does not improve AUC. Reverting changes.
Training on augumented user 34988 14/50 current_auc = 0.675
User 34988 AUC after training: 0.6749999999999999
User 34988 does not improve AUC. Reverting changes.
Training on augumented user 108742 15/50 current_auc = 0.675
User 108742 AUC after training: 0.675
User 108742 does not improve AUC. Reverting changes.
Training on augumented user 42397 16/50 current_auc = 0.675
User 42397 AUC after training: 0.6735294117647059
User 42397 does not improve AUC. Reverting changes.
Training on augumented user 75511 17/50 current_auc = 0.675
User 75511 AUC after training: 0.6730392156862746
User 75511 does not improve AUC. Reverting changes.
Training on augumented user 138253 18/50 current_auc = 0.675
User 138253 AUC after training: 0.6740196078431373
User 138253 does not improve AUC. Reverting changes.
Training on augumented user 81135 19/50 current_auc = 0.675
User 81135 AUC after training: 0.6735294117647059
User 81135 does not improve AUC. Reverting changes.
Training on augumented user 102844 20/50 current_auc = 0.675
User 102844 AUC after training: 0.6730392156862745
User 102844 does not improve AUC. Reverting changes.
Training on augumented user 44636 21/50 current_auc = 0.675
User 44636 AUC after training: 0.6740196078431373
User 44636 does not improve AUC. Reverting changes.
Training on augumented user 3613 22/50 current_auc = 0.675
User 3613 AUC after training: 0.6715686274509804
User 3613 does not improve AUC. Reverting changes.
Training on augumented user 67588 23/50 current_auc = 0.675
User 67588 AUC after training: 0.6720588235294118
User 67588 does not improve AUC. Reverting changes.
Training on augumented user 66274 24/50 current_auc = 0.675
User 66274 AUC after training: 0.6735294117647059
User 66274 does not improve AUC. Reverting changes.
Training on augumented user 55111 25/50 current_auc = 0.675
User 55111 AUC after training: 0.6745098039215686
User 55111 does not improve AUC. Reverting changes.
Training on augumented user 39460 26/50 current_auc = 0.675
User 39460 AUC after training: 0.6735294117647059
User 39460 does not improve AUC. Reverting changes.
Training on augumented user 102822 27/50 current_auc = 0.675
User 102822 AUC after training: 0.6740196078431373
User 102822 does not improve AUC. Reverting changes.
Training on augumented user 11431 28/50 current_auc = 0.675
User 11431 AUC after training: 0.6720588235294118
User 11431 does not improve AUC. Reverting changes.
Training on augumented user 86956 29/50 current_auc = 0.675
User 86956 AUC after training: 0.6730392156862746
User 86956 does not improve AUC. Reverting changes.
Training on augumented user 130801 30/50 current_auc = 0.675
User 130801 AUC after training: 0.6745098039215686
User 130801 does not improve AUC. Reverting changes.
Training on augumented user 69284 31/50 current_auc = 0.675
User 69284 AUC after training: 0.6730392156862745
User 69284 does not improve AUC. Reverting changes.
Training on augumented user 59462 32/50 current_auc = 0.675
User 59462 AUC after training: 0.6730392156862746
User 59462 does not improve AUC. Reverting changes.
Training on augumented user 89920 33/50 current_auc = 0.675
User 89920 AUC after training: 0.6735294117647058
User 89920 does not improve AUC. Reverting changes.
Training on augumented user 3184 34/50 current_auc = 0.675
User 3184 AUC after training: 0.6720588235294118
User 3184 does not improve AUC. Reverting changes.
Training on augumented user 118770 35/50 current_auc = 0.675
User 118770 AUC after training: 0.6749999999999999
User 118770 does not improve AUC. Reverting changes.
Training on augumented user 101126 36/50 current_auc = 0.675
User 101126 AUC after training: 0.6745098039215687
User 101126 does not improve AUC. Reverting changes.
Training on augumented user 91181 37/50 current_auc = 0.675
User 91181 AUC after training: 0.6740196078431372
User 91181 does not improve AUC. Reverting changes.
Training on augumented user 88067 38/50 current_auc = 0.675
User 88067 AUC after training: 0.6735294117647059
User 88067 does not improve AUC. Reverting changes.
Training on augumented user 72460 39/50 current_auc = 0.675
User 72460 AUC after training: 0.6740196078431372
User 72460 does not improve AUC. Reverting changes.
Training on augumented user 95796 40/50 current_auc = 0.675
User 95796 AUC after training: 0.6725490196078432
User 95796 does not improve AUC. Reverting changes.
Training on augumented user 92795 41/50 current_auc = 0.675
User 92795 AUC after training: 0.6730392156862746
User 92795 does not improve AUC. Reverting changes.
Training on augumented user 121649 42/50 current_auc = 0.675
User 121649 AUC after training: 0.6730392156862746
User 121649 does not improve AUC. Reverting changes.
Training on augumented user 75309 43/50 current_auc = 0.675
User 75309 AUC after training: 0.6705882352941177
User 75309 does not improve AUC. Reverting changes.
Training on augumented user 148 44/50 current_auc = 0.675
User 148 AUC after training: 0.6745098039215686
User 148 does not improve AUC. Reverting changes.
Training on augumented user 105617 45/50 current_auc = 0.675
User 105617 AUC after training: 0.6745098039215686
User 105617 does not improve AUC. Reverting changes.
Training on augumented user 81097 46/50 current_auc = 0.675
User 81097 AUC after training: 0.6735294117647059
User 81097 does not improve AUC. Reverting changes.
Training on augumented user 626 47/50 current_auc = 0.675
User 626 AUC after training: 0.6745098039215687
User 626 does not improve AUC. Reverting changes.
Training on augumented user 11524 48/50 current_auc = 0.675
User 11524 AUC after training: 0.6720588235294118
User 11524 does not improve AUC. Reverting changes.
Training on augumented user 133059 49/50 current_auc = 0.675
User 133059 AUC after training: 0.6720588235294118
User 133059 does not improve AUC. Reverting changes.
[2024-12-02 18:14:18.993956] start test user 28529 62/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:19.441556] start test user 28529 62/568 recall augumented users by random, augumented_users = [55523, 131705, 122392, 82090, 2452, 131458, 98044, 69308, 50009, 72693, 128141, 39829, 114371, 132552, 3818, 108482, 130799, 99616, 25006, 93897, 102607, 29240, 2272, 126911, 89988, 126808, 9712, 22659, 6535, 25528, 96145, 16330, 116109, 40414, 81171, 26969, 36890, 63469, 78980, 59752, 19879, 112105, 112434, 22038, 5721, 130918, 51501, 66488, 99443, 7146]
[2024-12-02 18:14:19.458777] user = 28529 Cloud 62/568
[2024-12-02 18:14:19.510384] user = 28529 Local 62/568
[2024-12-02 18:14:19.627361] user = 28529 Local+ 62/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:21.909029] user = 28529 MPDA- 62/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.718724925867783
Training on augumented user 55523 0/50 current_auc = 0.718724925867783
User 55523 AUC after training: 0.71865515436944
User 55523 does not improve AUC. Reverting changes.
Training on augumented user 131705 1/50 current_auc = 0.718724925867783
User 131705 AUC after training: 0.7185504971219258
User 131705 does not improve AUC. Reverting changes.
Training on augumented user 122392 2/50 current_auc = 0.718724925867783
User 122392 AUC after training: 0.7184807256235828
User 122392 does not improve AUC. Reverting changes.
Training on augumented user 82090 3/50 current_auc = 0.718724925867783
User 82090 AUC after training: 0.7187074829931973
User 82090 does not improve AUC. Reverting changes.
Training on augumented user 2452 4/50 current_auc = 0.718724925867783
User 2452 AUC after training: 0.7186813186813187
User 2452 does not improve AUC. Reverting changes.
Training on augumented user 131458 5/50 current_auc = 0.718724925867783
User 131458 AUC after training: 0.7180751787894645
User 131458 does not improve AUC. Reverting changes.
Training on augumented user 98044 6/50 current_auc = 0.718724925867783
User 98044 AUC after training: 0.7187336473050758
User 98044 improves AUC. Keeping the model.
Training on augumented user 69308 7/50 current_auc = 0.7187336473050758
User 69308 AUC after training: 0.7185156113727543
User 69308 does not improve AUC. Reverting changes.
Training on augumented user 50009 8/50 current_auc = 0.7187336473050758
User 50009 AUC after training: 0.7186987615559044
User 50009 does not improve AUC. Reverting changes.
Training on augumented user 72693 9/50 current_auc = 0.7187336473050758
User 72693 AUC after training: 0.7186638758067329
User 72693 does not improve AUC. Reverting changes.
Training on augumented user 128141 10/50 current_auc = 0.7187336473050758
User 128141 AUC after training: 0.7186159079016222
User 128141 does not improve AUC. Reverting changes.
Training on augumented user 39829 11/50 current_auc = 0.7187336473050758
User 39829 AUC after training: 0.7190040118611547
User 39829 improves AUC. Keeping the model.
Training on augumented user 114371 12/50 current_auc = 0.7190040118611547
User 114371 AUC after training: 0.7191261119832548
User 114371 improves AUC. Keeping the model.
Training on augumented user 132552 13/50 current_auc = 0.7191261119832548
User 132552 AUC after training: 0.7189952904238618
User 132552 does not improve AUC. Reverting changes.
Training on augumented user 3818 14/50 current_auc = 0.7191261119832548
User 3818 AUC after training: 0.7191304727019013
User 3818 improves AUC. Keeping the model.
Training on augumented user 108482 15/50 current_auc = 0.7191304727019013
User 108482 AUC after training: 0.7189298796441654
User 108482 does not improve AUC. Reverting changes.
Training on augumented user 130799 16/50 current_auc = 0.7191304727019013
User 130799 AUC after training: 0.7185504971219258
User 130799 does not improve AUC. Reverting changes.
Training on augumented user 99616 17/50 current_auc = 0.7191304727019013
User 99616 AUC after training: 0.7190650619222048
User 99616 does not improve AUC. Reverting changes.
Training on augumented user 25006 18/50 current_auc = 0.7191304727019013
User 25006 AUC after training: 0.7188077795220653
User 25006 does not improve AUC. Reverting changes.
Training on augumented user 93897 19/50 current_auc = 0.7191304727019013
User 93897 AUC after training: 0.7187205651491366
User 93897 does not improve AUC. Reverting changes.
Training on augumented user 102607 20/50 current_auc = 0.7191304727019013
User 102607 AUC after training: 0.7194226408512122
User 102607 improves AUC. Keeping the model.
Training on augumented user 29240 21/50 current_auc = 0.7194226408512122
User 29240 AUC after training: 0.7192656549799408
User 29240 does not improve AUC. Reverting changes.
Training on augumented user 2272 22/50 current_auc = 0.7194226408512122
User 2272 AUC after training: 0.7195970695970695
User 2272 improves AUC. Keeping the model.
Training on augumented user 126911 23/50 current_auc = 0.7195970695970695
User 126911 AUC after training: 0.719379033664748
User 126911 does not improve AUC. Reverting changes.
Training on augumented user 89988 24/50 current_auc = 0.7195970695970695
User 89988 AUC after training: 0.7198674341531485
User 89988 improves AUC. Keeping the model.
Training on augumented user 126808 25/50 current_auc = 0.7198674341531485
User 126808 AUC after training: 0.7196232339089482
User 126808 does not improve AUC. Reverting changes.
Training on augumented user 9712 26/50 current_auc = 0.7198674341531485
User 9712 AUC after training: 0.7196930054072912
User 9712 does not improve AUC. Reverting changes.
Training on augumented user 22659 27/50 current_auc = 0.7198674341531485
User 22659 AUC after training: 0.7197409733124019
User 22659 does not improve AUC. Reverting changes.
Training on augumented user 6535 28/50 current_auc = 0.7198674341531485
User 6535 AUC after training: 0.7197627769056341
User 6535 does not improve AUC. Reverting changes.
Training on augumented user 25528 29/50 current_auc = 0.7198674341531485
User 25528 AUC after training: 0.7193441479155764
User 25528 does not improve AUC. Reverting changes.
Training on augumented user 96145 30/50 current_auc = 0.7198674341531485
User 96145 AUC after training: 0.7200069771498343
User 96145 improves AUC. Keeping the model.
Training on augumented user 16330 31/50 current_auc = 0.7200069771498343
User 16330 AUC after training: 0.7196668410954125
User 16330 does not improve AUC. Reverting changes.
Training on augumented user 116109 32/50 current_auc = 0.7200069771498343
User 116109 AUC after training: 0.7199110413396128
User 116109 does not improve AUC. Reverting changes.
Training on augumented user 40414 33/50 current_auc = 0.7200069771498343
User 40414 AUC after training: 0.7201901273329845
User 40414 improves AUC. Keeping the model.
Training on augumented user 81171 34/50 current_auc = 0.7201901273329845
User 81171 AUC after training: 0.7188208616780045
User 81171 does not improve AUC. Reverting changes.
Training on augumented user 26969 35/50 current_auc = 0.7201901273329845
User 26969 AUC after training: 0.7205302633874062
User 26969 improves AUC. Keeping the model.
Training on augumented user 36890 36/50 current_auc = 0.7205302633874062
User 36890 AUC after training: 0.7201377987092272
User 36890 does not improve AUC. Reverting changes.
Training on augumented user 63469 37/50 current_auc = 0.7205302633874062
User 63469 AUC after training: 0.7201116343973487
User 63469 does not improve AUC. Reverting changes.
Training on augumented user 78980 38/50 current_auc = 0.7205302633874062
User 78980 AUC after training: 0.7206523635095063
User 78980 improves AUC. Keeping the model.
Training on augumented user 59752 39/50 current_auc = 0.7206523635095063
User 59752 AUC after training: 0.7205825920111635
User 59752 does not improve AUC. Reverting changes.
Training on augumented user 19879 40/50 current_auc = 0.7206523635095063
User 19879 AUC after training: 0.7203907203907203
User 19879 does not improve AUC. Reverting changes.
Training on augumented user 112105 41/50 current_auc = 0.7206523635095063
User 112105 AUC after training: 0.720739577882435
User 112105 improves AUC. Keeping the model.
Training on augumented user 112434 42/50 current_auc = 0.720739577882435
User 112434 AUC after training: 0.7207831850688994
User 112434 improves AUC. Keeping the model.
Training on augumented user 22038 43/50 current_auc = 0.7207831850688994
User 22038 AUC after training: 0.7204081632653061
User 22038 does not improve AUC. Reverting changes.
Training on augumented user 5721 44/50 current_auc = 0.7207831850688994
User 5721 AUC after training: 0.7205215419501135
User 5721 does not improve AUC. Reverting changes.
Training on augumented user 130918 45/50 current_auc = 0.7207831850688994
User 130918 AUC after training: 0.7201552415838128
User 130918 does not improve AUC. Reverting changes.
Training on augumented user 51501 46/50 current_auc = 0.7207831850688994
User 51501 AUC after training: 0.7197453340310482
User 51501 does not improve AUC. Reverting changes.
Training on augumented user 66488 47/50 current_auc = 0.7207831850688994
User 66488 AUC after training: 0.7206523635095063
User 66488 does not improve AUC. Reverting changes.
Training on augumented user 99443 48/50 current_auc = 0.7207831850688994
User 99443 AUC after training: 0.7205913134484563
User 99443 does not improve AUC. Reverting changes.
Training on augumented user 7146 49/50 current_auc = 0.7207831850688994
User 7146 AUC after training: 0.7202424559567416
User 7146 does not improve AUC. Reverting changes.
[2024-12-02 18:14:56.265874] start test user 28539 63/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:56.693004] start test user 28539 63/568 recall augumented users by random, augumented_users = [26852, 62251, 25426, 17099, 65409, 57072, 22644, 88766, 102094, 46223, 97001, 127627, 79233, 11661, 62547, 15955, 82028, 65568, 4926, 127774, 9282, 108532, 10020, 124473, 53686, 136502, 289, 10890, 26681, 41851, 116655, 58888, 94251, 22565, 130152, 27285, 43674, 98890, 3365, 114863, 119597, 18571, 102372, 84827, 87441, 62706, 84708, 52065, 96251, 46382]
[2024-12-02 18:14:56.709304] user = 28539 Cloud 63/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:14:56.715983] user = 28539 Local 63/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:14:56.773412] user = 28539 Local+ 63/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:14:59.459409] user = 28539 MPDA- 63/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 26852 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26852 AUC after training: 0.5
User 26852 does not improve AUC. Reverting changes.
Training on augumented user 62251 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62251 AUC after training: 0.5
User 62251 does not improve AUC. Reverting changes.
Training on augumented user 25426 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25426 AUC after training: 0.5
User 25426 does not improve AUC. Reverting changes.
Training on augumented user 17099 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17099 AUC after training: 0.5
User 17099 does not improve AUC. Reverting changes.
Training on augumented user 65409 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65409 AUC after training: 0.5
User 65409 does not improve AUC. Reverting changes.
Training on augumented user 57072 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57072 AUC after training: 0.5
User 57072 does not improve AUC. Reverting changes.
Training on augumented user 22644 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22644 AUC after training: 0.5
User 22644 does not improve AUC. Reverting changes.
Training on augumented user 88766 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88766 AUC after training: 0.5
User 88766 does not improve AUC. Reverting changes.
Training on augumented user 102094 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102094 AUC after training: 0.5
User 102094 does not improve AUC. Reverting changes.
Training on augumented user 46223 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46223 AUC after training: 0.5
User 46223 does not improve AUC. Reverting changes.
Training on augumented user 97001 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97001 AUC after training: 0.5
User 97001 does not improve AUC. Reverting changes.
Training on augumented user 127627 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127627 AUC after training: 0.5
User 127627 does not improve AUC. Reverting changes.
Training on augumented user 79233 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79233 AUC after training: 0.5
User 79233 does not improve AUC. Reverting changes.
Training on augumented user 11661 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11661 AUC after training: 0.5
User 11661 does not improve AUC. Reverting changes.
Training on augumented user 62547 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62547 AUC after training: 0.5
User 62547 does not improve AUC. Reverting changes.
Training on augumented user 15955 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15955 AUC after training: 0.5
User 15955 does not improve AUC. Reverting changes.
Training on augumented user 82028 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82028 AUC after training: 0.5
User 82028 does not improve AUC. Reverting changes.
Training on augumented user 65568 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65568 AUC after training: 0.5
User 65568 does not improve AUC. Reverting changes.
Training on augumented user 4926 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4926 AUC after training: 0.5
User 4926 does not improve AUC. Reverting changes.
Training on augumented user 127774 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127774 AUC after training: 0.5
User 127774 does not improve AUC. Reverting changes.
Training on augumented user 9282 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9282 AUC after training: 0.5
User 9282 does not improve AUC. Reverting changes.
Training on augumented user 108532 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108532 AUC after training: 0.5
User 108532 does not improve AUC. Reverting changes.
Training on augumented user 10020 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10020 AUC after training: 0.5
User 10020 does not improve AUC. Reverting changes.
Training on augumented user 124473 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124473 AUC after training: 0.5
User 124473 does not improve AUC. Reverting changes.
Training on augumented user 53686 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53686 AUC after training: 0.5
User 53686 does not improve AUC. Reverting changes.
Training on augumented user 136502 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136502 AUC after training: 0.5
User 136502 does not improve AUC. Reverting changes.
Training on augumented user 289 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 289 AUC after training: 0.5
User 289 does not improve AUC. Reverting changes.
Training on augumented user 10890 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10890 AUC after training: 0.5
User 10890 does not improve AUC. Reverting changes.
Training on augumented user 26681 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26681 AUC after training: 0.5
User 26681 does not improve AUC. Reverting changes.
Training on augumented user 41851 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41851 AUC after training: 0.5
User 41851 does not improve AUC. Reverting changes.
Training on augumented user 116655 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116655 AUC after training: 0.5
User 116655 does not improve AUC. Reverting changes.
Training on augumented user 58888 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58888 AUC after training: 0.5
User 58888 does not improve AUC. Reverting changes.
Training on augumented user 94251 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94251 AUC after training: 0.5
User 94251 does not improve AUC. Reverting changes.
Training on augumented user 22565 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22565 AUC after training: 0.5
User 22565 does not improve AUC. Reverting changes.
Training on augumented user 130152 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130152 AUC after training: 0.5
User 130152 does not improve AUC. Reverting changes.
Training on augumented user 27285 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27285 AUC after training: 0.5
User 27285 does not improve AUC. Reverting changes.
Training on augumented user 43674 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43674 AUC after training: 0.5
User 43674 does not improve AUC. Reverting changes.
Training on augumented user 98890 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98890 AUC after training: 0.5
User 98890 does not improve AUC. Reverting changes.
Training on augumented user 3365 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3365 AUC after training: 0.5
User 3365 does not improve AUC. Reverting changes.
Training on augumented user 114863 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114863 AUC after training: 0.5
User 114863 does not improve AUC. Reverting changes.
Training on augumented user 119597 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119597 AUC after training: 0.5
User 119597 does not improve AUC. Reverting changes.
Training on augumented user 18571 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18571 AUC after training: 0.5
User 18571 does not improve AUC. Reverting changes.
Training on augumented user 102372 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102372 AUC after training: 0.5
User 102372 does not improve AUC. Reverting changes.
Training on augumented user 84827 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84827 AUC after training: 0.5
User 84827 does not improve AUC. Reverting changes.
Training on augumented user 87441 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87441 AUC after training: 0.5
User 87441 does not improve AUC. Reverting changes.
Training on augumented user 62706 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62706 AUC after training: 0.5
User 62706 does not improve AUC. Reverting changes.
Training on augumented user 84708 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84708 AUC after training: 0.5
User 84708 does not improve AUC. Reverting changes.
Training on augumented user 52065 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52065 AUC after training: 0.5
User 52065 does not improve AUC. Reverting changes.
Training on augumented user 96251 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96251 AUC after training: 0.5
User 96251 does not improve AUC. Reverting changes.
Training on augumented user 46382 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46382 AUC after training: 0.5
User 46382 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:15:33.899260] start test user 28598 64/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:34.575795] start test user 28598 64/568 recall augumented users by random, augumented_users = [100032, 21738, 126703, 25411, 39232, 126496, 133044, 44627, 94312, 100217, 38158, 104834, 70312, 50659, 2014, 3494, 125069, 31510, 91691, 57529, 30833, 95837, 37574, 70971, 93974, 115180, 48516, 95705, 60238, 128368, 59713, 8140, 53226, 81433, 6108, 20127, 20433, 59777, 21296, 127340, 58406, 123302, 115242, 40602, 32544, 44249, 69798, 63132, 111415, 135315]
[2024-12-02 18:15:34.598023] user = 28598 Cloud 64/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:15:34.612897] user = 28598 Local 64/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:15:34.756270] user = 28598 Local+ 64/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:15:37.728465] user = 28598 MPDA- 64/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 100032 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100032 AUC after training: 0.5
User 100032 does not improve AUC. Reverting changes.
Training on augumented user 21738 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21738 AUC after training: 0.5
User 21738 does not improve AUC. Reverting changes.
Training on augumented user 126703 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126703 AUC after training: 0.5
User 126703 does not improve AUC. Reverting changes.
Training on augumented user 25411 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25411 AUC after training: 0.5
User 25411 does not improve AUC. Reverting changes.
Training on augumented user 39232 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39232 AUC after training: 0.5
User 39232 does not improve AUC. Reverting changes.
Training on augumented user 126496 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126496 AUC after training: 0.5
User 126496 does not improve AUC. Reverting changes.
Training on augumented user 133044 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133044 AUC after training: 0.5
User 133044 does not improve AUC. Reverting changes.
Training on augumented user 44627 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44627 AUC after training: 0.5
User 44627 does not improve AUC. Reverting changes.
Training on augumented user 94312 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94312 AUC after training: 0.5
User 94312 does not improve AUC. Reverting changes.
Training on augumented user 100217 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100217 AUC after training: 0.5
User 100217 does not improve AUC. Reverting changes.
Training on augumented user 38158 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38158 AUC after training: 0.5
User 38158 does not improve AUC. Reverting changes.
Training on augumented user 104834 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104834 AUC after training: 0.5
User 104834 does not improve AUC. Reverting changes.
Training on augumented user 70312 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70312 AUC after training: 0.5
User 70312 does not improve AUC. Reverting changes.
Training on augumented user 50659 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50659 AUC after training: 0.5
User 50659 does not improve AUC. Reverting changes.
Training on augumented user 2014 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2014 AUC after training: 0.5
User 2014 does not improve AUC. Reverting changes.
Training on augumented user 3494 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3494 AUC after training: 0.5
User 3494 does not improve AUC. Reverting changes.
Training on augumented user 125069 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125069 AUC after training: 0.5
User 125069 does not improve AUC. Reverting changes.
Training on augumented user 31510 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31510 AUC after training: 0.5
User 31510 does not improve AUC. Reverting changes.
Training on augumented user 91691 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91691 AUC after training: 0.5
User 91691 does not improve AUC. Reverting changes.
Training on augumented user 57529 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57529 AUC after training: 0.5
User 57529 does not improve AUC. Reverting changes.
Training on augumented user 30833 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30833 AUC after training: 0.5
User 30833 does not improve AUC. Reverting changes.
Training on augumented user 95837 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95837 AUC after training: 0.5
User 95837 does not improve AUC. Reverting changes.
Training on augumented user 37574 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37574 AUC after training: 0.5
User 37574 does not improve AUC. Reverting changes.
Training on augumented user 70971 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70971 AUC after training: 0.5
User 70971 does not improve AUC. Reverting changes.
Training on augumented user 93974 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93974 AUC after training: 0.5
User 93974 does not improve AUC. Reverting changes.
Training on augumented user 115180 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115180 AUC after training: 0.5
User 115180 does not improve AUC. Reverting changes.
Training on augumented user 48516 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48516 AUC after training: 0.5
User 48516 does not improve AUC. Reverting changes.
Training on augumented user 95705 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95705 AUC after training: 0.5
User 95705 does not improve AUC. Reverting changes.
Training on augumented user 60238 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60238 AUC after training: 0.5
User 60238 does not improve AUC. Reverting changes.
Training on augumented user 128368 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128368 AUC after training: 0.5
User 128368 does not improve AUC. Reverting changes.
Training on augumented user 59713 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59713 AUC after training: 0.5
User 59713 does not improve AUC. Reverting changes.
Training on augumented user 8140 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8140 AUC after training: 0.5
User 8140 does not improve AUC. Reverting changes.
Training on augumented user 53226 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53226 AUC after training: 0.5
User 53226 does not improve AUC. Reverting changes.
Training on augumented user 81433 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81433 AUC after training: 0.5
User 81433 does not improve AUC. Reverting changes.
Training on augumented user 6108 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6108 AUC after training: 0.5
User 6108 does not improve AUC. Reverting changes.
Training on augumented user 20127 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20127 AUC after training: 0.5
User 20127 does not improve AUC. Reverting changes.
Training on augumented user 20433 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20433 AUC after training: 0.5
User 20433 does not improve AUC. Reverting changes.
Training on augumented user 59777 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59777 AUC after training: 0.5
User 59777 does not improve AUC. Reverting changes.
Training on augumented user 21296 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21296 AUC after training: 0.5
User 21296 does not improve AUC. Reverting changes.
Training on augumented user 127340 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127340 AUC after training: 0.5
User 127340 does not improve AUC. Reverting changes.
Training on augumented user 58406 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58406 AUC after training: 0.5
User 58406 does not improve AUC. Reverting changes.
Training on augumented user 123302 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123302 AUC after training: 0.5
User 123302 does not improve AUC. Reverting changes.
Training on augumented user 115242 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115242 AUC after training: 0.5
User 115242 does not improve AUC. Reverting changes.
Training on augumented user 40602 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40602 AUC after training: 0.5
User 40602 does not improve AUC. Reverting changes.
Training on augumented user 32544 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32544 AUC after training: 0.5
User 32544 does not improve AUC. Reverting changes.
Training on augumented user 44249 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44249 AUC after training: 0.5
User 44249 does not improve AUC. Reverting changes.
Training on augumented user 69798 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69798 AUC after training: 0.5
User 69798 does not improve AUC. Reverting changes.
Training on augumented user 63132 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63132 AUC after training: 0.5
User 63132 does not improve AUC. Reverting changes.
Training on augumented user 111415 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111415 AUC after training: 0.5
User 111415 does not improve AUC. Reverting changes.
Training on augumented user 135315 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135315 AUC after training: 0.5
User 135315 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:16:04.592026] start test user 28696 65/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:05.136127] start test user 28696 65/568 recall augumented users by random, augumented_users = [48852, 67124, 58491, 61569, 60185, 122884, 66451, 105431, 113869, 87, 31224, 121981, 17018, 125491, 6668, 51144, 37880, 136543, 97974, 33226, 86920, 8180, 125535, 22923, 22058, 4682, 75827, 37320, 136301, 68441, 78061, 78249, 53062, 53220, 20807, 71063, 11245, 110229, 30064, 31361, 128819, 115362, 652, 128449, 130702, 16911, 112150, 17440, 124330, 19594]
[2024-12-02 18:16:05.156796] user = 28696 Cloud 65/568
[2024-12-02 18:16:05.190406] user = 28696 Local 65/568
[2024-12-02 18:16:05.234462] user = 28696 Local+ 65/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:08.061448] user = 28696 MPDA- 65/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 48852 0/50 current_auc = 0.0
User 48852 AUC after training: 0.0
User 48852 does not improve AUC. Reverting changes.
Training on augumented user 67124 1/50 current_auc = 0.0
User 67124 AUC after training: 0.0
User 67124 does not improve AUC. Reverting changes.
Training on augumented user 58491 2/50 current_auc = 0.0
User 58491 AUC after training: 0.0
User 58491 does not improve AUC. Reverting changes.
Training on augumented user 61569 3/50 current_auc = 0.0
User 61569 AUC after training: 0.0
User 61569 does not improve AUC. Reverting changes.
Training on augumented user 60185 4/50 current_auc = 0.0
User 60185 AUC after training: 0.0
User 60185 does not improve AUC. Reverting changes.
Training on augumented user 122884 5/50 current_auc = 0.0
User 122884 AUC after training: 0.0
User 122884 does not improve AUC. Reverting changes.
Training on augumented user 66451 6/50 current_auc = 0.0
User 66451 AUC after training: 0.0
User 66451 does not improve AUC. Reverting changes.
Training on augumented user 105431 7/50 current_auc = 0.0
User 105431 AUC after training: 0.0
User 105431 does not improve AUC. Reverting changes.
Training on augumented user 113869 8/50 current_auc = 0.0
User 113869 AUC after training: 0.0
User 113869 does not improve AUC. Reverting changes.
Training on augumented user 87 9/50 current_auc = 0.0
User 87 AUC after training: 0.0
User 87 does not improve AUC. Reverting changes.
Training on augumented user 31224 10/50 current_auc = 0.0
User 31224 AUC after training: 0.0
User 31224 does not improve AUC. Reverting changes.
Training on augumented user 121981 11/50 current_auc = 0.0
User 121981 AUC after training: 0.0
User 121981 does not improve AUC. Reverting changes.
Training on augumented user 17018 12/50 current_auc = 0.0
User 17018 AUC after training: 0.0
User 17018 does not improve AUC. Reverting changes.
Training on augumented user 125491 13/50 current_auc = 0.0
User 125491 AUC after training: 0.0
User 125491 does not improve AUC. Reverting changes.
Training on augumented user 6668 14/50 current_auc = 0.0
User 6668 AUC after training: 0.0
User 6668 does not improve AUC. Reverting changes.
Training on augumented user 51144 15/50 current_auc = 0.0
User 51144 AUC after training: 0.0
User 51144 does not improve AUC. Reverting changes.
Training on augumented user 37880 16/50 current_auc = 0.0
User 37880 AUC after training: 0.0
User 37880 does not improve AUC. Reverting changes.
Training on augumented user 136543 17/50 current_auc = 0.0
User 136543 AUC after training: 0.0
User 136543 does not improve AUC. Reverting changes.
Training on augumented user 97974 18/50 current_auc = 0.0
User 97974 AUC after training: 0.0
User 97974 does not improve AUC. Reverting changes.
Training on augumented user 33226 19/50 current_auc = 0.0
User 33226 AUC after training: 0.0
User 33226 does not improve AUC. Reverting changes.
Training on augumented user 86920 20/50 current_auc = 0.0
User 86920 AUC after training: 0.0
User 86920 does not improve AUC. Reverting changes.
Training on augumented user 8180 21/50 current_auc = 0.0
User 8180 AUC after training: 0.0
User 8180 does not improve AUC. Reverting changes.
Training on augumented user 125535 22/50 current_auc = 0.0
User 125535 AUC after training: 0.0
User 125535 does not improve AUC. Reverting changes.
Training on augumented user 22923 23/50 current_auc = 0.0
User 22923 AUC after training: 0.0
User 22923 does not improve AUC. Reverting changes.
Training on augumented user 22058 24/50 current_auc = 0.0
User 22058 AUC after training: 0.0
User 22058 does not improve AUC. Reverting changes.
Training on augumented user 4682 25/50 current_auc = 0.0
User 4682 AUC after training: 0.0
User 4682 does not improve AUC. Reverting changes.
Training on augumented user 75827 26/50 current_auc = 0.0
User 75827 AUC after training: 0.0
User 75827 does not improve AUC. Reverting changes.
Training on augumented user 37320 27/50 current_auc = 0.0
User 37320 AUC after training: 0.0
User 37320 does not improve AUC. Reverting changes.
Training on augumented user 136301 28/50 current_auc = 0.0
User 136301 AUC after training: 0.0
User 136301 does not improve AUC. Reverting changes.
Training on augumented user 68441 29/50 current_auc = 0.0
User 68441 AUC after training: 0.0
User 68441 does not improve AUC. Reverting changes.
Training on augumented user 78061 30/50 current_auc = 0.0
User 78061 AUC after training: 0.0
User 78061 does not improve AUC. Reverting changes.
Training on augumented user 78249 31/50 current_auc = 0.0
User 78249 AUC after training: 0.0
User 78249 does not improve AUC. Reverting changes.
Training on augumented user 53062 32/50 current_auc = 0.0
User 53062 AUC after training: 0.0
User 53062 does not improve AUC. Reverting changes.
Training on augumented user 53220 33/50 current_auc = 0.0
User 53220 AUC after training: 0.0
User 53220 does not improve AUC. Reverting changes.
Training on augumented user 20807 34/50 current_auc = 0.0
User 20807 AUC after training: 0.0
User 20807 does not improve AUC. Reverting changes.
Training on augumented user 71063 35/50 current_auc = 0.0
User 71063 AUC after training: 0.0
User 71063 does not improve AUC. Reverting changes.
Training on augumented user 11245 36/50 current_auc = 0.0
User 11245 AUC after training: 0.0
User 11245 does not improve AUC. Reverting changes.
Training on augumented user 110229 37/50 current_auc = 0.0
User 110229 AUC after training: 0.0
User 110229 does not improve AUC. Reverting changes.
Training on augumented user 30064 38/50 current_auc = 0.0
User 30064 AUC after training: 0.0
User 30064 does not improve AUC. Reverting changes.
Training on augumented user 31361 39/50 current_auc = 0.0
User 31361 AUC after training: 0.0
User 31361 does not improve AUC. Reverting changes.
Training on augumented user 128819 40/50 current_auc = 0.0
User 128819 AUC after training: 0.0
User 128819 does not improve AUC. Reverting changes.
Training on augumented user 115362 41/50 current_auc = 0.0
User 115362 AUC after training: 0.0
User 115362 does not improve AUC. Reverting changes.
Training on augumented user 652 42/50 current_auc = 0.0
User 652 AUC after training: 0.0
User 652 does not improve AUC. Reverting changes.
Training on augumented user 128449 43/50 current_auc = 0.0
User 128449 AUC after training: 0.0
User 128449 does not improve AUC. Reverting changes.
Training on augumented user 130702 44/50 current_auc = 0.0
User 130702 AUC after training: 0.0
User 130702 does not improve AUC. Reverting changes.
Training on augumented user 16911 45/50 current_auc = 0.0
User 16911 AUC after training: 0.0
User 16911 does not improve AUC. Reverting changes.
Training on augumented user 112150 46/50 current_auc = 0.0
User 112150 AUC after training: 0.0
User 112150 does not improve AUC. Reverting changes.
Training on augumented user 17440 47/50 current_auc = 0.0
User 17440 AUC after training: 0.0
User 17440 does not improve AUC. Reverting changes.
Training on augumented user 124330 48/50 current_auc = 0.0
User 124330 AUC after training: 0.0
User 124330 does not improve AUC. Reverting changes.
Training on augumented user 19594 49/50 current_auc = 0.0
User 19594 AUC after training: 0.0
User 19594 does not improve AUC. Reverting changes.
[2024-12-02 18:16:38.593911] start test user 28724 66/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:39.122527] start test user 28724 66/568 recall augumented users by random, augumented_users = [16267, 99426, 78937, 94337, 18220, 102738, 61605, 86599, 46852, 5195, 336, 30026, 39684, 125888, 104890, 10336, 105763, 87807, 101065, 124087, 52829, 137224, 25388, 44064, 21553, 101885, 66613, 38550, 116592, 87180, 121025, 126452, 38495, 71634, 28502, 130937, 23645, 12339, 137655, 82807, 67236, 104308, 113774, 76912, 55937, 36009, 28302, 108107, 133393, 65759]
[2024-12-02 18:16:39.139870] user = 28724 Cloud 66/568
[2024-12-02 18:16:39.174164] user = 28724 Local 66/568
[2024-12-02 18:16:39.279149] user = 28724 Local+ 66/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:41.806811] user = 28724 MPDA- 66/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8409984276729561
Training on augumented user 16267 0/50 current_auc = 0.8409984276729561
User 16267 AUC after training: 0.8409984276729561
User 16267 does not improve AUC. Reverting changes.
Training on augumented user 99426 1/50 current_auc = 0.8409984276729561
User 99426 AUC after training: 0.8411294549266248
User 99426 improves AUC. Keeping the model.
Training on augumented user 78937 2/50 current_auc = 0.8411294549266248
User 78937 AUC after training: 0.8410639412997905
User 78937 does not improve AUC. Reverting changes.
Training on augumented user 94337 3/50 current_auc = 0.8411294549266248
User 94337 AUC after training: 0.8412604821802936
User 94337 improves AUC. Keeping the model.
Training on augumented user 18220 4/50 current_auc = 0.8412604821802936
User 18220 AUC after training: 0.8411949685534592
User 18220 does not improve AUC. Reverting changes.
Training on augumented user 102738 5/50 current_auc = 0.8412604821802936
User 102738 AUC after training: 0.8411949685534592
User 102738 does not improve AUC. Reverting changes.
Training on augumented user 61605 6/50 current_auc = 0.8412604821802936
User 61605 AUC after training: 0.840998427672956
User 61605 does not improve AUC. Reverting changes.
Training on augumented user 86599 7/50 current_auc = 0.8412604821802936
User 86599 AUC after training: 0.8412604821802935
User 86599 does not improve AUC. Reverting changes.
Training on augumented user 46852 8/50 current_auc = 0.8412604821802936
User 46852 AUC after training: 0.8411949685534591
User 46852 does not improve AUC. Reverting changes.
Training on augumented user 5195 9/50 current_auc = 0.8412604821802936
User 5195 AUC after training: 0.8407363731656186
User 5195 does not improve AUC. Reverting changes.
Training on augumented user 336 10/50 current_auc = 0.8412604821802936
User 336 AUC after training: 0.8407363731656186
User 336 does not improve AUC. Reverting changes.
Training on augumented user 30026 11/50 current_auc = 0.8412604821802936
User 30026 AUC after training: 0.8410639412997903
User 30026 does not improve AUC. Reverting changes.
Training on augumented user 39684 12/50 current_auc = 0.8412604821802936
User 39684 AUC after training: 0.841325995807128
User 39684 improves AUC. Keeping the model.
Training on augumented user 125888 13/50 current_auc = 0.841325995807128
User 125888 AUC after training: 0.8410639412997903
User 125888 does not improve AUC. Reverting changes.
Training on augumented user 104890 14/50 current_auc = 0.841325995807128
User 104890 AUC after training: 0.8411294549266247
User 104890 does not improve AUC. Reverting changes.
Training on augumented user 10336 15/50 current_auc = 0.841325995807128
User 10336 AUC after training: 0.8413915094339623
User 10336 improves AUC. Keeping the model.
Training on augumented user 105763 16/50 current_auc = 0.8413915094339623
User 105763 AUC after training: 0.841325995807128
User 105763 does not improve AUC. Reverting changes.
Training on augumented user 87807 17/50 current_auc = 0.8413915094339623
User 87807 AUC after training: 0.8414570230607966
User 87807 improves AUC. Keeping the model.
Training on augumented user 101065 18/50 current_auc = 0.8414570230607966
User 101065 AUC after training: 0.8415880503144655
User 101065 improves AUC. Keeping the model.
Training on augumented user 124087 19/50 current_auc = 0.8415880503144655
User 124087 AUC after training: 0.8411949685534592
User 124087 does not improve AUC. Reverting changes.
Training on augumented user 52829 20/50 current_auc = 0.8415880503144655
User 52829 AUC after training: 0.8413259958071279
User 52829 does not improve AUC. Reverting changes.
Training on augumented user 137224 21/50 current_auc = 0.8415880503144655
User 137224 AUC after training: 0.841325995807128
User 137224 does not improve AUC. Reverting changes.
Training on augumented user 25388 22/50 current_auc = 0.8415880503144655
User 25388 AUC after training: 0.8409984276729561
User 25388 does not improve AUC. Reverting changes.
Training on augumented user 44064 23/50 current_auc = 0.8415880503144655
User 44064 AUC after training: 0.8415225366876311
User 44064 does not improve AUC. Reverting changes.
Training on augumented user 21553 24/50 current_auc = 0.8415880503144655
User 21553 AUC after training: 0.8412604821802936
User 21553 does not improve AUC. Reverting changes.
Training on augumented user 101885 25/50 current_auc = 0.8415880503144655
User 101885 AUC after training: 0.8414570230607966
User 101885 does not improve AUC. Reverting changes.
Training on augumented user 66613 26/50 current_auc = 0.8415880503144655
User 66613 AUC after training: 0.8413915094339623
User 66613 does not improve AUC. Reverting changes.
Training on augumented user 38550 27/50 current_auc = 0.8415880503144655
User 38550 AUC after training: 0.841325995807128
User 38550 does not improve AUC. Reverting changes.
Training on augumented user 116592 28/50 current_auc = 0.8415880503144655
User 116592 AUC after training: 0.8414570230607966
User 116592 does not improve AUC. Reverting changes.
Training on augumented user 87180 29/50 current_auc = 0.8415880503144655
User 87180 AUC after training: 0.8412604821802935
User 87180 does not improve AUC. Reverting changes.
Training on augumented user 121025 30/50 current_auc = 0.8415880503144655
User 121025 AUC after training: 0.8411949685534591
User 121025 does not improve AUC. Reverting changes.
Training on augumented user 126452 31/50 current_auc = 0.8415880503144655
User 126452 AUC after training: 0.8412604821802936
User 126452 does not improve AUC. Reverting changes.
Training on augumented user 38495 32/50 current_auc = 0.8415880503144655
User 38495 AUC after training: 0.8407363731656184
User 38495 does not improve AUC. Reverting changes.
Training on augumented user 71634 33/50 current_auc = 0.8415880503144655
User 71634 AUC after training: 0.8413259958071279
User 71634 does not improve AUC. Reverting changes.
Training on augumented user 28502 34/50 current_auc = 0.8415880503144655
User 28502 AUC after training: 0.8413915094339623
User 28502 does not improve AUC. Reverting changes.
Training on augumented user 130937 35/50 current_auc = 0.8415880503144655
User 130937 AUC after training: 0.8412604821802936
User 130937 does not improve AUC. Reverting changes.
Training on augumented user 23645 36/50 current_auc = 0.8415880503144655
User 23645 AUC after training: 0.8413259958071279
User 23645 does not improve AUC. Reverting changes.
Training on augumented user 12339 37/50 current_auc = 0.8415880503144655
User 12339 AUC after training: 0.8412604821802935
User 12339 does not improve AUC. Reverting changes.
Training on augumented user 137655 38/50 current_auc = 0.8415880503144655
User 137655 AUC after training: 0.841325995807128
User 137655 does not improve AUC. Reverting changes.
Training on augumented user 82807 39/50 current_auc = 0.8415880503144655
User 82807 AUC after training: 0.8406708595387841
User 82807 does not improve AUC. Reverting changes.
Training on augumented user 67236 40/50 current_auc = 0.8415880503144655
User 67236 AUC after training: 0.841325995807128
User 67236 does not improve AUC. Reverting changes.
Training on augumented user 104308 41/50 current_auc = 0.8415880503144655
User 104308 AUC after training: 0.8410639412997903
User 104308 does not improve AUC. Reverting changes.
Training on augumented user 113774 42/50 current_auc = 0.8415880503144655
User 113774 AUC after training: 0.8413915094339622
User 113774 does not improve AUC. Reverting changes.
Training on augumented user 76912 43/50 current_auc = 0.8415880503144655
User 76912 AUC after training: 0.8412604821802935
User 76912 does not improve AUC. Reverting changes.
Training on augumented user 55937 44/50 current_auc = 0.8415880503144655
User 55937 AUC after training: 0.8413915094339623
User 55937 does not improve AUC. Reverting changes.
Training on augumented user 36009 45/50 current_auc = 0.8415880503144655
User 36009 AUC after training: 0.841522536687631
User 36009 does not improve AUC. Reverting changes.
Training on augumented user 28302 46/50 current_auc = 0.8415880503144655
User 28302 AUC after training: 0.8417190775681342
User 28302 improves AUC. Keeping the model.
Training on augumented user 108107 47/50 current_auc = 0.8417190775681342
User 108107 AUC after training: 0.8417190775681342
User 108107 does not improve AUC. Reverting changes.
Training on augumented user 133393 48/50 current_auc = 0.8417190775681342
User 133393 AUC after training: 0.8414570230607967
User 133393 does not improve AUC. Reverting changes.
Training on augumented user 65759 49/50 current_auc = 0.8417190775681342
User 65759 AUC after training: 0.8408018867924528
User 65759 does not improve AUC. Reverting changes.
[2024-12-02 18:17:15.871634] start test user 28735 67/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:16.588674] start test user 28735 67/568 recall augumented users by random, augumented_users = [61976, 56300, 58144, 82922, 101698, 13903, 97430, 5258, 79482, 100857, 5701, 113338, 118122, 99184, 5675, 129006, 123089, 68579, 135659, 39607, 14141, 100447, 101016, 87772, 120599, 49954, 71701, 131195, 90432, 76664, 99020, 47908, 56129, 86461, 33794, 48705, 123571, 41307, 110398, 110543, 114738, 124702, 132151, 69532, 82225, 23072, 66249, 70026, 52703, 98903]
[2024-12-02 18:17:16.605468] user = 28735 Cloud 67/568
[2024-12-02 18:17:16.616699] user = 28735 Local 67/568
[2024-12-02 18:17:16.729740] user = 28735 Local+ 67/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:19.150290] user = 28735 MPDA- 67/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6923076923076923
Training on augumented user 61976 0/50 current_auc = 0.6923076923076923
User 61976 AUC after training: 0.7692307692307693
User 61976 improves AUC. Keeping the model.
Training on augumented user 56300 1/50 current_auc = 0.7692307692307693
User 56300 AUC after training: 0.6923076923076923
User 56300 does not improve AUC. Reverting changes.
Training on augumented user 58144 2/50 current_auc = 0.7692307692307693
User 58144 AUC after training: 0.7692307692307693
User 58144 does not improve AUC. Reverting changes.
Training on augumented user 82922 3/50 current_auc = 0.7692307692307693
User 82922 AUC after training: 0.7692307692307693
User 82922 does not improve AUC. Reverting changes.
Training on augumented user 101698 4/50 current_auc = 0.7692307692307693
User 101698 AUC after training: 0.7692307692307693
User 101698 does not improve AUC. Reverting changes.
Training on augumented user 13903 5/50 current_auc = 0.7692307692307693
User 13903 AUC after training: 0.7692307692307693
User 13903 does not improve AUC. Reverting changes.
Training on augumented user 97430 6/50 current_auc = 0.7692307692307693
User 97430 AUC after training: 0.7307692307692307
User 97430 does not improve AUC. Reverting changes.
Training on augumented user 5258 7/50 current_auc = 0.7692307692307693
User 5258 AUC after training: 0.7692307692307693
User 5258 does not improve AUC. Reverting changes.
Training on augumented user 79482 8/50 current_auc = 0.7692307692307693
User 79482 AUC after training: 0.7307692307692307
User 79482 does not improve AUC. Reverting changes.
Training on augumented user 100857 9/50 current_auc = 0.7692307692307693
User 100857 AUC after training: 0.7692307692307693
User 100857 does not improve AUC. Reverting changes.
Training on augumented user 5701 10/50 current_auc = 0.7692307692307693
User 5701 AUC after training: 0.7692307692307693
User 5701 does not improve AUC. Reverting changes.
Training on augumented user 113338 11/50 current_auc = 0.7692307692307693
User 113338 AUC after training: 0.7692307692307693
User 113338 does not improve AUC. Reverting changes.
Training on augumented user 118122 12/50 current_auc = 0.7692307692307693
User 118122 AUC after training: 0.7307692307692307
User 118122 does not improve AUC. Reverting changes.
Training on augumented user 99184 13/50 current_auc = 0.7692307692307693
User 99184 AUC after training: 0.7307692307692307
User 99184 does not improve AUC. Reverting changes.
Training on augumented user 5675 14/50 current_auc = 0.7692307692307693
User 5675 AUC after training: 0.7692307692307693
User 5675 does not improve AUC. Reverting changes.
Training on augumented user 129006 15/50 current_auc = 0.7692307692307693
User 129006 AUC after training: 0.7692307692307693
User 129006 does not improve AUC. Reverting changes.
Training on augumented user 123089 16/50 current_auc = 0.7692307692307693
User 123089 AUC after training: 0.7692307692307693
User 123089 does not improve AUC. Reverting changes.
Training on augumented user 68579 17/50 current_auc = 0.7692307692307693
User 68579 AUC after training: 0.7692307692307693
User 68579 does not improve AUC. Reverting changes.
Training on augumented user 135659 18/50 current_auc = 0.7692307692307693
User 135659 AUC after training: 0.7307692307692307
User 135659 does not improve AUC. Reverting changes.
Training on augumented user 39607 19/50 current_auc = 0.7692307692307693
User 39607 AUC after training: 0.7307692307692307
User 39607 does not improve AUC. Reverting changes.
Training on augumented user 14141 20/50 current_auc = 0.7692307692307693
User 14141 AUC after training: 0.7692307692307693
User 14141 does not improve AUC. Reverting changes.
Training on augumented user 100447 21/50 current_auc = 0.7692307692307693
User 100447 AUC after training: 0.7692307692307693
User 100447 does not improve AUC. Reverting changes.
Training on augumented user 101016 22/50 current_auc = 0.7692307692307693
User 101016 AUC after training: 0.6923076923076923
User 101016 does not improve AUC. Reverting changes.
Training on augumented user 87772 23/50 current_auc = 0.7692307692307693
User 87772 AUC after training: 0.7307692307692307
User 87772 does not improve AUC. Reverting changes.
Training on augumented user 120599 24/50 current_auc = 0.7692307692307693
User 120599 AUC after training: 0.7307692307692307
User 120599 does not improve AUC. Reverting changes.
Training on augumented user 49954 25/50 current_auc = 0.7692307692307693
User 49954 AUC after training: 0.7692307692307693
User 49954 does not improve AUC. Reverting changes.
Training on augumented user 71701 26/50 current_auc = 0.7692307692307693
User 71701 AUC after training: 0.7692307692307693
User 71701 does not improve AUC. Reverting changes.
Training on augumented user 131195 27/50 current_auc = 0.7692307692307693
User 131195 AUC after training: 0.7307692307692307
User 131195 does not improve AUC. Reverting changes.
Training on augumented user 90432 28/50 current_auc = 0.7692307692307693
User 90432 AUC after training: 0.7307692307692307
User 90432 does not improve AUC. Reverting changes.
Training on augumented user 76664 29/50 current_auc = 0.7692307692307693
User 76664 AUC after training: 0.7692307692307693
User 76664 does not improve AUC. Reverting changes.
Training on augumented user 99020 30/50 current_auc = 0.7692307692307693
User 99020 AUC after training: 0.7307692307692307
User 99020 does not improve AUC. Reverting changes.
Training on augumented user 47908 31/50 current_auc = 0.7692307692307693
User 47908 AUC after training: 0.6923076923076923
User 47908 does not improve AUC. Reverting changes.
Training on augumented user 56129 32/50 current_auc = 0.7692307692307693
User 56129 AUC after training: 0.7692307692307693
User 56129 does not improve AUC. Reverting changes.
Training on augumented user 86461 33/50 current_auc = 0.7692307692307693
User 86461 AUC after training: 0.6923076923076923
User 86461 does not improve AUC. Reverting changes.
Training on augumented user 33794 34/50 current_auc = 0.7692307692307693
User 33794 AUC after training: 0.7307692307692307
User 33794 does not improve AUC. Reverting changes.
Training on augumented user 48705 35/50 current_auc = 0.7692307692307693
User 48705 AUC after training: 0.7692307692307693
User 48705 does not improve AUC. Reverting changes.
Training on augumented user 123571 36/50 current_auc = 0.7692307692307693
User 123571 AUC after training: 0.6923076923076923
User 123571 does not improve AUC. Reverting changes.
Training on augumented user 41307 37/50 current_auc = 0.7692307692307693
User 41307 AUC after training: 0.7692307692307693
User 41307 does not improve AUC. Reverting changes.
Training on augumented user 110398 38/50 current_auc = 0.7692307692307693
User 110398 AUC after training: 0.7692307692307693
User 110398 does not improve AUC. Reverting changes.
Training on augumented user 110543 39/50 current_auc = 0.7692307692307693
User 110543 AUC after training: 0.7307692307692307
User 110543 does not improve AUC. Reverting changes.
Training on augumented user 114738 40/50 current_auc = 0.7692307692307693
User 114738 AUC after training: 0.7307692307692307
User 114738 does not improve AUC. Reverting changes.
Training on augumented user 124702 41/50 current_auc = 0.7692307692307693
User 124702 AUC after training: 0.7692307692307693
User 124702 does not improve AUC. Reverting changes.
Training on augumented user 132151 42/50 current_auc = 0.7692307692307693
User 132151 AUC after training: 0.7307692307692307
User 132151 does not improve AUC. Reverting changes.
Training on augumented user 69532 43/50 current_auc = 0.7692307692307693
User 69532 AUC after training: 0.7692307692307693
User 69532 does not improve AUC. Reverting changes.
Training on augumented user 82225 44/50 current_auc = 0.7692307692307693
User 82225 AUC after training: 0.7307692307692307
User 82225 does not improve AUC. Reverting changes.
Training on augumented user 23072 45/50 current_auc = 0.7692307692307693
User 23072 AUC after training: 0.7692307692307693
User 23072 does not improve AUC. Reverting changes.
Training on augumented user 66249 46/50 current_auc = 0.7692307692307693
User 66249 AUC after training: 0.7692307692307693
User 66249 does not improve AUC. Reverting changes.
Training on augumented user 70026 47/50 current_auc = 0.7692307692307693
User 70026 AUC after training: 0.7307692307692307
User 70026 does not improve AUC. Reverting changes.
Training on augumented user 52703 48/50 current_auc = 0.7692307692307693
User 52703 AUC after training: 0.7692307692307693
User 52703 does not improve AUC. Reverting changes.
Training on augumented user 98903 49/50 current_auc = 0.7692307692307693
User 98903 AUC after training: 0.7307692307692307
User 98903 does not improve AUC. Reverting changes.
[2024-12-02 18:17:47.413148] start test user 28761 68/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:48.112013] start test user 28761 68/568 recall augumented users by random, augumented_users = [33800, 90345, 60385, 17942, 136197, 25079, 2339, 136303, 123703, 57504, 43067, 110578, 114182, 87163, 8327, 56486, 75884, 38144, 30437, 129678, 63129, 82750, 46658, 51485, 22236, 10598, 48484, 91535, 11194, 21658, 124693, 50886, 92186, 32265, 110957, 54059, 74201, 137536, 21671, 2311, 38533, 114405, 13710, 105251, 103896, 7355, 89521, 74605, 14808, 120549]
[2024-12-02 18:17:48.134825] user = 28761 Cloud 68/568
[2024-12-02 18:17:48.161434] user = 28761 Local 68/568
[2024-12-02 18:17:48.240067] user = 28761 Local+ 68/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:50.745009] user = 28761 MPDA- 68/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8518518518518519
Training on augumented user 33800 0/50 current_auc = 0.8518518518518519
User 33800 AUC after training: 0.8518518518518519
User 33800 does not improve AUC. Reverting changes.
Training on augumented user 90345 1/50 current_auc = 0.8518518518518519
User 90345 AUC after training: 0.8518518518518519
User 90345 does not improve AUC. Reverting changes.
Training on augumented user 60385 2/50 current_auc = 0.8518518518518519
User 60385 AUC after training: 0.8518518518518519
User 60385 does not improve AUC. Reverting changes.
Training on augumented user 17942 3/50 current_auc = 0.8518518518518519
User 17942 AUC after training: 0.8518518518518519
User 17942 does not improve AUC. Reverting changes.
Training on augumented user 136197 4/50 current_auc = 0.8518518518518519
User 136197 AUC after training: 0.8518518518518519
User 136197 does not improve AUC. Reverting changes.
Training on augumented user 25079 5/50 current_auc = 0.8518518518518519
User 25079 AUC after training: 0.8518518518518519
User 25079 does not improve AUC. Reverting changes.
Training on augumented user 2339 6/50 current_auc = 0.8518518518518519
User 2339 AUC after training: 0.8518518518518519
User 2339 does not improve AUC. Reverting changes.
Training on augumented user 136303 7/50 current_auc = 0.8518518518518519
User 136303 AUC after training: 0.8518518518518519
User 136303 does not improve AUC. Reverting changes.
Training on augumented user 123703 8/50 current_auc = 0.8518518518518519
User 123703 AUC after training: 0.8518518518518519
User 123703 does not improve AUC. Reverting changes.
Training on augumented user 57504 9/50 current_auc = 0.8518518518518519
User 57504 AUC after training: 0.8518518518518519
User 57504 does not improve AUC. Reverting changes.
Training on augumented user 43067 10/50 current_auc = 0.8518518518518519
User 43067 AUC after training: 0.8518518518518519
User 43067 does not improve AUC. Reverting changes.
Training on augumented user 110578 11/50 current_auc = 0.8518518518518519
User 110578 AUC after training: 0.8518518518518519
User 110578 does not improve AUC. Reverting changes.
Training on augumented user 114182 12/50 current_auc = 0.8518518518518519
User 114182 AUC after training: 0.8518518518518519
User 114182 does not improve AUC. Reverting changes.
Training on augumented user 87163 13/50 current_auc = 0.8518518518518519
User 87163 AUC after training: 0.8518518518518519
User 87163 does not improve AUC. Reverting changes.
Training on augumented user 8327 14/50 current_auc = 0.8518518518518519
User 8327 AUC after training: 0.8518518518518519
User 8327 does not improve AUC. Reverting changes.
Training on augumented user 56486 15/50 current_auc = 0.8518518518518519
User 56486 AUC after training: 0.8518518518518519
User 56486 does not improve AUC. Reverting changes.
Training on augumented user 75884 16/50 current_auc = 0.8518518518518519
User 75884 AUC after training: 0.8518518518518519
User 75884 does not improve AUC. Reverting changes.
Training on augumented user 38144 17/50 current_auc = 0.8518518518518519
User 38144 AUC after training: 0.8518518518518519
User 38144 does not improve AUC. Reverting changes.
Training on augumented user 30437 18/50 current_auc = 0.8518518518518519
User 30437 AUC after training: 0.8518518518518519
User 30437 does not improve AUC. Reverting changes.
Training on augumented user 129678 19/50 current_auc = 0.8518518518518519
User 129678 AUC after training: 0.8518518518518519
User 129678 does not improve AUC. Reverting changes.
Training on augumented user 63129 20/50 current_auc = 0.8518518518518519
User 63129 AUC after training: 0.8518518518518519
User 63129 does not improve AUC. Reverting changes.
Training on augumented user 82750 21/50 current_auc = 0.8518518518518519
User 82750 AUC after training: 0.8518518518518519
User 82750 does not improve AUC. Reverting changes.
Training on augumented user 46658 22/50 current_auc = 0.8518518518518519
User 46658 AUC after training: 0.8518518518518519
User 46658 does not improve AUC. Reverting changes.
Training on augumented user 51485 23/50 current_auc = 0.8518518518518519
User 51485 AUC after training: 0.8518518518518519
User 51485 does not improve AUC. Reverting changes.
Training on augumented user 22236 24/50 current_auc = 0.8518518518518519
User 22236 AUC after training: 0.8518518518518519
User 22236 does not improve AUC. Reverting changes.
Training on augumented user 10598 25/50 current_auc = 0.8518518518518519
User 10598 AUC after training: 0.8518518518518519
User 10598 does not improve AUC. Reverting changes.
Training on augumented user 48484 26/50 current_auc = 0.8518518518518519
User 48484 AUC after training: 0.8518518518518519
User 48484 does not improve AUC. Reverting changes.
Training on augumented user 91535 27/50 current_auc = 0.8518518518518519
User 91535 AUC after training: 0.8518518518518519
User 91535 does not improve AUC. Reverting changes.
Training on augumented user 11194 28/50 current_auc = 0.8518518518518519
User 11194 AUC after training: 0.8518518518518519
User 11194 does not improve AUC. Reverting changes.
Training on augumented user 21658 29/50 current_auc = 0.8518518518518519
User 21658 AUC after training: 0.8518518518518519
User 21658 does not improve AUC. Reverting changes.
Training on augumented user 124693 30/50 current_auc = 0.8518518518518519
User 124693 AUC after training: 0.8518518518518519
User 124693 does not improve AUC. Reverting changes.
Training on augumented user 50886 31/50 current_auc = 0.8518518518518519
User 50886 AUC after training: 0.8518518518518519
User 50886 does not improve AUC. Reverting changes.
Training on augumented user 92186 32/50 current_auc = 0.8518518518518519
User 92186 AUC after training: 0.8518518518518519
User 92186 does not improve AUC. Reverting changes.
Training on augumented user 32265 33/50 current_auc = 0.8518518518518519
User 32265 AUC after training: 0.8518518518518519
User 32265 does not improve AUC. Reverting changes.
Training on augumented user 110957 34/50 current_auc = 0.8518518518518519
User 110957 AUC after training: 0.8518518518518519
User 110957 does not improve AUC. Reverting changes.
Training on augumented user 54059 35/50 current_auc = 0.8518518518518519
User 54059 AUC after training: 0.8518518518518519
User 54059 does not improve AUC. Reverting changes.
Training on augumented user 74201 36/50 current_auc = 0.8518518518518519
User 74201 AUC after training: 0.8518518518518519
User 74201 does not improve AUC. Reverting changes.
Training on augumented user 137536 37/50 current_auc = 0.8518518518518519
User 137536 AUC after training: 0.8518518518518519
User 137536 does not improve AUC. Reverting changes.
Training on augumented user 21671 38/50 current_auc = 0.8518518518518519
User 21671 AUC after training: 0.8518518518518519
User 21671 does not improve AUC. Reverting changes.
Training on augumented user 2311 39/50 current_auc = 0.8518518518518519
User 2311 AUC after training: 0.8518518518518519
User 2311 does not improve AUC. Reverting changes.
Training on augumented user 38533 40/50 current_auc = 0.8518518518518519
User 38533 AUC after training: 0.8518518518518519
User 38533 does not improve AUC. Reverting changes.
Training on augumented user 114405 41/50 current_auc = 0.8518518518518519
User 114405 AUC after training: 0.8518518518518519
User 114405 does not improve AUC. Reverting changes.
Training on augumented user 13710 42/50 current_auc = 0.8518518518518519
User 13710 AUC after training: 0.8518518518518519
User 13710 does not improve AUC. Reverting changes.
Training on augumented user 105251 43/50 current_auc = 0.8518518518518519
User 105251 AUC after training: 0.8518518518518519
User 105251 does not improve AUC. Reverting changes.
Training on augumented user 103896 44/50 current_auc = 0.8518518518518519
User 103896 AUC after training: 0.8518518518518519
User 103896 does not improve AUC. Reverting changes.
Training on augumented user 7355 45/50 current_auc = 0.8518518518518519
User 7355 AUC after training: 0.8518518518518519
User 7355 does not improve AUC. Reverting changes.
Training on augumented user 89521 46/50 current_auc = 0.8518518518518519
User 89521 AUC after training: 0.8518518518518519
User 89521 does not improve AUC. Reverting changes.
Training on augumented user 74605 47/50 current_auc = 0.8518518518518519
User 74605 AUC after training: 0.8518518518518519
User 74605 does not improve AUC. Reverting changes.
Training on augumented user 14808 48/50 current_auc = 0.8518518518518519
User 14808 AUC after training: 0.8518518518518519
User 14808 does not improve AUC. Reverting changes.
Training on augumented user 120549 49/50 current_auc = 0.8518518518518519
User 120549 AUC after training: 0.8518518518518519
User 120549 does not improve AUC. Reverting changes.
[2024-12-02 18:18:26.190104] start test user 28771 69/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:26.845117] start test user 28771 69/568 recall augumented users by random, augumented_users = [93092, 133055, 58952, 130684, 35970, 129197, 137502, 27393, 74532, 22652, 69829, 54651, 46794, 101551, 100118, 19706, 94794, 56764, 39502, 74794, 78407, 108214, 22523, 69986, 67389, 39748, 72573, 37528, 102244, 119706, 133704, 99683, 4044, 2386, 101621, 28306, 136130, 131687, 60382, 12363, 81307, 42360, 92319, 29687, 108799, 129586, 15676, 75112, 62357, 25952]
[2024-12-02 18:18:26.861639] user = 28771 Cloud 69/568
[2024-12-02 18:18:26.887462] user = 28771 Local 69/568
[2024-12-02 18:18:27.058630] user = 28771 Local+ 69/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:29.068568] user = 28771 MPDA- 69/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6313863928112965
Training on augumented user 93092 0/50 current_auc = 0.6313863928112965
User 93092 AUC after training: 0.6312580231065469
User 93092 does not improve AUC. Reverting changes.
Training on augumented user 133055 1/50 current_auc = 0.6313863928112965
User 133055 AUC after training: 0.6315147625160462
User 133055 improves AUC. Keeping the model.
Training on augumented user 58952 2/50 current_auc = 0.6315147625160462
User 58952 AUC after training: 0.6314826700898588
User 58952 does not improve AUC. Reverting changes.
Training on augumented user 130684 3/50 current_auc = 0.6315147625160462
User 130684 AUC after training: 0.6318356867779205
User 130684 improves AUC. Keeping the model.
Training on augumented user 35970 4/50 current_auc = 0.6318356867779205
User 35970 AUC after training: 0.6324454428754813
User 35970 improves AUC. Keeping the model.
Training on augumented user 129197 5/50 current_auc = 0.6324454428754813
User 129197 AUC after training: 0.6324133504492939
User 129197 does not improve AUC. Reverting changes.
Training on augumented user 137502 6/50 current_auc = 0.6324454428754813
User 137502 AUC after training: 0.6326379974326058
User 137502 improves AUC. Keeping the model.
Training on augumented user 27393 7/50 current_auc = 0.6326379974326058
User 27393 AUC after training: 0.632413350449294
User 27393 does not improve AUC. Reverting changes.
Training on augumented user 74532 8/50 current_auc = 0.6326379974326058
User 74532 AUC after training: 0.6327984595635429
User 74532 improves AUC. Keeping the model.
Training on augumented user 22652 9/50 current_auc = 0.6327984595635429
User 22652 AUC after training: 0.6327984595635431
User 22652 improves AUC. Keeping the model.
Training on augumented user 69829 10/50 current_auc = 0.6327984595635431
User 69829 AUC after training: 0.6321245186136072
User 69829 does not improve AUC. Reverting changes.
Training on augumented user 54651 11/50 current_auc = 0.6327984595635431
User 54651 AUC after training: 0.632798459563543
User 54651 does not improve AUC. Reverting changes.
Training on augumented user 46794 12/50 current_auc = 0.6327984595635431
User 46794 AUC after training: 0.6326059050064186
User 46794 does not improve AUC. Reverting changes.
Training on augumented user 101551 13/50 current_auc = 0.6327984595635431
User 101551 AUC after training: 0.632573812580231
User 101551 does not improve AUC. Reverting changes.
Training on augumented user 100118 14/50 current_auc = 0.6327984595635431
User 100118 AUC after training: 0.632798459563543
User 100118 does not improve AUC. Reverting changes.
Training on augumented user 19706 15/50 current_auc = 0.6327984595635431
User 19706 AUC after training: 0.6329268292682927
User 19706 improves AUC. Keeping the model.
Training on augumented user 94794 16/50 current_auc = 0.6329268292682927
User 94794 AUC after training: 0.6327984595635431
User 94794 does not improve AUC. Reverting changes.
Training on augumented user 56764 17/50 current_auc = 0.6329268292682927
User 56764 AUC after training: 0.6325417201540436
User 56764 does not improve AUC. Reverting changes.
Training on augumented user 39502 18/50 current_auc = 0.6329268292682927
User 39502 AUC after training: 0.6327342747111682
User 39502 does not improve AUC. Reverting changes.
Training on augumented user 74794 19/50 current_auc = 0.6329268292682927
User 74794 AUC after training: 0.6326059050064186
User 74794 does not improve AUC. Reverting changes.
Training on augumented user 78407 20/50 current_auc = 0.6329268292682927
User 78407 AUC after training: 0.6324133504492939
User 78407 does not improve AUC. Reverting changes.
Training on augumented user 108214 21/50 current_auc = 0.6329268292682927
User 108214 AUC after training: 0.6326059050064184
User 108214 does not improve AUC. Reverting changes.
Training on augumented user 22523 22/50 current_auc = 0.6329268292682927
User 22523 AUC after training: 0.6325417201540436
User 22523 does not improve AUC. Reverting changes.
Training on augumented user 69986 23/50 current_auc = 0.6329268292682927
User 69986 AUC after training: 0.6328626444159179
User 69986 does not improve AUC. Reverting changes.
Training on augumented user 67389 24/50 current_auc = 0.6329268292682927
User 67389 AUC after training: 0.6329268292682927
User 67389 does not improve AUC. Reverting changes.
Training on augumented user 39748 25/50 current_auc = 0.6329268292682927
User 39748 AUC after training: 0.6324133504492939
User 39748 does not improve AUC. Reverting changes.
Training on augumented user 72573 26/50 current_auc = 0.6329268292682927
User 72573 AUC after training: 0.6322849807445443
User 72573 does not improve AUC. Reverting changes.
Training on augumented user 37528 27/50 current_auc = 0.6329268292682927
User 37528 AUC after training: 0.6328626444159179
User 37528 does not improve AUC. Reverting changes.
Training on augumented user 102244 28/50 current_auc = 0.6329268292682927
User 102244 AUC after training: 0.6329268292682927
User 102244 does not improve AUC. Reverting changes.
Training on augumented user 119706 29/50 current_auc = 0.6329268292682927
User 119706 AUC after training: 0.6325417201540436
User 119706 does not improve AUC. Reverting changes.
Training on augumented user 133704 30/50 current_auc = 0.6329268292682927
User 133704 AUC after training: 0.6327342747111682
User 133704 does not improve AUC. Reverting changes.
Training on augumented user 99683 31/50 current_auc = 0.6329268292682927
User 99683 AUC after training: 0.6330551989730423
User 99683 improves AUC. Keeping the model.
Training on augumented user 4044 32/50 current_auc = 0.6330551989730423
User 4044 AUC after training: 0.6328626444159179
User 4044 does not improve AUC. Reverting changes.
Training on augumented user 2386 33/50 current_auc = 0.6330551989730423
User 2386 AUC after training: 0.6328626444159179
User 2386 does not improve AUC. Reverting changes.
Training on augumented user 101621 34/50 current_auc = 0.6330551989730423
User 101621 AUC after training: 0.632734274711168
User 101621 does not improve AUC. Reverting changes.
Training on augumented user 28306 35/50 current_auc = 0.6330551989730423
User 28306 AUC after training: 0.6329268292682927
User 28306 does not improve AUC. Reverting changes.
Training on augumented user 136130 36/50 current_auc = 0.6330551989730423
User 136130 AUC after training: 0.6326059050064186
User 136130 does not improve AUC. Reverting changes.
Training on augumented user 131687 37/50 current_auc = 0.6330551989730423
User 131687 AUC after training: 0.6324775353016688
User 131687 does not improve AUC. Reverting changes.
Training on augumented user 60382 38/50 current_auc = 0.6330551989730423
User 60382 AUC after training: 0.6326700898587932
User 60382 does not improve AUC. Reverting changes.
Training on augumented user 12363 39/50 current_auc = 0.6330551989730423
User 12363 AUC after training: 0.632734274711168
User 12363 does not improve AUC. Reverting changes.
Training on augumented user 81307 40/50 current_auc = 0.6330551989730423
User 81307 AUC after training: 0.632734274711168
User 81307 does not improve AUC. Reverting changes.
Training on augumented user 42360 41/50 current_auc = 0.6330551989730423
User 42360 AUC after training: 0.6329910141206675
User 42360 does not improve AUC. Reverting changes.
Training on augumented user 92319 42/50 current_auc = 0.6330551989730423
User 92319 AUC after training: 0.6322207958921694
User 92319 does not improve AUC. Reverting changes.
Training on augumented user 29687 43/50 current_auc = 0.6330551989730423
User 29687 AUC after training: 0.6317715019255455
User 29687 does not improve AUC. Reverting changes.
Training on augumented user 108799 44/50 current_auc = 0.6330551989730423
User 108799 AUC after training: 0.6330551989730423
User 108799 does not improve AUC. Reverting changes.
Training on augumented user 129586 45/50 current_auc = 0.6330551989730423
User 129586 AUC after training: 0.6324133504492939
User 129586 does not improve AUC. Reverting changes.
Training on augumented user 15676 46/50 current_auc = 0.6330551989730423
User 15676 AUC after training: 0.6327342747111682
User 15676 does not improve AUC. Reverting changes.
Training on augumented user 75112 47/50 current_auc = 0.6330551989730423
User 75112 AUC after training: 0.6328626444159179
User 75112 does not improve AUC. Reverting changes.
Training on augumented user 62357 48/50 current_auc = 0.6330551989730423
User 62357 AUC after training: 0.632798459563543
User 62357 does not improve AUC. Reverting changes.
Training on augumented user 25952 49/50 current_auc = 0.6330551989730423
User 25952 AUC after training: 0.6329268292682927
User 25952 does not improve AUC. Reverting changes.
[2024-12-02 18:19:01.526390] start test user 28780 70/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:02.016068] start test user 28780 70/568 recall augumented users by random, augumented_users = [88631, 38545, 112793, 13679, 89199, 1494, 119614, 134790, 97009, 72318, 39204, 91393, 88707, 67610, 7114, 84281, 8558, 72595, 103433, 64210, 124894, 88824, 122618, 107220, 74865, 100407, 25616, 45500, 1189, 21635, 46525, 124374, 55580, 110899, 109629, 14754, 98945, 115622, 29526, 5426, 39064, 69710, 125159, 137950, 81603, 86200, 124670, 108176, 104768, 36550]
[2024-12-02 18:19:02.031661] user = 28780 Cloud 70/568
[2024-12-02 18:19:02.104632] user = 28780 Local 70/568
[2024-12-02 18:19:02.209318] user = 28780 Local+ 70/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:05.017682] user = 28780 MPDA- 70/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7039591069103535
Training on augumented user 88631 0/50 current_auc = 0.7039591069103535
User 88631 AUC after training: 0.7030991303788718
User 88631 does not improve AUC. Reverting changes.
Training on augumented user 38545 1/50 current_auc = 0.7039591069103535
User 38545 AUC after training: 0.7042966677918696
User 38545 improves AUC. Keeping the model.
Training on augumented user 112793 2/50 current_auc = 0.7042966677918696
User 112793 AUC after training: 0.7046503030010769
User 112793 improves AUC. Keeping the model.
Training on augumented user 13679 3/50 current_auc = 0.7046503030010769
User 13679 AUC after training: 0.7037019176672935
User 13679 does not improve AUC. Reverting changes.
Training on augumented user 89199 4/50 current_auc = 0.7046503030010769
User 89199 AUC after training: 0.7047306746395332
User 89199 improves AUC. Keeping the model.
Training on augumented user 1494 5/50 current_auc = 0.7047306746395332
User 1494 AUC after training: 0.7044895597241645
User 1494 does not improve AUC. Reverting changes.
Training on augumented user 119614 6/50 current_auc = 0.7047306746395332
User 119614 AUC after training: 0.7045377827072382
User 119614 does not improve AUC. Reverting changes.
Training on augumented user 134790 7/50 current_auc = 0.7047306746395332
User 134790 AUC after training: 0.7046101171818488
User 134790 does not improve AUC. Reverting changes.
Training on augumented user 97009 8/50 current_auc = 0.7047306746395332
User 97009 AUC after training: 0.7046663773287682
User 97009 does not improve AUC. Reverting changes.
Training on augumented user 72318 9/50 current_auc = 0.7047306746395332
User 72318 AUC after training: 0.7048592692610631
User 72318 improves AUC. Keeping the model.
Training on augumented user 39204 10/50 current_auc = 0.7048592692610631
User 39204 AUC after training: 0.7047949719502982
User 39204 does not improve AUC. Reverting changes.
Training on augumented user 91393 11/50 current_auc = 0.7048592692610631
User 91393 AUC after training: 0.7048030091141437
User 91393 does not improve AUC. Reverting changes.
Training on augumented user 88707 12/50 current_auc = 0.7048592692610631
User 88707 AUC after training: 0.7051244956679688
User 88707 improves AUC. Keeping the model.
Training on augumented user 67610 13/50 current_auc = 0.7051244956679688
User 67610 AUC after training: 0.7052209416341162
User 67610 improves AUC. Keeping the model.
Training on augumented user 7114 14/50 current_auc = 0.7052209416341162
User 7114 AUC after training: 0.7053816849110286
User 7114 improves AUC. Keeping the model.
Training on augumented user 84281 15/50 current_auc = 0.7053816849110286
User 84281 AUC after training: 0.7051486071595056
User 84281 does not improve AUC. Reverting changes.
Training on augumented user 8558 16/50 current_auc = 0.7053816849110286
User 8558 AUC after training: 0.7050843098487406
User 8558 does not improve AUC. Reverting changes.
Training on augumented user 72595 17/50 current_auc = 0.7053816849110286
User 72595 AUC after training: 0.705180755814888
User 72595 does not improve AUC. Reverting changes.
Training on augumented user 103433 18/50 current_auc = 0.7053816849110286
User 103433 AUC after training: 0.7051646814871968
User 103433 does not improve AUC. Reverting changes.
Training on augumented user 64210 19/50 current_auc = 0.7053816849110286
User 64210 AUC after training: 0.705052161193358
User 64210 does not improve AUC. Reverting changes.
Training on augumented user 124894 20/50 current_auc = 0.7053816849110286
User 124894 AUC after training: 0.7052691646171898
User 124894 does not improve AUC. Reverting changes.
Training on augumented user 88824 21/50 current_auc = 0.7053816849110286
User 88824 AUC after training: 0.705373647747183
User 88824 does not improve AUC. Reverting changes.
Training on augumented user 122618 22/50 current_auc = 0.7053816849110286
User 122618 AUC after training: 0.7051968301425792
User 122618 does not improve AUC. Reverting changes.
Training on augumented user 107220 23/50 current_auc = 0.7053816849110286
User 107220 AUC after training: 0.705116458504123
User 107220 does not improve AUC. Reverting changes.
Training on augumented user 74865 24/50 current_auc = 0.7053816849110286
User 74865 AUC after training: 0.7054459822217936
User 74865 improves AUC. Keeping the model.
Training on augumented user 100407 25/50 current_auc = 0.7054459822217936
User 100407 AUC after training: 0.7048753435887544
User 100407 does not improve AUC. Reverting changes.
Training on augumented user 25616 26/50 current_auc = 0.7054459822217936
User 25616 AUC after training: 0.7058237289225378
User 25616 improves AUC. Keeping the model.
Training on augumented user 45500 27/50 current_auc = 0.7058237289225378
User 45500 AUC after training: 0.7056308369902428
User 45500 does not improve AUC. Reverting changes.
Training on augumented user 1189 28/50 current_auc = 0.7058237289225378
User 1189 AUC after training: 0.705968397871759
User 1189 improves AUC. Keeping the model.
Training on augumented user 21635 29/50 current_auc = 0.705968397871759
User 21635 AUC after training: 0.7060648438379066
User 21635 improves AUC. Keeping the model.
Training on augumented user 46525 30/50 current_auc = 0.7060648438379066
User 46525 AUC after training: 0.7053013132725723
User 46525 does not improve AUC. Reverting changes.
Training on augumented user 124374 31/50 current_auc = 0.7060648438379066
User 124374 AUC after training: 0.7058639147417659
User 124374 does not improve AUC. Reverting changes.
Training on augumented user 55580 32/50 current_auc = 0.7060648438379066
User 55580 AUC after training: 0.7052932761087267
User 55580 does not improve AUC. Reverting changes.
Training on augumented user 110899 33/50 current_auc = 0.7060648438379066
User 110899 AUC after training: 0.7060648438379065
User 110899 does not improve AUC. Reverting changes.
Training on augumented user 109629 34/50 current_auc = 0.7060648438379066
User 109629 AUC after training: 0.7060969924932889
User 109629 improves AUC. Keeping the model.
Training on augumented user 14754 35/50 current_auc = 0.7060969924932889
User 14754 AUC after training: 0.7059362492163765
User 14754 does not improve AUC. Reverting changes.
Training on augumented user 98945 36/50 current_auc = 0.7060969924932889
User 98945 AUC after training: 0.7059523235440677
User 98945 does not improve AUC. Reverting changes.
Training on augumented user 115622 37/50 current_auc = 0.7060969924932889
User 115622 AUC after training: 0.7058076545948466
User 115622 does not improve AUC. Reverting changes.
Training on augumented user 29526 38/50 current_auc = 0.7060969924932889
User 29526 AUC after training: 0.7058398032502291
User 29526 does not improve AUC. Reverting changes.
Training on augumented user 5426 39/50 current_auc = 0.7060969924932889
User 5426 AUC after training: 0.7057915802671553
User 5426 does not improve AUC. Reverting changes.
Training on augumented user 39064 40/50 current_auc = 0.7060969924932889
User 39064 AUC after training: 0.706032695182524
User 39064 does not improve AUC. Reverting changes.
Training on augumented user 69710 41/50 current_auc = 0.7060969924932889
User 69710 AUC after training: 0.7061130668209803
User 69710 improves AUC. Keeping the model.
Training on augumented user 125159 42/50 current_auc = 0.7061130668209803
User 125159 AUC after training: 0.7057272829563903
User 125159 does not improve AUC. Reverting changes.
Training on augumented user 137950 43/50 current_auc = 0.7061130668209803
User 137950 AUC after training: 0.7058799890694573
User 137950 does not improve AUC. Reverting changes.
Training on augumented user 81603 44/50 current_auc = 0.7061130668209803
User 81603 AUC after training: 0.7060166208548327
User 81603 does not improve AUC. Reverting changes.
Training on augumented user 86200 45/50 current_auc = 0.7061130668209803
User 86200 AUC after training: 0.7055826140071693
User 86200 does not improve AUC. Reverting changes.
Training on augumented user 124670 46/50 current_auc = 0.7061130668209803
User 124670 AUC after training: 0.7060969924932889
User 124670 does not improve AUC. Reverting changes.
Training on augumented user 108176 47/50 current_auc = 0.7061130668209803
User 108176 AUC after training: 0.706265772934047
User 108176 improves AUC. Keeping the model.
Training on augumented user 104768 48/50 current_auc = 0.706265772934047
User 104768 AUC after training: 0.7062496986063558
User 104768 does not improve AUC. Reverting changes.
Training on augumented user 36550 49/50 current_auc = 0.706265772934047
User 36550 AUC after training: 0.7061050296571347
User 36550 does not improve AUC. Reverting changes.
[2024-12-02 18:19:39.871959] start test user 28789 71/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:40.388376] start test user 28789 71/568 recall augumented users by random, augumented_users = [939, 64693, 131155, 85102, 4841, 102698, 99437, 33690, 98942, 50257, 82878, 99121, 69083, 56807, 44296, 74079, 72864, 35064, 52291, 45670, 8609, 110957, 114035, 71192, 78408, 124156, 41992, 133015, 124027, 108651, 7200, 67674, 34078, 70647, 137337, 22690, 114286, 123076, 75493, 62672, 19294, 61742, 54723, 92941, 44146, 79328, 104048, 3161, 124814, 72555]
[2024-12-02 18:19:40.405791] user = 28789 Cloud 71/568
[2024-12-02 18:19:40.436051] user = 28789 Local 71/568
[2024-12-02 18:19:40.549317] user = 28789 Local+ 71/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:43.326765] user = 28789 MPDA- 71/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7296511627906976
Training on augumented user 939 0/50 current_auc = 0.7296511627906976
User 939 AUC after training: 0.7296511627906976
User 939 does not improve AUC. Reverting changes.
Training on augumented user 64693 1/50 current_auc = 0.7296511627906976
User 64693 AUC after training: 0.7296511627906976
User 64693 does not improve AUC. Reverting changes.
Training on augumented user 131155 2/50 current_auc = 0.7296511627906976
User 131155 AUC after training: 0.7325581395348837
User 131155 improves AUC. Keeping the model.
Training on augumented user 85102 3/50 current_auc = 0.7325581395348837
User 85102 AUC after training: 0.7325581395348837
User 85102 does not improve AUC. Reverting changes.
Training on augumented user 4841 4/50 current_auc = 0.7325581395348837
User 4841 AUC after training: 0.7296511627906976
User 4841 does not improve AUC. Reverting changes.
Training on augumented user 102698 5/50 current_auc = 0.7325581395348837
User 102698 AUC after training: 0.7325581395348837
User 102698 does not improve AUC. Reverting changes.
Training on augumented user 99437 6/50 current_auc = 0.7325581395348837
User 99437 AUC after training: 0.7296511627906976
User 99437 does not improve AUC. Reverting changes.
Training on augumented user 33690 7/50 current_auc = 0.7325581395348837
User 33690 AUC after training: 0.7325581395348837
User 33690 does not improve AUC. Reverting changes.
Training on augumented user 98942 8/50 current_auc = 0.7325581395348837
User 98942 AUC after training: 0.7354651162790696
User 98942 improves AUC. Keeping the model.
Training on augumented user 50257 9/50 current_auc = 0.7354651162790696
User 50257 AUC after training: 0.7354651162790696
User 50257 does not improve AUC. Reverting changes.
Training on augumented user 82878 10/50 current_auc = 0.7354651162790696
User 82878 AUC after training: 0.7354651162790696
User 82878 does not improve AUC. Reverting changes.
Training on augumented user 99121 11/50 current_auc = 0.7354651162790696
User 99121 AUC after training: 0.7325581395348837
User 99121 does not improve AUC. Reverting changes.
Training on augumented user 69083 12/50 current_auc = 0.7354651162790696
User 69083 AUC after training: 0.7325581395348837
User 69083 does not improve AUC. Reverting changes.
Training on augumented user 56807 13/50 current_auc = 0.7354651162790696
User 56807 AUC after training: 0.7354651162790696
User 56807 does not improve AUC. Reverting changes.
Training on augumented user 44296 14/50 current_auc = 0.7354651162790696
User 44296 AUC after training: 0.7354651162790697
User 44296 improves AUC. Keeping the model.
Training on augumented user 74079 15/50 current_auc = 0.7354651162790697
User 74079 AUC after training: 0.7354651162790697
User 74079 does not improve AUC. Reverting changes.
Training on augumented user 72864 16/50 current_auc = 0.7354651162790697
User 72864 AUC after training: 0.7383720930232558
User 72864 improves AUC. Keeping the model.
Training on augumented user 35064 17/50 current_auc = 0.7383720930232558
User 35064 AUC after training: 0.7383720930232558
User 35064 does not improve AUC. Reverting changes.
Training on augumented user 52291 18/50 current_auc = 0.7383720930232558
User 52291 AUC after training: 0.7383720930232558
User 52291 does not improve AUC. Reverting changes.
Training on augumented user 45670 19/50 current_auc = 0.7383720930232558
User 45670 AUC after training: 0.7383720930232558
User 45670 does not improve AUC. Reverting changes.
Training on augumented user 8609 20/50 current_auc = 0.7383720930232558
User 8609 AUC after training: 0.7325581395348837
User 8609 does not improve AUC. Reverting changes.
Training on augumented user 110957 21/50 current_auc = 0.7383720930232558
User 110957 AUC after training: 0.7383720930232558
User 110957 does not improve AUC. Reverting changes.
Training on augumented user 114035 22/50 current_auc = 0.7383720930232558
User 114035 AUC after training: 0.7383720930232558
User 114035 does not improve AUC. Reverting changes.
Training on augumented user 71192 23/50 current_auc = 0.7383720930232558
User 71192 AUC after training: 0.7383720930232558
User 71192 does not improve AUC. Reverting changes.
Training on augumented user 78408 24/50 current_auc = 0.7383720930232558
User 78408 AUC after training: 0.7383720930232558
User 78408 does not improve AUC. Reverting changes.
Training on augumented user 124156 25/50 current_auc = 0.7383720930232558
User 124156 AUC after training: 0.7383720930232558
User 124156 does not improve AUC. Reverting changes.
Training on augumented user 41992 26/50 current_auc = 0.7383720930232558
User 41992 AUC after training: 0.7354651162790697
User 41992 does not improve AUC. Reverting changes.
Training on augumented user 133015 27/50 current_auc = 0.7383720930232558
User 133015 AUC after training: 0.7383720930232558
User 133015 does not improve AUC. Reverting changes.
Training on augumented user 124027 28/50 current_auc = 0.7383720930232558
User 124027 AUC after training: 0.7354651162790697
User 124027 does not improve AUC. Reverting changes.
Training on augumented user 108651 29/50 current_auc = 0.7383720930232558
User 108651 AUC after training: 0.7354651162790697
User 108651 does not improve AUC. Reverting changes.
Training on augumented user 7200 30/50 current_auc = 0.7383720930232558
User 7200 AUC after training: 0.7383720930232558
User 7200 does not improve AUC. Reverting changes.
Training on augumented user 67674 31/50 current_auc = 0.7383720930232558
User 67674 AUC after training: 0.7383720930232558
User 67674 does not improve AUC. Reverting changes.
Training on augumented user 34078 32/50 current_auc = 0.7383720930232558
User 34078 AUC after training: 0.7354651162790697
User 34078 does not improve AUC. Reverting changes.
Training on augumented user 70647 33/50 current_auc = 0.7383720930232558
User 70647 AUC after training: 0.7383720930232558
User 70647 does not improve AUC. Reverting changes.
Training on augumented user 137337 34/50 current_auc = 0.7383720930232558
User 137337 AUC after training: 0.7383720930232558
User 137337 does not improve AUC. Reverting changes.
Training on augumented user 22690 35/50 current_auc = 0.7383720930232558
User 22690 AUC after training: 0.7383720930232558
User 22690 does not improve AUC. Reverting changes.
Training on augumented user 114286 36/50 current_auc = 0.7383720930232558
User 114286 AUC after training: 0.7383720930232558
User 114286 does not improve AUC. Reverting changes.
Training on augumented user 123076 37/50 current_auc = 0.7383720930232558
User 123076 AUC after training: 0.7383720930232558
User 123076 does not improve AUC. Reverting changes.
Training on augumented user 75493 38/50 current_auc = 0.7383720930232558
User 75493 AUC after training: 0.7354651162790697
User 75493 does not improve AUC. Reverting changes.
Training on augumented user 62672 39/50 current_auc = 0.7383720930232558
User 62672 AUC after training: 0.7383720930232558
User 62672 does not improve AUC. Reverting changes.
Training on augumented user 19294 40/50 current_auc = 0.7383720930232558
User 19294 AUC after training: 0.7383720930232558
User 19294 does not improve AUC. Reverting changes.
Training on augumented user 61742 41/50 current_auc = 0.7383720930232558
User 61742 AUC after training: 0.7354651162790697
User 61742 does not improve AUC. Reverting changes.
Training on augumented user 54723 42/50 current_auc = 0.7383720930232558
User 54723 AUC after training: 0.7383720930232558
User 54723 does not improve AUC. Reverting changes.
Training on augumented user 92941 43/50 current_auc = 0.7383720930232558
User 92941 AUC after training: 0.7412790697674418
User 92941 improves AUC. Keeping the model.
Training on augumented user 44146 44/50 current_auc = 0.7412790697674418
User 44146 AUC after training: 0.7383720930232558
User 44146 does not improve AUC. Reverting changes.
Training on augumented user 79328 45/50 current_auc = 0.7412790697674418
User 79328 AUC after training: 0.7354651162790697
User 79328 does not improve AUC. Reverting changes.
Training on augumented user 104048 46/50 current_auc = 0.7412790697674418
User 104048 AUC after training: 0.7354651162790697
User 104048 does not improve AUC. Reverting changes.
Training on augumented user 3161 47/50 current_auc = 0.7412790697674418
User 3161 AUC after training: 0.7412790697674418
User 3161 does not improve AUC. Reverting changes.
Training on augumented user 124814 48/50 current_auc = 0.7412790697674418
User 124814 AUC after training: 0.7412790697674418
User 124814 does not improve AUC. Reverting changes.
Training on augumented user 72555 49/50 current_auc = 0.7412790697674418
User 72555 AUC after training: 0.7354651162790697
User 72555 does not improve AUC. Reverting changes.
[2024-12-02 18:20:10.930057] start test user 28965 72/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:11.603260] start test user 28965 72/568 recall augumented users by random, augumented_users = [68582, 71257, 57095, 52785, 94657, 32644, 11543, 124580, 121147, 68923, 119952, 90061, 31120, 32921, 45502, 112546, 52768, 137494, 79092, 13791, 111286, 79944, 135534, 5257, 114511, 68870, 125257, 104657, 14946, 85083, 133541, 129697, 39809, 97318, 106621, 47434, 119409, 30113, 84073, 42468, 82713, 88800, 20100, 129338, 62278, 12467, 88418, 75108, 83120, 70845]
[2024-12-02 18:20:11.618797] user = 28965 Cloud 72/568
[2024-12-02 18:20:11.632993] user = 28965 Local 72/568
[2024-12-02 18:20:11.659251] user = 28965 Local+ 72/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:14.358106] user = 28965 MPDA- 72/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6801470588235293
Training on augumented user 68582 0/50 current_auc = 0.6801470588235293
User 68582 AUC after training: 0.681985294117647
User 68582 improves AUC. Keeping the model.
Training on augumented user 71257 1/50 current_auc = 0.681985294117647
User 71257 AUC after training: 0.681985294117647
User 71257 does not improve AUC. Reverting changes.
Training on augumented user 57095 2/50 current_auc = 0.681985294117647
User 57095 AUC after training: 0.6838235294117646
User 57095 improves AUC. Keeping the model.
Training on augumented user 52785 3/50 current_auc = 0.6838235294117646
User 52785 AUC after training: 0.681985294117647
User 52785 does not improve AUC. Reverting changes.
Training on augumented user 94657 4/50 current_auc = 0.6838235294117646
User 94657 AUC after training: 0.6847426470588235
User 94657 improves AUC. Keeping the model.
Training on augumented user 32644 5/50 current_auc = 0.6847426470588235
User 32644 AUC after training: 0.6856617647058824
User 32644 improves AUC. Keeping the model.
Training on augumented user 11543 6/50 current_auc = 0.6856617647058824
User 11543 AUC after training: 0.6856617647058824
User 11543 does not improve AUC. Reverting changes.
Training on augumented user 124580 7/50 current_auc = 0.6856617647058824
User 124580 AUC after training: 0.6856617647058824
User 124580 does not improve AUC. Reverting changes.
Training on augumented user 121147 8/50 current_auc = 0.6856617647058824
User 121147 AUC after training: 0.6856617647058824
User 121147 does not improve AUC. Reverting changes.
Training on augumented user 68923 9/50 current_auc = 0.6856617647058824
User 68923 AUC after training: 0.6856617647058824
User 68923 does not improve AUC. Reverting changes.
Training on augumented user 119952 10/50 current_auc = 0.6856617647058824
User 119952 AUC after training: 0.6856617647058824
User 119952 does not improve AUC. Reverting changes.
Training on augumented user 90061 11/50 current_auc = 0.6856617647058824
User 90061 AUC after training: 0.6856617647058824
User 90061 does not improve AUC. Reverting changes.
Training on augumented user 31120 12/50 current_auc = 0.6856617647058824
User 31120 AUC after training: 0.6847426470588235
User 31120 does not improve AUC. Reverting changes.
Training on augumented user 32921 13/50 current_auc = 0.6856617647058824
User 32921 AUC after training: 0.6856617647058824
User 32921 does not improve AUC. Reverting changes.
Training on augumented user 45502 14/50 current_auc = 0.6856617647058824
User 45502 AUC after training: 0.6856617647058824
User 45502 does not improve AUC. Reverting changes.
Training on augumented user 112546 15/50 current_auc = 0.6856617647058824
User 112546 AUC after training: 0.6856617647058824
User 112546 does not improve AUC. Reverting changes.
Training on augumented user 52768 16/50 current_auc = 0.6856617647058824
User 52768 AUC after training: 0.6847426470588235
User 52768 does not improve AUC. Reverting changes.
Training on augumented user 137494 17/50 current_auc = 0.6856617647058824
User 137494 AUC after training: 0.6847426470588235
User 137494 does not improve AUC. Reverting changes.
Training on augumented user 79092 18/50 current_auc = 0.6856617647058824
User 79092 AUC after training: 0.6856617647058824
User 79092 does not improve AUC. Reverting changes.
Training on augumented user 13791 19/50 current_auc = 0.6856617647058824
User 13791 AUC after training: 0.682904411764706
User 13791 does not improve AUC. Reverting changes.
Training on augumented user 111286 20/50 current_auc = 0.6856617647058824
User 111286 AUC after training: 0.6847426470588235
User 111286 does not improve AUC. Reverting changes.
Training on augumented user 79944 21/50 current_auc = 0.6856617647058824
User 79944 AUC after training: 0.6847426470588235
User 79944 does not improve AUC. Reverting changes.
Training on augumented user 135534 22/50 current_auc = 0.6856617647058824
User 135534 AUC after training: 0.6847426470588235
User 135534 does not improve AUC. Reverting changes.
Training on augumented user 5257 23/50 current_auc = 0.6856617647058824
User 5257 AUC after training: 0.6856617647058824
User 5257 does not improve AUC. Reverting changes.
Training on augumented user 114511 24/50 current_auc = 0.6856617647058824
User 114511 AUC after training: 0.682904411764706
User 114511 does not improve AUC. Reverting changes.
Training on augumented user 68870 25/50 current_auc = 0.6856617647058824
User 68870 AUC after training: 0.6847426470588235
User 68870 does not improve AUC. Reverting changes.
Training on augumented user 125257 26/50 current_auc = 0.6856617647058824
User 125257 AUC after training: 0.6847426470588235
User 125257 does not improve AUC. Reverting changes.
Training on augumented user 104657 27/50 current_auc = 0.6856617647058824
User 104657 AUC after training: 0.6847426470588235
User 104657 does not improve AUC. Reverting changes.
Training on augumented user 14946 28/50 current_auc = 0.6856617647058824
User 14946 AUC after training: 0.6856617647058824
User 14946 does not improve AUC. Reverting changes.
Training on augumented user 85083 29/50 current_auc = 0.6856617647058824
User 85083 AUC after training: 0.6847426470588235
User 85083 does not improve AUC. Reverting changes.
Training on augumented user 133541 30/50 current_auc = 0.6856617647058824
User 133541 AUC after training: 0.6856617647058824
User 133541 does not improve AUC. Reverting changes.
Training on augumented user 129697 31/50 current_auc = 0.6856617647058824
User 129697 AUC after training: 0.6856617647058824
User 129697 does not improve AUC. Reverting changes.
Training on augumented user 39809 32/50 current_auc = 0.6856617647058824
User 39809 AUC after training: 0.6847426470588235
User 39809 does not improve AUC. Reverting changes.
Training on augumented user 97318 33/50 current_auc = 0.6856617647058824
User 97318 AUC after training: 0.6838235294117648
User 97318 does not improve AUC. Reverting changes.
Training on augumented user 106621 34/50 current_auc = 0.6856617647058824
User 106621 AUC after training: 0.6847426470588235
User 106621 does not improve AUC. Reverting changes.
Training on augumented user 47434 35/50 current_auc = 0.6856617647058824
User 47434 AUC after training: 0.6838235294117646
User 47434 does not improve AUC. Reverting changes.
Training on augumented user 119409 36/50 current_auc = 0.6856617647058824
User 119409 AUC after training: 0.6856617647058824
User 119409 does not improve AUC. Reverting changes.
Training on augumented user 30113 37/50 current_auc = 0.6856617647058824
User 30113 AUC after training: 0.6856617647058824
User 30113 does not improve AUC. Reverting changes.
Training on augumented user 84073 38/50 current_auc = 0.6856617647058824
User 84073 AUC after training: 0.6856617647058824
User 84073 does not improve AUC. Reverting changes.
Training on augumented user 42468 39/50 current_auc = 0.6856617647058824
User 42468 AUC after training: 0.6847426470588235
User 42468 does not improve AUC. Reverting changes.
Training on augumented user 82713 40/50 current_auc = 0.6856617647058824
User 82713 AUC after training: 0.6856617647058824
User 82713 does not improve AUC. Reverting changes.
Training on augumented user 88800 41/50 current_auc = 0.6856617647058824
User 88800 AUC after training: 0.6856617647058824
User 88800 does not improve AUC. Reverting changes.
Training on augumented user 20100 42/50 current_auc = 0.6856617647058824
User 20100 AUC after training: 0.6847426470588235
User 20100 does not improve AUC. Reverting changes.
Training on augumented user 129338 43/50 current_auc = 0.6856617647058824
User 129338 AUC after training: 0.6838235294117646
User 129338 does not improve AUC. Reverting changes.
Training on augumented user 62278 44/50 current_auc = 0.6856617647058824
User 62278 AUC after training: 0.6847426470588235
User 62278 does not improve AUC. Reverting changes.
Training on augumented user 12467 45/50 current_auc = 0.6856617647058824
User 12467 AUC after training: 0.6856617647058824
User 12467 does not improve AUC. Reverting changes.
Training on augumented user 88418 46/50 current_auc = 0.6856617647058824
User 88418 AUC after training: 0.6856617647058824
User 88418 does not improve AUC. Reverting changes.
Training on augumented user 75108 47/50 current_auc = 0.6856617647058824
User 75108 AUC after training: 0.6810661764705882
User 75108 does not improve AUC. Reverting changes.
Training on augumented user 83120 48/50 current_auc = 0.6856617647058824
User 83120 AUC after training: 0.6838235294117646
User 83120 does not improve AUC. Reverting changes.
Training on augumented user 70845 49/50 current_auc = 0.6856617647058824
User 70845 AUC after training: 0.6856617647058824
User 70845 does not improve AUC. Reverting changes.
[2024-12-02 18:20:46.061408] start test user 28969 73/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:46.749674] start test user 28969 73/568 recall augumented users by random, augumented_users = [96635, 90300, 87563, 51943, 137468, 136705, 128071, 363, 34769, 78071, 98564, 97815, 134927, 15350, 8377, 30505, 59916, 46910, 90811, 137461, 23913, 1185, 64459, 127745, 115818, 113991, 84574, 27903, 873, 53685, 15957, 4235, 72027, 13986, 10758, 41150, 70053, 30435, 135947, 70737, 42130, 127605, 37056, 27278, 64376, 65774, 58395, 74514, 62545, 105025]
[2024-12-02 18:20:46.765217] user = 28969 Cloud 73/568
[2024-12-02 18:20:46.777069] user = 28969 Local 73/568
[2024-12-02 18:20:46.856921] user = 28969 Local+ 73/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:50.185588] user = 28969 MPDA- 73/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6792717086834734
Training on augumented user 96635 0/50 current_auc = 0.6792717086834734
User 96635 AUC after training: 0.6792717086834734
User 96635 does not improve AUC. Reverting changes.
Training on augumented user 90300 1/50 current_auc = 0.6792717086834734
User 90300 AUC after training: 0.6792717086834734
User 90300 does not improve AUC. Reverting changes.
Training on augumented user 87563 2/50 current_auc = 0.6792717086834734
User 87563 AUC after training: 0.6778711484593838
User 87563 does not improve AUC. Reverting changes.
Training on augumented user 51943 3/50 current_auc = 0.6792717086834734
User 51943 AUC after training: 0.6792717086834733
User 51943 does not improve AUC. Reverting changes.
Training on augumented user 137468 4/50 current_auc = 0.6792717086834734
User 137468 AUC after training: 0.6778711484593838
User 137468 does not improve AUC. Reverting changes.
Training on augumented user 136705 5/50 current_auc = 0.6792717086834734
User 136705 AUC after training: 0.6778711484593838
User 136705 does not improve AUC. Reverting changes.
Training on augumented user 128071 6/50 current_auc = 0.6792717086834734
User 128071 AUC after training: 0.6792717086834734
User 128071 does not improve AUC. Reverting changes.
Training on augumented user 363 7/50 current_auc = 0.6792717086834734
User 363 AUC after training: 0.6778711484593838
User 363 does not improve AUC. Reverting changes.
Training on augumented user 34769 8/50 current_auc = 0.6792717086834734
User 34769 AUC after training: 0.6778711484593838
User 34769 does not improve AUC. Reverting changes.
Training on augumented user 78071 9/50 current_auc = 0.6792717086834734
User 78071 AUC after training: 0.6792717086834734
User 78071 does not improve AUC. Reverting changes.
Training on augumented user 98564 10/50 current_auc = 0.6792717086834734
User 98564 AUC after training: 0.6778711484593838
User 98564 does not improve AUC. Reverting changes.
Training on augumented user 97815 11/50 current_auc = 0.6792717086834734
User 97815 AUC after training: 0.6778711484593838
User 97815 does not improve AUC. Reverting changes.
Training on augumented user 134927 12/50 current_auc = 0.6792717086834734
User 134927 AUC after training: 0.6778711484593838
User 134927 does not improve AUC. Reverting changes.
Training on augumented user 15350 13/50 current_auc = 0.6792717086834734
User 15350 AUC after training: 0.6764705882352942
User 15350 does not improve AUC. Reverting changes.
Training on augumented user 8377 14/50 current_auc = 0.6792717086834734
User 8377 AUC after training: 0.6778711484593838
User 8377 does not improve AUC. Reverting changes.
Training on augumented user 30505 15/50 current_auc = 0.6792717086834734
User 30505 AUC after training: 0.6778711484593838
User 30505 does not improve AUC. Reverting changes.
Training on augumented user 59916 16/50 current_auc = 0.6792717086834734
User 59916 AUC after training: 0.6778711484593838
User 59916 does not improve AUC. Reverting changes.
Training on augumented user 46910 17/50 current_auc = 0.6792717086834734
User 46910 AUC after training: 0.6778711484593838
User 46910 does not improve AUC. Reverting changes.
Training on augumented user 90811 18/50 current_auc = 0.6792717086834734
User 90811 AUC after training: 0.6778711484593838
User 90811 does not improve AUC. Reverting changes.
Training on augumented user 137461 19/50 current_auc = 0.6792717086834734
User 137461 AUC after training: 0.6792717086834734
User 137461 does not improve AUC. Reverting changes.
Training on augumented user 23913 20/50 current_auc = 0.6792717086834734
User 23913 AUC after training: 0.6792717086834734
User 23913 does not improve AUC. Reverting changes.
Training on augumented user 1185 21/50 current_auc = 0.6792717086834734
User 1185 AUC after training: 0.6778711484593838
User 1185 does not improve AUC. Reverting changes.
Training on augumented user 64459 22/50 current_auc = 0.6792717086834734
User 64459 AUC after training: 0.6778711484593838
User 64459 does not improve AUC. Reverting changes.
Training on augumented user 127745 23/50 current_auc = 0.6792717086834734
User 127745 AUC after training: 0.6792717086834734
User 127745 does not improve AUC. Reverting changes.
Training on augumented user 115818 24/50 current_auc = 0.6792717086834734
User 115818 AUC after training: 0.6792717086834734
User 115818 does not improve AUC. Reverting changes.
Training on augumented user 113991 25/50 current_auc = 0.6792717086834734
User 113991 AUC after training: 0.6820728291316527
User 113991 improves AUC. Keeping the model.
Training on augumented user 84574 26/50 current_auc = 0.6820728291316527
User 84574 AUC after training: 0.6820728291316527
User 84574 does not improve AUC. Reverting changes.
Training on augumented user 27903 27/50 current_auc = 0.6820728291316527
User 27903 AUC after training: 0.6820728291316527
User 27903 does not improve AUC. Reverting changes.
Training on augumented user 873 28/50 current_auc = 0.6820728291316527
User 873 AUC after training: 0.6820728291316527
User 873 does not improve AUC. Reverting changes.
Training on augumented user 53685 29/50 current_auc = 0.6820728291316527
User 53685 AUC after training: 0.6834733893557423
User 53685 improves AUC. Keeping the model.
Training on augumented user 15957 30/50 current_auc = 0.6834733893557423
User 15957 AUC after training: 0.6820728291316527
User 15957 does not improve AUC. Reverting changes.
Training on augumented user 4235 31/50 current_auc = 0.6834733893557423
User 4235 AUC after training: 0.6834733893557423
User 4235 does not improve AUC. Reverting changes.
Training on augumented user 72027 32/50 current_auc = 0.6834733893557423
User 72027 AUC after training: 0.6792717086834734
User 72027 does not improve AUC. Reverting changes.
Training on augumented user 13986 33/50 current_auc = 0.6834733893557423
User 13986 AUC after training: 0.6820728291316527
User 13986 does not improve AUC. Reverting changes.
Training on augumented user 10758 34/50 current_auc = 0.6834733893557423
User 10758 AUC after training: 0.6834733893557423
User 10758 does not improve AUC. Reverting changes.
Training on augumented user 41150 35/50 current_auc = 0.6834733893557423
User 41150 AUC after training: 0.6820728291316527
User 41150 does not improve AUC. Reverting changes.
Training on augumented user 70053 36/50 current_auc = 0.6834733893557423
User 70053 AUC after training: 0.6820728291316527
User 70053 does not improve AUC. Reverting changes.
Training on augumented user 30435 37/50 current_auc = 0.6834733893557423
User 30435 AUC after training: 0.6820728291316527
User 30435 does not improve AUC. Reverting changes.
Training on augumented user 135947 38/50 current_auc = 0.6834733893557423
User 135947 AUC after training: 0.680672268907563
User 135947 does not improve AUC. Reverting changes.
Training on augumented user 70737 39/50 current_auc = 0.6834733893557423
User 70737 AUC after training: 0.6834733893557423
User 70737 does not improve AUC. Reverting changes.
Training on augumented user 42130 40/50 current_auc = 0.6834733893557423
User 42130 AUC after training: 0.6834733893557423
User 42130 does not improve AUC. Reverting changes.
Training on augumented user 127605 41/50 current_auc = 0.6834733893557423
User 127605 AUC after training: 0.6834733893557423
User 127605 does not improve AUC. Reverting changes.
Training on augumented user 37056 42/50 current_auc = 0.6834733893557423
User 37056 AUC after training: 0.6820728291316527
User 37056 does not improve AUC. Reverting changes.
Training on augumented user 27278 43/50 current_auc = 0.6834733893557423
User 27278 AUC after training: 0.6792717086834734
User 27278 does not improve AUC. Reverting changes.
Training on augumented user 64376 44/50 current_auc = 0.6834733893557423
User 64376 AUC after training: 0.6834733893557423
User 64376 does not improve AUC. Reverting changes.
Training on augumented user 65774 45/50 current_auc = 0.6834733893557423
User 65774 AUC after training: 0.6820728291316527
User 65774 does not improve AUC. Reverting changes.
Training on augumented user 58395 46/50 current_auc = 0.6834733893557423
User 58395 AUC after training: 0.680672268907563
User 58395 does not improve AUC. Reverting changes.
Training on augumented user 74514 47/50 current_auc = 0.6834733893557423
User 74514 AUC after training: 0.6834733893557423
User 74514 does not improve AUC. Reverting changes.
Training on augumented user 62545 48/50 current_auc = 0.6834733893557423
User 62545 AUC after training: 0.6820728291316527
User 62545 does not improve AUC. Reverting changes.
Training on augumented user 105025 49/50 current_auc = 0.6834733893557423
User 105025 AUC after training: 0.680672268907563
User 105025 does not improve AUC. Reverting changes.
[2024-12-02 18:21:24.299316] start test user 29024 74/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:25.055879] start test user 29024 74/568 recall augumented users by random, augumented_users = [34356, 31653, 16434, 70914, 130052, 26683, 74114, 34054, 1010, 138242, 123733, 79578, 105545, 25348, 26508, 126293, 63259, 26913, 91872, 53665, 125907, 37651, 58490, 124590, 94101, 47722, 80599, 66017, 25769, 36485, 133305, 133477, 35750, 75895, 130253, 58497, 83566, 60948, 118374, 111098, 35594, 46612, 110277, 28362, 138046, 96460, 98887, 40717, 137394, 104873]
[2024-12-02 18:21:25.078107] user = 29024 Cloud 74/568
[2024-12-02 18:21:25.100759] user = 29024 Local 74/568
[2024-12-02 18:21:25.256461] user = 29024 Local+ 74/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:27.983825] user = 29024 MPDA- 74/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6041666666666666
Training on augumented user 34356 0/50 current_auc = 0.6041666666666666
User 34356 AUC after training: 0.6041666666666666
User 34356 does not improve AUC. Reverting changes.
Training on augumented user 31653 1/50 current_auc = 0.6041666666666666
User 31653 AUC after training: 0.6041666666666666
User 31653 does not improve AUC. Reverting changes.
Training on augumented user 16434 2/50 current_auc = 0.6041666666666666
User 16434 AUC after training: 0.6041666666666666
User 16434 does not improve AUC. Reverting changes.
Training on augumented user 70914 3/50 current_auc = 0.6041666666666666
User 70914 AUC after training: 0.6041666666666666
User 70914 does not improve AUC. Reverting changes.
Training on augumented user 130052 4/50 current_auc = 0.6041666666666666
User 130052 AUC after training: 0.6041666666666666
User 130052 does not improve AUC. Reverting changes.
Training on augumented user 26683 5/50 current_auc = 0.6041666666666666
User 26683 AUC after training: 0.6041666666666666
User 26683 does not improve AUC. Reverting changes.
Training on augumented user 74114 6/50 current_auc = 0.6041666666666666
User 74114 AUC after training: 0.6041666666666666
User 74114 does not improve AUC. Reverting changes.
Training on augumented user 34054 7/50 current_auc = 0.6041666666666666
User 34054 AUC after training: 0.6041666666666666
User 34054 does not improve AUC. Reverting changes.
Training on augumented user 1010 8/50 current_auc = 0.6041666666666666
User 1010 AUC after training: 0.6041666666666666
User 1010 does not improve AUC. Reverting changes.
Training on augumented user 138242 9/50 current_auc = 0.6041666666666666
User 138242 AUC after training: 0.6041666666666666
User 138242 does not improve AUC. Reverting changes.
Training on augumented user 123733 10/50 current_auc = 0.6041666666666666
User 123733 AUC after training: 0.6041666666666666
User 123733 does not improve AUC. Reverting changes.
Training on augumented user 79578 11/50 current_auc = 0.6041666666666666
User 79578 AUC after training: 0.6041666666666666
User 79578 does not improve AUC. Reverting changes.
Training on augumented user 105545 12/50 current_auc = 0.6041666666666666
User 105545 AUC after training: 0.6041666666666666
User 105545 does not improve AUC. Reverting changes.
Training on augumented user 25348 13/50 current_auc = 0.6041666666666666
User 25348 AUC after training: 0.6041666666666666
User 25348 does not improve AUC. Reverting changes.
Training on augumented user 26508 14/50 current_auc = 0.6041666666666666
User 26508 AUC after training: 0.6041666666666666
User 26508 does not improve AUC. Reverting changes.
Training on augumented user 126293 15/50 current_auc = 0.6041666666666666
User 126293 AUC after training: 0.6041666666666666
User 126293 does not improve AUC. Reverting changes.
Training on augumented user 63259 16/50 current_auc = 0.6041666666666666
User 63259 AUC after training: 0.6041666666666666
User 63259 does not improve AUC. Reverting changes.
Training on augumented user 26913 17/50 current_auc = 0.6041666666666666
User 26913 AUC after training: 0.6041666666666666
User 26913 does not improve AUC. Reverting changes.
Training on augumented user 91872 18/50 current_auc = 0.6041666666666666
User 91872 AUC after training: 0.6041666666666666
User 91872 does not improve AUC. Reverting changes.
Training on augumented user 53665 19/50 current_auc = 0.6041666666666666
User 53665 AUC after training: 0.6041666666666666
User 53665 does not improve AUC. Reverting changes.
Training on augumented user 125907 20/50 current_auc = 0.6041666666666666
User 125907 AUC after training: 0.6041666666666666
User 125907 does not improve AUC. Reverting changes.
Training on augumented user 37651 21/50 current_auc = 0.6041666666666666
User 37651 AUC after training: 0.6041666666666666
User 37651 does not improve AUC. Reverting changes.
Training on augumented user 58490 22/50 current_auc = 0.6041666666666666
User 58490 AUC after training: 0.6041666666666666
User 58490 does not improve AUC. Reverting changes.
Training on augumented user 124590 23/50 current_auc = 0.6041666666666666
User 124590 AUC after training: 0.6041666666666666
User 124590 does not improve AUC. Reverting changes.
Training on augumented user 94101 24/50 current_auc = 0.6041666666666666
User 94101 AUC after training: 0.6041666666666666
User 94101 does not improve AUC. Reverting changes.
Training on augumented user 47722 25/50 current_auc = 0.6041666666666666
User 47722 AUC after training: 0.6041666666666666
User 47722 does not improve AUC. Reverting changes.
Training on augumented user 80599 26/50 current_auc = 0.6041666666666666
User 80599 AUC after training: 0.6041666666666666
User 80599 does not improve AUC. Reverting changes.
Training on augumented user 66017 27/50 current_auc = 0.6041666666666666
User 66017 AUC after training: 0.6041666666666666
User 66017 does not improve AUC. Reverting changes.
Training on augumented user 25769 28/50 current_auc = 0.6041666666666666
User 25769 AUC after training: 0.6041666666666666
User 25769 does not improve AUC. Reverting changes.
Training on augumented user 36485 29/50 current_auc = 0.6041666666666666
User 36485 AUC after training: 0.6041666666666666
User 36485 does not improve AUC. Reverting changes.
Training on augumented user 133305 30/50 current_auc = 0.6041666666666666
User 133305 AUC after training: 0.6041666666666666
User 133305 does not improve AUC. Reverting changes.
Training on augumented user 133477 31/50 current_auc = 0.6041666666666666
User 133477 AUC after training: 0.6041666666666666
User 133477 does not improve AUC. Reverting changes.
Training on augumented user 35750 32/50 current_auc = 0.6041666666666666
User 35750 AUC after training: 0.6041666666666666
User 35750 does not improve AUC. Reverting changes.
Training on augumented user 75895 33/50 current_auc = 0.6041666666666666
User 75895 AUC after training: 0.6041666666666666
User 75895 does not improve AUC. Reverting changes.
Training on augumented user 130253 34/50 current_auc = 0.6041666666666666
User 130253 AUC after training: 0.6041666666666666
User 130253 does not improve AUC. Reverting changes.
Training on augumented user 58497 35/50 current_auc = 0.6041666666666666
User 58497 AUC after training: 0.6041666666666666
User 58497 does not improve AUC. Reverting changes.
Training on augumented user 83566 36/50 current_auc = 0.6041666666666666
User 83566 AUC after training: 0.6041666666666666
User 83566 does not improve AUC. Reverting changes.
Training on augumented user 60948 37/50 current_auc = 0.6041666666666666
User 60948 AUC after training: 0.6041666666666666
User 60948 does not improve AUC. Reverting changes.
Training on augumented user 118374 38/50 current_auc = 0.6041666666666666
User 118374 AUC after training: 0.6041666666666666
User 118374 does not improve AUC. Reverting changes.
Training on augumented user 111098 39/50 current_auc = 0.6041666666666666
User 111098 AUC after training: 0.6041666666666666
User 111098 does not improve AUC. Reverting changes.
Training on augumented user 35594 40/50 current_auc = 0.6041666666666666
User 35594 AUC after training: 0.6041666666666666
User 35594 does not improve AUC. Reverting changes.
Training on augumented user 46612 41/50 current_auc = 0.6041666666666666
User 46612 AUC after training: 0.6041666666666666
User 46612 does not improve AUC. Reverting changes.
Training on augumented user 110277 42/50 current_auc = 0.6041666666666666
User 110277 AUC after training: 0.6041666666666666
User 110277 does not improve AUC. Reverting changes.
Training on augumented user 28362 43/50 current_auc = 0.6041666666666666
User 28362 AUC after training: 0.6041666666666666
User 28362 does not improve AUC. Reverting changes.
Training on augumented user 138046 44/50 current_auc = 0.6041666666666666
User 138046 AUC after training: 0.6041666666666666
User 138046 does not improve AUC. Reverting changes.
Training on augumented user 96460 45/50 current_auc = 0.6041666666666666
User 96460 AUC after training: 0.6041666666666666
User 96460 does not improve AUC. Reverting changes.
Training on augumented user 98887 46/50 current_auc = 0.6041666666666666
User 98887 AUC after training: 0.6041666666666666
User 98887 does not improve AUC. Reverting changes.
Training on augumented user 40717 47/50 current_auc = 0.6041666666666666
User 40717 AUC after training: 0.6041666666666666
User 40717 does not improve AUC. Reverting changes.
Training on augumented user 137394 48/50 current_auc = 0.6041666666666666
User 137394 AUC after training: 0.6041666666666666
User 137394 does not improve AUC. Reverting changes.
Training on augumented user 104873 49/50 current_auc = 0.6041666666666666
User 104873 AUC after training: 0.6041666666666666
User 104873 does not improve AUC. Reverting changes.
[2024-12-02 18:21:56.285363] start test user 29062 75/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:56.874620] start test user 29062 75/568 recall augumented users by random, augumented_users = [114765, 133730, 103965, 100903, 25719, 22576, 53168, 54941, 65274, 58206, 101828, 108072, 2852, 137589, 12423, 51251, 100600, 44945, 50149, 22949, 29500, 111775, 106061, 125927, 6309, 37131, 69844, 68347, 17026, 127504, 89056, 91635, 6476, 80274, 111281, 75750, 60978, 128436, 14367, 53189, 89835, 19935, 11284, 12798, 115894, 117195, 47187, 20133, 25550, 8805]
[2024-12-02 18:21:56.891438] user = 29062 Cloud 75/568
[2024-12-02 18:21:56.905406] user = 29062 Local 75/568
[2024-12-02 18:21:56.959472] user = 29062 Local+ 75/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:00.064834] user = 29062 MPDA- 75/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8037466547725245
Training on augumented user 114765 0/50 current_auc = 0.8037466547725245
User 114765 AUC after training: 0.8010704727921498
User 114765 does not improve AUC. Reverting changes.
Training on augumented user 133730 1/50 current_auc = 0.8037466547725245
User 133730 AUC after training: 0.8037466547725245
User 133730 does not improve AUC. Reverting changes.
Training on augumented user 103965 2/50 current_auc = 0.8037466547725245
User 103965 AUC after training: 0.8037466547725245
User 103965 does not improve AUC. Reverting changes.
Training on augumented user 100903 3/50 current_auc = 0.8037466547725245
User 100903 AUC after training: 0.8073148974130242
User 100903 improves AUC. Keeping the model.
Training on augumented user 25719 4/50 current_auc = 0.8073148974130242
User 25719 AUC after training: 0.8090990187332738
User 25719 improves AUC. Keeping the model.
Training on augumented user 22576 5/50 current_auc = 0.8090990187332738
User 22576 AUC after training: 0.8073148974130241
User 22576 does not improve AUC. Reverting changes.
Training on augumented user 53168 6/50 current_auc = 0.8090990187332738
User 53168 AUC after training: 0.8090990187332738
User 53168 does not improve AUC. Reverting changes.
Training on augumented user 54941 7/50 current_auc = 0.8090990187332738
User 54941 AUC after training: 0.808206958073149
User 54941 does not improve AUC. Reverting changes.
Training on augumented user 65274 8/50 current_auc = 0.8090990187332738
User 65274 AUC after training: 0.8090990187332738
User 65274 does not improve AUC. Reverting changes.
Training on augumented user 58206 9/50 current_auc = 0.8090990187332738
User 58206 AUC after training: 0.8090990187332738
User 58206 does not improve AUC. Reverting changes.
Training on augumented user 101828 10/50 current_auc = 0.8090990187332738
User 101828 AUC after training: 0.800178412132025
User 101828 does not improve AUC. Reverting changes.
Training on augumented user 108072 11/50 current_auc = 0.8090990187332738
User 108072 AUC after training: 0.8099910793933988
User 108072 improves AUC. Keeping the model.
Training on augumented user 2852 12/50 current_auc = 0.8099910793933988
User 2852 AUC after training: 0.808206958073149
User 2852 does not improve AUC. Reverting changes.
Training on augumented user 137589 13/50 current_auc = 0.8099910793933988
User 137589 AUC after training: 0.8108831400535237
User 137589 improves AUC. Keeping the model.
Training on augumented user 12423 14/50 current_auc = 0.8108831400535237
User 12423 AUC after training: 0.8090990187332738
User 12423 does not improve AUC. Reverting changes.
Training on augumented user 51251 15/50 current_auc = 0.8108831400535237
User 51251 AUC after training: 0.808206958073149
User 51251 does not improve AUC. Reverting changes.
Training on augumented user 100600 16/50 current_auc = 0.8108831400535237
User 100600 AUC after training: 0.8090990187332738
User 100600 does not improve AUC. Reverting changes.
Training on augumented user 44945 17/50 current_auc = 0.8108831400535237
User 44945 AUC after training: 0.808206958073149
User 44945 does not improve AUC. Reverting changes.
Training on augumented user 50149 18/50 current_auc = 0.8108831400535237
User 50149 AUC after training: 0.8099910793933988
User 50149 does not improve AUC. Reverting changes.
Training on augumented user 22949 19/50 current_auc = 0.8108831400535237
User 22949 AUC after training: 0.8099910793933988
User 22949 does not improve AUC. Reverting changes.
Training on augumented user 29500 20/50 current_auc = 0.8108831400535237
User 29500 AUC after training: 0.8055307760927743
User 29500 does not improve AUC. Reverting changes.
Training on augumented user 111775 21/50 current_auc = 0.8108831400535237
User 111775 AUC after training: 0.8108831400535237
User 111775 does not improve AUC. Reverting changes.
Training on augumented user 106061 22/50 current_auc = 0.8108831400535237
User 106061 AUC after training: 0.8099910793933988
User 106061 does not improve AUC. Reverting changes.
Training on augumented user 125927 23/50 current_auc = 0.8108831400535237
User 125927 AUC after training: 0.8099910793933988
User 125927 does not improve AUC. Reverting changes.
Training on augumented user 6309 24/50 current_auc = 0.8108831400535237
User 6309 AUC after training: 0.808206958073149
User 6309 does not improve AUC. Reverting changes.
Training on augumented user 37131 25/50 current_auc = 0.8108831400535237
User 37131 AUC after training: 0.8099910793933988
User 37131 does not improve AUC. Reverting changes.
Training on augumented user 69844 26/50 current_auc = 0.8108831400535237
User 69844 AUC after training: 0.8099910793933988
User 69844 does not improve AUC. Reverting changes.
Training on augumented user 68347 27/50 current_auc = 0.8108831400535237
User 68347 AUC after training: 0.8090990187332738
User 68347 does not improve AUC. Reverting changes.
Training on augumented user 17026 28/50 current_auc = 0.8108831400535237
User 17026 AUC after training: 0.8099910793933988
User 17026 does not improve AUC. Reverting changes.
Training on augumented user 127504 29/50 current_auc = 0.8108831400535237
User 127504 AUC after training: 0.8099910793933988
User 127504 does not improve AUC. Reverting changes.
Training on augumented user 89056 30/50 current_auc = 0.8108831400535237
User 89056 AUC after training: 0.8108831400535237
User 89056 does not improve AUC. Reverting changes.
Training on augumented user 91635 31/50 current_auc = 0.8108831400535237
User 91635 AUC after training: 0.8064228367528992
User 91635 does not improve AUC. Reverting changes.
Training on augumented user 6476 32/50 current_auc = 0.8108831400535237
User 6476 AUC after training: 0.8046387154326494
User 6476 does not improve AUC. Reverting changes.
Training on augumented user 80274 33/50 current_auc = 0.8108831400535237
User 80274 AUC after training: 0.8108831400535237
User 80274 does not improve AUC. Reverting changes.
Training on augumented user 111281 34/50 current_auc = 0.8108831400535237
User 111281 AUC after training: 0.808206958073149
User 111281 does not improve AUC. Reverting changes.
Training on augumented user 75750 35/50 current_auc = 0.8108831400535237
User 75750 AUC after training: 0.808206958073149
User 75750 does not improve AUC. Reverting changes.
Training on augumented user 60978 36/50 current_auc = 0.8108831400535237
User 60978 AUC after training: 0.808206958073149
User 60978 does not improve AUC. Reverting changes.
Training on augumented user 128436 37/50 current_auc = 0.8108831400535237
User 128436 AUC after training: 0.8108831400535237
User 128436 does not improve AUC. Reverting changes.
Training on augumented user 14367 38/50 current_auc = 0.8108831400535237
User 14367 AUC after training: 0.8108831400535237
User 14367 does not improve AUC. Reverting changes.
Training on augumented user 53189 39/50 current_auc = 0.8108831400535237
User 53189 AUC after training: 0.8108831400535237
User 53189 does not improve AUC. Reverting changes.
Training on augumented user 89835 40/50 current_auc = 0.8108831400535237
User 89835 AUC after training: 0.8090990187332738
User 89835 does not improve AUC. Reverting changes.
Training on augumented user 19935 41/50 current_auc = 0.8108831400535237
User 19935 AUC after training: 0.8108831400535237
User 19935 does not improve AUC. Reverting changes.
Training on augumented user 11284 42/50 current_auc = 0.8108831400535237
User 11284 AUC after training: 0.8090990187332738
User 11284 does not improve AUC. Reverting changes.
Training on augumented user 12798 43/50 current_auc = 0.8108831400535237
User 12798 AUC after training: 0.8099910793933988
User 12798 does not improve AUC. Reverting changes.
Training on augumented user 115894 44/50 current_auc = 0.8108831400535237
User 115894 AUC after training: 0.8073148974130241
User 115894 does not improve AUC. Reverting changes.
Training on augumented user 117195 45/50 current_auc = 0.8108831400535237
User 117195 AUC after training: 0.8108831400535237
User 117195 does not improve AUC. Reverting changes.
Training on augumented user 47187 46/50 current_auc = 0.8108831400535237
User 47187 AUC after training: 0.8099910793933988
User 47187 does not improve AUC. Reverting changes.
Training on augumented user 20133 47/50 current_auc = 0.8108831400535237
User 20133 AUC after training: 0.8037466547725245
User 20133 does not improve AUC. Reverting changes.
Training on augumented user 25550 48/50 current_auc = 0.8108831400535237
User 25550 AUC after training: 0.8108831400535237
User 25550 does not improve AUC. Reverting changes.
Training on augumented user 8805 49/50 current_auc = 0.8108831400535237
User 8805 AUC after training: 0.8055307760927743
User 8805 does not improve AUC. Reverting changes.
[2024-12-02 18:22:30.065372] start test user 29063 76/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:30.804498] start test user 29063 76/568 recall augumented users by random, augumented_users = [130653, 137742, 106637, 118009, 24515, 44942, 69497, 2023, 36133, 15928, 60212, 81230, 61237, 109413, 108116, 128431, 127499, 124569, 101339, 18661, 53929, 100888, 66155, 106277, 94091, 96380, 15072, 131884, 115967, 137080, 23800, 26806, 115578, 130811, 107739, 1931, 3997, 108082, 129656, 30476, 29224, 10999, 45219, 82761, 518, 7000, 98596, 59154, 62191, 124571]
[2024-12-02 18:22:30.820330] user = 29063 Cloud 76/568
[2024-12-02 18:22:30.850340] user = 29063 Local 76/568
[2024-12-02 18:22:30.928631] user = 29063 Local+ 76/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:33.671578] user = 29063 MPDA- 76/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5555248618784531
Training on augumented user 130653 0/50 current_auc = 0.5555248618784531
User 130653 AUC after training: 0.555958958168903
User 130653 improves AUC. Keeping the model.
Training on augumented user 137742 1/50 current_auc = 0.555958958168903
User 137742 AUC after training: 0.555327545382794
User 137742 does not improve AUC. Reverting changes.
Training on augumented user 106637 2/50 current_auc = 0.555958958168903
User 106637 AUC after training: 0.5563141278610892
User 106637 improves AUC. Keeping the model.
Training on augumented user 118009 3/50 current_auc = 0.5563141278610892
User 118009 AUC after training: 0.5563141278610892
User 118009 does not improve AUC. Reverting changes.
Training on augumented user 24515 4/50 current_auc = 0.5563141278610892
User 24515 AUC after training: 0.5562352012628256
User 24515 does not improve AUC. Reverting changes.
Training on augumented user 44942 5/50 current_auc = 0.5563141278610892
User 44942 AUC after training: 0.5558011049723757
User 44942 does not improve AUC. Reverting changes.
Training on augumented user 69497 6/50 current_auc = 0.5563141278610892
User 69497 AUC after training: 0.5558602999210734
User 69497 does not improve AUC. Reverting changes.
Training on augumented user 2023 7/50 current_auc = 0.5563141278610892
User 2023 AUC after training: 0.5562746645619574
User 2023 does not improve AUC. Reverting changes.
Training on augumented user 36133 8/50 current_auc = 0.5563141278610892
User 36133 AUC after training: 0.5564719810576164
User 36133 improves AUC. Keeping the model.
Training on augumented user 15928 9/50 current_auc = 0.5564719810576164
User 15928 AUC after training: 0.5556037884767167
User 15928 does not improve AUC. Reverting changes.
Training on augumented user 60212 10/50 current_auc = 0.5564719810576164
User 60212 AUC after training: 0.5563930544593527
User 60212 does not improve AUC. Reverting changes.
Training on augumented user 81230 11/50 current_auc = 0.5564719810576164
User 81230 AUC after training: 0.5564719810576164
User 81230 does not improve AUC. Reverting changes.
Training on augumented user 61237 12/50 current_auc = 0.5564719810576164
User 61237 AUC after training: 0.5563733228097869
User 61237 does not improve AUC. Reverting changes.
Training on augumented user 109413 13/50 current_auc = 0.5564719810576164
User 109413 AUC after training: 0.5566298342541437
User 109413 improves AUC. Keeping the model.
Training on augumented user 108116 14/50 current_auc = 0.5566298342541437
User 108116 AUC after training: 0.5565903709550118
User 108116 does not improve AUC. Reverting changes.
Training on augumented user 128431 15/50 current_auc = 0.5566298342541437
User 128431 AUC after training: 0.5551894238358328
User 128431 does not improve AUC. Reverting changes.
Training on augumented user 127499 16/50 current_auc = 0.5566298342541437
User 127499 AUC after training: 0.556353591160221
User 127499 does not improve AUC. Reverting changes.
Training on augumented user 124569 17/50 current_auc = 0.5566298342541437
User 124569 AUC after training: 0.5564127861089188
User 124569 does not improve AUC. Reverting changes.
Training on augumented user 101339 18/50 current_auc = 0.5566298342541437
User 101339 AUC after training: 0.5566101026045778
User 101339 does not improve AUC. Reverting changes.
Training on augumented user 18661 19/50 current_auc = 0.5566298342541437
User 18661 AUC after training: 0.5565114443567483
User 18661 does not improve AUC. Reverting changes.
Training on augumented user 53929 20/50 current_auc = 0.5566298342541437
User 53929 AUC after training: 0.5566692975532754
User 53929 improves AUC. Keeping the model.
Training on augumented user 100888 21/50 current_auc = 0.5566692975532754
User 100888 AUC after training: 0.5572217837411207
User 100888 improves AUC. Keeping the model.
Training on augumented user 66155 22/50 current_auc = 0.5572217837411207
User 66155 AUC after training: 0.5571033938437253
User 66155 does not improve AUC. Reverting changes.
Training on augumented user 106277 23/50 current_auc = 0.5572217837411207
User 106277 AUC after training: 0.5571033938437253
User 106277 does not improve AUC. Reverting changes.
Training on augumented user 94091 24/50 current_auc = 0.5572217837411207
User 94091 AUC after training: 0.5572612470402525
User 94091 improves AUC. Keeping the model.
Training on augumented user 96380 25/50 current_auc = 0.5572612470402525
User 96380 AUC after training: 0.5569060773480663
User 96380 does not improve AUC. Reverting changes.
Training on augumented user 15072 26/50 current_auc = 0.5572612470402525
User 15072 AUC after training: 0.5570836621941595
User 15072 does not improve AUC. Reverting changes.
Training on augumented user 131884 27/50 current_auc = 0.5572612470402525
User 131884 AUC after training: 0.5574191002367799
User 131884 improves AUC. Keeping the model.
Training on augumented user 115967 28/50 current_auc = 0.5574191002367799
User 115967 AUC after training: 0.557182320441989
User 115967 does not improve AUC. Reverting changes.
Training on augumented user 137080 29/50 current_auc = 0.5574191002367799
User 137080 AUC after training: 0.5571428571428572
User 137080 does not improve AUC. Reverting changes.
Training on augumented user 23800 30/50 current_auc = 0.5574191002367799
User 23800 AUC after training: 0.5570244672454617
User 23800 does not improve AUC. Reverting changes.
Training on augumented user 26806 31/50 current_auc = 0.5574191002367799
User 26806 AUC after training: 0.556767955801105
User 26806 does not improve AUC. Reverting changes.
Training on augumented user 115578 32/50 current_auc = 0.5574191002367799
User 115578 AUC after training: 0.5569652722967641
User 115578 does not improve AUC. Reverting changes.
Training on augumented user 130811 33/50 current_auc = 0.5574191002367799
User 130811 AUC after training: 0.5570441988950277
User 130811 does not improve AUC. Reverting changes.
Training on augumented user 107739 34/50 current_auc = 0.5574191002367799
User 107739 AUC after training: 0.5570639305445936
User 107739 does not improve AUC. Reverting changes.
Training on augumented user 1931 35/50 current_auc = 0.5574191002367799
User 1931 AUC after training: 0.5545777426992897
User 1931 does not improve AUC. Reverting changes.
Training on augumented user 3997 36/50 current_auc = 0.5574191002367799
User 3997 AUC after training: 0.5565311760063142
User 3997 does not improve AUC. Reverting changes.
Training on augumented user 108082 37/50 current_auc = 0.5574191002367799
User 108082 AUC after training: 0.5563733228097869
User 108082 does not improve AUC. Reverting changes.
Training on augumented user 129656 38/50 current_auc = 0.5574191002367799
User 129656 AUC after training: 0.5571428571428572
User 129656 does not improve AUC. Reverting changes.
Training on augumented user 30476 39/50 current_auc = 0.5574191002367799
User 30476 AUC after training: 0.5571428571428572
User 30476 does not improve AUC. Reverting changes.
Training on augumented user 29224 40/50 current_auc = 0.5574191002367799
User 29224 AUC after training: 0.5569850039463299
User 29224 does not improve AUC. Reverting changes.
Training on augumented user 10999 41/50 current_auc = 0.5574191002367799
User 10999 AUC after training: 0.5573007103393843
User 10999 does not improve AUC. Reverting changes.
Training on augumented user 45219 42/50 current_auc = 0.5574191002367799
User 45219 AUC after training: 0.5569652722967641
User 45219 does not improve AUC. Reverting changes.
Training on augumented user 82761 43/50 current_auc = 0.5574191002367799
User 82761 AUC after training: 0.5573007103393844
User 82761 does not improve AUC. Reverting changes.
Training on augumented user 518 44/50 current_auc = 0.5574191002367799
User 518 AUC after training: 0.5571823204419889
User 518 does not improve AUC. Reverting changes.
Training on augumented user 7000 45/50 current_auc = 0.5574191002367799
User 7000 AUC after training: 0.5571231254932912
User 7000 does not improve AUC. Reverting changes.
Training on augumented user 98596 46/50 current_auc = 0.5574191002367799
User 98596 AUC after training: 0.5570639305445935
User 98596 does not improve AUC. Reverting changes.
Training on augumented user 59154 47/50 current_auc = 0.5574191002367799
User 59154 AUC after training: 0.5560378847671665
User 59154 does not improve AUC. Reverting changes.
Training on augumented user 62191 48/50 current_auc = 0.5574191002367799
User 62191 AUC after training: 0.5576558800315707
User 62191 improves AUC. Keeping the model.
Training on augumented user 124571 49/50 current_auc = 0.5576558800315707
User 124571 AUC after training: 0.5568271507498026
User 124571 does not improve AUC. Reverting changes.
[2024-12-02 18:23:06.466797] start test user 29078 77/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:06.920440] start test user 29078 77/568 recall augumented users by random, augumented_users = [11367, 62354, 76051, 102297, 104992, 107908, 109455, 12892, 121184, 19240, 50232, 81470, 82562, 6614, 51824, 26393, 88809, 101746, 96335, 20932, 93249, 126201, 106130, 71802, 89629, 51542, 79073, 120518, 100475, 15370, 50049, 91050, 34656, 102222, 42033, 105954, 128782, 68367, 68555, 2664, 107175, 58016, 17722, 21433, 127867, 34769, 67396, 128636, 41769, 60786]
[2024-12-02 18:23:06.935132] user = 29078 Cloud 77/568
[2024-12-02 18:23:06.945629] user = 29078 Local 77/568
[2024-12-02 18:23:06.990441] user = 29078 Local+ 77/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:10.049995] user = 29078 MPDA- 77/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5248868778280542
Training on augumented user 11367 0/50 current_auc = 0.5248868778280542
User 11367 AUC after training: 0.5248868778280542
User 11367 does not improve AUC. Reverting changes.
Training on augumented user 62354 1/50 current_auc = 0.5248868778280542
User 62354 AUC after training: 0.5226244343891402
User 62354 does not improve AUC. Reverting changes.
Training on augumented user 76051 2/50 current_auc = 0.5248868778280542
User 76051 AUC after training: 0.5248868778280542
User 76051 does not improve AUC. Reverting changes.
Training on augumented user 102297 3/50 current_auc = 0.5248868778280542
User 102297 AUC after training: 0.5248868778280542
User 102297 does not improve AUC. Reverting changes.
Training on augumented user 104992 4/50 current_auc = 0.5248868778280542
User 104992 AUC after training: 0.5226244343891402
User 104992 does not improve AUC. Reverting changes.
Training on augumented user 107908 5/50 current_auc = 0.5248868778280542
User 107908 AUC after training: 0.5203619909502262
User 107908 does not improve AUC. Reverting changes.
Training on augumented user 109455 6/50 current_auc = 0.5248868778280542
User 109455 AUC after training: 0.5248868778280542
User 109455 does not improve AUC. Reverting changes.
Training on augumented user 12892 7/50 current_auc = 0.5248868778280542
User 12892 AUC after training: 0.5271493212669682
User 12892 improves AUC. Keeping the model.
Training on augumented user 121184 8/50 current_auc = 0.5271493212669682
User 121184 AUC after training: 0.5294117647058824
User 121184 improves AUC. Keeping the model.
Training on augumented user 19240 9/50 current_auc = 0.5294117647058824
User 19240 AUC after training: 0.5294117647058824
User 19240 does not improve AUC. Reverting changes.
Training on augumented user 50232 10/50 current_auc = 0.5294117647058824
User 50232 AUC after training: 0.5316742081447964
User 50232 improves AUC. Keeping the model.
Training on augumented user 81470 11/50 current_auc = 0.5316742081447964
User 81470 AUC after training: 0.5316742081447964
User 81470 does not improve AUC. Reverting changes.
Training on augumented user 82562 12/50 current_auc = 0.5316742081447964
User 82562 AUC after training: 0.5294117647058824
User 82562 does not improve AUC. Reverting changes.
Training on augumented user 6614 13/50 current_auc = 0.5316742081447964
User 6614 AUC after training: 0.5294117647058825
User 6614 does not improve AUC. Reverting changes.
Training on augumented user 51824 14/50 current_auc = 0.5316742081447964
User 51824 AUC after training: 0.5316742081447964
User 51824 does not improve AUC. Reverting changes.
Training on augumented user 26393 15/50 current_auc = 0.5316742081447964
User 26393 AUC after training: 0.5316742081447964
User 26393 does not improve AUC. Reverting changes.
Training on augumented user 88809 16/50 current_auc = 0.5316742081447964
User 88809 AUC after training: 0.5226244343891402
User 88809 does not improve AUC. Reverting changes.
Training on augumented user 101746 17/50 current_auc = 0.5316742081447964
User 101746 AUC after training: 0.5316742081447964
User 101746 does not improve AUC. Reverting changes.
Training on augumented user 96335 18/50 current_auc = 0.5316742081447964
User 96335 AUC after training: 0.5294117647058824
User 96335 does not improve AUC. Reverting changes.
Training on augumented user 20932 19/50 current_auc = 0.5316742081447964
User 20932 AUC after training: 0.5271493212669683
User 20932 does not improve AUC. Reverting changes.
Training on augumented user 93249 20/50 current_auc = 0.5316742081447964
User 93249 AUC after training: 0.5294117647058825
User 93249 does not improve AUC. Reverting changes.
Training on augumented user 126201 21/50 current_auc = 0.5316742081447964
User 126201 AUC after training: 0.5339366515837105
User 126201 improves AUC. Keeping the model.
Training on augumented user 106130 22/50 current_auc = 0.5339366515837105
User 106130 AUC after training: 0.5316742081447965
User 106130 does not improve AUC. Reverting changes.
Training on augumented user 71802 23/50 current_auc = 0.5339366515837105
User 71802 AUC after training: 0.5339366515837105
User 71802 does not improve AUC. Reverting changes.
Training on augumented user 89629 24/50 current_auc = 0.5339366515837105
User 89629 AUC after training: 0.5339366515837105
User 89629 does not improve AUC. Reverting changes.
Training on augumented user 51542 25/50 current_auc = 0.5339366515837105
User 51542 AUC after training: 0.5271493212669683
User 51542 does not improve AUC. Reverting changes.
Training on augumented user 79073 26/50 current_auc = 0.5339366515837105
User 79073 AUC after training: 0.5339366515837105
User 79073 does not improve AUC. Reverting changes.
Training on augumented user 120518 27/50 current_auc = 0.5339366515837105
User 120518 AUC after training: 0.5271493212669682
User 120518 does not improve AUC. Reverting changes.
Training on augumented user 100475 28/50 current_auc = 0.5339366515837105
User 100475 AUC after training: 0.5316742081447964
User 100475 does not improve AUC. Reverting changes.
Training on augumented user 15370 29/50 current_auc = 0.5339366515837105
User 15370 AUC after training: 0.5339366515837105
User 15370 does not improve AUC. Reverting changes.
Training on augumented user 50049 30/50 current_auc = 0.5339366515837105
User 50049 AUC after training: 0.5294117647058824
User 50049 does not improve AUC. Reverting changes.
Training on augumented user 91050 31/50 current_auc = 0.5339366515837105
User 91050 AUC after training: 0.5316742081447965
User 91050 does not improve AUC. Reverting changes.
Training on augumented user 34656 32/50 current_auc = 0.5339366515837105
User 34656 AUC after training: 0.5248868778280543
User 34656 does not improve AUC. Reverting changes.
Training on augumented user 102222 33/50 current_auc = 0.5339366515837105
User 102222 AUC after training: 0.5316742081447964
User 102222 does not improve AUC. Reverting changes.
Training on augumented user 42033 34/50 current_auc = 0.5339366515837105
User 42033 AUC after training: 0.5226244343891402
User 42033 does not improve AUC. Reverting changes.
Training on augumented user 105954 35/50 current_auc = 0.5339366515837105
User 105954 AUC after training: 0.5294117647058824
User 105954 does not improve AUC. Reverting changes.
Training on augumented user 128782 36/50 current_auc = 0.5339366515837105
User 128782 AUC after training: 0.5248868778280543
User 128782 does not improve AUC. Reverting changes.
Training on augumented user 68367 37/50 current_auc = 0.5339366515837105
User 68367 AUC after training: 0.5294117647058824
User 68367 does not improve AUC. Reverting changes.
Training on augumented user 68555 38/50 current_auc = 0.5339366515837105
User 68555 AUC after training: 0.5316742081447964
User 68555 does not improve AUC. Reverting changes.
Training on augumented user 2664 39/50 current_auc = 0.5339366515837105
User 2664 AUC after training: 0.5316742081447964
User 2664 does not improve AUC. Reverting changes.
Training on augumented user 107175 40/50 current_auc = 0.5339366515837105
User 107175 AUC after training: 0.5339366515837104
User 107175 does not improve AUC. Reverting changes.
Training on augumented user 58016 41/50 current_auc = 0.5339366515837105
User 58016 AUC after training: 0.5339366515837105
User 58016 does not improve AUC. Reverting changes.
Training on augumented user 17722 42/50 current_auc = 0.5339366515837105
User 17722 AUC after training: 0.5316742081447965
User 17722 does not improve AUC. Reverting changes.
Training on augumented user 21433 43/50 current_auc = 0.5339366515837105
User 21433 AUC after training: 0.5294117647058824
User 21433 does not improve AUC. Reverting changes.
Training on augumented user 127867 44/50 current_auc = 0.5339366515837105
User 127867 AUC after training: 0.5316742081447964
User 127867 does not improve AUC. Reverting changes.
Training on augumented user 34769 45/50 current_auc = 0.5339366515837105
User 34769 AUC after training: 0.5316742081447964
User 34769 does not improve AUC. Reverting changes.
Training on augumented user 67396 46/50 current_auc = 0.5339366515837105
User 67396 AUC after training: 0.5316742081447965
User 67396 does not improve AUC. Reverting changes.
Training on augumented user 128636 47/50 current_auc = 0.5339366515837105
User 128636 AUC after training: 0.5294117647058824
User 128636 does not improve AUC. Reverting changes.
Training on augumented user 41769 48/50 current_auc = 0.5339366515837105
User 41769 AUC after training: 0.5339366515837105
User 41769 does not improve AUC. Reverting changes.
Training on augumented user 60786 49/50 current_auc = 0.5339366515837105
User 60786 AUC after training: 0.5339366515837105
User 60786 does not improve AUC. Reverting changes.
[2024-12-02 18:23:44.126235] start test user 29098 78/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:44.562712] start test user 29098 78/568 recall augumented users by random, augumented_users = [114145, 112479, 117944, 52054, 50848, 49897, 69563, 111967, 80017, 122080, 118366, 102279, 48896, 50587, 35923, 123686, 79096, 132556, 5690, 114239, 103271, 113343, 98370, 128867, 4125, 32415, 96025, 73676, 61443, 104175, 38355, 131170, 10273, 15174, 74568, 69291, 2870, 13135, 22393, 94597, 17492, 88151, 47972, 110748, 73394, 100438, 29931, 101152, 116988, 120981]
[2024-12-02 18:23:44.578064] user = 29098 Cloud 78/568
[2024-12-02 18:23:44.596865] user = 29098 Local 78/568
[2024-12-02 18:23:44.631021] user = 29098 Local+ 78/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:46.947336] user = 29098 MPDA- 78/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.592156862745098
Training on augumented user 114145 0/50 current_auc = 0.592156862745098
User 114145 AUC after training: 0.592156862745098
User 114145 does not improve AUC. Reverting changes.
Training on augumented user 112479 1/50 current_auc = 0.592156862745098
User 112479 AUC after training: 0.592156862745098
User 112479 does not improve AUC. Reverting changes.
Training on augumented user 117944 2/50 current_auc = 0.592156862745098
User 117944 AUC after training: 0.5823529411764705
User 117944 does not improve AUC. Reverting changes.
Training on augumented user 52054 3/50 current_auc = 0.592156862745098
User 52054 AUC after training: 0.592156862745098
User 52054 does not improve AUC. Reverting changes.
Training on augumented user 50848 4/50 current_auc = 0.592156862745098
User 50848 AUC after training: 0.592156862745098
User 50848 does not improve AUC. Reverting changes.
Training on augumented user 49897 5/50 current_auc = 0.592156862745098
User 49897 AUC after training: 0.5833333333333333
User 49897 does not improve AUC. Reverting changes.
Training on augumented user 69563 6/50 current_auc = 0.592156862745098
User 69563 AUC after training: 0.5915032679738562
User 69563 does not improve AUC. Reverting changes.
Training on augumented user 111967 7/50 current_auc = 0.592156862745098
User 111967 AUC after training: 0.5823529411764705
User 111967 does not improve AUC. Reverting changes.
Training on augumented user 80017 8/50 current_auc = 0.592156862745098
User 80017 AUC after training: 0.5830065359477123
User 80017 does not improve AUC. Reverting changes.
Training on augumented user 122080 9/50 current_auc = 0.592156862745098
User 122080 AUC after training: 0.592156862745098
User 122080 does not improve AUC. Reverting changes.
Training on augumented user 118366 10/50 current_auc = 0.592156862745098
User 118366 AUC after training: 0.5810457516339869
User 118366 does not improve AUC. Reverting changes.
Training on augumented user 102279 11/50 current_auc = 0.592156862745098
User 102279 AUC after training: 0.580392156862745
User 102279 does not improve AUC. Reverting changes.
Training on augumented user 48896 12/50 current_auc = 0.592156862745098
User 48896 AUC after training: 0.592156862745098
User 48896 does not improve AUC. Reverting changes.
Training on augumented user 50587 13/50 current_auc = 0.592156862745098
User 50587 AUC after training: 0.592156862745098
User 50587 does not improve AUC. Reverting changes.
Training on augumented user 35923 14/50 current_auc = 0.592156862745098
User 35923 AUC after training: 0.5928104575163399
User 35923 improves AUC. Keeping the model.
Training on augumented user 123686 15/50 current_auc = 0.5928104575163399
User 123686 AUC after training: 0.580392156862745
User 123686 does not improve AUC. Reverting changes.
Training on augumented user 79096 16/50 current_auc = 0.5928104575163399
User 79096 AUC after training: 0.5852941176470587
User 79096 does not improve AUC. Reverting changes.
Training on augumented user 132556 17/50 current_auc = 0.5928104575163399
User 132556 AUC after training: 0.592156862745098
User 132556 does not improve AUC. Reverting changes.
Training on augumented user 5690 18/50 current_auc = 0.5928104575163399
User 5690 AUC after training: 0.5928104575163399
User 5690 does not improve AUC. Reverting changes.
Training on augumented user 114239 19/50 current_auc = 0.5928104575163399
User 114239 AUC after training: 0.5810457516339869
User 114239 does not improve AUC. Reverting changes.
Training on augumented user 103271 20/50 current_auc = 0.5928104575163399
User 103271 AUC after training: 0.5928104575163399
User 103271 does not improve AUC. Reverting changes.
Training on augumented user 113343 21/50 current_auc = 0.5928104575163399
User 113343 AUC after training: 0.5915032679738562
User 113343 does not improve AUC. Reverting changes.
Training on augumented user 98370 22/50 current_auc = 0.5928104575163399
User 98370 AUC after training: 0.5928104575163399
User 98370 does not improve AUC. Reverting changes.
Training on augumented user 128867 23/50 current_auc = 0.5928104575163399
User 128867 AUC after training: 0.5915032679738562
User 128867 does not improve AUC. Reverting changes.
Training on augumented user 4125 24/50 current_auc = 0.5928104575163399
User 4125 AUC after training: 0.5830065359477123
User 4125 does not improve AUC. Reverting changes.
Training on augumented user 32415 25/50 current_auc = 0.5928104575163399
User 32415 AUC after training: 0.5915032679738562
User 32415 does not improve AUC. Reverting changes.
Training on augumented user 96025 26/50 current_auc = 0.5928104575163399
User 96025 AUC after training: 0.5915032679738562
User 96025 does not improve AUC. Reverting changes.
Training on augumented user 73676 27/50 current_auc = 0.5928104575163399
User 73676 AUC after training: 0.5830065359477123
User 73676 does not improve AUC. Reverting changes.
Training on augumented user 61443 28/50 current_auc = 0.5928104575163399
User 61443 AUC after training: 0.5928104575163399
User 61443 does not improve AUC. Reverting changes.
Training on augumented user 104175 29/50 current_auc = 0.5928104575163399
User 104175 AUC after training: 0.5836601307189542
User 104175 does not improve AUC. Reverting changes.
Training on augumented user 38355 30/50 current_auc = 0.5928104575163399
User 38355 AUC after training: 0.5839869281045751
User 38355 does not improve AUC. Reverting changes.
Training on augumented user 131170 31/50 current_auc = 0.5928104575163399
User 131170 AUC after training: 0.580392156862745
User 131170 does not improve AUC. Reverting changes.
Training on augumented user 10273 32/50 current_auc = 0.5928104575163399
User 10273 AUC after training: 0.592156862745098
User 10273 does not improve AUC. Reverting changes.
Training on augumented user 15174 33/50 current_auc = 0.5928104575163399
User 15174 AUC after training: 0.5813725490196078
User 15174 does not improve AUC. Reverting changes.
Training on augumented user 74568 34/50 current_auc = 0.5928104575163399
User 74568 AUC after training: 0.592156862745098
User 74568 does not improve AUC. Reverting changes.
Training on augumented user 69291 35/50 current_auc = 0.5928104575163399
User 69291 AUC after training: 0.5908496732026144
User 69291 does not improve AUC. Reverting changes.
Training on augumented user 2870 36/50 current_auc = 0.5928104575163399
User 2870 AUC after training: 0.5928104575163399
User 2870 does not improve AUC. Reverting changes.
Training on augumented user 13135 37/50 current_auc = 0.5928104575163399
User 13135 AUC after training: 0.5826797385620914
User 13135 does not improve AUC. Reverting changes.
Training on augumented user 22393 38/50 current_auc = 0.5928104575163399
User 22393 AUC after training: 0.592156862745098
User 22393 does not improve AUC. Reverting changes.
Training on augumented user 94597 39/50 current_auc = 0.5928104575163399
User 94597 AUC after training: 0.5915032679738562
User 94597 does not improve AUC. Reverting changes.
Training on augumented user 17492 40/50 current_auc = 0.5928104575163399
User 17492 AUC after training: 0.5836601307189542
User 17492 does not improve AUC. Reverting changes.
Training on augumented user 88151 41/50 current_auc = 0.5928104575163399
User 88151 AUC after training: 0.5928104575163399
User 88151 does not improve AUC. Reverting changes.
Training on augumented user 47972 42/50 current_auc = 0.5928104575163399
User 47972 AUC after training: 0.5928104575163399
User 47972 does not improve AUC. Reverting changes.
Training on augumented user 110748 43/50 current_auc = 0.5928104575163399
User 110748 AUC after training: 0.5928104575163399
User 110748 does not improve AUC. Reverting changes.
Training on augumented user 73394 44/50 current_auc = 0.5928104575163399
User 73394 AUC after training: 0.5928104575163399
User 73394 does not improve AUC. Reverting changes.
Training on augumented user 100438 45/50 current_auc = 0.5928104575163399
User 100438 AUC after training: 0.5915032679738562
User 100438 does not improve AUC. Reverting changes.
Training on augumented user 29931 46/50 current_auc = 0.5928104575163399
User 29931 AUC after training: 0.580718954248366
User 29931 does not improve AUC. Reverting changes.
Training on augumented user 101152 47/50 current_auc = 0.5928104575163399
User 101152 AUC after training: 0.592156862745098
User 101152 does not improve AUC. Reverting changes.
Training on augumented user 116988 48/50 current_auc = 0.5928104575163399
User 116988 AUC after training: 0.5915032679738562
User 116988 does not improve AUC. Reverting changes.
Training on augumented user 120981 49/50 current_auc = 0.5928104575163399
User 120981 AUC after training: 0.5820261437908496
User 120981 does not improve AUC. Reverting changes.
[2024-12-02 18:24:16.217825] start test user 29115 79/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:16.648055] start test user 29115 79/568 recall augumented users by random, augumented_users = [6725, 66399, 89775, 35095, 29339, 66097, 102440, 64242, 3021, 95141, 89573, 91567, 34981, 29410, 125176, 107278, 26188, 63341, 90725, 58329, 564, 35390, 64061, 27328, 134378, 26752, 78695, 114870, 100127, 126677, 81095, 30154, 128064, 113676, 23159, 39098, 58716, 14239, 87734, 13156, 129046, 15804, 134928, 68564, 51183, 60732, 66333, 96740, 9107, 98056]
[2024-12-02 18:24:16.663168] user = 29115 Cloud 79/568
[2024-12-02 18:24:16.685277] user = 29115 Local 79/568
[2024-12-02 18:24:16.747960] user = 29115 Local+ 79/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:18.759357] user = 29115 MPDA- 79/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5445920303605314
Training on augumented user 6725 0/50 current_auc = 0.5445920303605314
User 6725 AUC after training: 0.5458570524984188
User 6725 improves AUC. Keeping the model.
Training on augumented user 66399 1/50 current_auc = 0.5458570524984188
User 66399 AUC after training: 0.5456462154754375
User 66399 does not improve AUC. Reverting changes.
Training on augumented user 89775 2/50 current_auc = 0.5458570524984188
User 89775 AUC after training: 0.545224541429475
User 89775 does not improve AUC. Reverting changes.
Training on augumented user 35095 3/50 current_auc = 0.5458570524984188
User 35095 AUC after training: 0.5458570524984188
User 35095 does not improve AUC. Reverting changes.
Training on augumented user 29339 4/50 current_auc = 0.5458570524984188
User 29339 AUC after training: 0.5454353784524563
User 29339 does not improve AUC. Reverting changes.
Training on augumented user 66097 5/50 current_auc = 0.5458570524984188
User 66097 AUC after training: 0.5452245414294751
User 66097 does not improve AUC. Reverting changes.
Training on augumented user 102440 6/50 current_auc = 0.5458570524984188
User 102440 AUC after training: 0.5437486822686064
User 102440 does not improve AUC. Reverting changes.
Training on augumented user 64242 7/50 current_auc = 0.5458570524984188
User 64242 AUC after training: 0.5459624710099094
User 64242 improves AUC. Keeping the model.
Training on augumented user 3021 8/50 current_auc = 0.5459624710099094
User 3021 AUC after training: 0.5460678895214
User 3021 improves AUC. Keeping the model.
Training on augumented user 95141 9/50 current_auc = 0.5460678895214
User 95141 AUC after training: 0.5458570524984186
User 95141 does not improve AUC. Reverting changes.
Training on augumented user 89573 10/50 current_auc = 0.5460678895214
User 89573 AUC after training: 0.5456462154754375
User 89573 does not improve AUC. Reverting changes.
Training on augumented user 91567 11/50 current_auc = 0.5460678895214
User 91567 AUC after training: 0.5454353784524563
User 91567 does not improve AUC. Reverting changes.
Training on augumented user 34981 12/50 current_auc = 0.5460678895214
User 34981 AUC after training: 0.5460678895214
User 34981 does not improve AUC. Reverting changes.
Training on augumented user 29410 13/50 current_auc = 0.5460678895214
User 29410 AUC after training: 0.5456462154754375
User 29410 does not improve AUC. Reverting changes.
Training on augumented user 125176 14/50 current_auc = 0.5460678895214
User 125176 AUC after training: 0.5460678895214
User 125176 does not improve AUC. Reverting changes.
Training on augumented user 107278 15/50 current_auc = 0.5460678895214
User 107278 AUC after training: 0.5456462154754375
User 107278 does not improve AUC. Reverting changes.
Training on augumented user 26188 16/50 current_auc = 0.5460678895214
User 26188 AUC after training: 0.5460678895214
User 26188 does not improve AUC. Reverting changes.
Training on augumented user 63341 17/50 current_auc = 0.5460678895214
User 63341 AUC after training: 0.5456462154754375
User 63341 does not improve AUC. Reverting changes.
Training on augumented user 90725 18/50 current_auc = 0.5460678895214
User 90725 AUC after training: 0.5462787265443811
User 90725 improves AUC. Keeping the model.
Training on augumented user 58329 19/50 current_auc = 0.5462787265443811
User 58329 AUC after training: 0.5476491671937592
User 58329 improves AUC. Keeping the model.
Training on augumented user 564 20/50 current_auc = 0.5476491671937592
User 564 AUC after training: 0.5473329116592874
User 564 does not improve AUC. Reverting changes.
Training on augumented user 35390 21/50 current_auc = 0.5476491671937592
User 35390 AUC after training: 0.5477545857052498
User 35390 improves AUC. Keeping the model.
Training on augumented user 64061 22/50 current_auc = 0.5477545857052498
User 64061 AUC after training: 0.5469112376133248
User 64061 does not improve AUC. Reverting changes.
Training on augumented user 27328 23/50 current_auc = 0.5477545857052498
User 27328 AUC after training: 0.547965422728231
User 27328 improves AUC. Keeping the model.
Training on augumented user 134378 24/50 current_auc = 0.547965422728231
User 134378 AUC after training: 0.5476491671937592
User 134378 does not improve AUC. Reverting changes.
Training on augumented user 26752 25/50 current_auc = 0.547965422728231
User 26752 AUC after training: 0.5473329116592873
User 26752 does not improve AUC. Reverting changes.
Training on augumented user 78695 26/50 current_auc = 0.547965422728231
User 78695 AUC after training: 0.547965422728231
User 78695 does not improve AUC. Reverting changes.
Training on augumented user 114870 27/50 current_auc = 0.547965422728231
User 114870 AUC after training: 0.5477545857052498
User 114870 does not improve AUC. Reverting changes.
Training on augumented user 100127 28/50 current_auc = 0.547965422728231
User 100127 AUC after training: 0.5477545857052498
User 100127 does not improve AUC. Reverting changes.
Training on augumented user 126677 29/50 current_auc = 0.547965422728231
User 126677 AUC after training: 0.547438330170778
User 126677 does not improve AUC. Reverting changes.
Training on augumented user 81095 30/50 current_auc = 0.547965422728231
User 81095 AUC after training: 0.5474383301707779
User 81095 does not improve AUC. Reverting changes.
Training on augumented user 30154 31/50 current_auc = 0.547965422728231
User 30154 AUC after training: 0.5476491671937592
User 30154 does not improve AUC. Reverting changes.
Training on augumented user 128064 32/50 current_auc = 0.547965422728231
User 128064 AUC after training: 0.5480708412397217
User 128064 improves AUC. Keeping the model.
Training on augumented user 113676 33/50 current_auc = 0.5480708412397217
User 113676 AUC after training: 0.5479654227282311
User 113676 does not improve AUC. Reverting changes.
Training on augumented user 23159 34/50 current_auc = 0.5480708412397217
User 23159 AUC after training: 0.5478600042167404
User 23159 does not improve AUC. Reverting changes.
Training on augumented user 39098 35/50 current_auc = 0.5480708412397217
User 39098 AUC after training: 0.5475437486822686
User 39098 does not improve AUC. Reverting changes.
Training on augumented user 58716 36/50 current_auc = 0.5480708412397217
User 58716 AUC after training: 0.5473329116592873
User 58716 does not improve AUC. Reverting changes.
Training on augumented user 14239 37/50 current_auc = 0.5480708412397217
User 14239 AUC after training: 0.5482816782627029
User 14239 improves AUC. Keeping the model.
Training on augumented user 87734 38/50 current_auc = 0.5482816782627029
User 87734 AUC after training: 0.5481762597512123
User 87734 does not improve AUC. Reverting changes.
Training on augumented user 13156 39/50 current_auc = 0.5482816782627029
User 13156 AUC after training: 0.5487033523086654
User 13156 improves AUC. Keeping the model.
Training on augumented user 129046 40/50 current_auc = 0.5487033523086654
User 129046 AUC after training: 0.5484925152856841
User 129046 does not improve AUC. Reverting changes.
Training on augumented user 15804 41/50 current_auc = 0.5487033523086654
User 15804 AUC after training: 0.5484925152856842
User 15804 does not improve AUC. Reverting changes.
Training on augumented user 134928 42/50 current_auc = 0.5487033523086654
User 134928 AUC after training: 0.5487033523086654
User 134928 does not improve AUC. Reverting changes.
Training on augumented user 68564 43/50 current_auc = 0.5487033523086654
User 68564 AUC after training: 0.5476491671937592
User 68564 does not improve AUC. Reverting changes.
Training on augumented user 51183 44/50 current_auc = 0.5487033523086654
User 51183 AUC after training: 0.548808770820156
User 51183 improves AUC. Keeping the model.
Training on augumented user 60732 45/50 current_auc = 0.548808770820156
User 60732 AUC after training: 0.5482816782627029
User 60732 does not improve AUC. Reverting changes.
Training on augumented user 66333 46/50 current_auc = 0.548808770820156
User 66333 AUC after training: 0.548808770820156
User 66333 does not improve AUC. Reverting changes.
Training on augumented user 96740 47/50 current_auc = 0.548808770820156
User 96740 AUC after training: 0.5484925152856841
User 96740 does not improve AUC. Reverting changes.
Training on augumented user 9107 48/50 current_auc = 0.548808770820156
User 9107 AUC after training: 0.5473329116592873
User 9107 does not improve AUC. Reverting changes.
Training on augumented user 98056 49/50 current_auc = 0.548808770820156
User 98056 AUC after training: 0.5481762597512123
User 98056 does not improve AUC. Reverting changes.
[2024-12-02 18:24:48.690536] start test user 29149 80/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:49.386530] start test user 29149 80/568 recall augumented users by random, augumented_users = [46453, 114103, 86322, 137196, 101126, 115261, 116994, 33452, 16768, 91494, 81294, 130192, 66970, 39065, 117673, 15582, 27851, 80554, 50700, 51789, 110550, 137394, 134340, 130347, 75048, 39956, 108057, 50404, 92823, 27749, 27241, 53524, 95614, 131396, 79746, 102414, 88121, 36857, 45758, 27201, 10742, 133476, 98114, 14308, 132765, 16996, 134783, 91159, 49978, 105176]
[2024-12-02 18:24:49.441334] user = 29149 Cloud 80/568
[2024-12-02 18:24:49.510678] user = 29149 Local 80/568
[2024-12-02 18:24:49.668081] user = 29149 Local+ 80/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:52.818554] user = 29149 MPDA- 80/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6853146853146852
Training on augumented user 46453 0/50 current_auc = 0.6853146853146852
User 46453 AUC after training: 0.6853146853146852
User 46453 does not improve AUC. Reverting changes.
Training on augumented user 114103 1/50 current_auc = 0.6853146853146852
User 114103 AUC after training: 0.6853146853146852
User 114103 does not improve AUC. Reverting changes.
Training on augumented user 86322 2/50 current_auc = 0.6853146853146852
User 86322 AUC after training: 0.6853146853146852
User 86322 does not improve AUC. Reverting changes.
Training on augumented user 137196 3/50 current_auc = 0.6853146853146852
User 137196 AUC after training: 0.6853146853146852
User 137196 does not improve AUC. Reverting changes.
Training on augumented user 101126 4/50 current_auc = 0.6853146853146852
User 101126 AUC after training: 0.6853146853146852
User 101126 does not improve AUC. Reverting changes.
Training on augumented user 115261 5/50 current_auc = 0.6853146853146852
User 115261 AUC after training: 0.6853146853146852
User 115261 does not improve AUC. Reverting changes.
Training on augumented user 116994 6/50 current_auc = 0.6853146853146852
User 116994 AUC after training: 0.6783216783216783
User 116994 does not improve AUC. Reverting changes.
Training on augumented user 33452 7/50 current_auc = 0.6853146853146852
User 33452 AUC after training: 0.6853146853146852
User 33452 does not improve AUC. Reverting changes.
Training on augumented user 16768 8/50 current_auc = 0.6853146853146852
User 16768 AUC after training: 0.6853146853146852
User 16768 does not improve AUC. Reverting changes.
Training on augumented user 91494 9/50 current_auc = 0.6853146853146852
User 91494 AUC after training: 0.6853146853146852
User 91494 does not improve AUC. Reverting changes.
Training on augumented user 81294 10/50 current_auc = 0.6853146853146852
User 81294 AUC after training: 0.6783216783216783
User 81294 does not improve AUC. Reverting changes.
Training on augumented user 130192 11/50 current_auc = 0.6853146853146852
User 130192 AUC after training: 0.6993006993006994
User 130192 improves AUC. Keeping the model.
Training on augumented user 66970 12/50 current_auc = 0.6993006993006994
User 66970 AUC after training: 0.6923076923076923
User 66970 does not improve AUC. Reverting changes.
Training on augumented user 39065 13/50 current_auc = 0.6993006993006994
User 39065 AUC after training: 0.6993006993006994
User 39065 does not improve AUC. Reverting changes.
Training on augumented user 117673 14/50 current_auc = 0.6993006993006994
User 117673 AUC after training: 0.6993006993006994
User 117673 does not improve AUC. Reverting changes.
Training on augumented user 15582 15/50 current_auc = 0.6993006993006994
User 15582 AUC after training: 0.6993006993006994
User 15582 does not improve AUC. Reverting changes.
Training on augumented user 27851 16/50 current_auc = 0.6993006993006994
User 27851 AUC after training: 0.6993006993006994
User 27851 does not improve AUC. Reverting changes.
Training on augumented user 80554 17/50 current_auc = 0.6993006993006994
User 80554 AUC after training: 0.6993006993006994
User 80554 does not improve AUC. Reverting changes.
Training on augumented user 50700 18/50 current_auc = 0.6993006993006994
User 50700 AUC after training: 0.6993006993006994
User 50700 does not improve AUC. Reverting changes.
Training on augumented user 51789 19/50 current_auc = 0.6993006993006994
User 51789 AUC after training: 0.7062937062937062
User 51789 improves AUC. Keeping the model.
Training on augumented user 110550 20/50 current_auc = 0.7062937062937062
User 110550 AUC after training: 0.7062937062937062
User 110550 does not improve AUC. Reverting changes.
Training on augumented user 137394 21/50 current_auc = 0.7062937062937062
User 137394 AUC after training: 0.7062937062937062
User 137394 does not improve AUC. Reverting changes.
Training on augumented user 134340 22/50 current_auc = 0.7062937062937062
User 134340 AUC after training: 0.7062937062937062
User 134340 does not improve AUC. Reverting changes.
Training on augumented user 130347 23/50 current_auc = 0.7062937062937062
User 130347 AUC after training: 0.7062937062937062
User 130347 does not improve AUC. Reverting changes.
Training on augumented user 75048 24/50 current_auc = 0.7062937062937062
User 75048 AUC after training: 0.7062937062937062
User 75048 does not improve AUC. Reverting changes.
Training on augumented user 39956 25/50 current_auc = 0.7062937062937062
User 39956 AUC after training: 0.7062937062937062
User 39956 does not improve AUC. Reverting changes.
Training on augumented user 108057 26/50 current_auc = 0.7062937062937062
User 108057 AUC after training: 0.7062937062937062
User 108057 does not improve AUC. Reverting changes.
Training on augumented user 50404 27/50 current_auc = 0.7062937062937062
User 50404 AUC after training: 0.7062937062937062
User 50404 does not improve AUC. Reverting changes.
Training on augumented user 92823 28/50 current_auc = 0.7062937062937062
User 92823 AUC after training: 0.7062937062937062
User 92823 does not improve AUC. Reverting changes.
Training on augumented user 27749 29/50 current_auc = 0.7062937062937062
User 27749 AUC after training: 0.7062937062937062
User 27749 does not improve AUC. Reverting changes.
Training on augumented user 27241 30/50 current_auc = 0.7062937062937062
User 27241 AUC after training: 0.7062937062937062
User 27241 does not improve AUC. Reverting changes.
Training on augumented user 53524 31/50 current_auc = 0.7062937062937062
User 53524 AUC after training: 0.7062937062937062
User 53524 does not improve AUC. Reverting changes.
Training on augumented user 95614 32/50 current_auc = 0.7062937062937062
User 95614 AUC after training: 0.7062937062937062
User 95614 does not improve AUC. Reverting changes.
Training on augumented user 131396 33/50 current_auc = 0.7062937062937062
User 131396 AUC after training: 0.7062937062937062
User 131396 does not improve AUC. Reverting changes.
Training on augumented user 79746 34/50 current_auc = 0.7062937062937062
User 79746 AUC after training: 0.7062937062937062
User 79746 does not improve AUC. Reverting changes.
Training on augumented user 102414 35/50 current_auc = 0.7062937062937062
User 102414 AUC after training: 0.7062937062937062
User 102414 does not improve AUC. Reverting changes.
Training on augumented user 88121 36/50 current_auc = 0.7062937062937062
User 88121 AUC after training: 0.7062937062937062
User 88121 does not improve AUC. Reverting changes.
Training on augumented user 36857 37/50 current_auc = 0.7062937062937062
User 36857 AUC after training: 0.7062937062937062
User 36857 does not improve AUC. Reverting changes.
Training on augumented user 45758 38/50 current_auc = 0.7062937062937062
User 45758 AUC after training: 0.7062937062937062
User 45758 does not improve AUC. Reverting changes.
Training on augumented user 27201 39/50 current_auc = 0.7062937062937062
User 27201 AUC after training: 0.7062937062937062
User 27201 does not improve AUC. Reverting changes.
Training on augumented user 10742 40/50 current_auc = 0.7062937062937062
User 10742 AUC after training: 0.7062937062937062
User 10742 does not improve AUC. Reverting changes.
Training on augumented user 133476 41/50 current_auc = 0.7062937062937062
User 133476 AUC after training: 0.6993006993006994
User 133476 does not improve AUC. Reverting changes.
Training on augumented user 98114 42/50 current_auc = 0.7062937062937062
User 98114 AUC after training: 0.7062937062937062
User 98114 does not improve AUC. Reverting changes.
Training on augumented user 14308 43/50 current_auc = 0.7062937062937062
User 14308 AUC after training: 0.7062937062937062
User 14308 does not improve AUC. Reverting changes.
Training on augumented user 132765 44/50 current_auc = 0.7062937062937062
User 132765 AUC after training: 0.7062937062937062
User 132765 does not improve AUC. Reverting changes.
Training on augumented user 16996 45/50 current_auc = 0.7062937062937062
User 16996 AUC after training: 0.7062937062937062
User 16996 does not improve AUC. Reverting changes.
Training on augumented user 134783 46/50 current_auc = 0.7062937062937062
User 134783 AUC after training: 0.7062937062937062
User 134783 does not improve AUC. Reverting changes.
Training on augumented user 91159 47/50 current_auc = 0.7062937062937062
User 91159 AUC after training: 0.7062937062937062
User 91159 does not improve AUC. Reverting changes.
Training on augumented user 49978 48/50 current_auc = 0.7062937062937062
User 49978 AUC after training: 0.7062937062937062
User 49978 does not improve AUC. Reverting changes.
Training on augumented user 105176 49/50 current_auc = 0.7062937062937062
User 105176 AUC after training: 0.7062937062937062
User 105176 does not improve AUC. Reverting changes.
[2024-12-02 18:25:25.051304] start test user 29223 81/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:25.891961] start test user 29223 81/568 recall augumented users by random, augumented_users = [44093, 121049, 130229, 49381, 84390, 68082, 112988, 128021, 3960, 126148, 73147, 85073, 95957, 49212, 40942, 12074, 32920, 116853, 66612, 65213, 79877, 52030, 97785, 55348, 107194, 90012, 11364, 34916, 69514, 83411, 68360, 62266, 24880, 21220, 53838, 133380, 55379, 85508, 114849, 127829, 104525, 34992, 31614, 70014, 72395, 99221, 78054, 68366, 81463, 37996]
[2024-12-02 18:25:25.908726] user = 29223 Cloud 81/568
[2024-12-02 18:25:25.933687] user = 29223 Local 81/568
[2024-12-02 18:25:25.968232] user = 29223 Local+ 81/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:29.514346] user = 29223 MPDA- 81/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7423076923076923
Training on augumented user 44093 0/50 current_auc = 0.7423076923076923
User 44093 AUC after training: 0.7423076923076923
User 44093 does not improve AUC. Reverting changes.
Training on augumented user 121049 1/50 current_auc = 0.7423076923076923
User 121049 AUC after training: 0.7442307692307693
User 121049 improves AUC. Keeping the model.
Training on augumented user 130229 2/50 current_auc = 0.7442307692307693
User 130229 AUC after training: 0.7448717948717949
User 130229 improves AUC. Keeping the model.
Training on augumented user 49381 3/50 current_auc = 0.7448717948717949
User 49381 AUC after training: 0.7442307692307693
User 49381 does not improve AUC. Reverting changes.
Training on augumented user 84390 4/50 current_auc = 0.7448717948717949
User 84390 AUC after training: 0.7455128205128205
User 84390 improves AUC. Keeping the model.
Training on augumented user 68082 5/50 current_auc = 0.7455128205128205
User 68082 AUC after training: 0.7461538461538462
User 68082 improves AUC. Keeping the model.
Training on augumented user 112988 6/50 current_auc = 0.7461538461538462
User 112988 AUC after training: 0.7435897435897436
User 112988 does not improve AUC. Reverting changes.
Training on augumented user 128021 7/50 current_auc = 0.7461538461538462
User 128021 AUC after training: 0.7467948717948718
User 128021 improves AUC. Keeping the model.
Training on augumented user 3960 8/50 current_auc = 0.7467948717948718
User 3960 AUC after training: 0.7487179487179487
User 3960 improves AUC. Keeping the model.
Training on augumented user 126148 9/50 current_auc = 0.7487179487179487
User 126148 AUC after training: 0.7461538461538462
User 126148 does not improve AUC. Reverting changes.
Training on augumented user 73147 10/50 current_auc = 0.7487179487179487
User 73147 AUC after training: 0.7487179487179487
User 73147 does not improve AUC. Reverting changes.
Training on augumented user 85073 11/50 current_auc = 0.7487179487179487
User 85073 AUC after training: 0.7458333333333333
User 85073 does not improve AUC. Reverting changes.
Training on augumented user 95957 12/50 current_auc = 0.7487179487179487
User 95957 AUC after training: 0.746474358974359
User 95957 does not improve AUC. Reverting changes.
Training on augumented user 49212 13/50 current_auc = 0.7487179487179487
User 49212 AUC after training: 0.7474358974358974
User 49212 does not improve AUC. Reverting changes.
Training on augumented user 40942 14/50 current_auc = 0.7487179487179487
User 40942 AUC after training: 0.7480769230769231
User 40942 does not improve AUC. Reverting changes.
Training on augumented user 12074 15/50 current_auc = 0.7487179487179487
User 12074 AUC after training: 0.7467948717948718
User 12074 does not improve AUC. Reverting changes.
Training on augumented user 32920 16/50 current_auc = 0.7487179487179487
User 32920 AUC after training: 0.7474358974358974
User 32920 does not improve AUC. Reverting changes.
Training on augumented user 116853 17/50 current_auc = 0.7487179487179487
User 116853 AUC after training: 0.7458333333333333
User 116853 does not improve AUC. Reverting changes.
Training on augumented user 66612 18/50 current_auc = 0.7487179487179487
User 66612 AUC after training: 0.7487179487179487
User 66612 does not improve AUC. Reverting changes.
Training on augumented user 65213 19/50 current_auc = 0.7487179487179487
User 65213 AUC after training: 0.7480769230769231
User 65213 does not improve AUC. Reverting changes.
Training on augumented user 79877 20/50 current_auc = 0.7487179487179487
User 79877 AUC after training: 0.7448717948717949
User 79877 does not improve AUC. Reverting changes.
Training on augumented user 52030 21/50 current_auc = 0.7487179487179487
User 52030 AUC after training: 0.7480769230769231
User 52030 does not improve AUC. Reverting changes.
Training on augumented user 97785 22/50 current_auc = 0.7487179487179487
User 97785 AUC after training: 0.7467948717948718
User 97785 does not improve AUC. Reverting changes.
Training on augumented user 55348 23/50 current_auc = 0.7487179487179487
User 55348 AUC after training: 0.7493589743589744
User 55348 improves AUC. Keeping the model.
Training on augumented user 107194 24/50 current_auc = 0.7493589743589744
User 107194 AUC after training: 0.7480769230769231
User 107194 does not improve AUC. Reverting changes.
Training on augumented user 90012 25/50 current_auc = 0.7493589743589744
User 90012 AUC after training: 0.7487179487179487
User 90012 does not improve AUC. Reverting changes.
Training on augumented user 11364 26/50 current_auc = 0.7493589743589744
User 11364 AUC after training: 0.7493589743589744
User 11364 does not improve AUC. Reverting changes.
Training on augumented user 34916 27/50 current_auc = 0.7493589743589744
User 34916 AUC after training: 0.7474358974358974
User 34916 does not improve AUC. Reverting changes.
Training on augumented user 69514 28/50 current_auc = 0.7493589743589744
User 69514 AUC after training: 0.7493589743589744
User 69514 does not improve AUC. Reverting changes.
Training on augumented user 83411 29/50 current_auc = 0.7493589743589744
User 83411 AUC after training: 0.7474358974358974
User 83411 does not improve AUC. Reverting changes.
Training on augumented user 68360 30/50 current_auc = 0.7493589743589744
User 68360 AUC after training: 0.7455128205128205
User 68360 does not improve AUC. Reverting changes.
Training on augumented user 62266 31/50 current_auc = 0.7493589743589744
User 62266 AUC after training: 0.7480769230769231
User 62266 does not improve AUC. Reverting changes.
Training on augumented user 24880 32/50 current_auc = 0.7493589743589744
User 24880 AUC after training: 0.7487179487179487
User 24880 does not improve AUC. Reverting changes.
Training on augumented user 21220 33/50 current_auc = 0.7493589743589744
User 21220 AUC after training: 0.7487179487179487
User 21220 does not improve AUC. Reverting changes.
Training on augumented user 53838 34/50 current_auc = 0.7493589743589744
User 53838 AUC after training: 0.7480769230769231
User 53838 does not improve AUC. Reverting changes.
Training on augumented user 133380 35/50 current_auc = 0.7493589743589744
User 133380 AUC after training: 0.7480769230769231
User 133380 does not improve AUC. Reverting changes.
Training on augumented user 55379 36/50 current_auc = 0.7493589743589744
User 55379 AUC after training: 0.7493589743589744
User 55379 does not improve AUC. Reverting changes.
Training on augumented user 85508 37/50 current_auc = 0.7493589743589744
User 85508 AUC after training: 0.7455128205128205
User 85508 does not improve AUC. Reverting changes.
Training on augumented user 114849 38/50 current_auc = 0.7493589743589744
User 114849 AUC after training: 0.7480769230769231
User 114849 does not improve AUC. Reverting changes.
Training on augumented user 127829 39/50 current_auc = 0.7493589743589744
User 127829 AUC after training: 0.7474358974358974
User 127829 does not improve AUC. Reverting changes.
Training on augumented user 104525 40/50 current_auc = 0.7493589743589744
User 104525 AUC after training: 0.7480769230769231
User 104525 does not improve AUC. Reverting changes.
Training on augumented user 34992 41/50 current_auc = 0.7493589743589744
User 34992 AUC after training: 0.7480769230769231
User 34992 does not improve AUC. Reverting changes.
Training on augumented user 31614 42/50 current_auc = 0.7493589743589744
User 31614 AUC after training: 0.7480769230769231
User 31614 does not improve AUC. Reverting changes.
Training on augumented user 70014 43/50 current_auc = 0.7493589743589744
User 70014 AUC after training: 0.7493589743589744
User 70014 does not improve AUC. Reverting changes.
Training on augumented user 72395 44/50 current_auc = 0.7493589743589744
User 72395 AUC after training: 0.7474358974358974
User 72395 does not improve AUC. Reverting changes.
Training on augumented user 99221 45/50 current_auc = 0.7493589743589744
User 99221 AUC after training: 0.7480769230769231
User 99221 does not improve AUC. Reverting changes.
Training on augumented user 78054 46/50 current_auc = 0.7493589743589744
User 78054 AUC after training: 0.7493589743589744
User 78054 does not improve AUC. Reverting changes.
Training on augumented user 68366 47/50 current_auc = 0.7493589743589744
User 68366 AUC after training: 0.7487179487179487
User 68366 does not improve AUC. Reverting changes.
Training on augumented user 81463 48/50 current_auc = 0.7493589743589744
User 81463 AUC after training: 0.7480769230769231
User 81463 does not improve AUC. Reverting changes.
Training on augumented user 37996 49/50 current_auc = 0.7493589743589744
User 37996 AUC after training: 0.7480769230769231
User 37996 does not improve AUC. Reverting changes.
[2024-12-02 18:26:04.640464] start test user 29226 82/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:05.223244] start test user 29226 82/568 recall augumented users by random, augumented_users = [101396, 123403, 112378, 16089, 37307, 136235, 50674, 61771, 133665, 53130, 59561, 117807, 19741, 24831, 97327, 122575, 36646, 32202, 71149, 25835, 94452, 125418, 6396, 121236, 98947, 28223, 63900, 102714, 124784, 48391, 124651, 101868, 40553, 17216, 71037, 95763, 95620, 17280, 35614, 50853, 128510, 13543, 14990, 93142, 90356, 48489, 42136, 68602, 39058, 46399]
[2024-12-02 18:26:05.238267] user = 29226 Cloud 82/568
[2024-12-02 18:26:05.247968] user = 29226 Local 82/568
[2024-12-02 18:26:05.384084] user = 29226 Local+ 82/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:08.149829] user = 29226 MPDA- 82/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7285714285714286
Training on augumented user 101396 0/50 current_auc = 0.7285714285714286
User 101396 AUC after training: 0.7357142857142858
User 101396 improves AUC. Keeping the model.
Training on augumented user 123403 1/50 current_auc = 0.7357142857142858
User 123403 AUC after training: 0.7357142857142858
User 123403 does not improve AUC. Reverting changes.
Training on augumented user 112378 2/50 current_auc = 0.7357142857142858
User 112378 AUC after training: 0.7357142857142858
User 112378 does not improve AUC. Reverting changes.
Training on augumented user 16089 3/50 current_auc = 0.7357142857142858
User 16089 AUC after training: 0.7357142857142858
User 16089 does not improve AUC. Reverting changes.
Training on augumented user 37307 4/50 current_auc = 0.7357142857142858
User 37307 AUC after training: 0.7285714285714286
User 37307 does not improve AUC. Reverting changes.
Training on augumented user 136235 5/50 current_auc = 0.7357142857142858
User 136235 AUC after training: 0.7285714285714286
User 136235 does not improve AUC. Reverting changes.
Training on augumented user 50674 6/50 current_auc = 0.7357142857142858
User 50674 AUC after training: 0.7357142857142858
User 50674 does not improve AUC. Reverting changes.
Training on augumented user 61771 7/50 current_auc = 0.7357142857142858
User 61771 AUC after training: 0.7285714285714286
User 61771 does not improve AUC. Reverting changes.
Training on augumented user 133665 8/50 current_auc = 0.7357142857142858
User 133665 AUC after training: 0.7357142857142858
User 133665 does not improve AUC. Reverting changes.
Training on augumented user 53130 9/50 current_auc = 0.7357142857142858
User 53130 AUC after training: 0.7357142857142858
User 53130 does not improve AUC. Reverting changes.
Training on augumented user 59561 10/50 current_auc = 0.7357142857142858
User 59561 AUC after training: 0.7285714285714286
User 59561 does not improve AUC. Reverting changes.
Training on augumented user 117807 11/50 current_auc = 0.7357142857142858
User 117807 AUC after training: 0.7357142857142858
User 117807 does not improve AUC. Reverting changes.
Training on augumented user 19741 12/50 current_auc = 0.7357142857142858
User 19741 AUC after training: 0.742857142857143
User 19741 improves AUC. Keeping the model.
Training on augumented user 24831 13/50 current_auc = 0.742857142857143
User 24831 AUC after training: 0.742857142857143
User 24831 does not improve AUC. Reverting changes.
Training on augumented user 97327 14/50 current_auc = 0.742857142857143
User 97327 AUC after training: 0.742857142857143
User 97327 does not improve AUC. Reverting changes.
Training on augumented user 122575 15/50 current_auc = 0.742857142857143
User 122575 AUC after training: 0.7357142857142859
User 122575 does not improve AUC. Reverting changes.
Training on augumented user 36646 16/50 current_auc = 0.742857142857143
User 36646 AUC after training: 0.742857142857143
User 36646 does not improve AUC. Reverting changes.
Training on augumented user 32202 17/50 current_auc = 0.742857142857143
User 32202 AUC after training: 0.742857142857143
User 32202 does not improve AUC. Reverting changes.
Training on augumented user 71149 18/50 current_auc = 0.742857142857143
User 71149 AUC after training: 0.742857142857143
User 71149 does not improve AUC. Reverting changes.
Training on augumented user 25835 19/50 current_auc = 0.742857142857143
User 25835 AUC after training: 0.7285714285714286
User 25835 does not improve AUC. Reverting changes.
Training on augumented user 94452 20/50 current_auc = 0.742857142857143
User 94452 AUC after training: 0.7357142857142859
User 94452 does not improve AUC. Reverting changes.
Training on augumented user 125418 21/50 current_auc = 0.742857142857143
User 125418 AUC after training: 0.742857142857143
User 125418 does not improve AUC. Reverting changes.
Training on augumented user 6396 22/50 current_auc = 0.742857142857143
User 6396 AUC after training: 0.742857142857143
User 6396 does not improve AUC. Reverting changes.
Training on augumented user 121236 23/50 current_auc = 0.742857142857143
User 121236 AUC after training: 0.7357142857142859
User 121236 does not improve AUC. Reverting changes.
Training on augumented user 98947 24/50 current_auc = 0.742857142857143
User 98947 AUC after training: 0.7214285714285714
User 98947 does not improve AUC. Reverting changes.
Training on augumented user 28223 25/50 current_auc = 0.742857142857143
User 28223 AUC after training: 0.7357142857142859
User 28223 does not improve AUC. Reverting changes.
Training on augumented user 63900 26/50 current_auc = 0.742857142857143
User 63900 AUC after training: 0.742857142857143
User 63900 does not improve AUC. Reverting changes.
Training on augumented user 102714 27/50 current_auc = 0.742857142857143
User 102714 AUC after training: 0.742857142857143
User 102714 does not improve AUC. Reverting changes.
Training on augumented user 124784 28/50 current_auc = 0.742857142857143
User 124784 AUC after training: 0.7357142857142859
User 124784 does not improve AUC. Reverting changes.
Training on augumented user 48391 29/50 current_auc = 0.742857142857143
User 48391 AUC after training: 0.742857142857143
User 48391 does not improve AUC. Reverting changes.
Training on augumented user 124651 30/50 current_auc = 0.742857142857143
User 124651 AUC after training: 0.7357142857142858
User 124651 does not improve AUC. Reverting changes.
Training on augumented user 101868 31/50 current_auc = 0.742857142857143
User 101868 AUC after training: 0.742857142857143
User 101868 does not improve AUC. Reverting changes.
Training on augumented user 40553 32/50 current_auc = 0.742857142857143
User 40553 AUC after training: 0.7357142857142859
User 40553 does not improve AUC. Reverting changes.
Training on augumented user 17216 33/50 current_auc = 0.742857142857143
User 17216 AUC after training: 0.742857142857143
User 17216 does not improve AUC. Reverting changes.
Training on augumented user 71037 34/50 current_auc = 0.742857142857143
User 71037 AUC after training: 0.7357142857142858
User 71037 does not improve AUC. Reverting changes.
Training on augumented user 95763 35/50 current_auc = 0.742857142857143
User 95763 AUC after training: 0.7357142857142859
User 95763 does not improve AUC. Reverting changes.
Training on augumented user 95620 36/50 current_auc = 0.742857142857143
User 95620 AUC after training: 0.742857142857143
User 95620 does not improve AUC. Reverting changes.
Training on augumented user 17280 37/50 current_auc = 0.742857142857143
User 17280 AUC after training: 0.7214285714285715
User 17280 does not improve AUC. Reverting changes.
Training on augumented user 35614 38/50 current_auc = 0.742857142857143
User 35614 AUC after training: 0.7357142857142859
User 35614 does not improve AUC. Reverting changes.
Training on augumented user 50853 39/50 current_auc = 0.742857142857143
User 50853 AUC after training: 0.742857142857143
User 50853 does not improve AUC. Reverting changes.
Training on augumented user 128510 40/50 current_auc = 0.742857142857143
User 128510 AUC after training: 0.7357142857142859
User 128510 does not improve AUC. Reverting changes.
Training on augumented user 13543 41/50 current_auc = 0.742857142857143
User 13543 AUC after training: 0.7357142857142859
User 13543 does not improve AUC. Reverting changes.
Training on augumented user 14990 42/50 current_auc = 0.742857142857143
User 14990 AUC after training: 0.742857142857143
User 14990 does not improve AUC. Reverting changes.
Training on augumented user 93142 43/50 current_auc = 0.742857142857143
User 93142 AUC after training: 0.742857142857143
User 93142 does not improve AUC. Reverting changes.
Training on augumented user 90356 44/50 current_auc = 0.742857142857143
User 90356 AUC after training: 0.742857142857143
User 90356 does not improve AUC. Reverting changes.
Training on augumented user 48489 45/50 current_auc = 0.742857142857143
User 48489 AUC after training: 0.742857142857143
User 48489 does not improve AUC. Reverting changes.
Training on augumented user 42136 46/50 current_auc = 0.742857142857143
User 42136 AUC after training: 0.742857142857143
User 42136 does not improve AUC. Reverting changes.
Training on augumented user 68602 47/50 current_auc = 0.742857142857143
User 68602 AUC after training: 0.7285714285714286
User 68602 does not improve AUC. Reverting changes.
Training on augumented user 39058 48/50 current_auc = 0.742857142857143
User 39058 AUC after training: 0.742857142857143
User 39058 does not improve AUC. Reverting changes.
Training on augumented user 46399 49/50 current_auc = 0.742857142857143
User 46399 AUC after training: 0.742857142857143
User 46399 does not improve AUC. Reverting changes.
[2024-12-02 18:26:43.034791] start test user 29261 83/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:43.771086] start test user 29261 83/568 recall augumented users by random, augumented_users = [39374, 21551, 107055, 26824, 45277, 94828, 24925, 79924, 50010, 98540, 126329, 60587, 62545, 86233, 31645, 137645, 82412, 54054, 50867, 79183, 27412, 96945, 16294, 39407, 110770, 99857, 53180, 23266, 85905, 47949, 65934, 4991, 117224, 112998, 29461, 72220, 15971, 104188, 31945, 97355, 97187, 6820, 2832, 133210, 135869, 76568, 41810, 1949, 50457, 110635]
[2024-12-02 18:26:43.807049] user = 29261 Cloud 83/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:26:43.814236] user = 29261 Local 83/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:26:43.935345] user = 29261 Local+ 83/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:26:45.740200] user = 29261 MPDA- 83/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 39374 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39374 AUC after training: 0.5
User 39374 does not improve AUC. Reverting changes.
Training on augumented user 21551 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21551 AUC after training: 0.5
User 21551 does not improve AUC. Reverting changes.
Training on augumented user 107055 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107055 AUC after training: 0.5
User 107055 does not improve AUC. Reverting changes.
Training on augumented user 26824 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26824 AUC after training: 0.5
User 26824 does not improve AUC. Reverting changes.
Training on augumented user 45277 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45277 AUC after training: 0.5
User 45277 does not improve AUC. Reverting changes.
Training on augumented user 94828 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94828 AUC after training: 0.5
User 94828 does not improve AUC. Reverting changes.
Training on augumented user 24925 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24925 AUC after training: 0.5
User 24925 does not improve AUC. Reverting changes.
Training on augumented user 79924 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79924 AUC after training: 0.5
User 79924 does not improve AUC. Reverting changes.
Training on augumented user 50010 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50010 AUC after training: 0.5
User 50010 does not improve AUC. Reverting changes.
Training on augumented user 98540 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98540 AUC after training: 0.5
User 98540 does not improve AUC. Reverting changes.
Training on augumented user 126329 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126329 AUC after training: 0.5
User 126329 does not improve AUC. Reverting changes.
Training on augumented user 60587 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60587 AUC after training: 0.5
User 60587 does not improve AUC. Reverting changes.
Training on augumented user 62545 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62545 AUC after training: 0.5
User 62545 does not improve AUC. Reverting changes.
Training on augumented user 86233 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86233 AUC after training: 0.5
User 86233 does not improve AUC. Reverting changes.
Training on augumented user 31645 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31645 AUC after training: 0.5
User 31645 does not improve AUC. Reverting changes.
Training on augumented user 137645 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137645 AUC after training: 0.5
User 137645 does not improve AUC. Reverting changes.
Training on augumented user 82412 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82412 AUC after training: 0.5
User 82412 does not improve AUC. Reverting changes.
Training on augumented user 54054 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54054 AUC after training: 0.5
User 54054 does not improve AUC. Reverting changes.
Training on augumented user 50867 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50867 AUC after training: 0.5
User 50867 does not improve AUC. Reverting changes.
Training on augumented user 79183 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79183 AUC after training: 0.5
User 79183 does not improve AUC. Reverting changes.
Training on augumented user 27412 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27412 AUC after training: 0.5
User 27412 does not improve AUC. Reverting changes.
Training on augumented user 96945 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96945 AUC after training: 0.5
User 96945 does not improve AUC. Reverting changes.
Training on augumented user 16294 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16294 AUC after training: 0.5
User 16294 does not improve AUC. Reverting changes.
Training on augumented user 39407 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39407 AUC after training: 0.5
User 39407 does not improve AUC. Reverting changes.
Training on augumented user 110770 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110770 AUC after training: 0.5
User 110770 does not improve AUC. Reverting changes.
Training on augumented user 99857 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99857 AUC after training: 0.5
User 99857 does not improve AUC. Reverting changes.
Training on augumented user 53180 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53180 AUC after training: 0.5
User 53180 does not improve AUC. Reverting changes.
Training on augumented user 23266 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23266 AUC after training: 0.5
User 23266 does not improve AUC. Reverting changes.
Training on augumented user 85905 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85905 AUC after training: 0.5
User 85905 does not improve AUC. Reverting changes.
Training on augumented user 47949 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47949 AUC after training: 0.5
User 47949 does not improve AUC. Reverting changes.
Training on augumented user 65934 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65934 AUC after training: 0.5
User 65934 does not improve AUC. Reverting changes.
Training on augumented user 4991 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4991 AUC after training: 0.5
User 4991 does not improve AUC. Reverting changes.
Training on augumented user 117224 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117224 AUC after training: 0.5
User 117224 does not improve AUC. Reverting changes.
Training on augumented user 112998 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112998 AUC after training: 0.5
User 112998 does not improve AUC. Reverting changes.
Training on augumented user 29461 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29461 AUC after training: 0.5
User 29461 does not improve AUC. Reverting changes.
Training on augumented user 72220 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72220 AUC after training: 0.5
User 72220 does not improve AUC. Reverting changes.
Training on augumented user 15971 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15971 AUC after training: 0.5
User 15971 does not improve AUC. Reverting changes.
Training on augumented user 104188 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104188 AUC after training: 0.5
User 104188 does not improve AUC. Reverting changes.
Training on augumented user 31945 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31945 AUC after training: 0.5
User 31945 does not improve AUC. Reverting changes.
Training on augumented user 97355 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97355 AUC after training: 0.5
User 97355 does not improve AUC. Reverting changes.
Training on augumented user 97187 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97187 AUC after training: 0.5
User 97187 does not improve AUC. Reverting changes.
Training on augumented user 6820 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6820 AUC after training: 0.5
User 6820 does not improve AUC. Reverting changes.
Training on augumented user 2832 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2832 AUC after training: 0.5
User 2832 does not improve AUC. Reverting changes.
Training on augumented user 133210 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133210 AUC after training: 0.5
User 133210 does not improve AUC. Reverting changes.
Training on augumented user 135869 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135869 AUC after training: 0.5
User 135869 does not improve AUC. Reverting changes.
Training on augumented user 76568 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76568 AUC after training: 0.5
User 76568 does not improve AUC. Reverting changes.
Training on augumented user 41810 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41810 AUC after training: 0.5
User 41810 does not improve AUC. Reverting changes.
Training on augumented user 1949 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1949 AUC after training: 0.5
User 1949 does not improve AUC. Reverting changes.
Training on augumented user 50457 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50457 AUC after training: 0.5
User 50457 does not improve AUC. Reverting changes.
Training on augumented user 110635 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110635 AUC after training: 0.5
User 110635 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:27:17.896304] start test user 29278 84/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:18.463873] start test user 29278 84/568 recall augumented users by random, augumented_users = [122139, 9123, 66461, 73156, 27993, 13138, 11840, 26924, 94656, 85516, 22841, 23984, 111221, 93278, 119847, 24028, 119769, 37275, 17669, 42569, 82795, 15354, 23962, 72380, 36868, 135045, 138282, 129723, 127631, 71050, 13816, 29806, 62924, 120355, 73271, 34224, 38775, 12502, 108648, 101346, 104987, 107409, 53865, 26675, 90380, 136815, 104782, 4154, 53825, 126495]
[2024-12-02 18:27:18.478338] user = 29278 Cloud 84/568
[2024-12-02 18:27:18.499966] user = 29278 Local 84/568
[2024-12-02 18:27:18.520513] user = 29278 Local+ 84/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:20.763612] user = 29278 MPDA- 84/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 122139 0/50 current_auc = 0.5
User 122139 AUC after training: 0.5
User 122139 does not improve AUC. Reverting changes.
Training on augumented user 9123 1/50 current_auc = 0.5
User 9123 AUC after training: 0.5
User 9123 does not improve AUC. Reverting changes.
Training on augumented user 66461 2/50 current_auc = 0.5
User 66461 AUC after training: 0.5
User 66461 does not improve AUC. Reverting changes.
Training on augumented user 73156 3/50 current_auc = 0.5
User 73156 AUC after training: 0.5
User 73156 does not improve AUC. Reverting changes.
Training on augumented user 27993 4/50 current_auc = 0.5
User 27993 AUC after training: 0.5
User 27993 does not improve AUC. Reverting changes.
Training on augumented user 13138 5/50 current_auc = 0.5
User 13138 AUC after training: 0.5
User 13138 does not improve AUC. Reverting changes.
Training on augumented user 11840 6/50 current_auc = 0.5
User 11840 AUC after training: 0.5
User 11840 does not improve AUC. Reverting changes.
Training on augumented user 26924 7/50 current_auc = 0.5
User 26924 AUC after training: 0.5
User 26924 does not improve AUC. Reverting changes.
Training on augumented user 94656 8/50 current_auc = 0.5
User 94656 AUC after training: 0.5
User 94656 does not improve AUC. Reverting changes.
Training on augumented user 85516 9/50 current_auc = 0.5
User 85516 AUC after training: 0.5
User 85516 does not improve AUC. Reverting changes.
Training on augumented user 22841 10/50 current_auc = 0.5
User 22841 AUC after training: 0.5
User 22841 does not improve AUC. Reverting changes.
Training on augumented user 23984 11/50 current_auc = 0.5
User 23984 AUC after training: 0.5
User 23984 does not improve AUC. Reverting changes.
Training on augumented user 111221 12/50 current_auc = 0.5
User 111221 AUC after training: 0.5
User 111221 does not improve AUC. Reverting changes.
Training on augumented user 93278 13/50 current_auc = 0.5
User 93278 AUC after training: 0.5
User 93278 does not improve AUC. Reverting changes.
Training on augumented user 119847 14/50 current_auc = 0.5
User 119847 AUC after training: 0.5
User 119847 does not improve AUC. Reverting changes.
Training on augumented user 24028 15/50 current_auc = 0.5
User 24028 AUC after training: 0.5
User 24028 does not improve AUC. Reverting changes.
Training on augumented user 119769 16/50 current_auc = 0.5
User 119769 AUC after training: 0.5
User 119769 does not improve AUC. Reverting changes.
Training on augumented user 37275 17/50 current_auc = 0.5
User 37275 AUC after training: 0.5
User 37275 does not improve AUC. Reverting changes.
Training on augumented user 17669 18/50 current_auc = 0.5
User 17669 AUC after training: 0.5
User 17669 does not improve AUC. Reverting changes.
Training on augumented user 42569 19/50 current_auc = 0.5
User 42569 AUC after training: 0.5
User 42569 does not improve AUC. Reverting changes.
Training on augumented user 82795 20/50 current_auc = 0.5
User 82795 AUC after training: 0.5
User 82795 does not improve AUC. Reverting changes.
Training on augumented user 15354 21/50 current_auc = 0.5
User 15354 AUC after training: 0.5
User 15354 does not improve AUC. Reverting changes.
Training on augumented user 23962 22/50 current_auc = 0.5
User 23962 AUC after training: 0.5
User 23962 does not improve AUC. Reverting changes.
Training on augumented user 72380 23/50 current_auc = 0.5
User 72380 AUC after training: 0.5
User 72380 does not improve AUC. Reverting changes.
Training on augumented user 36868 24/50 current_auc = 0.5
User 36868 AUC after training: 0.5
User 36868 does not improve AUC. Reverting changes.
Training on augumented user 135045 25/50 current_auc = 0.5
User 135045 AUC after training: 0.5
User 135045 does not improve AUC. Reverting changes.
Training on augumented user 138282 26/50 current_auc = 0.5
User 138282 AUC after training: 0.5
User 138282 does not improve AUC. Reverting changes.
Training on augumented user 129723 27/50 current_auc = 0.5
User 129723 AUC after training: 0.5
User 129723 does not improve AUC. Reverting changes.
Training on augumented user 127631 28/50 current_auc = 0.5
User 127631 AUC after training: 0.5
User 127631 does not improve AUC. Reverting changes.
Training on augumented user 71050 29/50 current_auc = 0.5
User 71050 AUC after training: 0.5
User 71050 does not improve AUC. Reverting changes.
Training on augumented user 13816 30/50 current_auc = 0.5
User 13816 AUC after training: 0.5
User 13816 does not improve AUC. Reverting changes.
Training on augumented user 29806 31/50 current_auc = 0.5
User 29806 AUC after training: 0.5
User 29806 does not improve AUC. Reverting changes.
Training on augumented user 62924 32/50 current_auc = 0.5
User 62924 AUC after training: 0.5
User 62924 does not improve AUC. Reverting changes.
Training on augumented user 120355 33/50 current_auc = 0.5
User 120355 AUC after training: 0.5
User 120355 does not improve AUC. Reverting changes.
Training on augumented user 73271 34/50 current_auc = 0.5
User 73271 AUC after training: 0.5
User 73271 does not improve AUC. Reverting changes.
Training on augumented user 34224 35/50 current_auc = 0.5
User 34224 AUC after training: 0.5
User 34224 does not improve AUC. Reverting changes.
Training on augumented user 38775 36/50 current_auc = 0.5
User 38775 AUC after training: 0.5
User 38775 does not improve AUC. Reverting changes.
Training on augumented user 12502 37/50 current_auc = 0.5
User 12502 AUC after training: 0.5
User 12502 does not improve AUC. Reverting changes.
Training on augumented user 108648 38/50 current_auc = 0.5
User 108648 AUC after training: 0.5
User 108648 does not improve AUC. Reverting changes.
Training on augumented user 101346 39/50 current_auc = 0.5
User 101346 AUC after training: 0.5
User 101346 does not improve AUC. Reverting changes.
Training on augumented user 104987 40/50 current_auc = 0.5
User 104987 AUC after training: 0.5
User 104987 does not improve AUC. Reverting changes.
Training on augumented user 107409 41/50 current_auc = 0.5
User 107409 AUC after training: 0.5
User 107409 does not improve AUC. Reverting changes.
Training on augumented user 53865 42/50 current_auc = 0.5
User 53865 AUC after training: 0.5
User 53865 does not improve AUC. Reverting changes.
Training on augumented user 26675 43/50 current_auc = 0.5
User 26675 AUC after training: 0.5
User 26675 does not improve AUC. Reverting changes.
Training on augumented user 90380 44/50 current_auc = 0.5
User 90380 AUC after training: 0.5
User 90380 does not improve AUC. Reverting changes.
Training on augumented user 136815 45/50 current_auc = 0.5
User 136815 AUC after training: 0.5
User 136815 does not improve AUC. Reverting changes.
Training on augumented user 104782 46/50 current_auc = 0.5
User 104782 AUC after training: 0.5
User 104782 does not improve AUC. Reverting changes.
Training on augumented user 4154 47/50 current_auc = 0.5
User 4154 AUC after training: 0.5
User 4154 does not improve AUC. Reverting changes.
Training on augumented user 53825 48/50 current_auc = 0.5
User 53825 AUC after training: 0.5
User 53825 does not improve AUC. Reverting changes.
Training on augumented user 126495 49/50 current_auc = 0.5
User 126495 AUC after training: 0.5
User 126495 does not improve AUC. Reverting changes.
[2024-12-02 18:27:48.868878] start test user 29316 85/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:49.535730] start test user 29316 85/568 recall augumented users by random, augumented_users = [90306, 136008, 62732, 104194, 121637, 30142, 18895, 114440, 56660, 45938, 108872, 40025, 98651, 70155, 112388, 90283, 107380, 25555, 54146, 137606, 119642, 1470, 92794, 17786, 32734, 52487, 37860, 90511, 13114, 95909, 88335, 81376, 35798, 36966, 126177, 125938, 122052, 64293, 93199, 9649, 91962, 59675, 18083, 112228, 17805, 21885, 11384, 10697, 90226, 1941]
[2024-12-02 18:27:49.557223] user = 29316 Cloud 85/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:27:49.569722] user = 29316 Local 85/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:27:49.672162] user = 29316 Local+ 85/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:27:53.088202] user = 29316 MPDA- 85/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 90306 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90306 AUC after training: 0.5
User 90306 does not improve AUC. Reverting changes.
Training on augumented user 136008 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136008 AUC after training: 0.5
User 136008 does not improve AUC. Reverting changes.
Training on augumented user 62732 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62732 AUC after training: 0.5
User 62732 does not improve AUC. Reverting changes.
Training on augumented user 104194 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104194 AUC after training: 0.5
User 104194 does not improve AUC. Reverting changes.
Training on augumented user 121637 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121637 AUC after training: 0.5
User 121637 does not improve AUC. Reverting changes.
Training on augumented user 30142 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30142 AUC after training: 0.5
User 30142 does not improve AUC. Reverting changes.
Training on augumented user 18895 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18895 AUC after training: 0.5
User 18895 does not improve AUC. Reverting changes.
Training on augumented user 114440 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114440 AUC after training: 0.5
User 114440 does not improve AUC. Reverting changes.
Training on augumented user 56660 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56660 AUC after training: 0.5
User 56660 does not improve AUC. Reverting changes.
Training on augumented user 45938 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45938 AUC after training: 0.5
User 45938 does not improve AUC. Reverting changes.
Training on augumented user 108872 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108872 AUC after training: 0.5
User 108872 does not improve AUC. Reverting changes.
Training on augumented user 40025 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40025 AUC after training: 0.5
User 40025 does not improve AUC. Reverting changes.
Training on augumented user 98651 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98651 AUC after training: 0.5
User 98651 does not improve AUC. Reverting changes.
Training on augumented user 70155 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70155 AUC after training: 0.5
User 70155 does not improve AUC. Reverting changes.
Training on augumented user 112388 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112388 AUC after training: 0.5
User 112388 does not improve AUC. Reverting changes.
Training on augumented user 90283 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90283 AUC after training: 0.5
User 90283 does not improve AUC. Reverting changes.
Training on augumented user 107380 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107380 AUC after training: 0.5
User 107380 does not improve AUC. Reverting changes.
Training on augumented user 25555 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25555 AUC after training: 0.5
User 25555 does not improve AUC. Reverting changes.
Training on augumented user 54146 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54146 AUC after training: 0.5
User 54146 does not improve AUC. Reverting changes.
Training on augumented user 137606 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137606 AUC after training: 0.5
User 137606 does not improve AUC. Reverting changes.
Training on augumented user 119642 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119642 AUC after training: 0.5
User 119642 does not improve AUC. Reverting changes.
Training on augumented user 1470 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1470 AUC after training: 0.5
User 1470 does not improve AUC. Reverting changes.
Training on augumented user 92794 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92794 AUC after training: 0.5
User 92794 does not improve AUC. Reverting changes.
Training on augumented user 17786 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17786 AUC after training: 0.5
User 17786 does not improve AUC. Reverting changes.
Training on augumented user 32734 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32734 AUC after training: 0.5
User 32734 does not improve AUC. Reverting changes.
Training on augumented user 52487 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52487 AUC after training: 0.5
User 52487 does not improve AUC. Reverting changes.
Training on augumented user 37860 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37860 AUC after training: 0.5
User 37860 does not improve AUC. Reverting changes.
Training on augumented user 90511 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90511 AUC after training: 0.5
User 90511 does not improve AUC. Reverting changes.
Training on augumented user 13114 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13114 AUC after training: 0.5
User 13114 does not improve AUC. Reverting changes.
Training on augumented user 95909 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95909 AUC after training: 0.5
User 95909 does not improve AUC. Reverting changes.
Training on augumented user 88335 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88335 AUC after training: 0.5
User 88335 does not improve AUC. Reverting changes.
Training on augumented user 81376 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81376 AUC after training: 0.5
User 81376 does not improve AUC. Reverting changes.
Training on augumented user 35798 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35798 AUC after training: 0.5
User 35798 does not improve AUC. Reverting changes.
Training on augumented user 36966 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36966 AUC after training: 0.5
User 36966 does not improve AUC. Reverting changes.
Training on augumented user 126177 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126177 AUC after training: 0.5
User 126177 does not improve AUC. Reverting changes.
Training on augumented user 125938 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125938 AUC after training: 0.5
User 125938 does not improve AUC. Reverting changes.
Training on augumented user 122052 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122052 AUC after training: 0.5
User 122052 does not improve AUC. Reverting changes.
Training on augumented user 64293 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64293 AUC after training: 0.5
User 64293 does not improve AUC. Reverting changes.
Training on augumented user 93199 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93199 AUC after training: 0.5
User 93199 does not improve AUC. Reverting changes.
Training on augumented user 9649 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9649 AUC after training: 0.5
User 9649 does not improve AUC. Reverting changes.
Training on augumented user 91962 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91962 AUC after training: 0.5
User 91962 does not improve AUC. Reverting changes.
Training on augumented user 59675 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59675 AUC after training: 0.5
User 59675 does not improve AUC. Reverting changes.
Training on augumented user 18083 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18083 AUC after training: 0.5
User 18083 does not improve AUC. Reverting changes.
Training on augumented user 112228 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112228 AUC after training: 0.5
User 112228 does not improve AUC. Reverting changes.
Training on augumented user 17805 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17805 AUC after training: 0.5
User 17805 does not improve AUC. Reverting changes.
Training on augumented user 21885 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21885 AUC after training: 0.5
User 21885 does not improve AUC. Reverting changes.
Training on augumented user 11384 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11384 AUC after training: 0.5
User 11384 does not improve AUC. Reverting changes.
Training on augumented user 10697 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10697 AUC after training: 0.5
User 10697 does not improve AUC. Reverting changes.
Training on augumented user 90226 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90226 AUC after training: 0.5
User 90226 does not improve AUC. Reverting changes.
Training on augumented user 1941 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1941 AUC after training: 0.5
User 1941 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:28:20.844526] start test user 29317 86/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:21.349108] start test user 29317 86/568 recall augumented users by random, augumented_users = [26688, 51608, 49086, 92180, 74497, 64282, 45224, 122486, 43853, 80025, 125861, 9894, 89704, 93658, 107904, 88467, 75674, 136427, 60747, 37574, 132125, 65984, 102420, 84535, 10430, 117478, 103475, 28461, 44917, 92292, 4307, 122648, 121645, 61348, 20398, 48333, 48159, 75957, 129569, 96085, 51683, 85287, 67904, 71776, 19456, 126573, 78998, 76109, 42159, 40629]
[2024-12-02 18:28:21.365542] user = 29317 Cloud 86/568
[2024-12-02 18:28:21.378861] user = 29317 Local 86/568
[2024-12-02 18:28:21.401534] user = 29317 Local+ 86/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:24.508553] user = 29317 MPDA- 86/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8400000000000001
Training on augumented user 26688 0/50 current_auc = 0.8400000000000001
User 26688 AUC after training: 0.8300000000000001
User 26688 does not improve AUC. Reverting changes.
Training on augumented user 51608 1/50 current_auc = 0.8400000000000001
User 51608 AUC after training: 0.8300000000000001
User 51608 does not improve AUC. Reverting changes.
Training on augumented user 49086 2/50 current_auc = 0.8400000000000001
User 49086 AUC after training: 0.8300000000000001
User 49086 does not improve AUC. Reverting changes.
Training on augumented user 92180 3/50 current_auc = 0.8400000000000001
User 92180 AUC after training: 0.8300000000000001
User 92180 does not improve AUC. Reverting changes.
Training on augumented user 74497 4/50 current_auc = 0.8400000000000001
User 74497 AUC after training: 0.8400000000000001
User 74497 does not improve AUC. Reverting changes.
Training on augumented user 64282 5/50 current_auc = 0.8400000000000001
User 64282 AUC after training: 0.8400000000000001
User 64282 does not improve AUC. Reverting changes.
Training on augumented user 45224 6/50 current_auc = 0.8400000000000001
User 45224 AUC after training: 0.8400000000000001
User 45224 does not improve AUC. Reverting changes.
Training on augumented user 122486 7/50 current_auc = 0.8400000000000001
User 122486 AUC after training: 0.8400000000000001
User 122486 does not improve AUC. Reverting changes.
Training on augumented user 43853 8/50 current_auc = 0.8400000000000001
User 43853 AUC after training: 0.8400000000000001
User 43853 does not improve AUC. Reverting changes.
Training on augumented user 80025 9/50 current_auc = 0.8400000000000001
User 80025 AUC after training: 0.8400000000000001
User 80025 does not improve AUC. Reverting changes.
Training on augumented user 125861 10/50 current_auc = 0.8400000000000001
User 125861 AUC after training: 0.8300000000000001
User 125861 does not improve AUC. Reverting changes.
Training on augumented user 9894 11/50 current_auc = 0.8400000000000001
User 9894 AUC after training: 0.8300000000000001
User 9894 does not improve AUC. Reverting changes.
Training on augumented user 89704 12/50 current_auc = 0.8400000000000001
User 89704 AUC after training: 0.8400000000000001
User 89704 does not improve AUC. Reverting changes.
Training on augumented user 93658 13/50 current_auc = 0.8400000000000001
User 93658 AUC after training: 0.8400000000000001
User 93658 does not improve AUC. Reverting changes.
Training on augumented user 107904 14/50 current_auc = 0.8400000000000001
User 107904 AUC after training: 0.8400000000000001
User 107904 does not improve AUC. Reverting changes.
Training on augumented user 88467 15/50 current_auc = 0.8400000000000001
User 88467 AUC after training: 0.8400000000000001
User 88467 does not improve AUC. Reverting changes.
Training on augumented user 75674 16/50 current_auc = 0.8400000000000001
User 75674 AUC after training: 0.8300000000000001
User 75674 does not improve AUC. Reverting changes.
Training on augumented user 136427 17/50 current_auc = 0.8400000000000001
User 136427 AUC after training: 0.8300000000000001
User 136427 does not improve AUC. Reverting changes.
Training on augumented user 60747 18/50 current_auc = 0.8400000000000001
User 60747 AUC after training: 0.8400000000000001
User 60747 does not improve AUC. Reverting changes.
Training on augumented user 37574 19/50 current_auc = 0.8400000000000001
User 37574 AUC after training: 0.8400000000000001
User 37574 does not improve AUC. Reverting changes.
Training on augumented user 132125 20/50 current_auc = 0.8400000000000001
User 132125 AUC after training: 0.8400000000000001
User 132125 does not improve AUC. Reverting changes.
Training on augumented user 65984 21/50 current_auc = 0.8400000000000001
User 65984 AUC after training: 0.8400000000000001
User 65984 does not improve AUC. Reverting changes.
Training on augumented user 102420 22/50 current_auc = 0.8400000000000001
User 102420 AUC after training: 0.8400000000000001
User 102420 does not improve AUC. Reverting changes.
Training on augumented user 84535 23/50 current_auc = 0.8400000000000001
User 84535 AUC after training: 0.8300000000000001
User 84535 does not improve AUC. Reverting changes.
Training on augumented user 10430 24/50 current_auc = 0.8400000000000001
User 10430 AUC after training: 0.8400000000000001
User 10430 does not improve AUC. Reverting changes.
Training on augumented user 117478 25/50 current_auc = 0.8400000000000001
User 117478 AUC after training: 0.8300000000000001
User 117478 does not improve AUC. Reverting changes.
Training on augumented user 103475 26/50 current_auc = 0.8400000000000001
User 103475 AUC after training: 0.8400000000000001
User 103475 does not improve AUC. Reverting changes.
Training on augumented user 28461 27/50 current_auc = 0.8400000000000001
User 28461 AUC after training: 0.8400000000000001
User 28461 does not improve AUC. Reverting changes.
Training on augumented user 44917 28/50 current_auc = 0.8400000000000001
User 44917 AUC after training: 0.8300000000000001
User 44917 does not improve AUC. Reverting changes.
Training on augumented user 92292 29/50 current_auc = 0.8400000000000001
User 92292 AUC after training: 0.8300000000000001
User 92292 does not improve AUC. Reverting changes.
Training on augumented user 4307 30/50 current_auc = 0.8400000000000001
User 4307 AUC after training: 0.8400000000000001
User 4307 does not improve AUC. Reverting changes.
Training on augumented user 122648 31/50 current_auc = 0.8400000000000001
User 122648 AUC after training: 0.8400000000000001
User 122648 does not improve AUC. Reverting changes.
Training on augumented user 121645 32/50 current_auc = 0.8400000000000001
User 121645 AUC after training: 0.8400000000000001
User 121645 does not improve AUC. Reverting changes.
Training on augumented user 61348 33/50 current_auc = 0.8400000000000001
User 61348 AUC after training: 0.8300000000000001
User 61348 does not improve AUC. Reverting changes.
Training on augumented user 20398 34/50 current_auc = 0.8400000000000001
User 20398 AUC after training: 0.8500000000000001
User 20398 improves AUC. Keeping the model.
Training on augumented user 48333 35/50 current_auc = 0.8500000000000001
User 48333 AUC after training: 0.8500000000000001
User 48333 does not improve AUC. Reverting changes.
Training on augumented user 48159 36/50 current_auc = 0.8500000000000001
User 48159 AUC after training: 0.8300000000000001
User 48159 does not improve AUC. Reverting changes.
Training on augumented user 75957 37/50 current_auc = 0.8500000000000001
User 75957 AUC after training: 0.8400000000000001
User 75957 does not improve AUC. Reverting changes.
Training on augumented user 129569 38/50 current_auc = 0.8500000000000001
User 129569 AUC after training: 0.8400000000000001
User 129569 does not improve AUC. Reverting changes.
Training on augumented user 96085 39/50 current_auc = 0.8500000000000001
User 96085 AUC after training: 0.8500000000000001
User 96085 does not improve AUC. Reverting changes.
Training on augumented user 51683 40/50 current_auc = 0.8500000000000001
User 51683 AUC after training: 0.8300000000000001
User 51683 does not improve AUC. Reverting changes.
Training on augumented user 85287 41/50 current_auc = 0.8500000000000001
User 85287 AUC after training: 0.8500000000000001
User 85287 does not improve AUC. Reverting changes.
Training on augumented user 67904 42/50 current_auc = 0.8500000000000001
User 67904 AUC after training: 0.8500000000000001
User 67904 does not improve AUC. Reverting changes.
Training on augumented user 71776 43/50 current_auc = 0.8500000000000001
User 71776 AUC after training: 0.8400000000000001
User 71776 does not improve AUC. Reverting changes.
Training on augumented user 19456 44/50 current_auc = 0.8500000000000001
User 19456 AUC after training: 0.8400000000000001
User 19456 does not improve AUC. Reverting changes.
Training on augumented user 126573 45/50 current_auc = 0.8500000000000001
User 126573 AUC after training: 0.8500000000000001
User 126573 does not improve AUC. Reverting changes.
Training on augumented user 78998 46/50 current_auc = 0.8500000000000001
User 78998 AUC after training: 0.8500000000000001
User 78998 does not improve AUC. Reverting changes.
Training on augumented user 76109 47/50 current_auc = 0.8500000000000001
User 76109 AUC after training: 0.8500000000000001
User 76109 does not improve AUC. Reverting changes.
Training on augumented user 42159 48/50 current_auc = 0.8500000000000001
User 42159 AUC after training: 0.8400000000000001
User 42159 does not improve AUC. Reverting changes.
Training on augumented user 40629 49/50 current_auc = 0.8500000000000001
User 40629 AUC after training: 0.8400000000000001
User 40629 does not improve AUC. Reverting changes.
[2024-12-02 18:28:56.007775] start test user 29334 87/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:56.637839] start test user 29334 87/568 recall augumented users by random, augumented_users = [122647, 107717, 131626, 133054, 56742, 23797, 27777, 38795, 126052, 117595, 96674, 627, 2307, 17075, 12497, 81679, 113843, 113758, 82703, 24100, 35851, 67702, 24088, 128850, 51827, 31090, 75253, 47742, 116487, 19112, 67087, 100311, 135696, 70628, 950, 66409, 126706, 114489, 24323, 10433, 26392, 137254, 3131, 76918, 51753, 91600, 80655, 43769, 121248, 72289]
[2024-12-02 18:28:56.654490] user = 29334 Cloud 87/568
[2024-12-02 18:28:56.664998] user = 29334 Local 87/568
[2024-12-02 18:28:56.963601] user = 29334 Local+ 87/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:59.702397] user = 29334 MPDA- 87/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 122647 0/50 current_auc = 1.0
User 122647 AUC after training: 1.0
User 122647 does not improve AUC. Reverting changes.
Training on augumented user 107717 1/50 current_auc = 1.0
User 107717 AUC after training: 1.0
User 107717 does not improve AUC. Reverting changes.
Training on augumented user 131626 2/50 current_auc = 1.0
User 131626 AUC after training: 1.0
User 131626 does not improve AUC. Reverting changes.
Training on augumented user 133054 3/50 current_auc = 1.0
User 133054 AUC after training: 1.0
User 133054 does not improve AUC. Reverting changes.
Training on augumented user 56742 4/50 current_auc = 1.0
User 56742 AUC after training: 1.0
User 56742 does not improve AUC. Reverting changes.
Training on augumented user 23797 5/50 current_auc = 1.0
User 23797 AUC after training: 1.0
User 23797 does not improve AUC. Reverting changes.
Training on augumented user 27777 6/50 current_auc = 1.0
User 27777 AUC after training: 1.0
User 27777 does not improve AUC. Reverting changes.
Training on augumented user 38795 7/50 current_auc = 1.0
User 38795 AUC after training: 1.0
User 38795 does not improve AUC. Reverting changes.
Training on augumented user 126052 8/50 current_auc = 1.0
User 126052 AUC after training: 1.0
User 126052 does not improve AUC. Reverting changes.
Training on augumented user 117595 9/50 current_auc = 1.0
User 117595 AUC after training: 1.0
User 117595 does not improve AUC. Reverting changes.
Training on augumented user 96674 10/50 current_auc = 1.0
User 96674 AUC after training: 1.0
User 96674 does not improve AUC. Reverting changes.
Training on augumented user 627 11/50 current_auc = 1.0
User 627 AUC after training: 1.0
User 627 does not improve AUC. Reverting changes.
Training on augumented user 2307 12/50 current_auc = 1.0
User 2307 AUC after training: 1.0
User 2307 does not improve AUC. Reverting changes.
Training on augumented user 17075 13/50 current_auc = 1.0
User 17075 AUC after training: 1.0
User 17075 does not improve AUC. Reverting changes.
Training on augumented user 12497 14/50 current_auc = 1.0
User 12497 AUC after training: 1.0
User 12497 does not improve AUC. Reverting changes.
Training on augumented user 81679 15/50 current_auc = 1.0
User 81679 AUC after training: 1.0
User 81679 does not improve AUC. Reverting changes.
Training on augumented user 113843 16/50 current_auc = 1.0
User 113843 AUC after training: 1.0
User 113843 does not improve AUC. Reverting changes.
Training on augumented user 113758 17/50 current_auc = 1.0
User 113758 AUC after training: 1.0
User 113758 does not improve AUC. Reverting changes.
Training on augumented user 82703 18/50 current_auc = 1.0
User 82703 AUC after training: 1.0
User 82703 does not improve AUC. Reverting changes.
Training on augumented user 24100 19/50 current_auc = 1.0
User 24100 AUC after training: 1.0
User 24100 does not improve AUC. Reverting changes.
Training on augumented user 35851 20/50 current_auc = 1.0
User 35851 AUC after training: 1.0
User 35851 does not improve AUC. Reverting changes.
Training on augumented user 67702 21/50 current_auc = 1.0
User 67702 AUC after training: 1.0
User 67702 does not improve AUC. Reverting changes.
Training on augumented user 24088 22/50 current_auc = 1.0
User 24088 AUC after training: 1.0
User 24088 does not improve AUC. Reverting changes.
Training on augumented user 128850 23/50 current_auc = 1.0
User 128850 AUC after training: 1.0
User 128850 does not improve AUC. Reverting changes.
Training on augumented user 51827 24/50 current_auc = 1.0
User 51827 AUC after training: 1.0
User 51827 does not improve AUC. Reverting changes.
Training on augumented user 31090 25/50 current_auc = 1.0
User 31090 AUC after training: 1.0
User 31090 does not improve AUC. Reverting changes.
Training on augumented user 75253 26/50 current_auc = 1.0
User 75253 AUC after training: 1.0
User 75253 does not improve AUC. Reverting changes.
Training on augumented user 47742 27/50 current_auc = 1.0
User 47742 AUC after training: 1.0
User 47742 does not improve AUC. Reverting changes.
Training on augumented user 116487 28/50 current_auc = 1.0
User 116487 AUC after training: 1.0
User 116487 does not improve AUC. Reverting changes.
Training on augumented user 19112 29/50 current_auc = 1.0
User 19112 AUC after training: 1.0
User 19112 does not improve AUC. Reverting changes.
Training on augumented user 67087 30/50 current_auc = 1.0
User 67087 AUC after training: 1.0
User 67087 does not improve AUC. Reverting changes.
Training on augumented user 100311 31/50 current_auc = 1.0
User 100311 AUC after training: 1.0
User 100311 does not improve AUC. Reverting changes.
Training on augumented user 135696 32/50 current_auc = 1.0
User 135696 AUC after training: 1.0
User 135696 does not improve AUC. Reverting changes.
Training on augumented user 70628 33/50 current_auc = 1.0
User 70628 AUC after training: 1.0
User 70628 does not improve AUC. Reverting changes.
Training on augumented user 950 34/50 current_auc = 1.0
User 950 AUC after training: 1.0
User 950 does not improve AUC. Reverting changes.
Training on augumented user 66409 35/50 current_auc = 1.0
User 66409 AUC after training: 1.0
User 66409 does not improve AUC. Reverting changes.
Training on augumented user 126706 36/50 current_auc = 1.0
User 126706 AUC after training: 1.0
User 126706 does not improve AUC. Reverting changes.
Training on augumented user 114489 37/50 current_auc = 1.0
User 114489 AUC after training: 1.0
User 114489 does not improve AUC. Reverting changes.
Training on augumented user 24323 38/50 current_auc = 1.0
User 24323 AUC after training: 1.0
User 24323 does not improve AUC. Reverting changes.
Training on augumented user 10433 39/50 current_auc = 1.0
User 10433 AUC after training: 1.0
User 10433 does not improve AUC. Reverting changes.
Training on augumented user 26392 40/50 current_auc = 1.0
User 26392 AUC after training: 1.0
User 26392 does not improve AUC. Reverting changes.
Training on augumented user 137254 41/50 current_auc = 1.0
User 137254 AUC after training: 1.0
User 137254 does not improve AUC. Reverting changes.
Training on augumented user 3131 42/50 current_auc = 1.0
User 3131 AUC after training: 1.0
User 3131 does not improve AUC. Reverting changes.
Training on augumented user 76918 43/50 current_auc = 1.0
User 76918 AUC after training: 1.0
User 76918 does not improve AUC. Reverting changes.
Training on augumented user 51753 44/50 current_auc = 1.0
User 51753 AUC after training: 1.0
User 51753 does not improve AUC. Reverting changes.
Training on augumented user 91600 45/50 current_auc = 1.0
User 91600 AUC after training: 1.0
User 91600 does not improve AUC. Reverting changes.
Training on augumented user 80655 46/50 current_auc = 1.0
User 80655 AUC after training: 1.0
User 80655 does not improve AUC. Reverting changes.
Training on augumented user 43769 47/50 current_auc = 1.0
User 43769 AUC after training: 1.0
User 43769 does not improve AUC. Reverting changes.
Training on augumented user 121248 48/50 current_auc = 1.0
User 121248 AUC after training: 1.0
User 121248 does not improve AUC. Reverting changes.
Training on augumented user 72289 49/50 current_auc = 1.0
User 72289 AUC after training: 1.0
User 72289 does not improve AUC. Reverting changes.
[2024-12-02 18:29:28.025587] start test user 29341 88/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:28.434169] start test user 29341 88/568 recall augumented users by random, augumented_users = [132104, 27343, 21983, 129123, 14108, 35798, 88409, 134193, 10656, 63116, 122285, 37638, 76289, 103707, 38603, 88919, 83947, 4105, 65998, 57008, 80728, 76898, 98857, 53056, 97581, 81632, 23455, 75636, 55086, 24271, 25091, 86161, 99675, 72849, 4960, 34241, 67204, 85772, 122761, 108520, 63871, 107613, 134071, 83580, 80620, 132778, 57452, 45128, 71533, 6768]
[2024-12-02 18:29:28.448917] user = 29341 Cloud 88/568
[2024-12-02 18:29:28.458997] user = 29341 Local 88/568
[2024-12-02 18:29:28.503710] user = 29341 Local+ 88/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:31.002749] user = 29341 MPDA- 88/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6507936507936508
Training on augumented user 132104 0/50 current_auc = 0.6507936507936508
User 132104 AUC after training: 0.6507936507936508
User 132104 does not improve AUC. Reverting changes.
Training on augumented user 27343 1/50 current_auc = 0.6507936507936508
User 27343 AUC after training: 0.6507936507936508
User 27343 does not improve AUC. Reverting changes.
Training on augumented user 21983 2/50 current_auc = 0.6507936507936508
User 21983 AUC after training: 0.6507936507936508
User 21983 does not improve AUC. Reverting changes.
Training on augumented user 129123 3/50 current_auc = 0.6507936507936508
User 129123 AUC after training: 0.6507936507936508
User 129123 does not improve AUC. Reverting changes.
Training on augumented user 14108 4/50 current_auc = 0.6507936507936508
User 14108 AUC after training: 0.6507936507936508
User 14108 does not improve AUC. Reverting changes.
Training on augumented user 35798 5/50 current_auc = 0.6507936507936508
User 35798 AUC after training: 0.6507936507936508
User 35798 does not improve AUC. Reverting changes.
Training on augumented user 88409 6/50 current_auc = 0.6507936507936508
User 88409 AUC after training: 0.653968253968254
User 88409 improves AUC. Keeping the model.
Training on augumented user 134193 7/50 current_auc = 0.653968253968254
User 134193 AUC after training: 0.653968253968254
User 134193 does not improve AUC. Reverting changes.
Training on augumented user 10656 8/50 current_auc = 0.653968253968254
User 10656 AUC after training: 0.6507936507936508
User 10656 does not improve AUC. Reverting changes.
Training on augumented user 63116 9/50 current_auc = 0.653968253968254
User 63116 AUC after training: 0.653968253968254
User 63116 does not improve AUC. Reverting changes.
Training on augumented user 122285 10/50 current_auc = 0.653968253968254
User 122285 AUC after training: 0.6507936507936508
User 122285 does not improve AUC. Reverting changes.
Training on augumented user 37638 11/50 current_auc = 0.653968253968254
User 37638 AUC after training: 0.653968253968254
User 37638 does not improve AUC. Reverting changes.
Training on augumented user 76289 12/50 current_auc = 0.653968253968254
User 76289 AUC after training: 0.653968253968254
User 76289 does not improve AUC. Reverting changes.
Training on augumented user 103707 13/50 current_auc = 0.653968253968254
User 103707 AUC after training: 0.653968253968254
User 103707 does not improve AUC. Reverting changes.
Training on augumented user 38603 14/50 current_auc = 0.653968253968254
User 38603 AUC after training: 0.653968253968254
User 38603 does not improve AUC. Reverting changes.
Training on augumented user 88919 15/50 current_auc = 0.653968253968254
User 88919 AUC after training: 0.6507936507936508
User 88919 does not improve AUC. Reverting changes.
Training on augumented user 83947 16/50 current_auc = 0.653968253968254
User 83947 AUC after training: 0.6507936507936508
User 83947 does not improve AUC. Reverting changes.
Training on augumented user 4105 17/50 current_auc = 0.653968253968254
User 4105 AUC after training: 0.653968253968254
User 4105 does not improve AUC. Reverting changes.
Training on augumented user 65998 18/50 current_auc = 0.653968253968254
User 65998 AUC after training: 0.653968253968254
User 65998 does not improve AUC. Reverting changes.
Training on augumented user 57008 19/50 current_auc = 0.653968253968254
User 57008 AUC after training: 0.653968253968254
User 57008 does not improve AUC. Reverting changes.
Training on augumented user 80728 20/50 current_auc = 0.653968253968254
User 80728 AUC after training: 0.653968253968254
User 80728 does not improve AUC. Reverting changes.
Training on augumented user 76898 21/50 current_auc = 0.653968253968254
User 76898 AUC after training: 0.653968253968254
User 76898 does not improve AUC. Reverting changes.
Training on augumented user 98857 22/50 current_auc = 0.653968253968254
User 98857 AUC after training: 0.653968253968254
User 98857 does not improve AUC. Reverting changes.
Training on augumented user 53056 23/50 current_auc = 0.653968253968254
User 53056 AUC after training: 0.653968253968254
User 53056 does not improve AUC. Reverting changes.
Training on augumented user 97581 24/50 current_auc = 0.653968253968254
User 97581 AUC after training: 0.653968253968254
User 97581 does not improve AUC. Reverting changes.
Training on augumented user 81632 25/50 current_auc = 0.653968253968254
User 81632 AUC after training: 0.653968253968254
User 81632 does not improve AUC. Reverting changes.
Training on augumented user 23455 26/50 current_auc = 0.653968253968254
User 23455 AUC after training: 0.653968253968254
User 23455 does not improve AUC. Reverting changes.
Training on augumented user 75636 27/50 current_auc = 0.653968253968254
User 75636 AUC after training: 0.653968253968254
User 75636 does not improve AUC. Reverting changes.
Training on augumented user 55086 28/50 current_auc = 0.653968253968254
User 55086 AUC after training: 0.653968253968254
User 55086 does not improve AUC. Reverting changes.
Training on augumented user 24271 29/50 current_auc = 0.653968253968254
User 24271 AUC after training: 0.653968253968254
User 24271 does not improve AUC. Reverting changes.
Training on augumented user 25091 30/50 current_auc = 0.653968253968254
User 25091 AUC after training: 0.6507936507936508
User 25091 does not improve AUC. Reverting changes.
Training on augumented user 86161 31/50 current_auc = 0.653968253968254
User 86161 AUC after training: 0.653968253968254
User 86161 does not improve AUC. Reverting changes.
Training on augumented user 99675 32/50 current_auc = 0.653968253968254
User 99675 AUC after training: 0.653968253968254
User 99675 does not improve AUC. Reverting changes.
Training on augumented user 72849 33/50 current_auc = 0.653968253968254
User 72849 AUC after training: 0.653968253968254
User 72849 does not improve AUC. Reverting changes.
Training on augumented user 4960 34/50 current_auc = 0.653968253968254
User 4960 AUC after training: 0.653968253968254
User 4960 does not improve AUC. Reverting changes.
Training on augumented user 34241 35/50 current_auc = 0.653968253968254
User 34241 AUC after training: 0.653968253968254
User 34241 does not improve AUC. Reverting changes.
Training on augumented user 67204 36/50 current_auc = 0.653968253968254
User 67204 AUC after training: 0.653968253968254
User 67204 does not improve AUC. Reverting changes.
Training on augumented user 85772 37/50 current_auc = 0.653968253968254
User 85772 AUC after training: 0.6507936507936508
User 85772 does not improve AUC. Reverting changes.
Training on augumented user 122761 38/50 current_auc = 0.653968253968254
User 122761 AUC after training: 0.653968253968254
User 122761 does not improve AUC. Reverting changes.
Training on augumented user 108520 39/50 current_auc = 0.653968253968254
User 108520 AUC after training: 0.6507936507936508
User 108520 does not improve AUC. Reverting changes.
Training on augumented user 63871 40/50 current_auc = 0.653968253968254
User 63871 AUC after training: 0.653968253968254
User 63871 does not improve AUC. Reverting changes.
Training on augumented user 107613 41/50 current_auc = 0.653968253968254
User 107613 AUC after training: 0.653968253968254
User 107613 does not improve AUC. Reverting changes.
Training on augumented user 134071 42/50 current_auc = 0.653968253968254
User 134071 AUC after training: 0.653968253968254
User 134071 does not improve AUC. Reverting changes.
Training on augumented user 83580 43/50 current_auc = 0.653968253968254
User 83580 AUC after training: 0.6507936507936508
User 83580 does not improve AUC. Reverting changes.
Training on augumented user 80620 44/50 current_auc = 0.653968253968254
User 80620 AUC after training: 0.6507936507936508
User 80620 does not improve AUC. Reverting changes.
Training on augumented user 132778 45/50 current_auc = 0.653968253968254
User 132778 AUC after training: 0.653968253968254
User 132778 does not improve AUC. Reverting changes.
Training on augumented user 57452 46/50 current_auc = 0.653968253968254
User 57452 AUC after training: 0.6507936507936508
User 57452 does not improve AUC. Reverting changes.
Training on augumented user 45128 47/50 current_auc = 0.653968253968254
User 45128 AUC after training: 0.653968253968254
User 45128 does not improve AUC. Reverting changes.
Training on augumented user 71533 48/50 current_auc = 0.653968253968254
User 71533 AUC after training: 0.653968253968254
User 71533 does not improve AUC. Reverting changes.
Training on augumented user 6768 49/50 current_auc = 0.653968253968254
User 6768 AUC after training: 0.653968253968254
User 6768 does not improve AUC. Reverting changes.
[2024-12-02 18:29:59.685448] start test user 29464 89/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:00.407039] start test user 29464 89/568 recall augumented users by random, augumented_users = [101707, 102223, 80547, 3388, 87040, 137153, 100008, 110710, 108069, 13536, 80846, 95189, 78080, 77369, 73709, 6926, 116129, 70635, 93712, 50785, 82026, 137563, 138110, 120615, 18477, 9684, 9292, 880, 89750, 117426, 117938, 133751, 117635, 12660, 69349, 120442, 131954, 89146, 22900, 25282, 101856, 9344, 111189, 86726, 16767, 132126, 111570, 23186, 27669, 36970]
[2024-12-02 18:30:00.425454] user = 29464 Cloud 89/568
[2024-12-02 18:30:00.450158] user = 29464 Local 89/568
[2024-12-02 18:30:00.527248] user = 29464 Local+ 89/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:03.022824] user = 29464 MPDA- 89/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7574049513704686
Training on augumented user 101707 0/50 current_auc = 0.7574049513704686
User 101707 AUC after training: 0.7569628647214853
User 101707 does not improve AUC. Reverting changes.
Training on augumented user 102223 1/50 current_auc = 0.7574049513704686
User 102223 AUC after training: 0.7575154730327144
User 102223 improves AUC. Keeping the model.
Training on augumented user 80547 2/50 current_auc = 0.7575154730327144
User 80547 AUC after training: 0.7575154730327144
User 80547 does not improve AUC. Reverting changes.
Training on augumented user 3388 3/50 current_auc = 0.7575154730327144
User 3388 AUC after training: 0.7581786030061891
User 3388 improves AUC. Keeping the model.
Training on augumented user 87040 4/50 current_auc = 0.7581786030061891
User 87040 AUC after training: 0.7581786030061891
User 87040 does not improve AUC. Reverting changes.
Training on augumented user 137153 5/50 current_auc = 0.7581786030061891
User 137153 AUC after training: 0.7579575596816976
User 137153 does not improve AUC. Reverting changes.
Training on augumented user 100008 6/50 current_auc = 0.7581786030061891
User 100008 AUC after training: 0.7574049513704686
User 100008 does not improve AUC. Reverting changes.
Training on augumented user 110710 7/50 current_auc = 0.7581786030061891
User 110710 AUC after training: 0.7578470380194519
User 110710 does not improve AUC. Reverting changes.
Training on augumented user 108069 8/50 current_auc = 0.7581786030061891
User 108069 AUC after training: 0.7581786030061892
User 108069 improves AUC. Keeping the model.
Training on augumented user 13536 9/50 current_auc = 0.7581786030061892
User 13536 AUC after training: 0.7580680813439434
User 13536 does not improve AUC. Reverting changes.
Training on augumented user 80846 10/50 current_auc = 0.7581786030061892
User 80846 AUC after training: 0.7578470380194517
User 80846 does not improve AUC. Reverting changes.
Training on augumented user 95189 11/50 current_auc = 0.7581786030061892
User 95189 AUC after training: 0.7579575596816975
User 95189 does not improve AUC. Reverting changes.
Training on augumented user 78080 12/50 current_auc = 0.7581786030061892
User 78080 AUC after training: 0.7581786030061891
User 78080 does not improve AUC. Reverting changes.
Training on augumented user 77369 13/50 current_auc = 0.7581786030061892
User 77369 AUC after training: 0.7581786030061891
User 77369 does not improve AUC. Reverting changes.
Training on augumented user 73709 14/50 current_auc = 0.7581786030061892
User 73709 AUC after training: 0.7579575596816975
User 73709 does not improve AUC. Reverting changes.
Training on augumented user 6926 15/50 current_auc = 0.7581786030061892
User 6926 AUC after training: 0.7579575596816975
User 6926 does not improve AUC. Reverting changes.
Training on augumented user 116129 16/50 current_auc = 0.7581786030061892
User 116129 AUC after training: 0.7581786030061892
User 116129 does not improve AUC. Reverting changes.
Training on augumented user 70635 17/50 current_auc = 0.7581786030061892
User 70635 AUC after training: 0.7581786030061893
User 70635 improves AUC. Keeping the model.
Training on augumented user 93712 18/50 current_auc = 0.7581786030061893
User 93712 AUC after training: 0.7579575596816978
User 93712 does not improve AUC. Reverting changes.
Training on augumented user 50785 19/50 current_auc = 0.7581786030061893
User 50785 AUC after training: 0.7583996463306808
User 50785 improves AUC. Keeping the model.
Training on augumented user 82026 20/50 current_auc = 0.7583996463306808
User 82026 AUC after training: 0.7578470380194519
User 82026 does not improve AUC. Reverting changes.
Training on augumented user 137563 21/50 current_auc = 0.7583996463306808
User 137563 AUC after training: 0.7595048629531388
User 137563 improves AUC. Keeping the model.
Training on augumented user 138110 22/50 current_auc = 0.7595048629531388
User 138110 AUC after training: 0.7568523430592397
User 138110 does not improve AUC. Reverting changes.
Training on augumented user 120615 23/50 current_auc = 0.7595048629531388
User 120615 AUC after training: 0.7597259062776304
User 120615 improves AUC. Keeping the model.
Training on augumented user 18477 24/50 current_auc = 0.7597259062776304
User 18477 AUC after training: 0.7596153846153846
User 18477 does not improve AUC. Reverting changes.
Training on augumented user 9684 25/50 current_auc = 0.7597259062776304
User 9684 AUC after training: 0.7596153846153845
User 9684 does not improve AUC. Reverting changes.
Training on augumented user 9292 26/50 current_auc = 0.7597259062776304
User 9292 AUC after training: 0.7598364279398763
User 9292 improves AUC. Keeping the model.
Training on augumented user 880 27/50 current_auc = 0.7598364279398763
User 880 AUC after training: 0.759946949602122
User 880 improves AUC. Keeping the model.
Training on augumented user 89750 28/50 current_auc = 0.759946949602122
User 89750 AUC after training: 0.7597259062776304
User 89750 does not improve AUC. Reverting changes.
Training on augumented user 117426 29/50 current_auc = 0.759946949602122
User 117426 AUC after training: 0.7568523430592395
User 117426 does not improve AUC. Reverting changes.
Training on augumented user 117938 30/50 current_auc = 0.759946949602122
User 117938 AUC after training: 0.7579575596816976
User 117938 does not improve AUC. Reverting changes.
Training on augumented user 133751 31/50 current_auc = 0.759946949602122
User 133751 AUC after training: 0.7598364279398763
User 133751 does not improve AUC. Reverting changes.
Training on augumented user 117635 32/50 current_auc = 0.759946949602122
User 117635 AUC after training: 0.7593943412908929
User 117635 does not improve AUC. Reverting changes.
Training on augumented user 12660 33/50 current_auc = 0.759946949602122
User 12660 AUC after training: 0.759946949602122
User 12660 does not improve AUC. Reverting changes.
Training on augumented user 69349 34/50 current_auc = 0.759946949602122
User 69349 AUC after training: 0.7591732979664014
User 69349 does not improve AUC. Reverting changes.
Training on augumented user 120442 35/50 current_auc = 0.759946949602122
User 120442 AUC after training: 0.7591732979664014
User 120442 does not improve AUC. Reverting changes.
Training on augumented user 131954 36/50 current_auc = 0.759946949602122
User 131954 AUC after training: 0.759836427939876
User 131954 does not improve AUC. Reverting changes.
Training on augumented user 89146 37/50 current_auc = 0.759946949602122
User 89146 AUC after training: 0.7589522546419097
User 89146 does not improve AUC. Reverting changes.
Training on augumented user 22900 38/50 current_auc = 0.759946949602122
User 22900 AUC after training: 0.7586759504862953
User 22900 does not improve AUC. Reverting changes.
Training on augumented user 25282 39/50 current_auc = 0.759946949602122
User 25282 AUC after training: 0.7598364279398762
User 25282 does not improve AUC. Reverting changes.
Training on augumented user 101856 40/50 current_auc = 0.759946949602122
User 101856 AUC after training: 0.7596153846153847
User 101856 does not improve AUC. Reverting changes.
Training on augumented user 9344 41/50 current_auc = 0.759946949602122
User 9344 AUC after training: 0.759394341290893
User 9344 does not improve AUC. Reverting changes.
Training on augumented user 111189 42/50 current_auc = 0.759946949602122
User 111189 AUC after training: 0.7593943412908929
User 111189 does not improve AUC. Reverting changes.
Training on augumented user 86726 43/50 current_auc = 0.759946949602122
User 86726 AUC after training: 0.7597259062776304
User 86726 does not improve AUC. Reverting changes.
Training on augumented user 16767 44/50 current_auc = 0.759946949602122
User 16767 AUC after training: 0.757736516357206
User 16767 does not improve AUC. Reverting changes.
Training on augumented user 132126 45/50 current_auc = 0.759946949602122
User 132126 AUC after training: 0.7586759504862953
User 132126 does not improve AUC. Reverting changes.
Training on augumented user 111570 46/50 current_auc = 0.759946949602122
User 111570 AUC after training: 0.7591732979664014
User 111570 does not improve AUC. Reverting changes.
Training on augumented user 23186 47/50 current_auc = 0.759946949602122
User 23186 AUC after training: 0.7581233421750664
User 23186 does not improve AUC. Reverting changes.
Training on augumented user 27669 48/50 current_auc = 0.759946949602122
User 27669 AUC after training: 0.7589522546419097
User 27669 does not improve AUC. Reverting changes.
Training on augumented user 36970 49/50 current_auc = 0.759946949602122
User 36970 AUC after training: 0.7592838196286472
User 36970 does not improve AUC. Reverting changes.
[2024-12-02 18:30:35.343760] start test user 29499 90/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:36.116093] start test user 29499 90/568 recall augumented users by random, augumented_users = [66414, 63775, 21575, 132605, 40822, 96490, 136060, 18548, 17440, 108892, 31705, 53517, 55444, 57708, 115767, 45254, 112940, 54443, 73295, 78980, 66311, 96004, 77539, 68860, 24279, 23654, 52521, 69201, 44450, 102906, 29212, 66303, 43333, 39762, 136904, 105757, 62418, 89467, 7399, 72012, 84470, 82373, 114017, 127453, 129261, 4514, 67422, 114831, 79591, 87642]
[2024-12-02 18:30:36.231584] user = 29499 Cloud 90/568
[2024-12-02 18:30:36.282433] user = 29499 Local 90/568
[2024-12-02 18:30:36.803727] user = 29499 Local+ 90/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:39.756682] user = 29499 MPDA- 90/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.16666666666666663
Training on augumented user 66414 0/50 current_auc = 0.16666666666666663
User 66414 AUC after training: 0.16666666666666663
User 66414 does not improve AUC. Reverting changes.
Training on augumented user 63775 1/50 current_auc = 0.16666666666666663
User 63775 AUC after training: 0.16666666666666663
User 63775 does not improve AUC. Reverting changes.
Training on augumented user 21575 2/50 current_auc = 0.16666666666666663
User 21575 AUC after training: 0.16666666666666663
User 21575 does not improve AUC. Reverting changes.
Training on augumented user 132605 3/50 current_auc = 0.16666666666666663
User 132605 AUC after training: 0.16666666666666663
User 132605 does not improve AUC. Reverting changes.
Training on augumented user 40822 4/50 current_auc = 0.16666666666666663
User 40822 AUC after training: 0.16666666666666663
User 40822 does not improve AUC. Reverting changes.
Training on augumented user 96490 5/50 current_auc = 0.16666666666666663
User 96490 AUC after training: 0.16666666666666663
User 96490 does not improve AUC. Reverting changes.
Training on augumented user 136060 6/50 current_auc = 0.16666666666666663
User 136060 AUC after training: 0.16666666666666663
User 136060 does not improve AUC. Reverting changes.
Training on augumented user 18548 7/50 current_auc = 0.16666666666666663
User 18548 AUC after training: 0.16666666666666663
User 18548 does not improve AUC. Reverting changes.
Training on augumented user 17440 8/50 current_auc = 0.16666666666666663
User 17440 AUC after training: 0.16666666666666663
User 17440 does not improve AUC. Reverting changes.
Training on augumented user 108892 9/50 current_auc = 0.16666666666666663
User 108892 AUC after training: 0.16666666666666663
User 108892 does not improve AUC. Reverting changes.
Training on augumented user 31705 10/50 current_auc = 0.16666666666666663
User 31705 AUC after training: 0.16666666666666663
User 31705 does not improve AUC. Reverting changes.
Training on augumented user 53517 11/50 current_auc = 0.16666666666666663
User 53517 AUC after training: 0.16666666666666663
User 53517 does not improve AUC. Reverting changes.
Training on augumented user 55444 12/50 current_auc = 0.16666666666666663
User 55444 AUC after training: 0.16666666666666663
User 55444 does not improve AUC. Reverting changes.
Training on augumented user 57708 13/50 current_auc = 0.16666666666666663
User 57708 AUC after training: 0.16666666666666663
User 57708 does not improve AUC. Reverting changes.
Training on augumented user 115767 14/50 current_auc = 0.16666666666666663
User 115767 AUC after training: 0.16666666666666663
User 115767 does not improve AUC. Reverting changes.
Training on augumented user 45254 15/50 current_auc = 0.16666666666666663
User 45254 AUC after training: 0.16666666666666663
User 45254 does not improve AUC. Reverting changes.
Training on augumented user 112940 16/50 current_auc = 0.16666666666666663
User 112940 AUC after training: 0.16666666666666663
User 112940 does not improve AUC. Reverting changes.
Training on augumented user 54443 17/50 current_auc = 0.16666666666666663
User 54443 AUC after training: 0.0
User 54443 does not improve AUC. Reverting changes.
Training on augumented user 73295 18/50 current_auc = 0.16666666666666663
User 73295 AUC after training: 0.16666666666666663
User 73295 does not improve AUC. Reverting changes.
Training on augumented user 78980 19/50 current_auc = 0.16666666666666663
User 78980 AUC after training: 0.16666666666666663
User 78980 does not improve AUC. Reverting changes.
Training on augumented user 66311 20/50 current_auc = 0.16666666666666663
User 66311 AUC after training: 0.16666666666666663
User 66311 does not improve AUC. Reverting changes.
Training on augumented user 96004 21/50 current_auc = 0.16666666666666663
User 96004 AUC after training: 0.16666666666666663
User 96004 does not improve AUC. Reverting changes.
Training on augumented user 77539 22/50 current_auc = 0.16666666666666663
User 77539 AUC after training: 0.16666666666666663
User 77539 does not improve AUC. Reverting changes.
Training on augumented user 68860 23/50 current_auc = 0.16666666666666663
User 68860 AUC after training: 0.16666666666666663
User 68860 does not improve AUC. Reverting changes.
Training on augumented user 24279 24/50 current_auc = 0.16666666666666663
User 24279 AUC after training: 0.16666666666666663
User 24279 does not improve AUC. Reverting changes.
Training on augumented user 23654 25/50 current_auc = 0.16666666666666663
User 23654 AUC after training: 0.16666666666666663
User 23654 does not improve AUC. Reverting changes.
Training on augumented user 52521 26/50 current_auc = 0.16666666666666663
User 52521 AUC after training: 0.0
User 52521 does not improve AUC. Reverting changes.
Training on augumented user 69201 27/50 current_auc = 0.16666666666666663
User 69201 AUC after training: 0.16666666666666663
User 69201 does not improve AUC. Reverting changes.
Training on augumented user 44450 28/50 current_auc = 0.16666666666666663
User 44450 AUC after training: 0.16666666666666663
User 44450 does not improve AUC. Reverting changes.
Training on augumented user 102906 29/50 current_auc = 0.16666666666666663
User 102906 AUC after training: 0.16666666666666663
User 102906 does not improve AUC. Reverting changes.
Training on augumented user 29212 30/50 current_auc = 0.16666666666666663
User 29212 AUC after training: 0.16666666666666663
User 29212 does not improve AUC. Reverting changes.
Training on augumented user 66303 31/50 current_auc = 0.16666666666666663
User 66303 AUC after training: 0.16666666666666663
User 66303 does not improve AUC. Reverting changes.
Training on augumented user 43333 32/50 current_auc = 0.16666666666666663
User 43333 AUC after training: 0.16666666666666663
User 43333 does not improve AUC. Reverting changes.
Training on augumented user 39762 33/50 current_auc = 0.16666666666666663
User 39762 AUC after training: 0.16666666666666663
User 39762 does not improve AUC. Reverting changes.
Training on augumented user 136904 34/50 current_auc = 0.16666666666666663
User 136904 AUC after training: 0.16666666666666663
User 136904 does not improve AUC. Reverting changes.
Training on augumented user 105757 35/50 current_auc = 0.16666666666666663
User 105757 AUC after training: 0.16666666666666663
User 105757 does not improve AUC. Reverting changes.
Training on augumented user 62418 36/50 current_auc = 0.16666666666666663
User 62418 AUC after training: 0.16666666666666663
User 62418 does not improve AUC. Reverting changes.
Training on augumented user 89467 37/50 current_auc = 0.16666666666666663
User 89467 AUC after training: 0.16666666666666663
User 89467 does not improve AUC. Reverting changes.
Training on augumented user 7399 38/50 current_auc = 0.16666666666666663
User 7399 AUC after training: 0.16666666666666663
User 7399 does not improve AUC. Reverting changes.
Training on augumented user 72012 39/50 current_auc = 0.16666666666666663
User 72012 AUC after training: 0.16666666666666663
User 72012 does not improve AUC. Reverting changes.
Training on augumented user 84470 40/50 current_auc = 0.16666666666666663
User 84470 AUC after training: 0.16666666666666663
User 84470 does not improve AUC. Reverting changes.
Training on augumented user 82373 41/50 current_auc = 0.16666666666666663
User 82373 AUC after training: 0.16666666666666663
User 82373 does not improve AUC. Reverting changes.
Training on augumented user 114017 42/50 current_auc = 0.16666666666666663
User 114017 AUC after training: 0.16666666666666663
User 114017 does not improve AUC. Reverting changes.
Training on augumented user 127453 43/50 current_auc = 0.16666666666666663
User 127453 AUC after training: 0.16666666666666663
User 127453 does not improve AUC. Reverting changes.
Training on augumented user 129261 44/50 current_auc = 0.16666666666666663
User 129261 AUC after training: 0.16666666666666663
User 129261 does not improve AUC. Reverting changes.
Training on augumented user 4514 45/50 current_auc = 0.16666666666666663
User 4514 AUC after training: 0.16666666666666663
User 4514 does not improve AUC. Reverting changes.
Training on augumented user 67422 46/50 current_auc = 0.16666666666666663
User 67422 AUC after training: 0.16666666666666663
User 67422 does not improve AUC. Reverting changes.
Training on augumented user 114831 47/50 current_auc = 0.16666666666666663
User 114831 AUC after training: 0.16666666666666663
User 114831 does not improve AUC. Reverting changes.
Training on augumented user 79591 48/50 current_auc = 0.16666666666666663
User 79591 AUC after training: 0.16666666666666663
User 79591 does not improve AUC. Reverting changes.
Training on augumented user 87642 49/50 current_auc = 0.16666666666666663
User 87642 AUC after training: 0.16666666666666663
User 87642 does not improve AUC. Reverting changes.
[2024-12-02 18:31:13.017732] start test user 29534 91/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:13.506806] start test user 29534 91/568 recall augumented users by random, augumented_users = [100051, 41309, 20594, 108289, 56740, 64479, 110284, 133930, 8022, 40238, 116289, 444, 24869, 8814, 50488, 45852, 55757, 89944, 59255, 68578, 58422, 32617, 7914, 109752, 107966, 133192, 126863, 51636, 70268, 62934, 44824, 22589, 125048, 15584, 126079, 104512, 48027, 16071, 33093, 22353, 138086, 122231, 26371, 35188, 57496, 36639, 101007, 4444, 53158, 56277]
[2024-12-02 18:31:13.523284] user = 29534 Cloud 91/568
[2024-12-02 18:31:13.534189] user = 29534 Local 91/568
[2024-12-02 18:31:13.561535] user = 29534 Local+ 91/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:15.141242] user = 29534 MPDA- 91/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 100051 0/50 current_auc = 0.5
User 100051 AUC after training: 0.5
User 100051 does not improve AUC. Reverting changes.
Training on augumented user 41309 1/50 current_auc = 0.5
User 41309 AUC after training: 0.5
User 41309 does not improve AUC. Reverting changes.
Training on augumented user 20594 2/50 current_auc = 0.5
User 20594 AUC after training: 0.5
User 20594 does not improve AUC. Reverting changes.
Training on augumented user 108289 3/50 current_auc = 0.5
User 108289 AUC after training: 0.5
User 108289 does not improve AUC. Reverting changes.
Training on augumented user 56740 4/50 current_auc = 0.5
User 56740 AUC after training: 0.5
User 56740 does not improve AUC. Reverting changes.
Training on augumented user 64479 5/50 current_auc = 0.5
User 64479 AUC after training: 0.5
User 64479 does not improve AUC. Reverting changes.
Training on augumented user 110284 6/50 current_auc = 0.5
User 110284 AUC after training: 0.5
User 110284 does not improve AUC. Reverting changes.
Training on augumented user 133930 7/50 current_auc = 0.5
User 133930 AUC after training: 0.5
User 133930 does not improve AUC. Reverting changes.
Training on augumented user 8022 8/50 current_auc = 0.5
User 8022 AUC after training: 0.5
User 8022 does not improve AUC. Reverting changes.
Training on augumented user 40238 9/50 current_auc = 0.5
User 40238 AUC after training: 0.5
User 40238 does not improve AUC. Reverting changes.
Training on augumented user 116289 10/50 current_auc = 0.5
User 116289 AUC after training: 0.5
User 116289 does not improve AUC. Reverting changes.
Training on augumented user 444 11/50 current_auc = 0.5
User 444 AUC after training: 0.5
User 444 does not improve AUC. Reverting changes.
Training on augumented user 24869 12/50 current_auc = 0.5
User 24869 AUC after training: 0.5
User 24869 does not improve AUC. Reverting changes.
Training on augumented user 8814 13/50 current_auc = 0.5
User 8814 AUC after training: 0.5
User 8814 does not improve AUC. Reverting changes.
Training on augumented user 50488 14/50 current_auc = 0.5
User 50488 AUC after training: 0.5
User 50488 does not improve AUC. Reverting changes.
Training on augumented user 45852 15/50 current_auc = 0.5
User 45852 AUC after training: 0.5
User 45852 does not improve AUC. Reverting changes.
Training on augumented user 55757 16/50 current_auc = 0.5
User 55757 AUC after training: 0.5
User 55757 does not improve AUC. Reverting changes.
Training on augumented user 89944 17/50 current_auc = 0.5
User 89944 AUC after training: 0.5
User 89944 does not improve AUC. Reverting changes.
Training on augumented user 59255 18/50 current_auc = 0.5
User 59255 AUC after training: 0.5
User 59255 does not improve AUC. Reverting changes.
Training on augumented user 68578 19/50 current_auc = 0.5
User 68578 AUC after training: 0.5
User 68578 does not improve AUC. Reverting changes.
Training on augumented user 58422 20/50 current_auc = 0.5
User 58422 AUC after training: 0.5
User 58422 does not improve AUC. Reverting changes.
Training on augumented user 32617 21/50 current_auc = 0.5
User 32617 AUC after training: 0.5
User 32617 does not improve AUC. Reverting changes.
Training on augumented user 7914 22/50 current_auc = 0.5
User 7914 AUC after training: 0.5
User 7914 does not improve AUC. Reverting changes.
Training on augumented user 109752 23/50 current_auc = 0.5
User 109752 AUC after training: 0.5
User 109752 does not improve AUC. Reverting changes.
Training on augumented user 107966 24/50 current_auc = 0.5
User 107966 AUC after training: 0.5
User 107966 does not improve AUC. Reverting changes.
Training on augumented user 133192 25/50 current_auc = 0.5
User 133192 AUC after training: 0.5
User 133192 does not improve AUC. Reverting changes.
Training on augumented user 126863 26/50 current_auc = 0.5
User 126863 AUC after training: 0.5
User 126863 does not improve AUC. Reverting changes.
Training on augumented user 51636 27/50 current_auc = 0.5
User 51636 AUC after training: 0.5
User 51636 does not improve AUC. Reverting changes.
Training on augumented user 70268 28/50 current_auc = 0.5
User 70268 AUC after training: 0.5
User 70268 does not improve AUC. Reverting changes.
Training on augumented user 62934 29/50 current_auc = 0.5
User 62934 AUC after training: 0.5
User 62934 does not improve AUC. Reverting changes.
Training on augumented user 44824 30/50 current_auc = 0.5
User 44824 AUC after training: 0.5
User 44824 does not improve AUC. Reverting changes.
Training on augumented user 22589 31/50 current_auc = 0.5
User 22589 AUC after training: 0.5
User 22589 does not improve AUC. Reverting changes.
Training on augumented user 125048 32/50 current_auc = 0.5
User 125048 AUC after training: 0.5
User 125048 does not improve AUC. Reverting changes.
Training on augumented user 15584 33/50 current_auc = 0.5
User 15584 AUC after training: 0.5
User 15584 does not improve AUC. Reverting changes.
Training on augumented user 126079 34/50 current_auc = 0.5
User 126079 AUC after training: 0.5
User 126079 does not improve AUC. Reverting changes.
Training on augumented user 104512 35/50 current_auc = 0.5
User 104512 AUC after training: 0.5
User 104512 does not improve AUC. Reverting changes.
Training on augumented user 48027 36/50 current_auc = 0.5
User 48027 AUC after training: 0.5
User 48027 does not improve AUC. Reverting changes.
Training on augumented user 16071 37/50 current_auc = 0.5
User 16071 AUC after training: 0.5
User 16071 does not improve AUC. Reverting changes.
Training on augumented user 33093 38/50 current_auc = 0.5
User 33093 AUC after training: 0.5
User 33093 does not improve AUC. Reverting changes.
Training on augumented user 22353 39/50 current_auc = 0.5
User 22353 AUC after training: 0.5
User 22353 does not improve AUC. Reverting changes.
Training on augumented user 138086 40/50 current_auc = 0.5
User 138086 AUC after training: 0.5
User 138086 does not improve AUC. Reverting changes.
Training on augumented user 122231 41/50 current_auc = 0.5
User 122231 AUC after training: 0.5
User 122231 does not improve AUC. Reverting changes.
Training on augumented user 26371 42/50 current_auc = 0.5
User 26371 AUC after training: 0.5
User 26371 does not improve AUC. Reverting changes.
Training on augumented user 35188 43/50 current_auc = 0.5
User 35188 AUC after training: 0.5
User 35188 does not improve AUC. Reverting changes.
Training on augumented user 57496 44/50 current_auc = 0.5
User 57496 AUC after training: 0.5
User 57496 does not improve AUC. Reverting changes.
Training on augumented user 36639 45/50 current_auc = 0.5
User 36639 AUC after training: 0.5
User 36639 does not improve AUC. Reverting changes.
Training on augumented user 101007 46/50 current_auc = 0.5
User 101007 AUC after training: 0.5
User 101007 does not improve AUC. Reverting changes.
Training on augumented user 4444 47/50 current_auc = 0.5
User 4444 AUC after training: 0.5
User 4444 does not improve AUC. Reverting changes.
Training on augumented user 53158 48/50 current_auc = 0.5
User 53158 AUC after training: 0.5
User 53158 does not improve AUC. Reverting changes.
Training on augumented user 56277 49/50 current_auc = 0.5
User 56277 AUC after training: 0.5
User 56277 does not improve AUC. Reverting changes.
[2024-12-02 18:31:50.111885] start test user 29549 92/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:50.988662] start test user 29549 92/568 recall augumented users by random, augumented_users = [111532, 72487, 26403, 120001, 75398, 63048, 13359, 104487, 105633, 71830, 65688, 95227, 40812, 123497, 119725, 122840, 101737, 128326, 28318, 68370, 46820, 136811, 1109, 35118, 80552, 85419, 70253, 96004, 39087, 91042, 70874, 105390, 56692, 52835, 53611, 19947, 28889, 49882, 57328, 114416, 117542, 55979, 66761, 83724, 50916, 74863, 93661, 1356, 14266, 93514]
[2024-12-02 18:31:51.004710] user = 29549 Cloud 92/568
[2024-12-02 18:31:51.082726] user = 29549 Local 92/568
[2024-12-02 18:31:51.209045] user = 29549 Local+ 92/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:53.796438] user = 29549 MPDA- 92/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6293285768887756
Training on augumented user 111532 0/50 current_auc = 0.6293285768887756
User 111532 AUC after training: 0.6294050197477387
User 111532 improves AUC. Keeping the model.
Training on augumented user 72487 1/50 current_auc = 0.6294050197477387
User 72487 AUC after training: 0.6292011721238374
User 72487 does not improve AUC. Reverting changes.
Training on augumented user 26403 2/50 current_auc = 0.6294050197477387
User 26403 AUC after training: 0.629659829277615
User 26403 improves AUC. Keeping the model.
Training on augumented user 120001 3/50 current_auc = 0.629659829277615
User 120001 AUC after training: 0.6298636769015161
User 120001 improves AUC. Keeping the model.
Training on augumented user 75398 4/50 current_auc = 0.6298636769015161
User 75398 AUC after training: 0.6299656007134667
User 75398 improves AUC. Keeping the model.
Training on augumented user 63048 5/50 current_auc = 0.6299656007134667
User 63048 AUC after training: 0.6300420435724297
User 63048 improves AUC. Keeping the model.
Training on augumented user 13359 6/50 current_auc = 0.6300420435724297
User 13359 AUC after training: 0.6301184864313925
User 13359 improves AUC. Keeping the model.
Training on augumented user 104487 7/50 current_auc = 0.6301184864313925
User 104487 AUC after training: 0.6301694483373678
User 104487 improves AUC. Keeping the model.
Training on augumented user 105633 8/50 current_auc = 0.6301694483373678
User 105633 AUC after training: 0.6295324245126768
User 105633 does not improve AUC. Reverting changes.
Training on augumented user 71830 9/50 current_auc = 0.6301694483373678
User 71830 AUC after training: 0.6300675245254173
User 71830 does not improve AUC. Reverting changes.
Training on augumented user 65688 10/50 current_auc = 0.6301694483373678
User 65688 AUC after training: 0.6293795387947508
User 65688 does not improve AUC. Reverting changes.
Training on augumented user 95227 11/50 current_auc = 0.6301694483373678
User 95227 AUC after training: 0.6300930054784049
User 95227 does not improve AUC. Reverting changes.
Training on augumented user 40812 12/50 current_auc = 0.6301694483373678
User 40812 AUC after training: 0.6301694483373678
User 40812 does not improve AUC. Reverting changes.
Training on augumented user 123497 13/50 current_auc = 0.6301694483373678
User 123497 AUC after training: 0.6302713721493185
User 123497 improves AUC. Keeping the model.
Training on augumented user 119725 14/50 current_auc = 0.6302713721493185
User 119725 AUC after training: 0.6304497388202319
User 119725 improves AUC. Keeping the model.
Training on augumented user 122840 15/50 current_auc = 0.6304497388202319
User 122840 AUC after training: 0.6302968531023061
User 122840 does not improve AUC. Reverting changes.
Training on augumented user 101737 16/50 current_auc = 0.6304497388202319
User 101737 AUC after training: 0.6304752197732195
User 101737 improves AUC. Keeping the model.
Training on augumented user 128326 17/50 current_auc = 0.6304752197732195
User 128326 AUC after training: 0.6296343483246274
User 128326 does not improve AUC. Reverting changes.
Training on augumented user 28318 18/50 current_auc = 0.6304752197732195
User 28318 AUC after training: 0.6297107911835903
User 28318 does not improve AUC. Reverting changes.
Training on augumented user 68370 19/50 current_auc = 0.6304752197732195
User 68370 AUC after training: 0.630373295961269
User 68370 does not improve AUC. Reverting changes.
Training on augumented user 46820 20/50 current_auc = 0.6304752197732195
User 46820 AUC after training: 0.6306281054911453
User 46820 improves AUC. Keeping the model.
Training on augumented user 136811 21/50 current_auc = 0.6306281054911453
User 136811 AUC after training: 0.6308829150210218
User 136811 improves AUC. Keeping the model.
Training on augumented user 1109 22/50 current_auc = 0.6308829150210218
User 1109 AUC after training: 0.6308319531150466
User 1109 does not improve AUC. Reverting changes.
Training on augumented user 35118 23/50 current_auc = 0.6308829150210218
User 35118 AUC after training: 0.6310612816919352
User 35118 improves AUC. Keeping the model.
Training on augumented user 80552 24/50 current_auc = 0.6310612816919352
User 80552 AUC after training: 0.6309593578799848
User 80552 does not improve AUC. Reverting changes.
Training on augumented user 85419 25/50 current_auc = 0.6310612816919352
User 85419 AUC after training: 0.6306281054911453
User 85419 does not improve AUC. Reverting changes.
Training on augumented user 70253 26/50 current_auc = 0.6310612816919352
User 70253 AUC after training: 0.6310103197859601
User 70253 does not improve AUC. Reverting changes.
Training on augumented user 96004 27/50 current_auc = 0.6310612816919352
User 96004 AUC after training: 0.6311886864568735
User 96004 improves AUC. Keeping the model.
Training on augumented user 39087 28/50 current_auc = 0.6311886864568735
User 39087 AUC after training: 0.6308829150210218
User 39087 does not improve AUC. Reverting changes.
Training on augumented user 91042 29/50 current_auc = 0.6311886864568735
User 91042 AUC after training: 0.6311122435979106
User 91042 does not improve AUC. Reverting changes.
Training on augumented user 70874 30/50 current_auc = 0.6311886864568735
User 70874 AUC after training: 0.6301949292903554
User 70874 does not improve AUC. Reverting changes.
Training on augumented user 105390 31/50 current_auc = 0.6311886864568735
User 105390 AUC after training: 0.6310867626449228
User 105390 does not improve AUC. Reverting changes.
Training on augumented user 56692 32/50 current_auc = 0.6311886864568735
User 56692 AUC after training: 0.631290610268824
User 56692 improves AUC. Keeping the model.
Training on augumented user 52835 33/50 current_auc = 0.631290610268824
User 52835 AUC after training: 0.6314689769397375
User 52835 improves AUC. Keeping the model.
Training on augumented user 53611 34/50 current_auc = 0.6314689769397375
User 53611 AUC after training: 0.631367053127787
User 53611 does not improve AUC. Reverting changes.
Training on augumented user 19947 35/50 current_auc = 0.6314689769397375
User 19947 AUC after training: 0.6316473436106511
User 19947 improves AUC. Keeping the model.
Training on augumented user 28889 36/50 current_auc = 0.6316473436106511
User 28889 AUC after training: 0.6309338769269971
User 28889 does not improve AUC. Reverting changes.
Training on augumented user 49882 37/50 current_auc = 0.6316473436106511
User 49882 AUC after training: 0.63101031978596
User 49882 does not improve AUC. Reverting changes.
Training on augumented user 57328 38/50 current_auc = 0.6316473436106511
User 57328 AUC after training: 0.6314180150337624
User 57328 does not improve AUC. Reverting changes.
Training on augumented user 114416 39/50 current_auc = 0.6316473436106511
User 114416 AUC after training: 0.6316218626576634
User 114416 does not improve AUC. Reverting changes.
Training on augumented user 117542 40/50 current_auc = 0.6316473436106511
User 117542 AUC after training: 0.6314434959867501
User 117542 does not improve AUC. Reverting changes.
Training on augumented user 55979 41/50 current_auc = 0.6316473436106511
User 55979 AUC after training: 0.6312906102688242
User 55979 does not improve AUC. Reverting changes.
Training on augumented user 66761 42/50 current_auc = 0.6316473436106511
User 66761 AUC after training: 0.6311377245508982
User 66761 does not improve AUC. Reverting changes.
Training on augumented user 83724 43/50 current_auc = 0.6316473436106511
User 83724 AUC after training: 0.6315454197987005
User 83724 does not improve AUC. Reverting changes.
Training on augumented user 50916 44/50 current_auc = 0.6316473436106511
User 50916 AUC after training: 0.6317492674226017
User 50916 improves AUC. Keeping the model.
Training on augumented user 74863 45/50 current_auc = 0.6317492674226017
User 74863 AUC after training: 0.6313925340807747
User 74863 does not improve AUC. Reverting changes.
Training on augumented user 93661 46/50 current_auc = 0.6317492674226017
User 93661 AUC after training: 0.6315963817046758
User 93661 does not improve AUC. Reverting changes.
Training on augumented user 1356 47/50 current_auc = 0.6317492674226017
User 1356 AUC after training: 0.6316728245636387
User 1356 does not improve AUC. Reverting changes.
Training on augumented user 14266 48/50 current_auc = 0.6317492674226017
User 14266 AUC after training: 0.6319021531405276
User 14266 improves AUC. Keeping the model.
Training on augumented user 93514 49/50 current_auc = 0.6319021531405276
User 93514 AUC after training: 0.6321824436233915
User 93514 improves AUC. Keeping the model.
[2024-12-02 18:32:25.022692] start test user 29557 93/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:25.508530] start test user 29557 93/568 recall augumented users by random, augumented_users = [105389, 77364, 103626, 43340, 51283, 104372, 98374, 32553, 13967, 73632, 93610, 105030, 107270, 123241, 88777, 92027, 86028, 110114, 26120, 4121, 93421, 122271, 82457, 100620, 115991, 70988, 75280, 38032, 120892, 32862, 17004, 130144, 106311, 84151, 83365, 50351, 8066, 126580, 109722, 66346, 27465, 81290, 4995, 83548, 9778, 15132, 136220, 53264, 45980, 58953]
[2024-12-02 18:32:25.524405] user = 29557 Cloud 93/568
[2024-12-02 18:32:25.561006] user = 29557 Local 93/568
[2024-12-02 18:32:25.618588] user = 29557 Local+ 93/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:27.788735] user = 29557 MPDA- 93/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6756697408871322
Training on augumented user 105389 0/50 current_auc = 0.6756697408871322
User 105389 AUC after training: 0.6765480895915679
User 105389 improves AUC. Keeping the model.
Training on augumented user 77364 1/50 current_auc = 0.6765480895915679
User 77364 AUC after training: 0.6769872639437857
User 77364 improves AUC. Keeping the model.
Training on augumented user 103626 2/50 current_auc = 0.6769872639437857
User 103626 AUC after training: 0.6769872639437857
User 103626 does not improve AUC. Reverting changes.
Training on augumented user 43340 3/50 current_auc = 0.6769872639437857
User 43340 AUC after training: 0.6772068511198945
User 43340 improves AUC. Keeping the model.
Training on augumented user 51283 4/50 current_auc = 0.6772068511198945
User 51283 AUC after training: 0.6774264382960036
User 51283 improves AUC. Keeping the model.
Training on augumented user 104372 5/50 current_auc = 0.6774264382960036
User 104372 AUC after training: 0.6780851998243302
User 104372 improves AUC. Keeping the model.
Training on augumented user 98374 6/50 current_auc = 0.6780851998243302
User 98374 AUC after training: 0.6774264382960036
User 98374 does not improve AUC. Reverting changes.
Training on augumented user 32553 7/50 current_auc = 0.6780851998243302
User 32553 AUC after training: 0.6768774703557312
User 32553 does not improve AUC. Reverting changes.
Training on augumented user 13967 8/50 current_auc = 0.6780851998243302
User 13967 AUC after training: 0.6778656126482214
User 13967 does not improve AUC. Reverting changes.
Training on augumented user 73632 9/50 current_auc = 0.6780851998243302
User 73632 AUC after training: 0.6776460254721124
User 73632 does not improve AUC. Reverting changes.
Training on augumented user 93610 10/50 current_auc = 0.6780851998243302
User 93610 AUC after training: 0.6780851998243302
User 93610 does not improve AUC. Reverting changes.
Training on augumented user 105030 11/50 current_auc = 0.6780851998243302
User 105030 AUC after training: 0.6785243741765481
User 105030 improves AUC. Keeping the model.
Training on augumented user 107270 12/50 current_auc = 0.6785243741765481
User 107270 AUC after training: 0.6776460254721124
User 107270 does not improve AUC. Reverting changes.
Training on augumented user 123241 13/50 current_auc = 0.6785243741765481
User 123241 AUC after training: 0.6780851998243302
User 123241 does not improve AUC. Reverting changes.
Training on augumented user 88777 14/50 current_auc = 0.6785243741765481
User 88777 AUC after training: 0.6776460254721124
User 88777 does not improve AUC. Reverting changes.
Training on augumented user 92027 15/50 current_auc = 0.6785243741765481
User 92027 AUC after training: 0.6783047870004393
User 92027 does not improve AUC. Reverting changes.
Training on augumented user 86028 16/50 current_auc = 0.6785243741765481
User 86028 AUC after training: 0.6765480895915679
User 86028 does not improve AUC. Reverting changes.
Training on augumented user 110114 17/50 current_auc = 0.6785243741765481
User 110114 AUC after training: 0.6783047870004393
User 110114 does not improve AUC. Reverting changes.
Training on augumented user 26120 18/50 current_auc = 0.6785243741765481
User 26120 AUC after training: 0.6780851998243302
User 26120 does not improve AUC. Reverting changes.
Training on augumented user 4121 19/50 current_auc = 0.6785243741765481
User 4121 AUC after training: 0.6783047870004392
User 4121 does not improve AUC. Reverting changes.
Training on augumented user 93421 20/50 current_auc = 0.6785243741765481
User 93421 AUC after training: 0.6780851998243302
User 93421 does not improve AUC. Reverting changes.
Training on augumented user 122271 21/50 current_auc = 0.6785243741765481
User 122271 AUC after training: 0.678743961352657
User 122271 improves AUC. Keeping the model.
Training on augumented user 82457 22/50 current_auc = 0.678743961352657
User 82457 AUC after training: 0.6780851998243302
User 82457 does not improve AUC. Reverting changes.
Training on augumented user 100620 23/50 current_auc = 0.678743961352657
User 100620 AUC after training: 0.6783047870004392
User 100620 does not improve AUC. Reverting changes.
Training on augumented user 115991 24/50 current_auc = 0.678743961352657
User 115991 AUC after training: 0.678963548528766
User 115991 improves AUC. Keeping the model.
Training on augumented user 70988 25/50 current_auc = 0.678963548528766
User 70988 AUC after training: 0.6791831357048749
User 70988 improves AUC. Keeping the model.
Training on augumented user 75280 26/50 current_auc = 0.6791831357048749
User 75280 AUC after training: 0.678963548528766
User 75280 does not improve AUC. Reverting changes.
Training on augumented user 38032 27/50 current_auc = 0.6791831357048749
User 38032 AUC after training: 0.678743961352657
User 38032 does not improve AUC. Reverting changes.
Training on augumented user 120892 28/50 current_auc = 0.6791831357048749
User 120892 AUC after training: 0.6774264382960036
User 120892 does not improve AUC. Reverting changes.
Training on augumented user 32862 29/50 current_auc = 0.6791831357048749
User 32862 AUC after training: 0.6796223100570926
User 32862 improves AUC. Keeping the model.
Training on augumented user 17004 30/50 current_auc = 0.6796223100570926
User 17004 AUC after training: 0.6785243741765481
User 17004 does not improve AUC. Reverting changes.
Training on augumented user 130144 31/50 current_auc = 0.6796223100570926
User 130144 AUC after training: 0.6796223100570926
User 130144 does not improve AUC. Reverting changes.
Training on augumented user 106311 32/50 current_auc = 0.6796223100570926
User 106311 AUC after training: 0.6794027228809838
User 106311 does not improve AUC. Reverting changes.
Training on augumented user 84151 33/50 current_auc = 0.6796223100570926
User 84151 AUC after training: 0.6769872639437857
User 84151 does not improve AUC. Reverting changes.
Training on augumented user 83365 34/50 current_auc = 0.6796223100570926
User 83365 AUC after training: 0.6794027228809838
User 83365 does not improve AUC. Reverting changes.
Training on augumented user 50351 35/50 current_auc = 0.6796223100570926
User 50351 AUC after training: 0.6785243741765481
User 50351 does not improve AUC. Reverting changes.
Training on augumented user 8066 36/50 current_auc = 0.6796223100570926
User 8066 AUC after training: 0.678963548528766
User 8066 does not improve AUC. Reverting changes.
Training on augumented user 126580 37/50 current_auc = 0.6796223100570926
User 126580 AUC after training: 0.6785243741765481
User 126580 does not improve AUC. Reverting changes.
Training on augumented user 109722 38/50 current_auc = 0.6796223100570926
User 109722 AUC after training: 0.6791831357048749
User 109722 does not improve AUC. Reverting changes.
Training on augumented user 66346 39/50 current_auc = 0.6796223100570926
User 66346 AUC after training: 0.6778656126482214
User 66346 does not improve AUC. Reverting changes.
Training on augumented user 27465 40/50 current_auc = 0.6796223100570926
User 27465 AUC after training: 0.6794027228809838
User 27465 does not improve AUC. Reverting changes.
Training on augumented user 81290 41/50 current_auc = 0.6796223100570926
User 81290 AUC after training: 0.6796223100570926
User 81290 does not improve AUC. Reverting changes.
Training on augumented user 4995 42/50 current_auc = 0.6796223100570926
User 4995 AUC after training: 0.6794027228809838
User 4995 does not improve AUC. Reverting changes.
Training on augumented user 83548 43/50 current_auc = 0.6796223100570926
User 83548 AUC after training: 0.6796223100570926
User 83548 does not improve AUC. Reverting changes.
Training on augumented user 9778 44/50 current_auc = 0.6796223100570926
User 9778 AUC after training: 0.6787439613526571
User 9778 does not improve AUC. Reverting changes.
Training on augumented user 15132 45/50 current_auc = 0.6796223100570926
User 15132 AUC after training: 0.6780851998243302
User 15132 does not improve AUC. Reverting changes.
Training on augumented user 136220 46/50 current_auc = 0.6796223100570926
User 136220 AUC after training: 0.6800614844093105
User 136220 improves AUC. Keeping the model.
Training on augumented user 53264 47/50 current_auc = 0.6800614844093105
User 53264 AUC after training: 0.6794027228809838
User 53264 does not improve AUC. Reverting changes.
Training on augumented user 45980 48/50 current_auc = 0.6800614844093105
User 45980 AUC after training: 0.679183135704875
User 45980 does not improve AUC. Reverting changes.
Training on augumented user 58953 49/50 current_auc = 0.6800614844093105
User 58953 AUC after training: 0.6787439613526569
User 58953 does not improve AUC. Reverting changes.
[2024-12-02 18:32:58.646705] start test user 29558 94/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:59.584255] start test user 29558 94/568 recall augumented users by random, augumented_users = [33746, 53827, 54709, 43582, 136683, 64518, 90642, 31266, 129191, 38411, 87008, 124124, 130612, 26238, 43795, 59084, 128542, 51837, 22036, 38980, 123242, 84199, 38328, 19114, 89057, 135145, 12809, 36996, 77805, 127599, 129539, 108571, 44664, 137361, 63970, 1798, 126098, 79149, 52214, 76833, 91435, 58459, 118753, 22995, 84944, 13933, 123292, 59274, 105665, 109927]
[2024-12-02 18:32:59.600075] user = 29558 Cloud 94/568
[2024-12-02 18:32:59.625102] user = 29558 Local 94/568
[2024-12-02 18:32:59.795496] user = 29558 Local+ 94/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:02.105243] user = 29558 MPDA- 94/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7246153846153846
Training on augumented user 33746 0/50 current_auc = 0.7246153846153846
User 33746 AUC after training: 0.7246153846153847
User 33746 improves AUC. Keeping the model.
Training on augumented user 53827 1/50 current_auc = 0.7246153846153847
User 53827 AUC after training: 0.7246153846153846
User 53827 does not improve AUC. Reverting changes.
Training on augumented user 54709 2/50 current_auc = 0.7246153846153847
User 54709 AUC after training: 0.7261538461538461
User 54709 improves AUC. Keeping the model.
Training on augumented user 43582 3/50 current_auc = 0.7261538461538461
User 43582 AUC after training: 0.7230769230769231
User 43582 does not improve AUC. Reverting changes.
Training on augumented user 136683 4/50 current_auc = 0.7261538461538461
User 136683 AUC after training: 0.7246153846153847
User 136683 does not improve AUC. Reverting changes.
Training on augumented user 64518 5/50 current_auc = 0.7261538461538461
User 64518 AUC after training: 0.7246153846153847
User 64518 does not improve AUC. Reverting changes.
Training on augumented user 90642 6/50 current_auc = 0.7261538461538461
User 90642 AUC after training: 0.7261538461538461
User 90642 does not improve AUC. Reverting changes.
Training on augumented user 31266 7/50 current_auc = 0.7261538461538461
User 31266 AUC after training: 0.7246153846153847
User 31266 does not improve AUC. Reverting changes.
Training on augumented user 129191 8/50 current_auc = 0.7261538461538461
User 129191 AUC after training: 0.7246153846153846
User 129191 does not improve AUC. Reverting changes.
Training on augumented user 38411 9/50 current_auc = 0.7261538461538461
User 38411 AUC after training: 0.7261538461538461
User 38411 does not improve AUC. Reverting changes.
Training on augumented user 87008 10/50 current_auc = 0.7261538461538461
User 87008 AUC after training: 0.7246153846153847
User 87008 does not improve AUC. Reverting changes.
Training on augumented user 124124 11/50 current_auc = 0.7261538461538461
User 124124 AUC after training: 0.7230769230769231
User 124124 does not improve AUC. Reverting changes.
Training on augumented user 130612 12/50 current_auc = 0.7261538461538461
User 130612 AUC after training: 0.7230769230769231
User 130612 does not improve AUC. Reverting changes.
Training on augumented user 26238 13/50 current_auc = 0.7261538461538461
User 26238 AUC after training: 0.7292307692307692
User 26238 improves AUC. Keeping the model.
Training on augumented user 43795 14/50 current_auc = 0.7292307692307692
User 43795 AUC after training: 0.7246153846153847
User 43795 does not improve AUC. Reverting changes.
Training on augumented user 59084 15/50 current_auc = 0.7292307692307692
User 59084 AUC after training: 0.7276923076923076
User 59084 does not improve AUC. Reverting changes.
Training on augumented user 128542 16/50 current_auc = 0.7292307692307692
User 128542 AUC after training: 0.7261538461538461
User 128542 does not improve AUC. Reverting changes.
Training on augumented user 51837 17/50 current_auc = 0.7292307692307692
User 51837 AUC after training: 0.7276923076923076
User 51837 does not improve AUC. Reverting changes.
Training on augumented user 22036 18/50 current_auc = 0.7292307692307692
User 22036 AUC after training: 0.7261538461538461
User 22036 does not improve AUC. Reverting changes.
Training on augumented user 38980 19/50 current_auc = 0.7292307692307692
User 38980 AUC after training: 0.7292307692307692
User 38980 does not improve AUC. Reverting changes.
Training on augumented user 123242 20/50 current_auc = 0.7292307692307692
User 123242 AUC after training: 0.7261538461538461
User 123242 does not improve AUC. Reverting changes.
Training on augumented user 84199 21/50 current_auc = 0.7292307692307692
User 84199 AUC after training: 0.7261538461538461
User 84199 does not improve AUC. Reverting changes.
Training on augumented user 38328 22/50 current_auc = 0.7292307692307692
User 38328 AUC after training: 0.7276923076923076
User 38328 does not improve AUC. Reverting changes.
Training on augumented user 19114 23/50 current_auc = 0.7292307692307692
User 19114 AUC after training: 0.7292307692307692
User 19114 does not improve AUC. Reverting changes.
Training on augumented user 89057 24/50 current_auc = 0.7292307692307692
User 89057 AUC after training: 0.7292307692307692
User 89057 does not improve AUC. Reverting changes.
Training on augumented user 135145 25/50 current_auc = 0.7292307692307692
User 135145 AUC after training: 0.7276923076923076
User 135145 does not improve AUC. Reverting changes.
Training on augumented user 12809 26/50 current_auc = 0.7292307692307692
User 12809 AUC after training: 0.7292307692307692
User 12809 does not improve AUC. Reverting changes.
Training on augumented user 36996 27/50 current_auc = 0.7292307692307692
User 36996 AUC after training: 0.7276923076923076
User 36996 does not improve AUC. Reverting changes.
Training on augumented user 77805 28/50 current_auc = 0.7292307692307692
User 77805 AUC after training: 0.7261538461538461
User 77805 does not improve AUC. Reverting changes.
Training on augumented user 127599 29/50 current_auc = 0.7292307692307692
User 127599 AUC after training: 0.7276923076923076
User 127599 does not improve AUC. Reverting changes.
Training on augumented user 129539 30/50 current_auc = 0.7292307692307692
User 129539 AUC after training: 0.7292307692307692
User 129539 does not improve AUC. Reverting changes.
Training on augumented user 108571 31/50 current_auc = 0.7292307692307692
User 108571 AUC after training: 0.7276923076923076
User 108571 does not improve AUC. Reverting changes.
Training on augumented user 44664 32/50 current_auc = 0.7292307692307692
User 44664 AUC after training: 0.7276923076923076
User 44664 does not improve AUC. Reverting changes.
Training on augumented user 137361 33/50 current_auc = 0.7292307692307692
User 137361 AUC after training: 0.72
User 137361 does not improve AUC. Reverting changes.
Training on augumented user 63970 34/50 current_auc = 0.7292307692307692
User 63970 AUC after training: 0.7276923076923076
User 63970 does not improve AUC. Reverting changes.
Training on augumented user 1798 35/50 current_auc = 0.7292307692307692
User 1798 AUC after training: 0.7292307692307692
User 1798 does not improve AUC. Reverting changes.
Training on augumented user 126098 36/50 current_auc = 0.7292307692307692
User 126098 AUC after training: 0.7246153846153846
User 126098 does not improve AUC. Reverting changes.
Training on augumented user 79149 37/50 current_auc = 0.7292307692307692
User 79149 AUC after training: 0.7276923076923076
User 79149 does not improve AUC. Reverting changes.
Training on augumented user 52214 38/50 current_auc = 0.7292307692307692
User 52214 AUC after training: 0.7261538461538461
User 52214 does not improve AUC. Reverting changes.
Training on augumented user 76833 39/50 current_auc = 0.7292307692307692
User 76833 AUC after training: 0.7292307692307692
User 76833 does not improve AUC. Reverting changes.
Training on augumented user 91435 40/50 current_auc = 0.7292307692307692
User 91435 AUC after training: 0.7246153846153847
User 91435 does not improve AUC. Reverting changes.
Training on augumented user 58459 41/50 current_auc = 0.7292307692307692
User 58459 AUC after training: 0.7276923076923076
User 58459 does not improve AUC. Reverting changes.
Training on augumented user 118753 42/50 current_auc = 0.7292307692307692
User 118753 AUC after training: 0.7292307692307692
User 118753 does not improve AUC. Reverting changes.
Training on augumented user 22995 43/50 current_auc = 0.7292307692307692
User 22995 AUC after training: 0.7261538461538461
User 22995 does not improve AUC. Reverting changes.
Training on augumented user 84944 44/50 current_auc = 0.7292307692307692
User 84944 AUC after training: 0.7292307692307692
User 84944 does not improve AUC. Reverting changes.
Training on augumented user 13933 45/50 current_auc = 0.7292307692307692
User 13933 AUC after training: 0.7276923076923076
User 13933 does not improve AUC. Reverting changes.
Training on augumented user 123292 46/50 current_auc = 0.7292307692307692
User 123292 AUC after training: 0.7292307692307692
User 123292 does not improve AUC. Reverting changes.
Training on augumented user 59274 47/50 current_auc = 0.7292307692307692
User 59274 AUC after training: 0.7261538461538461
User 59274 does not improve AUC. Reverting changes.
Training on augumented user 105665 48/50 current_auc = 0.7292307692307692
User 105665 AUC after training: 0.7261538461538461
User 105665 does not improve AUC. Reverting changes.
Training on augumented user 109927 49/50 current_auc = 0.7292307692307692
User 109927 AUC after training: 0.7276923076923076
User 109927 does not improve AUC. Reverting changes.
[2024-12-02 18:33:32.653632] start test user 29571 95/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:33.330150] start test user 29571 95/568 recall augumented users by random, augumented_users = [18162, 81386, 54019, 54256, 134446, 131988, 4691, 91597, 114539, 123605, 37841, 13270, 30247, 86270, 63097, 100636, 21108, 88323, 7192, 67878, 111690, 103392, 21027, 4008, 105135, 124615, 54241, 101122, 80511, 25431, 28307, 109954, 88928, 64427, 87301, 91458, 118745, 112958, 127760, 114105, 34578, 48144, 47283, 5949, 54259, 40661, 88844, 7165, 68125, 94947]
[2024-12-02 18:33:33.348024] user = 29571 Cloud 95/568
[2024-12-02 18:33:33.359247] user = 29571 Local 95/568
[2024-12-02 18:33:33.382029] user = 29571 Local+ 95/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:36.745564] user = 29571 MPDA- 95/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5374149659863945
Training on augumented user 18162 0/50 current_auc = 0.5374149659863945
User 18162 AUC after training: 0.5374149659863945
User 18162 does not improve AUC. Reverting changes.
Training on augumented user 81386 1/50 current_auc = 0.5374149659863945
User 81386 AUC after training: 0.5238095238095238
User 81386 does not improve AUC. Reverting changes.
Training on augumented user 54019 2/50 current_auc = 0.5374149659863945
User 54019 AUC after training: 0.5374149659863945
User 54019 does not improve AUC. Reverting changes.
Training on augumented user 54256 3/50 current_auc = 0.5374149659863945
User 54256 AUC after training: 0.5374149659863945
User 54256 does not improve AUC. Reverting changes.
Training on augumented user 134446 4/50 current_auc = 0.5374149659863945
User 134446 AUC after training: 0.5374149659863945
User 134446 does not improve AUC. Reverting changes.
Training on augumented user 131988 5/50 current_auc = 0.5374149659863945
User 131988 AUC after training: 0.5442176870748299
User 131988 improves AUC. Keeping the model.
Training on augumented user 4691 6/50 current_auc = 0.5442176870748299
User 4691 AUC after training: 0.5442176870748299
User 4691 does not improve AUC. Reverting changes.
Training on augumented user 91597 7/50 current_auc = 0.5442176870748299
User 91597 AUC after training: 0.5374149659863945
User 91597 does not improve AUC. Reverting changes.
Training on augumented user 114539 8/50 current_auc = 0.5442176870748299
User 114539 AUC after training: 0.5442176870748299
User 114539 does not improve AUC. Reverting changes.
Training on augumented user 123605 9/50 current_auc = 0.5442176870748299
User 123605 AUC after training: 0.5442176870748299
User 123605 does not improve AUC. Reverting changes.
Training on augumented user 37841 10/50 current_auc = 0.5442176870748299
User 37841 AUC after training: 0.5510204081632653
User 37841 improves AUC. Keeping the model.
Training on augumented user 13270 11/50 current_auc = 0.5510204081632653
User 13270 AUC after training: 0.5374149659863945
User 13270 does not improve AUC. Reverting changes.
Training on augumented user 30247 12/50 current_auc = 0.5510204081632653
User 30247 AUC after training: 0.5374149659863945
User 30247 does not improve AUC. Reverting changes.
Training on augumented user 86270 13/50 current_auc = 0.5510204081632653
User 86270 AUC after training: 0.5374149659863945
User 86270 does not improve AUC. Reverting changes.
Training on augumented user 63097 14/50 current_auc = 0.5510204081632653
User 63097 AUC after training: 0.5510204081632653
User 63097 does not improve AUC. Reverting changes.
Training on augumented user 100636 15/50 current_auc = 0.5510204081632653
User 100636 AUC after training: 0.5442176870748299
User 100636 does not improve AUC. Reverting changes.
Training on augumented user 21108 16/50 current_auc = 0.5510204081632653
User 21108 AUC after training: 0.5510204081632653
User 21108 does not improve AUC. Reverting changes.
Training on augumented user 88323 17/50 current_auc = 0.5510204081632653
User 88323 AUC after training: 0.5374149659863945
User 88323 does not improve AUC. Reverting changes.
Training on augumented user 7192 18/50 current_auc = 0.5510204081632653
User 7192 AUC after training: 0.5442176870748299
User 7192 does not improve AUC. Reverting changes.
Training on augumented user 67878 19/50 current_auc = 0.5510204081632653
User 67878 AUC after training: 0.5442176870748299
User 67878 does not improve AUC. Reverting changes.
Training on augumented user 111690 20/50 current_auc = 0.5510204081632653
User 111690 AUC after training: 0.5510204081632653
User 111690 does not improve AUC. Reverting changes.
Training on augumented user 103392 21/50 current_auc = 0.5510204081632653
User 103392 AUC after training: 0.5510204081632653
User 103392 does not improve AUC. Reverting changes.
Training on augumented user 21027 22/50 current_auc = 0.5510204081632653
User 21027 AUC after training: 0.5374149659863945
User 21027 does not improve AUC. Reverting changes.
Training on augumented user 4008 23/50 current_auc = 0.5510204081632653
User 4008 AUC after training: 0.5442176870748299
User 4008 does not improve AUC. Reverting changes.
Training on augumented user 105135 24/50 current_auc = 0.5510204081632653
User 105135 AUC after training: 0.5374149659863945
User 105135 does not improve AUC. Reverting changes.
Training on augumented user 124615 25/50 current_auc = 0.5510204081632653
User 124615 AUC after training: 0.5442176870748299
User 124615 does not improve AUC. Reverting changes.
Training on augumented user 54241 26/50 current_auc = 0.5510204081632653
User 54241 AUC after training: 0.5374149659863945
User 54241 does not improve AUC. Reverting changes.
Training on augumented user 101122 27/50 current_auc = 0.5510204081632653
User 101122 AUC after training: 0.5442176870748299
User 101122 does not improve AUC. Reverting changes.
Training on augumented user 80511 28/50 current_auc = 0.5510204081632653
User 80511 AUC after training: 0.5442176870748299
User 80511 does not improve AUC. Reverting changes.
Training on augumented user 25431 29/50 current_auc = 0.5510204081632653
User 25431 AUC after training: 0.5374149659863945
User 25431 does not improve AUC. Reverting changes.
Training on augumented user 28307 30/50 current_auc = 0.5510204081632653
User 28307 AUC after training: 0.5442176870748299
User 28307 does not improve AUC. Reverting changes.
Training on augumented user 109954 31/50 current_auc = 0.5510204081632653
User 109954 AUC after training: 0.5510204081632653
User 109954 does not improve AUC. Reverting changes.
Training on augumented user 88928 32/50 current_auc = 0.5510204081632653
User 88928 AUC after training: 0.5374149659863945
User 88928 does not improve AUC. Reverting changes.
Training on augumented user 64427 33/50 current_auc = 0.5510204081632653
User 64427 AUC after training: 0.5374149659863945
User 64427 does not improve AUC. Reverting changes.
Training on augumented user 87301 34/50 current_auc = 0.5510204081632653
User 87301 AUC after training: 0.5510204081632653
User 87301 does not improve AUC. Reverting changes.
Training on augumented user 91458 35/50 current_auc = 0.5510204081632653
User 91458 AUC after training: 0.5374149659863945
User 91458 does not improve AUC. Reverting changes.
Training on augumented user 118745 36/50 current_auc = 0.5510204081632653
User 118745 AUC after training: 0.5374149659863945
User 118745 does not improve AUC. Reverting changes.
Training on augumented user 112958 37/50 current_auc = 0.5510204081632653
User 112958 AUC after training: 0.5374149659863945
User 112958 does not improve AUC. Reverting changes.
Training on augumented user 127760 38/50 current_auc = 0.5510204081632653
User 127760 AUC after training: 0.5510204081632653
User 127760 does not improve AUC. Reverting changes.
Training on augumented user 114105 39/50 current_auc = 0.5510204081632653
User 114105 AUC after training: 0.5442176870748299
User 114105 does not improve AUC. Reverting changes.
Training on augumented user 34578 40/50 current_auc = 0.5510204081632653
User 34578 AUC after training: 0.5374149659863945
User 34578 does not improve AUC. Reverting changes.
Training on augumented user 48144 41/50 current_auc = 0.5510204081632653
User 48144 AUC after training: 0.5442176870748299
User 48144 does not improve AUC. Reverting changes.
Training on augumented user 47283 42/50 current_auc = 0.5510204081632653
User 47283 AUC after training: 0.5510204081632653
User 47283 does not improve AUC. Reverting changes.
Training on augumented user 5949 43/50 current_auc = 0.5510204081632653
User 5949 AUC after training: 0.5442176870748299
User 5949 does not improve AUC. Reverting changes.
Training on augumented user 54259 44/50 current_auc = 0.5510204081632653
User 54259 AUC after training: 0.5510204081632653
User 54259 does not improve AUC. Reverting changes.
Training on augumented user 40661 45/50 current_auc = 0.5510204081632653
User 40661 AUC after training: 0.5442176870748299
User 40661 does not improve AUC. Reverting changes.
Training on augumented user 88844 46/50 current_auc = 0.5510204081632653
User 88844 AUC after training: 0.5442176870748299
User 88844 does not improve AUC. Reverting changes.
Training on augumented user 7165 47/50 current_auc = 0.5510204081632653
User 7165 AUC after training: 0.5442176870748299
User 7165 does not improve AUC. Reverting changes.
Training on augumented user 68125 48/50 current_auc = 0.5510204081632653
User 68125 AUC after training: 0.5510204081632653
User 68125 does not improve AUC. Reverting changes.
Training on augumented user 94947 49/50 current_auc = 0.5510204081632653
User 94947 AUC after training: 0.5374149659863945
User 94947 does not improve AUC. Reverting changes.
[2024-12-02 18:34:06.348420] start test user 29633 96/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:07.113850] start test user 29633 96/568 recall augumented users by random, augumented_users = [69940, 97490, 83169, 71278, 129518, 76204, 27435, 36377, 62589, 103225, 19634, 124232, 103408, 64462, 69056, 104533, 106450, 71070, 92926, 97677, 82759, 57875, 110138, 102123, 117516, 339, 104789, 85336, 97918, 37986, 1938, 68248, 108613, 135951, 61731, 133587, 132440, 49771, 52926, 4894, 88356, 39952, 78756, 128586, 130795, 11572, 52521, 22644, 72126, 71768]
[2024-12-02 18:34:07.141077] user = 29633 Cloud 96/568
[2024-12-02 18:34:07.166923] user = 29633 Local 96/568
[2024-12-02 18:34:07.266660] user = 29633 Local+ 96/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:10.212915] user = 29633 MPDA- 96/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.39999999999999997
Training on augumented user 69940 0/50 current_auc = 0.39999999999999997
User 69940 AUC after training: 0.39999999999999997
User 69940 does not improve AUC. Reverting changes.
Training on augumented user 97490 1/50 current_auc = 0.39999999999999997
User 97490 AUC after training: 0.39999999999999997
User 97490 does not improve AUC. Reverting changes.
Training on augumented user 83169 2/50 current_auc = 0.39999999999999997
User 83169 AUC after training: 0.39999999999999997
User 83169 does not improve AUC. Reverting changes.
Training on augumented user 71278 3/50 current_auc = 0.39999999999999997
User 71278 AUC after training: 0.39999999999999997
User 71278 does not improve AUC. Reverting changes.
Training on augumented user 129518 4/50 current_auc = 0.39999999999999997
User 129518 AUC after training: 0.4666666666666666
User 129518 improves AUC. Keeping the model.
Training on augumented user 76204 5/50 current_auc = 0.4666666666666666
User 76204 AUC after training: 0.39999999999999997
User 76204 does not improve AUC. Reverting changes.
Training on augumented user 27435 6/50 current_auc = 0.4666666666666666
User 27435 AUC after training: 0.39999999999999997
User 27435 does not improve AUC. Reverting changes.
Training on augumented user 36377 7/50 current_auc = 0.4666666666666666
User 36377 AUC after training: 0.39999999999999997
User 36377 does not improve AUC. Reverting changes.
Training on augumented user 62589 8/50 current_auc = 0.4666666666666666
User 62589 AUC after training: 0.4666666666666666
User 62589 does not improve AUC. Reverting changes.
Training on augumented user 103225 9/50 current_auc = 0.4666666666666666
User 103225 AUC after training: 0.39999999999999997
User 103225 does not improve AUC. Reverting changes.
Training on augumented user 19634 10/50 current_auc = 0.4666666666666666
User 19634 AUC after training: 0.39999999999999997
User 19634 does not improve AUC. Reverting changes.
Training on augumented user 124232 11/50 current_auc = 0.4666666666666666
User 124232 AUC after training: 0.4666666666666666
User 124232 does not improve AUC. Reverting changes.
Training on augumented user 103408 12/50 current_auc = 0.4666666666666666
User 103408 AUC after training: 0.4666666666666666
User 103408 does not improve AUC. Reverting changes.
Training on augumented user 64462 13/50 current_auc = 0.4666666666666666
User 64462 AUC after training: 0.4666666666666666
User 64462 does not improve AUC. Reverting changes.
Training on augumented user 69056 14/50 current_auc = 0.4666666666666666
User 69056 AUC after training: 0.39999999999999997
User 69056 does not improve AUC. Reverting changes.
Training on augumented user 104533 15/50 current_auc = 0.4666666666666666
User 104533 AUC after training: 0.4666666666666666
User 104533 does not improve AUC. Reverting changes.
Training on augumented user 106450 16/50 current_auc = 0.4666666666666666
User 106450 AUC after training: 0.4666666666666666
User 106450 does not improve AUC. Reverting changes.
Training on augumented user 71070 17/50 current_auc = 0.4666666666666666
User 71070 AUC after training: 0.4666666666666666
User 71070 does not improve AUC. Reverting changes.
Training on augumented user 92926 18/50 current_auc = 0.4666666666666666
User 92926 AUC after training: 0.39999999999999997
User 92926 does not improve AUC. Reverting changes.
Training on augumented user 97677 19/50 current_auc = 0.4666666666666666
User 97677 AUC after training: 0.4666666666666666
User 97677 does not improve AUC. Reverting changes.
Training on augumented user 82759 20/50 current_auc = 0.4666666666666666
User 82759 AUC after training: 0.39999999999999997
User 82759 does not improve AUC. Reverting changes.
Training on augumented user 57875 21/50 current_auc = 0.4666666666666666
User 57875 AUC after training: 0.39999999999999997
User 57875 does not improve AUC. Reverting changes.
Training on augumented user 110138 22/50 current_auc = 0.4666666666666666
User 110138 AUC after training: 0.4666666666666666
User 110138 does not improve AUC. Reverting changes.
Training on augumented user 102123 23/50 current_auc = 0.4666666666666666
User 102123 AUC after training: 0.39999999999999997
User 102123 does not improve AUC. Reverting changes.
Training on augumented user 117516 24/50 current_auc = 0.4666666666666666
User 117516 AUC after training: 0.39999999999999997
User 117516 does not improve AUC. Reverting changes.
Training on augumented user 339 25/50 current_auc = 0.4666666666666666
User 339 AUC after training: 0.4666666666666666
User 339 does not improve AUC. Reverting changes.
Training on augumented user 104789 26/50 current_auc = 0.4666666666666666
User 104789 AUC after training: 0.39999999999999997
User 104789 does not improve AUC. Reverting changes.
Training on augumented user 85336 27/50 current_auc = 0.4666666666666666
User 85336 AUC after training: 0.4666666666666666
User 85336 does not improve AUC. Reverting changes.
Training on augumented user 97918 28/50 current_auc = 0.4666666666666666
User 97918 AUC after training: 0.4666666666666666
User 97918 does not improve AUC. Reverting changes.
Training on augumented user 37986 29/50 current_auc = 0.4666666666666666
User 37986 AUC after training: 0.4666666666666666
User 37986 does not improve AUC. Reverting changes.
Training on augumented user 1938 30/50 current_auc = 0.4666666666666666
User 1938 AUC after training: 0.39999999999999997
User 1938 does not improve AUC. Reverting changes.
Training on augumented user 68248 31/50 current_auc = 0.4666666666666666
User 68248 AUC after training: 0.39999999999999997
User 68248 does not improve AUC. Reverting changes.
Training on augumented user 108613 32/50 current_auc = 0.4666666666666666
User 108613 AUC after training: 0.39999999999999997
User 108613 does not improve AUC. Reverting changes.
Training on augumented user 135951 33/50 current_auc = 0.4666666666666666
User 135951 AUC after training: 0.39999999999999997
User 135951 does not improve AUC. Reverting changes.
Training on augumented user 61731 34/50 current_auc = 0.4666666666666666
User 61731 AUC after training: 0.4666666666666666
User 61731 does not improve AUC. Reverting changes.
Training on augumented user 133587 35/50 current_auc = 0.4666666666666666
User 133587 AUC after training: 0.39999999999999997
User 133587 does not improve AUC. Reverting changes.
Training on augumented user 132440 36/50 current_auc = 0.4666666666666666
User 132440 AUC after training: 0.39999999999999997
User 132440 does not improve AUC. Reverting changes.
Training on augumented user 49771 37/50 current_auc = 0.4666666666666666
User 49771 AUC after training: 0.4666666666666666
User 49771 does not improve AUC. Reverting changes.
Training on augumented user 52926 38/50 current_auc = 0.4666666666666666
User 52926 AUC after training: 0.4666666666666666
User 52926 does not improve AUC. Reverting changes.
Training on augumented user 4894 39/50 current_auc = 0.4666666666666666
User 4894 AUC after training: 0.4666666666666666
User 4894 does not improve AUC. Reverting changes.
Training on augumented user 88356 40/50 current_auc = 0.4666666666666666
User 88356 AUC after training: 0.39999999999999997
User 88356 does not improve AUC. Reverting changes.
Training on augumented user 39952 41/50 current_auc = 0.4666666666666666
User 39952 AUC after training: 0.4666666666666666
User 39952 does not improve AUC. Reverting changes.
Training on augumented user 78756 42/50 current_auc = 0.4666666666666666
User 78756 AUC after training: 0.4666666666666666
User 78756 does not improve AUC. Reverting changes.
Training on augumented user 128586 43/50 current_auc = 0.4666666666666666
User 128586 AUC after training: 0.4666666666666666
User 128586 does not improve AUC. Reverting changes.
Training on augumented user 130795 44/50 current_auc = 0.4666666666666666
User 130795 AUC after training: 0.39999999999999997
User 130795 does not improve AUC. Reverting changes.
Training on augumented user 11572 45/50 current_auc = 0.4666666666666666
User 11572 AUC after training: 0.4666666666666666
User 11572 does not improve AUC. Reverting changes.
Training on augumented user 52521 46/50 current_auc = 0.4666666666666666
User 52521 AUC after training: 0.4666666666666666
User 52521 does not improve AUC. Reverting changes.
Training on augumented user 22644 47/50 current_auc = 0.4666666666666666
User 22644 AUC after training: 0.4666666666666666
User 22644 does not improve AUC. Reverting changes.
Training on augumented user 72126 48/50 current_auc = 0.4666666666666666
User 72126 AUC after training: 0.39999999999999997
User 72126 does not improve AUC. Reverting changes.
Training on augumented user 71768 49/50 current_auc = 0.4666666666666666
User 71768 AUC after training: 0.39999999999999997
User 71768 does not improve AUC. Reverting changes.
[2024-12-02 18:34:39.062167] start test user 29656 97/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:39.925631] start test user 29656 97/568 recall augumented users by random, augumented_users = [107176, 117729, 78510, 54399, 102067, 114256, 16063, 15860, 36225, 46347, 6172, 58616, 27606, 76353, 48298, 111673, 88182, 7485, 32171, 131349, 67981, 74633, 83254, 55318, 2172, 93581, 19443, 112049, 61424, 31404, 96939, 20752, 94059, 30585, 37187, 78408, 110571, 105860, 29943, 62559, 19776, 124292, 94517, 46811, 110183, 47976, 37427, 85404, 84844, 51804]
[2024-12-02 18:34:39.943763] user = 29656 Cloud 97/568
[2024-12-02 18:34:39.998108] user = 29656 Local 97/568
[2024-12-02 18:34:40.524858] user = 29656 Local+ 97/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:44.596746] user = 29656 MPDA- 97/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5394098360655738
Training on augumented user 107176 0/50 current_auc = 0.5394098360655738
User 107176 AUC after training: 0.5384918032786885
User 107176 does not improve AUC. Reverting changes.
Training on augumented user 117729 1/50 current_auc = 0.5394098360655738
User 117729 AUC after training: 0.538360655737705
User 117729 does not improve AUC. Reverting changes.
Training on augumented user 78510 2/50 current_auc = 0.5394098360655738
User 78510 AUC after training: 0.539016393442623
User 78510 does not improve AUC. Reverting changes.
Training on augumented user 54399 3/50 current_auc = 0.5394098360655738
User 54399 AUC after training: 0.5399344262295083
User 54399 improves AUC. Keeping the model.
Training on augumented user 102067 4/50 current_auc = 0.5399344262295083
User 102067 AUC after training: 0.5388852459016393
User 102067 does not improve AUC. Reverting changes.
Training on augumented user 114256 5/50 current_auc = 0.5399344262295083
User 114256 AUC after training: 0.5394098360655737
User 114256 does not improve AUC. Reverting changes.
Training on augumented user 16063 6/50 current_auc = 0.5399344262295083
User 16063 AUC after training: 0.5400655737704918
User 16063 improves AUC. Keeping the model.
Training on augumented user 15860 7/50 current_auc = 0.5400655737704918
User 15860 AUC after training: 0.5398032786885246
User 15860 does not improve AUC. Reverting changes.
Training on augumented user 36225 8/50 current_auc = 0.5400655737704918
User 36225 AUC after training: 0.5395409836065574
User 36225 does not improve AUC. Reverting changes.
Training on augumented user 46347 9/50 current_auc = 0.5400655737704918
User 46347 AUC after training: 0.5400655737704918
User 46347 does not improve AUC. Reverting changes.
Training on augumented user 6172 10/50 current_auc = 0.5400655737704918
User 6172 AUC after training: 0.539672131147541
User 6172 does not improve AUC. Reverting changes.
Training on augumented user 58616 11/50 current_auc = 0.5400655737704918
User 58616 AUC after training: 0.5407213114754098
User 58616 improves AUC. Keeping the model.
Training on augumented user 27606 12/50 current_auc = 0.5407213114754098
User 27606 AUC after training: 0.5398032786885245
User 27606 does not improve AUC. Reverting changes.
Training on augumented user 76353 13/50 current_auc = 0.5407213114754098
User 76353 AUC after training: 0.5411147540983606
User 76353 improves AUC. Keeping the model.
Training on augumented user 48298 14/50 current_auc = 0.5411147540983606
User 48298 AUC after training: 0.5411147540983607
User 48298 improves AUC. Keeping the model.
Training on augumented user 111673 15/50 current_auc = 0.5411147540983607
User 111673 AUC after training: 0.5412459016393443
User 111673 improves AUC. Keeping the model.
Training on augumented user 88182 16/50 current_auc = 0.5412459016393443
User 88182 AUC after training: 0.5399344262295082
User 88182 does not improve AUC. Reverting changes.
Training on augumented user 7485 17/50 current_auc = 0.5412459016393443
User 7485 AUC after training: 0.5408524590163934
User 7485 does not improve AUC. Reverting changes.
Training on augumented user 32171 18/50 current_auc = 0.5412459016393443
User 32171 AUC after training: 0.5413770491803278
User 32171 improves AUC. Keeping the model.
Training on augumented user 131349 19/50 current_auc = 0.5413770491803278
User 131349 AUC after training: 0.5416393442622951
User 131349 improves AUC. Keeping the model.
Training on augumented user 67981 20/50 current_auc = 0.5416393442622951
User 67981 AUC after training: 0.5424262295081967
User 67981 improves AUC. Keeping the model.
Training on augumented user 74633 21/50 current_auc = 0.5424262295081967
User 74633 AUC after training: 0.5404590163934426
User 74633 does not improve AUC. Reverting changes.
Training on augumented user 83254 22/50 current_auc = 0.5424262295081967
User 83254 AUC after training: 0.5415081967213116
User 83254 does not improve AUC. Reverting changes.
Training on augumented user 55318 23/50 current_auc = 0.5424262295081967
User 55318 AUC after training: 0.5417704918032786
User 55318 does not improve AUC. Reverting changes.
Training on augumented user 2172 24/50 current_auc = 0.5424262295081967
User 2172 AUC after training: 0.5424262295081967
User 2172 does not improve AUC. Reverting changes.
Training on augumented user 93581 25/50 current_auc = 0.5424262295081967
User 93581 AUC after training: 0.5417704918032786
User 93581 does not improve AUC. Reverting changes.
Training on augumented user 19443 26/50 current_auc = 0.5424262295081967
User 19443 AUC after training: 0.5426885245901639
User 19443 improves AUC. Keeping the model.
Training on augumented user 112049 27/50 current_auc = 0.5426885245901639
User 112049 AUC after training: 0.5411147540983607
User 112049 does not improve AUC. Reverting changes.
Training on augumented user 61424 28/50 current_auc = 0.5426885245901639
User 61424 AUC after training: 0.5412459016393443
User 61424 does not improve AUC. Reverting changes.
Training on augumented user 31404 29/50 current_auc = 0.5426885245901639
User 31404 AUC after training: 0.5363934426229509
User 31404 does not improve AUC. Reverting changes.
Training on augumented user 96939 30/50 current_auc = 0.5426885245901639
User 96939 AUC after training: 0.5407213114754098
User 96939 does not improve AUC. Reverting changes.
Training on augumented user 20752 31/50 current_auc = 0.5426885245901639
User 20752 AUC after training: 0.5413770491803278
User 20752 does not improve AUC. Reverting changes.
Training on augumented user 94059 32/50 current_auc = 0.5426885245901639
User 94059 AUC after training: 0.5425573770491803
User 94059 does not improve AUC. Reverting changes.
Training on augumented user 30585 33/50 current_auc = 0.5426885245901639
User 30585 AUC after training: 0.5419016393442623
User 30585 does not improve AUC. Reverting changes.
Training on augumented user 37187 34/50 current_auc = 0.5426885245901639
User 37187 AUC after training: 0.5415081967213115
User 37187 does not improve AUC. Reverting changes.
Training on augumented user 78408 35/50 current_auc = 0.5426885245901639
User 78408 AUC after training: 0.5430819672131149
User 78408 improves AUC. Keeping the model.
Training on augumented user 110571 36/50 current_auc = 0.5430819672131149
User 110571 AUC after training: 0.5430819672131147
User 110571 does not improve AUC. Reverting changes.
Training on augumented user 105860 37/50 current_auc = 0.5430819672131149
User 105860 AUC after training: 0.5422950819672131
User 105860 does not improve AUC. Reverting changes.
Training on augumented user 29943 38/50 current_auc = 0.5430819672131149
User 29943 AUC after training: 0.5424262295081967
User 29943 does not improve AUC. Reverting changes.
Training on augumented user 62559 39/50 current_auc = 0.5430819672131149
User 62559 AUC after training: 0.5422950819672131
User 62559 does not improve AUC. Reverting changes.
Training on augumented user 19776 40/50 current_auc = 0.5430819672131149
User 19776 AUC after training: 0.5420327868852459
User 19776 does not improve AUC. Reverting changes.
Training on augumented user 124292 41/50 current_auc = 0.5430819672131149
User 124292 AUC after training: 0.5421639344262295
User 124292 does not improve AUC. Reverting changes.
Training on augumented user 94517 42/50 current_auc = 0.5430819672131149
User 94517 AUC after training: 0.5430819672131147
User 94517 does not improve AUC. Reverting changes.
Training on augumented user 46811 43/50 current_auc = 0.5430819672131149
User 46811 AUC after training: 0.5422950819672131
User 46811 does not improve AUC. Reverting changes.
Training on augumented user 110183 44/50 current_auc = 0.5430819672131149
User 110183 AUC after training: 0.5430819672131147
User 110183 does not improve AUC. Reverting changes.
Training on augumented user 47976 45/50 current_auc = 0.5430819672131149
User 47976 AUC after training: 0.5425573770491803
User 47976 does not improve AUC. Reverting changes.
Training on augumented user 37427 46/50 current_auc = 0.5430819672131149
User 37427 AUC after training: 0.5419016393442624
User 37427 does not improve AUC. Reverting changes.
Training on augumented user 85404 47/50 current_auc = 0.5430819672131149
User 85404 AUC after training: 0.5424262295081967
User 85404 does not improve AUC. Reverting changes.
Training on augumented user 84844 48/50 current_auc = 0.5430819672131149
User 84844 AUC after training: 0.5421639344262295
User 84844 does not improve AUC. Reverting changes.
Training on augumented user 51804 49/50 current_auc = 0.5430819672131149
User 51804 AUC after training: 0.5416393442622951
User 51804 does not improve AUC. Reverting changes.
[2024-12-02 18:35:15.095598] start test user 29673 98/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:15.874626] start test user 29673 98/568 recall augumented users by random, augumented_users = [65296, 101449, 86993, 19538, 4642, 97861, 45302, 106650, 129230, 81881, 60456, 137441, 58287, 101153, 75198, 118281, 78075, 27295, 71395, 123413, 101094, 95166, 91530, 4774, 76040, 14759, 55341, 49706, 14028, 126711, 89265, 1378, 97649, 93484, 77362, 23032, 77863, 132534, 68926, 20853, 21187, 130255, 5333, 67297, 14225, 121782, 49951, 82787, 14724, 130789]
[2024-12-02 18:35:15.893354] user = 29673 Cloud 98/568
[2024-12-02 18:35:15.941648] user = 29673 Local 98/568
[2024-12-02 18:35:16.097564] user = 29673 Local+ 98/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:18.292054] user = 29673 MPDA- 98/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8128188000971581
Training on augumented user 65296 0/50 current_auc = 0.8128188000971581
User 65296 AUC after training: 0.812758076269128
User 65296 does not improve AUC. Reverting changes.
Training on augumented user 101449 1/50 current_auc = 0.8128188000971581
User 101449 AUC after training: 0.8128188000971581
User 101449 does not improve AUC. Reverting changes.
Training on augumented user 86993 2/50 current_auc = 0.8128188000971581
User 86993 AUC after training: 0.8126366286130677
User 86993 does not improve AUC. Reverting changes.
Training on augumented user 19538 3/50 current_auc = 0.8128188000971581
User 19538 AUC after training: 0.8130009715812485
User 19538 improves AUC. Keeping the model.
Training on augumented user 4642 4/50 current_auc = 0.8130009715812485
User 4642 AUC after training: 0.8130920573232937
User 4642 improves AUC. Keeping the model.
Training on augumented user 97861 5/50 current_auc = 0.8130920573232937
User 97861 AUC after training: 0.8135778479475346
User 97861 improves AUC. Keeping the model.
Training on augumented user 45302 6/50 current_auc = 0.8135778479475346
User 45302 AUC after training: 0.8133349526354141
User 45302 does not improve AUC. Reverting changes.
Training on augumented user 106650 7/50 current_auc = 0.8135778479475346
User 106650 AUC after training: 0.8133349526354141
User 106650 does not improve AUC. Reverting changes.
Training on augumented user 129230 8/50 current_auc = 0.8135778479475346
User 129230 AUC after training: 0.8132135049793539
User 129230 does not improve AUC. Reverting changes.
Training on augumented user 81881 9/50 current_auc = 0.8135778479475346
User 81881 AUC after training: 0.8133956764634442
User 81881 does not improve AUC. Reverting changes.
Training on augumented user 60456 10/50 current_auc = 0.8135778479475346
User 60456 AUC after training: 0.8139725528297304
User 60456 improves AUC. Keeping the model.
Training on augumented user 137441 11/50 current_auc = 0.8139725528297304
User 137441 AUC after training: 0.8134260383774593
User 137441 does not improve AUC. Reverting changes.
Training on augumented user 58287 12/50 current_auc = 0.8139725528297304
User 58287 AUC after training: 0.8139118290017002
User 58287 does not improve AUC. Reverting changes.
Training on augumented user 101153 13/50 current_auc = 0.8139725528297304
User 101153 AUC after training: 0.8136082098615497
User 101153 does not improve AUC. Reverting changes.
Training on augumented user 75198 14/50 current_auc = 0.8139725528297304
User 75198 AUC after training: 0.8130313334952636
User 75198 does not improve AUC. Reverting changes.
Training on augumented user 118281 15/50 current_auc = 0.8139725528297304
User 118281 AUC after training: 0.8139118290017002
User 118281 does not improve AUC. Reverting changes.
Training on augumented user 78075 16/50 current_auc = 0.8139725528297304
User 78075 AUC after training: 0.8138511051736701
User 78075 does not improve AUC. Reverting changes.
Training on augumented user 27295 17/50 current_auc = 0.8139725528297304
User 27295 AUC after training: 0.8140940004857906
User 27295 improves AUC. Keeping the model.
Training on augumented user 71395 18/50 current_auc = 0.8140940004857906
User 71395 AUC after training: 0.8140332766577605
User 71395 does not improve AUC. Reverting changes.
Training on augumented user 123413 19/50 current_auc = 0.8140940004857906
User 123413 AUC after training: 0.8139118290017002
User 123413 does not improve AUC. Reverting changes.
Training on augumented user 101094 20/50 current_auc = 0.8140940004857906
User 101094 AUC after training: 0.8131224192373088
User 101094 does not improve AUC. Reverting changes.
Training on augumented user 95166 21/50 current_auc = 0.8140940004857906
User 95166 AUC after training: 0.8136082098615496
User 95166 does not improve AUC. Reverting changes.
Training on augumented user 91530 22/50 current_auc = 0.8140940004857906
User 91530 AUC after training: 0.8139725528297304
User 91530 does not improve AUC. Reverting changes.
Training on augumented user 4774 23/50 current_auc = 0.8140940004857906
User 4774 AUC after training: 0.8139118290017002
User 4774 does not improve AUC. Reverting changes.
Training on augumented user 76040 24/50 current_auc = 0.8140940004857906
User 76040 AUC after training: 0.8140940004857906
User 76040 does not improve AUC. Reverting changes.
Training on augumented user 14759 25/50 current_auc = 0.8140940004857906
User 14759 AUC after training: 0.8135474860335196
User 14759 does not improve AUC. Reverting changes.
Training on augumented user 55341 26/50 current_auc = 0.8140940004857906
User 55341 AUC after training: 0.8141547243138207
User 55341 improves AUC. Keeping the model.
Training on augumented user 49706 27/50 current_auc = 0.8141547243138207
User 49706 AUC after training: 0.8141547243138207
User 49706 does not improve AUC. Reverting changes.
Training on augumented user 14028 28/50 current_auc = 0.8141547243138207
User 14028 AUC after training: 0.8141547243138207
User 14028 does not improve AUC. Reverting changes.
Training on augumented user 126711 29/50 current_auc = 0.8141547243138207
User 126711 AUC after training: 0.8140332766577605
User 126711 does not improve AUC. Reverting changes.
Training on augumented user 89265 30/50 current_auc = 0.8141547243138207
User 89265 AUC after training: 0.8140332766577605
User 89265 does not improve AUC. Reverting changes.
Training on augumented user 1378 31/50 current_auc = 0.8141547243138207
User 1378 AUC after training: 0.8132135049793539
User 1378 does not improve AUC. Reverting changes.
Training on augumented user 97649 32/50 current_auc = 0.8141547243138207
User 97649 AUC after training: 0.8142154481418509
User 97649 improves AUC. Keeping the model.
Training on augumented user 93484 33/50 current_auc = 0.8142154481418509
User 93484 AUC after training: 0.8140636385717755
User 93484 does not improve AUC. Reverting changes.
Training on augumented user 77362 34/50 current_auc = 0.8142154481418509
User 77362 AUC after training: 0.8138511051736701
User 77362 does not improve AUC. Reverting changes.
Training on augumented user 23032 35/50 current_auc = 0.8142154481418509
User 23032 AUC after training: 0.8137296575176098
User 23032 does not improve AUC. Reverting changes.
Training on augumented user 77863 36/50 current_auc = 0.8142154481418509
User 77863 AUC after training: 0.8139118290017002
User 77863 does not improve AUC. Reverting changes.
Training on augumented user 132534 37/50 current_auc = 0.8142154481418509
User 132534 AUC after training: 0.8143368957979111
User 132534 improves AUC. Keeping the model.
Training on augumented user 68926 38/50 current_auc = 0.8143368957979111
User 68926 AUC after training: 0.8148530483361671
User 68926 improves AUC. Keeping the model.
Training on augumented user 20853 39/50 current_auc = 0.8148530483361671
User 20853 AUC after training: 0.8149137721641972
User 20853 improves AUC. Keeping the model.
Training on augumented user 21187 40/50 current_auc = 0.8149137721641972
User 21187 AUC after training: 0.8151566674763177
User 21187 improves AUC. Keeping the model.
Training on augumented user 130255 41/50 current_auc = 0.8151566674763177
User 130255 AUC after training: 0.8152477532183628
User 130255 improves AUC. Keeping the model.
Training on augumented user 5333 42/50 current_auc = 0.8152477532183628
User 5333 AUC after training: 0.8147012387660918
User 5333 does not improve AUC. Reverting changes.
Training on augumented user 67297 43/50 current_auc = 0.8152477532183628
User 67297 AUC after training: 0.8145797911100315
User 67297 does not improve AUC. Reverting changes.
Training on augumented user 14225 44/50 current_auc = 0.8152477532183628
User 14225 AUC after training: 0.8144583434539714
User 14225 does not improve AUC. Reverting changes.
Training on augumented user 121782 45/50 current_auc = 0.8152477532183628
User 121782 AUC after training: 0.8150352198202575
User 121782 does not improve AUC. Reverting changes.
Training on augumented user 49951 46/50 current_auc = 0.8152477532183628
User 49951 AUC after training: 0.8154906485304834
User 49951 improves AUC. Keeping the model.
Training on augumented user 82787 47/50 current_auc = 0.8154906485304834
User 82787 AUC after training: 0.8154906485304834
User 82787 does not improve AUC. Reverting changes.
Training on augumented user 14724 48/50 current_auc = 0.8154906485304834
User 14724 AUC after training: 0.8136385717755648
User 14724 does not improve AUC. Reverting changes.
Training on augumented user 130789 49/50 current_auc = 0.8154906485304834
User 130789 AUC after training: 0.8147012387660918
User 130789 does not improve AUC. Reverting changes.
[2024-12-02 18:35:45.677459] start test user 29678 99/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:46.158115] start test user 29678 99/568 recall augumented users by random, augumented_users = [87767, 98737, 10363, 17417, 27361, 67434, 32229, 68733, 9743, 12880, 131656, 13558, 3452, 61680, 55954, 117038, 35001, 91070, 106599, 57616, 20528, 83375, 91452, 102164, 135368, 127930, 7803, 102430, 87736, 117019, 112899, 116855, 82838, 21809, 6640, 71619, 12881, 107264, 13419, 137830, 63782, 14112, 111140, 46116, 95122, 97886, 68227, 104569, 9438, 24942]
[2024-12-02 18:35:46.173242] user = 29678 Cloud 99/568
[2024-12-02 18:35:46.193308] user = 29678 Local 99/568
[2024-12-02 18:35:46.237822] user = 29678 Local+ 99/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:48.910128] user = 29678 MPDA- 99/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 87767 0/50 current_auc = 0.0
User 87767 AUC after training: 0.0
User 87767 does not improve AUC. Reverting changes.
Training on augumented user 98737 1/50 current_auc = 0.0
User 98737 AUC after training: 0.0
User 98737 does not improve AUC. Reverting changes.
Training on augumented user 10363 2/50 current_auc = 0.0
User 10363 AUC after training: 0.0
User 10363 does not improve AUC. Reverting changes.
Training on augumented user 17417 3/50 current_auc = 0.0
User 17417 AUC after training: 0.0
User 17417 does not improve AUC. Reverting changes.
Training on augumented user 27361 4/50 current_auc = 0.0
User 27361 AUC after training: 0.0
User 27361 does not improve AUC. Reverting changes.
Training on augumented user 67434 5/50 current_auc = 0.0
User 67434 AUC after training: 0.0
User 67434 does not improve AUC. Reverting changes.
Training on augumented user 32229 6/50 current_auc = 0.0
User 32229 AUC after training: 0.0
User 32229 does not improve AUC. Reverting changes.
Training on augumented user 68733 7/50 current_auc = 0.0
User 68733 AUC after training: 0.0
User 68733 does not improve AUC. Reverting changes.
Training on augumented user 9743 8/50 current_auc = 0.0
User 9743 AUC after training: 0.0
User 9743 does not improve AUC. Reverting changes.
Training on augumented user 12880 9/50 current_auc = 0.0
User 12880 AUC after training: 0.0
User 12880 does not improve AUC. Reverting changes.
Training on augumented user 131656 10/50 current_auc = 0.0
User 131656 AUC after training: 0.0
User 131656 does not improve AUC. Reverting changes.
Training on augumented user 13558 11/50 current_auc = 0.0
User 13558 AUC after training: 0.0
User 13558 does not improve AUC. Reverting changes.
Training on augumented user 3452 12/50 current_auc = 0.0
User 3452 AUC after training: 0.0
User 3452 does not improve AUC. Reverting changes.
Training on augumented user 61680 13/50 current_auc = 0.0
User 61680 AUC after training: 0.0
User 61680 does not improve AUC. Reverting changes.
Training on augumented user 55954 14/50 current_auc = 0.0
User 55954 AUC after training: 0.0
User 55954 does not improve AUC. Reverting changes.
Training on augumented user 117038 15/50 current_auc = 0.0
User 117038 AUC after training: 0.0
User 117038 does not improve AUC. Reverting changes.
Training on augumented user 35001 16/50 current_auc = 0.0
User 35001 AUC after training: 0.0
User 35001 does not improve AUC. Reverting changes.
Training on augumented user 91070 17/50 current_auc = 0.0
User 91070 AUC after training: 0.11111111111111112
User 91070 improves AUC. Keeping the model.
Training on augumented user 106599 18/50 current_auc = 0.11111111111111112
User 106599 AUC after training: 0.11111111111111112
User 106599 does not improve AUC. Reverting changes.
Training on augumented user 57616 19/50 current_auc = 0.11111111111111112
User 57616 AUC after training: 0.0
User 57616 does not improve AUC. Reverting changes.
Training on augumented user 20528 20/50 current_auc = 0.11111111111111112
User 20528 AUC after training: 0.11111111111111112
User 20528 does not improve AUC. Reverting changes.
Training on augumented user 83375 21/50 current_auc = 0.11111111111111112
User 83375 AUC after training: 0.11111111111111112
User 83375 does not improve AUC. Reverting changes.
Training on augumented user 91452 22/50 current_auc = 0.11111111111111112
User 91452 AUC after training: 0.11111111111111112
User 91452 does not improve AUC. Reverting changes.
Training on augumented user 102164 23/50 current_auc = 0.11111111111111112
User 102164 AUC after training: 0.0
User 102164 does not improve AUC. Reverting changes.
Training on augumented user 135368 24/50 current_auc = 0.11111111111111112
User 135368 AUC after training: 0.11111111111111112
User 135368 does not improve AUC. Reverting changes.
Training on augumented user 127930 25/50 current_auc = 0.11111111111111112
User 127930 AUC after training: 0.0
User 127930 does not improve AUC. Reverting changes.
Training on augumented user 7803 26/50 current_auc = 0.11111111111111112
User 7803 AUC after training: 0.0
User 7803 does not improve AUC. Reverting changes.
Training on augumented user 102430 27/50 current_auc = 0.11111111111111112
User 102430 AUC after training: 0.0
User 102430 does not improve AUC. Reverting changes.
Training on augumented user 87736 28/50 current_auc = 0.11111111111111112
User 87736 AUC after training: 0.11111111111111112
User 87736 does not improve AUC. Reverting changes.
Training on augumented user 117019 29/50 current_auc = 0.11111111111111112
User 117019 AUC after training: 0.11111111111111112
User 117019 does not improve AUC. Reverting changes.
Training on augumented user 112899 30/50 current_auc = 0.11111111111111112
User 112899 AUC after training: 0.11111111111111112
User 112899 does not improve AUC. Reverting changes.
Training on augumented user 116855 31/50 current_auc = 0.11111111111111112
User 116855 AUC after training: 0.11111111111111112
User 116855 does not improve AUC. Reverting changes.
Training on augumented user 82838 32/50 current_auc = 0.11111111111111112
User 82838 AUC after training: 0.0
User 82838 does not improve AUC. Reverting changes.
Training on augumented user 21809 33/50 current_auc = 0.11111111111111112
User 21809 AUC after training: 0.0
User 21809 does not improve AUC. Reverting changes.
Training on augumented user 6640 34/50 current_auc = 0.11111111111111112
User 6640 AUC after training: 0.0
User 6640 does not improve AUC. Reverting changes.
Training on augumented user 71619 35/50 current_auc = 0.11111111111111112
User 71619 AUC after training: 0.11111111111111112
User 71619 does not improve AUC. Reverting changes.
Training on augumented user 12881 36/50 current_auc = 0.11111111111111112
User 12881 AUC after training: 0.0
User 12881 does not improve AUC. Reverting changes.
Training on augumented user 107264 37/50 current_auc = 0.11111111111111112
User 107264 AUC after training: 0.0
User 107264 does not improve AUC. Reverting changes.
Training on augumented user 13419 38/50 current_auc = 0.11111111111111112
User 13419 AUC after training: 0.11111111111111112
User 13419 does not improve AUC. Reverting changes.
Training on augumented user 137830 39/50 current_auc = 0.11111111111111112
User 137830 AUC after training: 0.11111111111111112
User 137830 does not improve AUC. Reverting changes.
Training on augumented user 63782 40/50 current_auc = 0.11111111111111112
User 63782 AUC after training: 0.11111111111111112
User 63782 does not improve AUC. Reverting changes.
Training on augumented user 14112 41/50 current_auc = 0.11111111111111112
User 14112 AUC after training: 0.11111111111111112
User 14112 does not improve AUC. Reverting changes.
Training on augumented user 111140 42/50 current_auc = 0.11111111111111112
User 111140 AUC after training: 0.0
User 111140 does not improve AUC. Reverting changes.
Training on augumented user 46116 43/50 current_auc = 0.11111111111111112
User 46116 AUC after training: 0.0
User 46116 does not improve AUC. Reverting changes.
Training on augumented user 95122 44/50 current_auc = 0.11111111111111112
User 95122 AUC after training: 0.11111111111111112
User 95122 does not improve AUC. Reverting changes.
Training on augumented user 97886 45/50 current_auc = 0.11111111111111112
User 97886 AUC after training: 0.0
User 97886 does not improve AUC. Reverting changes.
Training on augumented user 68227 46/50 current_auc = 0.11111111111111112
User 68227 AUC after training: 0.11111111111111112
User 68227 does not improve AUC. Reverting changes.
Training on augumented user 104569 47/50 current_auc = 0.11111111111111112
User 104569 AUC after training: 0.0
User 104569 does not improve AUC. Reverting changes.
Training on augumented user 9438 48/50 current_auc = 0.11111111111111112
User 9438 AUC after training: 0.11111111111111112
User 9438 does not improve AUC. Reverting changes.
Training on augumented user 24942 49/50 current_auc = 0.11111111111111112
User 24942 AUC after training: 0.0
User 24942 does not improve AUC. Reverting changes.
[2024-12-02 18:36:19.157424] start test user 29687 100/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:19.789919] start test user 29687 100/568 recall augumented users by random, augumented_users = [109208, 54021, 123142, 124738, 83430, 11101, 19896, 102199, 23506, 99723, 36708, 91240, 88728, 132008, 67951, 40945, 42868, 88858, 36163, 63125, 30678, 58530, 41389, 48916, 9357, 36643, 9388, 82075, 64598, 6617, 122935, 58371, 85592, 58994, 21225, 72129, 88246, 28242, 36538, 91315, 12208, 16283, 116615, 39876, 82473, 114186, 42361, 114995, 111078, 7184]
[2024-12-02 18:36:19.805833] user = 29687 Cloud 100/568
[2024-12-02 18:36:19.815427] user = 29687 Local 100/568
[2024-12-02 18:36:19.932588] user = 29687 Local+ 100/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:22.621954] user = 29687 MPDA- 100/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5694444444444444
Training on augumented user 109208 0/50 current_auc = 0.5694444444444444
User 109208 AUC after training: 0.5694444444444444
User 109208 does not improve AUC. Reverting changes.
Training on augumented user 54021 1/50 current_auc = 0.5694444444444444
User 54021 AUC after training: 0.5694444444444444
User 54021 does not improve AUC. Reverting changes.
Training on augumented user 123142 2/50 current_auc = 0.5694444444444444
User 123142 AUC after training: 0.5694444444444444
User 123142 does not improve AUC. Reverting changes.
Training on augumented user 124738 3/50 current_auc = 0.5694444444444444
User 124738 AUC after training: 0.5694444444444444
User 124738 does not improve AUC. Reverting changes.
Training on augumented user 83430 4/50 current_auc = 0.5694444444444444
User 83430 AUC after training: 0.5694444444444444
User 83430 does not improve AUC. Reverting changes.
Training on augumented user 11101 5/50 current_auc = 0.5694444444444444
User 11101 AUC after training: 0.5694444444444444
User 11101 does not improve AUC. Reverting changes.
Training on augumented user 19896 6/50 current_auc = 0.5694444444444444
User 19896 AUC after training: 0.5694444444444444
User 19896 does not improve AUC. Reverting changes.
Training on augumented user 102199 7/50 current_auc = 0.5694444444444444
User 102199 AUC after training: 0.5694444444444444
User 102199 does not improve AUC. Reverting changes.
Training on augumented user 23506 8/50 current_auc = 0.5694444444444444
User 23506 AUC after training: 0.5694444444444444
User 23506 does not improve AUC. Reverting changes.
Training on augumented user 99723 9/50 current_auc = 0.5694444444444444
User 99723 AUC after training: 0.5694444444444444
User 99723 does not improve AUC. Reverting changes.
Training on augumented user 36708 10/50 current_auc = 0.5694444444444444
User 36708 AUC after training: 0.5694444444444444
User 36708 does not improve AUC. Reverting changes.
Training on augumented user 91240 11/50 current_auc = 0.5694444444444444
User 91240 AUC after training: 0.5694444444444444
User 91240 does not improve AUC. Reverting changes.
Training on augumented user 88728 12/50 current_auc = 0.5694444444444444
User 88728 AUC after training: 0.5694444444444444
User 88728 does not improve AUC. Reverting changes.
Training on augumented user 132008 13/50 current_auc = 0.5694444444444444
User 132008 AUC after training: 0.5694444444444444
User 132008 does not improve AUC. Reverting changes.
Training on augumented user 67951 14/50 current_auc = 0.5694444444444444
User 67951 AUC after training: 0.5694444444444444
User 67951 does not improve AUC. Reverting changes.
Training on augumented user 40945 15/50 current_auc = 0.5694444444444444
User 40945 AUC after training: 0.5694444444444444
User 40945 does not improve AUC. Reverting changes.
Training on augumented user 42868 16/50 current_auc = 0.5694444444444444
User 42868 AUC after training: 0.5694444444444444
User 42868 does not improve AUC. Reverting changes.
Training on augumented user 88858 17/50 current_auc = 0.5694444444444444
User 88858 AUC after training: 0.5694444444444444
User 88858 does not improve AUC. Reverting changes.
Training on augumented user 36163 18/50 current_auc = 0.5694444444444444
User 36163 AUC after training: 0.5694444444444444
User 36163 does not improve AUC. Reverting changes.
Training on augumented user 63125 19/50 current_auc = 0.5694444444444444
User 63125 AUC after training: 0.5694444444444444
User 63125 does not improve AUC. Reverting changes.
Training on augumented user 30678 20/50 current_auc = 0.5694444444444444
User 30678 AUC after training: 0.5694444444444444
User 30678 does not improve AUC. Reverting changes.
Training on augumented user 58530 21/50 current_auc = 0.5694444444444444
User 58530 AUC after training: 0.5694444444444444
User 58530 does not improve AUC. Reverting changes.
Training on augumented user 41389 22/50 current_auc = 0.5694444444444444
User 41389 AUC after training: 0.5694444444444444
User 41389 does not improve AUC. Reverting changes.
Training on augumented user 48916 23/50 current_auc = 0.5694444444444444
User 48916 AUC after training: 0.5694444444444444
User 48916 does not improve AUC. Reverting changes.
Training on augumented user 9357 24/50 current_auc = 0.5694444444444444
User 9357 AUC after training: 0.5694444444444444
User 9357 does not improve AUC. Reverting changes.
Training on augumented user 36643 25/50 current_auc = 0.5694444444444444
User 36643 AUC after training: 0.5694444444444444
User 36643 does not improve AUC. Reverting changes.
Training on augumented user 9388 26/50 current_auc = 0.5694444444444444
User 9388 AUC after training: 0.5694444444444444
User 9388 does not improve AUC. Reverting changes.
Training on augumented user 82075 27/50 current_auc = 0.5694444444444444
User 82075 AUC after training: 0.5694444444444444
User 82075 does not improve AUC. Reverting changes.
Training on augumented user 64598 28/50 current_auc = 0.5694444444444444
User 64598 AUC after training: 0.5694444444444444
User 64598 does not improve AUC. Reverting changes.
Training on augumented user 6617 29/50 current_auc = 0.5694444444444444
User 6617 AUC after training: 0.5694444444444444
User 6617 does not improve AUC. Reverting changes.
Training on augumented user 122935 30/50 current_auc = 0.5694444444444444
User 122935 AUC after training: 0.5694444444444444
User 122935 does not improve AUC. Reverting changes.
Training on augumented user 58371 31/50 current_auc = 0.5694444444444444
User 58371 AUC after training: 0.5694444444444444
User 58371 does not improve AUC. Reverting changes.
Training on augumented user 85592 32/50 current_auc = 0.5694444444444444
User 85592 AUC after training: 0.5694444444444444
User 85592 does not improve AUC. Reverting changes.
Training on augumented user 58994 33/50 current_auc = 0.5694444444444444
User 58994 AUC after training: 0.5694444444444444
User 58994 does not improve AUC. Reverting changes.
Training on augumented user 21225 34/50 current_auc = 0.5694444444444444
User 21225 AUC after training: 0.5694444444444444
User 21225 does not improve AUC. Reverting changes.
Training on augumented user 72129 35/50 current_auc = 0.5694444444444444
User 72129 AUC after training: 0.5694444444444444
User 72129 does not improve AUC. Reverting changes.
Training on augumented user 88246 36/50 current_auc = 0.5694444444444444
User 88246 AUC after training: 0.5694444444444444
User 88246 does not improve AUC. Reverting changes.
Training on augumented user 28242 37/50 current_auc = 0.5694444444444444
User 28242 AUC after training: 0.5694444444444444
User 28242 does not improve AUC. Reverting changes.
Training on augumented user 36538 38/50 current_auc = 0.5694444444444444
User 36538 AUC after training: 0.5694444444444444
User 36538 does not improve AUC. Reverting changes.
Training on augumented user 91315 39/50 current_auc = 0.5694444444444444
User 91315 AUC after training: 0.5694444444444444
User 91315 does not improve AUC. Reverting changes.
Training on augumented user 12208 40/50 current_auc = 0.5694444444444444
User 12208 AUC after training: 0.5694444444444444
User 12208 does not improve AUC. Reverting changes.
Training on augumented user 16283 41/50 current_auc = 0.5694444444444444
User 16283 AUC after training: 0.5694444444444444
User 16283 does not improve AUC. Reverting changes.
Training on augumented user 116615 42/50 current_auc = 0.5694444444444444
User 116615 AUC after training: 0.5694444444444444
User 116615 does not improve AUC. Reverting changes.
Training on augumented user 39876 43/50 current_auc = 0.5694444444444444
User 39876 AUC after training: 0.5694444444444444
User 39876 does not improve AUC. Reverting changes.
Training on augumented user 82473 44/50 current_auc = 0.5694444444444444
User 82473 AUC after training: 0.5694444444444444
User 82473 does not improve AUC. Reverting changes.
Training on augumented user 114186 45/50 current_auc = 0.5694444444444444
User 114186 AUC after training: 0.5694444444444444
User 114186 does not improve AUC. Reverting changes.
Training on augumented user 42361 46/50 current_auc = 0.5694444444444444
User 42361 AUC after training: 0.5694444444444444
User 42361 does not improve AUC. Reverting changes.
Training on augumented user 114995 47/50 current_auc = 0.5694444444444444
User 114995 AUC after training: 0.5694444444444444
User 114995 does not improve AUC. Reverting changes.
Training on augumented user 111078 48/50 current_auc = 0.5694444444444444
User 111078 AUC after training: 0.5694444444444444
User 111078 does not improve AUC. Reverting changes.
Training on augumented user 7184 49/50 current_auc = 0.5694444444444444
User 7184 AUC after training: 0.5833333333333333
User 7184 improves AUC. Keeping the model.
[2024-12-02 18:36:54.586789] start test user 29690 101/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:55.485876] start test user 29690 101/568 recall augumented users by random, augumented_users = [99630, 51032, 131207, 91427, 108638, 33891, 34872, 16190, 10801, 132205, 85480, 45447, 112502, 92568, 75874, 38517, 59837, 85239, 25065, 43704, 83511, 35802, 32301, 106065, 12484, 67738, 131701, 47366, 131617, 114542, 61394, 117807, 74159, 39036, 129206, 67212, 5072, 29446, 108457, 61408, 85424, 25974, 16705, 73292, 68706, 103800, 70903, 73633, 119766, 123137]
[2024-12-02 18:36:55.501148] user = 29690 Cloud 101/568
[2024-12-02 18:36:55.528375] user = 29690 Local 101/568
[2024-12-02 18:36:55.677012] user = 29690 Local+ 101/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:58.005643] user = 29690 MPDA- 101/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6372584541062802
Training on augumented user 99630 0/50 current_auc = 0.6372584541062802
User 99630 AUC after training: 0.6393719806763285
User 99630 improves AUC. Keeping the model.
Training on augumented user 51032 1/50 current_auc = 0.6393719806763285
User 51032 AUC after training: 0.6392512077294685
User 51032 does not improve AUC. Reverting changes.
Training on augumented user 131207 2/50 current_auc = 0.6393719806763285
User 131207 AUC after training: 0.6391304347826087
User 131207 does not improve AUC. Reverting changes.
Training on augumented user 91427 3/50 current_auc = 0.6393719806763285
User 91427 AUC after training: 0.6390096618357488
User 91427 does not improve AUC. Reverting changes.
Training on augumented user 108638 4/50 current_auc = 0.6393719806763285
User 108638 AUC after training: 0.6394927536231885
User 108638 improves AUC. Keeping the model.
Training on augumented user 33891 5/50 current_auc = 0.6394927536231885
User 33891 AUC after training: 0.6393719806763285
User 33891 does not improve AUC. Reverting changes.
Training on augumented user 34872 6/50 current_auc = 0.6394927536231885
User 34872 AUC after training: 0.6390096618357487
User 34872 does not improve AUC. Reverting changes.
Training on augumented user 16190 7/50 current_auc = 0.6394927536231885
User 16190 AUC after training: 0.6392512077294686
User 16190 does not improve AUC. Reverting changes.
Training on augumented user 10801 8/50 current_auc = 0.6394927536231885
User 10801 AUC after training: 0.6382850241545894
User 10801 does not improve AUC. Reverting changes.
Training on augumented user 132205 9/50 current_auc = 0.6394927536231885
User 132205 AUC after training: 0.6393719806763285
User 132205 does not improve AUC. Reverting changes.
Training on augumented user 85480 10/50 current_auc = 0.6394927536231885
User 85480 AUC after training: 0.6393115942028985
User 85480 does not improve AUC. Reverting changes.
Training on augumented user 45447 11/50 current_auc = 0.6394927536231885
User 45447 AUC after training: 0.6404589371980676
User 45447 improves AUC. Keeping the model.
Training on augumented user 112502 12/50 current_auc = 0.6404589371980676
User 112502 AUC after training: 0.6381642512077295
User 112502 does not improve AUC. Reverting changes.
Training on augumented user 92568 13/50 current_auc = 0.6404589371980676
User 92568 AUC after training: 0.6396135265700482
User 92568 does not improve AUC. Reverting changes.
Training on augumented user 75874 14/50 current_auc = 0.6404589371980676
User 75874 AUC after training: 0.6407004830917874
User 75874 improves AUC. Keeping the model.
Training on augumented user 38517 15/50 current_auc = 0.6407004830917874
User 38517 AUC after training: 0.6408212560386473
User 38517 improves AUC. Keeping the model.
Training on augumented user 59837 16/50 current_auc = 0.6408212560386473
User 59837 AUC after training: 0.639915458937198
User 59837 does not improve AUC. Reverting changes.
Training on augumented user 85239 17/50 current_auc = 0.6408212560386473
User 85239 AUC after training: 0.640036231884058
User 85239 does not improve AUC. Reverting changes.
Training on augumented user 25065 18/50 current_auc = 0.6408212560386473
User 25065 AUC after training: 0.641243961352657
User 25065 improves AUC. Keeping the model.
Training on augumented user 43704 19/50 current_auc = 0.641243961352657
User 43704 AUC after training: 0.6402173913043478
User 43704 does not improve AUC. Reverting changes.
Training on augumented user 83511 20/50 current_auc = 0.641243961352657
User 83511 AUC after training: 0.6409420289855072
User 83511 does not improve AUC. Reverting changes.
Training on augumented user 35802 21/50 current_auc = 0.641243961352657
User 35802 AUC after training: 0.6398550724637682
User 35802 does not improve AUC. Reverting changes.
Training on augumented user 32301 22/50 current_auc = 0.641243961352657
User 32301 AUC after training: 0.6408212560386475
User 32301 does not improve AUC. Reverting changes.
Training on augumented user 106065 23/50 current_auc = 0.641243961352657
User 106065 AUC after training: 0.6417270531400967
User 106065 improves AUC. Keeping the model.
Training on augumented user 12484 24/50 current_auc = 0.6417270531400967
User 12484 AUC after training: 0.6409420289855072
User 12484 does not improve AUC. Reverting changes.
Training on augumented user 67738 25/50 current_auc = 0.6417270531400967
User 67738 AUC after training: 0.641243961352657
User 67738 does not improve AUC. Reverting changes.
Training on augumented user 131701 26/50 current_auc = 0.6417270531400967
User 131701 AUC after training: 0.6412439613526569
User 131701 does not improve AUC. Reverting changes.
Training on augumented user 47366 27/50 current_auc = 0.6417270531400967
User 47366 AUC after training: 0.6417874396135266
User 47366 improves AUC. Keeping the model.
Training on augumented user 131617 28/50 current_auc = 0.6417874396135266
User 131617 AUC after training: 0.6409420289855072
User 131617 does not improve AUC. Reverting changes.
Training on augumented user 114542 29/50 current_auc = 0.6417874396135266
User 114542 AUC after training: 0.6411835748792271
User 114542 does not improve AUC. Reverting changes.
Training on augumented user 61394 30/50 current_auc = 0.6417874396135266
User 61394 AUC after training: 0.6405797101449275
User 61394 does not improve AUC. Reverting changes.
Training on augumented user 117807 31/50 current_auc = 0.6417874396135266
User 117807 AUC after training: 0.6409420289855072
User 117807 does not improve AUC. Reverting changes.
Training on augumented user 74159 32/50 current_auc = 0.6417874396135266
User 74159 AUC after training: 0.6411835748792271
User 74159 does not improve AUC. Reverting changes.
Training on augumented user 39036 33/50 current_auc = 0.6417874396135266
User 39036 AUC after training: 0.6415458937198069
User 39036 does not improve AUC. Reverting changes.
Training on augumented user 129206 34/50 current_auc = 0.6417874396135266
User 129206 AUC after training: 0.6402173913043478
User 129206 does not improve AUC. Reverting changes.
Training on augumented user 67212 35/50 current_auc = 0.6417874396135266
User 67212 AUC after training: 0.6407004830917875
User 67212 does not improve AUC. Reverting changes.
Training on augumented user 5072 36/50 current_auc = 0.6417874396135266
User 5072 AUC after training: 0.639975845410628
User 5072 does not improve AUC. Reverting changes.
Training on augumented user 29446 37/50 current_auc = 0.6417874396135266
User 29446 AUC after training: 0.6408212560386474
User 29446 does not improve AUC. Reverting changes.
Training on augumented user 108457 38/50 current_auc = 0.6417874396135266
User 108457 AUC after training: 0.6417270531400967
User 108457 does not improve AUC. Reverting changes.
Training on augumented user 61408 39/50 current_auc = 0.6417874396135266
User 61408 AUC after training: 0.6407004830917875
User 61408 does not improve AUC. Reverting changes.
Training on augumented user 85424 40/50 current_auc = 0.6417874396135266
User 85424 AUC after training: 0.6418478260869565
User 85424 improves AUC. Keeping the model.
Training on augumented user 25974 41/50 current_auc = 0.6418478260869565
User 25974 AUC after training: 0.6414251207729469
User 25974 does not improve AUC. Reverting changes.
Training on augumented user 16705 42/50 current_auc = 0.6418478260869565
User 16705 AUC after training: 0.6407004830917875
User 16705 does not improve AUC. Reverting changes.
Training on augumented user 73292 43/50 current_auc = 0.6418478260869565
User 73292 AUC after training: 0.6419685990338164
User 73292 improves AUC. Keeping the model.
Training on augumented user 68706 44/50 current_auc = 0.6419685990338164
User 68706 AUC after training: 0.6407004830917874
User 68706 does not improve AUC. Reverting changes.
Training on augumented user 103800 45/50 current_auc = 0.6419685990338164
User 103800 AUC after training: 0.6411835748792271
User 103800 does not improve AUC. Reverting changes.
Training on augumented user 70903 46/50 current_auc = 0.6419685990338164
User 70903 AUC after training: 0.6411835748792271
User 70903 does not improve AUC. Reverting changes.
Training on augumented user 73633 47/50 current_auc = 0.6419685990338164
User 73633 AUC after training: 0.6423309178743961
User 73633 improves AUC. Keeping the model.
Training on augumented user 119766 48/50 current_auc = 0.6423309178743961
User 119766 AUC after training: 0.6422101449275363
User 119766 does not improve AUC. Reverting changes.
Training on augumented user 123137 49/50 current_auc = 0.6423309178743961
User 123137 AUC after training: 0.6415458937198067
User 123137 does not improve AUC. Reverting changes.
[2024-12-02 18:37:34.058526] start test user 29756 102/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:34.666049] start test user 29756 102/568 recall augumented users by random, augumented_users = [62692, 95589, 48978, 126747, 37878, 114298, 102509, 22909, 26595, 112812, 39769, 97355, 106873, 123491, 9131, 65704, 28620, 98208, 25762, 48082, 91352, 111374, 102669, 136820, 61206, 136454, 4077, 12476, 29003, 19799, 49455, 136508, 116898, 117640, 17874, 28295, 77923, 49843, 100686, 24282, 59312, 46793, 18135, 97340, 86116, 137156, 122072, 66927, 65524, 123267]
[2024-12-02 18:37:34.681255] user = 29756 Cloud 102/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:37:34.687805] user = 29756 Local 102/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:37:34.743052] user = 29756 Local+ 102/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:37:36.978387] user = 29756 MPDA- 102/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 62692 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62692 AUC after training: 0.5
User 62692 does not improve AUC. Reverting changes.
Training on augumented user 95589 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95589 AUC after training: 0.5
User 95589 does not improve AUC. Reverting changes.
Training on augumented user 48978 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48978 AUC after training: 0.5
User 48978 does not improve AUC. Reverting changes.
Training on augumented user 126747 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126747 AUC after training: 0.5
User 126747 does not improve AUC. Reverting changes.
Training on augumented user 37878 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37878 AUC after training: 0.5
User 37878 does not improve AUC. Reverting changes.
Training on augumented user 114298 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114298 AUC after training: 0.5
User 114298 does not improve AUC. Reverting changes.
Training on augumented user 102509 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102509 AUC after training: 0.5
User 102509 does not improve AUC. Reverting changes.
Training on augumented user 22909 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22909 AUC after training: 0.5
User 22909 does not improve AUC. Reverting changes.
Training on augumented user 26595 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26595 AUC after training: 0.5
User 26595 does not improve AUC. Reverting changes.
Training on augumented user 112812 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112812 AUC after training: 0.5
User 112812 does not improve AUC. Reverting changes.
Training on augumented user 39769 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39769 AUC after training: 0.5
User 39769 does not improve AUC. Reverting changes.
Training on augumented user 97355 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97355 AUC after training: 0.5
User 97355 does not improve AUC. Reverting changes.
Training on augumented user 106873 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106873 AUC after training: 0.5
User 106873 does not improve AUC. Reverting changes.
Training on augumented user 123491 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123491 AUC after training: 0.5
User 123491 does not improve AUC. Reverting changes.
Training on augumented user 9131 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9131 AUC after training: 0.5
User 9131 does not improve AUC. Reverting changes.
Training on augumented user 65704 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65704 AUC after training: 0.5
User 65704 does not improve AUC. Reverting changes.
Training on augumented user 28620 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28620 AUC after training: 0.5
User 28620 does not improve AUC. Reverting changes.
Training on augumented user 98208 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98208 AUC after training: 0.5
User 98208 does not improve AUC. Reverting changes.
Training on augumented user 25762 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25762 AUC after training: 0.5
User 25762 does not improve AUC. Reverting changes.
Training on augumented user 48082 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48082 AUC after training: 0.5
User 48082 does not improve AUC. Reverting changes.
Training on augumented user 91352 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91352 AUC after training: 0.5
User 91352 does not improve AUC. Reverting changes.
Training on augumented user 111374 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111374 AUC after training: 0.5
User 111374 does not improve AUC. Reverting changes.
Training on augumented user 102669 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102669 AUC after training: 0.5
User 102669 does not improve AUC. Reverting changes.
Training on augumented user 136820 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136820 AUC after training: 0.5
User 136820 does not improve AUC. Reverting changes.
Training on augumented user 61206 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61206 AUC after training: 0.5
User 61206 does not improve AUC. Reverting changes.
Training on augumented user 136454 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136454 AUC after training: 0.5
User 136454 does not improve AUC. Reverting changes.
Training on augumented user 4077 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4077 AUC after training: 0.5
User 4077 does not improve AUC. Reverting changes.
Training on augumented user 12476 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12476 AUC after training: 0.5
User 12476 does not improve AUC. Reverting changes.
Training on augumented user 29003 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29003 AUC after training: 0.5
User 29003 does not improve AUC. Reverting changes.
Training on augumented user 19799 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19799 AUC after training: 0.5
User 19799 does not improve AUC. Reverting changes.
Training on augumented user 49455 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49455 AUC after training: 0.5
User 49455 does not improve AUC. Reverting changes.
Training on augumented user 136508 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136508 AUC after training: 0.5
User 136508 does not improve AUC. Reverting changes.
Training on augumented user 116898 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116898 AUC after training: 0.5
User 116898 does not improve AUC. Reverting changes.
Training on augumented user 117640 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117640 AUC after training: 0.5
User 117640 does not improve AUC. Reverting changes.
Training on augumented user 17874 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17874 AUC after training: 0.5
User 17874 does not improve AUC. Reverting changes.
Training on augumented user 28295 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28295 AUC after training: 0.5
User 28295 does not improve AUC. Reverting changes.
Training on augumented user 77923 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77923 AUC after training: 0.5
User 77923 does not improve AUC. Reverting changes.
Training on augumented user 49843 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49843 AUC after training: 0.5
User 49843 does not improve AUC. Reverting changes.
Training on augumented user 100686 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100686 AUC after training: 0.5
User 100686 does not improve AUC. Reverting changes.
Training on augumented user 24282 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24282 AUC after training: 0.5
User 24282 does not improve AUC. Reverting changes.
Training on augumented user 59312 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59312 AUC after training: 0.5
User 59312 does not improve AUC. Reverting changes.
Training on augumented user 46793 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46793 AUC after training: 0.5
User 46793 does not improve AUC. Reverting changes.
Training on augumented user 18135 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18135 AUC after training: 0.5
User 18135 does not improve AUC. Reverting changes.
Training on augumented user 97340 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97340 AUC after training: 0.5
User 97340 does not improve AUC. Reverting changes.
Training on augumented user 86116 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86116 AUC after training: 0.5
User 86116 does not improve AUC. Reverting changes.
Training on augumented user 137156 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137156 AUC after training: 0.5
User 137156 does not improve AUC. Reverting changes.
Training on augumented user 122072 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122072 AUC after training: 0.5
User 122072 does not improve AUC. Reverting changes.
Training on augumented user 66927 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66927 AUC after training: 0.5
User 66927 does not improve AUC. Reverting changes.
Training on augumented user 65524 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65524 AUC after training: 0.5
User 65524 does not improve AUC. Reverting changes.
Training on augumented user 123267 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123267 AUC after training: 0.5
User 123267 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:38:04.078166] start test user 29778 103/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:04.780935] start test user 29778 103/568 recall augumented users by random, augumented_users = [75123, 38623, 116926, 32829, 109878, 77416, 40102, 134622, 47841, 61985, 68737, 85995, 109769, 20415, 54522, 73501, 30440, 18041, 124848, 53036, 20196, 129407, 99426, 14076, 74600, 88254, 21388, 137927, 71037, 23065, 137852, 50792, 94255, 69282, 60600, 112583, 63060, 2176, 97686, 106186, 138383, 136544, 121688, 127587, 12924, 91030, 6113, 49241, 95774, 47863]
[2024-12-02 18:38:04.810594] user = 29778 Cloud 103/568
[2024-12-02 18:38:04.853849] user = 29778 Local 103/568
[2024-12-02 18:38:04.936411] user = 29778 Local+ 103/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:06.557343] user = 29778 MPDA- 103/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7191666666666666
Training on augumented user 75123 0/50 current_auc = 0.7191666666666666
User 75123 AUC after training: 0.7183333333333334
User 75123 does not improve AUC. Reverting changes.
Training on augumented user 38623 1/50 current_auc = 0.7191666666666666
User 38623 AUC after training: 0.7191666666666666
User 38623 does not improve AUC. Reverting changes.
Training on augumented user 116926 2/50 current_auc = 0.7191666666666666
User 116926 AUC after training: 0.7191666666666666
User 116926 does not improve AUC. Reverting changes.
Training on augumented user 32829 3/50 current_auc = 0.7191666666666666
User 32829 AUC after training: 0.7208333333333333
User 32829 improves AUC. Keeping the model.
Training on augumented user 109878 4/50 current_auc = 0.7208333333333333
User 109878 AUC after training: 0.7191666666666666
User 109878 does not improve AUC. Reverting changes.
Training on augumented user 77416 5/50 current_auc = 0.7208333333333333
User 77416 AUC after training: 0.7191666666666666
User 77416 does not improve AUC. Reverting changes.
Training on augumented user 40102 6/50 current_auc = 0.7208333333333333
User 40102 AUC after training: 0.72
User 40102 does not improve AUC. Reverting changes.
Training on augumented user 134622 7/50 current_auc = 0.7208333333333333
User 134622 AUC after training: 0.72
User 134622 does not improve AUC. Reverting changes.
Training on augumented user 47841 8/50 current_auc = 0.7208333333333333
User 47841 AUC after training: 0.72
User 47841 does not improve AUC. Reverting changes.
Training on augumented user 61985 9/50 current_auc = 0.7208333333333333
User 61985 AUC after training: 0.7208333333333333
User 61985 does not improve AUC. Reverting changes.
Training on augumented user 68737 10/50 current_auc = 0.7208333333333333
User 68737 AUC after training: 0.72
User 68737 does not improve AUC. Reverting changes.
Training on augumented user 85995 11/50 current_auc = 0.7208333333333333
User 85995 AUC after training: 0.72
User 85995 does not improve AUC. Reverting changes.
Training on augumented user 109769 12/50 current_auc = 0.7208333333333333
User 109769 AUC after training: 0.7191666666666666
User 109769 does not improve AUC. Reverting changes.
Training on augumented user 20415 13/50 current_auc = 0.7208333333333333
User 20415 AUC after training: 0.7208333333333333
User 20415 does not improve AUC. Reverting changes.
Training on augumented user 54522 14/50 current_auc = 0.7208333333333333
User 54522 AUC after training: 0.72
User 54522 does not improve AUC. Reverting changes.
Training on augumented user 73501 15/50 current_auc = 0.7208333333333333
User 73501 AUC after training: 0.72
User 73501 does not improve AUC. Reverting changes.
Training on augumented user 30440 16/50 current_auc = 0.7208333333333333
User 30440 AUC after training: 0.72
User 30440 does not improve AUC. Reverting changes.
Training on augumented user 18041 17/50 current_auc = 0.7208333333333333
User 18041 AUC after training: 0.7216666666666667
User 18041 improves AUC. Keeping the model.
Training on augumented user 124848 18/50 current_auc = 0.7216666666666667
User 124848 AUC after training: 0.7208333333333333
User 124848 does not improve AUC. Reverting changes.
Training on augumented user 53036 19/50 current_auc = 0.7216666666666667
User 53036 AUC after training: 0.7204166666666667
User 53036 does not improve AUC. Reverting changes.
Training on augumented user 20196 20/50 current_auc = 0.7216666666666667
User 20196 AUC after training: 0.72
User 20196 does not improve AUC. Reverting changes.
Training on augumented user 129407 21/50 current_auc = 0.7216666666666667
User 129407 AUC after training: 0.7216666666666667
User 129407 does not improve AUC. Reverting changes.
Training on augumented user 99426 22/50 current_auc = 0.7216666666666667
User 99426 AUC after training: 0.7208333333333333
User 99426 does not improve AUC. Reverting changes.
Training on augumented user 14076 23/50 current_auc = 0.7216666666666667
User 14076 AUC after training: 0.7191666666666667
User 14076 does not improve AUC. Reverting changes.
Training on augumented user 74600 24/50 current_auc = 0.7216666666666667
User 74600 AUC after training: 0.7191666666666667
User 74600 does not improve AUC. Reverting changes.
Training on augumented user 88254 25/50 current_auc = 0.7216666666666667
User 88254 AUC after training: 0.7208333333333333
User 88254 does not improve AUC. Reverting changes.
Training on augumented user 21388 26/50 current_auc = 0.7216666666666667
User 21388 AUC after training: 0.7208333333333333
User 21388 does not improve AUC. Reverting changes.
Training on augumented user 137927 27/50 current_auc = 0.7216666666666667
User 137927 AUC after training: 0.7208333333333333
User 137927 does not improve AUC. Reverting changes.
Training on augumented user 71037 28/50 current_auc = 0.7216666666666667
User 71037 AUC after training: 0.72
User 71037 does not improve AUC. Reverting changes.
Training on augumented user 23065 29/50 current_auc = 0.7216666666666667
User 23065 AUC after training: 0.7208333333333333
User 23065 does not improve AUC. Reverting changes.
Training on augumented user 137852 30/50 current_auc = 0.7216666666666667
User 137852 AUC after training: 0.7191666666666667
User 137852 does not improve AUC. Reverting changes.
Training on augumented user 50792 31/50 current_auc = 0.7216666666666667
User 50792 AUC after training: 0.7208333333333333
User 50792 does not improve AUC. Reverting changes.
Training on augumented user 94255 32/50 current_auc = 0.7216666666666667
User 94255 AUC after training: 0.72
User 94255 does not improve AUC. Reverting changes.
Training on augumented user 69282 33/50 current_auc = 0.7216666666666667
User 69282 AUC after training: 0.7191666666666666
User 69282 does not improve AUC. Reverting changes.
Training on augumented user 60600 34/50 current_auc = 0.7216666666666667
User 60600 AUC after training: 0.7191666666666667
User 60600 does not improve AUC. Reverting changes.
Training on augumented user 112583 35/50 current_auc = 0.7216666666666667
User 112583 AUC after training: 0.7208333333333333
User 112583 does not improve AUC. Reverting changes.
Training on augumented user 63060 36/50 current_auc = 0.7216666666666667
User 63060 AUC after training: 0.7208333333333333
User 63060 does not improve AUC. Reverting changes.
Training on augumented user 2176 37/50 current_auc = 0.7216666666666667
User 2176 AUC after training: 0.72
User 2176 does not improve AUC. Reverting changes.
Training on augumented user 97686 38/50 current_auc = 0.7216666666666667
User 97686 AUC after training: 0.7145833333333333
User 97686 does not improve AUC. Reverting changes.
Training on augumented user 106186 39/50 current_auc = 0.7216666666666667
User 106186 AUC after training: 0.7191666666666667
User 106186 does not improve AUC. Reverting changes.
Training on augumented user 138383 40/50 current_auc = 0.7216666666666667
User 138383 AUC after training: 0.7208333333333333
User 138383 does not improve AUC. Reverting changes.
Training on augumented user 136544 41/50 current_auc = 0.7216666666666667
User 136544 AUC after training: 0.7216666666666667
User 136544 does not improve AUC. Reverting changes.
Training on augumented user 121688 42/50 current_auc = 0.7216666666666667
User 121688 AUC after training: 0.7191666666666666
User 121688 does not improve AUC. Reverting changes.
Training on augumented user 127587 43/50 current_auc = 0.7216666666666667
User 127587 AUC after training: 0.72
User 127587 does not improve AUC. Reverting changes.
Training on augumented user 12924 44/50 current_auc = 0.7216666666666667
User 12924 AUC after training: 0.72
User 12924 does not improve AUC. Reverting changes.
Training on augumented user 91030 45/50 current_auc = 0.7216666666666667
User 91030 AUC after training: 0.72
User 91030 does not improve AUC. Reverting changes.
Training on augumented user 6113 46/50 current_auc = 0.7216666666666667
User 6113 AUC after training: 0.7208333333333333
User 6113 does not improve AUC. Reverting changes.
Training on augumented user 49241 47/50 current_auc = 0.7216666666666667
User 49241 AUC after training: 0.7208333333333333
User 49241 does not improve AUC. Reverting changes.
Training on augumented user 95774 48/50 current_auc = 0.7216666666666667
User 95774 AUC after training: 0.7208333333333333
User 95774 does not improve AUC. Reverting changes.
Training on augumented user 47863 49/50 current_auc = 0.7216666666666667
User 47863 AUC after training: 0.7208333333333333
User 47863 does not improve AUC. Reverting changes.
[2024-12-02 18:38:34.327721] start test user 29808 104/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:35.123860] start test user 29808 104/568 recall augumented users by random, augumented_users = [11686, 29740, 86091, 27441, 60826, 26236, 58759, 108046, 127700, 90566, 36077, 30637, 52187, 27465, 39051, 93443, 102343, 105367, 133747, 42993, 8399, 98064, 34838, 8763, 12232, 96007, 138350, 17010, 106284, 21951, 77274, 75530, 136287, 11421, 100244, 81926, 75992, 91143, 2488, 100099, 56839, 126089, 7449, 27339, 46482, 120239, 53678, 43737, 41153, 43864]
[2024-12-02 18:38:35.139561] user = 29808 Cloud 104/568
[2024-12-02 18:38:35.153869] user = 29808 Local 104/568
[2024-12-02 18:38:35.196716] user = 29808 Local+ 104/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:37.965761] user = 29808 MPDA- 104/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7897869674185464
Training on augumented user 11686 0/50 current_auc = 0.7897869674185464
User 11686 AUC after training: 0.7897869674185464
User 11686 does not improve AUC. Reverting changes.
Training on augumented user 29740 1/50 current_auc = 0.7897869674185464
User 29740 AUC after training: 0.7894736842105263
User 29740 does not improve AUC. Reverting changes.
Training on augumented user 86091 2/50 current_auc = 0.7897869674185464
User 86091 AUC after training: 0.7875939849624061
User 86091 does not improve AUC. Reverting changes.
Training on augumented user 27441 3/50 current_auc = 0.7897869674185464
User 27441 AUC after training: 0.7872807017543859
User 27441 does not improve AUC. Reverting changes.
Training on augumented user 60826 4/50 current_auc = 0.7897869674185464
User 60826 AUC after training: 0.7901002506265664
User 60826 improves AUC. Keeping the model.
Training on augumented user 26236 5/50 current_auc = 0.7901002506265664
User 26236 AUC after training: 0.7897869674185464
User 26236 does not improve AUC. Reverting changes.
Training on augumented user 58759 6/50 current_auc = 0.7901002506265664
User 58759 AUC after training: 0.7904135338345865
User 58759 improves AUC. Keeping the model.
Training on augumented user 108046 7/50 current_auc = 0.7904135338345865
User 108046 AUC after training: 0.7894736842105263
User 108046 does not improve AUC. Reverting changes.
Training on augumented user 127700 8/50 current_auc = 0.7904135338345865
User 127700 AUC after training: 0.7869674185463659
User 127700 does not improve AUC. Reverting changes.
Training on augumented user 90566 9/50 current_auc = 0.7904135338345865
User 90566 AUC after training: 0.7901002506265664
User 90566 does not improve AUC. Reverting changes.
Training on augumented user 36077 10/50 current_auc = 0.7904135338345865
User 36077 AUC after training: 0.7904135338345866
User 36077 improves AUC. Keeping the model.
Training on augumented user 30637 11/50 current_auc = 0.7904135338345866
User 30637 AUC after training: 0.7888471177944862
User 30637 does not improve AUC. Reverting changes.
Training on augumented user 52187 12/50 current_auc = 0.7904135338345866
User 52187 AUC after training: 0.7904135338345866
User 52187 does not improve AUC. Reverting changes.
Training on augumented user 27465 13/50 current_auc = 0.7904135338345866
User 27465 AUC after training: 0.7901002506265664
User 27465 does not improve AUC. Reverting changes.
Training on augumented user 39051 14/50 current_auc = 0.7904135338345866
User 39051 AUC after training: 0.7894736842105263
User 39051 does not improve AUC. Reverting changes.
Training on augumented user 93443 15/50 current_auc = 0.7904135338345866
User 93443 AUC after training: 0.7891604010025062
User 93443 does not improve AUC. Reverting changes.
Training on augumented user 102343 16/50 current_auc = 0.7904135338345866
User 102343 AUC after training: 0.7904135338345866
User 102343 does not improve AUC. Reverting changes.
Training on augumented user 105367 17/50 current_auc = 0.7904135338345866
User 105367 AUC after training: 0.7904135338345866
User 105367 does not improve AUC. Reverting changes.
Training on augumented user 133747 18/50 current_auc = 0.7904135338345866
User 133747 AUC after training: 0.7897869674185464
User 133747 does not improve AUC. Reverting changes.
Training on augumented user 42993 19/50 current_auc = 0.7904135338345866
User 42993 AUC after training: 0.7901002506265664
User 42993 does not improve AUC. Reverting changes.
Training on augumented user 8399 20/50 current_auc = 0.7904135338345866
User 8399 AUC after training: 0.7901002506265664
User 8399 does not improve AUC. Reverting changes.
Training on augumented user 98064 21/50 current_auc = 0.7904135338345866
User 98064 AUC after training: 0.7901002506265664
User 98064 does not improve AUC. Reverting changes.
Training on augumented user 34838 22/50 current_auc = 0.7904135338345866
User 34838 AUC after training: 0.7885338345864662
User 34838 does not improve AUC. Reverting changes.
Training on augumented user 8763 23/50 current_auc = 0.7904135338345866
User 8763 AUC after training: 0.7897869674185464
User 8763 does not improve AUC. Reverting changes.
Training on augumented user 12232 24/50 current_auc = 0.7904135338345866
User 12232 AUC after training: 0.7897869674185464
User 12232 does not improve AUC. Reverting changes.
Training on augumented user 96007 25/50 current_auc = 0.7904135338345866
User 96007 AUC after training: 0.7897869674185464
User 96007 does not improve AUC. Reverting changes.
Training on augumented user 138350 26/50 current_auc = 0.7904135338345866
User 138350 AUC after training: 0.7904135338345865
User 138350 does not improve AUC. Reverting changes.
Training on augumented user 17010 27/50 current_auc = 0.7904135338345866
User 17010 AUC after training: 0.7901002506265664
User 17010 does not improve AUC. Reverting changes.
Training on augumented user 106284 28/50 current_auc = 0.7904135338345866
User 106284 AUC after training: 0.7897869674185465
User 106284 does not improve AUC. Reverting changes.
Training on augumented user 21951 29/50 current_auc = 0.7904135338345866
User 21951 AUC after training: 0.7904135338345865
User 21951 does not improve AUC. Reverting changes.
Training on augumented user 77274 30/50 current_auc = 0.7904135338345866
User 77274 AUC after training: 0.7904135338345865
User 77274 does not improve AUC. Reverting changes.
Training on augumented user 75530 31/50 current_auc = 0.7904135338345866
User 75530 AUC after training: 0.7891604010025063
User 75530 does not improve AUC. Reverting changes.
Training on augumented user 136287 32/50 current_auc = 0.7904135338345866
User 136287 AUC after training: 0.7897869674185464
User 136287 does not improve AUC. Reverting changes.
Training on augumented user 11421 33/50 current_auc = 0.7904135338345866
User 11421 AUC after training: 0.7907268170426065
User 11421 improves AUC. Keeping the model.
Training on augumented user 100244 34/50 current_auc = 0.7907268170426065
User 100244 AUC after training: 0.7901002506265664
User 100244 does not improve AUC. Reverting changes.
Training on augumented user 81926 35/50 current_auc = 0.7907268170426065
User 81926 AUC after training: 0.7901002506265664
User 81926 does not improve AUC. Reverting changes.
Training on augumented user 75992 36/50 current_auc = 0.7907268170426065
User 75992 AUC after training: 0.7907268170426065
User 75992 does not improve AUC. Reverting changes.
Training on augumented user 91143 37/50 current_auc = 0.7907268170426065
User 91143 AUC after training: 0.7897869674185464
User 91143 does not improve AUC. Reverting changes.
Training on augumented user 2488 38/50 current_auc = 0.7907268170426065
User 2488 AUC after training: 0.7897869674185465
User 2488 does not improve AUC. Reverting changes.
Training on augumented user 100099 39/50 current_auc = 0.7907268170426065
User 100099 AUC after training: 0.7897869674185464
User 100099 does not improve AUC. Reverting changes.
Training on augumented user 56839 40/50 current_auc = 0.7907268170426065
User 56839 AUC after training: 0.7904135338345866
User 56839 does not improve AUC. Reverting changes.
Training on augumented user 126089 41/50 current_auc = 0.7907268170426065
User 126089 AUC after training: 0.7904135338345865
User 126089 does not improve AUC. Reverting changes.
Training on augumented user 7449 42/50 current_auc = 0.7907268170426065
User 7449 AUC after training: 0.7897869674185465
User 7449 does not improve AUC. Reverting changes.
Training on augumented user 27339 43/50 current_auc = 0.7907268170426065
User 27339 AUC after training: 0.7897869674185464
User 27339 does not improve AUC. Reverting changes.
Training on augumented user 46482 44/50 current_auc = 0.7907268170426065
User 46482 AUC after training: 0.7897869674185464
User 46482 does not improve AUC. Reverting changes.
Training on augumented user 120239 45/50 current_auc = 0.7907268170426065
User 120239 AUC after training: 0.7904135338345865
User 120239 does not improve AUC. Reverting changes.
Training on augumented user 53678 46/50 current_auc = 0.7907268170426065
User 53678 AUC after training: 0.7904135338345865
User 53678 does not improve AUC. Reverting changes.
Training on augumented user 43737 47/50 current_auc = 0.7907268170426065
User 43737 AUC after training: 0.7891604010025063
User 43737 does not improve AUC. Reverting changes.
Training on augumented user 41153 48/50 current_auc = 0.7907268170426065
User 41153 AUC after training: 0.7901002506265664
User 41153 does not improve AUC. Reverting changes.
Training on augumented user 43864 49/50 current_auc = 0.7907268170426065
User 43864 AUC after training: 0.7888471177944862
User 43864 does not improve AUC. Reverting changes.
[2024-12-02 18:39:13.310769] start test user 29823 105/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:14.007203] start test user 29823 105/568 recall augumented users by random, augumented_users = [97946, 50077, 106801, 3923, 37751, 25581, 128576, 15830, 65455, 105410, 2887, 64638, 22232, 2772, 87706, 85486, 45073, 88076, 36731, 71175, 36902, 91237, 92645, 115413, 129927, 116345, 60730, 56349, 41904, 62964, 25849, 22131, 110616, 83701, 111064, 125741, 117148, 136211, 107823, 67236, 72331, 20000, 67618, 33273, 87500, 97584, 25244, 8220, 136124, 34428]
[2024-12-02 18:39:14.022826] user = 29823 Cloud 105/568
[2024-12-02 18:39:14.033479] user = 29823 Local 105/568
[2024-12-02 18:39:14.067883] user = 29823 Local+ 105/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:16.583835] user = 29823 MPDA- 105/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.69
Training on augumented user 97946 0/50 current_auc = 0.69
User 97946 AUC after training: 0.69
User 97946 does not improve AUC. Reverting changes.
Training on augumented user 50077 1/50 current_auc = 0.69
User 50077 AUC after training: 0.69
User 50077 does not improve AUC. Reverting changes.
Training on augumented user 106801 2/50 current_auc = 0.69
User 106801 AUC after training: 0.69
User 106801 does not improve AUC. Reverting changes.
Training on augumented user 3923 3/50 current_auc = 0.69
User 3923 AUC after training: 0.69
User 3923 does not improve AUC. Reverting changes.
Training on augumented user 37751 4/50 current_auc = 0.69
User 37751 AUC after training: 0.69
User 37751 does not improve AUC. Reverting changes.
Training on augumented user 25581 5/50 current_auc = 0.69
User 25581 AUC after training: 0.69
User 25581 does not improve AUC. Reverting changes.
Training on augumented user 128576 6/50 current_auc = 0.69
User 128576 AUC after training: 0.69
User 128576 does not improve AUC. Reverting changes.
Training on augumented user 15830 7/50 current_auc = 0.69
User 15830 AUC after training: 0.69
User 15830 does not improve AUC. Reverting changes.
Training on augumented user 65455 8/50 current_auc = 0.69
User 65455 AUC after training: 0.69
User 65455 does not improve AUC. Reverting changes.
Training on augumented user 105410 9/50 current_auc = 0.69
User 105410 AUC after training: 0.69
User 105410 does not improve AUC. Reverting changes.
Training on augumented user 2887 10/50 current_auc = 0.69
User 2887 AUC after training: 0.69
User 2887 does not improve AUC. Reverting changes.
Training on augumented user 64638 11/50 current_auc = 0.69
User 64638 AUC after training: 0.69
User 64638 does not improve AUC. Reverting changes.
Training on augumented user 22232 12/50 current_auc = 0.69
User 22232 AUC after training: 0.69
User 22232 does not improve AUC. Reverting changes.
Training on augumented user 2772 13/50 current_auc = 0.69
User 2772 AUC after training: 0.6950000000000001
User 2772 improves AUC. Keeping the model.
Training on augumented user 87706 14/50 current_auc = 0.6950000000000001
User 87706 AUC after training: 0.6950000000000001
User 87706 does not improve AUC. Reverting changes.
Training on augumented user 85486 15/50 current_auc = 0.6950000000000001
User 85486 AUC after training: 0.6950000000000001
User 85486 does not improve AUC. Reverting changes.
Training on augumented user 45073 16/50 current_auc = 0.6950000000000001
User 45073 AUC after training: 0.69
User 45073 does not improve AUC. Reverting changes.
Training on augumented user 88076 17/50 current_auc = 0.6950000000000001
User 88076 AUC after training: 0.6950000000000001
User 88076 does not improve AUC. Reverting changes.
Training on augumented user 36731 18/50 current_auc = 0.6950000000000001
User 36731 AUC after training: 0.69
User 36731 does not improve AUC. Reverting changes.
Training on augumented user 71175 19/50 current_auc = 0.6950000000000001
User 71175 AUC after training: 0.69
User 71175 does not improve AUC. Reverting changes.
Training on augumented user 36902 20/50 current_auc = 0.6950000000000001
User 36902 AUC after training: 0.69
User 36902 does not improve AUC. Reverting changes.
Training on augumented user 91237 21/50 current_auc = 0.6950000000000001
User 91237 AUC after training: 0.69
User 91237 does not improve AUC. Reverting changes.
Training on augumented user 92645 22/50 current_auc = 0.6950000000000001
User 92645 AUC after training: 0.69
User 92645 does not improve AUC. Reverting changes.
Training on augumented user 115413 23/50 current_auc = 0.6950000000000001
User 115413 AUC after training: 0.6950000000000001
User 115413 does not improve AUC. Reverting changes.
Training on augumented user 129927 24/50 current_auc = 0.6950000000000001
User 129927 AUC after training: 0.6950000000000001
User 129927 does not improve AUC. Reverting changes.
Training on augumented user 116345 25/50 current_auc = 0.6950000000000001
User 116345 AUC after training: 0.69
User 116345 does not improve AUC. Reverting changes.
Training on augumented user 60730 26/50 current_auc = 0.6950000000000001
User 60730 AUC after training: 0.69
User 60730 does not improve AUC. Reverting changes.
Training on augumented user 56349 27/50 current_auc = 0.6950000000000001
User 56349 AUC after training: 0.6950000000000001
User 56349 does not improve AUC. Reverting changes.
Training on augumented user 41904 28/50 current_auc = 0.6950000000000001
User 41904 AUC after training: 0.69
User 41904 does not improve AUC. Reverting changes.
Training on augumented user 62964 29/50 current_auc = 0.6950000000000001
User 62964 AUC after training: 0.6950000000000001
User 62964 does not improve AUC. Reverting changes.
Training on augumented user 25849 30/50 current_auc = 0.6950000000000001
User 25849 AUC after training: 0.69
User 25849 does not improve AUC. Reverting changes.
Training on augumented user 22131 31/50 current_auc = 0.6950000000000001
User 22131 AUC after training: 0.69
User 22131 does not improve AUC. Reverting changes.
Training on augumented user 110616 32/50 current_auc = 0.6950000000000001
User 110616 AUC after training: 0.6950000000000001
User 110616 does not improve AUC. Reverting changes.
Training on augumented user 83701 33/50 current_auc = 0.6950000000000001
User 83701 AUC after training: 0.6950000000000001
User 83701 does not improve AUC. Reverting changes.
Training on augumented user 111064 34/50 current_auc = 0.6950000000000001
User 111064 AUC after training: 0.69
User 111064 does not improve AUC. Reverting changes.
Training on augumented user 125741 35/50 current_auc = 0.6950000000000001
User 125741 AUC after training: 0.6950000000000001
User 125741 does not improve AUC. Reverting changes.
Training on augumented user 117148 36/50 current_auc = 0.6950000000000001
User 117148 AUC after training: 0.69
User 117148 does not improve AUC. Reverting changes.
Training on augumented user 136211 37/50 current_auc = 0.6950000000000001
User 136211 AUC after training: 0.6950000000000001
User 136211 does not improve AUC. Reverting changes.
Training on augumented user 107823 38/50 current_auc = 0.6950000000000001
User 107823 AUC after training: 0.695
User 107823 does not improve AUC. Reverting changes.
Training on augumented user 67236 39/50 current_auc = 0.6950000000000001
User 67236 AUC after training: 0.69
User 67236 does not improve AUC. Reverting changes.
Training on augumented user 72331 40/50 current_auc = 0.6950000000000001
User 72331 AUC after training: 0.69
User 72331 does not improve AUC. Reverting changes.
Training on augumented user 20000 41/50 current_auc = 0.6950000000000001
User 20000 AUC after training: 0.69
User 20000 does not improve AUC. Reverting changes.
Training on augumented user 67618 42/50 current_auc = 0.6950000000000001
User 67618 AUC after training: 0.69
User 67618 does not improve AUC. Reverting changes.
Training on augumented user 33273 43/50 current_auc = 0.6950000000000001
User 33273 AUC after training: 0.6950000000000001
User 33273 does not improve AUC. Reverting changes.
Training on augumented user 87500 44/50 current_auc = 0.6950000000000001
User 87500 AUC after training: 0.69
User 87500 does not improve AUC. Reverting changes.
Training on augumented user 97584 45/50 current_auc = 0.6950000000000001
User 97584 AUC after training: 0.69
User 97584 does not improve AUC. Reverting changes.
Training on augumented user 25244 46/50 current_auc = 0.6950000000000001
User 25244 AUC after training: 0.69
User 25244 does not improve AUC. Reverting changes.
Training on augumented user 8220 47/50 current_auc = 0.6950000000000001
User 8220 AUC after training: 0.69
User 8220 does not improve AUC. Reverting changes.
Training on augumented user 136124 48/50 current_auc = 0.6950000000000001
User 136124 AUC after training: 0.69
User 136124 does not improve AUC. Reverting changes.
Training on augumented user 34428 49/50 current_auc = 0.6950000000000001
User 34428 AUC after training: 0.7
User 34428 improves AUC. Keeping the model.
[2024-12-02 18:39:44.209415] start test user 29824 106/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:44.764400] start test user 29824 106/568 recall augumented users by random, augumented_users = [20316, 92361, 126176, 49591, 98220, 30044, 63705, 116770, 58771, 71383, 39153, 132209, 129003, 99724, 37996, 58600, 87081, 104283, 1288, 19588, 117800, 39204, 130166, 122804, 93049, 56332, 46468, 127624, 30834, 65219, 88442, 94188, 71627, 72607, 57244, 96175, 108988, 123856, 58635, 99528, 11120, 43028, 90642, 14784, 87746, 127823, 102950, 43675, 29962, 89317]
[2024-12-02 18:39:44.779909] user = 29824 Cloud 106/568
[2024-12-02 18:39:44.791209] user = 29824 Local 106/568
[2024-12-02 18:39:44.914144] user = 29824 Local+ 106/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:47.920545] user = 29824 MPDA- 106/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6312997347480107
Training on augumented user 20316 0/50 current_auc = 0.6312997347480107
User 20316 AUC after training: 0.6312997347480107
User 20316 does not improve AUC. Reverting changes.
Training on augumented user 92361 1/50 current_auc = 0.6312997347480107
User 92361 AUC after training: 0.6312997347480107
User 92361 does not improve AUC. Reverting changes.
Training on augumented user 126176 2/50 current_auc = 0.6312997347480107
User 126176 AUC after training: 0.6286472148541115
User 126176 does not improve AUC. Reverting changes.
Training on augumented user 49591 3/50 current_auc = 0.6312997347480107
User 49591 AUC after training: 0.6312997347480107
User 49591 does not improve AUC. Reverting changes.
Training on augumented user 98220 4/50 current_auc = 0.6312997347480107
User 98220 AUC after training: 0.6312997347480107
User 98220 does not improve AUC. Reverting changes.
Training on augumented user 30044 5/50 current_auc = 0.6312997347480107
User 30044 AUC after training: 0.6312997347480107
User 30044 does not improve AUC. Reverting changes.
Training on augumented user 63705 6/50 current_auc = 0.6312997347480107
User 63705 AUC after training: 0.6339522546419099
User 63705 improves AUC. Keeping the model.
Training on augumented user 116770 7/50 current_auc = 0.6339522546419099
User 116770 AUC after training: 0.6339522546419099
User 116770 does not improve AUC. Reverting changes.
Training on augumented user 58771 8/50 current_auc = 0.6339522546419099
User 58771 AUC after training: 0.6339522546419099
User 58771 does not improve AUC. Reverting changes.
Training on augumented user 71383 9/50 current_auc = 0.6339522546419099
User 71383 AUC after training: 0.6339522546419099
User 71383 does not improve AUC. Reverting changes.
Training on augumented user 39153 10/50 current_auc = 0.6339522546419099
User 39153 AUC after training: 0.6259946949602122
User 39153 does not improve AUC. Reverting changes.
Training on augumented user 132209 11/50 current_auc = 0.6339522546419099
User 132209 AUC after training: 0.6312997347480107
User 132209 does not improve AUC. Reverting changes.
Training on augumented user 129003 12/50 current_auc = 0.6339522546419099
User 129003 AUC after training: 0.6339522546419099
User 129003 does not improve AUC. Reverting changes.
Training on augumented user 99724 13/50 current_auc = 0.6339522546419099
User 99724 AUC after training: 0.6339522546419099
User 99724 does not improve AUC. Reverting changes.
Training on augumented user 37996 14/50 current_auc = 0.6339522546419099
User 37996 AUC after training: 0.6312997347480107
User 37996 does not improve AUC. Reverting changes.
Training on augumented user 58600 15/50 current_auc = 0.6339522546419099
User 58600 AUC after training: 0.6312997347480107
User 58600 does not improve AUC. Reverting changes.
Training on augumented user 87081 16/50 current_auc = 0.6339522546419099
User 87081 AUC after training: 0.6339522546419099
User 87081 does not improve AUC. Reverting changes.
Training on augumented user 104283 17/50 current_auc = 0.6339522546419099
User 104283 AUC after training: 0.6339522546419099
User 104283 does not improve AUC. Reverting changes.
Training on augumented user 1288 18/50 current_auc = 0.6339522546419099
User 1288 AUC after training: 0.6286472148541115
User 1288 does not improve AUC. Reverting changes.
Training on augumented user 19588 19/50 current_auc = 0.6339522546419099
User 19588 AUC after training: 0.6339522546419099
User 19588 does not improve AUC. Reverting changes.
Training on augumented user 117800 20/50 current_auc = 0.6339522546419099
User 117800 AUC after training: 0.6312997347480106
User 117800 does not improve AUC. Reverting changes.
Training on augumented user 39204 21/50 current_auc = 0.6339522546419099
User 39204 AUC after training: 0.6339522546419099
User 39204 does not improve AUC. Reverting changes.
Training on augumented user 130166 22/50 current_auc = 0.6339522546419099
User 130166 AUC after training: 0.6339522546419099
User 130166 does not improve AUC. Reverting changes.
Training on augumented user 122804 23/50 current_auc = 0.6339522546419099
User 122804 AUC after training: 0.6312997347480107
User 122804 does not improve AUC. Reverting changes.
Training on augumented user 93049 24/50 current_auc = 0.6339522546419099
User 93049 AUC after training: 0.6339522546419099
User 93049 does not improve AUC. Reverting changes.
Training on augumented user 56332 25/50 current_auc = 0.6339522546419099
User 56332 AUC after training: 0.6339522546419099
User 56332 does not improve AUC. Reverting changes.
Training on augumented user 46468 26/50 current_auc = 0.6339522546419099
User 46468 AUC after training: 0.6339522546419099
User 46468 does not improve AUC. Reverting changes.
Training on augumented user 127624 27/50 current_auc = 0.6339522546419099
User 127624 AUC after training: 0.6312997347480107
User 127624 does not improve AUC. Reverting changes.
Training on augumented user 30834 28/50 current_auc = 0.6339522546419099
User 30834 AUC after training: 0.6339522546419099
User 30834 does not improve AUC. Reverting changes.
Training on augumented user 65219 29/50 current_auc = 0.6339522546419099
User 65219 AUC after training: 0.6259946949602122
User 65219 does not improve AUC. Reverting changes.
Training on augumented user 88442 30/50 current_auc = 0.6339522546419099
User 88442 AUC after training: 0.6259946949602122
User 88442 does not improve AUC. Reverting changes.
Training on augumented user 94188 31/50 current_auc = 0.6339522546419099
User 94188 AUC after training: 0.6339522546419099
User 94188 does not improve AUC. Reverting changes.
Training on augumented user 71627 32/50 current_auc = 0.6339522546419099
User 71627 AUC after training: 0.6312997347480107
User 71627 does not improve AUC. Reverting changes.
Training on augumented user 72607 33/50 current_auc = 0.6339522546419099
User 72607 AUC after training: 0.6312997347480107
User 72607 does not improve AUC. Reverting changes.
Training on augumented user 57244 34/50 current_auc = 0.6339522546419099
User 57244 AUC after training: 0.6259946949602122
User 57244 does not improve AUC. Reverting changes.
Training on augumented user 96175 35/50 current_auc = 0.6339522546419099
User 96175 AUC after training: 0.6339522546419099
User 96175 does not improve AUC. Reverting changes.
Training on augumented user 108988 36/50 current_auc = 0.6339522546419099
User 108988 AUC after training: 0.6339522546419099
User 108988 does not improve AUC. Reverting changes.
Training on augumented user 123856 37/50 current_auc = 0.6339522546419099
User 123856 AUC after training: 0.6339522546419099
User 123856 does not improve AUC. Reverting changes.
Training on augumented user 58635 38/50 current_auc = 0.6339522546419099
User 58635 AUC after training: 0.6312997347480107
User 58635 does not improve AUC. Reverting changes.
Training on augumented user 99528 39/50 current_auc = 0.6339522546419099
User 99528 AUC after training: 0.6286472148541115
User 99528 does not improve AUC. Reverting changes.
Training on augumented user 11120 40/50 current_auc = 0.6339522546419099
User 11120 AUC after training: 0.6339522546419099
User 11120 does not improve AUC. Reverting changes.
Training on augumented user 43028 41/50 current_auc = 0.6339522546419099
User 43028 AUC after training: 0.6312997347480107
User 43028 does not improve AUC. Reverting changes.
Training on augumented user 90642 42/50 current_auc = 0.6339522546419099
User 90642 AUC after training: 0.6339522546419099
User 90642 does not improve AUC. Reverting changes.
Training on augumented user 14784 43/50 current_auc = 0.6339522546419099
User 14784 AUC after training: 0.6312997347480107
User 14784 does not improve AUC. Reverting changes.
Training on augumented user 87746 44/50 current_auc = 0.6339522546419099
User 87746 AUC after training: 0.6339522546419099
User 87746 does not improve AUC. Reverting changes.
Training on augumented user 127823 45/50 current_auc = 0.6339522546419099
User 127823 AUC after training: 0.6339522546419099
User 127823 does not improve AUC. Reverting changes.
Training on augumented user 102950 46/50 current_auc = 0.6339522546419099
User 102950 AUC after training: 0.6259946949602122
User 102950 does not improve AUC. Reverting changes.
Training on augumented user 43675 47/50 current_auc = 0.6339522546419099
User 43675 AUC after training: 0.6259946949602122
User 43675 does not improve AUC. Reverting changes.
Training on augumented user 29962 48/50 current_auc = 0.6339522546419099
User 29962 AUC after training: 0.6339522546419099
User 29962 does not improve AUC. Reverting changes.
Training on augumented user 89317 49/50 current_auc = 0.6339522546419099
User 89317 AUC after training: 0.6339522546419099
User 89317 does not improve AUC. Reverting changes.
[2024-12-02 18:40:16.668459] start test user 29831 107/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:17.075253] start test user 29831 107/568 recall augumented users by random, augumented_users = [46189, 30995, 99212, 94793, 11444, 35629, 69938, 93969, 22489, 38084, 8247, 95721, 37070, 49786, 130876, 6886, 109217, 63755, 66696, 21415, 39970, 65632, 75113, 48814, 51520, 51007, 95987, 45564, 4896, 120998, 24331, 40731, 53918, 8887, 6978, 30785, 42082, 52925, 15943, 2221, 135920, 40800, 68218, 87892, 103976, 124716, 123587, 36775, 121077, 114845]
[2024-12-02 18:40:17.089607] user = 29831 Cloud 107/568
[2024-12-02 18:40:17.102026] user = 29831 Local 107/568
[2024-12-02 18:40:17.135344] user = 29831 Local+ 107/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:19.145455] user = 29831 MPDA- 107/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7412771560236998
Training on augumented user 46189 0/50 current_auc = 0.7412771560236998
User 46189 AUC after training: 0.7419354838709677
User 46189 improves AUC. Keeping the model.
Training on augumented user 30995 1/50 current_auc = 0.7419354838709677
User 30995 AUC after training: 0.7419354838709677
User 30995 does not improve AUC. Reverting changes.
Training on augumented user 99212 2/50 current_auc = 0.7419354838709677
User 99212 AUC after training: 0.7419354838709679
User 99212 improves AUC. Keeping the model.
Training on augumented user 94793 3/50 current_auc = 0.7419354838709679
User 94793 AUC after training: 0.7419354838709679
User 94793 does not improve AUC. Reverting changes.
Training on augumented user 11444 4/50 current_auc = 0.7419354838709679
User 11444 AUC after training: 0.7419354838709679
User 11444 does not improve AUC. Reverting changes.
Training on augumented user 35629 5/50 current_auc = 0.7419354838709679
User 35629 AUC after training: 0.7419354838709679
User 35629 does not improve AUC. Reverting changes.
Training on augumented user 69938 6/50 current_auc = 0.7419354838709679
User 69938 AUC after training: 0.7425938117182357
User 69938 improves AUC. Keeping the model.
Training on augumented user 93969 7/50 current_auc = 0.7425938117182357
User 93969 AUC after training: 0.7432521395655037
User 93969 improves AUC. Keeping the model.
Training on augumented user 22489 8/50 current_auc = 0.7432521395655037
User 22489 AUC after training: 0.7439104674127716
User 22489 improves AUC. Keeping the model.
Training on augumented user 38084 9/50 current_auc = 0.7439104674127716
User 38084 AUC after training: 0.7452271231073074
User 38084 improves AUC. Keeping the model.
Training on augumented user 8247 10/50 current_auc = 0.7452271231073074
User 8247 AUC after training: 0.7458854509545755
User 8247 improves AUC. Keeping the model.
Training on augumented user 95721 11/50 current_auc = 0.7458854509545755
User 95721 AUC after training: 0.7445687952600395
User 95721 does not improve AUC. Reverting changes.
Training on augumented user 37070 12/50 current_auc = 0.7458854509545755
User 37070 AUC after training: 0.7458854509545755
User 37070 does not improve AUC. Reverting changes.
Training on augumented user 49786 13/50 current_auc = 0.7458854509545755
User 49786 AUC after training: 0.7458854509545755
User 49786 does not improve AUC. Reverting changes.
Training on augumented user 130876 14/50 current_auc = 0.7458854509545755
User 130876 AUC after training: 0.7458854509545755
User 130876 does not improve AUC. Reverting changes.
Training on augumented user 6886 15/50 current_auc = 0.7458854509545755
User 6886 AUC after training: 0.7452271231073074
User 6886 does not improve AUC. Reverting changes.
Training on augumented user 109217 16/50 current_auc = 0.7458854509545755
User 109217 AUC after training: 0.7458854509545755
User 109217 does not improve AUC. Reverting changes.
Training on augumented user 63755 17/50 current_auc = 0.7458854509545755
User 63755 AUC after training: 0.7478604344963793
User 63755 improves AUC. Keeping the model.
Training on augumented user 66696 18/50 current_auc = 0.7478604344963793
User 66696 AUC after training: 0.7465437788018434
User 66696 does not improve AUC. Reverting changes.
Training on augumented user 21415 19/50 current_auc = 0.7478604344963793
User 21415 AUC after training: 0.7472021066491112
User 21415 does not improve AUC. Reverting changes.
Training on augumented user 39970 20/50 current_auc = 0.7478604344963793
User 39970 AUC after training: 0.7458854509545754
User 39970 does not improve AUC. Reverting changes.
Training on augumented user 65632 21/50 current_auc = 0.7478604344963793
User 65632 AUC after training: 0.7472021066491112
User 65632 does not improve AUC. Reverting changes.
Training on augumented user 75113 22/50 current_auc = 0.7478604344963793
User 75113 AUC after training: 0.7452271231073074
User 75113 does not improve AUC. Reverting changes.
Training on augumented user 48814 23/50 current_auc = 0.7478604344963793
User 48814 AUC after training: 0.7472021066491112
User 48814 does not improve AUC. Reverting changes.
Training on augumented user 51520 24/50 current_auc = 0.7478604344963793
User 51520 AUC after training: 0.7485187623436472
User 51520 improves AUC. Keeping the model.
Training on augumented user 51007 25/50 current_auc = 0.7485187623436472
User 51007 AUC after training: 0.7472021066491114
User 51007 does not improve AUC. Reverting changes.
Training on augumented user 95987 26/50 current_auc = 0.7485187623436472
User 95987 AUC after training: 0.7478604344963793
User 95987 does not improve AUC. Reverting changes.
Training on augumented user 45564 27/50 current_auc = 0.7485187623436472
User 45564 AUC after training: 0.7478604344963792
User 45564 does not improve AUC. Reverting changes.
Training on augumented user 4896 28/50 current_auc = 0.7485187623436472
User 4896 AUC after training: 0.7478604344963792
User 4896 does not improve AUC. Reverting changes.
Training on augumented user 120998 29/50 current_auc = 0.7485187623436472
User 120998 AUC after training: 0.7472021066491112
User 120998 does not improve AUC. Reverting changes.
Training on augumented user 24331 30/50 current_auc = 0.7485187623436472
User 24331 AUC after training: 0.7485187623436472
User 24331 does not improve AUC. Reverting changes.
Training on augumented user 40731 31/50 current_auc = 0.7485187623436472
User 40731 AUC after training: 0.7478604344963792
User 40731 does not improve AUC. Reverting changes.
Training on augumented user 53918 32/50 current_auc = 0.7485187623436472
User 53918 AUC after training: 0.7485187623436472
User 53918 does not improve AUC. Reverting changes.
Training on augumented user 8887 33/50 current_auc = 0.7485187623436472
User 8887 AUC after training: 0.7465437788018434
User 8887 does not improve AUC. Reverting changes.
Training on augumented user 6978 34/50 current_auc = 0.7485187623436472
User 6978 AUC after training: 0.7452271231073075
User 6978 does not improve AUC. Reverting changes.
Training on augumented user 30785 35/50 current_auc = 0.7485187623436472
User 30785 AUC after training: 0.7472021066491112
User 30785 does not improve AUC. Reverting changes.
Training on augumented user 42082 36/50 current_auc = 0.7485187623436472
User 42082 AUC after training: 0.7485187623436472
User 42082 does not improve AUC. Reverting changes.
Training on augumented user 52925 37/50 current_auc = 0.7485187623436472
User 52925 AUC after training: 0.7465437788018433
User 52925 does not improve AUC. Reverting changes.
Training on augumented user 15943 38/50 current_auc = 0.7485187623436472
User 15943 AUC after training: 0.7472021066491114
User 15943 does not improve AUC. Reverting changes.
Training on augumented user 2221 39/50 current_auc = 0.7485187623436472
User 2221 AUC after training: 0.7465437788018434
User 2221 does not improve AUC. Reverting changes.
Training on augumented user 135920 40/50 current_auc = 0.7485187623436472
User 135920 AUC after training: 0.7478604344963792
User 135920 does not improve AUC. Reverting changes.
Training on augumented user 40800 41/50 current_auc = 0.7485187623436472
User 40800 AUC after training: 0.7458854509545755
User 40800 does not improve AUC. Reverting changes.
Training on augumented user 68218 42/50 current_auc = 0.7485187623436472
User 68218 AUC after training: 0.7485187623436472
User 68218 does not improve AUC. Reverting changes.
Training on augumented user 87892 43/50 current_auc = 0.7485187623436472
User 87892 AUC after training: 0.7485187623436472
User 87892 does not improve AUC. Reverting changes.
Training on augumented user 103976 44/50 current_auc = 0.7485187623436472
User 103976 AUC after training: 0.7458854509545754
User 103976 does not improve AUC. Reverting changes.
Training on augumented user 124716 45/50 current_auc = 0.7485187623436472
User 124716 AUC after training: 0.7485187623436471
User 124716 does not improve AUC. Reverting changes.
Training on augumented user 123587 46/50 current_auc = 0.7485187623436472
User 123587 AUC after training: 0.7465437788018433
User 123587 does not improve AUC. Reverting changes.
Training on augumented user 36775 47/50 current_auc = 0.7485187623436472
User 36775 AUC after training: 0.7478604344963792
User 36775 does not improve AUC. Reverting changes.
Training on augumented user 121077 48/50 current_auc = 0.7485187623436472
User 121077 AUC after training: 0.7472021066491114
User 121077 does not improve AUC. Reverting changes.
Training on augumented user 114845 49/50 current_auc = 0.7485187623436472
User 114845 AUC after training: 0.7465437788018433
User 114845 does not improve AUC. Reverting changes.
[2024-12-02 18:40:51.523959] start test user 29834 108/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:51.969906] start test user 29834 108/568 recall augumented users by random, augumented_users = [28490, 72078, 32265, 20262, 99770, 79532, 82930, 55278, 13836, 36347, 74992, 70208, 60106, 97864, 92606, 77263, 57116, 24069, 68980, 2006, 21500, 95980, 124313, 77925, 93630, 125576, 16263, 8502, 14889, 126794, 49124, 15133, 4432, 105252, 76379, 44540, 16443, 77116, 62549, 106248, 133747, 108983, 30396, 23230, 89191, 118801, 104154, 3635, 127809, 104243]
[2024-12-02 18:40:51.984608] user = 29834 Cloud 108/568
[2024-12-02 18:40:51.995107] user = 29834 Local 108/568
[2024-12-02 18:40:52.014698] user = 29834 Local+ 108/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:54.709145] user = 29834 MPDA- 108/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6272727272727273
Training on augumented user 28490 0/50 current_auc = 0.6272727272727273
User 28490 AUC after training: 0.6181818181818182
User 28490 does not improve AUC. Reverting changes.
Training on augumented user 72078 1/50 current_auc = 0.6272727272727273
User 72078 AUC after training: 0.6181818181818182
User 72078 does not improve AUC. Reverting changes.
Training on augumented user 32265 2/50 current_auc = 0.6272727272727273
User 32265 AUC after training: 0.6181818181818182
User 32265 does not improve AUC. Reverting changes.
Training on augumented user 20262 3/50 current_auc = 0.6272727272727273
User 20262 AUC after training: 0.6272727272727273
User 20262 does not improve AUC. Reverting changes.
Training on augumented user 99770 4/50 current_auc = 0.6272727272727273
User 99770 AUC after training: 0.6272727272727273
User 99770 does not improve AUC. Reverting changes.
Training on augumented user 79532 5/50 current_auc = 0.6272727272727273
User 79532 AUC after training: 0.6272727272727273
User 79532 does not improve AUC. Reverting changes.
Training on augumented user 82930 6/50 current_auc = 0.6272727272727273
User 82930 AUC after training: 0.6272727272727273
User 82930 does not improve AUC. Reverting changes.
Training on augumented user 55278 7/50 current_auc = 0.6272727272727273
User 55278 AUC after training: 0.6181818181818182
User 55278 does not improve AUC. Reverting changes.
Training on augumented user 13836 8/50 current_auc = 0.6272727272727273
User 13836 AUC after training: 0.6181818181818182
User 13836 does not improve AUC. Reverting changes.
Training on augumented user 36347 9/50 current_auc = 0.6272727272727273
User 36347 AUC after training: 0.609090909090909
User 36347 does not improve AUC. Reverting changes.
Training on augumented user 74992 10/50 current_auc = 0.6272727272727273
User 74992 AUC after training: 0.6181818181818182
User 74992 does not improve AUC. Reverting changes.
Training on augumented user 70208 11/50 current_auc = 0.6272727272727273
User 70208 AUC after training: 0.6181818181818182
User 70208 does not improve AUC. Reverting changes.
Training on augumented user 60106 12/50 current_auc = 0.6272727272727273
User 60106 AUC after training: 0.609090909090909
User 60106 does not improve AUC. Reverting changes.
Training on augumented user 97864 13/50 current_auc = 0.6272727272727273
User 97864 AUC after training: 0.6181818181818182
User 97864 does not improve AUC. Reverting changes.
Training on augumented user 92606 14/50 current_auc = 0.6272727272727273
User 92606 AUC after training: 0.6181818181818182
User 92606 does not improve AUC. Reverting changes.
Training on augumented user 77263 15/50 current_auc = 0.6272727272727273
User 77263 AUC after training: 0.6181818181818182
User 77263 does not improve AUC. Reverting changes.
Training on augumented user 57116 16/50 current_auc = 0.6272727272727273
User 57116 AUC after training: 0.6272727272727273
User 57116 does not improve AUC. Reverting changes.
Training on augumented user 24069 17/50 current_auc = 0.6272727272727273
User 24069 AUC after training: 0.6272727272727273
User 24069 does not improve AUC. Reverting changes.
Training on augumented user 68980 18/50 current_auc = 0.6272727272727273
User 68980 AUC after training: 0.609090909090909
User 68980 does not improve AUC. Reverting changes.
Training on augumented user 2006 19/50 current_auc = 0.6272727272727273
User 2006 AUC after training: 0.609090909090909
User 2006 does not improve AUC. Reverting changes.
Training on augumented user 21500 20/50 current_auc = 0.6272727272727273
User 21500 AUC after training: 0.6272727272727273
User 21500 does not improve AUC. Reverting changes.
Training on augumented user 95980 21/50 current_auc = 0.6272727272727273
User 95980 AUC after training: 0.6272727272727273
User 95980 does not improve AUC. Reverting changes.
Training on augumented user 124313 22/50 current_auc = 0.6272727272727273
User 124313 AUC after training: 0.6272727272727273
User 124313 does not improve AUC. Reverting changes.
Training on augumented user 77925 23/50 current_auc = 0.6272727272727273
User 77925 AUC after training: 0.6272727272727273
User 77925 does not improve AUC. Reverting changes.
Training on augumented user 93630 24/50 current_auc = 0.6272727272727273
User 93630 AUC after training: 0.6181818181818182
User 93630 does not improve AUC. Reverting changes.
Training on augumented user 125576 25/50 current_auc = 0.6272727272727273
User 125576 AUC after training: 0.6181818181818182
User 125576 does not improve AUC. Reverting changes.
Training on augumented user 16263 26/50 current_auc = 0.6272727272727273
User 16263 AUC after training: 0.6272727272727273
User 16263 does not improve AUC. Reverting changes.
Training on augumented user 8502 27/50 current_auc = 0.6272727272727273
User 8502 AUC after training: 0.6272727272727273
User 8502 does not improve AUC. Reverting changes.
Training on augumented user 14889 28/50 current_auc = 0.6272727272727273
User 14889 AUC after training: 0.6181818181818182
User 14889 does not improve AUC. Reverting changes.
Training on augumented user 126794 29/50 current_auc = 0.6272727272727273
User 126794 AUC after training: 0.6272727272727273
User 126794 does not improve AUC. Reverting changes.
Training on augumented user 49124 30/50 current_auc = 0.6272727272727273
User 49124 AUC after training: 0.6181818181818182
User 49124 does not improve AUC. Reverting changes.
Training on augumented user 15133 31/50 current_auc = 0.6272727272727273
User 15133 AUC after training: 0.6272727272727273
User 15133 does not improve AUC. Reverting changes.
Training on augumented user 4432 32/50 current_auc = 0.6272727272727273
User 4432 AUC after training: 0.6272727272727273
User 4432 does not improve AUC. Reverting changes.
Training on augumented user 105252 33/50 current_auc = 0.6272727272727273
User 105252 AUC after training: 0.6181818181818182
User 105252 does not improve AUC. Reverting changes.
Training on augumented user 76379 34/50 current_auc = 0.6272727272727273
User 76379 AUC after training: 0.6181818181818182
User 76379 does not improve AUC. Reverting changes.
Training on augumented user 44540 35/50 current_auc = 0.6272727272727273
User 44540 AUC after training: 0.6272727272727273
User 44540 does not improve AUC. Reverting changes.
Training on augumented user 16443 36/50 current_auc = 0.6272727272727273
User 16443 AUC after training: 0.6181818181818182
User 16443 does not improve AUC. Reverting changes.
Training on augumented user 77116 37/50 current_auc = 0.6272727272727273
User 77116 AUC after training: 0.609090909090909
User 77116 does not improve AUC. Reverting changes.
Training on augumented user 62549 38/50 current_auc = 0.6272727272727273
User 62549 AUC after training: 0.6181818181818182
User 62549 does not improve AUC. Reverting changes.
Training on augumented user 106248 39/50 current_auc = 0.6272727272727273
User 106248 AUC after training: 0.609090909090909
User 106248 does not improve AUC. Reverting changes.
Training on augumented user 133747 40/50 current_auc = 0.6272727272727273
User 133747 AUC after training: 0.6181818181818182
User 133747 does not improve AUC. Reverting changes.
Training on augumented user 108983 41/50 current_auc = 0.6272727272727273
User 108983 AUC after training: 0.6272727272727273
User 108983 does not improve AUC. Reverting changes.
Training on augumented user 30396 42/50 current_auc = 0.6272727272727273
User 30396 AUC after training: 0.6272727272727273
User 30396 does not improve AUC. Reverting changes.
Training on augumented user 23230 43/50 current_auc = 0.6272727272727273
User 23230 AUC after training: 0.6181818181818182
User 23230 does not improve AUC. Reverting changes.
Training on augumented user 89191 44/50 current_auc = 0.6272727272727273
User 89191 AUC after training: 0.6181818181818182
User 89191 does not improve AUC. Reverting changes.
Training on augumented user 118801 45/50 current_auc = 0.6272727272727273
User 118801 AUC after training: 0.6272727272727273
User 118801 does not improve AUC. Reverting changes.
Training on augumented user 104154 46/50 current_auc = 0.6272727272727273
User 104154 AUC after training: 0.5999999999999999
User 104154 does not improve AUC. Reverting changes.
Training on augumented user 3635 47/50 current_auc = 0.6272727272727273
User 3635 AUC after training: 0.6181818181818182
User 3635 does not improve AUC. Reverting changes.
Training on augumented user 127809 48/50 current_auc = 0.6272727272727273
User 127809 AUC after training: 0.5999999999999999
User 127809 does not improve AUC. Reverting changes.
Training on augumented user 104243 49/50 current_auc = 0.6272727272727273
User 104243 AUC after training: 0.6272727272727273
User 104243 does not improve AUC. Reverting changes.
[2024-12-02 18:41:25.531290] start test user 29870 109/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:26.081502] start test user 29870 109/568 recall augumented users by random, augumented_users = [135491, 132155, 126104, 44116, 117112, 46982, 3828, 16922, 69260, 75244, 67843, 51392, 38961, 21183, 15146, 96261, 29164, 69568, 99124, 101253, 119404, 115334, 37645, 67580, 121817, 69564, 16928, 45299, 89088, 111901, 74908, 111007, 131767, 33328, 74563, 8631, 21222, 4693, 32544, 73488, 61006, 100378, 33500, 64278, 120743, 47788, 124789, 46567, 90960, 107487]
[2024-12-02 18:41:26.097954] user = 29870 Cloud 109/568
[2024-12-02 18:41:26.116136] user = 29870 Local 109/568
[2024-12-02 18:41:26.157567] user = 29870 Local+ 109/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:28.345231] user = 29870 MPDA- 109/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6595848595848596
Training on augumented user 135491 0/50 current_auc = 0.6595848595848596
User 135491 AUC after training: 0.6603174603174603
User 135491 improves AUC. Keeping the model.
Training on augumented user 132155 1/50 current_auc = 0.6603174603174603
User 132155 AUC after training: 0.6608058608058608
User 132155 improves AUC. Keeping the model.
Training on augumented user 126104 2/50 current_auc = 0.6608058608058608
User 126104 AUC after training: 0.661050061050061
User 126104 improves AUC. Keeping the model.
Training on augumented user 44116 3/50 current_auc = 0.661050061050061
User 44116 AUC after training: 0.6598290598290598
User 44116 does not improve AUC. Reverting changes.
Training on augumented user 117112 4/50 current_auc = 0.661050061050061
User 117112 AUC after training: 0.661050061050061
User 117112 does not improve AUC. Reverting changes.
Training on augumented user 46982 5/50 current_auc = 0.661050061050061
User 46982 AUC after training: 0.6617826617826618
User 46982 improves AUC. Keeping the model.
Training on augumented user 3828 6/50 current_auc = 0.6617826617826618
User 3828 AUC after training: 0.6608058608058608
User 3828 does not improve AUC. Reverting changes.
Training on augumented user 16922 7/50 current_auc = 0.6617826617826618
User 16922 AUC after training: 0.6608058608058608
User 16922 does not improve AUC. Reverting changes.
Training on augumented user 69260 8/50 current_auc = 0.6617826617826618
User 69260 AUC after training: 0.6615384615384615
User 69260 does not improve AUC. Reverting changes.
Training on augumented user 75244 9/50 current_auc = 0.6617826617826618
User 75244 AUC after training: 0.6615384615384615
User 75244 does not improve AUC. Reverting changes.
Training on augumented user 67843 10/50 current_auc = 0.6617826617826618
User 67843 AUC after training: 0.6600732600732601
User 67843 does not improve AUC. Reverting changes.
Training on augumented user 51392 11/50 current_auc = 0.6617826617826618
User 51392 AUC after training: 0.6617826617826618
User 51392 does not improve AUC. Reverting changes.
Training on augumented user 38961 12/50 current_auc = 0.6617826617826618
User 38961 AUC after training: 0.661050061050061
User 38961 does not improve AUC. Reverting changes.
Training on augumented user 21183 13/50 current_auc = 0.6617826617826618
User 21183 AUC after training: 0.6600732600732601
User 21183 does not improve AUC. Reverting changes.
Training on augumented user 15146 14/50 current_auc = 0.6617826617826618
User 15146 AUC after training: 0.662026862026862
User 15146 improves AUC. Keeping the model.
Training on augumented user 96261 15/50 current_auc = 0.662026862026862
User 96261 AUC after training: 0.6622710622710622
User 96261 improves AUC. Keeping the model.
Training on augumented user 29164 16/50 current_auc = 0.6622710622710622
User 29164 AUC after training: 0.662026862026862
User 29164 does not improve AUC. Reverting changes.
Training on augumented user 69568 17/50 current_auc = 0.6622710622710622
User 69568 AUC after training: 0.6622710622710622
User 69568 does not improve AUC. Reverting changes.
Training on augumented user 99124 18/50 current_auc = 0.6622710622710622
User 99124 AUC after training: 0.6612942612942613
User 99124 does not improve AUC. Reverting changes.
Training on augumented user 101253 19/50 current_auc = 0.6622710622710622
User 101253 AUC after training: 0.6622710622710622
User 101253 does not improve AUC. Reverting changes.
Training on augumented user 119404 20/50 current_auc = 0.6622710622710622
User 119404 AUC after training: 0.6617826617826618
User 119404 does not improve AUC. Reverting changes.
Training on augumented user 115334 21/50 current_auc = 0.6622710622710622
User 115334 AUC after training: 0.6627594627594627
User 115334 improves AUC. Keeping the model.
Training on augumented user 37645 22/50 current_auc = 0.6627594627594627
User 37645 AUC after training: 0.6625152625152625
User 37645 does not improve AUC. Reverting changes.
Training on augumented user 67580 23/50 current_auc = 0.6627594627594627
User 67580 AUC after training: 0.6625152625152625
User 67580 does not improve AUC. Reverting changes.
Training on augumented user 121817 24/50 current_auc = 0.6627594627594627
User 121817 AUC after training: 0.6627594627594627
User 121817 does not improve AUC. Reverting changes.
Training on augumented user 69564 25/50 current_auc = 0.6627594627594627
User 69564 AUC after training: 0.6625152625152625
User 69564 does not improve AUC. Reverting changes.
Training on augumented user 16928 26/50 current_auc = 0.6627594627594627
User 16928 AUC after training: 0.6622710622710622
User 16928 does not improve AUC. Reverting changes.
Training on augumented user 45299 27/50 current_auc = 0.6627594627594627
User 45299 AUC after training: 0.6625152625152625
User 45299 does not improve AUC. Reverting changes.
Training on augumented user 89088 28/50 current_auc = 0.6627594627594627
User 89088 AUC after training: 0.6627594627594627
User 89088 does not improve AUC. Reverting changes.
Training on augumented user 111901 29/50 current_auc = 0.6627594627594627
User 111901 AUC after training: 0.6627594627594627
User 111901 does not improve AUC. Reverting changes.
Training on augumented user 74908 30/50 current_auc = 0.6627594627594627
User 74908 AUC after training: 0.6625152625152625
User 74908 does not improve AUC. Reverting changes.
Training on augumented user 111007 31/50 current_auc = 0.6627594627594627
User 111007 AUC after training: 0.6625152625152625
User 111007 does not improve AUC. Reverting changes.
Training on augumented user 131767 32/50 current_auc = 0.6627594627594627
User 131767 AUC after training: 0.6632478632478632
User 131767 improves AUC. Keeping the model.
Training on augumented user 33328 33/50 current_auc = 0.6632478632478632
User 33328 AUC after training: 0.6632478632478632
User 33328 does not improve AUC. Reverting changes.
Training on augumented user 74563 34/50 current_auc = 0.6632478632478632
User 74563 AUC after training: 0.6625152625152625
User 74563 does not improve AUC. Reverting changes.
Training on augumented user 8631 35/50 current_auc = 0.6632478632478632
User 8631 AUC after training: 0.6632478632478632
User 8631 does not improve AUC. Reverting changes.
Training on augumented user 21222 36/50 current_auc = 0.6632478632478632
User 21222 AUC after training: 0.6622710622710622
User 21222 does not improve AUC. Reverting changes.
Training on augumented user 4693 37/50 current_auc = 0.6632478632478632
User 4693 AUC after training: 0.662026862026862
User 4693 does not improve AUC. Reverting changes.
Training on augumented user 32544 38/50 current_auc = 0.6632478632478632
User 32544 AUC after training: 0.6627594627594627
User 32544 does not improve AUC. Reverting changes.
Training on augumented user 73488 39/50 current_auc = 0.6632478632478632
User 73488 AUC after training: 0.6627594627594627
User 73488 does not improve AUC. Reverting changes.
Training on augumented user 61006 40/50 current_auc = 0.6632478632478632
User 61006 AUC after training: 0.663003663003663
User 61006 does not improve AUC. Reverting changes.
Training on augumented user 100378 41/50 current_auc = 0.6632478632478632
User 100378 AUC after training: 0.663003663003663
User 100378 does not improve AUC. Reverting changes.
Training on augumented user 33500 42/50 current_auc = 0.6632478632478632
User 33500 AUC after training: 0.6634920634920635
User 33500 improves AUC. Keeping the model.
Training on augumented user 64278 43/50 current_auc = 0.6634920634920635
User 64278 AUC after training: 0.6634920634920635
User 64278 does not improve AUC. Reverting changes.
Training on augumented user 120743 44/50 current_auc = 0.6634920634920635
User 120743 AUC after training: 0.663003663003663
User 120743 does not improve AUC. Reverting changes.
Training on augumented user 47788 45/50 current_auc = 0.6634920634920635
User 47788 AUC after training: 0.6617826617826618
User 47788 does not improve AUC. Reverting changes.
Training on augumented user 124789 46/50 current_auc = 0.6634920634920635
User 124789 AUC after training: 0.6625152625152625
User 124789 does not improve AUC. Reverting changes.
Training on augumented user 46567 47/50 current_auc = 0.6634920634920635
User 46567 AUC after training: 0.6627594627594627
User 46567 does not improve AUC. Reverting changes.
Training on augumented user 90960 48/50 current_auc = 0.6634920634920635
User 90960 AUC after training: 0.6632478632478632
User 90960 does not improve AUC. Reverting changes.
Training on augumented user 107487 49/50 current_auc = 0.6634920634920635
User 107487 AUC after training: 0.6632478632478633
User 107487 does not improve AUC. Reverting changes.
[2024-12-02 18:42:00.941700] start test user 29882 110/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:01.450728] start test user 29882 110/568 recall augumented users by random, augumented_users = [101382, 75950, 77163, 75574, 3152, 71693, 22546, 23072, 43766, 665, 71927, 33693, 109173, 106731, 7142, 41186, 43043, 89343, 6432, 10686, 107909, 122013, 81760, 33647, 20719, 136129, 72390, 71782, 27565, 103516, 133369, 98402, 31428, 11175, 49002, 121840, 28693, 30475, 90116, 71244, 48260, 48538, 91767, 4417, 29787, 44497, 48947, 3629, 41129, 68622]
[2024-12-02 18:42:01.466283] user = 29882 Cloud 110/568
[2024-12-02 18:42:01.498904] user = 29882 Local 110/568
[2024-12-02 18:42:01.576061] user = 29882 Local+ 110/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:03.613935] user = 29882 MPDA- 110/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7912218268090154
Training on augumented user 101382 0/50 current_auc = 0.7912218268090154
User 101382 AUC after training: 0.7922103598260182
User 101382 improves AUC. Keeping the model.
Training on augumented user 75950 1/50 current_auc = 0.7922103598260182
User 75950 AUC after training: 0.7926057730328193
User 75950 improves AUC. Keeping the model.
Training on augumented user 77163 2/50 current_auc = 0.7926057730328193
User 77163 AUC after training: 0.7931988928430209
User 77163 improves AUC. Keeping the model.
Training on augumented user 75574 3/50 current_auc = 0.7931988928430209
User 75574 AUC after training: 0.7933965994464215
User 75574 improves AUC. Keeping the model.
Training on augumented user 3152 4/50 current_auc = 0.7933965994464215
User 3152 AUC after training: 0.7933965994464215
User 3152 does not improve AUC. Reverting changes.
Training on augumented user 71693 5/50 current_auc = 0.7933965994464215
User 71693 AUC after training: 0.7931988928430209
User 71693 does not improve AUC. Reverting changes.
Training on augumented user 22546 6/50 current_auc = 0.7933965994464215
User 22546 AUC after training: 0.7933965994464215
User 22546 does not improve AUC. Reverting changes.
Training on augumented user 23072 7/50 current_auc = 0.7933965994464215
User 23072 AUC after training: 0.7933965994464215
User 23072 does not improve AUC. Reverting changes.
Training on augumented user 43766 8/50 current_auc = 0.7933965994464215
User 43766 AUC after training: 0.7928034796362199
User 43766 does not improve AUC. Reverting changes.
Training on augumented user 665 9/50 current_auc = 0.7933965994464215
User 665 AUC after training: 0.7931988928430209
User 665 does not improve AUC. Reverting changes.
Training on augumented user 71927 10/50 current_auc = 0.7933965994464215
User 71927 AUC after training: 0.7931988928430209
User 71927 does not improve AUC. Reverting changes.
Training on augumented user 33693 11/50 current_auc = 0.7933965994464215
User 33693 AUC after training: 0.7935943060498221
User 33693 improves AUC. Keeping the model.
Training on augumented user 109173 12/50 current_auc = 0.7935943060498221
User 109173 AUC after training: 0.7939897192566232
User 109173 improves AUC. Keeping the model.
Training on augumented user 106731 13/50 current_auc = 0.7939897192566232
User 106731 AUC after training: 0.7941874258600238
User 106731 improves AUC. Keeping the model.
Training on augumented user 7142 14/50 current_auc = 0.7941874258600238
User 7142 AUC after training: 0.7935943060498221
User 7142 does not improve AUC. Reverting changes.
Training on augumented user 41186 15/50 current_auc = 0.7941874258600238
User 41186 AUC after training: 0.7941874258600237
User 41186 does not improve AUC. Reverting changes.
Training on augumented user 43043 16/50 current_auc = 0.7941874258600238
User 43043 AUC after training: 0.7957690786872281
User 43043 improves AUC. Keeping the model.
Training on augumented user 89343 17/50 current_auc = 0.7957690786872281
User 89343 AUC after training: 0.7951759588770265
User 89343 does not improve AUC. Reverting changes.
Training on augumented user 6432 18/50 current_auc = 0.7957690786872281
User 6432 AUC after training: 0.795373665480427
User 6432 does not improve AUC. Reverting changes.
Training on augumented user 10686 19/50 current_auc = 0.7957690786872281
User 10686 AUC after training: 0.7943851324634243
User 10686 does not improve AUC. Reverting changes.
Training on augumented user 107909 20/50 current_auc = 0.7957690786872281
User 107909 AUC after training: 0.7953736654804271
User 107909 does not improve AUC. Reverting changes.
Training on augumented user 122013 21/50 current_auc = 0.7957690786872281
User 122013 AUC after training: 0.7959667852906288
User 122013 improves AUC. Keeping the model.
Training on augumented user 81760 22/50 current_auc = 0.7959667852906288
User 81760 AUC after training: 0.7959667852906287
User 81760 does not improve AUC. Reverting changes.
Training on augumented user 33647 23/50 current_auc = 0.7959667852906288
User 33647 AUC after training: 0.7947805456702254
User 33647 does not improve AUC. Reverting changes.
Training on augumented user 20719 24/50 current_auc = 0.7959667852906288
User 20719 AUC after training: 0.795373665480427
User 20719 does not improve AUC. Reverting changes.
Training on augumented user 136129 25/50 current_auc = 0.7959667852906288
User 136129 AUC after training: 0.7951759588770265
User 136129 does not improve AUC. Reverting changes.
Training on augumented user 72390 26/50 current_auc = 0.7959667852906288
User 72390 AUC after training: 0.7947805456702254
User 72390 does not improve AUC. Reverting changes.
Training on augumented user 71782 27/50 current_auc = 0.7959667852906288
User 71782 AUC after training: 0.7953736654804271
User 71782 does not improve AUC. Reverting changes.
Training on augumented user 27565 28/50 current_auc = 0.7959667852906288
User 27565 AUC after training: 0.794978252273626
User 27565 does not improve AUC. Reverting changes.
Training on augumented user 103516 29/50 current_auc = 0.7959667852906288
User 103516 AUC after training: 0.7953736654804271
User 103516 does not improve AUC. Reverting changes.
Training on augumented user 133369 30/50 current_auc = 0.7959667852906288
User 133369 AUC after training: 0.794978252273626
User 133369 does not improve AUC. Reverting changes.
Training on augumented user 98402 31/50 current_auc = 0.7959667852906288
User 98402 AUC after training: 0.7947805456702254
User 98402 does not improve AUC. Reverting changes.
Training on augumented user 31428 32/50 current_auc = 0.7959667852906288
User 31428 AUC after training: 0.7957690786872281
User 31428 does not improve AUC. Reverting changes.
Training on augumented user 11175 33/50 current_auc = 0.7959667852906288
User 11175 AUC after training: 0.7955713720838276
User 11175 does not improve AUC. Reverting changes.
Training on augumented user 49002 34/50 current_auc = 0.7959667852906288
User 49002 AUC after training: 0.7941874258600237
User 49002 does not improve AUC. Reverting changes.
Training on augumented user 121840 35/50 current_auc = 0.7959667852906288
User 121840 AUC after training: 0.7945828390668248
User 121840 does not improve AUC. Reverting changes.
Training on augumented user 28693 36/50 current_auc = 0.7959667852906288
User 28693 AUC after training: 0.7957690786872281
User 28693 does not improve AUC. Reverting changes.
Training on augumented user 30475 37/50 current_auc = 0.7959667852906288
User 30475 AUC after training: 0.7947805456702254
User 30475 does not improve AUC. Reverting changes.
Training on augumented user 90116 38/50 current_auc = 0.7959667852906288
User 90116 AUC after training: 0.7953736654804271
User 90116 does not improve AUC. Reverting changes.
Training on augumented user 71244 39/50 current_auc = 0.7959667852906288
User 71244 AUC after training: 0.7926057730328193
User 71244 does not improve AUC. Reverting changes.
Training on augumented user 48260 40/50 current_auc = 0.7959667852906288
User 48260 AUC after training: 0.7955713720838276
User 48260 does not improve AUC. Reverting changes.
Training on augumented user 48538 41/50 current_auc = 0.7959667852906288
User 48538 AUC after training: 0.7935943060498221
User 48538 does not improve AUC. Reverting changes.
Training on augumented user 91767 42/50 current_auc = 0.7959667852906288
User 91767 AUC after training: 0.7951759588770265
User 91767 does not improve AUC. Reverting changes.
Training on augumented user 4417 43/50 current_auc = 0.7959667852906288
User 4417 AUC after training: 0.7945828390668248
User 4417 does not improve AUC. Reverting changes.
Training on augumented user 29787 44/50 current_auc = 0.7959667852906288
User 29787 AUC after training: 0.7953736654804271
User 29787 does not improve AUC. Reverting changes.
Training on augumented user 44497 45/50 current_auc = 0.7959667852906288
User 44497 AUC after training: 0.7957690786872281
User 44497 does not improve AUC. Reverting changes.
Training on augumented user 48947 46/50 current_auc = 0.7959667852906288
User 48947 AUC after training: 0.7941874258600238
User 48947 does not improve AUC. Reverting changes.
Training on augumented user 3629 47/50 current_auc = 0.7959667852906288
User 3629 AUC after training: 0.7916172400158166
User 3629 does not improve AUC. Reverting changes.
Training on augumented user 41129 48/50 current_auc = 0.7959667852906288
User 41129 AUC after training: 0.794978252273626
User 41129 does not improve AUC. Reverting changes.
Training on augumented user 68622 49/50 current_auc = 0.7959667852906288
User 68622 AUC after training: 0.7945828390668248
User 68622 does not improve AUC. Reverting changes.
[2024-12-02 18:42:36.304427] start test user 29894 111/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:36.998390] start test user 29894 111/568 recall augumented users by random, augumented_users = [61502, 89779, 67511, 36040, 50392, 73085, 46191, 137326, 121800, 14835, 68659, 57939, 70597, 44967, 88623, 3227, 98906, 1321, 27429, 19276, 46501, 76690, 87902, 86616, 24792, 45434, 104107, 59268, 56072, 62337, 94083, 58422, 94629, 51949, 95567, 106279, 117409, 22852, 129460, 129456, 102135, 37399, 33430, 84300, 76214, 135226, 69699, 87399, 33047, 23486]
[2024-12-02 18:42:37.021113] user = 29894 Cloud 111/568
[2024-12-02 18:42:37.035255] user = 29894 Local 111/568
[2024-12-02 18:42:37.163679] user = 29894 Local+ 111/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:39.773482] user = 29894 MPDA- 111/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5833333333333334
Training on augumented user 61502 0/50 current_auc = 0.5833333333333334
User 61502 AUC after training: 0.5833333333333334
User 61502 does not improve AUC. Reverting changes.
Training on augumented user 89779 1/50 current_auc = 0.5833333333333334
User 89779 AUC after training: 0.5833333333333334
User 89779 does not improve AUC. Reverting changes.
Training on augumented user 67511 2/50 current_auc = 0.5833333333333334
User 67511 AUC after training: 0.5833333333333334
User 67511 does not improve AUC. Reverting changes.
Training on augumented user 36040 3/50 current_auc = 0.5833333333333334
User 36040 AUC after training: 0.5833333333333334
User 36040 does not improve AUC. Reverting changes.
Training on augumented user 50392 4/50 current_auc = 0.5833333333333334
User 50392 AUC after training: 0.5833333333333334
User 50392 does not improve AUC. Reverting changes.
Training on augumented user 73085 5/50 current_auc = 0.5833333333333334
User 73085 AUC after training: 0.5833333333333334
User 73085 does not improve AUC. Reverting changes.
Training on augumented user 46191 6/50 current_auc = 0.5833333333333334
User 46191 AUC after training: 0.5833333333333334
User 46191 does not improve AUC. Reverting changes.
Training on augumented user 137326 7/50 current_auc = 0.5833333333333334
User 137326 AUC after training: 0.5833333333333334
User 137326 does not improve AUC. Reverting changes.
Training on augumented user 121800 8/50 current_auc = 0.5833333333333334
User 121800 AUC after training: 0.5833333333333334
User 121800 does not improve AUC. Reverting changes.
Training on augumented user 14835 9/50 current_auc = 0.5833333333333334
User 14835 AUC after training: 0.5833333333333334
User 14835 does not improve AUC. Reverting changes.
Training on augumented user 68659 10/50 current_auc = 0.5833333333333334
User 68659 AUC after training: 0.5833333333333334
User 68659 does not improve AUC. Reverting changes.
Training on augumented user 57939 11/50 current_auc = 0.5833333333333334
User 57939 AUC after training: 0.5833333333333334
User 57939 does not improve AUC. Reverting changes.
Training on augumented user 70597 12/50 current_auc = 0.5833333333333334
User 70597 AUC after training: 0.5833333333333334
User 70597 does not improve AUC. Reverting changes.
Training on augumented user 44967 13/50 current_auc = 0.5833333333333334
User 44967 AUC after training: 0.5833333333333334
User 44967 does not improve AUC. Reverting changes.
Training on augumented user 88623 14/50 current_auc = 0.5833333333333334
User 88623 AUC after training: 0.5833333333333334
User 88623 does not improve AUC. Reverting changes.
Training on augumented user 3227 15/50 current_auc = 0.5833333333333334
User 3227 AUC after training: 0.5833333333333334
User 3227 does not improve AUC. Reverting changes.
Training on augumented user 98906 16/50 current_auc = 0.5833333333333334
User 98906 AUC after training: 0.5833333333333334
User 98906 does not improve AUC. Reverting changes.
Training on augumented user 1321 17/50 current_auc = 0.5833333333333334
User 1321 AUC after training: 0.5833333333333334
User 1321 does not improve AUC. Reverting changes.
Training on augumented user 27429 18/50 current_auc = 0.5833333333333334
User 27429 AUC after training: 0.5
User 27429 does not improve AUC. Reverting changes.
Training on augumented user 19276 19/50 current_auc = 0.5833333333333334
User 19276 AUC after training: 0.5833333333333334
User 19276 does not improve AUC. Reverting changes.
Training on augumented user 46501 20/50 current_auc = 0.5833333333333334
User 46501 AUC after training: 0.5833333333333334
User 46501 does not improve AUC. Reverting changes.
Training on augumented user 76690 21/50 current_auc = 0.5833333333333334
User 76690 AUC after training: 0.5833333333333334
User 76690 does not improve AUC. Reverting changes.
Training on augumented user 87902 22/50 current_auc = 0.5833333333333334
User 87902 AUC after training: 0.5833333333333334
User 87902 does not improve AUC. Reverting changes.
Training on augumented user 86616 23/50 current_auc = 0.5833333333333334
User 86616 AUC after training: 0.5833333333333334
User 86616 does not improve AUC. Reverting changes.
Training on augumented user 24792 24/50 current_auc = 0.5833333333333334
User 24792 AUC after training: 0.5833333333333334
User 24792 does not improve AUC. Reverting changes.
Training on augumented user 45434 25/50 current_auc = 0.5833333333333334
User 45434 AUC after training: 0.5833333333333334
User 45434 does not improve AUC. Reverting changes.
Training on augumented user 104107 26/50 current_auc = 0.5833333333333334
User 104107 AUC after training: 0.5833333333333334
User 104107 does not improve AUC. Reverting changes.
Training on augumented user 59268 27/50 current_auc = 0.5833333333333334
User 59268 AUC after training: 0.5833333333333334
User 59268 does not improve AUC. Reverting changes.
Training on augumented user 56072 28/50 current_auc = 0.5833333333333334
User 56072 AUC after training: 0.5833333333333334
User 56072 does not improve AUC. Reverting changes.
Training on augumented user 62337 29/50 current_auc = 0.5833333333333334
User 62337 AUC after training: 0.5833333333333334
User 62337 does not improve AUC. Reverting changes.
Training on augumented user 94083 30/50 current_auc = 0.5833333333333334
User 94083 AUC after training: 0.5833333333333334
User 94083 does not improve AUC. Reverting changes.
Training on augumented user 58422 31/50 current_auc = 0.5833333333333334
User 58422 AUC after training: 0.5833333333333334
User 58422 does not improve AUC. Reverting changes.
Training on augumented user 94629 32/50 current_auc = 0.5833333333333334
User 94629 AUC after training: 0.5833333333333334
User 94629 does not improve AUC. Reverting changes.
Training on augumented user 51949 33/50 current_auc = 0.5833333333333334
User 51949 AUC after training: 0.5
User 51949 does not improve AUC. Reverting changes.
Training on augumented user 95567 34/50 current_auc = 0.5833333333333334
User 95567 AUC after training: 0.5833333333333334
User 95567 does not improve AUC. Reverting changes.
Training on augumented user 106279 35/50 current_auc = 0.5833333333333334
User 106279 AUC after training: 0.5833333333333334
User 106279 does not improve AUC. Reverting changes.
Training on augumented user 117409 36/50 current_auc = 0.5833333333333334
User 117409 AUC after training: 0.5833333333333334
User 117409 does not improve AUC. Reverting changes.
Training on augumented user 22852 37/50 current_auc = 0.5833333333333334
User 22852 AUC after training: 0.5833333333333334
User 22852 does not improve AUC. Reverting changes.
Training on augumented user 129460 38/50 current_auc = 0.5833333333333334
User 129460 AUC after training: 0.5833333333333334
User 129460 does not improve AUC. Reverting changes.
Training on augumented user 129456 39/50 current_auc = 0.5833333333333334
User 129456 AUC after training: 0.5833333333333334
User 129456 does not improve AUC. Reverting changes.
Training on augumented user 102135 40/50 current_auc = 0.5833333333333334
User 102135 AUC after training: 0.5833333333333334
User 102135 does not improve AUC. Reverting changes.
Training on augumented user 37399 41/50 current_auc = 0.5833333333333334
User 37399 AUC after training: 0.5833333333333334
User 37399 does not improve AUC. Reverting changes.
Training on augumented user 33430 42/50 current_auc = 0.5833333333333334
User 33430 AUC after training: 0.5833333333333334
User 33430 does not improve AUC. Reverting changes.
Training on augumented user 84300 43/50 current_auc = 0.5833333333333334
User 84300 AUC after training: 0.5833333333333334
User 84300 does not improve AUC. Reverting changes.
Training on augumented user 76214 44/50 current_auc = 0.5833333333333334
User 76214 AUC after training: 0.5833333333333334
User 76214 does not improve AUC. Reverting changes.
Training on augumented user 135226 45/50 current_auc = 0.5833333333333334
User 135226 AUC after training: 0.5833333333333334
User 135226 does not improve AUC. Reverting changes.
Training on augumented user 69699 46/50 current_auc = 0.5833333333333334
User 69699 AUC after training: 0.5833333333333334
User 69699 does not improve AUC. Reverting changes.
Training on augumented user 87399 47/50 current_auc = 0.5833333333333334
User 87399 AUC after training: 0.5833333333333334
User 87399 does not improve AUC. Reverting changes.
Training on augumented user 33047 48/50 current_auc = 0.5833333333333334
User 33047 AUC after training: 0.5833333333333334
User 33047 does not improve AUC. Reverting changes.
Training on augumented user 23486 49/50 current_auc = 0.5833333333333334
User 23486 AUC after training: 0.5833333333333334
User 23486 does not improve AUC. Reverting changes.
[2024-12-02 18:43:11.329202] start test user 29916 112/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:12.146403] start test user 29916 112/568 recall augumented users by random, augumented_users = [62337, 44910, 117031, 123848, 54918, 136946, 23511, 96326, 131541, 123045, 8363, 3764, 92477, 136253, 26112, 124612, 125636, 71353, 2316, 54170, 114200, 2437, 106164, 74027, 108335, 20782, 13436, 46501, 5663, 32375, 20766, 75067, 75849, 63010, 88644, 20257, 61089, 8527, 24546, 109464, 71244, 57262, 42004, 56030, 13404, 115557, 29924, 118170, 52296, 29320]
[2024-12-02 18:43:12.183598] user = 29916 Cloud 112/568
[2024-12-02 18:43:12.210481] user = 29916 Local 112/568
[2024-12-02 18:43:12.348843] user = 29916 Local+ 112/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:14.317315] user = 29916 MPDA- 112/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7445721583652618
Training on augumented user 62337 0/50 current_auc = 0.7445721583652618
User 62337 AUC after training: 0.7420178799489145
User 62337 does not improve AUC. Reverting changes.
Training on augumented user 44910 1/50 current_auc = 0.7445721583652618
User 44910 AUC after training: 0.7420178799489145
User 44910 does not improve AUC. Reverting changes.
Training on augumented user 117031 2/50 current_auc = 0.7445721583652618
User 117031 AUC after training: 0.7445721583652618
User 117031 does not improve AUC. Reverting changes.
Training on augumented user 123848 3/50 current_auc = 0.7445721583652618
User 123848 AUC after training: 0.7432950191570882
User 123848 does not improve AUC. Reverting changes.
Training on augumented user 54918 4/50 current_auc = 0.7445721583652618
User 54918 AUC after training: 0.7445721583652618
User 54918 does not improve AUC. Reverting changes.
Training on augumented user 136946 5/50 current_auc = 0.7445721583652618
User 136946 AUC after training: 0.7445721583652618
User 136946 does not improve AUC. Reverting changes.
Training on augumented user 23511 6/50 current_auc = 0.7445721583652618
User 23511 AUC after training: 0.7394636015325671
User 23511 does not improve AUC. Reverting changes.
Training on augumented user 96326 7/50 current_auc = 0.7445721583652618
User 96326 AUC after training: 0.7458492975734355
User 96326 improves AUC. Keeping the model.
Training on augumented user 131541 8/50 current_auc = 0.7458492975734355
User 131541 AUC after training: 0.7420178799489145
User 131541 does not improve AUC. Reverting changes.
Training on augumented user 123045 9/50 current_auc = 0.7458492975734355
User 123045 AUC after training: 0.7432950191570882
User 123045 does not improve AUC. Reverting changes.
Training on augumented user 8363 10/50 current_auc = 0.7458492975734355
User 8363 AUC after training: 0.7445721583652618
User 8363 does not improve AUC. Reverting changes.
Training on augumented user 3764 11/50 current_auc = 0.7458492975734355
User 3764 AUC after training: 0.7445721583652618
User 3764 does not improve AUC. Reverting changes.
Training on augumented user 92477 12/50 current_auc = 0.7458492975734355
User 92477 AUC after training: 0.7458492975734355
User 92477 does not improve AUC. Reverting changes.
Training on augumented user 136253 13/50 current_auc = 0.7458492975734355
User 136253 AUC after training: 0.7432950191570882
User 136253 does not improve AUC. Reverting changes.
Training on augumented user 26112 14/50 current_auc = 0.7458492975734355
User 26112 AUC after training: 0.7420178799489145
User 26112 does not improve AUC. Reverting changes.
Training on augumented user 124612 15/50 current_auc = 0.7458492975734355
User 124612 AUC after training: 0.7420178799489145
User 124612 does not improve AUC. Reverting changes.
Training on augumented user 125636 16/50 current_auc = 0.7458492975734355
User 125636 AUC after training: 0.7432950191570882
User 125636 does not improve AUC. Reverting changes.
Training on augumented user 71353 17/50 current_auc = 0.7458492975734355
User 71353 AUC after training: 0.7445721583652618
User 71353 does not improve AUC. Reverting changes.
Training on augumented user 2316 18/50 current_auc = 0.7458492975734355
User 2316 AUC after training: 0.7445721583652618
User 2316 does not improve AUC. Reverting changes.
Training on augumented user 54170 19/50 current_auc = 0.7458492975734355
User 54170 AUC after training: 0.7445721583652618
User 54170 does not improve AUC. Reverting changes.
Training on augumented user 114200 20/50 current_auc = 0.7458492975734355
User 114200 AUC after training: 0.7407407407407407
User 114200 does not improve AUC. Reverting changes.
Training on augumented user 2437 21/50 current_auc = 0.7458492975734355
User 2437 AUC after training: 0.7445721583652618
User 2437 does not improve AUC. Reverting changes.
Training on augumented user 106164 22/50 current_auc = 0.7458492975734355
User 106164 AUC after training: 0.7394636015325671
User 106164 does not improve AUC. Reverting changes.
Training on augumented user 74027 23/50 current_auc = 0.7458492975734355
User 74027 AUC after training: 0.7432950191570882
User 74027 does not improve AUC. Reverting changes.
Training on augumented user 108335 24/50 current_auc = 0.7458492975734355
User 108335 AUC after training: 0.7458492975734355
User 108335 does not improve AUC. Reverting changes.
Training on augumented user 20782 25/50 current_auc = 0.7458492975734355
User 20782 AUC after training: 0.7432950191570882
User 20782 does not improve AUC. Reverting changes.
Training on augumented user 13436 26/50 current_auc = 0.7458492975734355
User 13436 AUC after training: 0.7432950191570882
User 13436 does not improve AUC. Reverting changes.
Training on augumented user 46501 27/50 current_auc = 0.7458492975734355
User 46501 AUC after training: 0.7432950191570882
User 46501 does not improve AUC. Reverting changes.
Training on augumented user 5663 28/50 current_auc = 0.7458492975734355
User 5663 AUC after training: 0.7420178799489145
User 5663 does not improve AUC. Reverting changes.
Training on augumented user 32375 29/50 current_auc = 0.7458492975734355
User 32375 AUC after training: 0.7458492975734355
User 32375 does not improve AUC. Reverting changes.
Training on augumented user 20766 30/50 current_auc = 0.7458492975734355
User 20766 AUC after training: 0.7458492975734355
User 20766 does not improve AUC. Reverting changes.
Training on augumented user 75067 31/50 current_auc = 0.7458492975734355
User 75067 AUC after training: 0.7445721583652618
User 75067 does not improve AUC. Reverting changes.
Training on augumented user 75849 32/50 current_auc = 0.7458492975734355
User 75849 AUC after training: 0.7458492975734355
User 75849 does not improve AUC. Reverting changes.
Training on augumented user 63010 33/50 current_auc = 0.7458492975734355
User 63010 AUC after training: 0.7445721583652618
User 63010 does not improve AUC. Reverting changes.
Training on augumented user 88644 34/50 current_auc = 0.7458492975734355
User 88644 AUC after training: 0.7445721583652618
User 88644 does not improve AUC. Reverting changes.
Training on augumented user 20257 35/50 current_auc = 0.7458492975734355
User 20257 AUC after training: 0.7420178799489144
User 20257 does not improve AUC. Reverting changes.
Training on augumented user 61089 36/50 current_auc = 0.7458492975734355
User 61089 AUC after training: 0.7432950191570882
User 61089 does not improve AUC. Reverting changes.
Training on augumented user 8527 37/50 current_auc = 0.7458492975734355
User 8527 AUC after training: 0.7458492975734355
User 8527 does not improve AUC. Reverting changes.
Training on augumented user 24546 38/50 current_auc = 0.7458492975734355
User 24546 AUC after training: 0.7458492975734354
User 24546 does not improve AUC. Reverting changes.
Training on augumented user 109464 39/50 current_auc = 0.7458492975734355
User 109464 AUC after training: 0.7432950191570882
User 109464 does not improve AUC. Reverting changes.
Training on augumented user 71244 40/50 current_auc = 0.7458492975734355
User 71244 AUC after training: 0.7407407407407408
User 71244 does not improve AUC. Reverting changes.
Training on augumented user 57262 41/50 current_auc = 0.7458492975734355
User 57262 AUC after training: 0.7432950191570882
User 57262 does not improve AUC. Reverting changes.
Training on augumented user 42004 42/50 current_auc = 0.7458492975734355
User 42004 AUC after training: 0.7445721583652618
User 42004 does not improve AUC. Reverting changes.
Training on augumented user 56030 43/50 current_auc = 0.7458492975734355
User 56030 AUC after training: 0.7432950191570882
User 56030 does not improve AUC. Reverting changes.
Training on augumented user 13404 44/50 current_auc = 0.7458492975734355
User 13404 AUC after training: 0.7445721583652618
User 13404 does not improve AUC. Reverting changes.
Training on augumented user 115557 45/50 current_auc = 0.7458492975734355
User 115557 AUC after training: 0.7458492975734355
User 115557 does not improve AUC. Reverting changes.
Training on augumented user 29924 46/50 current_auc = 0.7458492975734355
User 29924 AUC after training: 0.7432950191570882
User 29924 does not improve AUC. Reverting changes.
Training on augumented user 118170 47/50 current_auc = 0.7458492975734355
User 118170 AUC after training: 0.7445721583652618
User 118170 does not improve AUC. Reverting changes.
Training on augumented user 52296 48/50 current_auc = 0.7458492975734355
User 52296 AUC after training: 0.7471264367816093
User 52296 improves AUC. Keeping the model.
Training on augumented user 29320 49/50 current_auc = 0.7471264367816093
User 29320 AUC after training: 0.7432950191570882
User 29320 does not improve AUC. Reverting changes.
[2024-12-02 18:43:46.364950] start test user 29918 113/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:46.949868] start test user 29918 113/568 recall augumented users by random, augumented_users = [31401, 64459, 73462, 50295, 54358, 109954, 60679, 7749, 121640, 103977, 18849, 89289, 68750, 138286, 46566, 32062, 37276, 56158, 65815, 96065, 70322, 54438, 96353, 48440, 63396, 9330, 53101, 104896, 10040, 25304, 108129, 31721, 15574, 62278, 107590, 69807, 8110, 83340, 16332, 1494, 33303, 97483, 59135, 21644, 123862, 13916, 117273, 8243, 26470, 23149]
[2024-12-02 18:43:46.971659] user = 29918 Cloud 113/568
[2024-12-02 18:43:46.988772] user = 29918 Local 113/568
[2024-12-02 18:43:47.054873] user = 29918 Local+ 113/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:49.561841] user = 29918 MPDA- 113/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.73046875
Training on augumented user 31401 0/50 current_auc = 0.73046875
User 31401 AUC after training: 0.734375
User 31401 improves AUC. Keeping the model.
Training on augumented user 64459 1/50 current_auc = 0.734375
User 64459 AUC after training: 0.734375
User 64459 does not improve AUC. Reverting changes.
Training on augumented user 73462 2/50 current_auc = 0.734375
User 73462 AUC after training: 0.73828125
User 73462 improves AUC. Keeping the model.
Training on augumented user 50295 3/50 current_auc = 0.73828125
User 50295 AUC after training: 0.73828125
User 50295 does not improve AUC. Reverting changes.
Training on augumented user 54358 4/50 current_auc = 0.73828125
User 54358 AUC after training: 0.73046875
User 54358 does not improve AUC. Reverting changes.
Training on augumented user 109954 5/50 current_auc = 0.73828125
User 109954 AUC after training: 0.72265625
User 109954 does not improve AUC. Reverting changes.
Training on augumented user 60679 6/50 current_auc = 0.73828125
User 60679 AUC after training: 0.734375
User 60679 does not improve AUC. Reverting changes.
Training on augumented user 7749 7/50 current_auc = 0.73828125
User 7749 AUC after training: 0.73828125
User 7749 does not improve AUC. Reverting changes.
Training on augumented user 121640 8/50 current_auc = 0.73828125
User 121640 AUC after training: 0.7421875
User 121640 improves AUC. Keeping the model.
Training on augumented user 103977 9/50 current_auc = 0.7421875
User 103977 AUC after training: 0.7421875
User 103977 does not improve AUC. Reverting changes.
Training on augumented user 18849 10/50 current_auc = 0.7421875
User 18849 AUC after training: 0.7421875
User 18849 does not improve AUC. Reverting changes.
Training on augumented user 89289 11/50 current_auc = 0.7421875
User 89289 AUC after training: 0.7421875
User 89289 does not improve AUC. Reverting changes.
Training on augumented user 68750 12/50 current_auc = 0.7421875
User 68750 AUC after training: 0.7421875
User 68750 does not improve AUC. Reverting changes.
Training on augumented user 138286 13/50 current_auc = 0.7421875
User 138286 AUC after training: 0.7421875
User 138286 does not improve AUC. Reverting changes.
Training on augumented user 46566 14/50 current_auc = 0.7421875
User 46566 AUC after training: 0.7421875
User 46566 does not improve AUC. Reverting changes.
Training on augumented user 32062 15/50 current_auc = 0.7421875
User 32062 AUC after training: 0.7421875
User 32062 does not improve AUC. Reverting changes.
Training on augumented user 37276 16/50 current_auc = 0.7421875
User 37276 AUC after training: 0.7421875
User 37276 does not improve AUC. Reverting changes.
Training on augumented user 56158 17/50 current_auc = 0.7421875
User 56158 AUC after training: 0.7421875
User 56158 does not improve AUC. Reverting changes.
Training on augumented user 65815 18/50 current_auc = 0.7421875
User 65815 AUC after training: 0.7421875
User 65815 does not improve AUC. Reverting changes.
Training on augumented user 96065 19/50 current_auc = 0.7421875
User 96065 AUC after training: 0.7421875
User 96065 does not improve AUC. Reverting changes.
Training on augumented user 70322 20/50 current_auc = 0.7421875
User 70322 AUC after training: 0.7421875
User 70322 does not improve AUC. Reverting changes.
Training on augumented user 54438 21/50 current_auc = 0.7421875
User 54438 AUC after training: 0.7421875
User 54438 does not improve AUC. Reverting changes.
Training on augumented user 96353 22/50 current_auc = 0.7421875
User 96353 AUC after training: 0.7421875
User 96353 does not improve AUC. Reverting changes.
Training on augumented user 48440 23/50 current_auc = 0.7421875
User 48440 AUC after training: 0.7421875
User 48440 does not improve AUC. Reverting changes.
Training on augumented user 63396 24/50 current_auc = 0.7421875
User 63396 AUC after training: 0.7421875
User 63396 does not improve AUC. Reverting changes.
Training on augumented user 9330 25/50 current_auc = 0.7421875
User 9330 AUC after training: 0.7421875
User 9330 does not improve AUC. Reverting changes.
Training on augumented user 53101 26/50 current_auc = 0.7421875
User 53101 AUC after training: 0.7421875
User 53101 does not improve AUC. Reverting changes.
Training on augumented user 104896 27/50 current_auc = 0.7421875
User 104896 AUC after training: 0.7421875
User 104896 does not improve AUC. Reverting changes.
Training on augumented user 10040 28/50 current_auc = 0.7421875
User 10040 AUC after training: 0.7421875
User 10040 does not improve AUC. Reverting changes.
Training on augumented user 25304 29/50 current_auc = 0.7421875
User 25304 AUC after training: 0.7421875
User 25304 does not improve AUC. Reverting changes.
Training on augumented user 108129 30/50 current_auc = 0.7421875
User 108129 AUC after training: 0.7421875
User 108129 does not improve AUC. Reverting changes.
Training on augumented user 31721 31/50 current_auc = 0.7421875
User 31721 AUC after training: 0.7421875
User 31721 does not improve AUC. Reverting changes.
Training on augumented user 15574 32/50 current_auc = 0.7421875
User 15574 AUC after training: 0.7421875
User 15574 does not improve AUC. Reverting changes.
Training on augumented user 62278 33/50 current_auc = 0.7421875
User 62278 AUC after training: 0.7421875
User 62278 does not improve AUC. Reverting changes.
Training on augumented user 107590 34/50 current_auc = 0.7421875
User 107590 AUC after training: 0.7421875
User 107590 does not improve AUC. Reverting changes.
Training on augumented user 69807 35/50 current_auc = 0.7421875
User 69807 AUC after training: 0.7421875
User 69807 does not improve AUC. Reverting changes.
Training on augumented user 8110 36/50 current_auc = 0.7421875
User 8110 AUC after training: 0.7421875
User 8110 does not improve AUC. Reverting changes.
Training on augumented user 83340 37/50 current_auc = 0.7421875
User 83340 AUC after training: 0.7421875
User 83340 does not improve AUC. Reverting changes.
Training on augumented user 16332 38/50 current_auc = 0.7421875
User 16332 AUC after training: 0.7421875
User 16332 does not improve AUC. Reverting changes.
Training on augumented user 1494 39/50 current_auc = 0.7421875
User 1494 AUC after training: 0.7421875
User 1494 does not improve AUC. Reverting changes.
Training on augumented user 33303 40/50 current_auc = 0.7421875
User 33303 AUC after training: 0.7421875
User 33303 does not improve AUC. Reverting changes.
Training on augumented user 97483 41/50 current_auc = 0.7421875
User 97483 AUC after training: 0.7421875
User 97483 does not improve AUC. Reverting changes.
Training on augumented user 59135 42/50 current_auc = 0.7421875
User 59135 AUC after training: 0.7421875
User 59135 does not improve AUC. Reverting changes.
Training on augumented user 21644 43/50 current_auc = 0.7421875
User 21644 AUC after training: 0.7421875
User 21644 does not improve AUC. Reverting changes.
Training on augumented user 123862 44/50 current_auc = 0.7421875
User 123862 AUC after training: 0.7421875
User 123862 does not improve AUC. Reverting changes.
Training on augumented user 13916 45/50 current_auc = 0.7421875
User 13916 AUC after training: 0.7421875
User 13916 does not improve AUC. Reverting changes.
Training on augumented user 117273 46/50 current_auc = 0.7421875
User 117273 AUC after training: 0.7421875
User 117273 does not improve AUC. Reverting changes.
Training on augumented user 8243 47/50 current_auc = 0.7421875
User 8243 AUC after training: 0.7421875
User 8243 does not improve AUC. Reverting changes.
Training on augumented user 26470 48/50 current_auc = 0.7421875
User 26470 AUC after training: 0.7421875
User 26470 does not improve AUC. Reverting changes.
Training on augumented user 23149 49/50 current_auc = 0.7421875
User 23149 AUC after training: 0.7421875
User 23149 does not improve AUC. Reverting changes.
[2024-12-02 18:44:17.771802] start test user 29964 114/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:18.243160] start test user 29964 114/568 recall augumented users by random, augumented_users = [75446, 115034, 116511, 51063, 33734, 48343, 83340, 69201, 82869, 8668, 70267, 92204, 134471, 126229, 128917, 40828, 10331, 88076, 15355, 98161, 42468, 31856, 135367, 109618, 74420, 4002, 83334, 107749, 99725, 26182, 34965, 93539, 87392, 107185, 133610, 93039, 77159, 47212, 73130, 32949, 126494, 35831, 47422, 57116, 104913, 61294, 50871, 84863, 38317, 132038]
[2024-12-02 18:44:18.259450] user = 29964 Cloud 114/568
[2024-12-02 18:44:18.270312] user = 29964 Local 114/568
[2024-12-02 18:44:18.298715] user = 29964 Local+ 114/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:20.773135] user = 29964 MPDA- 114/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3958333333333333
Training on augumented user 75446 0/50 current_auc = 0.3958333333333333
User 75446 AUC after training: 0.3984375
User 75446 improves AUC. Keeping the model.
Training on augumented user 115034 1/50 current_auc = 0.3984375
User 115034 AUC after training: 0.4010416666666667
User 115034 improves AUC. Keeping the model.
Training on augumented user 116511 2/50 current_auc = 0.4010416666666667
User 116511 AUC after training: 0.4036458333333333
User 116511 improves AUC. Keeping the model.
Training on augumented user 51063 3/50 current_auc = 0.4036458333333333
User 51063 AUC after training: 0.3984375
User 51063 does not improve AUC. Reverting changes.
Training on augumented user 33734 4/50 current_auc = 0.4036458333333333
User 33734 AUC after training: 0.4010416666666667
User 33734 does not improve AUC. Reverting changes.
Training on augumented user 48343 5/50 current_auc = 0.4036458333333333
User 48343 AUC after training: 0.4010416666666667
User 48343 does not improve AUC. Reverting changes.
Training on augumented user 83340 6/50 current_auc = 0.4036458333333333
User 83340 AUC after training: 0.4010416666666667
User 83340 does not improve AUC. Reverting changes.
Training on augumented user 69201 7/50 current_auc = 0.4036458333333333
User 69201 AUC after training: 0.4036458333333333
User 69201 does not improve AUC. Reverting changes.
Training on augumented user 82869 8/50 current_auc = 0.4036458333333333
User 82869 AUC after training: 0.4010416666666667
User 82869 does not improve AUC. Reverting changes.
Training on augumented user 8668 9/50 current_auc = 0.4036458333333333
User 8668 AUC after training: 0.4036458333333333
User 8668 does not improve AUC. Reverting changes.
Training on augumented user 70267 10/50 current_auc = 0.4036458333333333
User 70267 AUC after training: 0.4036458333333333
User 70267 does not improve AUC. Reverting changes.
Training on augumented user 92204 11/50 current_auc = 0.4036458333333333
User 92204 AUC after training: 0.3984375
User 92204 does not improve AUC. Reverting changes.
Training on augumented user 134471 12/50 current_auc = 0.4036458333333333
User 134471 AUC after training: 0.4010416666666667
User 134471 does not improve AUC. Reverting changes.
Training on augumented user 126229 13/50 current_auc = 0.4036458333333333
User 126229 AUC after training: 0.4010416666666667
User 126229 does not improve AUC. Reverting changes.
Training on augumented user 128917 14/50 current_auc = 0.4036458333333333
User 128917 AUC after training: 0.3984375
User 128917 does not improve AUC. Reverting changes.
Training on augumented user 40828 15/50 current_auc = 0.4036458333333333
User 40828 AUC after training: 0.4036458333333333
User 40828 does not improve AUC. Reverting changes.
Training on augumented user 10331 16/50 current_auc = 0.4036458333333333
User 10331 AUC after training: 0.4010416666666667
User 10331 does not improve AUC. Reverting changes.
Training on augumented user 88076 17/50 current_auc = 0.4036458333333333
User 88076 AUC after training: 0.4036458333333333
User 88076 does not improve AUC. Reverting changes.
Training on augumented user 15355 18/50 current_auc = 0.4036458333333333
User 15355 AUC after training: 0.3958333333333333
User 15355 does not improve AUC. Reverting changes.
Training on augumented user 98161 19/50 current_auc = 0.4036458333333333
User 98161 AUC after training: 0.4010416666666667
User 98161 does not improve AUC. Reverting changes.
Training on augumented user 42468 20/50 current_auc = 0.4036458333333333
User 42468 AUC after training: 0.4010416666666667
User 42468 does not improve AUC. Reverting changes.
Training on augumented user 31856 21/50 current_auc = 0.4036458333333333
User 31856 AUC after training: 0.3984375
User 31856 does not improve AUC. Reverting changes.
Training on augumented user 135367 22/50 current_auc = 0.4036458333333333
User 135367 AUC after training: 0.4010416666666667
User 135367 does not improve AUC. Reverting changes.
Training on augumented user 109618 23/50 current_auc = 0.4036458333333333
User 109618 AUC after training: 0.4036458333333333
User 109618 does not improve AUC. Reverting changes.
Training on augumented user 74420 24/50 current_auc = 0.4036458333333333
User 74420 AUC after training: 0.4010416666666667
User 74420 does not improve AUC. Reverting changes.
Training on augumented user 4002 25/50 current_auc = 0.4036458333333333
User 4002 AUC after training: 0.3984375
User 4002 does not improve AUC. Reverting changes.
Training on augumented user 83334 26/50 current_auc = 0.4036458333333333
User 83334 AUC after training: 0.3958333333333333
User 83334 does not improve AUC. Reverting changes.
Training on augumented user 107749 27/50 current_auc = 0.4036458333333333
User 107749 AUC after training: 0.4010416666666667
User 107749 does not improve AUC. Reverting changes.
Training on augumented user 99725 28/50 current_auc = 0.4036458333333333
User 99725 AUC after training: 0.4010416666666667
User 99725 does not improve AUC. Reverting changes.
Training on augumented user 26182 29/50 current_auc = 0.4036458333333333
User 26182 AUC after training: 0.40625000000000006
User 26182 improves AUC. Keeping the model.
Training on augumented user 34965 30/50 current_auc = 0.40625000000000006
User 34965 AUC after training: 0.40364583333333337
User 34965 does not improve AUC. Reverting changes.
Training on augumented user 93539 31/50 current_auc = 0.40625000000000006
User 93539 AUC after training: 0.40625
User 93539 does not improve AUC. Reverting changes.
Training on augumented user 87392 32/50 current_auc = 0.40625000000000006
User 87392 AUC after training: 0.40625
User 87392 does not improve AUC. Reverting changes.
Training on augumented user 107185 33/50 current_auc = 0.40625000000000006
User 107185 AUC after training: 0.40364583333333337
User 107185 does not improve AUC. Reverting changes.
Training on augumented user 133610 34/50 current_auc = 0.40625000000000006
User 133610 AUC after training: 0.40364583333333337
User 133610 does not improve AUC. Reverting changes.
Training on augumented user 93039 35/50 current_auc = 0.40625000000000006
User 93039 AUC after training: 0.40625000000000006
User 93039 does not improve AUC. Reverting changes.
Training on augumented user 77159 36/50 current_auc = 0.40625000000000006
User 77159 AUC after training: 0.3932291666666667
User 77159 does not improve AUC. Reverting changes.
Training on augumented user 47212 37/50 current_auc = 0.40625000000000006
User 47212 AUC after training: 0.40625000000000006
User 47212 does not improve AUC. Reverting changes.
Training on augumented user 73130 38/50 current_auc = 0.40625000000000006
User 73130 AUC after training: 0.40364583333333337
User 73130 does not improve AUC. Reverting changes.
Training on augumented user 32949 39/50 current_auc = 0.40625000000000006
User 32949 AUC after training: 0.4036458333333333
User 32949 does not improve AUC. Reverting changes.
Training on augumented user 126494 40/50 current_auc = 0.40625000000000006
User 126494 AUC after training: 0.4010416666666667
User 126494 does not improve AUC. Reverting changes.
Training on augumented user 35831 41/50 current_auc = 0.40625000000000006
User 35831 AUC after training: 0.4036458333333333
User 35831 does not improve AUC. Reverting changes.
Training on augumented user 47422 42/50 current_auc = 0.40625000000000006
User 47422 AUC after training: 0.4088541666666667
User 47422 improves AUC. Keeping the model.
Training on augumented user 57116 43/50 current_auc = 0.4088541666666667
User 57116 AUC after training: 0.421875
User 57116 improves AUC. Keeping the model.
Training on augumented user 104913 44/50 current_auc = 0.421875
User 104913 AUC after training: 0.42708333333333337
User 104913 improves AUC. Keeping the model.
Training on augumented user 61294 45/50 current_auc = 0.42708333333333337
User 61294 AUC after training: 0.42968750000000006
User 61294 improves AUC. Keeping the model.
Training on augumented user 50871 46/50 current_auc = 0.42968750000000006
User 50871 AUC after training: 0.421875
User 50871 does not improve AUC. Reverting changes.
Training on augumented user 84863 47/50 current_auc = 0.42968750000000006
User 84863 AUC after training: 0.421875
User 84863 does not improve AUC. Reverting changes.
Training on augumented user 38317 48/50 current_auc = 0.42968750000000006
User 38317 AUC after training: 0.4244791666666667
User 38317 does not improve AUC. Reverting changes.
Training on augumented user 132038 49/50 current_auc = 0.42968750000000006
User 132038 AUC after training: 0.4296875
User 132038 does not improve AUC. Reverting changes.
[2024-12-02 18:44:53.339442] start test user 30047 115/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:54.064354] start test user 30047 115/568 recall augumented users by random, augumented_users = [55027, 124392, 131536, 78379, 14614, 110484, 19736, 78824, 129480, 84224, 40114, 69329, 77514, 73320, 122264, 123279, 56711, 58690, 136992, 135821, 25038, 117010, 38404, 259, 66262, 83917, 69633, 126738, 65659, 57683, 138289, 133117, 52084, 24728, 24215, 96108, 15000, 50701, 110997, 107731, 21951, 31428, 17203, 74380, 90912, 7636, 84723, 29152, 8455, 109219]
[2024-12-02 18:44:54.081967] user = 30047 Cloud 115/568
[2024-12-02 18:44:54.093562] user = 30047 Local 115/568
[2024-12-02 18:44:54.249004] user = 30047 Local+ 115/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:56.780227] user = 30047 MPDA- 115/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.33870967741935487
Training on augumented user 55027 0/50 current_auc = 0.33870967741935487
User 55027 AUC after training: 0.33870967741935487
User 55027 does not improve AUC. Reverting changes.
Training on augumented user 124392 1/50 current_auc = 0.33870967741935487
User 124392 AUC after training: 0.33870967741935487
User 124392 does not improve AUC. Reverting changes.
Training on augumented user 131536 2/50 current_auc = 0.33870967741935487
User 131536 AUC after training: 0.33870967741935487
User 131536 does not improve AUC. Reverting changes.
Training on augumented user 78379 3/50 current_auc = 0.33870967741935487
User 78379 AUC after training: 0.33870967741935487
User 78379 does not improve AUC. Reverting changes.
Training on augumented user 14614 4/50 current_auc = 0.33870967741935487
User 14614 AUC after training: 0.33870967741935487
User 14614 does not improve AUC. Reverting changes.
Training on augumented user 110484 5/50 current_auc = 0.33870967741935487
User 110484 AUC after training: 0.33870967741935487
User 110484 does not improve AUC. Reverting changes.
Training on augumented user 19736 6/50 current_auc = 0.33870967741935487
User 19736 AUC after training: 0.33870967741935487
User 19736 does not improve AUC. Reverting changes.
Training on augumented user 78824 7/50 current_auc = 0.33870967741935487
User 78824 AUC after training: 0.33870967741935487
User 78824 does not improve AUC. Reverting changes.
Training on augumented user 129480 8/50 current_auc = 0.33870967741935487
User 129480 AUC after training: 0.33870967741935487
User 129480 does not improve AUC. Reverting changes.
Training on augumented user 84224 9/50 current_auc = 0.33870967741935487
User 84224 AUC after training: 0.33870967741935487
User 84224 does not improve AUC. Reverting changes.
Training on augumented user 40114 10/50 current_auc = 0.33870967741935487
User 40114 AUC after training: 0.33870967741935487
User 40114 does not improve AUC. Reverting changes.
Training on augumented user 69329 11/50 current_auc = 0.33870967741935487
User 69329 AUC after training: 0.33870967741935487
User 69329 does not improve AUC. Reverting changes.
Training on augumented user 77514 12/50 current_auc = 0.33870967741935487
User 77514 AUC after training: 0.33870967741935487
User 77514 does not improve AUC. Reverting changes.
Training on augumented user 73320 13/50 current_auc = 0.33870967741935487
User 73320 AUC after training: 0.33870967741935487
User 73320 does not improve AUC. Reverting changes.
Training on augumented user 122264 14/50 current_auc = 0.33870967741935487
User 122264 AUC after training: 0.33870967741935487
User 122264 does not improve AUC. Reverting changes.
Training on augumented user 123279 15/50 current_auc = 0.33870967741935487
User 123279 AUC after training: 0.33870967741935487
User 123279 does not improve AUC. Reverting changes.
Training on augumented user 56711 16/50 current_auc = 0.33870967741935487
User 56711 AUC after training: 0.33870967741935487
User 56711 does not improve AUC. Reverting changes.
Training on augumented user 58690 17/50 current_auc = 0.33870967741935487
User 58690 AUC after training: 0.33870967741935487
User 58690 does not improve AUC. Reverting changes.
Training on augumented user 136992 18/50 current_auc = 0.33870967741935487
User 136992 AUC after training: 0.33870967741935487
User 136992 does not improve AUC. Reverting changes.
Training on augumented user 135821 19/50 current_auc = 0.33870967741935487
User 135821 AUC after training: 0.33870967741935487
User 135821 does not improve AUC. Reverting changes.
Training on augumented user 25038 20/50 current_auc = 0.33870967741935487
User 25038 AUC after training: 0.33870967741935487
User 25038 does not improve AUC. Reverting changes.
Training on augumented user 117010 21/50 current_auc = 0.33870967741935487
User 117010 AUC after training: 0.33870967741935487
User 117010 does not improve AUC. Reverting changes.
Training on augumented user 38404 22/50 current_auc = 0.33870967741935487
User 38404 AUC after training: 0.33870967741935487
User 38404 does not improve AUC. Reverting changes.
Training on augumented user 259 23/50 current_auc = 0.33870967741935487
User 259 AUC after training: 0.33870967741935487
User 259 does not improve AUC. Reverting changes.
Training on augumented user 66262 24/50 current_auc = 0.33870967741935487
User 66262 AUC after training: 0.33870967741935487
User 66262 does not improve AUC. Reverting changes.
Training on augumented user 83917 25/50 current_auc = 0.33870967741935487
User 83917 AUC after training: 0.33870967741935487
User 83917 does not improve AUC. Reverting changes.
Training on augumented user 69633 26/50 current_auc = 0.33870967741935487
User 69633 AUC after training: 0.33870967741935487
User 69633 does not improve AUC. Reverting changes.
Training on augumented user 126738 27/50 current_auc = 0.33870967741935487
User 126738 AUC after training: 0.33870967741935487
User 126738 does not improve AUC. Reverting changes.
Training on augumented user 65659 28/50 current_auc = 0.33870967741935487
User 65659 AUC after training: 0.33870967741935487
User 65659 does not improve AUC. Reverting changes.
Training on augumented user 57683 29/50 current_auc = 0.33870967741935487
User 57683 AUC after training: 0.33870967741935487
User 57683 does not improve AUC. Reverting changes.
Training on augumented user 138289 30/50 current_auc = 0.33870967741935487
User 138289 AUC after training: 0.33870967741935487
User 138289 does not improve AUC. Reverting changes.
Training on augumented user 133117 31/50 current_auc = 0.33870967741935487
User 133117 AUC after training: 0.33870967741935487
User 133117 does not improve AUC. Reverting changes.
Training on augumented user 52084 32/50 current_auc = 0.33870967741935487
User 52084 AUC after training: 0.33870967741935487
User 52084 does not improve AUC. Reverting changes.
Training on augumented user 24728 33/50 current_auc = 0.33870967741935487
User 24728 AUC after training: 0.33870967741935487
User 24728 does not improve AUC. Reverting changes.
Training on augumented user 24215 34/50 current_auc = 0.33870967741935487
User 24215 AUC after training: 0.33870967741935487
User 24215 does not improve AUC. Reverting changes.
Training on augumented user 96108 35/50 current_auc = 0.33870967741935487
User 96108 AUC after training: 0.33870967741935487
User 96108 does not improve AUC. Reverting changes.
Training on augumented user 15000 36/50 current_auc = 0.33870967741935487
User 15000 AUC after training: 0.33870967741935487
User 15000 does not improve AUC. Reverting changes.
Training on augumented user 50701 37/50 current_auc = 0.33870967741935487
User 50701 AUC after training: 0.33870967741935487
User 50701 does not improve AUC. Reverting changes.
Training on augumented user 110997 38/50 current_auc = 0.33870967741935487
User 110997 AUC after training: 0.33870967741935487
User 110997 does not improve AUC. Reverting changes.
Training on augumented user 107731 39/50 current_auc = 0.33870967741935487
User 107731 AUC after training: 0.33870967741935487
User 107731 does not improve AUC. Reverting changes.
Training on augumented user 21951 40/50 current_auc = 0.33870967741935487
User 21951 AUC after training: 0.33870967741935487
User 21951 does not improve AUC. Reverting changes.
Training on augumented user 31428 41/50 current_auc = 0.33870967741935487
User 31428 AUC after training: 0.33870967741935487
User 31428 does not improve AUC. Reverting changes.
Training on augumented user 17203 42/50 current_auc = 0.33870967741935487
User 17203 AUC after training: 0.33870967741935487
User 17203 does not improve AUC. Reverting changes.
Training on augumented user 74380 43/50 current_auc = 0.33870967741935487
User 74380 AUC after training: 0.33870967741935487
User 74380 does not improve AUC. Reverting changes.
Training on augumented user 90912 44/50 current_auc = 0.33870967741935487
User 90912 AUC after training: 0.33870967741935487
User 90912 does not improve AUC. Reverting changes.
Training on augumented user 7636 45/50 current_auc = 0.33870967741935487
User 7636 AUC after training: 0.33870967741935487
User 7636 does not improve AUC. Reverting changes.
Training on augumented user 84723 46/50 current_auc = 0.33870967741935487
User 84723 AUC after training: 0.33870967741935487
User 84723 does not improve AUC. Reverting changes.
Training on augumented user 29152 47/50 current_auc = 0.33870967741935487
User 29152 AUC after training: 0.33870967741935487
User 29152 does not improve AUC. Reverting changes.
Training on augumented user 8455 48/50 current_auc = 0.33870967741935487
User 8455 AUC after training: 0.33870967741935487
User 8455 does not improve AUC. Reverting changes.
Training on augumented user 109219 49/50 current_auc = 0.33870967741935487
User 109219 AUC after training: 0.33870967741935487
User 109219 does not improve AUC. Reverting changes.
[2024-12-02 18:45:29.806617] start test user 30092 116/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:30.687698] start test user 30092 116/568 recall augumented users by random, augumented_users = [81928, 112400, 11763, 59383, 88233, 121354, 60375, 123011, 51516, 114218, 125311, 127698, 109014, 103686, 11898, 16808, 118226, 94394, 105630, 129393, 32997, 28759, 70164, 93079, 12074, 1560, 44013, 2808, 64800, 50618, 78898, 135249, 75808, 117255, 82956, 70426, 585, 32687, 35167, 31552, 20399, 133231, 4076, 39200, 94696, 8957, 84646, 76828, 118830, 71444]
[2024-12-02 18:45:30.711245] user = 30092 Cloud 116/568
[2024-12-02 18:45:30.782473] user = 30092 Local 116/568
[2024-12-02 18:45:30.863986] user = 30092 Local+ 116/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:33.440327] user = 30092 MPDA- 116/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6834630390355675
Training on augumented user 81928 0/50 current_auc = 0.6834630390355675
User 81928 AUC after training: 0.6829882542369382
User 81928 does not improve AUC. Reverting changes.
Training on augumented user 112400 1/50 current_auc = 0.6834630390355675
User 112400 AUC after training: 0.6841132877815164
User 112400 improves AUC. Keeping the model.
Training on augumented user 11763 2/50 current_auc = 0.6841132877815164
User 11763 AUC after training: 0.6845777511714799
User 11763 improves AUC. Keeping the model.
Training on augumented user 59383 3/50 current_auc = 0.6845777511714799
User 59383 AUC after training: 0.6842268232768407
User 59383 does not improve AUC. Reverting changes.
Training on augumented user 88233 4/50 current_auc = 0.6845777511714799
User 88233 AUC after training: 0.6873438886939289
User 88233 improves AUC. Keeping the model.
Training on augumented user 121354 5/50 current_auc = 0.6873438886939289
User 121354 AUC after training: 0.6879631732138802
User 121354 improves AUC. Keeping the model.
Training on augumented user 60375 6/50 current_auc = 0.6879631732138802
User 60375 AUC after training: 0.6854653923167433
User 60375 does not improve AUC. Reverting changes.
Training on augumented user 123011 7/50 current_auc = 0.6879631732138802
User 123011 AUC after training: 0.688190244204529
User 123011 improves AUC. Keeping the model.
Training on augumented user 51516 8/50 current_auc = 0.688190244204529
User 51516 AUC after training: 0.686910389529963
User 51516 does not improve AUC. Reverting changes.
Training on augumented user 114218 9/50 current_auc = 0.688190244204529
User 114218 AUC after training: 0.6888508143591439
User 114218 improves AUC. Keeping the model.
Training on augumented user 125311 10/50 current_auc = 0.6888508143591439
User 125311 AUC after training: 0.687983816031212
User 125311 does not improve AUC. Reverting changes.
Training on augumented user 127698 11/50 current_auc = 0.6888508143591439
User 127698 AUC after training: 0.6890778853497925
User 127698 improves AUC. Keeping the model.
Training on augumented user 109014 12/50 current_auc = 0.6890778853497925
User 109014 AUC after training: 0.6898829552257292
User 109014 improves AUC. Keeping the model.
Training on augumented user 103686 13/50 current_auc = 0.6898829552257292
User 103686 AUC after training: 0.6889746712631339
User 103686 does not improve AUC. Reverting changes.
Training on augumented user 11898 14/50 current_auc = 0.6898829552257292
User 11898 AUC after training: 0.6879425303965485
User 11898 does not improve AUC. Reverting changes.
Training on augumented user 16808 15/50 current_auc = 0.6898829552257292
User 16808 AUC after training: 0.6892843135231096
User 16808 does not improve AUC. Reverting changes.
Training on augumented user 118226 16/50 current_auc = 0.6898829552257292
User 118226 AUC after training: 0.6917820944202465
User 118226 improves AUC. Keeping the model.
Training on augumented user 94394 17/50 current_auc = 0.6917820944202465
User 94394 AUC after training: 0.6918440228722416
User 94394 improves AUC. Keeping the model.
Training on augumented user 105630 18/50 current_auc = 0.6918440228722416
User 105630 AUC after training: 0.6913485952562806
User 105630 does not improve AUC. Reverting changes.
Training on augumented user 129393 19/50 current_auc = 0.6918440228722416
User 129393 AUC after training: 0.6916375946989246
User 129393 does not improve AUC. Reverting changes.
Training on augumented user 32997 20/50 current_auc = 0.6918440228722416
User 32997 AUC after training: 0.6915550234295977
User 32997 does not improve AUC. Reverting changes.
Training on augumented user 28759 21/50 current_auc = 0.6918440228722416
User 28759 AUC after training: 0.6911008814483
User 28759 does not improve AUC. Reverting changes.
Training on augumented user 70164 22/50 current_auc = 0.6918440228722416
User 70164 AUC after training: 0.6915756662469295
User 70164 does not improve AUC. Reverting changes.
Training on augumented user 93079 23/50 current_auc = 0.6918440228722416
User 93079 AUC after training: 0.6917201659682514
User 93079 does not improve AUC. Reverting changes.
Training on augumented user 12074 24/50 current_auc = 0.6918440228722416
User 12074 AUC after training: 0.6923394504882026
User 12074 improves AUC. Keeping the model.
Training on augumented user 1560 25/50 current_auc = 0.6923394504882026
User 1560 AUC after training: 0.6879631732138802
User 1560 does not improve AUC. Reverting changes.
Training on augumented user 44013 26/50 current_auc = 0.6923394504882026
User 44013 AUC after training: 0.691389880890944
User 44013 does not improve AUC. Reverting changes.
Training on augumented user 2808 27/50 current_auc = 0.6923394504882026
User 2808 AUC after training: 0.6914311665256074
User 2808 does not improve AUC. Reverting changes.
Training on augumented user 64800 28/50 current_auc = 0.6923394504882026
User 64800 AUC after training: 0.6925871642961832
User 64800 improves AUC. Keeping the model.
Training on augumented user 50618 29/50 current_auc = 0.6925871642961832
User 50618 AUC after training: 0.691967879776232
User 50618 does not improve AUC. Reverting changes.
Training on augumented user 78898 30/50 current_auc = 0.6925871642961832
User 78898 AUC after training: 0.6918027372375781
User 78898 does not improve AUC. Reverting changes.
Training on augumented user 135249 31/50 current_auc = 0.6925871642961832
User 135249 AUC after training: 0.6921330223148855
User 135249 does not improve AUC. Reverting changes.
Training on augumented user 75808 32/50 current_auc = 0.6925871642961832
User 75808 AUC after training: 0.6920710938628903
User 75808 does not improve AUC. Reverting changes.
Training on augumented user 117255 33/50 current_auc = 0.6925871642961832
User 117255 AUC after training: 0.692380736122866
User 117255 does not improve AUC. Reverting changes.
Training on augumented user 82956 34/50 current_auc = 0.6925871642961832
User 82956 AUC after training: 0.6924323431661954
User 82956 does not improve AUC. Reverting changes.
Training on augumented user 70426 35/50 current_auc = 0.6925871642961832
User 70426 AUC after training: 0.6919059513242367
User 70426 does not improve AUC. Reverting changes.
Training on augumented user 585 36/50 current_auc = 0.6925871642961832
User 585 AUC after training: 0.6918027372375781
User 585 does not improve AUC. Reverting changes.
Training on augumented user 32687 37/50 current_auc = 0.6925871642961832
User 32687 AUC after training: 0.6921123794975538
User 32687 does not improve AUC. Reverting changes.
Training on augumented user 35167 38/50 current_auc = 0.6925871642961832
User 35167 AUC after training: 0.6920091654108953
User 35167 does not improve AUC. Reverting changes.
Training on augumented user 31552 39/50 current_auc = 0.6925871642961832
User 31552 AUC after training: 0.6914311665256073
User 31552 does not improve AUC. Reverting changes.
Training on augumented user 20399 40/50 current_auc = 0.6925871642961832
User 20399 AUC after training: 0.6930619490948124
User 20399 improves AUC. Keeping the model.
Training on augumented user 133231 41/50 current_auc = 0.6930619490948124
User 133231 AUC after training: 0.6925458786615197
User 133231 does not improve AUC. Reverting changes.
Training on augumented user 4076 42/50 current_auc = 0.6930619490948124
User 4076 AUC after training: 0.690605453832339
User 4076 does not improve AUC. Reverting changes.
Training on augumented user 39200 43/50 current_auc = 0.6930619490948124
User 39200 AUC after training: 0.6932064488161345
User 39200 improves AUC. Keeping the model.
Training on augumented user 94696 44/50 current_auc = 0.6932064488161345
User 94696 AUC after training: 0.693949590240076
User 94696 improves AUC. Keeping the model.
Training on augumented user 8957 45/50 current_auc = 0.693949590240076
User 8957 AUC after training: 0.6919059513242367
User 8957 does not improve AUC. Reverting changes.
Training on augumented user 84646 46/50 current_auc = 0.693949590240076
User 84646 AUC after training: 0.6939495902400761
User 84646 improves AUC. Keeping the model.
Training on augumented user 76828 47/50 current_auc = 0.6939495902400761
User 76828 AUC after training: 0.69351609107611
User 76828 does not improve AUC. Reverting changes.
Training on augumented user 118830 48/50 current_auc = 0.6939495902400761
User 118830 AUC after training: 0.6942179468653882
User 118830 improves AUC. Keeping the model.
Training on augumented user 71444 49/50 current_auc = 0.6942179468653882
User 71444 AUC after training: 0.6940321615094028
User 71444 does not improve AUC. Reverting changes.
[2024-12-02 18:46:07.283192] start test user 30100 117/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:07.785137] start test user 30100 117/568 recall augumented users by random, augumented_users = [105944, 30447, 5836, 23359, 46525, 71693, 117590, 36028, 79717, 83523, 54808, 123164, 9328, 52547, 134638, 128178, 91080, 27652, 26481, 127590, 37309, 94013, 47776, 123054, 112520, 67816, 59148, 63519, 71636, 91115, 21129, 91636, 112811, 101233, 61320, 87255, 47259, 33165, 27909, 70332, 39645, 92028, 62273, 6121, 13672, 44162, 128409, 38209, 89526, 7324]
[2024-12-02 18:46:07.802287] user = 30100 Cloud 117/568
[2024-12-02 18:46:07.817965] user = 30100 Local 117/568
[2024-12-02 18:46:07.919571] user = 30100 Local+ 117/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:11.287699] user = 30100 MPDA- 117/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.796
Training on augumented user 105944 0/50 current_auc = 0.796
User 105944 AUC after training: 0.7953333333333334
User 105944 does not improve AUC. Reverting changes.
Training on augumented user 30447 1/50 current_auc = 0.796
User 30447 AUC after training: 0.7933333333333333
User 30447 does not improve AUC. Reverting changes.
Training on augumented user 5836 2/50 current_auc = 0.796
User 5836 AUC after training: 0.7946666666666667
User 5836 does not improve AUC. Reverting changes.
Training on augumented user 23359 3/50 current_auc = 0.796
User 23359 AUC after training: 0.7953333333333334
User 23359 does not improve AUC. Reverting changes.
Training on augumented user 46525 4/50 current_auc = 0.796
User 46525 AUC after training: 0.7966666666666666
User 46525 improves AUC. Keeping the model.
Training on augumented user 71693 5/50 current_auc = 0.7966666666666666
User 71693 AUC after training: 0.7946666666666667
User 71693 does not improve AUC. Reverting changes.
Training on augumented user 117590 6/50 current_auc = 0.7966666666666666
User 117590 AUC after training: 0.796
User 117590 does not improve AUC. Reverting changes.
Training on augumented user 36028 7/50 current_auc = 0.7966666666666666
User 36028 AUC after training: 0.7973333333333334
User 36028 improves AUC. Keeping the model.
Training on augumented user 79717 8/50 current_auc = 0.7973333333333334
User 79717 AUC after training: 0.796
User 79717 does not improve AUC. Reverting changes.
Training on augumented user 83523 9/50 current_auc = 0.7973333333333334
User 83523 AUC after training: 0.7983333333333333
User 83523 improves AUC. Keeping the model.
Training on augumented user 54808 10/50 current_auc = 0.7983333333333333
User 54808 AUC after training: 0.7953333333333333
User 54808 does not improve AUC. Reverting changes.
Training on augumented user 123164 11/50 current_auc = 0.7983333333333333
User 123164 AUC after training: 0.7973333333333334
User 123164 does not improve AUC. Reverting changes.
Training on augumented user 9328 12/50 current_auc = 0.7983333333333333
User 9328 AUC after training: 0.7966666666666666
User 9328 does not improve AUC. Reverting changes.
Training on augumented user 52547 13/50 current_auc = 0.7983333333333333
User 52547 AUC after training: 0.798
User 52547 does not improve AUC. Reverting changes.
Training on augumented user 134638 14/50 current_auc = 0.7983333333333333
User 134638 AUC after training: 0.7966666666666666
User 134638 does not improve AUC. Reverting changes.
Training on augumented user 128178 15/50 current_auc = 0.7983333333333333
User 128178 AUC after training: 0.7966666666666666
User 128178 does not improve AUC. Reverting changes.
Training on augumented user 91080 16/50 current_auc = 0.7983333333333333
User 91080 AUC after training: 0.7966666666666666
User 91080 does not improve AUC. Reverting changes.
Training on augumented user 27652 17/50 current_auc = 0.7983333333333333
User 27652 AUC after training: 0.7966666666666666
User 27652 does not improve AUC. Reverting changes.
Training on augumented user 26481 18/50 current_auc = 0.7983333333333333
User 26481 AUC after training: 0.7966666666666666
User 26481 does not improve AUC. Reverting changes.
Training on augumented user 127590 19/50 current_auc = 0.7983333333333333
User 127590 AUC after training: 0.7966666666666666
User 127590 does not improve AUC. Reverting changes.
Training on augumented user 37309 20/50 current_auc = 0.7983333333333333
User 37309 AUC after training: 0.7983333333333333
User 37309 does not improve AUC. Reverting changes.
Training on augumented user 94013 21/50 current_auc = 0.7983333333333333
User 94013 AUC after training: 0.7973333333333333
User 94013 does not improve AUC. Reverting changes.
Training on augumented user 47776 22/50 current_auc = 0.7983333333333333
User 47776 AUC after training: 0.7976666666666667
User 47776 does not improve AUC. Reverting changes.
Training on augumented user 123054 23/50 current_auc = 0.7983333333333333
User 123054 AUC after training: 0.7953333333333333
User 123054 does not improve AUC. Reverting changes.
Training on augumented user 112520 24/50 current_auc = 0.7983333333333333
User 112520 AUC after training: 0.798
User 112520 does not improve AUC. Reverting changes.
Training on augumented user 67816 25/50 current_auc = 0.7983333333333333
User 67816 AUC after training: 0.7983333333333333
User 67816 does not improve AUC. Reverting changes.
Training on augumented user 59148 26/50 current_auc = 0.7983333333333333
User 59148 AUC after training: 0.7946666666666666
User 59148 does not improve AUC. Reverting changes.
Training on augumented user 63519 27/50 current_auc = 0.7983333333333333
User 63519 AUC after training: 0.7983333333333333
User 63519 does not improve AUC. Reverting changes.
Training on augumented user 71636 28/50 current_auc = 0.7983333333333333
User 71636 AUC after training: 0.7973333333333334
User 71636 does not improve AUC. Reverting changes.
Training on augumented user 91115 29/50 current_auc = 0.7983333333333333
User 91115 AUC after training: 0.796
User 91115 does not improve AUC. Reverting changes.
Training on augumented user 21129 30/50 current_auc = 0.7983333333333333
User 21129 AUC after training: 0.7970000000000002
User 21129 does not improve AUC. Reverting changes.
Training on augumented user 91636 31/50 current_auc = 0.7983333333333333
User 91636 AUC after training: 0.7983333333333333
User 91636 does not improve AUC. Reverting changes.
Training on augumented user 112811 32/50 current_auc = 0.7983333333333333
User 112811 AUC after training: 0.7993333333333333
User 112811 improves AUC. Keeping the model.
Training on augumented user 101233 33/50 current_auc = 0.7993333333333333
User 101233 AUC after training: 0.7986666666666667
User 101233 does not improve AUC. Reverting changes.
Training on augumented user 61320 34/50 current_auc = 0.7993333333333333
User 61320 AUC after training: 0.8
User 61320 improves AUC. Keeping the model.
Training on augumented user 87255 35/50 current_auc = 0.8
User 87255 AUC after training: 0.798
User 87255 does not improve AUC. Reverting changes.
Training on augumented user 47259 36/50 current_auc = 0.8
User 47259 AUC after training: 0.7986666666666666
User 47259 does not improve AUC. Reverting changes.
Training on augumented user 33165 37/50 current_auc = 0.8
User 33165 AUC after training: 0.798
User 33165 does not improve AUC. Reverting changes.
Training on augumented user 27909 38/50 current_auc = 0.8
User 27909 AUC after training: 0.7986666666666666
User 27909 does not improve AUC. Reverting changes.
Training on augumented user 70332 39/50 current_auc = 0.8
User 70332 AUC after training: 0.7966666666666666
User 70332 does not improve AUC. Reverting changes.
Training on augumented user 39645 40/50 current_auc = 0.8
User 39645 AUC after training: 0.8013333333333335
User 39645 improves AUC. Keeping the model.
Training on augumented user 92028 41/50 current_auc = 0.8013333333333335
User 92028 AUC after training: 0.7986666666666667
User 92028 does not improve AUC. Reverting changes.
Training on augumented user 62273 42/50 current_auc = 0.8013333333333335
User 62273 AUC after training: 0.802
User 62273 improves AUC. Keeping the model.
Training on augumented user 6121 43/50 current_auc = 0.802
User 6121 AUC after training: 0.8013333333333335
User 6121 does not improve AUC. Reverting changes.
Training on augumented user 13672 44/50 current_auc = 0.802
User 13672 AUC after training: 0.7993333333333335
User 13672 does not improve AUC. Reverting changes.
Training on augumented user 44162 45/50 current_auc = 0.802
User 44162 AUC after training: 0.8006666666666666
User 44162 does not improve AUC. Reverting changes.
Training on augumented user 128409 46/50 current_auc = 0.802
User 128409 AUC after training: 0.7986666666666666
User 128409 does not improve AUC. Reverting changes.
Training on augumented user 38209 47/50 current_auc = 0.802
User 38209 AUC after training: 0.8
User 38209 does not improve AUC. Reverting changes.
Training on augumented user 89526 48/50 current_auc = 0.802
User 89526 AUC after training: 0.7986666666666667
User 89526 does not improve AUC. Reverting changes.
Training on augumented user 7324 49/50 current_auc = 0.802
User 7324 AUC after training: 0.7993333333333335
User 7324 does not improve AUC. Reverting changes.
[2024-12-02 18:46:39.310203] start test user 30102 118/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:40.072795] start test user 30102 118/568 recall augumented users by random, augumented_users = [69983, 69987, 8307, 6414, 18283, 59684, 32291, 59188, 52890, 108024, 98492, 68731, 100714, 130954, 127184, 127810, 36168, 74001, 39870, 2403, 11520, 35688, 108376, 138201, 9496, 93591, 120902, 117137, 91580, 91838, 33009, 37602, 58851, 38169, 83538, 132511, 106568, 13623, 38859, 83960, 105328, 66824, 57919, 18188, 76354, 49232, 102610, 106663, 115626, 1007]
[2024-12-02 18:46:40.087783] user = 30102 Cloud 118/568
[2024-12-02 18:46:40.099269] user = 30102 Local 118/568
[2024-12-02 18:46:40.129616] user = 30102 Local+ 118/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:42.978066] user = 30102 MPDA- 118/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7923076923076923
Training on augumented user 69983 0/50 current_auc = 0.7923076923076923
User 69983 AUC after training: 0.7923076923076923
User 69983 does not improve AUC. Reverting changes.
Training on augumented user 69987 1/50 current_auc = 0.7923076923076923
User 69987 AUC after training: 0.7957264957264957
User 69987 improves AUC. Keeping the model.
Training on augumented user 8307 2/50 current_auc = 0.7957264957264957
User 8307 AUC after training: 0.7957264957264957
User 8307 does not improve AUC. Reverting changes.
Training on augumented user 6414 3/50 current_auc = 0.7957264957264957
User 6414 AUC after training: 0.7948717948717948
User 6414 does not improve AUC. Reverting changes.
Training on augumented user 18283 4/50 current_auc = 0.7957264957264957
User 18283 AUC after training: 0.7957264957264957
User 18283 does not improve AUC. Reverting changes.
Training on augumented user 59684 5/50 current_auc = 0.7957264957264957
User 59684 AUC after training: 0.7957264957264957
User 59684 does not improve AUC. Reverting changes.
Training on augumented user 32291 6/50 current_auc = 0.7957264957264957
User 32291 AUC after training: 0.7957264957264957
User 32291 does not improve AUC. Reverting changes.
Training on augumented user 59188 7/50 current_auc = 0.7957264957264957
User 59188 AUC after training: 0.7931623931623931
User 59188 does not improve AUC. Reverting changes.
Training on augumented user 52890 8/50 current_auc = 0.7957264957264957
User 52890 AUC after training: 0.7871794871794872
User 52890 does not improve AUC. Reverting changes.
Training on augumented user 108024 9/50 current_auc = 0.7957264957264957
User 108024 AUC after training: 0.7957264957264957
User 108024 does not improve AUC. Reverting changes.
Training on augumented user 98492 10/50 current_auc = 0.7957264957264957
User 98492 AUC after training: 0.7957264957264957
User 98492 does not improve AUC. Reverting changes.
Training on augumented user 68731 11/50 current_auc = 0.7957264957264957
User 68731 AUC after training: 0.7957264957264957
User 68731 does not improve AUC. Reverting changes.
Training on augumented user 100714 12/50 current_auc = 0.7957264957264957
User 100714 AUC after training: 0.7957264957264957
User 100714 does not improve AUC. Reverting changes.
Training on augumented user 130954 13/50 current_auc = 0.7957264957264957
User 130954 AUC after training: 0.7931623931623931
User 130954 does not improve AUC. Reverting changes.
Training on augumented user 127184 14/50 current_auc = 0.7957264957264957
User 127184 AUC after training: 0.7863247863247863
User 127184 does not improve AUC. Reverting changes.
Training on augumented user 127810 15/50 current_auc = 0.7957264957264957
User 127810 AUC after training: 0.7957264957264957
User 127810 does not improve AUC. Reverting changes.
Training on augumented user 36168 16/50 current_auc = 0.7957264957264957
User 36168 AUC after training: 0.7957264957264957
User 36168 does not improve AUC. Reverting changes.
Training on augumented user 74001 17/50 current_auc = 0.7957264957264957
User 74001 AUC after training: 0.7957264957264957
User 74001 does not improve AUC. Reverting changes.
Training on augumented user 39870 18/50 current_auc = 0.7957264957264957
User 39870 AUC after training: 0.7957264957264957
User 39870 does not improve AUC. Reverting changes.
Training on augumented user 2403 19/50 current_auc = 0.7957264957264957
User 2403 AUC after training: 0.7957264957264957
User 2403 does not improve AUC. Reverting changes.
Training on augumented user 11520 20/50 current_auc = 0.7957264957264957
User 11520 AUC after training: 0.794017094017094
User 11520 does not improve AUC. Reverting changes.
Training on augumented user 35688 21/50 current_auc = 0.7957264957264957
User 35688 AUC after training: 0.7957264957264957
User 35688 does not improve AUC. Reverting changes.
Training on augumented user 108376 22/50 current_auc = 0.7957264957264957
User 108376 AUC after training: 0.7957264957264957
User 108376 does not improve AUC. Reverting changes.
Training on augumented user 138201 23/50 current_auc = 0.7957264957264957
User 138201 AUC after training: 0.788034188034188
User 138201 does not improve AUC. Reverting changes.
Training on augumented user 9496 24/50 current_auc = 0.7957264957264957
User 9496 AUC after training: 0.7931623931623931
User 9496 does not improve AUC. Reverting changes.
Training on augumented user 93591 25/50 current_auc = 0.7957264957264957
User 93591 AUC after training: 0.7957264957264957
User 93591 does not improve AUC. Reverting changes.
Training on augumented user 120902 26/50 current_auc = 0.7957264957264957
User 120902 AUC after training: 0.7931623931623931
User 120902 does not improve AUC. Reverting changes.
Training on augumented user 117137 27/50 current_auc = 0.7957264957264957
User 117137 AUC after training: 0.7888888888888889
User 117137 does not improve AUC. Reverting changes.
Training on augumented user 91580 28/50 current_auc = 0.7957264957264957
User 91580 AUC after training: 0.794017094017094
User 91580 does not improve AUC. Reverting changes.
Training on augumented user 91838 29/50 current_auc = 0.7957264957264957
User 91838 AUC after training: 0.7957264957264957
User 91838 does not improve AUC. Reverting changes.
Training on augumented user 33009 30/50 current_auc = 0.7957264957264957
User 33009 AUC after training: 0.7957264957264957
User 33009 does not improve AUC. Reverting changes.
Training on augumented user 37602 31/50 current_auc = 0.7957264957264957
User 37602 AUC after training: 0.7957264957264957
User 37602 does not improve AUC. Reverting changes.
Training on augumented user 58851 32/50 current_auc = 0.7957264957264957
User 58851 AUC after training: 0.7914529914529914
User 58851 does not improve AUC. Reverting changes.
Training on augumented user 38169 33/50 current_auc = 0.7957264957264957
User 38169 AUC after training: 0.7957264957264957
User 38169 does not improve AUC. Reverting changes.
Training on augumented user 83538 34/50 current_auc = 0.7957264957264957
User 83538 AUC after training: 0.7957264957264957
User 83538 does not improve AUC. Reverting changes.
Training on augumented user 132511 35/50 current_auc = 0.7957264957264957
User 132511 AUC after training: 0.7957264957264957
User 132511 does not improve AUC. Reverting changes.
Training on augumented user 106568 36/50 current_auc = 0.7957264957264957
User 106568 AUC after training: 0.7957264957264957
User 106568 does not improve AUC. Reverting changes.
Training on augumented user 13623 37/50 current_auc = 0.7957264957264957
User 13623 AUC after training: 0.7914529914529914
User 13623 does not improve AUC. Reverting changes.
Training on augumented user 38859 38/50 current_auc = 0.7957264957264957
User 38859 AUC after training: 0.7905982905982906
User 38859 does not improve AUC. Reverting changes.
Training on augumented user 83960 39/50 current_auc = 0.7957264957264957
User 83960 AUC after training: 0.7957264957264957
User 83960 does not improve AUC. Reverting changes.
Training on augumented user 105328 40/50 current_auc = 0.7957264957264957
User 105328 AUC after training: 0.7914529914529914
User 105328 does not improve AUC. Reverting changes.
Training on augumented user 66824 41/50 current_auc = 0.7957264957264957
User 66824 AUC after training: 0.7974358974358974
User 66824 improves AUC. Keeping the model.
Training on augumented user 57919 42/50 current_auc = 0.7974358974358974
User 57919 AUC after training: 0.7957264957264957
User 57919 does not improve AUC. Reverting changes.
Training on augumented user 18188 43/50 current_auc = 0.7974358974358974
User 18188 AUC after training: 0.7931623931623931
User 18188 does not improve AUC. Reverting changes.
Training on augumented user 76354 44/50 current_auc = 0.7974358974358974
User 76354 AUC after training: 0.794017094017094
User 76354 does not improve AUC. Reverting changes.
Training on augumented user 49232 45/50 current_auc = 0.7974358974358974
User 49232 AUC after training: 0.7974358974358974
User 49232 does not improve AUC. Reverting changes.
Training on augumented user 102610 46/50 current_auc = 0.7974358974358974
User 102610 AUC after training: 0.7974358974358974
User 102610 does not improve AUC. Reverting changes.
Training on augumented user 106663 47/50 current_auc = 0.7974358974358974
User 106663 AUC after training: 0.794017094017094
User 106663 does not improve AUC. Reverting changes.
Training on augumented user 115626 48/50 current_auc = 0.7974358974358974
User 115626 AUC after training: 0.794017094017094
User 115626 does not improve AUC. Reverting changes.
Training on augumented user 1007 49/50 current_auc = 0.7974358974358974
User 1007 AUC after training: 0.7974358974358974
User 1007 does not improve AUC. Reverting changes.
[2024-12-02 18:47:12.034519] start test user 30140 119/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:12.490859] start test user 30140 119/568 recall augumented users by random, augumented_users = [108939, 131945, 16210, 102579, 54196, 112725, 114969, 117538, 74122, 41509, 63542, 67580, 124902, 71461, 53678, 46881, 69639, 108292, 82947, 56018, 11321, 107656, 115545, 48690, 8076, 118159, 94319, 103718, 57287, 65339, 13941, 93504, 109427, 32265, 66440, 10074, 5290, 17780, 77131, 44548, 91883, 104068, 88595, 62684, 103179, 64646, 56477, 37888, 85362, 18981]
[2024-12-02 18:47:12.505739] user = 30140 Cloud 119/568
[2024-12-02 18:47:12.514661] user = 30140 Local 119/568
[2024-12-02 18:47:12.581791] user = 30140 Local+ 119/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:14.811820] user = 30140 MPDA- 119/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8
Training on augumented user 108939 0/50 current_auc = 0.8
User 108939 AUC after training: 0.8
User 108939 does not improve AUC. Reverting changes.
Training on augumented user 131945 1/50 current_auc = 0.8
User 131945 AUC after training: 0.8
User 131945 does not improve AUC. Reverting changes.
Training on augumented user 16210 2/50 current_auc = 0.8
User 16210 AUC after training: 0.8
User 16210 does not improve AUC. Reverting changes.
Training on augumented user 102579 3/50 current_auc = 0.8
User 102579 AUC after training: 0.8
User 102579 does not improve AUC. Reverting changes.
Training on augumented user 54196 4/50 current_auc = 0.8
User 54196 AUC after training: 0.8
User 54196 does not improve AUC. Reverting changes.
Training on augumented user 112725 5/50 current_auc = 0.8
User 112725 AUC after training: 0.8
User 112725 does not improve AUC. Reverting changes.
Training on augumented user 114969 6/50 current_auc = 0.8
User 114969 AUC after training: 0.8
User 114969 does not improve AUC. Reverting changes.
Training on augumented user 117538 7/50 current_auc = 0.8
User 117538 AUC after training: 0.8
User 117538 does not improve AUC. Reverting changes.
Training on augumented user 74122 8/50 current_auc = 0.8
User 74122 AUC after training: 0.8
User 74122 does not improve AUC. Reverting changes.
Training on augumented user 41509 9/50 current_auc = 0.8
User 41509 AUC after training: 0.8
User 41509 does not improve AUC. Reverting changes.
Training on augumented user 63542 10/50 current_auc = 0.8
User 63542 AUC after training: 0.8
User 63542 does not improve AUC. Reverting changes.
Training on augumented user 67580 11/50 current_auc = 0.8
User 67580 AUC after training: 0.8
User 67580 does not improve AUC. Reverting changes.
Training on augumented user 124902 12/50 current_auc = 0.8
User 124902 AUC after training: 0.8
User 124902 does not improve AUC. Reverting changes.
Training on augumented user 71461 13/50 current_auc = 0.8
User 71461 AUC after training: 0.8
User 71461 does not improve AUC. Reverting changes.
Training on augumented user 53678 14/50 current_auc = 0.8
User 53678 AUC after training: 0.8
User 53678 does not improve AUC. Reverting changes.
Training on augumented user 46881 15/50 current_auc = 0.8
User 46881 AUC after training: 0.8
User 46881 does not improve AUC. Reverting changes.
Training on augumented user 69639 16/50 current_auc = 0.8
User 69639 AUC after training: 0.8
User 69639 does not improve AUC. Reverting changes.
Training on augumented user 108292 17/50 current_auc = 0.8
User 108292 AUC after training: 0.8
User 108292 does not improve AUC. Reverting changes.
Training on augumented user 82947 18/50 current_auc = 0.8
User 82947 AUC after training: 0.8
User 82947 does not improve AUC. Reverting changes.
Training on augumented user 56018 19/50 current_auc = 0.8
User 56018 AUC after training: 0.8
User 56018 does not improve AUC. Reverting changes.
Training on augumented user 11321 20/50 current_auc = 0.8
User 11321 AUC after training: 0.8
User 11321 does not improve AUC. Reverting changes.
Training on augumented user 107656 21/50 current_auc = 0.8
User 107656 AUC after training: 0.8
User 107656 does not improve AUC. Reverting changes.
Training on augumented user 115545 22/50 current_auc = 0.8
User 115545 AUC after training: 0.8
User 115545 does not improve AUC. Reverting changes.
Training on augumented user 48690 23/50 current_auc = 0.8
User 48690 AUC after training: 0.8
User 48690 does not improve AUC. Reverting changes.
Training on augumented user 8076 24/50 current_auc = 0.8
User 8076 AUC after training: 0.8
User 8076 does not improve AUC. Reverting changes.
Training on augumented user 118159 25/50 current_auc = 0.8
User 118159 AUC after training: 0.8
User 118159 does not improve AUC. Reverting changes.
Training on augumented user 94319 26/50 current_auc = 0.8
User 94319 AUC after training: 0.8
User 94319 does not improve AUC. Reverting changes.
Training on augumented user 103718 27/50 current_auc = 0.8
User 103718 AUC after training: 0.8
User 103718 does not improve AUC. Reverting changes.
Training on augumented user 57287 28/50 current_auc = 0.8
User 57287 AUC after training: 0.8
User 57287 does not improve AUC. Reverting changes.
Training on augumented user 65339 29/50 current_auc = 0.8
User 65339 AUC after training: 0.8
User 65339 does not improve AUC. Reverting changes.
Training on augumented user 13941 30/50 current_auc = 0.8
User 13941 AUC after training: 0.8
User 13941 does not improve AUC. Reverting changes.
Training on augumented user 93504 31/50 current_auc = 0.8
User 93504 AUC after training: 0.8
User 93504 does not improve AUC. Reverting changes.
Training on augumented user 109427 32/50 current_auc = 0.8
User 109427 AUC after training: 0.8
User 109427 does not improve AUC. Reverting changes.
Training on augumented user 32265 33/50 current_auc = 0.8
User 32265 AUC after training: 0.8
User 32265 does not improve AUC. Reverting changes.
Training on augumented user 66440 34/50 current_auc = 0.8
User 66440 AUC after training: 0.8
User 66440 does not improve AUC. Reverting changes.
Training on augumented user 10074 35/50 current_auc = 0.8
User 10074 AUC after training: 0.8
User 10074 does not improve AUC. Reverting changes.
Training on augumented user 5290 36/50 current_auc = 0.8
User 5290 AUC after training: 0.8
User 5290 does not improve AUC. Reverting changes.
Training on augumented user 17780 37/50 current_auc = 0.8
User 17780 AUC after training: 0.8
User 17780 does not improve AUC. Reverting changes.
Training on augumented user 77131 38/50 current_auc = 0.8
User 77131 AUC after training: 0.8
User 77131 does not improve AUC. Reverting changes.
Training on augumented user 44548 39/50 current_auc = 0.8
User 44548 AUC after training: 0.8
User 44548 does not improve AUC. Reverting changes.
Training on augumented user 91883 40/50 current_auc = 0.8
User 91883 AUC after training: 0.8
User 91883 does not improve AUC. Reverting changes.
Training on augumented user 104068 41/50 current_auc = 0.8
User 104068 AUC after training: 0.8
User 104068 does not improve AUC. Reverting changes.
Training on augumented user 88595 42/50 current_auc = 0.8
User 88595 AUC after training: 0.8
User 88595 does not improve AUC. Reverting changes.
Training on augumented user 62684 43/50 current_auc = 0.8
User 62684 AUC after training: 0.8
User 62684 does not improve AUC. Reverting changes.
Training on augumented user 103179 44/50 current_auc = 0.8
User 103179 AUC after training: 0.8
User 103179 does not improve AUC. Reverting changes.
Training on augumented user 64646 45/50 current_auc = 0.8
User 64646 AUC after training: 0.8
User 64646 does not improve AUC. Reverting changes.
Training on augumented user 56477 46/50 current_auc = 0.8
User 56477 AUC after training: 0.8
User 56477 does not improve AUC. Reverting changes.
Training on augumented user 37888 47/50 current_auc = 0.8
User 37888 AUC after training: 0.8
User 37888 does not improve AUC. Reverting changes.
Training on augumented user 85362 48/50 current_auc = 0.8
User 85362 AUC after training: 0.8
User 85362 does not improve AUC. Reverting changes.
Training on augumented user 18981 49/50 current_auc = 0.8
User 18981 AUC after training: 0.8
User 18981 does not improve AUC. Reverting changes.
[2024-12-02 18:47:48.649074] start test user 30144 120/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:49.274387] start test user 30144 120/568 recall augumented users by random, augumented_users = [117022, 106931, 73846, 23749, 43512, 27609, 74336, 44854, 131018, 83022, 12916, 14597, 70126, 132724, 69807, 117752, 33019, 74421, 138045, 35025, 42693, 24203, 47118, 49186, 120214, 98884, 4994, 19896, 37073, 6234, 2370, 115476, 105022, 56539, 133658, 111056, 100698, 128567, 115218, 21539, 5975, 111024, 109693, 138402, 82555, 22839, 41085, 27297, 2361, 10857]
[2024-12-02 18:47:49.303504] user = 30144 Cloud 120/568
[2024-12-02 18:47:49.345263] user = 30144 Local 120/568
[2024-12-02 18:47:49.511492] user = 30144 Local+ 120/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:51.323454] user = 30144 MPDA- 120/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6726487819919826
Training on augumented user 117022 0/50 current_auc = 0.6726487819919826
User 117022 AUC after training: 0.6723712611779217
User 117022 does not improve AUC. Reverting changes.
Training on augumented user 106931 1/50 current_auc = 0.6726487819919826
User 106931 AUC after training: 0.672186247301881
User 106931 does not improve AUC. Reverting changes.
Training on augumented user 73846 2/50 current_auc = 0.6726487819919826
User 73846 AUC after training: 0.6725254394079556
User 73846 does not improve AUC. Reverting changes.
Training on augumented user 23749 3/50 current_auc = 0.6726487819919826
User 23749 AUC after training: 0.6715078630897316
User 23749 does not improve AUC. Reverting changes.
Training on augumented user 43512 4/50 current_auc = 0.6726487819919826
User 43512 AUC after training: 0.6728029602220166
User 43512 improves AUC. Keeping the model.
Training on augumented user 27609 5/50 current_auc = 0.6728029602220166
User 27609 AUC after training: 0.6725871106999692
User 27609 does not improve AUC. Reverting changes.
Training on augumented user 74336 6/50 current_auc = 0.6728029602220166
User 74336 AUC after training: 0.6722170829478877
User 74336 does not improve AUC. Reverting changes.
Training on augumented user 44854 7/50 current_auc = 0.6728029602220166
User 44854 AUC after training: 0.6725254394079556
User 44854 does not improve AUC. Reverting changes.
Training on augumented user 131018 8/50 current_auc = 0.6728029602220166
User 131018 AUC after training: 0.6725254394079556
User 131018 does not improve AUC. Reverting changes.
Training on augumented user 83022 9/50 current_auc = 0.6728029602220166
User 83022 AUC after training: 0.6724946037619488
User 83022 does not improve AUC. Reverting changes.
Training on augumented user 12916 10/50 current_auc = 0.6728029602220166
User 12916 AUC after training: 0.6725562750539622
User 12916 does not improve AUC. Reverting changes.
Training on augumented user 14597 11/50 current_auc = 0.6728029602220166
User 14597 AUC after training: 0.6722479185938945
User 14597 does not improve AUC. Reverting changes.
Training on augumented user 70126 12/50 current_auc = 0.6728029602220166
User 70126 AUC after training: 0.6729263028060437
User 70126 improves AUC. Keeping the model.
Training on augumented user 132724 13/50 current_auc = 0.6729263028060437
User 132724 AUC after training: 0.6733271662041319
User 132724 improves AUC. Keeping the model.
Training on augumented user 69807 14/50 current_auc = 0.6733271662041319
User 69807 AUC after training: 0.6725871106999692
User 69807 does not improve AUC. Reverting changes.
Training on augumented user 117752 15/50 current_auc = 0.6733271662041319
User 117752 AUC after training: 0.6729571384520505
User 117752 does not improve AUC. Reverting changes.
Training on augumented user 33019 16/50 current_auc = 0.6733271662041319
User 33019 AUC after training: 0.6731113166820845
User 33019 does not improve AUC. Reverting changes.
Training on augumented user 74421 17/50 current_auc = 0.6733271662041319
User 74421 AUC after training: 0.6732038236201049
User 74421 does not improve AUC. Reverting changes.
Training on augumented user 138045 18/50 current_auc = 0.6733271662041319
User 138045 AUC after training: 0.6734505087881592
User 138045 improves AUC. Keeping the model.
Training on augumented user 35025 19/50 current_auc = 0.6734505087881592
User 35025 AUC after training: 0.6737588652482269
User 35025 improves AUC. Keeping the model.
Training on augumented user 42693 20/50 current_auc = 0.6737588652482269
User 42693 AUC after training: 0.6736971939562135
User 42693 does not improve AUC. Reverting changes.
Training on augumented user 24203 21/50 current_auc = 0.6737588652482269
User 24203 AUC after training: 0.673450508788159
User 24203 does not improve AUC. Reverting changes.
Training on augumented user 47118 22/50 current_auc = 0.6737588652482269
User 47118 AUC after training: 0.6732038236201048
User 47118 does not improve AUC. Reverting changes.
Training on augumented user 49186 23/50 current_auc = 0.6737588652482269
User 49186 AUC after training: 0.6733580018501387
User 49186 does not improve AUC. Reverting changes.
Training on augumented user 120214 24/50 current_auc = 0.6737588652482269
User 120214 AUC after training: 0.673604687018193
User 120214 does not improve AUC. Reverting changes.
Training on augumented user 98884 25/50 current_auc = 0.6737588652482269
User 98884 AUC after training: 0.673450508788159
User 98884 does not improve AUC. Reverting changes.
Training on augumented user 4994 26/50 current_auc = 0.6737588652482269
User 4994 AUC after training: 0.6733888374961456
User 4994 does not improve AUC. Reverting changes.
Training on augumented user 19896 27/50 current_auc = 0.6737588652482269
User 19896 AUC after training: 0.6733580018501387
User 19896 does not improve AUC. Reverting changes.
Training on augumented user 37073 28/50 current_auc = 0.6737588652482269
User 37073 AUC after training: 0.673049645390071
User 37073 does not improve AUC. Reverting changes.
Training on augumented user 6234 29/50 current_auc = 0.6737588652482269
User 6234 AUC after training: 0.6731421523280913
User 6234 does not improve AUC. Reverting changes.
Training on augumented user 2370 30/50 current_auc = 0.6737588652482269
User 2370 AUC after training: 0.6724020968239285
User 2370 does not improve AUC. Reverting changes.
Training on augumented user 115476 31/50 current_auc = 0.6737588652482269
User 115476 AUC after training: 0.6731421523280912
User 115476 does not improve AUC. Reverting changes.
Training on augumented user 105022 32/50 current_auc = 0.6737588652482269
User 105022 AUC after training: 0.6738205365402404
User 105022 improves AUC. Keeping the model.
Training on augumented user 56539 33/50 current_auc = 0.6738205365402404
User 56539 AUC after training: 0.6736971939562133
User 56539 does not improve AUC. Reverting changes.
Training on augumented user 133658 34/50 current_auc = 0.6738205365402404
User 133658 AUC after training: 0.6730188097440641
User 133658 does not improve AUC. Reverting changes.
Training on augumented user 111056 35/50 current_auc = 0.6738205365402404
User 111056 AUC after training: 0.673882207832254
User 111056 improves AUC. Keeping the model.
Training on augumented user 100698 36/50 current_auc = 0.673882207832254
User 100698 AUC after training: 0.6740055504162812
User 100698 improves AUC. Keeping the model.
Training on augumented user 128567 37/50 current_auc = 0.6740055504162812
User 128567 AUC after training: 0.6736355226641999
User 128567 does not improve AUC. Reverting changes.
Training on augumented user 115218 38/50 current_auc = 0.6740055504162812
User 115218 AUC after training: 0.6736971939562133
User 115218 does not improve AUC. Reverting changes.
Training on augumented user 21539 39/50 current_auc = 0.6740055504162812
User 21539 AUC after training: 0.6732038236201049
User 21539 does not improve AUC. Reverting changes.
Training on augumented user 5975 40/50 current_auc = 0.6740055504162812
User 5975 AUC after training: 0.6740055504162813
User 5975 improves AUC. Keeping the model.
Training on augumented user 111024 41/50 current_auc = 0.6740055504162813
User 111024 AUC after training: 0.6735738513721863
User 111024 does not improve AUC. Reverting changes.
Training on augumented user 109693 42/50 current_auc = 0.6740055504162813
User 109693 AUC after training: 0.6729571384520505
User 109693 does not improve AUC. Reverting changes.
Training on augumented user 138402 43/50 current_auc = 0.6740055504162813
User 138402 AUC after training: 0.6736355226641999
User 138402 does not improve AUC. Reverting changes.
Training on augumented user 82555 44/50 current_auc = 0.6740055504162813
User 82555 AUC after training: 0.6722170829478877
User 82555 does not improve AUC. Reverting changes.
Training on augumented user 22839 45/50 current_auc = 0.6740055504162813
User 22839 AUC after training: 0.6738822078322542
User 22839 does not improve AUC. Reverting changes.
Training on augumented user 41085 46/50 current_auc = 0.6740055504162813
User 41085 AUC after training: 0.6726796176379896
User 41085 does not improve AUC. Reverting changes.
Training on augumented user 27297 47/50 current_auc = 0.6740055504162813
User 27297 AUC after training: 0.6736971939562134
User 27297 does not improve AUC. Reverting changes.
Training on augumented user 2361 48/50 current_auc = 0.6740055504162813
User 2361 AUC after training: 0.6737588652482269
User 2361 does not improve AUC. Reverting changes.
Training on augumented user 10857 49/50 current_auc = 0.6740055504162813
User 10857 AUC after training: 0.6736971939562133
User 10857 does not improve AUC. Reverting changes.
[2024-12-02 18:48:20.706891] start test user 30150 121/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:21.143641] start test user 30150 121/568 recall augumented users by random, augumented_users = [69831, 93220, 124641, 96721, 129452, 21118, 21469, 15688, 60073, 111558, 34377, 36467, 105060, 112454, 79722, 27014, 74256, 50565, 117146, 108124, 70532, 36882, 65367, 121393, 115514, 65244, 124051, 94, 108603, 31694, 68005, 104236, 102806, 6173, 33593, 12127, 47083, 58851, 66849, 34894, 42745, 5561, 30204, 112503, 75546, 64873, 87303, 59281, 40612, 2346]
[2024-12-02 18:48:21.159419] user = 30150 Cloud 121/568
[2024-12-02 18:48:21.223470] user = 30150 Local 121/568
[2024-12-02 18:48:21.306039] user = 30150 Local+ 121/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:23.617623] user = 30150 MPDA- 121/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6490020923869306
Training on augumented user 69831 0/50 current_auc = 0.6490020923869306
User 69831 AUC after training: 0.6487908417833574
User 69831 does not improve AUC. Reverting changes.
Training on augumented user 93220 1/50 current_auc = 0.6490020923869306
User 93220 AUC after training: 0.648740544020602
User 93220 does not improve AUC. Reverting changes.
Training on augumented user 124641 2/50 current_auc = 0.6490020923869306
User 124641 AUC after training: 0.6489216159665219
User 124641 does not improve AUC. Reverting changes.
Training on augumented user 96721 3/50 current_auc = 0.6490020923869306
User 96721 AUC after training: 0.6489014968614196
User 96721 does not improve AUC. Reverting changes.
Training on augumented user 129452 4/50 current_auc = 0.6490020923869306
User 129452 AUC after training: 0.6490624497022373
User 129452 improves AUC. Keeping the model.
Training on augumented user 21118 5/50 current_auc = 0.6490624497022373
User 21118 AUC after training: 0.6491026879124416
User 21118 improves AUC. Keeping the model.
Training on augumented user 21469 6/50 current_auc = 0.6491026879124416
User 21469 AUC after training: 0.6491831643328505
User 21469 improves AUC. Keeping the model.
Training on augumented user 15688 7/50 current_auc = 0.6491831643328505
User 15688 AUC after training: 0.6492032834379526
User 15688 improves AUC. Keeping the model.
Training on augumented user 60073 8/50 current_auc = 0.6492032834379526
User 60073 AUC after training: 0.6493441171736682
User 60073 improves AUC. Keeping the model.
Training on augumented user 111558 9/50 current_auc = 0.6493441171736682
User 111558 AUC after training: 0.649323998068566
User 111558 does not improve AUC. Reverting changes.
Training on augumented user 34377 10/50 current_auc = 0.6493441171736682
User 34377 AUC after training: 0.6491831643328505
User 34377 does not improve AUC. Reverting changes.
Training on augumented user 36467 11/50 current_auc = 0.6493441171736682
User 36467 AUC after training: 0.6492032834379526
User 36467 does not improve AUC. Reverting changes.
Training on augumented user 105060 12/50 current_auc = 0.6493441171736682
User 105060 AUC after training: 0.6491831643328505
User 105060 does not improve AUC. Reverting changes.
Training on augumented user 112454 13/50 current_auc = 0.6493441171736682
User 112454 AUC after training: 0.6494447126991791
User 112454 improves AUC. Keeping the model.
Training on augumented user 79722 14/50 current_auc = 0.6494447126991791
User 79722 AUC after training: 0.6493843553838725
User 79722 does not improve AUC. Reverting changes.
Training on augumented user 27014 15/50 current_auc = 0.6494447126991791
User 27014 AUC after training: 0.6493139385160148
User 27014 does not improve AUC. Reverting changes.
Training on augumented user 74256 16/50 current_auc = 0.6494447126991791
User 74256 AUC after training: 0.6493843553838725
User 74256 does not improve AUC. Reverting changes.
Training on augumented user 50565 17/50 current_auc = 0.6494447126991791
User 50565 AUC after training: 0.649424593594077
User 50565 does not improve AUC. Reverting changes.
Training on augumented user 117146 18/50 current_auc = 0.6494447126991791
User 117146 AUC after training: 0.6495050700144858
User 117146 improves AUC. Keeping the model.
Training on augumented user 108124 19/50 current_auc = 0.6495050700144858
User 108124 AUC after training: 0.6495050700144858
User 108124 does not improve AUC. Reverting changes.
Training on augumented user 70532 20/50 current_auc = 0.6495050700144858
User 70532 AUC after training: 0.6496861419604055
User 70532 improves AUC. Keeping the model.
Training on augumented user 36882 21/50 current_auc = 0.6496861419604055
User 36882 AUC after training: 0.6496459037502011
User 36882 does not improve AUC. Reverting changes.
Training on augumented user 65367 22/50 current_auc = 0.6496861419604055
User 65367 AUC after training: 0.6495654273297924
User 65367 does not improve AUC. Reverting changes.
Training on augumented user 121393 23/50 current_auc = 0.6496861419604055
User 121393 AUC after training: 0.6495251891195879
User 121393 does not improve AUC. Reverting changes.
Training on augumented user 115514 24/50 current_auc = 0.6496861419604055
User 115514 AUC after training: 0.6496559633027523
User 115514 does not improve AUC. Reverting changes.
Training on augumented user 65244 25/50 current_auc = 0.6496861419604055
User 65244 AUC after training: 0.6497364397231611
User 65244 improves AUC. Keeping the model.
Training on augumented user 124051 26/50 current_auc = 0.6497364397231611
User 124051 AUC after training: 0.649826975696121
User 124051 improves AUC. Keeping the model.
Training on augumented user 94 27/50 current_auc = 0.649826975696121
User 94 AUC after training: 0.6498571543537743
User 94 improves AUC. Keeping the model.
Training on augumented user 108603 28/50 current_auc = 0.6498571543537743
User 108603 AUC after training: 0.6500583454047963
User 108603 improves AUC. Keeping the model.
Training on augumented user 31694 29/50 current_auc = 0.6500583454047963
User 31694 AUC after training: 0.6499476903267343
User 31694 does not improve AUC. Reverting changes.
Training on augumented user 68005 30/50 current_auc = 0.6500583454047963
User 68005 AUC after training: 0.6499678094318364
User 68005 does not improve AUC. Reverting changes.
Training on augumented user 104236 31/50 current_auc = 0.6500583454047963
User 104236 AUC after training: 0.6501287622726543
User 104236 improves AUC. Keeping the model.
Training on augumented user 102806 32/50 current_auc = 0.6501287622726543
User 102806 AUC after training: 0.6500885240624497
User 102806 does not improve AUC. Reverting changes.
Training on augumented user 6173 33/50 current_auc = 0.6501287622726543
User 6173 AUC after training: 0.650118702720103
User 6173 does not improve AUC. Reverting changes.
Training on augumented user 33593 34/50 current_auc = 0.6501287622726543
User 33593 AUC after training: 0.6500080476420409
User 33593 does not improve AUC. Reverting changes.
Training on augumented user 12127 35/50 current_auc = 0.6501287622726543
User 12127 AUC after training: 0.6501388218252053
User 12127 improves AUC. Keeping the model.
Training on augumented user 47083 36/50 current_auc = 0.6501388218252053
User 47083 AUC after training: 0.6502997746660228
User 47083 improves AUC. Keeping the model.
Training on augumented user 58851 37/50 current_auc = 0.6502997746660228
User 58851 AUC after training: 0.6504104297440849
User 58851 improves AUC. Keeping the model.
Training on augumented user 66849 38/50 current_auc = 0.6504104297440849
User 66849 AUC after training: 0.6500885240624497
User 66849 does not improve AUC. Reverting changes.
Training on augumented user 34894 39/50 current_auc = 0.6504104297440849
User 34894 AUC after training: 0.6500482858522453
User 34894 does not improve AUC. Reverting changes.
Training on augumented user 42745 40/50 current_auc = 0.6504104297440849
User 42745 AUC after training: 0.6500382262996942
User 42745 does not improve AUC. Reverting changes.
Training on augumented user 5561 41/50 current_auc = 0.6504104297440849
User 5561 AUC after training: 0.6503299533236762
User 5561 does not improve AUC. Reverting changes.
Training on augumented user 30204 42/50 current_auc = 0.6504104297440849
User 30204 AUC after training: 0.6502293577981652
User 30204 does not improve AUC. Reverting changes.
Training on augumented user 112503 43/50 current_auc = 0.6504104297440849
User 112503 AUC after training: 0.6503903106389828
User 112503 does not improve AUC. Reverting changes.
Training on augumented user 75546 44/50 current_auc = 0.6504104297440849
User 75546 AUC after training: 0.6501891195879607
User 75546 does not improve AUC. Reverting changes.
Training on augumented user 64873 45/50 current_auc = 0.6504104297440849
User 64873 AUC after training: 0.650219298245614
User 64873 does not improve AUC. Reverting changes.
Training on augumented user 87303 46/50 current_auc = 0.6504104297440849
User 87303 AUC after training: 0.6500684049573474
User 87303 does not improve AUC. Reverting changes.
Training on augumented user 59281 47/50 current_auc = 0.6504104297440849
User 59281 AUC after training: 0.6503299533236762
User 59281 does not improve AUC. Reverting changes.
Training on augumented user 40612 48/50 current_auc = 0.6504104297440849
User 40612 AUC after training: 0.6502695960083695
User 40612 does not improve AUC. Reverting changes.
Training on augumented user 2346 49/50 current_auc = 0.6504104297440849
User 2346 AUC after training: 0.6500684049573475
User 2346 does not improve AUC. Reverting changes.
[2024-12-02 18:48:58.707542] start test user 30159 122/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:59.254528] start test user 30159 122/568 recall augumented users by random, augumented_users = [99904, 29136, 69601, 64247, 8290, 1636, 102146, 48943, 41169, 64421, 84728, 6910, 4894, 76194, 120096, 117353, 27921, 108385, 120498, 104256, 122085, 102304, 4893, 86544, 81080, 80911, 59323, 126248, 113745, 107552, 107961, 26138, 71197, 126872, 99080, 29888, 130103, 1679, 69210, 106544, 17922, 23887, 72391, 94137, 128109, 46255, 57271, 116124, 68478, 7359]
[2024-12-02 18:48:59.275799] user = 30159 Cloud 122/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:48:59.289153] user = 30159 Local 122/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:48:59.346316] user = 30159 Local+ 122/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:49:02.095103] user = 30159 MPDA- 122/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 99904 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99904 AUC after training: 0.5
User 99904 does not improve AUC. Reverting changes.
Training on augumented user 29136 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29136 AUC after training: 0.5
User 29136 does not improve AUC. Reverting changes.
Training on augumented user 69601 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69601 AUC after training: 0.5
User 69601 does not improve AUC. Reverting changes.
Training on augumented user 64247 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64247 AUC after training: 0.5
User 64247 does not improve AUC. Reverting changes.
Training on augumented user 8290 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8290 AUC after training: 0.5
User 8290 does not improve AUC. Reverting changes.
Training on augumented user 1636 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1636 AUC after training: 0.5
User 1636 does not improve AUC. Reverting changes.
Training on augumented user 102146 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102146 AUC after training: 0.5
User 102146 does not improve AUC. Reverting changes.
Training on augumented user 48943 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48943 AUC after training: 0.5
User 48943 does not improve AUC. Reverting changes.
Training on augumented user 41169 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41169 AUC after training: 0.5
User 41169 does not improve AUC. Reverting changes.
Training on augumented user 64421 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64421 AUC after training: 0.5
User 64421 does not improve AUC. Reverting changes.
Training on augumented user 84728 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84728 AUC after training: 0.5
User 84728 does not improve AUC. Reverting changes.
Training on augumented user 6910 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6910 AUC after training: 0.5
User 6910 does not improve AUC. Reverting changes.
Training on augumented user 4894 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4894 AUC after training: 0.5
User 4894 does not improve AUC. Reverting changes.
Training on augumented user 76194 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76194 AUC after training: 0.5
User 76194 does not improve AUC. Reverting changes.
Training on augumented user 120096 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120096 AUC after training: 0.5
User 120096 does not improve AUC. Reverting changes.
Training on augumented user 117353 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117353 AUC after training: 0.5
User 117353 does not improve AUC. Reverting changes.
Training on augumented user 27921 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27921 AUC after training: 0.5
User 27921 does not improve AUC. Reverting changes.
Training on augumented user 108385 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108385 AUC after training: 0.5
User 108385 does not improve AUC. Reverting changes.
Training on augumented user 120498 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120498 AUC after training: 0.5
User 120498 does not improve AUC. Reverting changes.
Training on augumented user 104256 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104256 AUC after training: 0.5
User 104256 does not improve AUC. Reverting changes.
Training on augumented user 122085 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122085 AUC after training: 0.5
User 122085 does not improve AUC. Reverting changes.
Training on augumented user 102304 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102304 AUC after training: 0.5
User 102304 does not improve AUC. Reverting changes.
Training on augumented user 4893 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4893 AUC after training: 0.5
User 4893 does not improve AUC. Reverting changes.
Training on augumented user 86544 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86544 AUC after training: 0.5
User 86544 does not improve AUC. Reverting changes.
Training on augumented user 81080 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81080 AUC after training: 0.5
User 81080 does not improve AUC. Reverting changes.
Training on augumented user 80911 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80911 AUC after training: 0.5
User 80911 does not improve AUC. Reverting changes.
Training on augumented user 59323 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59323 AUC after training: 0.5
User 59323 does not improve AUC. Reverting changes.
Training on augumented user 126248 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126248 AUC after training: 0.5
User 126248 does not improve AUC. Reverting changes.
Training on augumented user 113745 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113745 AUC after training: 0.5
User 113745 does not improve AUC. Reverting changes.
Training on augumented user 107552 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107552 AUC after training: 0.5
User 107552 does not improve AUC. Reverting changes.
Training on augumented user 107961 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107961 AUC after training: 0.5
User 107961 does not improve AUC. Reverting changes.
Training on augumented user 26138 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26138 AUC after training: 0.5
User 26138 does not improve AUC. Reverting changes.
Training on augumented user 71197 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71197 AUC after training: 0.5
User 71197 does not improve AUC. Reverting changes.
Training on augumented user 126872 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126872 AUC after training: 0.5
User 126872 does not improve AUC. Reverting changes.
Training on augumented user 99080 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99080 AUC after training: 0.5
User 99080 does not improve AUC. Reverting changes.
Training on augumented user 29888 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29888 AUC after training: 0.5
User 29888 does not improve AUC. Reverting changes.
Training on augumented user 130103 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130103 AUC after training: 0.5
User 130103 does not improve AUC. Reverting changes.
Training on augumented user 1679 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1679 AUC after training: 0.5
User 1679 does not improve AUC. Reverting changes.
Training on augumented user 69210 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69210 AUC after training: 0.5
User 69210 does not improve AUC. Reverting changes.
Training on augumented user 106544 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106544 AUC after training: 0.5
User 106544 does not improve AUC. Reverting changes.
Training on augumented user 17922 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17922 AUC after training: 0.5
User 17922 does not improve AUC. Reverting changes.
Training on augumented user 23887 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23887 AUC after training: 0.5
User 23887 does not improve AUC. Reverting changes.
Training on augumented user 72391 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72391 AUC after training: 0.5
User 72391 does not improve AUC. Reverting changes.
Training on augumented user 94137 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94137 AUC after training: 0.5
User 94137 does not improve AUC. Reverting changes.
Training on augumented user 128109 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128109 AUC after training: 0.5
User 128109 does not improve AUC. Reverting changes.
Training on augumented user 46255 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46255 AUC after training: 0.5
User 46255 does not improve AUC. Reverting changes.
Training on augumented user 57271 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57271 AUC after training: 0.5
User 57271 does not improve AUC. Reverting changes.
Training on augumented user 116124 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116124 AUC after training: 0.5
User 116124 does not improve AUC. Reverting changes.
Training on augumented user 68478 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68478 AUC after training: 0.5
User 68478 does not improve AUC. Reverting changes.
Training on augumented user 7359 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7359 AUC after training: 0.5
User 7359 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:49:33.207356] start test user 30166 123/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:33.716832] start test user 30166 123/568 recall augumented users by random, augumented_users = [126262, 84268, 75935, 49645, 86361, 41364, 88478, 125710, 39069, 127424, 26978, 57313, 2159, 116422, 112509, 53352, 83242, 13079, 50012, 20371, 92468, 33605, 128136, 71469, 721, 101047, 94049, 87255, 118410, 7911, 32574, 82760, 106914, 19539, 117641, 27243, 102740, 82147, 83518, 115080, 30374, 21782, 41951, 14986, 72120, 123037, 133210, 99868, 68672, 2080]
[2024-12-02 18:49:33.731594] user = 30166 Cloud 123/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:49:33.742821] user = 30166 Local 123/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:49:33.779218] user = 30166 Local+ 123/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:49:35.713808] user = 30166 MPDA- 123/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 126262 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126262 AUC after training: 0.5
User 126262 does not improve AUC. Reverting changes.
Training on augumented user 84268 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84268 AUC after training: 0.5
User 84268 does not improve AUC. Reverting changes.
Training on augumented user 75935 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75935 AUC after training: 0.5
User 75935 does not improve AUC. Reverting changes.
Training on augumented user 49645 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49645 AUC after training: 0.5
User 49645 does not improve AUC. Reverting changes.
Training on augumented user 86361 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86361 AUC after training: 0.5
User 86361 does not improve AUC. Reverting changes.
Training on augumented user 41364 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41364 AUC after training: 0.5
User 41364 does not improve AUC. Reverting changes.
Training on augumented user 88478 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88478 AUC after training: 0.5
User 88478 does not improve AUC. Reverting changes.
Training on augumented user 125710 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125710 AUC after training: 0.5
User 125710 does not improve AUC. Reverting changes.
Training on augumented user 39069 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39069 AUC after training: 0.5
User 39069 does not improve AUC. Reverting changes.
Training on augumented user 127424 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127424 AUC after training: 0.5
User 127424 does not improve AUC. Reverting changes.
Training on augumented user 26978 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26978 AUC after training: 0.5
User 26978 does not improve AUC. Reverting changes.
Training on augumented user 57313 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57313 AUC after training: 0.5
User 57313 does not improve AUC. Reverting changes.
Training on augumented user 2159 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2159 AUC after training: 0.5
User 2159 does not improve AUC. Reverting changes.
Training on augumented user 116422 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116422 AUC after training: 0.5
User 116422 does not improve AUC. Reverting changes.
Training on augumented user 112509 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112509 AUC after training: 0.5
User 112509 does not improve AUC. Reverting changes.
Training on augumented user 53352 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53352 AUC after training: 0.5
User 53352 does not improve AUC. Reverting changes.
Training on augumented user 83242 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83242 AUC after training: 0.5
User 83242 does not improve AUC. Reverting changes.
Training on augumented user 13079 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13079 AUC after training: 0.5
User 13079 does not improve AUC. Reverting changes.
Training on augumented user 50012 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50012 AUC after training: 0.5
User 50012 does not improve AUC. Reverting changes.
Training on augumented user 20371 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20371 AUC after training: 0.5
User 20371 does not improve AUC. Reverting changes.
Training on augumented user 92468 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92468 AUC after training: 0.5
User 92468 does not improve AUC. Reverting changes.
Training on augumented user 33605 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33605 AUC after training: 0.5
User 33605 does not improve AUC. Reverting changes.
Training on augumented user 128136 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128136 AUC after training: 0.5
User 128136 does not improve AUC. Reverting changes.
Training on augumented user 71469 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71469 AUC after training: 0.5
User 71469 does not improve AUC. Reverting changes.
Training on augumented user 721 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 721 AUC after training: 0.5
User 721 does not improve AUC. Reverting changes.
Training on augumented user 101047 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101047 AUC after training: 0.5
User 101047 does not improve AUC. Reverting changes.
Training on augumented user 94049 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94049 AUC after training: 0.5
User 94049 does not improve AUC. Reverting changes.
Training on augumented user 87255 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87255 AUC after training: 0.5
User 87255 does not improve AUC. Reverting changes.
Training on augumented user 118410 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118410 AUC after training: 0.5
User 118410 does not improve AUC. Reverting changes.
Training on augumented user 7911 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7911 AUC after training: 0.5
User 7911 does not improve AUC. Reverting changes.
Training on augumented user 32574 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32574 AUC after training: 0.5
User 32574 does not improve AUC. Reverting changes.
Training on augumented user 82760 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82760 AUC after training: 0.5
User 82760 does not improve AUC. Reverting changes.
Training on augumented user 106914 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106914 AUC after training: 0.5
User 106914 does not improve AUC. Reverting changes.
Training on augumented user 19539 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19539 AUC after training: 0.5
User 19539 does not improve AUC. Reverting changes.
Training on augumented user 117641 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117641 AUC after training: 0.5
User 117641 does not improve AUC. Reverting changes.
Training on augumented user 27243 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27243 AUC after training: 0.5
User 27243 does not improve AUC. Reverting changes.
Training on augumented user 102740 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102740 AUC after training: 0.5
User 102740 does not improve AUC. Reverting changes.
Training on augumented user 82147 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82147 AUC after training: 0.5
User 82147 does not improve AUC. Reverting changes.
Training on augumented user 83518 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83518 AUC after training: 0.5
User 83518 does not improve AUC. Reverting changes.
Training on augumented user 115080 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115080 AUC after training: 0.5
User 115080 does not improve AUC. Reverting changes.
Training on augumented user 30374 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30374 AUC after training: 0.5
User 30374 does not improve AUC. Reverting changes.
Training on augumented user 21782 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21782 AUC after training: 0.5
User 21782 does not improve AUC. Reverting changes.
Training on augumented user 41951 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41951 AUC after training: 0.5
User 41951 does not improve AUC. Reverting changes.
Training on augumented user 14986 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14986 AUC after training: 0.5
User 14986 does not improve AUC. Reverting changes.
Training on augumented user 72120 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72120 AUC after training: 0.5
User 72120 does not improve AUC. Reverting changes.
Training on augumented user 123037 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123037 AUC after training: 0.5
User 123037 does not improve AUC. Reverting changes.
Training on augumented user 133210 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133210 AUC after training: 0.5
User 133210 does not improve AUC. Reverting changes.
Training on augumented user 99868 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99868 AUC after training: 0.5
User 99868 does not improve AUC. Reverting changes.
Training on augumented user 68672 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68672 AUC after training: 0.5
User 68672 does not improve AUC. Reverting changes.
Training on augumented user 2080 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2080 AUC after training: 0.5
User 2080 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:50:05.856647] start test user 30172 124/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:06.476425] start test user 30172 124/568 recall augumented users by random, augumented_users = [7749, 121309, 27742, 71761, 4207, 6219, 7378, 71208, 67220, 66628, 138033, 4996, 137589, 53922, 73820, 116937, 58316, 132242, 26729, 29000, 15551, 54433, 30278, 49271, 21095, 56928, 6948, 32120, 114149, 121538, 85819, 23948, 119731, 75769, 9819, 44747, 53449, 129826, 87402, 74617, 19183, 101223, 123515, 106292, 5850, 30120, 48208, 77933, 60886, 27230]
[2024-12-02 18:50:06.492203] user = 30172 Cloud 124/568
[2024-12-02 18:50:06.505584] user = 30172 Local 124/568
[2024-12-02 18:50:06.751028] user = 30172 Local+ 124/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:08.717537] user = 30172 MPDA- 124/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 7749 0/50 current_auc = 1.0
User 7749 AUC after training: 1.0
User 7749 does not improve AUC. Reverting changes.
Training on augumented user 121309 1/50 current_auc = 1.0
User 121309 AUC after training: 1.0
User 121309 does not improve AUC. Reverting changes.
Training on augumented user 27742 2/50 current_auc = 1.0
User 27742 AUC after training: 1.0
User 27742 does not improve AUC. Reverting changes.
Training on augumented user 71761 3/50 current_auc = 1.0
User 71761 AUC after training: 1.0
User 71761 does not improve AUC. Reverting changes.
Training on augumented user 4207 4/50 current_auc = 1.0
User 4207 AUC after training: 1.0
User 4207 does not improve AUC. Reverting changes.
Training on augumented user 6219 5/50 current_auc = 1.0
User 6219 AUC after training: 1.0
User 6219 does not improve AUC. Reverting changes.
Training on augumented user 7378 6/50 current_auc = 1.0
User 7378 AUC after training: 1.0
User 7378 does not improve AUC. Reverting changes.
Training on augumented user 71208 7/50 current_auc = 1.0
User 71208 AUC after training: 1.0
User 71208 does not improve AUC. Reverting changes.
Training on augumented user 67220 8/50 current_auc = 1.0
User 67220 AUC after training: 1.0
User 67220 does not improve AUC. Reverting changes.
Training on augumented user 66628 9/50 current_auc = 1.0
User 66628 AUC after training: 1.0
User 66628 does not improve AUC. Reverting changes.
Training on augumented user 138033 10/50 current_auc = 1.0
User 138033 AUC after training: 1.0
User 138033 does not improve AUC. Reverting changes.
Training on augumented user 4996 11/50 current_auc = 1.0
User 4996 AUC after training: 1.0
User 4996 does not improve AUC. Reverting changes.
Training on augumented user 137589 12/50 current_auc = 1.0
User 137589 AUC after training: 1.0
User 137589 does not improve AUC. Reverting changes.
Training on augumented user 53922 13/50 current_auc = 1.0
User 53922 AUC after training: 1.0
User 53922 does not improve AUC. Reverting changes.
Training on augumented user 73820 14/50 current_auc = 1.0
User 73820 AUC after training: 1.0
User 73820 does not improve AUC. Reverting changes.
Training on augumented user 116937 15/50 current_auc = 1.0
User 116937 AUC after training: 1.0
User 116937 does not improve AUC. Reverting changes.
Training on augumented user 58316 16/50 current_auc = 1.0
User 58316 AUC after training: 1.0
User 58316 does not improve AUC. Reverting changes.
Training on augumented user 132242 17/50 current_auc = 1.0
User 132242 AUC after training: 1.0
User 132242 does not improve AUC. Reverting changes.
Training on augumented user 26729 18/50 current_auc = 1.0
User 26729 AUC after training: 1.0
User 26729 does not improve AUC. Reverting changes.
Training on augumented user 29000 19/50 current_auc = 1.0
User 29000 AUC after training: 1.0
User 29000 does not improve AUC. Reverting changes.
Training on augumented user 15551 20/50 current_auc = 1.0
User 15551 AUC after training: 1.0
User 15551 does not improve AUC. Reverting changes.
Training on augumented user 54433 21/50 current_auc = 1.0
User 54433 AUC after training: 1.0
User 54433 does not improve AUC. Reverting changes.
Training on augumented user 30278 22/50 current_auc = 1.0
User 30278 AUC after training: 1.0
User 30278 does not improve AUC. Reverting changes.
Training on augumented user 49271 23/50 current_auc = 1.0
User 49271 AUC after training: 1.0
User 49271 does not improve AUC. Reverting changes.
Training on augumented user 21095 24/50 current_auc = 1.0
User 21095 AUC after training: 1.0
User 21095 does not improve AUC. Reverting changes.
Training on augumented user 56928 25/50 current_auc = 1.0
User 56928 AUC after training: 1.0
User 56928 does not improve AUC. Reverting changes.
Training on augumented user 6948 26/50 current_auc = 1.0
User 6948 AUC after training: 1.0
User 6948 does not improve AUC. Reverting changes.
Training on augumented user 32120 27/50 current_auc = 1.0
User 32120 AUC after training: 1.0
User 32120 does not improve AUC. Reverting changes.
Training on augumented user 114149 28/50 current_auc = 1.0
User 114149 AUC after training: 1.0
User 114149 does not improve AUC. Reverting changes.
Training on augumented user 121538 29/50 current_auc = 1.0
User 121538 AUC after training: 1.0
User 121538 does not improve AUC. Reverting changes.
Training on augumented user 85819 30/50 current_auc = 1.0
User 85819 AUC after training: 1.0
User 85819 does not improve AUC. Reverting changes.
Training on augumented user 23948 31/50 current_auc = 1.0
User 23948 AUC after training: 1.0
User 23948 does not improve AUC. Reverting changes.
Training on augumented user 119731 32/50 current_auc = 1.0
User 119731 AUC after training: 1.0
User 119731 does not improve AUC. Reverting changes.
Training on augumented user 75769 33/50 current_auc = 1.0
User 75769 AUC after training: 1.0
User 75769 does not improve AUC. Reverting changes.
Training on augumented user 9819 34/50 current_auc = 1.0
User 9819 AUC after training: 1.0
User 9819 does not improve AUC. Reverting changes.
Training on augumented user 44747 35/50 current_auc = 1.0
User 44747 AUC after training: 1.0
User 44747 does not improve AUC. Reverting changes.
Training on augumented user 53449 36/50 current_auc = 1.0
User 53449 AUC after training: 1.0
User 53449 does not improve AUC. Reverting changes.
Training on augumented user 129826 37/50 current_auc = 1.0
User 129826 AUC after training: 1.0
User 129826 does not improve AUC. Reverting changes.
Training on augumented user 87402 38/50 current_auc = 1.0
User 87402 AUC after training: 1.0
User 87402 does not improve AUC. Reverting changes.
Training on augumented user 74617 39/50 current_auc = 1.0
User 74617 AUC after training: 1.0
User 74617 does not improve AUC. Reverting changes.
Training on augumented user 19183 40/50 current_auc = 1.0
User 19183 AUC after training: 1.0
User 19183 does not improve AUC. Reverting changes.
Training on augumented user 101223 41/50 current_auc = 1.0
User 101223 AUC after training: 1.0
User 101223 does not improve AUC. Reverting changes.
Training on augumented user 123515 42/50 current_auc = 1.0
User 123515 AUC after training: 1.0
User 123515 does not improve AUC. Reverting changes.
Training on augumented user 106292 43/50 current_auc = 1.0
User 106292 AUC after training: 1.0
User 106292 does not improve AUC. Reverting changes.
Training on augumented user 5850 44/50 current_auc = 1.0
User 5850 AUC after training: 1.0
User 5850 does not improve AUC. Reverting changes.
Training on augumented user 30120 45/50 current_auc = 1.0
User 30120 AUC after training: 1.0
User 30120 does not improve AUC. Reverting changes.
Training on augumented user 48208 46/50 current_auc = 1.0
User 48208 AUC after training: 1.0
User 48208 does not improve AUC. Reverting changes.
Training on augumented user 77933 47/50 current_auc = 1.0
User 77933 AUC after training: 1.0
User 77933 does not improve AUC. Reverting changes.
Training on augumented user 60886 48/50 current_auc = 1.0
User 60886 AUC after training: 1.0
User 60886 does not improve AUC. Reverting changes.
Training on augumented user 27230 49/50 current_auc = 1.0
User 27230 AUC after training: 1.0
User 27230 does not improve AUC. Reverting changes.
[2024-12-02 18:50:38.575511] start test user 30204 125/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:39.273164] start test user 30204 125/568 recall augumented users by random, augumented_users = [10524, 65900, 81873, 67244, 113029, 75776, 73628, 12950, 58090, 129172, 113028, 57270, 108641, 120442, 14733, 96048, 69570, 76215, 91002, 18460, 95056, 136711, 35863, 95153, 137490, 21099, 62312, 49945, 120184, 18627, 15458, 89545, 108806, 86086, 123336, 93032, 6175, 91433, 41371, 3399, 93846, 25537, 97837, 36155, 108103, 134756, 25092, 118549, 99274, 136769]
[2024-12-02 18:50:39.315816] user = 30204 Cloud 125/568
[2024-12-02 18:50:39.365531] user = 30204 Local 125/568
[2024-12-02 18:50:39.508359] user = 30204 Local+ 125/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:42.084482] user = 30204 MPDA- 125/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5337003222341568
Training on augumented user 10524 0/50 current_auc = 0.5337003222341568
User 10524 AUC after training: 0.5316863587540279
User 10524 does not improve AUC. Reverting changes.
Training on augumented user 65900 1/50 current_auc = 0.5337003222341568
User 65900 AUC after training: 0.534640171858217
User 65900 improves AUC. Keeping the model.
Training on augumented user 81873 2/50 current_auc = 0.534640171858217
User 81873 AUC after training: 0.5327604726100966
User 81873 does not improve AUC. Reverting changes.
Training on augumented user 67244 3/50 current_auc = 0.534640171858217
User 67244 AUC after training: 0.530343716433942
User 67244 does not improve AUC. Reverting changes.
Training on augumented user 113029 4/50 current_auc = 0.534640171858217
User 113029 AUC after training: 0.5323576799140709
User 113029 does not improve AUC. Reverting changes.
Training on augumented user 75776 5/50 current_auc = 0.534640171858217
User 75776 AUC after training: 0.5311493018259936
User 75776 does not improve AUC. Reverting changes.
Training on augumented user 73628 6/50 current_auc = 0.534640171858217
User 73628 AUC after training: 0.5314178302900108
User 73628 does not improve AUC. Reverting changes.
Training on augumented user 12950 7/50 current_auc = 0.534640171858217
User 12950 AUC after training: 0.5330290010741139
User 12950 does not improve AUC. Reverting changes.
Training on augumented user 58090 8/50 current_auc = 0.534640171858217
User 58090 AUC after training: 0.5311493018259936
User 58090 does not improve AUC. Reverting changes.
Training on augumented user 129172 9/50 current_auc = 0.534640171858217
User 129172 AUC after training: 0.5358485499462944
User 129172 improves AUC. Keeping the model.
Training on augumented user 113028 10/50 current_auc = 0.5358485499462944
User 113028 AUC after training: 0.5318206229860365
User 113028 does not improve AUC. Reverting changes.
Training on augumented user 57270 11/50 current_auc = 0.5358485499462944
User 57270 AUC after training: 0.5335660580021482
User 57270 does not improve AUC. Reverting changes.
Training on augumented user 108641 12/50 current_auc = 0.5358485499462944
User 108641 AUC after training: 0.5343716433941998
User 108641 does not improve AUC. Reverting changes.
Training on augumented user 120442 13/50 current_auc = 0.5358485499462944
User 120442 AUC after training: 0.5327604726100966
User 120442 does not improve AUC. Reverting changes.
Training on augumented user 14733 14/50 current_auc = 0.5358485499462944
User 14733 AUC after training: 0.5311493018259936
User 14733 does not improve AUC. Reverting changes.
Training on augumented user 96048 15/50 current_auc = 0.5358485499462944
User 96048 AUC after training: 0.5330290010741139
User 96048 does not improve AUC. Reverting changes.
Training on augumented user 69570 16/50 current_auc = 0.5358485499462944
User 69570 AUC after training: 0.5353114930182599
User 69570 does not improve AUC. Reverting changes.
Training on augumented user 76215 17/50 current_auc = 0.5358485499462944
User 76215 AUC after training: 0.5314178302900108
User 76215 does not improve AUC. Reverting changes.
Training on augumented user 91002 18/50 current_auc = 0.5358485499462944
User 91002 AUC after training: 0.5347744360902256
User 91002 does not improve AUC. Reverting changes.
Training on augumented user 18460 19/50 current_auc = 0.5358485499462944
User 18460 AUC after training: 0.5330290010741139
User 18460 does not improve AUC. Reverting changes.
Training on augumented user 95056 20/50 current_auc = 0.5358485499462944
User 95056 AUC after training: 0.5350429645542427
User 95056 does not improve AUC. Reverting changes.
Training on augumented user 136711 21/50 current_auc = 0.5358485499462944
User 136711 AUC after training: 0.5358485499462944
User 136711 does not improve AUC. Reverting changes.
Training on augumented user 35863 22/50 current_auc = 0.5358485499462944
User 35863 AUC after training: 0.5341031149301826
User 35863 does not improve AUC. Reverting changes.
Training on augumented user 95153 23/50 current_auc = 0.5358485499462944
User 95153 AUC after training: 0.5342373791621913
User 95153 does not improve AUC. Reverting changes.
Training on augumented user 137490 24/50 current_auc = 0.5358485499462944
User 137490 AUC after training: 0.5311493018259936
User 137490 does not improve AUC. Reverting changes.
Training on augumented user 21099 25/50 current_auc = 0.5358485499462944
User 21099 AUC after training: 0.5353114930182599
User 21099 does not improve AUC. Reverting changes.
Training on augumented user 62312 26/50 current_auc = 0.5358485499462944
User 62312 AUC after training: 0.5345059076262084
User 62312 does not improve AUC. Reverting changes.
Training on augumented user 49945 27/50 current_auc = 0.5358485499462944
User 49945 AUC after training: 0.5338345864661654
User 49945 does not improve AUC. Reverting changes.
Training on augumented user 120184 28/50 current_auc = 0.5358485499462944
User 120184 AUC after training: 0.5350429645542428
User 120184 does not improve AUC. Reverting changes.
Training on augumented user 18627 29/50 current_auc = 0.5358485499462944
User 18627 AUC after training: 0.5279269602577873
User 18627 does not improve AUC. Reverting changes.
Training on augumented user 15458 30/50 current_auc = 0.5358485499462944
User 15458 AUC after training: 0.5290010741138561
User 15458 does not improve AUC. Reverting changes.
Training on augumented user 89545 31/50 current_auc = 0.5358485499462944
User 89545 AUC after training: 0.5355800214822771
User 89545 does not improve AUC. Reverting changes.
Training on augumented user 108806 32/50 current_auc = 0.5358485499462944
User 108806 AUC after training: 0.5331632653061225
User 108806 does not improve AUC. Reverting changes.
Training on augumented user 86086 33/50 current_auc = 0.5358485499462944
User 86086 AUC after training: 0.534640171858217
User 86086 does not improve AUC. Reverting changes.
Training on augumented user 123336 34/50 current_auc = 0.5358485499462944
User 123336 AUC after training: 0.533297529538131
User 123336 does not improve AUC. Reverting changes.
Training on augumented user 93032 35/50 current_auc = 0.5358485499462944
User 93032 AUC after training: 0.5322234156820622
User 93032 does not improve AUC. Reverting changes.
Training on augumented user 6175 36/50 current_auc = 0.5358485499462944
User 6175 AUC after training: 0.5316863587540279
User 6175 does not improve AUC. Reverting changes.
Training on augumented user 91433 37/50 current_auc = 0.5358485499462944
User 91433 AUC after training: 0.5343716433941998
User 91433 does not improve AUC. Reverting changes.
Training on augumented user 41371 38/50 current_auc = 0.5358485499462944
User 41371 AUC after training: 0.5358485499462943
User 41371 does not improve AUC. Reverting changes.
Training on augumented user 3399 39/50 current_auc = 0.5358485499462944
User 3399 AUC after training: 0.5350429645542427
User 3399 does not improve AUC. Reverting changes.
Training on augumented user 93846 40/50 current_auc = 0.5358485499462944
User 93846 AUC after training: 0.5345059076262084
User 93846 does not improve AUC. Reverting changes.
Training on augumented user 25537 41/50 current_auc = 0.5358485499462944
User 25537 AUC after training: 0.5327604726100967
User 25537 does not improve AUC. Reverting changes.
Training on augumented user 97837 42/50 current_auc = 0.5358485499462944
User 97837 AUC after training: 0.5347744360902256
User 97837 does not improve AUC. Reverting changes.
Training on augumented user 36155 43/50 current_auc = 0.5358485499462944
User 36155 AUC after training: 0.5322234156820622
User 36155 does not improve AUC. Reverting changes.
Training on augumented user 108103 44/50 current_auc = 0.5358485499462944
User 108103 AUC after training: 0.5350429645542427
User 108103 does not improve AUC. Reverting changes.
Training on augumented user 134756 45/50 current_auc = 0.5358485499462944
User 134756 AUC after training: 0.5345059076262084
User 134756 does not improve AUC. Reverting changes.
Training on augumented user 25092 46/50 current_auc = 0.5358485499462944
User 25092 AUC after training: 0.5312835660580022
User 25092 does not improve AUC. Reverting changes.
Training on augumented user 118549 47/50 current_auc = 0.5358485499462944
User 118549 AUC after training: 0.534640171858217
User 118549 does not improve AUC. Reverting changes.
Training on augumented user 99274 48/50 current_auc = 0.5358485499462944
User 99274 AUC after training: 0.5349087003222341
User 99274 does not improve AUC. Reverting changes.
Training on augumented user 136769 49/50 current_auc = 0.5358485499462944
User 136769 AUC after training: 0.5347744360902256
User 136769 does not improve AUC. Reverting changes.
[2024-12-02 18:51:12.114789] start test user 30210 126/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:12.549829] start test user 30210 126/568 recall augumented users by random, augumented_users = [13859, 57782, 72299, 50295, 71423, 131434, 130896, 102719, 36217, 89087, 32409, 99618, 15925, 63210, 38864, 69364, 48869, 112937, 62621, 15995, 67169, 35575, 30082, 30080, 71306, 20732, 33840, 74963, 64612, 109279, 11094, 136036, 20338, 23080, 114568, 121952, 91148, 106690, 10972, 70681, 101768, 102816, 76388, 17958, 20171, 79810, 71449, 24943, 128029, 127409]
[2024-12-02 18:51:12.591992] user = 30210 Cloud 126/568
[2024-12-02 18:51:12.625751] user = 30210 Local 126/568
[2024-12-02 18:51:12.832825] user = 30210 Local+ 126/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:15.607819] user = 30210 MPDA- 126/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.582271762208068
Training on augumented user 13859 0/50 current_auc = 0.582271762208068
User 13859 AUC after training: 0.5833333333333334
User 13859 improves AUC. Keeping the model.
Training on augumented user 57782 1/50 current_auc = 0.5833333333333334
User 57782 AUC after training: 0.5828025477707006
User 57782 does not improve AUC. Reverting changes.
Training on augumented user 72299 2/50 current_auc = 0.5833333333333334
User 72299 AUC after training: 0.5828025477707006
User 72299 does not improve AUC. Reverting changes.
Training on augumented user 50295 3/50 current_auc = 0.5833333333333334
User 50295 AUC after training: 0.5833333333333334
User 50295 does not improve AUC. Reverting changes.
Training on augumented user 71423 4/50 current_auc = 0.5833333333333334
User 71423 AUC after training: 0.5833333333333334
User 71423 does not improve AUC. Reverting changes.
Training on augumented user 131434 5/50 current_auc = 0.5833333333333334
User 131434 AUC after training: 0.578556263269639
User 131434 does not improve AUC. Reverting changes.
Training on augumented user 130896 6/50 current_auc = 0.5833333333333334
User 130896 AUC after training: 0.5828025477707006
User 130896 does not improve AUC. Reverting changes.
Training on augumented user 102719 7/50 current_auc = 0.5833333333333334
User 102719 AUC after training: 0.5833333333333334
User 102719 does not improve AUC. Reverting changes.
Training on augumented user 36217 8/50 current_auc = 0.5833333333333334
User 36217 AUC after training: 0.5833333333333334
User 36217 does not improve AUC. Reverting changes.
Training on augumented user 89087 9/50 current_auc = 0.5833333333333334
User 89087 AUC after training: 0.5833333333333334
User 89087 does not improve AUC. Reverting changes.
Training on augumented user 32409 10/50 current_auc = 0.5833333333333334
User 32409 AUC after training: 0.5833333333333334
User 32409 does not improve AUC. Reverting changes.
Training on augumented user 99618 11/50 current_auc = 0.5833333333333334
User 99618 AUC after training: 0.5833333333333334
User 99618 does not improve AUC. Reverting changes.
Training on augumented user 15925 12/50 current_auc = 0.5833333333333334
User 15925 AUC after training: 0.5833333333333334
User 15925 does not improve AUC. Reverting changes.
Training on augumented user 63210 13/50 current_auc = 0.5833333333333334
User 63210 AUC after training: 0.5833333333333334
User 63210 does not improve AUC. Reverting changes.
Training on augumented user 38864 14/50 current_auc = 0.5833333333333334
User 38864 AUC after training: 0.5833333333333334
User 38864 does not improve AUC. Reverting changes.
Training on augumented user 69364 15/50 current_auc = 0.5833333333333334
User 69364 AUC after training: 0.5833333333333334
User 69364 does not improve AUC. Reverting changes.
Training on augumented user 48869 16/50 current_auc = 0.5833333333333334
User 48869 AUC after training: 0.5833333333333334
User 48869 does not improve AUC. Reverting changes.
Training on augumented user 112937 17/50 current_auc = 0.5833333333333334
User 112937 AUC after training: 0.5833333333333334
User 112937 does not improve AUC. Reverting changes.
Training on augumented user 62621 18/50 current_auc = 0.5833333333333334
User 62621 AUC after training: 0.5838641188959661
User 62621 improves AUC. Keeping the model.
Training on augumented user 15995 19/50 current_auc = 0.5838641188959661
User 15995 AUC after training: 0.5828025477707006
User 15995 does not improve AUC. Reverting changes.
Training on augumented user 67169 20/50 current_auc = 0.5838641188959661
User 67169 AUC after training: 0.5828025477707006
User 67169 does not improve AUC. Reverting changes.
Training on augumented user 35575 21/50 current_auc = 0.5838641188959661
User 35575 AUC after training: 0.5812101910828026
User 35575 does not improve AUC. Reverting changes.
Training on augumented user 30082 22/50 current_auc = 0.5838641188959661
User 30082 AUC after training: 0.5833333333333334
User 30082 does not improve AUC. Reverting changes.
Training on augumented user 30080 23/50 current_auc = 0.5838641188959661
User 30080 AUC after training: 0.5828025477707006
User 30080 does not improve AUC. Reverting changes.
Training on augumented user 71306 24/50 current_auc = 0.5838641188959661
User 71306 AUC after training: 0.582271762208068
User 71306 does not improve AUC. Reverting changes.
Training on augumented user 20732 25/50 current_auc = 0.5838641188959661
User 20732 AUC after training: 0.5833333333333334
User 20732 does not improve AUC. Reverting changes.
Training on augumented user 33840 26/50 current_auc = 0.5838641188959661
User 33840 AUC after training: 0.5828025477707006
User 33840 does not improve AUC. Reverting changes.
Training on augumented user 74963 27/50 current_auc = 0.5838641188959661
User 74963 AUC after training: 0.5833333333333334
User 74963 does not improve AUC. Reverting changes.
Training on augumented user 64612 28/50 current_auc = 0.5838641188959661
User 64612 AUC after training: 0.5828025477707006
User 64612 does not improve AUC. Reverting changes.
Training on augumented user 109279 29/50 current_auc = 0.5838641188959661
User 109279 AUC after training: 0.5817409766454352
User 109279 does not improve AUC. Reverting changes.
Training on augumented user 11094 30/50 current_auc = 0.5838641188959661
User 11094 AUC after training: 0.5843949044585988
User 11094 improves AUC. Keeping the model.
Training on augumented user 136036 31/50 current_auc = 0.5843949044585988
User 136036 AUC after training: 0.5849256900212314
User 136036 improves AUC. Keeping the model.
Training on augumented user 20338 32/50 current_auc = 0.5849256900212314
User 20338 AUC after training: 0.5843949044585988
User 20338 does not improve AUC. Reverting changes.
Training on augumented user 23080 33/50 current_auc = 0.5849256900212314
User 23080 AUC after training: 0.5843949044585988
User 23080 does not improve AUC. Reverting changes.
Training on augumented user 114568 34/50 current_auc = 0.5849256900212314
User 114568 AUC after training: 0.5843949044585988
User 114568 does not improve AUC. Reverting changes.
Training on augumented user 121952 35/50 current_auc = 0.5849256900212314
User 121952 AUC after training: 0.583864118895966
User 121952 does not improve AUC. Reverting changes.
Training on augumented user 91148 36/50 current_auc = 0.5849256900212314
User 91148 AUC after training: 0.5854564755838642
User 91148 improves AUC. Keeping the model.
Training on augumented user 106690 37/50 current_auc = 0.5854564755838642
User 106690 AUC after training: 0.5859872611464969
User 106690 improves AUC. Keeping the model.
Training on augumented user 10972 38/50 current_auc = 0.5859872611464969
User 10972 AUC after training: 0.5859872611464969
User 10972 does not improve AUC. Reverting changes.
Training on augumented user 70681 39/50 current_auc = 0.5859872611464969
User 70681 AUC after training: 0.5859872611464969
User 70681 does not improve AUC. Reverting changes.
Training on augumented user 101768 40/50 current_auc = 0.5859872611464969
User 101768 AUC after training: 0.5886411889596603
User 101768 improves AUC. Keeping the model.
Training on augumented user 102816 41/50 current_auc = 0.5886411889596603
User 102816 AUC after training: 0.5902335456475585
User 102816 improves AUC. Keeping the model.
Training on augumented user 76388 42/50 current_auc = 0.5902335456475585
User 76388 AUC after training: 0.5897027600849257
User 76388 does not improve AUC. Reverting changes.
Training on augumented user 17958 43/50 current_auc = 0.5902335456475585
User 17958 AUC after training: 0.5875796178343948
User 17958 does not improve AUC. Reverting changes.
Training on augumented user 20171 44/50 current_auc = 0.5902335456475585
User 20171 AUC after training: 0.5907643312101911
User 20171 improves AUC. Keeping the model.
Training on augumented user 79810 45/50 current_auc = 0.5907643312101911
User 79810 AUC after training: 0.5817409766454353
User 79810 does not improve AUC. Reverting changes.
Training on augumented user 71449 46/50 current_auc = 0.5907643312101911
User 71449 AUC after training: 0.5886411889596603
User 71449 does not improve AUC. Reverting changes.
Training on augumented user 24943 47/50 current_auc = 0.5907643312101911
User 24943 AUC after training: 0.5907643312101911
User 24943 does not improve AUC. Reverting changes.
Training on augumented user 128029 48/50 current_auc = 0.5907643312101911
User 128029 AUC after training: 0.5907643312101911
User 128029 does not improve AUC. Reverting changes.
Training on augumented user 127409 49/50 current_auc = 0.5907643312101911
User 127409 AUC after training: 0.5902335456475585
User 127409 does not improve AUC. Reverting changes.
[2024-12-02 18:51:46.842889] start test user 30235 127/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:47.880027] start test user 30235 127/568 recall augumented users by random, augumented_users = [131642, 99969, 59313, 21718, 127009, 120161, 67257, 16812, 72035, 29558, 7033, 54266, 74121, 16243, 87202, 102884, 8540, 11159, 123542, 72244, 138487, 63384, 23319, 113448, 108926, 128961, 67161, 69308, 90742, 41585, 93069, 24964, 78866, 95194, 103987, 130727, 130209, 77115, 8244, 31311, 113813, 15937, 16443, 47079, 60318, 118665, 40895, 42264, 11026, 116149]
[2024-12-02 18:51:47.911695] user = 30235 Cloud 127/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:51:47.939594] user = 30235 Local 127/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:51:47.990124] user = 30235 Local+ 127/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:51:50.116743] user = 30235 MPDA- 127/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 131642 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131642 AUC after training: 0.5
User 131642 does not improve AUC. Reverting changes.
Training on augumented user 99969 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99969 AUC after training: 0.5
User 99969 does not improve AUC. Reverting changes.
Training on augumented user 59313 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59313 AUC after training: 0.5
User 59313 does not improve AUC. Reverting changes.
Training on augumented user 21718 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21718 AUC after training: 0.5
User 21718 does not improve AUC. Reverting changes.
Training on augumented user 127009 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127009 AUC after training: 0.5
User 127009 does not improve AUC. Reverting changes.
Training on augumented user 120161 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120161 AUC after training: 0.5
User 120161 does not improve AUC. Reverting changes.
Training on augumented user 67257 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67257 AUC after training: 0.5
User 67257 does not improve AUC. Reverting changes.
Training on augumented user 16812 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16812 AUC after training: 0.5
User 16812 does not improve AUC. Reverting changes.
Training on augumented user 72035 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72035 AUC after training: 0.5
User 72035 does not improve AUC. Reverting changes.
Training on augumented user 29558 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29558 AUC after training: 0.5
User 29558 does not improve AUC. Reverting changes.
Training on augumented user 7033 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7033 AUC after training: 0.5
User 7033 does not improve AUC. Reverting changes.
Training on augumented user 54266 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54266 AUC after training: 0.5
User 54266 does not improve AUC. Reverting changes.
Training on augumented user 74121 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74121 AUC after training: 0.5
User 74121 does not improve AUC. Reverting changes.
Training on augumented user 16243 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16243 AUC after training: 0.5
User 16243 does not improve AUC. Reverting changes.
Training on augumented user 87202 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87202 AUC after training: 0.5
User 87202 does not improve AUC. Reverting changes.
Training on augumented user 102884 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102884 AUC after training: 0.5
User 102884 does not improve AUC. Reverting changes.
Training on augumented user 8540 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8540 AUC after training: 0.5
User 8540 does not improve AUC. Reverting changes.
Training on augumented user 11159 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11159 AUC after training: 0.5
User 11159 does not improve AUC. Reverting changes.
Training on augumented user 123542 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123542 AUC after training: 0.5
User 123542 does not improve AUC. Reverting changes.
Training on augumented user 72244 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72244 AUC after training: 0.5
User 72244 does not improve AUC. Reverting changes.
Training on augumented user 138487 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138487 AUC after training: 0.5
User 138487 does not improve AUC. Reverting changes.
Training on augumented user 63384 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63384 AUC after training: 0.5
User 63384 does not improve AUC. Reverting changes.
Training on augumented user 23319 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23319 AUC after training: 0.5
User 23319 does not improve AUC. Reverting changes.
Training on augumented user 113448 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113448 AUC after training: 0.5
User 113448 does not improve AUC. Reverting changes.
Training on augumented user 108926 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108926 AUC after training: 0.5
User 108926 does not improve AUC. Reverting changes.
Training on augumented user 128961 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128961 AUC after training: 0.5
User 128961 does not improve AUC. Reverting changes.
Training on augumented user 67161 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67161 AUC after training: 0.5
User 67161 does not improve AUC. Reverting changes.
Training on augumented user 69308 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69308 AUC after training: 0.5
User 69308 does not improve AUC. Reverting changes.
Training on augumented user 90742 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90742 AUC after training: 0.5
User 90742 does not improve AUC. Reverting changes.
Training on augumented user 41585 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41585 AUC after training: 0.5
User 41585 does not improve AUC. Reverting changes.
Training on augumented user 93069 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93069 AUC after training: 0.5
User 93069 does not improve AUC. Reverting changes.
Training on augumented user 24964 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24964 AUC after training: 0.5
User 24964 does not improve AUC. Reverting changes.
Training on augumented user 78866 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78866 AUC after training: 0.5
User 78866 does not improve AUC. Reverting changes.
Training on augumented user 95194 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95194 AUC after training: 0.5
User 95194 does not improve AUC. Reverting changes.
Training on augumented user 103987 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103987 AUC after training: 0.5
User 103987 does not improve AUC. Reverting changes.
Training on augumented user 130727 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130727 AUC after training: 0.5
User 130727 does not improve AUC. Reverting changes.
Training on augumented user 130209 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130209 AUC after training: 0.5
User 130209 does not improve AUC. Reverting changes.
Training on augumented user 77115 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77115 AUC after training: 0.5
User 77115 does not improve AUC. Reverting changes.
Training on augumented user 8244 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8244 AUC after training: 0.5
User 8244 does not improve AUC. Reverting changes.
Training on augumented user 31311 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31311 AUC after training: 0.5
User 31311 does not improve AUC. Reverting changes.
Training on augumented user 113813 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113813 AUC after training: 0.5
User 113813 does not improve AUC. Reverting changes.
Training on augumented user 15937 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15937 AUC after training: 0.5
User 15937 does not improve AUC. Reverting changes.
Training on augumented user 16443 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16443 AUC after training: 0.5
User 16443 does not improve AUC. Reverting changes.
Training on augumented user 47079 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47079 AUC after training: 0.5
User 47079 does not improve AUC. Reverting changes.
Training on augumented user 60318 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60318 AUC after training: 0.5
User 60318 does not improve AUC. Reverting changes.
Training on augumented user 118665 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118665 AUC after training: 0.5
User 118665 does not improve AUC. Reverting changes.
Training on augumented user 40895 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40895 AUC after training: 0.5
User 40895 does not improve AUC. Reverting changes.
Training on augumented user 42264 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42264 AUC after training: 0.5
User 42264 does not improve AUC. Reverting changes.
Training on augumented user 11026 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11026 AUC after training: 0.5
User 11026 does not improve AUC. Reverting changes.
Training on augumented user 116149 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116149 AUC after training: 0.5
User 116149 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:52:17.306782] start test user 30240 128/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:17.741685] start test user 30240 128/568 recall augumented users by random, augumented_users = [111345, 107021, 39456, 133294, 135385, 104441, 19980, 19841, 127656, 80028, 138, 42182, 133050, 132450, 3353, 8484, 111037, 110029, 111199, 12855, 126488, 86844, 8263, 121028, 72611, 112833, 136965, 25702, 108795, 118010, 952, 126993, 93935, 50469, 67587, 33910, 93752, 29850, 6289, 6014, 70482, 137993, 121702, 67956, 73193, 9210, 27971, 81292, 59111, 438]
[2024-12-02 18:52:17.756253] user = 30240 Cloud 128/568
[2024-12-02 18:52:17.766394] user = 30240 Local 128/568
[2024-12-02 18:52:17.806468] user = 30240 Local+ 128/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:19.645131] user = 30240 MPDA- 128/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6190476190476191
Training on augumented user 111345 0/50 current_auc = 0.6190476190476191
User 111345 AUC after training: 0.6190476190476191
User 111345 does not improve AUC. Reverting changes.
Training on augumented user 107021 1/50 current_auc = 0.6190476190476191
User 107021 AUC after training: 0.6190476190476191
User 107021 does not improve AUC. Reverting changes.
Training on augumented user 39456 2/50 current_auc = 0.6190476190476191
User 39456 AUC after training: 0.6190476190476191
User 39456 does not improve AUC. Reverting changes.
Training on augumented user 133294 3/50 current_auc = 0.6190476190476191
User 133294 AUC after training: 0.6190476190476191
User 133294 does not improve AUC. Reverting changes.
Training on augumented user 135385 4/50 current_auc = 0.6190476190476191
User 135385 AUC after training: 0.6190476190476191
User 135385 does not improve AUC. Reverting changes.
Training on augumented user 104441 5/50 current_auc = 0.6190476190476191
User 104441 AUC after training: 0.6190476190476191
User 104441 does not improve AUC. Reverting changes.
Training on augumented user 19980 6/50 current_auc = 0.6190476190476191
User 19980 AUC after training: 0.6190476190476191
User 19980 does not improve AUC. Reverting changes.
Training on augumented user 19841 7/50 current_auc = 0.6190476190476191
User 19841 AUC after training: 0.6190476190476191
User 19841 does not improve AUC. Reverting changes.
Training on augumented user 127656 8/50 current_auc = 0.6190476190476191
User 127656 AUC after training: 0.6190476190476191
User 127656 does not improve AUC. Reverting changes.
Training on augumented user 80028 9/50 current_auc = 0.6190476190476191
User 80028 AUC after training: 0.6190476190476191
User 80028 does not improve AUC. Reverting changes.
Training on augumented user 138 10/50 current_auc = 0.6190476190476191
User 138 AUC after training: 0.6190476190476191
User 138 does not improve AUC. Reverting changes.
Training on augumented user 42182 11/50 current_auc = 0.6190476190476191
User 42182 AUC after training: 0.6190476190476191
User 42182 does not improve AUC. Reverting changes.
Training on augumented user 133050 12/50 current_auc = 0.6190476190476191
User 133050 AUC after training: 0.6190476190476191
User 133050 does not improve AUC. Reverting changes.
Training on augumented user 132450 13/50 current_auc = 0.6190476190476191
User 132450 AUC after training: 0.6190476190476191
User 132450 does not improve AUC. Reverting changes.
Training on augumented user 3353 14/50 current_auc = 0.6190476190476191
User 3353 AUC after training: 0.6190476190476191
User 3353 does not improve AUC. Reverting changes.
Training on augumented user 8484 15/50 current_auc = 0.6190476190476191
User 8484 AUC after training: 0.6190476190476191
User 8484 does not improve AUC. Reverting changes.
Training on augumented user 111037 16/50 current_auc = 0.6190476190476191
User 111037 AUC after training: 0.6190476190476191
User 111037 does not improve AUC. Reverting changes.
Training on augumented user 110029 17/50 current_auc = 0.6190476190476191
User 110029 AUC after training: 0.6190476190476191
User 110029 does not improve AUC. Reverting changes.
Training on augumented user 111199 18/50 current_auc = 0.6190476190476191
User 111199 AUC after training: 0.6190476190476191
User 111199 does not improve AUC. Reverting changes.
Training on augumented user 12855 19/50 current_auc = 0.6190476190476191
User 12855 AUC after training: 0.6190476190476191
User 12855 does not improve AUC. Reverting changes.
Training on augumented user 126488 20/50 current_auc = 0.6190476190476191
User 126488 AUC after training: 0.6349206349206349
User 126488 improves AUC. Keeping the model.
Training on augumented user 86844 21/50 current_auc = 0.6349206349206349
User 86844 AUC after training: 0.6349206349206349
User 86844 does not improve AUC. Reverting changes.
Training on augumented user 8263 22/50 current_auc = 0.6349206349206349
User 8263 AUC after training: 0.6666666666666667
User 8263 improves AUC. Keeping the model.
Training on augumented user 121028 23/50 current_auc = 0.6666666666666667
User 121028 AUC after training: 0.6349206349206349
User 121028 does not improve AUC. Reverting changes.
Training on augumented user 72611 24/50 current_auc = 0.6666666666666667
User 72611 AUC after training: 0.6507936507936508
User 72611 does not improve AUC. Reverting changes.
Training on augumented user 112833 25/50 current_auc = 0.6666666666666667
User 112833 AUC after training: 0.6507936507936508
User 112833 does not improve AUC. Reverting changes.
Training on augumented user 136965 26/50 current_auc = 0.6666666666666667
User 136965 AUC after training: 0.6349206349206349
User 136965 does not improve AUC. Reverting changes.
Training on augumented user 25702 27/50 current_auc = 0.6666666666666667
User 25702 AUC after training: 0.6349206349206349
User 25702 does not improve AUC. Reverting changes.
Training on augumented user 108795 28/50 current_auc = 0.6666666666666667
User 108795 AUC after training: 0.6349206349206349
User 108795 does not improve AUC. Reverting changes.
Training on augumented user 118010 29/50 current_auc = 0.6666666666666667
User 118010 AUC after training: 0.6507936507936508
User 118010 does not improve AUC. Reverting changes.
Training on augumented user 952 30/50 current_auc = 0.6666666666666667
User 952 AUC after training: 0.6507936507936508
User 952 does not improve AUC. Reverting changes.
Training on augumented user 126993 31/50 current_auc = 0.6666666666666667
User 126993 AUC after training: 0.6666666666666667
User 126993 does not improve AUC. Reverting changes.
Training on augumented user 93935 32/50 current_auc = 0.6666666666666667
User 93935 AUC after training: 0.6507936507936508
User 93935 does not improve AUC. Reverting changes.
Training on augumented user 50469 33/50 current_auc = 0.6666666666666667
User 50469 AUC after training: 0.6349206349206349
User 50469 does not improve AUC. Reverting changes.
Training on augumented user 67587 34/50 current_auc = 0.6666666666666667
User 67587 AUC after training: 0.6507936507936508
User 67587 does not improve AUC. Reverting changes.
Training on augumented user 33910 35/50 current_auc = 0.6666666666666667
User 33910 AUC after training: 0.6507936507936508
User 33910 does not improve AUC. Reverting changes.
Training on augumented user 93752 36/50 current_auc = 0.6666666666666667
User 93752 AUC after training: 0.6349206349206349
User 93752 does not improve AUC. Reverting changes.
Training on augumented user 29850 37/50 current_auc = 0.6666666666666667
User 29850 AUC after training: 0.6349206349206349
User 29850 does not improve AUC. Reverting changes.
Training on augumented user 6289 38/50 current_auc = 0.6666666666666667
User 6289 AUC after training: 0.6666666666666667
User 6289 does not improve AUC. Reverting changes.
Training on augumented user 6014 39/50 current_auc = 0.6666666666666667
User 6014 AUC after training: 0.6666666666666667
User 6014 does not improve AUC. Reverting changes.
Training on augumented user 70482 40/50 current_auc = 0.6666666666666667
User 70482 AUC after training: 0.6507936507936508
User 70482 does not improve AUC. Reverting changes.
Training on augumented user 137993 41/50 current_auc = 0.6666666666666667
User 137993 AUC after training: 0.6666666666666667
User 137993 does not improve AUC. Reverting changes.
Training on augumented user 121702 42/50 current_auc = 0.6666666666666667
User 121702 AUC after training: 0.6349206349206349
User 121702 does not improve AUC. Reverting changes.
Training on augumented user 67956 43/50 current_auc = 0.6666666666666667
User 67956 AUC after training: 0.6349206349206349
User 67956 does not improve AUC. Reverting changes.
Training on augumented user 73193 44/50 current_auc = 0.6666666666666667
User 73193 AUC after training: 0.6349206349206349
User 73193 does not improve AUC. Reverting changes.
Training on augumented user 9210 45/50 current_auc = 0.6666666666666667
User 9210 AUC after training: 0.6666666666666667
User 9210 does not improve AUC. Reverting changes.
Training on augumented user 27971 46/50 current_auc = 0.6666666666666667
User 27971 AUC after training: 0.6507936507936508
User 27971 does not improve AUC. Reverting changes.
Training on augumented user 81292 47/50 current_auc = 0.6666666666666667
User 81292 AUC after training: 0.6666666666666667
User 81292 does not improve AUC. Reverting changes.
Training on augumented user 59111 48/50 current_auc = 0.6666666666666667
User 59111 AUC after training: 0.6507936507936508
User 59111 does not improve AUC. Reverting changes.
Training on augumented user 438 49/50 current_auc = 0.6666666666666667
User 438 AUC after training: 0.6507936507936508
User 438 does not improve AUC. Reverting changes.
[2024-12-02 18:52:49.375376] start test user 30256 129/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:50.071487] start test user 30256 129/568 recall augumented users by random, augumented_users = [4504, 13571, 137695, 32105, 138411, 119075, 89421, 69987, 98404, 120805, 99370, 74300, 104230, 7606, 20331, 103780, 41359, 37772, 78334, 3440, 27000, 56712, 41542, 8801, 116123, 77124, 126124, 118557, 70795, 57064, 6620, 130076, 121257, 64783, 78485, 59143, 49577, 78985, 72269, 67956, 4267, 56402, 131947, 3381, 91728, 33797, 25785, 5568, 93064, 3824]
[2024-12-02 18:52:50.086599] user = 30256 Cloud 129/568
[2024-12-02 18:52:50.096327] user = 30256 Local 129/568
[2024-12-02 18:52:50.178587] user = 30256 Local+ 129/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:52.906877] user = 30256 MPDA- 129/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.75
Training on augumented user 4504 0/50 current_auc = 0.75
User 4504 AUC after training: 0.75
User 4504 does not improve AUC. Reverting changes.
Training on augumented user 13571 1/50 current_auc = 0.75
User 13571 AUC after training: 0.75
User 13571 does not improve AUC. Reverting changes.
Training on augumented user 137695 2/50 current_auc = 0.75
User 137695 AUC after training: 0.75
User 137695 does not improve AUC. Reverting changes.
Training on augumented user 32105 3/50 current_auc = 0.75
User 32105 AUC after training: 0.75
User 32105 does not improve AUC. Reverting changes.
Training on augumented user 138411 4/50 current_auc = 0.75
User 138411 AUC after training: 0.75
User 138411 does not improve AUC. Reverting changes.
Training on augumented user 119075 5/50 current_auc = 0.75
User 119075 AUC after training: 0.75
User 119075 does not improve AUC. Reverting changes.
Training on augumented user 89421 6/50 current_auc = 0.75
User 89421 AUC after training: 0.75
User 89421 does not improve AUC. Reverting changes.
Training on augumented user 69987 7/50 current_auc = 0.75
User 69987 AUC after training: 0.75
User 69987 does not improve AUC. Reverting changes.
Training on augumented user 98404 8/50 current_auc = 0.75
User 98404 AUC after training: 0.75
User 98404 does not improve AUC. Reverting changes.
Training on augumented user 120805 9/50 current_auc = 0.75
User 120805 AUC after training: 0.75
User 120805 does not improve AUC. Reverting changes.
Training on augumented user 99370 10/50 current_auc = 0.75
User 99370 AUC after training: 0.75
User 99370 does not improve AUC. Reverting changes.
Training on augumented user 74300 11/50 current_auc = 0.75
User 74300 AUC after training: 0.75
User 74300 does not improve AUC. Reverting changes.
Training on augumented user 104230 12/50 current_auc = 0.75
User 104230 AUC after training: 0.75
User 104230 does not improve AUC. Reverting changes.
Training on augumented user 7606 13/50 current_auc = 0.75
User 7606 AUC after training: 0.75
User 7606 does not improve AUC. Reverting changes.
Training on augumented user 20331 14/50 current_auc = 0.75
User 20331 AUC after training: 0.75
User 20331 does not improve AUC. Reverting changes.
Training on augumented user 103780 15/50 current_auc = 0.75
User 103780 AUC after training: 0.75
User 103780 does not improve AUC. Reverting changes.
Training on augumented user 41359 16/50 current_auc = 0.75
User 41359 AUC after training: 0.75
User 41359 does not improve AUC. Reverting changes.
Training on augumented user 37772 17/50 current_auc = 0.75
User 37772 AUC after training: 0.75
User 37772 does not improve AUC. Reverting changes.
Training on augumented user 78334 18/50 current_auc = 0.75
User 78334 AUC after training: 0.75
User 78334 does not improve AUC. Reverting changes.
Training on augumented user 3440 19/50 current_auc = 0.75
User 3440 AUC after training: 0.75
User 3440 does not improve AUC. Reverting changes.
Training on augumented user 27000 20/50 current_auc = 0.75
User 27000 AUC after training: 0.75
User 27000 does not improve AUC. Reverting changes.
Training on augumented user 56712 21/50 current_auc = 0.75
User 56712 AUC after training: 0.75
User 56712 does not improve AUC. Reverting changes.
Training on augumented user 41542 22/50 current_auc = 0.75
User 41542 AUC after training: 0.75
User 41542 does not improve AUC. Reverting changes.
Training on augumented user 8801 23/50 current_auc = 0.75
User 8801 AUC after training: 0.75
User 8801 does not improve AUC. Reverting changes.
Training on augumented user 116123 24/50 current_auc = 0.75
User 116123 AUC after training: 0.75
User 116123 does not improve AUC. Reverting changes.
Training on augumented user 77124 25/50 current_auc = 0.75
User 77124 AUC after training: 0.75
User 77124 does not improve AUC. Reverting changes.
Training on augumented user 126124 26/50 current_auc = 0.75
User 126124 AUC after training: 0.75
User 126124 does not improve AUC. Reverting changes.
Training on augumented user 118557 27/50 current_auc = 0.75
User 118557 AUC after training: 0.75
User 118557 does not improve AUC. Reverting changes.
Training on augumented user 70795 28/50 current_auc = 0.75
User 70795 AUC after training: 0.75
User 70795 does not improve AUC. Reverting changes.
Training on augumented user 57064 29/50 current_auc = 0.75
User 57064 AUC after training: 0.75
User 57064 does not improve AUC. Reverting changes.
Training on augumented user 6620 30/50 current_auc = 0.75
User 6620 AUC after training: 0.75
User 6620 does not improve AUC. Reverting changes.
Training on augumented user 130076 31/50 current_auc = 0.75
User 130076 AUC after training: 0.75
User 130076 does not improve AUC. Reverting changes.
Training on augumented user 121257 32/50 current_auc = 0.75
User 121257 AUC after training: 0.75
User 121257 does not improve AUC. Reverting changes.
Training on augumented user 64783 33/50 current_auc = 0.75
User 64783 AUC after training: 0.75
User 64783 does not improve AUC. Reverting changes.
Training on augumented user 78485 34/50 current_auc = 0.75
User 78485 AUC after training: 0.75
User 78485 does not improve AUC. Reverting changes.
Training on augumented user 59143 35/50 current_auc = 0.75
User 59143 AUC after training: 0.75
User 59143 does not improve AUC. Reverting changes.
Training on augumented user 49577 36/50 current_auc = 0.75
User 49577 AUC after training: 0.75
User 49577 does not improve AUC. Reverting changes.
Training on augumented user 78985 37/50 current_auc = 0.75
User 78985 AUC after training: 0.75
User 78985 does not improve AUC. Reverting changes.
Training on augumented user 72269 38/50 current_auc = 0.75
User 72269 AUC after training: 0.75
User 72269 does not improve AUC. Reverting changes.
Training on augumented user 67956 39/50 current_auc = 0.75
User 67956 AUC after training: 0.75
User 67956 does not improve AUC. Reverting changes.
Training on augumented user 4267 40/50 current_auc = 0.75
User 4267 AUC after training: 0.75
User 4267 does not improve AUC. Reverting changes.
Training on augumented user 56402 41/50 current_auc = 0.75
User 56402 AUC after training: 0.75
User 56402 does not improve AUC. Reverting changes.
Training on augumented user 131947 42/50 current_auc = 0.75
User 131947 AUC after training: 0.75
User 131947 does not improve AUC. Reverting changes.
Training on augumented user 3381 43/50 current_auc = 0.75
User 3381 AUC after training: 0.75
User 3381 does not improve AUC. Reverting changes.
Training on augumented user 91728 44/50 current_auc = 0.75
User 91728 AUC after training: 0.75
User 91728 does not improve AUC. Reverting changes.
Training on augumented user 33797 45/50 current_auc = 0.75
User 33797 AUC after training: 0.75
User 33797 does not improve AUC. Reverting changes.
Training on augumented user 25785 46/50 current_auc = 0.75
User 25785 AUC after training: 0.75
User 25785 does not improve AUC. Reverting changes.
Training on augumented user 5568 47/50 current_auc = 0.75
User 5568 AUC after training: 0.75
User 5568 does not improve AUC. Reverting changes.
Training on augumented user 93064 48/50 current_auc = 0.75
User 93064 AUC after training: 0.75
User 93064 does not improve AUC. Reverting changes.
Training on augumented user 3824 49/50 current_auc = 0.75
User 3824 AUC after training: 0.75
User 3824 does not improve AUC. Reverting changes.
[2024-12-02 18:53:18.118028] start test user 30272 130/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:18.584635] start test user 30272 130/568 recall augumented users by random, augumented_users = [27033, 51397, 86804, 105236, 115567, 98507, 114839, 108513, 96509, 10461, 125522, 91560, 138227, 109934, 46948, 66289, 28192, 16759, 93729, 85392, 133933, 23466, 129909, 17042, 76125, 33987, 123693, 32254, 132788, 16427, 34860, 137932, 31163, 105160, 25134, 80020, 27684, 74180, 71152, 14839, 2259, 126225, 71690, 114925, 17611, 32186, 78016, 30815, 12384, 76851]
[2024-12-02 18:53:18.603363] user = 30272 Cloud 130/568
[2024-12-02 18:53:18.619971] user = 30272 Local 130/568
[2024-12-02 18:53:18.663150] user = 30272 Local+ 130/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:20.882376] user = 30272 MPDA- 130/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6992481203007519
Training on augumented user 27033 0/50 current_auc = 0.6992481203007519
User 27033 AUC after training: 0.6992481203007519
User 27033 does not improve AUC. Reverting changes.
Training on augumented user 51397 1/50 current_auc = 0.6992481203007519
User 51397 AUC after training: 0.6992481203007519
User 51397 does not improve AUC. Reverting changes.
Training on augumented user 86804 2/50 current_auc = 0.6992481203007519
User 86804 AUC after training: 0.7001879699248121
User 86804 improves AUC. Keeping the model.
Training on augumented user 105236 3/50 current_auc = 0.7001879699248121
User 105236 AUC after training: 0.6992481203007519
User 105236 does not improve AUC. Reverting changes.
Training on augumented user 115567 4/50 current_auc = 0.7001879699248121
User 115567 AUC after training: 0.7001879699248121
User 115567 does not improve AUC. Reverting changes.
Training on augumented user 98507 5/50 current_auc = 0.7001879699248121
User 98507 AUC after training: 0.7011278195488722
User 98507 improves AUC. Keeping the model.
Training on augumented user 114839 6/50 current_auc = 0.7011278195488722
User 114839 AUC after training: 0.6983082706766918
User 114839 does not improve AUC. Reverting changes.
Training on augumented user 108513 7/50 current_auc = 0.7011278195488722
User 108513 AUC after training: 0.6992481203007519
User 108513 does not improve AUC. Reverting changes.
Training on augumented user 96509 8/50 current_auc = 0.7011278195488722
User 96509 AUC after training: 0.6992481203007519
User 96509 does not improve AUC. Reverting changes.
Training on augumented user 10461 9/50 current_auc = 0.7011278195488722
User 10461 AUC after training: 0.7001879699248121
User 10461 does not improve AUC. Reverting changes.
Training on augumented user 125522 10/50 current_auc = 0.7011278195488722
User 125522 AUC after training: 0.7011278195488722
User 125522 does not improve AUC. Reverting changes.
Training on augumented user 91560 11/50 current_auc = 0.7011278195488722
User 91560 AUC after training: 0.700187969924812
User 91560 does not improve AUC. Reverting changes.
Training on augumented user 138227 12/50 current_auc = 0.7011278195488722
User 138227 AUC after training: 0.7001879699248121
User 138227 does not improve AUC. Reverting changes.
Training on augumented user 109934 13/50 current_auc = 0.7011278195488722
User 109934 AUC after training: 0.6983082706766917
User 109934 does not improve AUC. Reverting changes.
Training on augumented user 46948 14/50 current_auc = 0.7011278195488722
User 46948 AUC after training: 0.6992481203007519
User 46948 does not improve AUC. Reverting changes.
Training on augumented user 66289 15/50 current_auc = 0.7011278195488722
User 66289 AUC after training: 0.6992481203007519
User 66289 does not improve AUC. Reverting changes.
Training on augumented user 28192 16/50 current_auc = 0.7011278195488722
User 28192 AUC after training: 0.7020676691729324
User 28192 improves AUC. Keeping the model.
Training on augumented user 16759 17/50 current_auc = 0.7020676691729324
User 16759 AUC after training: 0.7011278195488722
User 16759 does not improve AUC. Reverting changes.
Training on augumented user 93729 18/50 current_auc = 0.7020676691729324
User 93729 AUC after training: 0.700187969924812
User 93729 does not improve AUC. Reverting changes.
Training on augumented user 85392 19/50 current_auc = 0.7020676691729324
User 85392 AUC after training: 0.7011278195488722
User 85392 does not improve AUC. Reverting changes.
Training on augumented user 133933 20/50 current_auc = 0.7020676691729324
User 133933 AUC after training: 0.700187969924812
User 133933 does not improve AUC. Reverting changes.
Training on augumented user 23466 21/50 current_auc = 0.7020676691729324
User 23466 AUC after training: 0.7011278195488722
User 23466 does not improve AUC. Reverting changes.
Training on augumented user 129909 22/50 current_auc = 0.7020676691729324
User 129909 AUC after training: 0.7011278195488722
User 129909 does not improve AUC. Reverting changes.
Training on augumented user 17042 23/50 current_auc = 0.7020676691729324
User 17042 AUC after training: 0.6973684210526316
User 17042 does not improve AUC. Reverting changes.
Training on augumented user 76125 24/50 current_auc = 0.7020676691729324
User 76125 AUC after training: 0.700187969924812
User 76125 does not improve AUC. Reverting changes.
Training on augumented user 33987 25/50 current_auc = 0.7020676691729324
User 33987 AUC after training: 0.7020676691729324
User 33987 does not improve AUC. Reverting changes.
Training on augumented user 123693 26/50 current_auc = 0.7020676691729324
User 123693 AUC after training: 0.7020676691729324
User 123693 does not improve AUC. Reverting changes.
Training on augumented user 32254 27/50 current_auc = 0.7020676691729324
User 32254 AUC after training: 0.7011278195488722
User 32254 does not improve AUC. Reverting changes.
Training on augumented user 132788 28/50 current_auc = 0.7020676691729324
User 132788 AUC after training: 0.7011278195488722
User 132788 does not improve AUC. Reverting changes.
Training on augumented user 16427 29/50 current_auc = 0.7020676691729324
User 16427 AUC after training: 0.700187969924812
User 16427 does not improve AUC. Reverting changes.
Training on augumented user 34860 30/50 current_auc = 0.7020676691729324
User 34860 AUC after training: 0.7001879699248121
User 34860 does not improve AUC. Reverting changes.
Training on augumented user 137932 31/50 current_auc = 0.7020676691729324
User 137932 AUC after training: 0.700187969924812
User 137932 does not improve AUC. Reverting changes.
Training on augumented user 31163 32/50 current_auc = 0.7020676691729324
User 31163 AUC after training: 0.7011278195488722
User 31163 does not improve AUC. Reverting changes.
Training on augumented user 105160 33/50 current_auc = 0.7020676691729324
User 105160 AUC after training: 0.7011278195488722
User 105160 does not improve AUC. Reverting changes.
Training on augumented user 25134 34/50 current_auc = 0.7020676691729324
User 25134 AUC after training: 0.7030075187969925
User 25134 improves AUC. Keeping the model.
Training on augumented user 80020 35/50 current_auc = 0.7030075187969925
User 80020 AUC after training: 0.7048872180451128
User 80020 improves AUC. Keeping the model.
Training on augumented user 27684 36/50 current_auc = 0.7048872180451128
User 27684 AUC after training: 0.7048872180451128
User 27684 does not improve AUC. Reverting changes.
Training on augumented user 74180 37/50 current_auc = 0.7048872180451128
User 74180 AUC after training: 0.7039473684210527
User 74180 does not improve AUC. Reverting changes.
Training on augumented user 71152 38/50 current_auc = 0.7048872180451128
User 71152 AUC after training: 0.7039473684210527
User 71152 does not improve AUC. Reverting changes.
Training on augumented user 14839 39/50 current_auc = 0.7048872180451128
User 14839 AUC after training: 0.7048872180451128
User 14839 does not improve AUC. Reverting changes.
Training on augumented user 2259 40/50 current_auc = 0.7048872180451128
User 2259 AUC after training: 0.7039473684210527
User 2259 does not improve AUC. Reverting changes.
Training on augumented user 126225 41/50 current_auc = 0.7048872180451128
User 126225 AUC after training: 0.7048872180451128
User 126225 does not improve AUC. Reverting changes.
Training on augumented user 71690 42/50 current_auc = 0.7048872180451128
User 71690 AUC after training: 0.7048872180451128
User 71690 does not improve AUC. Reverting changes.
Training on augumented user 114925 43/50 current_auc = 0.7048872180451128
User 114925 AUC after training: 0.7048872180451128
User 114925 does not improve AUC. Reverting changes.
Training on augumented user 17611 44/50 current_auc = 0.7048872180451128
User 17611 AUC after training: 0.7030075187969924
User 17611 does not improve AUC. Reverting changes.
Training on augumented user 32186 45/50 current_auc = 0.7048872180451128
User 32186 AUC after training: 0.7048872180451128
User 32186 does not improve AUC. Reverting changes.
Training on augumented user 78016 46/50 current_auc = 0.7048872180451128
User 78016 AUC after training: 0.7039473684210527
User 78016 does not improve AUC. Reverting changes.
Training on augumented user 30815 47/50 current_auc = 0.7048872180451128
User 30815 AUC after training: 0.7039473684210527
User 30815 does not improve AUC. Reverting changes.
Training on augumented user 12384 48/50 current_auc = 0.7048872180451128
User 12384 AUC after training: 0.7058270676691729
User 12384 improves AUC. Keeping the model.
Training on augumented user 76851 49/50 current_auc = 0.7058270676691729
User 76851 AUC after training: 0.7048872180451128
User 76851 does not improve AUC. Reverting changes.
[2024-12-02 18:53:51.268660] start test user 30303 131/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:51.910276] start test user 30303 131/568 recall augumented users by random, augumented_users = [46509, 13643, 24277, 87273, 26951, 54251, 53963, 80266, 71722, 50565, 6033, 96521, 104768, 80741, 103734, 10151, 49618, 113419, 68749, 113158, 77094, 110803, 130328, 49827, 74925, 64593, 45695, 26121, 123743, 1720, 124842, 15901, 90873, 107024, 62593, 34165, 83467, 136459, 51800, 85562, 35471, 128834, 36748, 41414, 34617, 75265, 46682, 117705, 26891, 132731]
[2024-12-02 18:53:51.924704] user = 30303 Cloud 131/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:53:51.930679] user = 30303 Local 131/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:53:52.036475] user = 30303 Local+ 131/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:53:55.147346] user = 30303 MPDA- 131/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 46509 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46509 AUC after training: 0.5
User 46509 does not improve AUC. Reverting changes.
Training on augumented user 13643 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13643 AUC after training: 0.5
User 13643 does not improve AUC. Reverting changes.
Training on augumented user 24277 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24277 AUC after training: 0.5
User 24277 does not improve AUC. Reverting changes.
Training on augumented user 87273 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87273 AUC after training: 0.5
User 87273 does not improve AUC. Reverting changes.
Training on augumented user 26951 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26951 AUC after training: 0.5
User 26951 does not improve AUC. Reverting changes.
Training on augumented user 54251 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54251 AUC after training: 0.5
User 54251 does not improve AUC. Reverting changes.
Training on augumented user 53963 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53963 AUC after training: 0.5
User 53963 does not improve AUC. Reverting changes.
Training on augumented user 80266 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80266 AUC after training: 0.5
User 80266 does not improve AUC. Reverting changes.
Training on augumented user 71722 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71722 AUC after training: 0.5
User 71722 does not improve AUC. Reverting changes.
Training on augumented user 50565 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50565 AUC after training: 0.5
User 50565 does not improve AUC. Reverting changes.
Training on augumented user 6033 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6033 AUC after training: 0.5
User 6033 does not improve AUC. Reverting changes.
Training on augumented user 96521 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96521 AUC after training: 0.5
User 96521 does not improve AUC. Reverting changes.
Training on augumented user 104768 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104768 AUC after training: 0.5
User 104768 does not improve AUC. Reverting changes.
Training on augumented user 80741 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80741 AUC after training: 0.5
User 80741 does not improve AUC. Reverting changes.
Training on augumented user 103734 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103734 AUC after training: 0.5
User 103734 does not improve AUC. Reverting changes.
Training on augumented user 10151 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10151 AUC after training: 0.5
User 10151 does not improve AUC. Reverting changes.
Training on augumented user 49618 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49618 AUC after training: 0.5
User 49618 does not improve AUC. Reverting changes.
Training on augumented user 113419 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113419 AUC after training: 0.5
User 113419 does not improve AUC. Reverting changes.
Training on augumented user 68749 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68749 AUC after training: 0.5
User 68749 does not improve AUC. Reverting changes.
Training on augumented user 113158 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113158 AUC after training: 0.5
User 113158 does not improve AUC. Reverting changes.
Training on augumented user 77094 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77094 AUC after training: 0.5
User 77094 does not improve AUC. Reverting changes.
Training on augumented user 110803 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110803 AUC after training: 0.5
User 110803 does not improve AUC. Reverting changes.
Training on augumented user 130328 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130328 AUC after training: 0.5
User 130328 does not improve AUC. Reverting changes.
Training on augumented user 49827 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49827 AUC after training: 0.5
User 49827 does not improve AUC. Reverting changes.
Training on augumented user 74925 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74925 AUC after training: 0.5
User 74925 does not improve AUC. Reverting changes.
Training on augumented user 64593 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64593 AUC after training: 0.5
User 64593 does not improve AUC. Reverting changes.
Training on augumented user 45695 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45695 AUC after training: 0.5
User 45695 does not improve AUC. Reverting changes.
Training on augumented user 26121 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26121 AUC after training: 0.5
User 26121 does not improve AUC. Reverting changes.
Training on augumented user 123743 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123743 AUC after training: 0.5
User 123743 does not improve AUC. Reverting changes.
Training on augumented user 1720 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1720 AUC after training: 0.5
User 1720 does not improve AUC. Reverting changes.
Training on augumented user 124842 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124842 AUC after training: 0.5
User 124842 does not improve AUC. Reverting changes.
Training on augumented user 15901 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15901 AUC after training: 0.5
User 15901 does not improve AUC. Reverting changes.
Training on augumented user 90873 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90873 AUC after training: 0.5
User 90873 does not improve AUC. Reverting changes.
Training on augumented user 107024 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107024 AUC after training: 0.5
User 107024 does not improve AUC. Reverting changes.
Training on augumented user 62593 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62593 AUC after training: 0.5
User 62593 does not improve AUC. Reverting changes.
Training on augumented user 34165 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34165 AUC after training: 0.5
User 34165 does not improve AUC. Reverting changes.
Training on augumented user 83467 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83467 AUC after training: 0.5
User 83467 does not improve AUC. Reverting changes.
Training on augumented user 136459 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136459 AUC after training: 0.5
User 136459 does not improve AUC. Reverting changes.
Training on augumented user 51800 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51800 AUC after training: 0.5
User 51800 does not improve AUC. Reverting changes.
Training on augumented user 85562 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85562 AUC after training: 0.5
User 85562 does not improve AUC. Reverting changes.
Training on augumented user 35471 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35471 AUC after training: 0.5
User 35471 does not improve AUC. Reverting changes.
Training on augumented user 128834 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128834 AUC after training: 0.5
User 128834 does not improve AUC. Reverting changes.
Training on augumented user 36748 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36748 AUC after training: 0.5
User 36748 does not improve AUC. Reverting changes.
Training on augumented user 41414 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41414 AUC after training: 0.5
User 41414 does not improve AUC. Reverting changes.
Training on augumented user 34617 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34617 AUC after training: 0.5
User 34617 does not improve AUC. Reverting changes.
Training on augumented user 75265 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75265 AUC after training: 0.5
User 75265 does not improve AUC. Reverting changes.
Training on augumented user 46682 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46682 AUC after training: 0.5
User 46682 does not improve AUC. Reverting changes.
Training on augumented user 117705 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117705 AUC after training: 0.5
User 117705 does not improve AUC. Reverting changes.
Training on augumented user 26891 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26891 AUC after training: 0.5
User 26891 does not improve AUC. Reverting changes.
Training on augumented user 132731 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132731 AUC after training: 0.5
User 132731 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:54:24.664220] start test user 30322 132/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:25.323632] start test user 30322 132/568 recall augumented users by random, augumented_users = [104010, 51516, 106951, 39413, 22201, 73743, 101690, 50243, 61807, 125899, 38773, 10948, 42922, 40554, 51753, 43483, 56953, 89978, 138249, 42594, 28942, 48813, 648, 107825, 62055, 64175, 13152, 40928, 137720, 84431, 49706, 101625, 129999, 107743, 100331, 72418, 66956, 108294, 59247, 84983, 38294, 107228, 27532, 6493, 40970, 53660, 49655, 30366, 49791, 1375]
[2024-12-02 18:54:25.338318] user = 30322 Cloud 132/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:54:25.346586] user = 30322 Local 132/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:54:25.434236] user = 30322 Local+ 132/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:54:28.343571] user = 30322 MPDA- 132/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 104010 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104010 AUC after training: 0.5
User 104010 does not improve AUC. Reverting changes.
Training on augumented user 51516 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51516 AUC after training: 0.5
User 51516 does not improve AUC. Reverting changes.
Training on augumented user 106951 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106951 AUC after training: 0.5
User 106951 does not improve AUC. Reverting changes.
Training on augumented user 39413 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39413 AUC after training: 0.5
User 39413 does not improve AUC. Reverting changes.
Training on augumented user 22201 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22201 AUC after training: 0.5
User 22201 does not improve AUC. Reverting changes.
Training on augumented user 73743 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73743 AUC after training: 0.5
User 73743 does not improve AUC. Reverting changes.
Training on augumented user 101690 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101690 AUC after training: 0.5
User 101690 does not improve AUC. Reverting changes.
Training on augumented user 50243 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50243 AUC after training: 0.5
User 50243 does not improve AUC. Reverting changes.
Training on augumented user 61807 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61807 AUC after training: 0.5
User 61807 does not improve AUC. Reverting changes.
Training on augumented user 125899 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125899 AUC after training: 0.5
User 125899 does not improve AUC. Reverting changes.
Training on augumented user 38773 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38773 AUC after training: 0.5
User 38773 does not improve AUC. Reverting changes.
Training on augumented user 10948 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10948 AUC after training: 0.5
User 10948 does not improve AUC. Reverting changes.
Training on augumented user 42922 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42922 AUC after training: 0.5
User 42922 does not improve AUC. Reverting changes.
Training on augumented user 40554 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40554 AUC after training: 0.5
User 40554 does not improve AUC. Reverting changes.
Training on augumented user 51753 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51753 AUC after training: 0.5
User 51753 does not improve AUC. Reverting changes.
Training on augumented user 43483 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43483 AUC after training: 0.5
User 43483 does not improve AUC. Reverting changes.
Training on augumented user 56953 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56953 AUC after training: 0.5
User 56953 does not improve AUC. Reverting changes.
Training on augumented user 89978 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89978 AUC after training: 0.5
User 89978 does not improve AUC. Reverting changes.
Training on augumented user 138249 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138249 AUC after training: 0.5
User 138249 does not improve AUC. Reverting changes.
Training on augumented user 42594 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42594 AUC after training: 0.5
User 42594 does not improve AUC. Reverting changes.
Training on augumented user 28942 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28942 AUC after training: 0.5
User 28942 does not improve AUC. Reverting changes.
Training on augumented user 48813 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48813 AUC after training: 0.5
User 48813 does not improve AUC. Reverting changes.
Training on augumented user 648 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 648 AUC after training: 0.5
User 648 does not improve AUC. Reverting changes.
Training on augumented user 107825 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107825 AUC after training: 0.5
User 107825 does not improve AUC. Reverting changes.
Training on augumented user 62055 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62055 AUC after training: 0.5
User 62055 does not improve AUC. Reverting changes.
Training on augumented user 64175 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64175 AUC after training: 0.5
User 64175 does not improve AUC. Reverting changes.
Training on augumented user 13152 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13152 AUC after training: 0.5
User 13152 does not improve AUC. Reverting changes.
Training on augumented user 40928 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40928 AUC after training: 0.5
User 40928 does not improve AUC. Reverting changes.
Training on augumented user 137720 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137720 AUC after training: 0.5
User 137720 does not improve AUC. Reverting changes.
Training on augumented user 84431 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84431 AUC after training: 0.5
User 84431 does not improve AUC. Reverting changes.
Training on augumented user 49706 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49706 AUC after training: 0.5
User 49706 does not improve AUC. Reverting changes.
Training on augumented user 101625 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101625 AUC after training: 0.5
User 101625 does not improve AUC. Reverting changes.
Training on augumented user 129999 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129999 AUC after training: 0.5
User 129999 does not improve AUC. Reverting changes.
Training on augumented user 107743 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107743 AUC after training: 0.5
User 107743 does not improve AUC. Reverting changes.
Training on augumented user 100331 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100331 AUC after training: 0.5
User 100331 does not improve AUC. Reverting changes.
Training on augumented user 72418 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72418 AUC after training: 0.5
User 72418 does not improve AUC. Reverting changes.
Training on augumented user 66956 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66956 AUC after training: 0.5
User 66956 does not improve AUC. Reverting changes.
Training on augumented user 108294 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108294 AUC after training: 0.5
User 108294 does not improve AUC. Reverting changes.
Training on augumented user 59247 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59247 AUC after training: 0.5
User 59247 does not improve AUC. Reverting changes.
Training on augumented user 84983 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84983 AUC after training: 0.5
User 84983 does not improve AUC. Reverting changes.
Training on augumented user 38294 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38294 AUC after training: 0.5
User 38294 does not improve AUC. Reverting changes.
Training on augumented user 107228 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107228 AUC after training: 0.5
User 107228 does not improve AUC. Reverting changes.
Training on augumented user 27532 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27532 AUC after training: 0.5
User 27532 does not improve AUC. Reverting changes.
Training on augumented user 6493 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6493 AUC after training: 0.5
User 6493 does not improve AUC. Reverting changes.
Training on augumented user 40970 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40970 AUC after training: 0.5
User 40970 does not improve AUC. Reverting changes.
Training on augumented user 53660 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53660 AUC after training: 0.5
User 53660 does not improve AUC. Reverting changes.
Training on augumented user 49655 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49655 AUC after training: 0.5
User 49655 does not improve AUC. Reverting changes.
Training on augumented user 30366 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30366 AUC after training: 0.5
User 30366 does not improve AUC. Reverting changes.
Training on augumented user 49791 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49791 AUC after training: 0.5
User 49791 does not improve AUC. Reverting changes.
Training on augumented user 1375 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1375 AUC after training: 0.5
User 1375 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:54:56.727230] start test user 30360 133/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:57.341742] start test user 30360 133/568 recall augumented users by random, augumented_users = [87831, 70493, 113106, 5935, 38839, 52793, 123435, 33329, 44034, 25192, 70531, 70700, 23910, 37753, 36432, 123803, 1574, 38073, 23786, 39940, 77011, 113114, 128455, 74956, 99769, 67630, 82607, 78946, 93382, 90879, 34200, 76026, 48155, 27455, 11163, 52832, 6313, 10301, 46751, 100108, 49894, 127026, 135835, 126745, 34937, 14092, 61317, 31795, 71975, 80794]
[2024-12-02 18:54:57.356810] user = 30360 Cloud 133/568
[2024-12-02 18:54:57.373139] user = 30360 Local 133/568
[2024-12-02 18:54:57.406563] user = 30360 Local+ 133/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:59.952737] user = 30360 MPDA- 133/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6971677559912854
Training on augumented user 87831 0/50 current_auc = 0.6971677559912854
User 87831 AUC after training: 0.6979847494553377
User 87831 improves AUC. Keeping the model.
Training on augumented user 70493 1/50 current_auc = 0.6979847494553377
User 70493 AUC after training: 0.6977124183006536
User 70493 does not improve AUC. Reverting changes.
Training on augumented user 113106 2/50 current_auc = 0.6979847494553377
User 113106 AUC after training: 0.6974400871459696
User 113106 does not improve AUC. Reverting changes.
Training on augumented user 5935 3/50 current_auc = 0.6979847494553377
User 5935 AUC after training: 0.6979847494553377
User 5935 does not improve AUC. Reverting changes.
Training on augumented user 38839 4/50 current_auc = 0.6979847494553377
User 38839 AUC after training: 0.6979847494553377
User 38839 does not improve AUC. Reverting changes.
Training on augumented user 52793 5/50 current_auc = 0.6979847494553377
User 52793 AUC after training: 0.6982570806100219
User 52793 improves AUC. Keeping the model.
Training on augumented user 123435 6/50 current_auc = 0.6982570806100219
User 123435 AUC after training: 0.6977124183006536
User 123435 does not improve AUC. Reverting changes.
Training on augumented user 33329 7/50 current_auc = 0.6982570806100219
User 33329 AUC after training: 0.6974400871459695
User 33329 does not improve AUC. Reverting changes.
Training on augumented user 44034 8/50 current_auc = 0.6982570806100219
User 44034 AUC after training: 0.6968954248366013
User 44034 does not improve AUC. Reverting changes.
Training on augumented user 25192 9/50 current_auc = 0.6982570806100219
User 25192 AUC after training: 0.6982570806100218
User 25192 does not improve AUC. Reverting changes.
Training on augumented user 70531 10/50 current_auc = 0.6982570806100219
User 70531 AUC after training: 0.6974400871459695
User 70531 does not improve AUC. Reverting changes.
Training on augumented user 70700 11/50 current_auc = 0.6982570806100219
User 70700 AUC after training: 0.6979847494553377
User 70700 does not improve AUC. Reverting changes.
Training on augumented user 23910 12/50 current_auc = 0.6982570806100219
User 23910 AUC after training: 0.6982570806100219
User 23910 does not improve AUC. Reverting changes.
Training on augumented user 37753 13/50 current_auc = 0.6982570806100219
User 37753 AUC after training: 0.6979847494553377
User 37753 does not improve AUC. Reverting changes.
Training on augumented user 36432 14/50 current_auc = 0.6982570806100219
User 36432 AUC after training: 0.6963507625272332
User 36432 does not improve AUC. Reverting changes.
Training on augumented user 123803 15/50 current_auc = 0.6982570806100219
User 123803 AUC after training: 0.6977124183006536
User 123803 does not improve AUC. Reverting changes.
Training on augumented user 1574 16/50 current_auc = 0.6982570806100219
User 1574 AUC after training: 0.6974400871459695
User 1574 does not improve AUC. Reverting changes.
Training on augumented user 38073 17/50 current_auc = 0.6982570806100219
User 38073 AUC after training: 0.6982570806100219
User 38073 does not improve AUC. Reverting changes.
Training on augumented user 23786 18/50 current_auc = 0.6982570806100219
User 23786 AUC after training: 0.6979847494553377
User 23786 does not improve AUC. Reverting changes.
Training on augumented user 39940 19/50 current_auc = 0.6982570806100219
User 39940 AUC after training: 0.6974400871459696
User 39940 does not improve AUC. Reverting changes.
Training on augumented user 77011 20/50 current_auc = 0.6982570806100219
User 77011 AUC after training: 0.696078431372549
User 77011 does not improve AUC. Reverting changes.
Training on augumented user 113114 21/50 current_auc = 0.6982570806100219
User 113114 AUC after training: 0.6968954248366013
User 113114 does not improve AUC. Reverting changes.
Training on augumented user 128455 22/50 current_auc = 0.6982570806100219
User 128455 AUC after training: 0.6977124183006536
User 128455 does not improve AUC. Reverting changes.
Training on augumented user 74956 23/50 current_auc = 0.6982570806100219
User 74956 AUC after training: 0.6958061002178649
User 74956 does not improve AUC. Reverting changes.
Training on augumented user 99769 24/50 current_auc = 0.6982570806100219
User 99769 AUC after training: 0.6971677559912854
User 99769 does not improve AUC. Reverting changes.
Training on augumented user 67630 25/50 current_auc = 0.6982570806100219
User 67630 AUC after training: 0.69880174291939
User 67630 improves AUC. Keeping the model.
Training on augumented user 82607 26/50 current_auc = 0.69880174291939
User 82607 AUC after training: 0.6996187363834423
User 82607 improves AUC. Keeping the model.
Training on augumented user 78946 27/50 current_auc = 0.6996187363834423
User 78946 AUC after training: 0.6990740740740741
User 78946 does not improve AUC. Reverting changes.
Training on augumented user 93382 28/50 current_auc = 0.6996187363834423
User 93382 AUC after training: 0.6993464052287581
User 93382 does not improve AUC. Reverting changes.
Training on augumented user 90879 29/50 current_auc = 0.6996187363834423
User 90879 AUC after training: 0.6982570806100218
User 90879 does not improve AUC. Reverting changes.
Training on augumented user 34200 30/50 current_auc = 0.6996187363834423
User 34200 AUC after training: 0.6993464052287581
User 34200 does not improve AUC. Reverting changes.
Training on augumented user 76026 31/50 current_auc = 0.6996187363834423
User 76026 AUC after training: 0.696350762527233
User 76026 does not improve AUC. Reverting changes.
Training on augumented user 48155 32/50 current_auc = 0.6996187363834423
User 48155 AUC after training: 0.6990740740740741
User 48155 does not improve AUC. Reverting changes.
Training on augumented user 27455 33/50 current_auc = 0.6996187363834423
User 27455 AUC after training: 0.6996187363834423
User 27455 does not improve AUC. Reverting changes.
Training on augumented user 11163 34/50 current_auc = 0.6996187363834423
User 11163 AUC after training: 0.6985294117647058
User 11163 does not improve AUC. Reverting changes.
Training on augumented user 52832 35/50 current_auc = 0.6996187363834423
User 52832 AUC after training: 0.6993464052287582
User 52832 does not improve AUC. Reverting changes.
Training on augumented user 6313 36/50 current_auc = 0.6996187363834423
User 6313 AUC after training: 0.69880174291939
User 6313 does not improve AUC. Reverting changes.
Training on augumented user 10301 37/50 current_auc = 0.6996187363834423
User 10301 AUC after training: 0.6974400871459695
User 10301 does not improve AUC. Reverting changes.
Training on augumented user 46751 38/50 current_auc = 0.6996187363834423
User 46751 AUC after training: 0.6982570806100218
User 46751 does not improve AUC. Reverting changes.
Training on augumented user 100108 39/50 current_auc = 0.6996187363834423
User 100108 AUC after training: 0.6990740740740741
User 100108 does not improve AUC. Reverting changes.
Training on augumented user 49894 40/50 current_auc = 0.6996187363834423
User 49894 AUC after training: 0.69880174291939
User 49894 does not improve AUC. Reverting changes.
Training on augumented user 127026 41/50 current_auc = 0.6996187363834423
User 127026 AUC after training: 0.69880174291939
User 127026 does not improve AUC. Reverting changes.
Training on augumented user 135835 42/50 current_auc = 0.6996187363834423
User 135835 AUC after training: 0.6982570806100218
User 135835 does not improve AUC. Reverting changes.
Training on augumented user 126745 43/50 current_auc = 0.6996187363834423
User 126745 AUC after training: 0.6990740740740742
User 126745 does not improve AUC. Reverting changes.
Training on augumented user 34937 44/50 current_auc = 0.6996187363834423
User 34937 AUC after training: 0.6985294117647058
User 34937 does not improve AUC. Reverting changes.
Training on augumented user 14092 45/50 current_auc = 0.6996187363834423
User 14092 AUC after training: 0.6990740740740741
User 14092 does not improve AUC. Reverting changes.
Training on augumented user 61317 46/50 current_auc = 0.6996187363834423
User 61317 AUC after training: 0.6996187363834423
User 61317 does not improve AUC. Reverting changes.
Training on augumented user 31795 47/50 current_auc = 0.6996187363834423
User 31795 AUC after training: 0.6966230936819172
User 31795 does not improve AUC. Reverting changes.
Training on augumented user 71975 48/50 current_auc = 0.6996187363834423
User 71975 AUC after training: 0.6993464052287581
User 71975 does not improve AUC. Reverting changes.
Training on augumented user 80794 49/50 current_auc = 0.6996187363834423
User 80794 AUC after training: 0.6982570806100219
User 80794 does not improve AUC. Reverting changes.
[2024-12-02 18:55:35.535275] start test user 30412 134/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:35.976858] start test user 30412 134/568 recall augumented users by random, augumented_users = [126039, 30440, 34057, 37995, 132521, 69800, 104404, 93532, 10715, 63397, 136039, 38287, 103501, 86548, 61594, 16462, 57721, 24029, 8823, 42074, 49166, 66138, 86805, 33629, 74770, 103640, 43016, 37510, 5189, 93423, 130902, 50292, 98597, 55236, 128097, 114522, 119086, 93957, 93169, 132493, 10624, 68955, 76694, 62887, 47767, 56811, 38758, 30562, 102064, 11390]
[2024-12-02 18:55:35.999282] user = 30412 Cloud 134/568
[2024-12-02 18:55:36.016890] user = 30412 Local 134/568
[2024-12-02 18:55:36.107671] user = 30412 Local+ 134/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:38.151622] user = 30412 MPDA- 134/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6280906593406593
Training on augumented user 126039 0/50 current_auc = 0.6280906593406593
User 126039 AUC after training: 0.6270604395604396
User 126039 does not improve AUC. Reverting changes.
Training on augumented user 30440 1/50 current_auc = 0.6280906593406593
User 30440 AUC after training: 0.6280906593406593
User 30440 does not improve AUC. Reverting changes.
Training on augumented user 34057 2/50 current_auc = 0.6280906593406593
User 34057 AUC after training: 0.6294642857142857
User 34057 improves AUC. Keeping the model.
Training on augumented user 37995 3/50 current_auc = 0.6294642857142857
User 37995 AUC after training: 0.6284340659340659
User 37995 does not improve AUC. Reverting changes.
Training on augumented user 132521 4/50 current_auc = 0.6294642857142857
User 132521 AUC after training: 0.6287774725274725
User 132521 does not improve AUC. Reverting changes.
Training on augumented user 69800 5/50 current_auc = 0.6294642857142857
User 69800 AUC after training: 0.6287774725274725
User 69800 does not improve AUC. Reverting changes.
Training on augumented user 104404 6/50 current_auc = 0.6294642857142857
User 104404 AUC after training: 0.6280906593406593
User 104404 does not improve AUC. Reverting changes.
Training on augumented user 93532 7/50 current_auc = 0.6294642857142857
User 93532 AUC after training: 0.6291208791208791
User 93532 does not improve AUC. Reverting changes.
Training on augumented user 10715 8/50 current_auc = 0.6294642857142857
User 10715 AUC after training: 0.6274038461538461
User 10715 does not improve AUC. Reverting changes.
Training on augumented user 63397 9/50 current_auc = 0.6294642857142857
User 63397 AUC after training: 0.6287774725274725
User 63397 does not improve AUC. Reverting changes.
Training on augumented user 136039 10/50 current_auc = 0.6294642857142857
User 136039 AUC after training: 0.6280906593406593
User 136039 does not improve AUC. Reverting changes.
Training on augumented user 38287 11/50 current_auc = 0.6294642857142857
User 38287 AUC after training: 0.6280906593406593
User 38287 does not improve AUC. Reverting changes.
Training on augumented user 103501 12/50 current_auc = 0.6294642857142857
User 103501 AUC after training: 0.6294642857142858
User 103501 improves AUC. Keeping the model.
Training on augumented user 86548 13/50 current_auc = 0.6294642857142858
User 86548 AUC after training: 0.6311813186813187
User 86548 improves AUC. Keeping the model.
Training on augumented user 61594 14/50 current_auc = 0.6311813186813187
User 61594 AUC after training: 0.6311813186813187
User 61594 does not improve AUC. Reverting changes.
Training on augumented user 16462 15/50 current_auc = 0.6311813186813187
User 16462 AUC after training: 0.6294642857142857
User 16462 does not improve AUC. Reverting changes.
Training on augumented user 57721 16/50 current_auc = 0.6311813186813187
User 57721 AUC after training: 0.6298076923076923
User 57721 does not improve AUC. Reverting changes.
Training on augumented user 24029 17/50 current_auc = 0.6311813186813187
User 24029 AUC after training: 0.6291208791208791
User 24029 does not improve AUC. Reverting changes.
Training on augumented user 8823 18/50 current_auc = 0.6311813186813187
User 8823 AUC after training: 0.6311813186813187
User 8823 does not improve AUC. Reverting changes.
Training on augumented user 42074 19/50 current_auc = 0.6311813186813187
User 42074 AUC after training: 0.6308379120879121
User 42074 does not improve AUC. Reverting changes.
Training on augumented user 49166 20/50 current_auc = 0.6311813186813187
User 49166 AUC after training: 0.6315247252747253
User 49166 improves AUC. Keeping the model.
Training on augumented user 66138 21/50 current_auc = 0.6315247252747253
User 66138 AUC after training: 0.6301510989010989
User 66138 does not improve AUC. Reverting changes.
Training on augumented user 86805 22/50 current_auc = 0.6315247252747253
User 86805 AUC after training: 0.6298076923076923
User 86805 does not improve AUC. Reverting changes.
Training on augumented user 33629 23/50 current_auc = 0.6315247252747253
User 33629 AUC after training: 0.6318681318681318
User 33629 improves AUC. Keeping the model.
Training on augumented user 74770 24/50 current_auc = 0.6318681318681318
User 74770 AUC after training: 0.6315247252747253
User 74770 does not improve AUC. Reverting changes.
Training on augumented user 103640 25/50 current_auc = 0.6318681318681318
User 103640 AUC after training: 0.6318681318681318
User 103640 does not improve AUC. Reverting changes.
Training on augumented user 43016 26/50 current_auc = 0.6318681318681318
User 43016 AUC after training: 0.6311813186813187
User 43016 does not improve AUC. Reverting changes.
Training on augumented user 37510 27/50 current_auc = 0.6318681318681318
User 37510 AUC after training: 0.6315247252747253
User 37510 does not improve AUC. Reverting changes.
Training on augumented user 5189 28/50 current_auc = 0.6318681318681318
User 5189 AUC after training: 0.6315247252747253
User 5189 does not improve AUC. Reverting changes.
Training on augumented user 93423 29/50 current_auc = 0.6318681318681318
User 93423 AUC after training: 0.6322115384615385
User 93423 improves AUC. Keeping the model.
Training on augumented user 130902 30/50 current_auc = 0.6322115384615385
User 130902 AUC after training: 0.6318681318681318
User 130902 does not improve AUC. Reverting changes.
Training on augumented user 50292 31/50 current_auc = 0.6322115384615385
User 50292 AUC after training: 0.6311813186813187
User 50292 does not improve AUC. Reverting changes.
Training on augumented user 98597 32/50 current_auc = 0.6322115384615385
User 98597 AUC after training: 0.6349587912087912
User 98597 improves AUC. Keeping the model.
Training on augumented user 55236 33/50 current_auc = 0.6349587912087912
User 55236 AUC after training: 0.6335851648351649
User 55236 does not improve AUC. Reverting changes.
Training on augumented user 128097 34/50 current_auc = 0.6349587912087912
User 128097 AUC after training: 0.6353021978021978
User 128097 improves AUC. Keeping the model.
Training on augumented user 114522 35/50 current_auc = 0.6353021978021978
User 114522 AUC after training: 0.6349587912087913
User 114522 does not improve AUC. Reverting changes.
Training on augumented user 119086 36/50 current_auc = 0.6353021978021978
User 119086 AUC after training: 0.6356456043956045
User 119086 improves AUC. Keeping the model.
Training on augumented user 93957 37/50 current_auc = 0.6356456043956045
User 93957 AUC after training: 0.635989010989011
User 93957 improves AUC. Keeping the model.
Training on augumented user 93169 38/50 current_auc = 0.635989010989011
User 93169 AUC after training: 0.6353021978021978
User 93169 does not improve AUC. Reverting changes.
Training on augumented user 132493 39/50 current_auc = 0.635989010989011
User 132493 AUC after training: 0.6349587912087913
User 132493 does not improve AUC. Reverting changes.
Training on augumented user 10624 40/50 current_auc = 0.635989010989011
User 10624 AUC after training: 0.6346153846153846
User 10624 does not improve AUC. Reverting changes.
Training on augumented user 68955 41/50 current_auc = 0.635989010989011
User 68955 AUC after training: 0.6332417582417582
User 68955 does not improve AUC. Reverting changes.
Training on augumented user 76694 42/50 current_auc = 0.635989010989011
User 76694 AUC after training: 0.635989010989011
User 76694 does not improve AUC. Reverting changes.
Training on augumented user 62887 43/50 current_auc = 0.635989010989011
User 62887 AUC after training: 0.632554945054945
User 62887 does not improve AUC. Reverting changes.
Training on augumented user 47767 44/50 current_auc = 0.635989010989011
User 47767 AUC after training: 0.6353021978021978
User 47767 does not improve AUC. Reverting changes.
Training on augumented user 56811 45/50 current_auc = 0.635989010989011
User 56811 AUC after training: 0.6349587912087912
User 56811 does not improve AUC. Reverting changes.
Training on augumented user 38758 46/50 current_auc = 0.635989010989011
User 38758 AUC after training: 0.6353021978021978
User 38758 does not improve AUC. Reverting changes.
Training on augumented user 30562 47/50 current_auc = 0.635989010989011
User 30562 AUC after training: 0.6346153846153846
User 30562 does not improve AUC. Reverting changes.
Training on augumented user 102064 48/50 current_auc = 0.635989010989011
User 102064 AUC after training: 0.6356456043956044
User 102064 does not improve AUC. Reverting changes.
Training on augumented user 11390 49/50 current_auc = 0.635989010989011
User 11390 AUC after training: 0.6356456043956045
User 11390 does not improve AUC. Reverting changes.
[2024-12-02 18:56:08.286205] start test user 30437 135/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:08.710256] start test user 30437 135/568 recall augumented users by random, augumented_users = [20205, 83748, 43716, 52987, 135898, 85953, 54551, 64801, 84782, 36984, 6697, 34406, 29243, 125624, 21944, 28173, 8891, 8616, 63526, 98297, 10979, 27602, 90466, 121792, 87858, 46798, 29425, 28475, 9199, 114327, 71562, 64091, 75341, 74760, 125050, 91609, 125087, 111765, 124248, 92158, 82602, 119951, 99600, 2334, 9579, 2278, 49808, 125036, 35979, 100347]
[2024-12-02 18:56:08.725240] user = 30437 Cloud 135/568
[2024-12-02 18:56:08.744649] user = 30437 Local 135/568
[2024-12-02 18:56:08.785685] user = 30437 Local+ 135/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:10.874892] user = 30437 MPDA- 135/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.38636363636363635
Training on augumented user 20205 0/50 current_auc = 0.38636363636363635
User 20205 AUC after training: 0.38636363636363635
User 20205 does not improve AUC. Reverting changes.
Training on augumented user 83748 1/50 current_auc = 0.38636363636363635
User 83748 AUC after training: 0.36363636363636365
User 83748 does not improve AUC. Reverting changes.
Training on augumented user 43716 2/50 current_auc = 0.38636363636363635
User 43716 AUC after training: 0.40909090909090906
User 43716 improves AUC. Keeping the model.
Training on augumented user 52987 3/50 current_auc = 0.40909090909090906
User 52987 AUC after training: 0.38636363636363635
User 52987 does not improve AUC. Reverting changes.
Training on augumented user 135898 4/50 current_auc = 0.40909090909090906
User 135898 AUC after training: 0.38636363636363635
User 135898 does not improve AUC. Reverting changes.
Training on augumented user 85953 5/50 current_auc = 0.40909090909090906
User 85953 AUC after training: 0.38636363636363635
User 85953 does not improve AUC. Reverting changes.
Training on augumented user 54551 6/50 current_auc = 0.40909090909090906
User 54551 AUC after training: 0.40909090909090906
User 54551 does not improve AUC. Reverting changes.
Training on augumented user 64801 7/50 current_auc = 0.40909090909090906
User 64801 AUC after training: 0.40909090909090906
User 64801 does not improve AUC. Reverting changes.
Training on augumented user 84782 8/50 current_auc = 0.40909090909090906
User 84782 AUC after training: 0.40909090909090906
User 84782 does not improve AUC. Reverting changes.
Training on augumented user 36984 9/50 current_auc = 0.40909090909090906
User 36984 AUC after training: 0.40909090909090906
User 36984 does not improve AUC. Reverting changes.
Training on augumented user 6697 10/50 current_auc = 0.40909090909090906
User 6697 AUC after training: 0.40909090909090906
User 6697 does not improve AUC. Reverting changes.
Training on augumented user 34406 11/50 current_auc = 0.40909090909090906
User 34406 AUC after training: 0.38636363636363635
User 34406 does not improve AUC. Reverting changes.
Training on augumented user 29243 12/50 current_auc = 0.40909090909090906
User 29243 AUC after training: 0.38636363636363635
User 29243 does not improve AUC. Reverting changes.
Training on augumented user 125624 13/50 current_auc = 0.40909090909090906
User 125624 AUC after training: 0.40909090909090906
User 125624 does not improve AUC. Reverting changes.
Training on augumented user 21944 14/50 current_auc = 0.40909090909090906
User 21944 AUC after training: 0.40909090909090906
User 21944 does not improve AUC. Reverting changes.
Training on augumented user 28173 15/50 current_auc = 0.40909090909090906
User 28173 AUC after training: 0.40909090909090906
User 28173 does not improve AUC. Reverting changes.
Training on augumented user 8891 16/50 current_auc = 0.40909090909090906
User 8891 AUC after training: 0.38636363636363635
User 8891 does not improve AUC. Reverting changes.
Training on augumented user 8616 17/50 current_auc = 0.40909090909090906
User 8616 AUC after training: 0.40909090909090906
User 8616 does not improve AUC. Reverting changes.
Training on augumented user 63526 18/50 current_auc = 0.40909090909090906
User 63526 AUC after training: 0.38636363636363635
User 63526 does not improve AUC. Reverting changes.
Training on augumented user 98297 19/50 current_auc = 0.40909090909090906
User 98297 AUC after training: 0.38636363636363635
User 98297 does not improve AUC. Reverting changes.
Training on augumented user 10979 20/50 current_auc = 0.40909090909090906
User 10979 AUC after training: 0.40909090909090906
User 10979 does not improve AUC. Reverting changes.
Training on augumented user 27602 21/50 current_auc = 0.40909090909090906
User 27602 AUC after training: 0.38636363636363635
User 27602 does not improve AUC. Reverting changes.
Training on augumented user 90466 22/50 current_auc = 0.40909090909090906
User 90466 AUC after training: 0.40909090909090906
User 90466 does not improve AUC. Reverting changes.
Training on augumented user 121792 23/50 current_auc = 0.40909090909090906
User 121792 AUC after training: 0.38636363636363635
User 121792 does not improve AUC. Reverting changes.
Training on augumented user 87858 24/50 current_auc = 0.40909090909090906
User 87858 AUC after training: 0.38636363636363635
User 87858 does not improve AUC. Reverting changes.
Training on augumented user 46798 25/50 current_auc = 0.40909090909090906
User 46798 AUC after training: 0.40909090909090906
User 46798 does not improve AUC. Reverting changes.
Training on augumented user 29425 26/50 current_auc = 0.40909090909090906
User 29425 AUC after training: 0.38636363636363635
User 29425 does not improve AUC. Reverting changes.
Training on augumented user 28475 27/50 current_auc = 0.40909090909090906
User 28475 AUC after training: 0.38636363636363635
User 28475 does not improve AUC. Reverting changes.
Training on augumented user 9199 28/50 current_auc = 0.40909090909090906
User 9199 AUC after training: 0.38636363636363635
User 9199 does not improve AUC. Reverting changes.
Training on augumented user 114327 29/50 current_auc = 0.40909090909090906
User 114327 AUC after training: 0.40909090909090906
User 114327 does not improve AUC. Reverting changes.
Training on augumented user 71562 30/50 current_auc = 0.40909090909090906
User 71562 AUC after training: 0.40909090909090906
User 71562 does not improve AUC. Reverting changes.
Training on augumented user 64091 31/50 current_auc = 0.40909090909090906
User 64091 AUC after training: 0.40909090909090906
User 64091 does not improve AUC. Reverting changes.
Training on augumented user 75341 32/50 current_auc = 0.40909090909090906
User 75341 AUC after training: 0.40909090909090906
User 75341 does not improve AUC. Reverting changes.
Training on augumented user 74760 33/50 current_auc = 0.40909090909090906
User 74760 AUC after training: 0.38636363636363635
User 74760 does not improve AUC. Reverting changes.
Training on augumented user 125050 34/50 current_auc = 0.40909090909090906
User 125050 AUC after training: 0.40909090909090906
User 125050 does not improve AUC. Reverting changes.
Training on augumented user 91609 35/50 current_auc = 0.40909090909090906
User 91609 AUC after training: 0.38636363636363635
User 91609 does not improve AUC. Reverting changes.
Training on augumented user 125087 36/50 current_auc = 0.40909090909090906
User 125087 AUC after training: 0.40909090909090906
User 125087 does not improve AUC. Reverting changes.
Training on augumented user 111765 37/50 current_auc = 0.40909090909090906
User 111765 AUC after training: 0.38636363636363635
User 111765 does not improve AUC. Reverting changes.
Training on augumented user 124248 38/50 current_auc = 0.40909090909090906
User 124248 AUC after training: 0.38636363636363635
User 124248 does not improve AUC. Reverting changes.
Training on augumented user 92158 39/50 current_auc = 0.40909090909090906
User 92158 AUC after training: 0.38636363636363635
User 92158 does not improve AUC. Reverting changes.
Training on augumented user 82602 40/50 current_auc = 0.40909090909090906
User 82602 AUC after training: 0.40909090909090906
User 82602 does not improve AUC. Reverting changes.
Training on augumented user 119951 41/50 current_auc = 0.40909090909090906
User 119951 AUC after training: 0.40909090909090906
User 119951 does not improve AUC. Reverting changes.
Training on augumented user 99600 42/50 current_auc = 0.40909090909090906
User 99600 AUC after training: 0.40909090909090906
User 99600 does not improve AUC. Reverting changes.
Training on augumented user 2334 43/50 current_auc = 0.40909090909090906
User 2334 AUC after training: 0.40909090909090906
User 2334 does not improve AUC. Reverting changes.
Training on augumented user 9579 44/50 current_auc = 0.40909090909090906
User 9579 AUC after training: 0.36363636363636365
User 9579 does not improve AUC. Reverting changes.
Training on augumented user 2278 45/50 current_auc = 0.40909090909090906
User 2278 AUC after training: 0.40909090909090906
User 2278 does not improve AUC. Reverting changes.
Training on augumented user 49808 46/50 current_auc = 0.40909090909090906
User 49808 AUC after training: 0.38636363636363635
User 49808 does not improve AUC. Reverting changes.
Training on augumented user 125036 47/50 current_auc = 0.40909090909090906
User 125036 AUC after training: 0.38636363636363635
User 125036 does not improve AUC. Reverting changes.
Training on augumented user 35979 48/50 current_auc = 0.40909090909090906
User 35979 AUC after training: 0.40909090909090906
User 35979 does not improve AUC. Reverting changes.
Training on augumented user 100347 49/50 current_auc = 0.40909090909090906
User 100347 AUC after training: 0.40909090909090906
User 100347 does not improve AUC. Reverting changes.
[2024-12-02 18:56:40.861889] start test user 30447 136/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:41.262378] start test user 30447 136/568 recall augumented users by random, augumented_users = [5657, 137603, 50674, 4160, 126374, 42512, 113649, 33920, 56527, 42962, 70546, 20046, 32087, 104678, 109511, 82852, 137610, 124937, 110063, 16909, 41357, 109229, 73529, 38364, 20626, 54394, 71476, 70965, 81771, 132444, 70288, 12068, 108790, 60722, 60593, 114265, 110848, 80681, 82904, 73051, 125168, 112523, 35715, 15483, 18350, 30853, 108618, 9431, 92842, 18119]
[2024-12-02 18:56:41.277482] user = 30447 Cloud 136/568
[2024-12-02 18:56:41.289129] user = 30447 Local 136/568
[2024-12-02 18:56:41.350960] user = 30447 Local+ 136/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:43.167798] user = 30447 MPDA- 136/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.567741935483871
Training on augumented user 5657 0/50 current_auc = 0.567741935483871
User 5657 AUC after training: 0.5612903225806452
User 5657 does not improve AUC. Reverting changes.
Training on augumented user 137603 1/50 current_auc = 0.567741935483871
User 137603 AUC after training: 0.5741935483870968
User 137603 improves AUC. Keeping the model.
Training on augumented user 50674 2/50 current_auc = 0.5741935483870968
User 50674 AUC after training: 0.5709677419354838
User 50674 does not improve AUC. Reverting changes.
Training on augumented user 4160 3/50 current_auc = 0.5741935483870968
User 4160 AUC after training: 0.5709677419354838
User 4160 does not improve AUC. Reverting changes.
Training on augumented user 126374 4/50 current_auc = 0.5741935483870968
User 126374 AUC after training: 0.5677419354838709
User 126374 does not improve AUC. Reverting changes.
Training on augumented user 42512 5/50 current_auc = 0.5741935483870968
User 42512 AUC after training: 0.5774193548387097
User 42512 improves AUC. Keeping the model.
Training on augumented user 113649 6/50 current_auc = 0.5774193548387097
User 113649 AUC after training: 0.5741935483870968
User 113649 does not improve AUC. Reverting changes.
Training on augumented user 33920 7/50 current_auc = 0.5774193548387097
User 33920 AUC after training: 0.5774193548387097
User 33920 does not improve AUC. Reverting changes.
Training on augumented user 56527 8/50 current_auc = 0.5774193548387097
User 56527 AUC after training: 0.5774193548387097
User 56527 does not improve AUC. Reverting changes.
Training on augumented user 42962 9/50 current_auc = 0.5774193548387097
User 42962 AUC after training: 0.5741935483870967
User 42962 does not improve AUC. Reverting changes.
Training on augumented user 70546 10/50 current_auc = 0.5774193548387097
User 70546 AUC after training: 0.5774193548387097
User 70546 does not improve AUC. Reverting changes.
Training on augumented user 20046 11/50 current_auc = 0.5774193548387097
User 20046 AUC after training: 0.5806451612903225
User 20046 improves AUC. Keeping the model.
Training on augumented user 32087 12/50 current_auc = 0.5806451612903225
User 32087 AUC after training: 0.5806451612903225
User 32087 does not improve AUC. Reverting changes.
Training on augumented user 104678 13/50 current_auc = 0.5806451612903225
User 104678 AUC after training: 0.5741935483870968
User 104678 does not improve AUC. Reverting changes.
Training on augumented user 109511 14/50 current_auc = 0.5806451612903225
User 109511 AUC after training: 0.5774193548387097
User 109511 does not improve AUC. Reverting changes.
Training on augumented user 82852 15/50 current_auc = 0.5806451612903225
User 82852 AUC after training: 0.5774193548387097
User 82852 does not improve AUC. Reverting changes.
Training on augumented user 137610 16/50 current_auc = 0.5806451612903225
User 137610 AUC after training: 0.5806451612903225
User 137610 does not improve AUC. Reverting changes.
Training on augumented user 124937 17/50 current_auc = 0.5806451612903225
User 124937 AUC after training: 0.5806451612903225
User 124937 does not improve AUC. Reverting changes.
Training on augumented user 110063 18/50 current_auc = 0.5806451612903225
User 110063 AUC after training: 0.5774193548387097
User 110063 does not improve AUC. Reverting changes.
Training on augumented user 16909 19/50 current_auc = 0.5806451612903225
User 16909 AUC after training: 0.5774193548387097
User 16909 does not improve AUC. Reverting changes.
Training on augumented user 41357 20/50 current_auc = 0.5806451612903225
User 41357 AUC after training: 0.5677419354838709
User 41357 does not improve AUC. Reverting changes.
Training on augumented user 109229 21/50 current_auc = 0.5806451612903225
User 109229 AUC after training: 0.5774193548387097
User 109229 does not improve AUC. Reverting changes.
Training on augumented user 73529 22/50 current_auc = 0.5806451612903225
User 73529 AUC after training: 0.5741935483870968
User 73529 does not improve AUC. Reverting changes.
Training on augumented user 38364 23/50 current_auc = 0.5806451612903225
User 38364 AUC after training: 0.5741935483870968
User 38364 does not improve AUC. Reverting changes.
Training on augumented user 20626 24/50 current_auc = 0.5806451612903225
User 20626 AUC after training: 0.5806451612903225
User 20626 does not improve AUC. Reverting changes.
Training on augumented user 54394 25/50 current_auc = 0.5806451612903225
User 54394 AUC after training: 0.5774193548387097
User 54394 does not improve AUC. Reverting changes.
Training on augumented user 71476 26/50 current_auc = 0.5806451612903225
User 71476 AUC after training: 0.5806451612903225
User 71476 does not improve AUC. Reverting changes.
Training on augumented user 70965 27/50 current_auc = 0.5806451612903225
User 70965 AUC after training: 0.5774193548387097
User 70965 does not improve AUC. Reverting changes.
Training on augumented user 81771 28/50 current_auc = 0.5806451612903225
User 81771 AUC after training: 0.5774193548387097
User 81771 does not improve AUC. Reverting changes.
Training on augumented user 132444 29/50 current_auc = 0.5806451612903225
User 132444 AUC after training: 0.5741935483870968
User 132444 does not improve AUC. Reverting changes.
Training on augumented user 70288 30/50 current_auc = 0.5806451612903225
User 70288 AUC after training: 0.5774193548387097
User 70288 does not improve AUC. Reverting changes.
Training on augumented user 12068 31/50 current_auc = 0.5806451612903225
User 12068 AUC after training: 0.5774193548387097
User 12068 does not improve AUC. Reverting changes.
Training on augumented user 108790 32/50 current_auc = 0.5806451612903225
User 108790 AUC after training: 0.5774193548387097
User 108790 does not improve AUC. Reverting changes.
Training on augumented user 60722 33/50 current_auc = 0.5806451612903225
User 60722 AUC after training: 0.5774193548387097
User 60722 does not improve AUC. Reverting changes.
Training on augumented user 60593 34/50 current_auc = 0.5806451612903225
User 60593 AUC after training: 0.5774193548387097
User 60593 does not improve AUC. Reverting changes.
Training on augumented user 114265 35/50 current_auc = 0.5806451612903225
User 114265 AUC after training: 0.5774193548387097
User 114265 does not improve AUC. Reverting changes.
Training on augumented user 110848 36/50 current_auc = 0.5806451612903225
User 110848 AUC after training: 0.5741935483870968
User 110848 does not improve AUC. Reverting changes.
Training on augumented user 80681 37/50 current_auc = 0.5806451612903225
User 80681 AUC after training: 0.5741935483870968
User 80681 does not improve AUC. Reverting changes.
Training on augumented user 82904 38/50 current_auc = 0.5806451612903225
User 82904 AUC after training: 0.5774193548387097
User 82904 does not improve AUC. Reverting changes.
Training on augumented user 73051 39/50 current_auc = 0.5806451612903225
User 73051 AUC after training: 0.5774193548387097
User 73051 does not improve AUC. Reverting changes.
Training on augumented user 125168 40/50 current_auc = 0.5806451612903225
User 125168 AUC after training: 0.5774193548387097
User 125168 does not improve AUC. Reverting changes.
Training on augumented user 112523 41/50 current_auc = 0.5806451612903225
User 112523 AUC after training: 0.5774193548387097
User 112523 does not improve AUC. Reverting changes.
Training on augumented user 35715 42/50 current_auc = 0.5806451612903225
User 35715 AUC after training: 0.5741935483870968
User 35715 does not improve AUC. Reverting changes.
Training on augumented user 15483 43/50 current_auc = 0.5806451612903225
User 15483 AUC after training: 0.5741935483870967
User 15483 does not improve AUC. Reverting changes.
Training on augumented user 18350 44/50 current_auc = 0.5806451612903225
User 18350 AUC after training: 0.5774193548387097
User 18350 does not improve AUC. Reverting changes.
Training on augumented user 30853 45/50 current_auc = 0.5806451612903225
User 30853 AUC after training: 0.5741935483870968
User 30853 does not improve AUC. Reverting changes.
Training on augumented user 108618 46/50 current_auc = 0.5806451612903225
User 108618 AUC after training: 0.5774193548387097
User 108618 does not improve AUC. Reverting changes.
Training on augumented user 9431 47/50 current_auc = 0.5806451612903225
User 9431 AUC after training: 0.5806451612903225
User 9431 does not improve AUC. Reverting changes.
Training on augumented user 92842 48/50 current_auc = 0.5806451612903225
User 92842 AUC after training: 0.5774193548387097
User 92842 does not improve AUC. Reverting changes.
Training on augumented user 18119 49/50 current_auc = 0.5806451612903225
User 18119 AUC after training: 0.5774193548387097
User 18119 does not improve AUC. Reverting changes.
[2024-12-02 18:57:13.059766] start test user 30497 137/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:13.707377] start test user 30497 137/568 recall augumented users by random, augumented_users = [3982, 88173, 137703, 63375, 107844, 12669, 98758, 25808, 96888, 127273, 62951, 88879, 1523, 29321, 84829, 22418, 38249, 41172, 3294, 39588, 36147, 12756, 118584, 7603, 127318, 15714, 48564, 45640, 24388, 61561, 133971, 129187, 54967, 105808, 63628, 84723, 137483, 23908, 10628, 17324, 130730, 862, 102532, 132453, 135695, 55307, 81150, 98587, 27920, 40261]
[2024-12-02 18:57:13.724794] user = 30497 Cloud 137/568
[2024-12-02 18:57:13.735607] user = 30497 Local 137/568
[2024-12-02 18:57:13.934674] user = 30497 Local+ 137/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:16.042070] user = 30497 MPDA- 137/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5454545454545454
Training on augumented user 3982 0/50 current_auc = 0.5454545454545454
User 3982 AUC after training: 0.5416666666666667
User 3982 does not improve AUC. Reverting changes.
Training on augumented user 88173 1/50 current_auc = 0.5454545454545454
User 88173 AUC after training: 0.5416666666666667
User 88173 does not improve AUC. Reverting changes.
Training on augumented user 137703 2/50 current_auc = 0.5454545454545454
User 137703 AUC after training: 0.5435606060606062
User 137703 does not improve AUC. Reverting changes.
Training on augumented user 63375 3/50 current_auc = 0.5454545454545454
User 63375 AUC after training: 0.5473484848484849
User 63375 improves AUC. Keeping the model.
Training on augumented user 107844 4/50 current_auc = 0.5473484848484849
User 107844 AUC after training: 0.5473484848484849
User 107844 does not improve AUC. Reverting changes.
Training on augumented user 12669 5/50 current_auc = 0.5473484848484849
User 12669 AUC after training: 0.5473484848484849
User 12669 does not improve AUC. Reverting changes.
Training on augumented user 98758 6/50 current_auc = 0.5473484848484849
User 98758 AUC after training: 0.5397727272727273
User 98758 does not improve AUC. Reverting changes.
Training on augumented user 25808 7/50 current_auc = 0.5473484848484849
User 25808 AUC after training: 0.5473484848484849
User 25808 does not improve AUC. Reverting changes.
Training on augumented user 96888 8/50 current_auc = 0.5473484848484849
User 96888 AUC after training: 0.5473484848484849
User 96888 does not improve AUC. Reverting changes.
Training on augumented user 127273 9/50 current_auc = 0.5473484848484849
User 127273 AUC after training: 0.5454545454545455
User 127273 does not improve AUC. Reverting changes.
Training on augumented user 62951 10/50 current_auc = 0.5473484848484849
User 62951 AUC after training: 0.5454545454545455
User 62951 does not improve AUC. Reverting changes.
Training on augumented user 88879 11/50 current_auc = 0.5473484848484849
User 88879 AUC after training: 0.5416666666666667
User 88879 does not improve AUC. Reverting changes.
Training on augumented user 1523 12/50 current_auc = 0.5473484848484849
User 1523 AUC after training: 0.5435606060606061
User 1523 does not improve AUC. Reverting changes.
Training on augumented user 29321 13/50 current_auc = 0.5473484848484849
User 29321 AUC after training: 0.5454545454545455
User 29321 does not improve AUC. Reverting changes.
Training on augumented user 84829 14/50 current_auc = 0.5473484848484849
User 84829 AUC after training: 0.5473484848484849
User 84829 does not improve AUC. Reverting changes.
Training on augumented user 22418 15/50 current_auc = 0.5473484848484849
User 22418 AUC after training: 0.5454545454545455
User 22418 does not improve AUC. Reverting changes.
Training on augumented user 38249 16/50 current_auc = 0.5473484848484849
User 38249 AUC after training: 0.5473484848484849
User 38249 does not improve AUC. Reverting changes.
Training on augumented user 41172 17/50 current_auc = 0.5473484848484849
User 41172 AUC after training: 0.5435606060606061
User 41172 does not improve AUC. Reverting changes.
Training on augumented user 3294 18/50 current_auc = 0.5473484848484849
User 3294 AUC after training: 0.5454545454545455
User 3294 does not improve AUC. Reverting changes.
Training on augumented user 39588 19/50 current_auc = 0.5473484848484849
User 39588 AUC after training: 0.5454545454545455
User 39588 does not improve AUC. Reverting changes.
Training on augumented user 36147 20/50 current_auc = 0.5473484848484849
User 36147 AUC after training: 0.5473484848484849
User 36147 does not improve AUC. Reverting changes.
Training on augumented user 12756 21/50 current_auc = 0.5473484848484849
User 12756 AUC after training: 0.5454545454545455
User 12756 does not improve AUC. Reverting changes.
Training on augumented user 118584 22/50 current_auc = 0.5473484848484849
User 118584 AUC after training: 0.5454545454545455
User 118584 does not improve AUC. Reverting changes.
Training on augumented user 7603 23/50 current_auc = 0.5473484848484849
User 7603 AUC after training: 0.5416666666666667
User 7603 does not improve AUC. Reverting changes.
Training on augumented user 127318 24/50 current_auc = 0.5473484848484849
User 127318 AUC after training: 0.5454545454545455
User 127318 does not improve AUC. Reverting changes.
Training on augumented user 15714 25/50 current_auc = 0.5473484848484849
User 15714 AUC after training: 0.5454545454545454
User 15714 does not improve AUC. Reverting changes.
Training on augumented user 48564 26/50 current_auc = 0.5473484848484849
User 48564 AUC after training: 0.5454545454545455
User 48564 does not improve AUC. Reverting changes.
Training on augumented user 45640 27/50 current_auc = 0.5473484848484849
User 45640 AUC after training: 0.5473484848484849
User 45640 does not improve AUC. Reverting changes.
Training on augumented user 24388 28/50 current_auc = 0.5473484848484849
User 24388 AUC after training: 0.5473484848484849
User 24388 does not improve AUC. Reverting changes.
Training on augumented user 61561 29/50 current_auc = 0.5473484848484849
User 61561 AUC after training: 0.5454545454545454
User 61561 does not improve AUC. Reverting changes.
Training on augumented user 133971 30/50 current_auc = 0.5473484848484849
User 133971 AUC after training: 0.5473484848484849
User 133971 does not improve AUC. Reverting changes.
Training on augumented user 129187 31/50 current_auc = 0.5473484848484849
User 129187 AUC after training: 0.5454545454545455
User 129187 does not improve AUC. Reverting changes.
Training on augumented user 54967 32/50 current_auc = 0.5473484848484849
User 54967 AUC after training: 0.5492424242424243
User 54967 improves AUC. Keeping the model.
Training on augumented user 105808 33/50 current_auc = 0.5492424242424243
User 105808 AUC after training: 0.5473484848484849
User 105808 does not improve AUC. Reverting changes.
Training on augumented user 63628 34/50 current_auc = 0.5492424242424243
User 63628 AUC after training: 0.5454545454545454
User 63628 does not improve AUC. Reverting changes.
Training on augumented user 84723 35/50 current_auc = 0.5492424242424243
User 84723 AUC after training: 0.5473484848484849
User 84723 does not improve AUC. Reverting changes.
Training on augumented user 137483 36/50 current_auc = 0.5492424242424243
User 137483 AUC after training: 0.5473484848484849
User 137483 does not improve AUC. Reverting changes.
Training on augumented user 23908 37/50 current_auc = 0.5492424242424243
User 23908 AUC after training: 0.5473484848484849
User 23908 does not improve AUC. Reverting changes.
Training on augumented user 10628 38/50 current_auc = 0.5492424242424243
User 10628 AUC after training: 0.5473484848484849
User 10628 does not improve AUC. Reverting changes.
Training on augumented user 17324 39/50 current_auc = 0.5492424242424243
User 17324 AUC after training: 0.5454545454545455
User 17324 does not improve AUC. Reverting changes.
Training on augumented user 130730 40/50 current_auc = 0.5492424242424243
User 130730 AUC after training: 0.5492424242424243
User 130730 does not improve AUC. Reverting changes.
Training on augumented user 862 41/50 current_auc = 0.5492424242424243
User 862 AUC after training: 0.5454545454545454
User 862 does not improve AUC. Reverting changes.
Training on augumented user 102532 42/50 current_auc = 0.5492424242424243
User 102532 AUC after training: 0.5454545454545455
User 102532 does not improve AUC. Reverting changes.
Training on augumented user 132453 43/50 current_auc = 0.5492424242424243
User 132453 AUC after training: 0.5473484848484849
User 132453 does not improve AUC. Reverting changes.
Training on augumented user 135695 44/50 current_auc = 0.5492424242424243
User 135695 AUC after training: 0.5454545454545454
User 135695 does not improve AUC. Reverting changes.
Training on augumented user 55307 45/50 current_auc = 0.5492424242424243
User 55307 AUC after training: 0.5435606060606061
User 55307 does not improve AUC. Reverting changes.
Training on augumented user 81150 46/50 current_auc = 0.5492424242424243
User 81150 AUC after training: 0.5416666666666667
User 81150 does not improve AUC. Reverting changes.
Training on augumented user 98587 47/50 current_auc = 0.5492424242424243
User 98587 AUC after training: 0.5454545454545454
User 98587 does not improve AUC. Reverting changes.
Training on augumented user 27920 48/50 current_auc = 0.5492424242424243
User 27920 AUC after training: 0.5454545454545454
User 27920 does not improve AUC. Reverting changes.
Training on augumented user 40261 49/50 current_auc = 0.5492424242424243
User 40261 AUC after training: 0.5454545454545455
User 40261 does not improve AUC. Reverting changes.
[2024-12-02 18:57:47.723825] start test user 30503 138/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:48.196745] start test user 30503 138/568 recall augumented users by random, augumented_users = [111753, 20989, 2363, 103264, 134426, 108555, 102572, 10776, 49381, 3445, 59384, 38401, 6147, 112825, 16342, 108510, 113024, 133043, 31881, 66661, 55893, 106528, 101771, 58104, 40777, 116829, 30948, 115349, 4224, 46421, 114211, 78960, 39931, 88174, 8546, 47949, 58140, 127723, 103655, 92346, 59038, 85822, 46293, 87462, 38909, 95852, 15957, 18994, 11503, 82517]
[2024-12-02 18:57:48.214080] user = 30503 Cloud 138/568
[2024-12-02 18:57:48.239708] user = 30503 Local 138/568
[2024-12-02 18:57:48.386381] user = 30503 Local+ 138/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:50.779139] user = 30503 MPDA- 138/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7241653418124007
Training on augumented user 111753 0/50 current_auc = 0.7241653418124007
User 111753 AUC after training: 0.7273449920508743
User 111753 improves AUC. Keeping the model.
Training on augumented user 20989 1/50 current_auc = 0.7273449920508743
User 20989 AUC after training: 0.7277424483306836
User 20989 improves AUC. Keeping the model.
Training on augumented user 2363 2/50 current_auc = 0.7277424483306836
User 2363 AUC after training: 0.7277424483306836
User 2363 does not improve AUC. Reverting changes.
Training on augumented user 103264 3/50 current_auc = 0.7277424483306836
User 103264 AUC after training: 0.7269475357710652
User 103264 does not improve AUC. Reverting changes.
Training on augumented user 134426 4/50 current_auc = 0.7277424483306836
User 134426 AUC after training: 0.7257551669316376
User 134426 does not improve AUC. Reverting changes.
Training on augumented user 108555 5/50 current_auc = 0.7277424483306836
User 108555 AUC after training: 0.7277424483306836
User 108555 does not improve AUC. Reverting changes.
Training on augumented user 102572 6/50 current_auc = 0.7277424483306836
User 102572 AUC after training: 0.7273449920508743
User 102572 does not improve AUC. Reverting changes.
Training on augumented user 10776 7/50 current_auc = 0.7277424483306836
User 10776 AUC after training: 0.7273449920508743
User 10776 does not improve AUC. Reverting changes.
Training on augumented user 49381 8/50 current_auc = 0.7277424483306836
User 49381 AUC after training: 0.7269475357710651
User 49381 does not improve AUC. Reverting changes.
Training on augumented user 3445 9/50 current_auc = 0.7277424483306836
User 3445 AUC after training: 0.7277424483306836
User 3445 does not improve AUC. Reverting changes.
Training on augumented user 59384 10/50 current_auc = 0.7277424483306836
User 59384 AUC after training: 0.7273449920508743
User 59384 does not improve AUC. Reverting changes.
Training on augumented user 38401 11/50 current_auc = 0.7277424483306836
User 38401 AUC after training: 0.7277424483306836
User 38401 does not improve AUC. Reverting changes.
Training on augumented user 6147 12/50 current_auc = 0.7277424483306836
User 6147 AUC after training: 0.7269475357710652
User 6147 does not improve AUC. Reverting changes.
Training on augumented user 112825 13/50 current_auc = 0.7277424483306836
User 112825 AUC after training: 0.7289348171701113
User 112825 improves AUC. Keeping the model.
Training on augumented user 16342 14/50 current_auc = 0.7289348171701113
User 16342 AUC after training: 0.7293322734499206
User 16342 improves AUC. Keeping the model.
Training on augumented user 108510 15/50 current_auc = 0.7293322734499206
User 108510 AUC after training: 0.7289348171701113
User 108510 does not improve AUC. Reverting changes.
Training on augumented user 113024 16/50 current_auc = 0.7293322734499206
User 113024 AUC after training: 0.7277424483306836
User 113024 does not improve AUC. Reverting changes.
Training on augumented user 133043 17/50 current_auc = 0.7293322734499206
User 133043 AUC after training: 0.7273449920508743
User 133043 does not improve AUC. Reverting changes.
Training on augumented user 31881 18/50 current_auc = 0.7293322734499206
User 31881 AUC after training: 0.7293322734499206
User 31881 does not improve AUC. Reverting changes.
Training on augumented user 66661 19/50 current_auc = 0.7293322734499206
User 66661 AUC after training: 0.7281399046104928
User 66661 does not improve AUC. Reverting changes.
Training on augumented user 55893 20/50 current_auc = 0.7293322734499206
User 55893 AUC after training: 0.7289348171701113
User 55893 does not improve AUC. Reverting changes.
Training on augumented user 106528 21/50 current_auc = 0.7293322734499206
User 106528 AUC after training: 0.7261526232114467
User 106528 does not improve AUC. Reverting changes.
Training on augumented user 101771 22/50 current_auc = 0.7293322734499206
User 101771 AUC after training: 0.7293322734499206
User 101771 does not improve AUC. Reverting changes.
Training on augumented user 58104 23/50 current_auc = 0.7293322734499206
User 58104 AUC after training: 0.7301271860095389
User 58104 improves AUC. Keeping the model.
Training on augumented user 40777 24/50 current_auc = 0.7301271860095389
User 40777 AUC after training: 0.7297297297297297
User 40777 does not improve AUC. Reverting changes.
Training on augumented user 116829 25/50 current_auc = 0.7301271860095389
User 116829 AUC after training: 0.7293322734499205
User 116829 does not improve AUC. Reverting changes.
Training on augumented user 30948 26/50 current_auc = 0.7301271860095389
User 30948 AUC after training: 0.7297297297297297
User 30948 does not improve AUC. Reverting changes.
Training on augumented user 115349 27/50 current_auc = 0.7301271860095389
User 115349 AUC after training: 0.7309220985691575
User 115349 improves AUC. Keeping the model.
Training on augumented user 4224 28/50 current_auc = 0.7309220985691575
User 4224 AUC after training: 0.7293322734499205
User 4224 does not improve AUC. Reverting changes.
Training on augumented user 46421 29/50 current_auc = 0.7309220985691575
User 46421 AUC after training: 0.7301271860095389
User 46421 does not improve AUC. Reverting changes.
Training on augumented user 114211 30/50 current_auc = 0.7309220985691575
User 114211 AUC after training: 0.7289348171701113
User 114211 does not improve AUC. Reverting changes.
Training on augumented user 78960 31/50 current_auc = 0.7309220985691575
User 78960 AUC after training: 0.7297297297297297
User 78960 does not improve AUC. Reverting changes.
Training on augumented user 39931 32/50 current_auc = 0.7309220985691575
User 39931 AUC after training: 0.7309220985691574
User 39931 does not improve AUC. Reverting changes.
Training on augumented user 88174 33/50 current_auc = 0.7309220985691575
User 88174 AUC after training: 0.7289348171701111
User 88174 does not improve AUC. Reverting changes.
Training on augumented user 8546 34/50 current_auc = 0.7309220985691575
User 8546 AUC after training: 0.730127186009539
User 8546 does not improve AUC. Reverting changes.
Training on augumented user 47949 35/50 current_auc = 0.7309220985691575
User 47949 AUC after training: 0.7305246422893481
User 47949 does not improve AUC. Reverting changes.
Training on augumented user 58140 36/50 current_auc = 0.7309220985691575
User 58140 AUC after training: 0.7309220985691574
User 58140 does not improve AUC. Reverting changes.
Training on augumented user 127723 37/50 current_auc = 0.7309220985691575
User 127723 AUC after training: 0.7313195548489666
User 127723 improves AUC. Keeping the model.
Training on augumented user 103655 38/50 current_auc = 0.7313195548489666
User 103655 AUC after training: 0.7309220985691574
User 103655 does not improve AUC. Reverting changes.
Training on augumented user 92346 39/50 current_auc = 0.7313195548489666
User 92346 AUC after training: 0.7317170111287759
User 92346 improves AUC. Keeping the model.
Training on augumented user 59038 40/50 current_auc = 0.7317170111287759
User 59038 AUC after training: 0.7321144674085851
User 59038 improves AUC. Keeping the model.
Training on augumented user 85822 41/50 current_auc = 0.7321144674085851
User 85822 AUC after training: 0.7313195548489666
User 85822 does not improve AUC. Reverting changes.
Training on augumented user 46293 42/50 current_auc = 0.7321144674085851
User 46293 AUC after training: 0.7309220985691574
User 46293 does not improve AUC. Reverting changes.
Training on augumented user 87462 43/50 current_auc = 0.7321144674085851
User 87462 AUC after training: 0.7317170111287759
User 87462 does not improve AUC. Reverting changes.
Training on augumented user 38909 44/50 current_auc = 0.7321144674085851
User 38909 AUC after training: 0.7313195548489666
User 38909 does not improve AUC. Reverting changes.
Training on augumented user 95852 45/50 current_auc = 0.7321144674085851
User 95852 AUC after training: 0.7317170111287759
User 95852 does not improve AUC. Reverting changes.
Training on augumented user 15957 46/50 current_auc = 0.7321144674085851
User 15957 AUC after training: 0.7333068362480126
User 15957 improves AUC. Keeping the model.
Training on augumented user 18994 47/50 current_auc = 0.7333068362480126
User 18994 AUC after training: 0.7329093799682034
User 18994 does not improve AUC. Reverting changes.
Training on augumented user 11503 48/50 current_auc = 0.7333068362480126
User 11503 AUC after training: 0.7313195548489666
User 11503 does not improve AUC. Reverting changes.
Training on augumented user 82517 49/50 current_auc = 0.7333068362480126
User 82517 AUC after training: 0.7325119236883944
User 82517 does not improve AUC. Reverting changes.
[2024-12-02 18:58:18.534050] start test user 30519 139/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:18.953983] start test user 30519 139/568 recall augumented users by random, augumented_users = [37031, 69527, 45875, 132335, 115597, 115367, 74167, 21256, 38573, 307, 62649, 59778, 35157, 49454, 137270, 128055, 94166, 32135, 10258, 13951, 113142, 66886, 72013, 28279, 21952, 87729, 50535, 33164, 47899, 88090, 41959, 72607, 80987, 10543, 17930, 81230, 717, 111273, 36928, 53119, 129069, 95787, 71133, 1146, 66078, 83079, 126934, 101832, 4691, 10015]
[2024-12-02 18:58:18.970218] user = 30519 Cloud 139/568
[2024-12-02 18:58:19.014626] user = 30519 Local 139/568
[2024-12-02 18:58:19.103322] user = 30519 Local+ 139/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:20.894899] user = 30519 MPDA- 139/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7680121228819397
Training on augumented user 37031 0/50 current_auc = 0.7680121228819397
User 37031 AUC after training: 0.7679891628782661
User 37031 does not improve AUC. Reverting changes.
Training on augumented user 69527 1/50 current_auc = 0.7680121228819397
User 69527 AUC after training: 0.7680580428892869
User 69527 improves AUC. Keeping the model.
Training on augumented user 45875 2/50 current_auc = 0.7680580428892869
User 45875 AUC after training: 0.7679432428709189
User 45875 does not improve AUC. Reverting changes.
Training on augumented user 132335 3/50 current_auc = 0.7680580428892869
User 132335 AUC after training: 0.7680121228819397
User 132335 does not improve AUC. Reverting changes.
Training on augumented user 115597 4/50 current_auc = 0.7680580428892869
User 115597 AUC after training: 0.7678284428525509
User 115597 does not improve AUC. Reverting changes.
Training on augumented user 115367 5/50 current_auc = 0.7680580428892869
User 115367 AUC after training: 0.7678514028562244
User 115367 does not improve AUC. Reverting changes.
Training on augumented user 74167 6/50 current_auc = 0.7680580428892869
User 74167 AUC after training: 0.7680121228819397
User 74167 does not improve AUC. Reverting changes.
Training on augumented user 21256 7/50 current_auc = 0.7680580428892869
User 21256 AUC after training: 0.7678514028562244
User 21256 does not improve AUC. Reverting changes.
Training on augumented user 38573 8/50 current_auc = 0.7680580428892869
User 38573 AUC after training: 0.7678973228635717
User 38573 does not improve AUC. Reverting changes.
Training on augumented user 307 9/50 current_auc = 0.7680580428892869
User 307 AUC after training: 0.7680810028929604
User 307 improves AUC. Keeping the model.
Training on augumented user 62649 10/50 current_auc = 0.7680810028929604
User 62649 AUC after training: 0.7679202828672452
User 62649 does not improve AUC. Reverting changes.
Training on augumented user 59778 11/50 current_auc = 0.7680810028929604
User 59778 AUC after training: 0.7680121228819397
User 59778 does not improve AUC. Reverting changes.
Training on augumented user 35157 12/50 current_auc = 0.7680810028929604
User 35157 AUC after training: 0.7681498829039812
User 35157 improves AUC. Keeping the model.
Training on augumented user 49454 13/50 current_auc = 0.7681498829039812
User 49454 AUC after training: 0.768448362951738
User 49454 improves AUC. Keeping the model.
Training on augumented user 137270 14/50 current_auc = 0.768448362951738
User 137270 AUC after training: 0.7684024429443909
User 137270 does not improve AUC. Reverting changes.
Training on augumented user 128055 15/50 current_auc = 0.768448362951738
User 128055 AUC after training: 0.767989162878266
User 128055 does not improve AUC. Reverting changes.
Training on augumented user 94166 16/50 current_auc = 0.768448362951738
User 94166 AUC after training: 0.7680121228819397
User 94166 does not improve AUC. Reverting changes.
Training on augumented user 32135 17/50 current_auc = 0.768448362951738
User 32135 AUC after training: 0.7680121228819397
User 32135 does not improve AUC. Reverting changes.
Training on augumented user 10258 18/50 current_auc = 0.768448362951738
User 10258 AUC after training: 0.7682417229186758
User 10258 does not improve AUC. Reverting changes.
Training on augumented user 13951 19/50 current_auc = 0.768448362951738
User 13951 AUC after training: 0.7682876429260228
User 13951 does not improve AUC. Reverting changes.
Training on augumented user 113142 20/50 current_auc = 0.768448362951738
User 113142 AUC after training: 0.7684254029480645
User 113142 does not improve AUC. Reverting changes.
Training on augumented user 66886 21/50 current_auc = 0.768448362951738
User 66886 AUC after training: 0.7681958029113285
User 66886 does not improve AUC. Reverting changes.
Training on augumented user 72013 22/50 current_auc = 0.768448362951738
User 72013 AUC after training: 0.7679662028745925
User 72013 does not improve AUC. Reverting changes.
Training on augumented user 28279 23/50 current_auc = 0.768448362951738
User 28279 AUC after training: 0.7674381227900997
User 28279 does not improve AUC. Reverting changes.
Training on augumented user 21952 24/50 current_auc = 0.768448362951738
User 21952 AUC after training: 0.7679891628782661
User 21952 does not improve AUC. Reverting changes.
Training on augumented user 87729 25/50 current_auc = 0.768448362951738
User 87729 AUC after training: 0.768218762915002
User 87729 does not improve AUC. Reverting changes.
Training on augumented user 50535 26/50 current_auc = 0.768448362951738
User 50535 AUC after training: 0.7683335629333701
User 50535 does not improve AUC. Reverting changes.
Training on augumented user 33164 27/50 current_auc = 0.768448362951738
User 33164 AUC after training: 0.7680121228819397
User 33164 does not improve AUC. Reverting changes.
Training on augumented user 47899 28/50 current_auc = 0.768448362951738
User 47899 AUC after training: 0.7682646829223494
User 47899 does not improve AUC. Reverting changes.
Training on augumented user 88090 29/50 current_auc = 0.768448362951738
User 88090 AUC after training: 0.7683335629333701
User 88090 does not improve AUC. Reverting changes.
Training on augumented user 41959 30/50 current_auc = 0.768448362951738
User 41959 AUC after training: 0.7677136428341829
User 41959 does not improve AUC. Reverting changes.
Training on augumented user 72607 31/50 current_auc = 0.768448362951738
User 72607 AUC after training: 0.7683335629333701
User 72607 does not improve AUC. Reverting changes.
Training on augumented user 80987 32/50 current_auc = 0.768448362951738
User 80987 AUC after training: 0.7667493226798917
User 80987 does not improve AUC. Reverting changes.
Training on augumented user 10543 33/50 current_auc = 0.768448362951738
User 10543 AUC after training: 0.7685631629701061
User 10543 improves AUC. Keeping the model.
Training on augumented user 17930 34/50 current_auc = 0.7685631629701061
User 17930 AUC after training: 0.7672544427607109
User 17930 does not improve AUC. Reverting changes.
Training on augumented user 81230 35/50 current_auc = 0.7685631629701061
User 81230 AUC after training: 0.7683794829407172
User 81230 does not improve AUC. Reverting changes.
Training on augumented user 717 36/50 current_auc = 0.7685631629701061
User 717 AUC after training: 0.7677595628415301
User 717 does not improve AUC. Reverting changes.
Training on augumented user 111273 37/50 current_auc = 0.7685631629701061
User 111273 AUC after training: 0.7682876429260229
User 111273 does not improve AUC. Reverting changes.
Training on augumented user 36928 38/50 current_auc = 0.7685631629701061
User 36928 AUC after training: 0.7684483629517381
User 36928 does not improve AUC. Reverting changes.
Training on augumented user 53119 39/50 current_auc = 0.7685631629701061
User 53119 AUC after training: 0.7681498829039813
User 53119 does not improve AUC. Reverting changes.
Training on augumented user 129069 40/50 current_auc = 0.7685631629701061
User 129069 AUC after training: 0.7679202828672453
User 129069 does not improve AUC. Reverting changes.
Training on augumented user 95787 41/50 current_auc = 0.7685631629701061
User 95787 AUC after training: 0.7684483629517381
User 95787 does not improve AUC. Reverting changes.
Training on augumented user 71133 42/50 current_auc = 0.7685631629701061
User 71133 AUC after training: 0.76833356293337
User 71133 does not improve AUC. Reverting changes.
Training on augumented user 1146 43/50 current_auc = 0.7685631629701061
User 1146 AUC after training: 0.7685631629701061
User 1146 does not improve AUC. Reverting changes.
Training on augumented user 66078 44/50 current_auc = 0.7685631629701061
User 66078 AUC after training: 0.767989162878266
User 66078 does not improve AUC. Reverting changes.
Training on augumented user 83079 45/50 current_auc = 0.7685631629701061
User 83079 AUC after training: 0.7683106029296966
User 83079 does not improve AUC. Reverting changes.
Training on augumented user 126934 46/50 current_auc = 0.7685631629701061
User 126934 AUC after training: 0.7682417229186757
User 126934 does not improve AUC. Reverting changes.
Training on augumented user 101832 47/50 current_auc = 0.7685631629701061
User 101832 AUC after training: 0.7681269229003077
User 101832 does not improve AUC. Reverting changes.
Training on augumented user 4691 48/50 current_auc = 0.7685631629701061
User 4691 AUC after training: 0.7681498829039813
User 4691 does not improve AUC. Reverting changes.
Training on augumented user 10015 49/50 current_auc = 0.7685631629701061
User 10015 AUC after training: 0.7682876429260228
User 10015 does not improve AUC. Reverting changes.
[2024-12-02 18:58:51.219055] start test user 30607 140/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:51.977891] start test user 30607 140/568 recall augumented users by random, augumented_users = [11386, 104566, 125266, 45426, 110216, 66147, 243, 133465, 130846, 53764, 73459, 138306, 59339, 15643, 94334, 108131, 42328, 55788, 80938, 53991, 100810, 81454, 61933, 4617, 14975, 15413, 108385, 133285, 74302, 67857, 65857, 84008, 109505, 99901, 37536, 16334, 286, 137558, 80420, 45669, 73262, 96067, 133715, 37162, 138241, 72914, 68131, 13218, 12900, 68523]
[2024-12-02 18:58:52.008152] user = 30607 Cloud 140/568
[2024-12-02 18:58:52.019659] user = 30607 Local 140/568
[2024-12-02 18:58:52.127790] user = 30607 Local+ 140/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:54.595882] user = 30607 MPDA- 140/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8304878048780489
Training on augumented user 11386 0/50 current_auc = 0.8304878048780489
User 11386 AUC after training: 0.8304878048780489
User 11386 does not improve AUC. Reverting changes.
Training on augumented user 104566 1/50 current_auc = 0.8304878048780489
User 104566 AUC after training: 0.8292682926829269
User 104566 does not improve AUC. Reverting changes.
Training on augumented user 125266 2/50 current_auc = 0.8304878048780489
User 125266 AUC after training: 0.8304878048780489
User 125266 does not improve AUC. Reverting changes.
Training on augumented user 45426 3/50 current_auc = 0.8304878048780489
User 45426 AUC after training: 0.8304878048780489
User 45426 does not improve AUC. Reverting changes.
Training on augumented user 110216 4/50 current_auc = 0.8304878048780489
User 110216 AUC after training: 0.8304878048780489
User 110216 does not improve AUC. Reverting changes.
Training on augumented user 66147 5/50 current_auc = 0.8304878048780489
User 66147 AUC after training: 0.8304878048780489
User 66147 does not improve AUC. Reverting changes.
Training on augumented user 243 6/50 current_auc = 0.8304878048780489
User 243 AUC after training: 0.8304878048780489
User 243 does not improve AUC. Reverting changes.
Training on augumented user 133465 7/50 current_auc = 0.8304878048780489
User 133465 AUC after training: 0.8292682926829269
User 133465 does not improve AUC. Reverting changes.
Training on augumented user 130846 8/50 current_auc = 0.8304878048780489
User 130846 AUC after training: 0.8304878048780489
User 130846 does not improve AUC. Reverting changes.
Training on augumented user 53764 9/50 current_auc = 0.8304878048780489
User 53764 AUC after training: 0.8304878048780489
User 53764 does not improve AUC. Reverting changes.
Training on augumented user 73459 10/50 current_auc = 0.8304878048780489
User 73459 AUC after training: 0.8304878048780489
User 73459 does not improve AUC. Reverting changes.
Training on augumented user 138306 11/50 current_auc = 0.8304878048780489
User 138306 AUC after training: 0.8292682926829269
User 138306 does not improve AUC. Reverting changes.
Training on augumented user 59339 12/50 current_auc = 0.8304878048780489
User 59339 AUC after training: 0.8292682926829269
User 59339 does not improve AUC. Reverting changes.
Training on augumented user 15643 13/50 current_auc = 0.8304878048780489
User 15643 AUC after training: 0.8304878048780489
User 15643 does not improve AUC. Reverting changes.
Training on augumented user 94334 14/50 current_auc = 0.8304878048780489
User 94334 AUC after training: 0.8304878048780489
User 94334 does not improve AUC. Reverting changes.
Training on augumented user 108131 15/50 current_auc = 0.8304878048780489
User 108131 AUC after training: 0.826829268292683
User 108131 does not improve AUC. Reverting changes.
Training on augumented user 42328 16/50 current_auc = 0.8304878048780489
User 42328 AUC after training: 0.8317073170731708
User 42328 improves AUC. Keeping the model.
Training on augumented user 55788 17/50 current_auc = 0.8317073170731708
User 55788 AUC after training: 0.8304878048780489
User 55788 does not improve AUC. Reverting changes.
Training on augumented user 80938 18/50 current_auc = 0.8317073170731708
User 80938 AUC after training: 0.8292682926829269
User 80938 does not improve AUC. Reverting changes.
Training on augumented user 53991 19/50 current_auc = 0.8317073170731708
User 53991 AUC after training: 0.8317073170731708
User 53991 does not improve AUC. Reverting changes.
Training on augumented user 100810 20/50 current_auc = 0.8317073170731708
User 100810 AUC after training: 0.8292682926829269
User 100810 does not improve AUC. Reverting changes.
Training on augumented user 81454 21/50 current_auc = 0.8317073170731708
User 81454 AUC after training: 0.8304878048780489
User 81454 does not improve AUC. Reverting changes.
Training on augumented user 61933 22/50 current_auc = 0.8317073170731708
User 61933 AUC after training: 0.8304878048780489
User 61933 does not improve AUC. Reverting changes.
Training on augumented user 4617 23/50 current_auc = 0.8317073170731708
User 4617 AUC after training: 0.8292682926829269
User 4617 does not improve AUC. Reverting changes.
Training on augumented user 14975 24/50 current_auc = 0.8317073170731708
User 14975 AUC after training: 0.8304878048780489
User 14975 does not improve AUC. Reverting changes.
Training on augumented user 15413 25/50 current_auc = 0.8317073170731708
User 15413 AUC after training: 0.8304878048780489
User 15413 does not improve AUC. Reverting changes.
Training on augumented user 108385 26/50 current_auc = 0.8317073170731708
User 108385 AUC after training: 0.8317073170731708
User 108385 does not improve AUC. Reverting changes.
Training on augumented user 133285 27/50 current_auc = 0.8317073170731708
User 133285 AUC after training: 0.8317073170731708
User 133285 does not improve AUC. Reverting changes.
Training on augumented user 74302 28/50 current_auc = 0.8317073170731708
User 74302 AUC after training: 0.8292682926829269
User 74302 does not improve AUC. Reverting changes.
Training on augumented user 67857 29/50 current_auc = 0.8317073170731708
User 67857 AUC after training: 0.8304878048780489
User 67857 does not improve AUC. Reverting changes.
Training on augumented user 65857 30/50 current_auc = 0.8317073170731708
User 65857 AUC after training: 0.8317073170731708
User 65857 does not improve AUC. Reverting changes.
Training on augumented user 84008 31/50 current_auc = 0.8317073170731708
User 84008 AUC after training: 0.8292682926829269
User 84008 does not improve AUC. Reverting changes.
Training on augumented user 109505 32/50 current_auc = 0.8317073170731708
User 109505 AUC after training: 0.8317073170731708
User 109505 does not improve AUC. Reverting changes.
Training on augumented user 99901 33/50 current_auc = 0.8317073170731708
User 99901 AUC after training: 0.8292682926829269
User 99901 does not improve AUC. Reverting changes.
Training on augumented user 37536 34/50 current_auc = 0.8317073170731708
User 37536 AUC after training: 0.828048780487805
User 37536 does not improve AUC. Reverting changes.
Training on augumented user 16334 35/50 current_auc = 0.8317073170731708
User 16334 AUC after training: 0.8292682926829269
User 16334 does not improve AUC. Reverting changes.
Training on augumented user 286 36/50 current_auc = 0.8317073170731708
User 286 AUC after training: 0.8304878048780489
User 286 does not improve AUC. Reverting changes.
Training on augumented user 137558 37/50 current_auc = 0.8317073170731708
User 137558 AUC after training: 0.8292682926829269
User 137558 does not improve AUC. Reverting changes.
Training on augumented user 80420 38/50 current_auc = 0.8317073170731708
User 80420 AUC after training: 0.8292682926829269
User 80420 does not improve AUC. Reverting changes.
Training on augumented user 45669 39/50 current_auc = 0.8317073170731708
User 45669 AUC after training: 0.8231707317073171
User 45669 does not improve AUC. Reverting changes.
Training on augumented user 73262 40/50 current_auc = 0.8317073170731708
User 73262 AUC after training: 0.8292682926829269
User 73262 does not improve AUC. Reverting changes.
Training on augumented user 96067 41/50 current_auc = 0.8317073170731708
User 96067 AUC after training: 0.8304878048780489
User 96067 does not improve AUC. Reverting changes.
Training on augumented user 133715 42/50 current_auc = 0.8317073170731708
User 133715 AUC after training: 0.8304878048780489
User 133715 does not improve AUC. Reverting changes.
Training on augumented user 37162 43/50 current_auc = 0.8317073170731708
User 37162 AUC after training: 0.8304878048780489
User 37162 does not improve AUC. Reverting changes.
Training on augumented user 138241 44/50 current_auc = 0.8317073170731708
User 138241 AUC after training: 0.828048780487805
User 138241 does not improve AUC. Reverting changes.
Training on augumented user 72914 45/50 current_auc = 0.8317073170731708
User 72914 AUC after training: 0.8317073170731708
User 72914 does not improve AUC. Reverting changes.
Training on augumented user 68131 46/50 current_auc = 0.8317073170731708
User 68131 AUC after training: 0.828048780487805
User 68131 does not improve AUC. Reverting changes.
Training on augumented user 13218 47/50 current_auc = 0.8317073170731708
User 13218 AUC after training: 0.8292682926829269
User 13218 does not improve AUC. Reverting changes.
Training on augumented user 12900 48/50 current_auc = 0.8317073170731708
User 12900 AUC after training: 0.8304878048780489
User 12900 does not improve AUC. Reverting changes.
Training on augumented user 68523 49/50 current_auc = 0.8317073170731708
User 68523 AUC after training: 0.8304878048780489
User 68523 does not improve AUC. Reverting changes.
[2024-12-02 18:59:22.290481] start test user 30614 141/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:22.721035] start test user 30614 141/568 recall augumented users by random, augumented_users = [94982, 124854, 38547, 127080, 5405, 7976, 13353, 1989, 133690, 101011, 95438, 42002, 69652, 110582, 136769, 38825, 10780, 108127, 126809, 66162, 19977, 124088, 62532, 114274, 5342, 93313, 137395, 41744, 56801, 61931, 21752, 89026, 35293, 121158, 83766, 133713, 108576, 48, 32454, 137624, 98667, 79043, 254, 66347, 56110, 135878, 91384, 12392, 54917, 88400]
[2024-12-02 18:59:22.738747] user = 30614 Cloud 141/568
[2024-12-02 18:59:22.792283] user = 30614 Local 141/568
[2024-12-02 18:59:22.931515] user = 30614 Local+ 141/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:25.416627] user = 30614 MPDA- 141/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6305727815161777
Training on augumented user 94982 0/50 current_auc = 0.6305727815161777
User 94982 AUC after training: 0.630466493674041
User 94982 does not improve AUC. Reverting changes.
Training on augumented user 124854 1/50 current_auc = 0.6305727815161777
User 124854 AUC after training: 0.6301769509316679
User 124854 does not improve AUC. Reverting changes.
Training on augumented user 38547 2/50 current_auc = 0.6305727815161777
User 38547 AUC after training: 0.6302062717157056
User 38547 does not improve AUC. Reverting changes.
Training on augumented user 127080 3/50 current_auc = 0.6305727815161777
User 127080 AUC after training: 0.6290517658442187
User 127080 does not improve AUC. Reverting changes.
Training on augumented user 5405 4/50 current_auc = 0.6305727815161777
User 5405 AUC after training: 0.6302795736758001
User 5405 does not improve AUC. Reverting changes.
Training on augumented user 7976 5/50 current_auc = 0.6305727815161777
User 7976 AUC after training: 0.6299717054434035
User 7976 does not improve AUC. Reverting changes.
Training on augumented user 13353 6/50 current_auc = 0.6305727815161777
User 13353 AUC after training: 0.6293449736845964
User 13353 does not improve AUC. Reverting changes.
Training on augumented user 1989 7/50 current_auc = 0.6305727815161777
User 1989 AUC after training: 0.6304701587720456
User 1989 does not improve AUC. Reverting changes.
Training on augumented user 133690 8/50 current_auc = 0.6305727815161777
User 133690 AUC after training: 0.6304518332820219
User 133690 does not improve AUC. Reverting changes.
Training on augumented user 101011 9/50 current_auc = 0.6305727815161777
User 101011 AUC after training: 0.6300779932855405
User 101011 does not improve AUC. Reverting changes.
Training on augumented user 95438 10/50 current_auc = 0.6305727815161777
User 95438 AUC after training: 0.6302795736758001
User 95438 does not improve AUC. Reverting changes.
Training on augumented user 42002 11/50 current_auc = 0.6305727815161777
User 42002 AUC after training: 0.6300743281875358
User 42002 does not improve AUC. Reverting changes.
Training on augumented user 69652 12/50 current_auc = 0.6305727815161777
User 69652 AUC after training: 0.6299827007374177
User 69652 does not improve AUC. Reverting changes.
Training on augumented user 110582 13/50 current_auc = 0.6305727815161777
User 110582 AUC after training: 0.6298287666212194
User 110582 does not improve AUC. Reverting changes.
Training on augumented user 136769 14/50 current_auc = 0.6305727815161777
User 136769 AUC after training: 0.6300523375995074
User 136769 does not improve AUC. Reverting changes.
Training on augumented user 38825 15/50 current_auc = 0.6305727815161777
User 38825 AUC after training: 0.6301622905396491
User 38825 does not improve AUC. Reverting changes.
Training on augumented user 10780 16/50 current_auc = 0.6305727815161777
User 10780 AUC after training: 0.6308366685725177
User 10780 improves AUC. Keeping the model.
Training on augumented user 108127 17/50 current_auc = 0.6308366685725177
User 108127 AUC after training: 0.6313827681752211
User 108127 improves AUC. Keeping the model.
Training on augumented user 126809 18/50 current_auc = 0.6313827681752211
User 126809 AUC after training: 0.6312068434709944
User 126809 does not improve AUC. Reverting changes.
Training on augumented user 66162 19/50 current_auc = 0.6313827681752211
User 66162 AUC after training: 0.6307926873964609
User 66162 does not improve AUC. Reverting changes.
Training on augumented user 19977 20/50 current_auc = 0.6313827681752211
User 19977 AUC after training: 0.6308733195525649
User 19977 does not improve AUC. Reverting changes.
Training on augumented user 124088 21/50 current_auc = 0.6313827681752211
User 124088 AUC after training: 0.6317822638577355
User 124088 improves AUC. Keeping the model.
Training on augumented user 62532 22/50 current_auc = 0.6317822638577355
User 62532 AUC after training: 0.6300816583835452
User 62532 does not improve AUC. Reverting changes.
Training on augumented user 114274 23/50 current_auc = 0.6317822638577355
User 114274 AUC after training: 0.6309466215126593
User 114274 does not improve AUC. Reverting changes.
Training on augumented user 5342 24/50 current_auc = 0.6317822638577355
User 5342 AUC after training: 0.6306460834762722
User 5342 does not improve AUC. Reverting changes.
Training on augumented user 93313 25/50 current_auc = 0.6317822638577355
User 93313 AUC after training: 0.6317969242497544
User 93313 improves AUC. Keeping the model.
Training on augumented user 137395 26/50 current_auc = 0.6317969242497544
User 137395 AUC after training: 0.6310272536687631
User 137395 does not improve AUC. Reverting changes.
Training on augumented user 41744 27/50 current_auc = 0.6317969242497544
User 41744 AUC after training: 0.6311298764128953
User 41744 does not improve AUC. Reverting changes.
Training on augumented user 56801 28/50 current_auc = 0.6317969242497544
User 56801 AUC after training: 0.6314414097432965
User 56801 does not improve AUC. Reverting changes.
Training on augumented user 61931 29/50 current_auc = 0.6317969242497544
User 61931 AUC after training: 0.6314157540572635
User 61931 does not improve AUC. Reverting changes.
Training on augumented user 21752 30/50 current_auc = 0.6317969242497544
User 21752 AUC after training: 0.6307193854363666
User 21752 does not improve AUC. Reverting changes.
Training on augumented user 89026 31/50 current_auc = 0.6317969242497544
User 89026 AUC after training: 0.6311042207268622
User 89026 does not improve AUC. Reverting changes.
Training on augumented user 35293 32/50 current_auc = 0.6317969242497544
User 35293 AUC after training: 0.6305434607321401
User 35293 does not improve AUC. Reverting changes.
Training on augumented user 121158 33/50 current_auc = 0.6317969242497544
User 121158 AUC after training: 0.6304884842620692
User 121158 does not improve AUC. Reverting changes.
Training on augumented user 83766 34/50 current_auc = 0.6317969242497544
User 83766 AUC after training: 0.631540367389424
User 83766 does not improve AUC. Reverting changes.
Training on augumented user 133713 35/50 current_auc = 0.6317969242497544
User 133713 AUC after training: 0.6311335415109
User 133713 does not improve AUC. Reverting changes.
Training on augumented user 108576 36/50 current_auc = 0.6317969242497544
User 108576 AUC after training: 0.6317529430736979
User 108576 does not improve AUC. Reverting changes.
Training on augumented user 48 37/50 current_auc = 0.6317969242497544
User 48 AUC after training: 0.6315880136634854
User 48 does not improve AUC. Reverting changes.
Training on augumented user 32454 38/50 current_auc = 0.6317969242497544
User 32454 AUC after training: 0.6308366685725177
User 32454 does not improve AUC. Reverting changes.
Training on augumented user 137624 39/50 current_auc = 0.6317969242497544
User 137624 AUC after training: 0.6307560364164138
User 137624 does not improve AUC. Reverting changes.
Training on augumented user 98667 40/50 current_auc = 0.6317969242497544
User 98667 AUC after training: 0.6298764128952808
User 98667 does not improve AUC. Reverting changes.
Training on augumented user 79043 41/50 current_auc = 0.6317969242497544
User 79043 AUC after training: 0.6308000175924705
User 79043 does not improve AUC. Reverting changes.
Training on augumented user 254 42/50 current_auc = 0.6317969242497544
User 254 AUC after training: 0.6302722434797907
User 254 does not improve AUC. Reverting changes.
Training on augumented user 66347 43/50 current_auc = 0.6317969242497544
User 66347 AUC after training: 0.6301256395596019
User 66347 does not improve AUC. Reverting changes.
Training on augumented user 56110 44/50 current_auc = 0.6317969242497544
User 56110 AUC after training: 0.630858659160546
User 56110 does not improve AUC. Reverting changes.
Training on augumented user 135878 45/50 current_auc = 0.6317969242497544
User 135878 AUC after training: 0.6318335752298017
User 135878 improves AUC. Keeping the model.
Training on augumented user 91384 46/50 current_auc = 0.6318335752298017
User 91384 AUC after training: 0.6316429901335562
User 91384 does not improve AUC. Reverting changes.
Training on augumented user 12392 47/50 current_auc = 0.6318335752298017
User 12392 AUC after training: 0.6310199234727537
User 12392 does not improve AUC. Reverting changes.
Training on augumented user 54917 48/50 current_auc = 0.6318335752298017
User 54917 AUC after training: 0.6306680740643005
User 54917 does not improve AUC. Reverting changes.
Training on augumented user 88400 49/50 current_auc = 0.6318335752298017
User 88400 AUC after training: 0.6315476975854334
User 88400 does not improve AUC. Reverting changes.
[2024-12-02 19:00:06.091873] start test user 30620 142/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:06.716023] start test user 30620 142/568 recall augumented users by random, augumented_users = [17033, 109866, 88811, 15328, 113978, 85624, 68824, 13849, 44327, 9050, 130986, 106818, 129166, 48225, 51354, 47231, 72761, 103706, 49512, 105548, 55902, 33105, 97176, 6238, 68982, 110455, 94755, 1190, 130942, 101448, 39300, 66111, 89190, 128726, 44056, 63371, 83445, 1865, 51490, 9151, 4861, 27415, 119730, 69154, 104918, 25732, 127334, 30498, 98486, 93574]
[2024-12-02 19:00:06.740124] user = 30620 Cloud 142/568
[2024-12-02 19:00:06.787942] user = 30620 Local 142/568
[2024-12-02 19:00:07.129902] user = 30620 Local+ 142/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:12.340633] user = 30620 MPDA- 142/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3888888888888889
Training on augumented user 17033 0/50 current_auc = 0.3888888888888889
User 17033 AUC after training: 0.4027777777777778
User 17033 improves AUC. Keeping the model.
Training on augumented user 109866 1/50 current_auc = 0.4027777777777778
User 109866 AUC after training: 0.3888888888888889
User 109866 does not improve AUC. Reverting changes.
Training on augumented user 88811 2/50 current_auc = 0.4027777777777778
User 88811 AUC after training: 0.41666666666666663
User 88811 improves AUC. Keeping the model.
Training on augumented user 15328 3/50 current_auc = 0.41666666666666663
User 15328 AUC after training: 0.4305555555555555
User 15328 improves AUC. Keeping the model.
Training on augumented user 113978 4/50 current_auc = 0.4305555555555555
User 113978 AUC after training: 0.4305555555555555
User 113978 does not improve AUC. Reverting changes.
Training on augumented user 85624 5/50 current_auc = 0.4305555555555555
User 85624 AUC after training: 0.41666666666666663
User 85624 does not improve AUC. Reverting changes.
Training on augumented user 68824 6/50 current_auc = 0.4305555555555555
User 68824 AUC after training: 0.4305555555555555
User 68824 does not improve AUC. Reverting changes.
Training on augumented user 13849 7/50 current_auc = 0.4305555555555555
User 13849 AUC after training: 0.4305555555555556
User 13849 improves AUC. Keeping the model.
Training on augumented user 44327 8/50 current_auc = 0.4305555555555556
User 44327 AUC after training: 0.4305555555555556
User 44327 does not improve AUC. Reverting changes.
Training on augumented user 9050 9/50 current_auc = 0.4305555555555556
User 9050 AUC after training: 0.4305555555555556
User 9050 does not improve AUC. Reverting changes.
Training on augumented user 130986 10/50 current_auc = 0.4305555555555556
User 130986 AUC after training: 0.4305555555555556
User 130986 does not improve AUC. Reverting changes.
Training on augumented user 106818 11/50 current_auc = 0.4305555555555556
User 106818 AUC after training: 0.4305555555555556
User 106818 does not improve AUC. Reverting changes.
Training on augumented user 129166 12/50 current_auc = 0.4305555555555556
User 129166 AUC after training: 0.4305555555555556
User 129166 does not improve AUC. Reverting changes.
Training on augumented user 48225 13/50 current_auc = 0.4305555555555556
User 48225 AUC after training: 0.4444444444444444
User 48225 improves AUC. Keeping the model.
Training on augumented user 51354 14/50 current_auc = 0.4444444444444444
User 51354 AUC after training: 0.4444444444444444
User 51354 does not improve AUC. Reverting changes.
Training on augumented user 47231 15/50 current_auc = 0.4444444444444444
User 47231 AUC after training: 0.4305555555555556
User 47231 does not improve AUC. Reverting changes.
Training on augumented user 72761 16/50 current_auc = 0.4444444444444444
User 72761 AUC after training: 0.4444444444444444
User 72761 does not improve AUC. Reverting changes.
Training on augumented user 103706 17/50 current_auc = 0.4444444444444444
User 103706 AUC after training: 0.4444444444444444
User 103706 does not improve AUC. Reverting changes.
Training on augumented user 49512 18/50 current_auc = 0.4444444444444444
User 49512 AUC after training: 0.41666666666666663
User 49512 does not improve AUC. Reverting changes.
Training on augumented user 105548 19/50 current_auc = 0.4444444444444444
User 105548 AUC after training: 0.4305555555555556
User 105548 does not improve AUC. Reverting changes.
Training on augumented user 55902 20/50 current_auc = 0.4444444444444444
User 55902 AUC after training: 0.4305555555555556
User 55902 does not improve AUC. Reverting changes.
Training on augumented user 33105 21/50 current_auc = 0.4444444444444444
User 33105 AUC after training: 0.4444444444444444
User 33105 does not improve AUC. Reverting changes.
Training on augumented user 97176 22/50 current_auc = 0.4444444444444444
User 97176 AUC after training: 0.4305555555555556
User 97176 does not improve AUC. Reverting changes.
Training on augumented user 6238 23/50 current_auc = 0.4444444444444444
User 6238 AUC after training: 0.4305555555555556
User 6238 does not improve AUC. Reverting changes.
Training on augumented user 68982 24/50 current_auc = 0.4444444444444444
User 68982 AUC after training: 0.4305555555555556
User 68982 does not improve AUC. Reverting changes.
Training on augumented user 110455 25/50 current_auc = 0.4444444444444444
User 110455 AUC after training: 0.4305555555555556
User 110455 does not improve AUC. Reverting changes.
Training on augumented user 94755 26/50 current_auc = 0.4444444444444444
User 94755 AUC after training: 0.4305555555555556
User 94755 does not improve AUC. Reverting changes.
Training on augumented user 1190 27/50 current_auc = 0.4444444444444444
User 1190 AUC after training: 0.4444444444444444
User 1190 does not improve AUC. Reverting changes.
Training on augumented user 130942 28/50 current_auc = 0.4444444444444444
User 130942 AUC after training: 0.4305555555555556
User 130942 does not improve AUC. Reverting changes.
Training on augumented user 101448 29/50 current_auc = 0.4444444444444444
User 101448 AUC after training: 0.4305555555555556
User 101448 does not improve AUC. Reverting changes.
Training on augumented user 39300 30/50 current_auc = 0.4444444444444444
User 39300 AUC after training: 0.4305555555555556
User 39300 does not improve AUC. Reverting changes.
Training on augumented user 66111 31/50 current_auc = 0.4444444444444444
User 66111 AUC after training: 0.4305555555555556
User 66111 does not improve AUC. Reverting changes.
Training on augumented user 89190 32/50 current_auc = 0.4444444444444444
User 89190 AUC after training: 0.4305555555555556
User 89190 does not improve AUC. Reverting changes.
Training on augumented user 128726 33/50 current_auc = 0.4444444444444444
User 128726 AUC after training: 0.4444444444444444
User 128726 does not improve AUC. Reverting changes.
Training on augumented user 44056 34/50 current_auc = 0.4444444444444444
User 44056 AUC after training: 0.4444444444444444
User 44056 does not improve AUC. Reverting changes.
Training on augumented user 63371 35/50 current_auc = 0.4444444444444444
User 63371 AUC after training: 0.4305555555555556
User 63371 does not improve AUC. Reverting changes.
Training on augumented user 83445 36/50 current_auc = 0.4444444444444444
User 83445 AUC after training: 0.4444444444444444
User 83445 does not improve AUC. Reverting changes.
Training on augumented user 1865 37/50 current_auc = 0.4444444444444444
User 1865 AUC after training: 0.4305555555555556
User 1865 does not improve AUC. Reverting changes.
Training on augumented user 51490 38/50 current_auc = 0.4444444444444444
User 51490 AUC after training: 0.4305555555555556
User 51490 does not improve AUC. Reverting changes.
Training on augumented user 9151 39/50 current_auc = 0.4444444444444444
User 9151 AUC after training: 0.4444444444444444
User 9151 does not improve AUC. Reverting changes.
Training on augumented user 4861 40/50 current_auc = 0.4444444444444444
User 4861 AUC after training: 0.4444444444444444
User 4861 does not improve AUC. Reverting changes.
Training on augumented user 27415 41/50 current_auc = 0.4444444444444444
User 27415 AUC after training: 0.4305555555555556
User 27415 does not improve AUC. Reverting changes.
Training on augumented user 119730 42/50 current_auc = 0.4444444444444444
User 119730 AUC after training: 0.4305555555555556
User 119730 does not improve AUC. Reverting changes.
Training on augumented user 69154 43/50 current_auc = 0.4444444444444444
User 69154 AUC after training: 0.4444444444444444
User 69154 does not improve AUC. Reverting changes.
Training on augumented user 104918 44/50 current_auc = 0.4444444444444444
User 104918 AUC after training: 0.41666666666666663
User 104918 does not improve AUC. Reverting changes.
Training on augumented user 25732 45/50 current_auc = 0.4444444444444444
User 25732 AUC after training: 0.4305555555555556
User 25732 does not improve AUC. Reverting changes.
Training on augumented user 127334 46/50 current_auc = 0.4444444444444444
User 127334 AUC after training: 0.4305555555555556
User 127334 does not improve AUC. Reverting changes.
Training on augumented user 30498 47/50 current_auc = 0.4444444444444444
User 30498 AUC after training: 0.4305555555555556
User 30498 does not improve AUC. Reverting changes.
Training on augumented user 98486 48/50 current_auc = 0.4444444444444444
User 98486 AUC after training: 0.4444444444444444
User 98486 does not improve AUC. Reverting changes.
Training on augumented user 93574 49/50 current_auc = 0.4444444444444444
User 93574 AUC after training: 0.4305555555555556
User 93574 does not improve AUC. Reverting changes.
[2024-12-02 19:00:44.320465] start test user 30631 143/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:44.782716] start test user 30631 143/568 recall augumented users by random, augumented_users = [47028, 119904, 100866, 26435, 13695, 30161, 26198, 47021, 37110, 81889, 55759, 73770, 126166, 72071, 59474, 20703, 122071, 120141, 127959, 9884, 56648, 54512, 117358, 88420, 75996, 75811, 59421, 18060, 33140, 67013, 1837, 131829, 103513, 43971, 5658, 15116, 93472, 41296, 66461, 82659, 65628, 37835, 84611, 83325, 29792, 108451, 31322, 82288, 9152, 125988]
[2024-12-02 19:00:44.799967] user = 30631 Cloud 143/568
[2024-12-02 19:00:44.815766] user = 30631 Local 143/568
[2024-12-02 19:00:44.904679] user = 30631 Local+ 143/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:47.071486] user = 30631 MPDA- 143/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5071548821548821
Training on augumented user 47028 0/50 current_auc = 0.5071548821548821
User 47028 AUC after training: 0.5058922558922558
User 47028 does not improve AUC. Reverting changes.
Training on augumented user 119904 1/50 current_auc = 0.5071548821548821
User 119904 AUC after training: 0.5071548821548821
User 119904 does not improve AUC. Reverting changes.
Training on augumented user 100866 2/50 current_auc = 0.5071548821548821
User 100866 AUC after training: 0.5088383838383839
User 100866 improves AUC. Keeping the model.
Training on augumented user 26435 3/50 current_auc = 0.5088383838383839
User 26435 AUC after training: 0.5063131313131313
User 26435 does not improve AUC. Reverting changes.
Training on augumented user 13695 4/50 current_auc = 0.5088383838383839
User 13695 AUC after training: 0.5084175084175084
User 13695 does not improve AUC. Reverting changes.
Training on augumented user 30161 5/50 current_auc = 0.5088383838383839
User 30161 AUC after training: 0.5071548821548821
User 30161 does not improve AUC. Reverting changes.
Training on augumented user 26198 6/50 current_auc = 0.5088383838383839
User 26198 AUC after training: 0.5008417508417508
User 26198 does not improve AUC. Reverting changes.
Training on augumented user 47021 7/50 current_auc = 0.5088383838383839
User 47021 AUC after training: 0.507996632996633
User 47021 does not improve AUC. Reverting changes.
Training on augumented user 37110 8/50 current_auc = 0.5088383838383839
User 37110 AUC after training: 0.505050505050505
User 37110 does not improve AUC. Reverting changes.
Training on augumented user 81889 9/50 current_auc = 0.5088383838383839
User 81889 AUC after training: 0.5084175084175084
User 81889 does not improve AUC. Reverting changes.
Training on augumented user 55759 10/50 current_auc = 0.5088383838383839
User 55759 AUC after training: 0.5067340067340067
User 55759 does not improve AUC. Reverting changes.
Training on augumented user 73770 11/50 current_auc = 0.5088383838383839
User 73770 AUC after training: 0.5075757575757576
User 73770 does not improve AUC. Reverting changes.
Training on augumented user 126166 12/50 current_auc = 0.5088383838383839
User 126166 AUC after training: 0.5101010101010102
User 126166 improves AUC. Keeping the model.
Training on augumented user 72071 13/50 current_auc = 0.5101010101010102
User 72071 AUC after training: 0.507996632996633
User 72071 does not improve AUC. Reverting changes.
Training on augumented user 59474 14/50 current_auc = 0.5101010101010102
User 59474 AUC after training: 0.5088383838383839
User 59474 does not improve AUC. Reverting changes.
Training on augumented user 20703 15/50 current_auc = 0.5101010101010102
User 20703 AUC after training: 0.5113636363636362
User 20703 improves AUC. Keeping the model.
Training on augumented user 122071 16/50 current_auc = 0.5113636363636362
User 122071 AUC after training: 0.510942760942761
User 122071 does not improve AUC. Reverting changes.
Training on augumented user 120141 17/50 current_auc = 0.5113636363636362
User 120141 AUC after training: 0.5105218855218856
User 120141 does not improve AUC. Reverting changes.
Training on augumented user 127959 18/50 current_auc = 0.5113636363636362
User 127959 AUC after training: 0.5164141414141414
User 127959 improves AUC. Keeping the model.
Training on augumented user 9884 19/50 current_auc = 0.5164141414141414
User 9884 AUC after training: 0.5151515151515151
User 9884 does not improve AUC. Reverting changes.
Training on augumented user 56648 20/50 current_auc = 0.5164141414141414
User 56648 AUC after training: 0.5185185185185185
User 56648 improves AUC. Keeping the model.
Training on augumented user 54512 21/50 current_auc = 0.5185185185185185
User 54512 AUC after training: 0.5151515151515151
User 54512 does not improve AUC. Reverting changes.
Training on augumented user 117358 22/50 current_auc = 0.5185185185185185
User 117358 AUC after training: 0.5172558922558923
User 117358 does not improve AUC. Reverting changes.
Training on augumented user 88420 23/50 current_auc = 0.5185185185185185
User 88420 AUC after training: 0.5189393939393939
User 88420 improves AUC. Keeping the model.
Training on augumented user 75996 24/50 current_auc = 0.5189393939393939
User 75996 AUC after training: 0.5185185185185185
User 75996 does not improve AUC. Reverting changes.
Training on augumented user 75811 25/50 current_auc = 0.5189393939393939
User 75811 AUC after training: 0.5170454545454546
User 75811 does not improve AUC. Reverting changes.
Training on augumented user 59421 26/50 current_auc = 0.5189393939393939
User 59421 AUC after training: 0.5180976430976431
User 59421 does not improve AUC. Reverting changes.
Training on augumented user 18060 27/50 current_auc = 0.5189393939393939
User 18060 AUC after training: 0.5180976430976432
User 18060 does not improve AUC. Reverting changes.
Training on augumented user 33140 28/50 current_auc = 0.5189393939393939
User 33140 AUC after training: 0.515993265993266
User 33140 does not improve AUC. Reverting changes.
Training on augumented user 67013 29/50 current_auc = 0.5189393939393939
User 67013 AUC after training: 0.513047138047138
User 67013 does not improve AUC. Reverting changes.
Training on augumented user 1837 30/50 current_auc = 0.5189393939393939
User 1837 AUC after training: 0.5147306397306397
User 1837 does not improve AUC. Reverting changes.
Training on augumented user 131829 31/50 current_auc = 0.5189393939393939
User 131829 AUC after training: 0.5168350168350169
User 131829 does not improve AUC. Reverting changes.
Training on augumented user 103513 32/50 current_auc = 0.5189393939393939
User 103513 AUC after training: 0.5172558922558923
User 103513 does not improve AUC. Reverting changes.
Training on augumented user 43971 33/50 current_auc = 0.5189393939393939
User 43971 AUC after training: 0.5147306397306397
User 43971 does not improve AUC. Reverting changes.
Training on augumented user 5658 34/50 current_auc = 0.5189393939393939
User 5658 AUC after training: 0.5172558922558923
User 5658 does not improve AUC. Reverting changes.
Training on augumented user 15116 35/50 current_auc = 0.5189393939393939
User 15116 AUC after training: 0.5143097643097643
User 15116 does not improve AUC. Reverting changes.
Training on augumented user 93472 36/50 current_auc = 0.5189393939393939
User 93472 AUC after training: 0.5193602693602695
User 93472 improves AUC. Keeping the model.
Training on augumented user 41296 37/50 current_auc = 0.5193602693602695
User 41296 AUC after training: 0.5155723905723906
User 41296 does not improve AUC. Reverting changes.
Training on augumented user 66461 38/50 current_auc = 0.5193602693602695
User 66461 AUC after training: 0.5202020202020202
User 66461 improves AUC. Keeping the model.
Training on augumented user 82659 39/50 current_auc = 0.5202020202020202
User 82659 AUC after training: 0.5185185185185185
User 82659 does not improve AUC. Reverting changes.
Training on augumented user 65628 40/50 current_auc = 0.5202020202020202
User 65628 AUC after training: 0.5185185185185186
User 65628 does not improve AUC. Reverting changes.
Training on augumented user 37835 41/50 current_auc = 0.5202020202020202
User 37835 AUC after training: 0.5180976430976432
User 37835 does not improve AUC. Reverting changes.
Training on augumented user 84611 42/50 current_auc = 0.5202020202020202
User 84611 AUC after training: 0.515993265993266
User 84611 does not improve AUC. Reverting changes.
Training on augumented user 83325 43/50 current_auc = 0.5202020202020202
User 83325 AUC after training: 0.5176767676767677
User 83325 does not improve AUC. Reverting changes.
Training on augumented user 29792 44/50 current_auc = 0.5202020202020202
User 29792 AUC after training: 0.5185185185185185
User 29792 does not improve AUC. Reverting changes.
Training on augumented user 108451 45/50 current_auc = 0.5202020202020202
User 108451 AUC after training: 0.5193602693602694
User 108451 does not improve AUC. Reverting changes.
Training on augumented user 31322 46/50 current_auc = 0.5202020202020202
User 31322 AUC after training: 0.5193602693602695
User 31322 does not improve AUC. Reverting changes.
Training on augumented user 82288 47/50 current_auc = 0.5202020202020202
User 82288 AUC after training: 0.5197811447811448
User 82288 does not improve AUC. Reverting changes.
Training on augumented user 9152 48/50 current_auc = 0.5202020202020202
User 9152 AUC after training: 0.5176767676767677
User 9152 does not improve AUC. Reverting changes.
Training on augumented user 125988 49/50 current_auc = 0.5202020202020202
User 125988 AUC after training: 0.5172558922558923
User 125988 does not improve AUC. Reverting changes.
[2024-12-02 19:01:20.222783] start test user 30664 144/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:20.650579] start test user 30664 144/568 recall augumented users by random, augumented_users = [15589, 33729, 80520, 108975, 120194, 29457, 12107, 39822, 43910, 81327, 138095, 137236, 133064, 71287, 81097, 99013, 67167, 20921, 10775, 123035, 130510, 99396, 32783, 29303, 115982, 48969, 50523, 136982, 103242, 32180, 66724, 114184, 16386, 7858, 127932, 56415, 12241, 17723, 86321, 25713, 26824, 73088, 99018, 129497, 97165, 27813, 5285, 109377, 100205, 9678]
[2024-12-02 19:01:20.667299] user = 30664 Cloud 144/568
[2024-12-02 19:01:20.677675] user = 30664 Local 144/568
[2024-12-02 19:01:20.774722] user = 30664 Local+ 144/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:23.033246] user = 30664 MPDA- 144/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.19230769230769232
Training on augumented user 15589 0/50 current_auc = 0.19230769230769232
User 15589 AUC after training: 0.23076923076923078
User 15589 improves AUC. Keeping the model.
Training on augumented user 33729 1/50 current_auc = 0.23076923076923078
User 33729 AUC after training: 0.23076923076923078
User 33729 does not improve AUC. Reverting changes.
Training on augumented user 80520 2/50 current_auc = 0.23076923076923078
User 80520 AUC after training: 0.23076923076923078
User 80520 does not improve AUC. Reverting changes.
Training on augumented user 108975 3/50 current_auc = 0.23076923076923078
User 108975 AUC after training: 0.19230769230769232
User 108975 does not improve AUC. Reverting changes.
Training on augumented user 120194 4/50 current_auc = 0.23076923076923078
User 120194 AUC after training: 0.23076923076923078
User 120194 does not improve AUC. Reverting changes.
Training on augumented user 29457 5/50 current_auc = 0.23076923076923078
User 29457 AUC after training: 0.23076923076923078
User 29457 does not improve AUC. Reverting changes.
Training on augumented user 12107 6/50 current_auc = 0.23076923076923078
User 12107 AUC after training: 0.23076923076923078
User 12107 does not improve AUC. Reverting changes.
Training on augumented user 39822 7/50 current_auc = 0.23076923076923078
User 39822 AUC after training: 0.23076923076923078
User 39822 does not improve AUC. Reverting changes.
Training on augumented user 43910 8/50 current_auc = 0.23076923076923078
User 43910 AUC after training: 0.19230769230769232
User 43910 does not improve AUC. Reverting changes.
Training on augumented user 81327 9/50 current_auc = 0.23076923076923078
User 81327 AUC after training: 0.23076923076923078
User 81327 does not improve AUC. Reverting changes.
Training on augumented user 138095 10/50 current_auc = 0.23076923076923078
User 138095 AUC after training: 0.23076923076923078
User 138095 does not improve AUC. Reverting changes.
Training on augumented user 137236 11/50 current_auc = 0.23076923076923078
User 137236 AUC after training: 0.23076923076923078
User 137236 does not improve AUC. Reverting changes.
Training on augumented user 133064 12/50 current_auc = 0.23076923076923078
User 133064 AUC after training: 0.19230769230769232
User 133064 does not improve AUC. Reverting changes.
Training on augumented user 71287 13/50 current_auc = 0.23076923076923078
User 71287 AUC after training: 0.19230769230769232
User 71287 does not improve AUC. Reverting changes.
Training on augumented user 81097 14/50 current_auc = 0.23076923076923078
User 81097 AUC after training: 0.23076923076923078
User 81097 does not improve AUC. Reverting changes.
Training on augumented user 99013 15/50 current_auc = 0.23076923076923078
User 99013 AUC after training: 0.19230769230769232
User 99013 does not improve AUC. Reverting changes.
Training on augumented user 67167 16/50 current_auc = 0.23076923076923078
User 67167 AUC after training: 0.23076923076923078
User 67167 does not improve AUC. Reverting changes.
Training on augumented user 20921 17/50 current_auc = 0.23076923076923078
User 20921 AUC after training: 0.19230769230769232
User 20921 does not improve AUC. Reverting changes.
Training on augumented user 10775 18/50 current_auc = 0.23076923076923078
User 10775 AUC after training: 0.23076923076923078
User 10775 does not improve AUC. Reverting changes.
Training on augumented user 123035 19/50 current_auc = 0.23076923076923078
User 123035 AUC after training: 0.23076923076923078
User 123035 does not improve AUC. Reverting changes.
Training on augumented user 130510 20/50 current_auc = 0.23076923076923078
User 130510 AUC after training: 0.19230769230769232
User 130510 does not improve AUC. Reverting changes.
Training on augumented user 99396 21/50 current_auc = 0.23076923076923078
User 99396 AUC after training: 0.19230769230769232
User 99396 does not improve AUC. Reverting changes.
Training on augumented user 32783 22/50 current_auc = 0.23076923076923078
User 32783 AUC after training: 0.23076923076923078
User 32783 does not improve AUC. Reverting changes.
Training on augumented user 29303 23/50 current_auc = 0.23076923076923078
User 29303 AUC after training: 0.19230769230769232
User 29303 does not improve AUC. Reverting changes.
Training on augumented user 115982 24/50 current_auc = 0.23076923076923078
User 115982 AUC after training: 0.23076923076923078
User 115982 does not improve AUC. Reverting changes.
Training on augumented user 48969 25/50 current_auc = 0.23076923076923078
User 48969 AUC after training: 0.23076923076923078
User 48969 does not improve AUC. Reverting changes.
Training on augumented user 50523 26/50 current_auc = 0.23076923076923078
User 50523 AUC after training: 0.23076923076923078
User 50523 does not improve AUC. Reverting changes.
Training on augumented user 136982 27/50 current_auc = 0.23076923076923078
User 136982 AUC after training: 0.23076923076923078
User 136982 does not improve AUC. Reverting changes.
Training on augumented user 103242 28/50 current_auc = 0.23076923076923078
User 103242 AUC after training: 0.19230769230769232
User 103242 does not improve AUC. Reverting changes.
Training on augumented user 32180 29/50 current_auc = 0.23076923076923078
User 32180 AUC after training: 0.23076923076923078
User 32180 does not improve AUC. Reverting changes.
Training on augumented user 66724 30/50 current_auc = 0.23076923076923078
User 66724 AUC after training: 0.19230769230769232
User 66724 does not improve AUC. Reverting changes.
Training on augumented user 114184 31/50 current_auc = 0.23076923076923078
User 114184 AUC after training: 0.23076923076923078
User 114184 does not improve AUC. Reverting changes.
Training on augumented user 16386 32/50 current_auc = 0.23076923076923078
User 16386 AUC after training: 0.19230769230769232
User 16386 does not improve AUC. Reverting changes.
Training on augumented user 7858 33/50 current_auc = 0.23076923076923078
User 7858 AUC after training: 0.19230769230769232
User 7858 does not improve AUC. Reverting changes.
Training on augumented user 127932 34/50 current_auc = 0.23076923076923078
User 127932 AUC after training: 0.19230769230769232
User 127932 does not improve AUC. Reverting changes.
Training on augumented user 56415 35/50 current_auc = 0.23076923076923078
User 56415 AUC after training: 0.23076923076923078
User 56415 does not improve AUC. Reverting changes.
Training on augumented user 12241 36/50 current_auc = 0.23076923076923078
User 12241 AUC after training: 0.23076923076923078
User 12241 does not improve AUC. Reverting changes.
Training on augumented user 17723 37/50 current_auc = 0.23076923076923078
User 17723 AUC after training: 0.19230769230769232
User 17723 does not improve AUC. Reverting changes.
Training on augumented user 86321 38/50 current_auc = 0.23076923076923078
User 86321 AUC after training: 0.19230769230769232
User 86321 does not improve AUC. Reverting changes.
Training on augumented user 25713 39/50 current_auc = 0.23076923076923078
User 25713 AUC after training: 0.19230769230769232
User 25713 does not improve AUC. Reverting changes.
Training on augumented user 26824 40/50 current_auc = 0.23076923076923078
User 26824 AUC after training: 0.19230769230769232
User 26824 does not improve AUC. Reverting changes.
Training on augumented user 73088 41/50 current_auc = 0.23076923076923078
User 73088 AUC after training: 0.23076923076923078
User 73088 does not improve AUC. Reverting changes.
Training on augumented user 99018 42/50 current_auc = 0.23076923076923078
User 99018 AUC after training: 0.23076923076923078
User 99018 does not improve AUC. Reverting changes.
Training on augumented user 129497 43/50 current_auc = 0.23076923076923078
User 129497 AUC after training: 0.23076923076923078
User 129497 does not improve AUC. Reverting changes.
Training on augumented user 97165 44/50 current_auc = 0.23076923076923078
User 97165 AUC after training: 0.23076923076923078
User 97165 does not improve AUC. Reverting changes.
Training on augumented user 27813 45/50 current_auc = 0.23076923076923078
User 27813 AUC after training: 0.23076923076923078
User 27813 does not improve AUC. Reverting changes.
Training on augumented user 5285 46/50 current_auc = 0.23076923076923078
User 5285 AUC after training: 0.23076923076923078
User 5285 does not improve AUC. Reverting changes.
Training on augumented user 109377 47/50 current_auc = 0.23076923076923078
User 109377 AUC after training: 0.23076923076923078
User 109377 does not improve AUC. Reverting changes.
Training on augumented user 100205 48/50 current_auc = 0.23076923076923078
User 100205 AUC after training: 0.23076923076923078
User 100205 does not improve AUC. Reverting changes.
Training on augumented user 9678 49/50 current_auc = 0.23076923076923078
User 9678 AUC after training: 0.23076923076923078
User 9678 does not improve AUC. Reverting changes.
[2024-12-02 19:01:54.107558] start test user 30688 145/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:54.771157] start test user 30688 145/568 recall augumented users by random, augumented_users = [80167, 111678, 108119, 92917, 5806, 71595, 93114, 19731, 55729, 102364, 116199, 121200, 132097, 104408, 3316, 80717, 54006, 30200, 31856, 8015, 86688, 66262, 37158, 12962, 119411, 68905, 129319, 101594, 86644, 7322, 108356, 129784, 67433, 3403, 135650, 122650, 8918, 84135, 123525, 13553, 11738, 13176, 77452, 44366, 118566, 77400, 8255, 138167, 78171, 84013]
[2024-12-02 19:01:54.809305] user = 30688 Cloud 145/568
[2024-12-02 19:01:54.866505] user = 30688 Local 145/568
[2024-12-02 19:01:55.000531] user = 30688 Local+ 145/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:57.724250] user = 30688 MPDA- 145/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5528014842300557
Training on augumented user 80167 0/50 current_auc = 0.5528014842300557
User 80167 AUC after training: 0.552560296846011
User 80167 does not improve AUC. Reverting changes.
Training on augumented user 111678 1/50 current_auc = 0.5528014842300557
User 111678 AUC after training: 0.5526530612244899
User 111678 does not improve AUC. Reverting changes.
Training on augumented user 108119 2/50 current_auc = 0.5528014842300557
User 108119 AUC after training: 0.5524860853432282
User 108119 does not improve AUC. Reverting changes.
Training on augumented user 92917 3/50 current_auc = 0.5528014842300557
User 92917 AUC after training: 0.5527643784786642
User 92917 does not improve AUC. Reverting changes.
Training on augumented user 5806 4/50 current_auc = 0.5528014842300557
User 5806 AUC after training: 0.5526716141001855
User 5806 does not improve AUC. Reverting changes.
Training on augumented user 71595 5/50 current_auc = 0.5528014842300557
User 71595 AUC after training: 0.5525602968460112
User 71595 does not improve AUC. Reverting changes.
Training on augumented user 93114 6/50 current_auc = 0.5528014842300557
User 93114 AUC after training: 0.5522634508348795
User 93114 does not improve AUC. Reverting changes.
Training on augumented user 19731 7/50 current_auc = 0.5528014842300557
User 19731 AUC after training: 0.552634508348794
User 19731 does not improve AUC. Reverting changes.
Training on augumented user 55729 8/50 current_auc = 0.5528014842300557
User 55729 AUC after training: 0.5537291280148423
User 55729 improves AUC. Keeping the model.
Training on augumented user 102364 9/50 current_auc = 0.5537291280148423
User 102364 AUC after training: 0.5535064935064935
User 102364 does not improve AUC. Reverting changes.
Training on augumented user 116199 10/50 current_auc = 0.5537291280148423
User 116199 AUC after training: 0.5542857142857144
User 116199 improves AUC. Keeping the model.
Training on augumented user 121200 11/50 current_auc = 0.5542857142857144
User 121200 AUC after training: 0.553395176252319
User 121200 does not improve AUC. Reverting changes.
Training on augumented user 132097 12/50 current_auc = 0.5542857142857144
User 132097 AUC after training: 0.5537291280148423
User 132097 does not improve AUC. Reverting changes.
Training on augumented user 104408 13/50 current_auc = 0.5542857142857144
User 104408 AUC after training: 0.5538033395176253
User 104408 does not improve AUC. Reverting changes.
Training on augumented user 3316 14/50 current_auc = 0.5542857142857144
User 3316 AUC after training: 0.553543599257885
User 3316 does not improve AUC. Reverting changes.
Training on augumented user 80717 15/50 current_auc = 0.5542857142857144
User 80717 AUC after training: 0.5535807050092766
User 80717 does not improve AUC. Reverting changes.
Training on augumented user 54006 16/50 current_auc = 0.5542857142857144
User 54006 AUC after training: 0.5538775510204081
User 54006 does not improve AUC. Reverting changes.
Training on augumented user 30200 17/50 current_auc = 0.5542857142857144
User 30200 AUC after training: 0.5540259740259741
User 30200 does not improve AUC. Reverting changes.
Training on augumented user 31856 18/50 current_auc = 0.5542857142857144
User 31856 AUC after training: 0.5541001855287571
User 31856 does not improve AUC. Reverting changes.
Training on augumented user 8015 19/50 current_auc = 0.5542857142857144
User 8015 AUC after training: 0.5536549165120594
User 8015 does not improve AUC. Reverting changes.
Training on augumented user 86688 20/50 current_auc = 0.5542857142857144
User 86688 AUC after training: 0.5540630797773655
User 86688 does not improve AUC. Reverting changes.
Training on augumented user 66262 21/50 current_auc = 0.5542857142857144
User 66262 AUC after training: 0.5539146567717996
User 66262 does not improve AUC. Reverting changes.
Training on augumented user 37158 22/50 current_auc = 0.5542857142857144
User 37158 AUC after training: 0.5542486085343228
User 37158 does not improve AUC. Reverting changes.
Training on augumented user 12962 23/50 current_auc = 0.5542857142857144
User 12962 AUC after training: 0.5542486085343229
User 12962 does not improve AUC. Reverting changes.
Training on augumented user 119411 24/50 current_auc = 0.5542857142857144
User 119411 AUC after training: 0.5533951762523192
User 119411 does not improve AUC. Reverting changes.
Training on augumented user 68905 25/50 current_auc = 0.5542857142857144
User 68905 AUC after training: 0.5543228200371058
User 68905 improves AUC. Keeping the model.
Training on augumented user 129319 26/50 current_auc = 0.5543228200371058
User 129319 AUC after training: 0.554100185528757
User 129319 does not improve AUC. Reverting changes.
Training on augumented user 101594 27/50 current_auc = 0.5543228200371058
User 101594 AUC after training: 0.5538404452690167
User 101594 does not improve AUC. Reverting changes.
Training on augumented user 86644 28/50 current_auc = 0.5543228200371058
User 86644 AUC after training: 0.5534322820037106
User 86644 does not improve AUC. Reverting changes.
Training on augumented user 7322 29/50 current_auc = 0.5543228200371058
User 7322 AUC after training: 0.5536549165120594
User 7322 does not improve AUC. Reverting changes.
Training on augumented user 108356 30/50 current_auc = 0.5543228200371058
User 108356 AUC after training: 0.554025974025974
User 108356 does not improve AUC. Reverting changes.
Training on augumented user 129784 31/50 current_auc = 0.5543228200371058
User 129784 AUC after training: 0.5539888682745826
User 129784 does not improve AUC. Reverting changes.
Training on augumented user 67433 32/50 current_auc = 0.5543228200371058
User 67433 AUC after training: 0.5541372912801484
User 67433 does not improve AUC. Reverting changes.
Training on augumented user 3403 33/50 current_auc = 0.5543228200371058
User 3403 AUC after training: 0.5538033395176253
User 3403 does not improve AUC. Reverting changes.
Training on augumented user 135650 34/50 current_auc = 0.5543228200371058
User 135650 AUC after training: 0.5532838589981448
User 135650 does not improve AUC. Reverting changes.
Training on augumented user 122650 35/50 current_auc = 0.5543228200371058
User 122650 AUC after training: 0.5535064935064935
User 122650 does not improve AUC. Reverting changes.
Training on augumented user 8918 36/50 current_auc = 0.5543228200371058
User 8918 AUC after training: 0.5534322820037106
User 8918 does not improve AUC. Reverting changes.
Training on augumented user 84135 37/50 current_auc = 0.5543228200371058
User 84135 AUC after training: 0.5542486085343229
User 84135 does not improve AUC. Reverting changes.
Training on augumented user 123525 38/50 current_auc = 0.5543228200371058
User 123525 AUC after training: 0.5538775510204083
User 123525 does not improve AUC. Reverting changes.
Training on augumented user 13553 39/50 current_auc = 0.5543228200371058
User 13553 AUC after training: 0.5541372912801484
User 13553 does not improve AUC. Reverting changes.
Training on augumented user 11738 40/50 current_auc = 0.5543228200371058
User 11738 AUC after training: 0.5540630797773656
User 11738 does not improve AUC. Reverting changes.
Training on augumented user 13176 41/50 current_auc = 0.5543228200371058
User 13176 AUC after training: 0.5539888682745826
User 13176 does not improve AUC. Reverting changes.
Training on augumented user 77452 42/50 current_auc = 0.5543228200371058
User 77452 AUC after training: 0.5539888682745826
User 77452 does not improve AUC. Reverting changes.
Training on augumented user 44366 43/50 current_auc = 0.5543228200371058
User 44366 AUC after training: 0.5530983302411874
User 44366 does not improve AUC. Reverting changes.
Training on augumented user 118566 44/50 current_auc = 0.5543228200371058
User 118566 AUC after training: 0.5535250463821892
User 118566 does not improve AUC. Reverting changes.
Training on augumented user 77400 45/50 current_auc = 0.5543228200371058
User 77400 AUC after training: 0.5542486085343228
User 77400 does not improve AUC. Reverting changes.
Training on augumented user 8255 46/50 current_auc = 0.5543228200371058
User 8255 AUC after training: 0.5539517625231911
User 8255 does not improve AUC. Reverting changes.
Training on augumented user 138167 47/50 current_auc = 0.5543228200371058
User 138167 AUC after training: 0.5543599257884972
User 138167 improves AUC. Keeping the model.
Training on augumented user 78171 48/50 current_auc = 0.5543599257884972
User 78171 AUC after training: 0.5537662337662338
User 78171 does not improve AUC. Reverting changes.
Training on augumented user 84013 49/50 current_auc = 0.5543599257884972
User 84013 AUC after training: 0.5537291280148423
User 84013 does not improve AUC. Reverting changes.
[2024-12-02 19:02:28.740381] start test user 30724 146/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:29.234790] start test user 30724 146/568 recall augumented users by random, augumented_users = [75099, 72270, 96928, 130801, 61131, 130499, 137208, 118906, 49104, 12287, 15073, 21067, 46839, 97207, 39171, 86566, 7260, 27259, 27172, 100929, 137510, 125790, 72098, 34986, 18770, 21227, 75409, 42299, 2385, 102620, 85214, 23327, 25442, 118564, 29792, 110318, 114824, 122338, 112374, 61850, 9665, 47750, 65323, 67272, 29039, 121080, 40328, 77315, 106598, 41521]
[2024-12-02 19:02:29.264653] user = 30724 Cloud 146/568
[2024-12-02 19:02:29.284632] user = 30724 Local 146/568
[2024-12-02 19:02:29.586204] user = 30724 Local+ 146/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:31.462697] user = 30724 MPDA- 146/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5895522388059702
Training on augumented user 75099 0/50 current_auc = 0.5895522388059702
User 75099 AUC after training: 0.5865671641791045
User 75099 does not improve AUC. Reverting changes.
Training on augumented user 72270 1/50 current_auc = 0.5895522388059702
User 72270 AUC after training: 0.5895522388059702
User 72270 does not improve AUC. Reverting changes.
Training on augumented user 96928 2/50 current_auc = 0.5895522388059702
User 96928 AUC after training: 0.5895522388059702
User 96928 does not improve AUC. Reverting changes.
Training on augumented user 130801 3/50 current_auc = 0.5895522388059702
User 130801 AUC after training: 0.5880597014925373
User 130801 does not improve AUC. Reverting changes.
Training on augumented user 61131 4/50 current_auc = 0.5895522388059702
User 61131 AUC after training: 0.591044776119403
User 61131 improves AUC. Keeping the model.
Training on augumented user 130499 5/50 current_auc = 0.591044776119403
User 130499 AUC after training: 0.5880597014925373
User 130499 does not improve AUC. Reverting changes.
Training on augumented user 137208 6/50 current_auc = 0.591044776119403
User 137208 AUC after training: 0.591044776119403
User 137208 does not improve AUC. Reverting changes.
Training on augumented user 118906 7/50 current_auc = 0.591044776119403
User 118906 AUC after training: 0.5895522388059702
User 118906 does not improve AUC. Reverting changes.
Training on augumented user 49104 8/50 current_auc = 0.591044776119403
User 49104 AUC after training: 0.591044776119403
User 49104 does not improve AUC. Reverting changes.
Training on augumented user 12287 9/50 current_auc = 0.591044776119403
User 12287 AUC after training: 0.5895522388059702
User 12287 does not improve AUC. Reverting changes.
Training on augumented user 15073 10/50 current_auc = 0.591044776119403
User 15073 AUC after training: 0.5895522388059702
User 15073 does not improve AUC. Reverting changes.
Training on augumented user 21067 11/50 current_auc = 0.591044776119403
User 21067 AUC after training: 0.5880597014925373
User 21067 does not improve AUC. Reverting changes.
Training on augumented user 46839 12/50 current_auc = 0.591044776119403
User 46839 AUC after training: 0.5895522388059702
User 46839 does not improve AUC. Reverting changes.
Training on augumented user 97207 13/50 current_auc = 0.591044776119403
User 97207 AUC after training: 0.5895522388059702
User 97207 does not improve AUC. Reverting changes.
Training on augumented user 39171 14/50 current_auc = 0.591044776119403
User 39171 AUC after training: 0.5895522388059702
User 39171 does not improve AUC. Reverting changes.
Training on augumented user 86566 15/50 current_auc = 0.591044776119403
User 86566 AUC after training: 0.5895522388059702
User 86566 does not improve AUC. Reverting changes.
Training on augumented user 7260 16/50 current_auc = 0.591044776119403
User 7260 AUC after training: 0.591044776119403
User 7260 does not improve AUC. Reverting changes.
Training on augumented user 27259 17/50 current_auc = 0.591044776119403
User 27259 AUC after training: 0.5895522388059702
User 27259 does not improve AUC. Reverting changes.
Training on augumented user 27172 18/50 current_auc = 0.591044776119403
User 27172 AUC after training: 0.5880597014925373
User 27172 does not improve AUC. Reverting changes.
Training on augumented user 100929 19/50 current_auc = 0.591044776119403
User 100929 AUC after training: 0.591044776119403
User 100929 does not improve AUC. Reverting changes.
Training on augumented user 137510 20/50 current_auc = 0.591044776119403
User 137510 AUC after training: 0.5895522388059702
User 137510 does not improve AUC. Reverting changes.
Training on augumented user 125790 21/50 current_auc = 0.591044776119403
User 125790 AUC after training: 0.5895522388059702
User 125790 does not improve AUC. Reverting changes.
Training on augumented user 72098 22/50 current_auc = 0.591044776119403
User 72098 AUC after training: 0.591044776119403
User 72098 does not improve AUC. Reverting changes.
Training on augumented user 34986 23/50 current_auc = 0.591044776119403
User 34986 AUC after training: 0.591044776119403
User 34986 does not improve AUC. Reverting changes.
Training on augumented user 18770 24/50 current_auc = 0.591044776119403
User 18770 AUC after training: 0.5895522388059702
User 18770 does not improve AUC. Reverting changes.
Training on augumented user 21227 25/50 current_auc = 0.591044776119403
User 21227 AUC after training: 0.591044776119403
User 21227 does not improve AUC. Reverting changes.
Training on augumented user 75409 26/50 current_auc = 0.591044776119403
User 75409 AUC after training: 0.5895522388059702
User 75409 does not improve AUC. Reverting changes.
Training on augumented user 42299 27/50 current_auc = 0.591044776119403
User 42299 AUC after training: 0.5895522388059702
User 42299 does not improve AUC. Reverting changes.
Training on augumented user 2385 28/50 current_auc = 0.591044776119403
User 2385 AUC after training: 0.591044776119403
User 2385 does not improve AUC. Reverting changes.
Training on augumented user 102620 29/50 current_auc = 0.591044776119403
User 102620 AUC after training: 0.5895522388059702
User 102620 does not improve AUC. Reverting changes.
Training on augumented user 85214 30/50 current_auc = 0.591044776119403
User 85214 AUC after training: 0.5895522388059702
User 85214 does not improve AUC. Reverting changes.
Training on augumented user 23327 31/50 current_auc = 0.591044776119403
User 23327 AUC after training: 0.5895522388059702
User 23327 does not improve AUC. Reverting changes.
Training on augumented user 25442 32/50 current_auc = 0.591044776119403
User 25442 AUC after training: 0.5895522388059702
User 25442 does not improve AUC. Reverting changes.
Training on augumented user 118564 33/50 current_auc = 0.591044776119403
User 118564 AUC after training: 0.5895522388059702
User 118564 does not improve AUC. Reverting changes.
Training on augumented user 29792 34/50 current_auc = 0.591044776119403
User 29792 AUC after training: 0.591044776119403
User 29792 does not improve AUC. Reverting changes.
Training on augumented user 110318 35/50 current_auc = 0.591044776119403
User 110318 AUC after training: 0.591044776119403
User 110318 does not improve AUC. Reverting changes.
Training on augumented user 114824 36/50 current_auc = 0.591044776119403
User 114824 AUC after training: 0.5895522388059702
User 114824 does not improve AUC. Reverting changes.
Training on augumented user 122338 37/50 current_auc = 0.591044776119403
User 122338 AUC after training: 0.5895522388059702
User 122338 does not improve AUC. Reverting changes.
Training on augumented user 112374 38/50 current_auc = 0.591044776119403
User 112374 AUC after training: 0.5880597014925373
User 112374 does not improve AUC. Reverting changes.
Training on augumented user 61850 39/50 current_auc = 0.591044776119403
User 61850 AUC after training: 0.5925373134328358
User 61850 improves AUC. Keeping the model.
Training on augumented user 9665 40/50 current_auc = 0.5925373134328358
User 9665 AUC after training: 0.5925373134328358
User 9665 does not improve AUC. Reverting changes.
Training on augumented user 47750 41/50 current_auc = 0.5925373134328358
User 47750 AUC after training: 0.591044776119403
User 47750 does not improve AUC. Reverting changes.
Training on augumented user 65323 42/50 current_auc = 0.5925373134328358
User 65323 AUC after training: 0.591044776119403
User 65323 does not improve AUC. Reverting changes.
Training on augumented user 67272 43/50 current_auc = 0.5925373134328358
User 67272 AUC after training: 0.591044776119403
User 67272 does not improve AUC. Reverting changes.
Training on augumented user 29039 44/50 current_auc = 0.5925373134328358
User 29039 AUC after training: 0.5925373134328358
User 29039 does not improve AUC. Reverting changes.
Training on augumented user 121080 45/50 current_auc = 0.5925373134328358
User 121080 AUC after training: 0.5925373134328358
User 121080 does not improve AUC. Reverting changes.
Training on augumented user 40328 46/50 current_auc = 0.5925373134328358
User 40328 AUC after training: 0.5925373134328358
User 40328 does not improve AUC. Reverting changes.
Training on augumented user 77315 47/50 current_auc = 0.5925373134328358
User 77315 AUC after training: 0.591044776119403
User 77315 does not improve AUC. Reverting changes.
Training on augumented user 106598 48/50 current_auc = 0.5925373134328358
User 106598 AUC after training: 0.5925373134328358
User 106598 does not improve AUC. Reverting changes.
Training on augumented user 41521 49/50 current_auc = 0.5925373134328358
User 41521 AUC after training: 0.5925373134328358
User 41521 does not improve AUC. Reverting changes.
[2024-12-02 19:02:58.168199] start test user 30731 147/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:58.622770] start test user 30731 147/568 recall augumented users by random, augumented_users = [125367, 94868, 108968, 72612, 116912, 113501, 25247, 16629, 132467, 2739, 116789, 97959, 50818, 17841, 127806, 28893, 20108, 94906, 123240, 42427, 82606, 63324, 63614, 73162, 133698, 67228, 100435, 77289, 65810, 93142, 47217, 63040, 73772, 43685, 84229, 125340, 46156, 63952, 97557, 67666, 32577, 14108, 131346, 120985, 111482, 40908, 109316, 56766, 44806, 61245]
[2024-12-02 19:02:58.638117] user = 30731 Cloud 147/568
[2024-12-02 19:02:58.688225] user = 30731 Local 147/568
[2024-12-02 19:02:58.921050] user = 30731 Local+ 147/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:03.137112] user = 30731 MPDA- 147/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7026772247360482
Training on augumented user 125367 0/50 current_auc = 0.7026772247360482
User 125367 AUC after training: 0.7026772247360482
User 125367 does not improve AUC. Reverting changes.
Training on augumented user 94868 1/50 current_auc = 0.7026772247360482
User 94868 AUC after training: 0.703054298642534
User 94868 improves AUC. Keeping the model.
Training on augumented user 108968 2/50 current_auc = 0.703054298642534
User 108968 AUC after training: 0.7024886877828054
User 108968 does not improve AUC. Reverting changes.
Training on augumented user 72612 3/50 current_auc = 0.703054298642534
User 72612 AUC after training: 0.7023001508295625
User 72612 does not improve AUC. Reverting changes.
Training on augumented user 116912 4/50 current_auc = 0.703054298642534
User 116912 AUC after training: 0.7030542986425339
User 116912 does not improve AUC. Reverting changes.
Training on augumented user 113501 5/50 current_auc = 0.703054298642534
User 113501 AUC after training: 0.7032428355957767
User 113501 improves AUC. Keeping the model.
Training on augumented user 25247 6/50 current_auc = 0.7032428355957767
User 25247 AUC after training: 0.7034313725490196
User 25247 improves AUC. Keeping the model.
Training on augumented user 16629 7/50 current_auc = 0.7034313725490196
User 16629 AUC after training: 0.7026772247360482
User 16629 does not improve AUC. Reverting changes.
Training on augumented user 132467 8/50 current_auc = 0.7034313725490196
User 132467 AUC after training: 0.7024886877828054
User 132467 does not improve AUC. Reverting changes.
Training on augumented user 2739 9/50 current_auc = 0.7034313725490196
User 2739 AUC after training: 0.7032428355957767
User 2739 does not improve AUC. Reverting changes.
Training on augumented user 116789 10/50 current_auc = 0.7034313725490196
User 116789 AUC after training: 0.7026772247360482
User 116789 does not improve AUC. Reverting changes.
Training on augumented user 97959 11/50 current_auc = 0.7034313725490196
User 97959 AUC after training: 0.7030542986425339
User 97959 does not improve AUC. Reverting changes.
Training on augumented user 50818 12/50 current_auc = 0.7034313725490196
User 50818 AUC after training: 0.7032428355957767
User 50818 does not improve AUC. Reverting changes.
Training on augumented user 17841 13/50 current_auc = 0.7034313725490196
User 17841 AUC after training: 0.7024886877828054
User 17841 does not improve AUC. Reverting changes.
Training on augumented user 127806 14/50 current_auc = 0.7034313725490196
User 127806 AUC after training: 0.7032428355957767
User 127806 does not improve AUC. Reverting changes.
Training on augumented user 28893 15/50 current_auc = 0.7034313725490196
User 28893 AUC after training: 0.7026772247360482
User 28893 does not improve AUC. Reverting changes.
Training on augumented user 20108 16/50 current_auc = 0.7034313725490196
User 20108 AUC after training: 0.7030542986425339
User 20108 does not improve AUC. Reverting changes.
Training on augumented user 94906 17/50 current_auc = 0.7034313725490196
User 94906 AUC after training: 0.7032428355957767
User 94906 does not improve AUC. Reverting changes.
Training on augumented user 123240 18/50 current_auc = 0.7034313725490196
User 123240 AUC after training: 0.7030542986425339
User 123240 does not improve AUC. Reverting changes.
Training on augumented user 42427 19/50 current_auc = 0.7034313725490196
User 42427 AUC after training: 0.7041855203619909
User 42427 improves AUC. Keeping the model.
Training on augumented user 82606 20/50 current_auc = 0.7041855203619909
User 82606 AUC after training: 0.7034313725490196
User 82606 does not improve AUC. Reverting changes.
Training on augumented user 63324 21/50 current_auc = 0.7041855203619909
User 63324 AUC after training: 0.7030542986425339
User 63324 does not improve AUC. Reverting changes.
Training on augumented user 63614 22/50 current_auc = 0.7041855203619909
User 63614 AUC after training: 0.7036199095022624
User 63614 does not improve AUC. Reverting changes.
Training on augumented user 73162 23/50 current_auc = 0.7041855203619909
User 73162 AUC after training: 0.7028657616892912
User 73162 does not improve AUC. Reverting changes.
Training on augumented user 133698 24/50 current_auc = 0.7041855203619909
User 133698 AUC after training: 0.7058823529411765
User 133698 improves AUC. Keeping the model.
Training on augumented user 67228 25/50 current_auc = 0.7058823529411765
User 67228 AUC after training: 0.7062594268476622
User 67228 improves AUC. Keeping the model.
Training on augumented user 100435 26/50 current_auc = 0.7062594268476622
User 100435 AUC after training: 0.7062594268476622
User 100435 does not improve AUC. Reverting changes.
Training on augumented user 77289 27/50 current_auc = 0.7062594268476622
User 77289 AUC after training: 0.7058823529411765
User 77289 does not improve AUC. Reverting changes.
Training on augumented user 65810 28/50 current_auc = 0.7062594268476622
User 65810 AUC after training: 0.7060708898944192
User 65810 does not improve AUC. Reverting changes.
Training on augumented user 93142 29/50 current_auc = 0.7062594268476622
User 93142 AUC after training: 0.7058823529411764
User 93142 does not improve AUC. Reverting changes.
Training on augumented user 47217 30/50 current_auc = 0.7062594268476622
User 47217 AUC after training: 0.7062594268476622
User 47217 does not improve AUC. Reverting changes.
Training on augumented user 63040 31/50 current_auc = 0.7062594268476622
User 63040 AUC after training: 0.7068250377073906
User 63040 improves AUC. Keeping the model.
Training on augumented user 73772 32/50 current_auc = 0.7068250377073906
User 73772 AUC after training: 0.7060708898944194
User 73772 does not improve AUC. Reverting changes.
Training on augumented user 43685 33/50 current_auc = 0.7068250377073906
User 43685 AUC after training: 0.7058823529411765
User 43685 does not improve AUC. Reverting changes.
Training on augumented user 84229 34/50 current_auc = 0.7068250377073906
User 84229 AUC after training: 0.7066365007541479
User 84229 does not improve AUC. Reverting changes.
Training on augumented user 125340 35/50 current_auc = 0.7068250377073906
User 125340 AUC after training: 0.7072021116138764
User 125340 improves AUC. Keeping the model.
Training on augumented user 46156 36/50 current_auc = 0.7072021116138764
User 46156 AUC after training: 0.7073906485671192
User 46156 improves AUC. Keeping the model.
Training on augumented user 63952 37/50 current_auc = 0.7073906485671192
User 63952 AUC after training: 0.7068250377073907
User 63952 does not improve AUC. Reverting changes.
Training on augumented user 97557 38/50 current_auc = 0.7073906485671192
User 97557 AUC after training: 0.707579185520362
User 97557 improves AUC. Keeping the model.
Training on augumented user 67666 39/50 current_auc = 0.707579185520362
User 67666 AUC after training: 0.7079562594268477
User 67666 improves AUC. Keeping the model.
Training on augumented user 32577 40/50 current_auc = 0.7079562594268477
User 32577 AUC after training: 0.7075791855203619
User 32577 does not improve AUC. Reverting changes.
Training on augumented user 14108 41/50 current_auc = 0.7079562594268477
User 14108 AUC after training: 0.7077677224736049
User 14108 does not improve AUC. Reverting changes.
Training on augumented user 131346 42/50 current_auc = 0.7079562594268477
User 131346 AUC after training: 0.7066365007541477
User 131346 does not improve AUC. Reverting changes.
Training on augumented user 120985 43/50 current_auc = 0.7079562594268477
User 120985 AUC after training: 0.7085218702865761
User 120985 improves AUC. Keeping the model.
Training on augumented user 111482 44/50 current_auc = 0.7085218702865761
User 111482 AUC after training: 0.707579185520362
User 111482 does not improve AUC. Reverting changes.
Training on augumented user 40908 45/50 current_auc = 0.7085218702865761
User 40908 AUC after training: 0.7077677224736049
User 40908 does not improve AUC. Reverting changes.
Training on augumented user 109316 46/50 current_auc = 0.7085218702865761
User 109316 AUC after training: 0.7088989441930619
User 109316 improves AUC. Keeping the model.
Training on augumented user 56766 47/50 current_auc = 0.7088989441930619
User 56766 AUC after training: 0.7092760180995475
User 56766 improves AUC. Keeping the model.
Training on augumented user 44806 48/50 current_auc = 0.7092760180995475
User 44806 AUC after training: 0.708710407239819
User 44806 does not improve AUC. Reverting changes.
Training on augumented user 61245 49/50 current_auc = 0.7092760180995475
User 61245 AUC after training: 0.7092760180995475
User 61245 does not improve AUC. Reverting changes.
[2024-12-02 19:03:29.277884] start test user 30739 148/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:29.681079] start test user 30739 148/568 recall augumented users by random, augumented_users = [97476, 18654, 71194, 53681, 10702, 125318, 131079, 97685, 41412, 61374, 26565, 125555, 135790, 33503, 47506, 16590, 16520, 81873, 52374, 84198, 75609, 39398, 2665, 124941, 108112, 105109, 17014, 32692, 6770, 73003, 118350, 49706, 83828, 130749, 53600, 66376, 8388, 17737, 131675, 31950, 100048, 62367, 79011, 54790, 17267, 72364, 12139, 131383, 96028, 4773]
[2024-12-02 19:03:29.697292] user = 30739 Cloud 148/568
[2024-12-02 19:03:29.731879] user = 30739 Local 148/568
[2024-12-02 19:03:29.854027] user = 30739 Local+ 148/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:32.072676] user = 30739 MPDA- 148/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6391381029062189
Training on augumented user 97476 0/50 current_auc = 0.6391381029062189
User 97476 AUC after training: 0.639195613833295
User 97476 improves AUC. Keeping the model.
Training on augumented user 18654 1/50 current_auc = 0.639195613833295
User 18654 AUC after training: 0.6388122076527875
User 18654 does not improve AUC. Reverting changes.
Training on augumented user 71194 2/50 current_auc = 0.639195613833295
User 71194 AUC after training: 0.6389655701249903
User 71194 does not improve AUC. Reverting changes.
Training on augumented user 53681 3/50 current_auc = 0.639195613833295
User 53681 AUC after training: 0.6390614216701174
User 53681 does not improve AUC. Reverting changes.
Training on augumented user 10702 4/50 current_auc = 0.639195613833295
User 10702 AUC after training: 0.638946399815965
User 10702 does not improve AUC. Reverting changes.
Training on augumented user 125318 5/50 current_auc = 0.639195613833295
User 125318 AUC after training: 0.6387738670347366
User 125318 does not improve AUC. Reverting changes.
Training on augumented user 131079 6/50 current_auc = 0.639195613833295
User 131079 AUC after training: 0.638793037343762
User 131079 does not improve AUC. Reverting changes.
Training on augumented user 97685 7/50 current_auc = 0.639195613833295
User 97685 AUC after training: 0.6386588451805844
User 97685 does not improve AUC. Reverting changes.
Training on augumented user 41412 8/50 current_auc = 0.639195613833295
User 41412 AUC after training: 0.6390230810520666
User 41412 does not improve AUC. Reverting changes.
Training on augumented user 61374 9/50 current_auc = 0.639195613833295
User 61374 AUC after training: 0.6390039107430412
User 61374 does not improve AUC. Reverting changes.
Training on augumented user 26565 10/50 current_auc = 0.639195613833295
User 26565 AUC after training: 0.6388505482708382
User 26565 does not improve AUC. Reverting changes.
Training on augumented user 125555 11/50 current_auc = 0.639195613833295
User 125555 AUC after training: 0.6390805919791427
User 125555 does not improve AUC. Reverting changes.
Training on augumented user 135790 12/50 current_auc = 0.639195613833295
User 135790 AUC after training: 0.6390230810520665
User 135790 does not improve AUC. Reverting changes.
Training on augumented user 33503 13/50 current_auc = 0.639195613833295
User 33503 AUC after training: 0.6389272295069397
User 33503 does not improve AUC. Reverting changes.
Training on augumented user 47506 14/50 current_auc = 0.639195613833295
User 47506 AUC after training: 0.6390997622881681
User 47506 does not improve AUC. Reverting changes.
Training on augumented user 16590 15/50 current_auc = 0.639195613833295
User 16590 AUC after training: 0.6389655701249904
User 16590 does not improve AUC. Reverting changes.
Training on augumented user 16520 16/50 current_auc = 0.639195613833295
User 16520 AUC after training: 0.639138102906219
User 16520 does not improve AUC. Reverting changes.
Training on augumented user 81873 17/50 current_auc = 0.639195613833295
User 81873 AUC after training: 0.6388313779618127
User 81873 does not improve AUC. Reverting changes.
Training on augumented user 52374 18/50 current_auc = 0.639195613833295
User 52374 AUC after training: 0.6386780154896097
User 52374 does not improve AUC. Reverting changes.
Training on augumented user 84198 19/50 current_auc = 0.639195613833295
User 84198 AUC after training: 0.6386396748715589
User 84198 does not improve AUC. Reverting changes.
Training on augumented user 75609 20/50 current_auc = 0.639195613833295
User 75609 AUC after training: 0.6389655701249903
User 75609 does not improve AUC. Reverting changes.
Training on augumented user 39398 21/50 current_auc = 0.639195613833295
User 39398 AUC after training: 0.6387738670347366
User 39398 does not improve AUC. Reverting changes.
Training on augumented user 2665 22/50 current_auc = 0.639195613833295
User 2665 AUC after training: 0.6389655701249904
User 2665 does not improve AUC. Reverting changes.
Training on augumented user 124941 23/50 current_auc = 0.639195613833295
User 124941 AUC after training: 0.6390039107430412
User 124941 does not improve AUC. Reverting changes.
Training on augumented user 108112 24/50 current_auc = 0.639195613833295
User 108112 AUC after training: 0.6389080591979143
User 108112 does not improve AUC. Reverting changes.
Training on augumented user 105109 25/50 current_auc = 0.639195613833295
User 105109 AUC after training: 0.6388888888888888
User 105109 does not improve AUC. Reverting changes.
Training on augumented user 17014 26/50 current_auc = 0.639195613833295
User 17014 AUC after training: 0.6385629936354575
User 17014 does not improve AUC. Reverting changes.
Training on augumented user 32692 27/50 current_auc = 0.639195613833295
User 32692 AUC after training: 0.6390614216701175
User 32692 does not improve AUC. Reverting changes.
Training on augumented user 6770 28/50 current_auc = 0.639195613833295
User 6770 AUC after training: 0.6388313779618128
User 6770 does not improve AUC. Reverting changes.
Training on augumented user 73003 29/50 current_auc = 0.639195613833295
User 73003 AUC after training: 0.6386205045625335
User 73003 does not improve AUC. Reverting changes.
Training on augumented user 118350 30/50 current_auc = 0.639195613833295
User 118350 AUC after training: 0.6389080591979144
User 118350 does not improve AUC. Reverting changes.
Training on augumented user 49706 31/50 current_auc = 0.639195613833295
User 49706 AUC after training: 0.6389847404340158
User 49706 does not improve AUC. Reverting changes.
Training on augumented user 83828 32/50 current_auc = 0.639195613833295
User 83828 AUC after training: 0.6390422513610919
User 83828 does not improve AUC. Reverting changes.
Training on augumented user 130749 33/50 current_auc = 0.639195613833295
User 130749 AUC after training: 0.6388505482708381
User 130749 does not improve AUC. Reverting changes.
Training on augumented user 53600 34/50 current_auc = 0.639195613833295
User 53600 AUC after training: 0.6386205045625335
User 53600 does not improve AUC. Reverting changes.
Training on augumented user 66376 35/50 current_auc = 0.639195613833295
User 66376 AUC after training: 0.6388697185798636
User 66376 does not improve AUC. Reverting changes.
Training on augumented user 8388 36/50 current_auc = 0.639195613833295
User 8388 AUC after training: 0.639042251361092
User 8388 does not improve AUC. Reverting changes.
Training on augumented user 17737 37/50 current_auc = 0.639195613833295
User 17737 AUC after training: 0.638946399815965
User 17737 does not improve AUC. Reverting changes.
Training on augumented user 131675 38/50 current_auc = 0.639195613833295
User 131675 AUC after training: 0.6392722950693965
User 131675 improves AUC. Keeping the model.
Training on augumented user 31950 39/50 current_auc = 0.6392722950693965
User 31950 AUC after training: 0.6388888888888888
User 31950 does not improve AUC. Reverting changes.
Training on augumented user 100048 40/50 current_auc = 0.6392722950693965
User 100048 AUC after training: 0.6389272295069396
User 100048 does not improve AUC. Reverting changes.
Training on augumented user 62367 41/50 current_auc = 0.6392722950693965
User 62367 AUC after training: 0.6393873169235488
User 62367 improves AUC. Keeping the model.
Training on augumented user 79011 42/50 current_auc = 0.6393873169235488
User 79011 AUC after training: 0.6382562686910513
User 79011 does not improve AUC. Reverting changes.
Training on augumented user 54790 43/50 current_auc = 0.6393873169235488
User 54790 AUC after training: 0.6389655701249903
User 54790 does not improve AUC. Reverting changes.
Training on augumented user 17267 44/50 current_auc = 0.6393873169235488
User 17267 AUC after training: 0.6393873169235489
User 17267 improves AUC. Keeping the model.
Training on augumented user 72364 45/50 current_auc = 0.6393873169235489
User 72364 AUC after training: 0.6391572732152443
User 72364 does not improve AUC. Reverting changes.
Training on augumented user 12139 46/50 current_auc = 0.6393873169235489
User 12139 AUC after training: 0.639348976305498
User 12139 does not improve AUC. Reverting changes.
Training on augumented user 131383 47/50 current_auc = 0.6393873169235489
User 131383 AUC after training: 0.639195613833295
User 131383 does not improve AUC. Reverting changes.
Training on augumented user 96028 48/50 current_auc = 0.6393873169235489
User 96028 AUC after training: 0.6394639981596504
User 96028 improves AUC. Keeping the model.
Training on augumented user 4773 49/50 current_auc = 0.6394639981596504
User 4773 AUC after training: 0.639348976305498
User 4773 does not improve AUC. Reverting changes.
[2024-12-02 19:04:03.401849] start test user 30767 149/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:03.955572] start test user 30767 149/568 recall augumented users by random, augumented_users = [82461, 54361, 45482, 81657, 8176, 50995, 21171, 75363, 89315, 101342, 78407, 34554, 25349, 8153, 59304, 86736, 80170, 45174, 80337, 18244, 94396, 116776, 4229, 19253, 50549, 35267, 36955, 61663, 27846, 99565, 78696, 44097, 34304, 122505, 109268, 47118, 67069, 11892, 91136, 115986, 24736, 95348, 126200, 124278, 42029, 16995, 40811, 134373, 63097, 10982]
[2024-12-02 19:04:03.970462] user = 30767 Cloud 149/568
[2024-12-02 19:04:03.980853] user = 30767 Local 149/568
[2024-12-02 19:04:04.038915] user = 30767 Local+ 149/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:06.260256] user = 30767 MPDA- 149/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7406593406593407
Training on augumented user 82461 0/50 current_auc = 0.7406593406593407
User 82461 AUC after training: 0.7406593406593407
User 82461 does not improve AUC. Reverting changes.
Training on augumented user 54361 1/50 current_auc = 0.7406593406593407
User 54361 AUC after training: 0.7428571428571429
User 54361 improves AUC. Keeping the model.
Training on augumented user 45482 2/50 current_auc = 0.7428571428571429
User 45482 AUC after training: 0.7406593406593407
User 45482 does not improve AUC. Reverting changes.
Training on augumented user 81657 3/50 current_auc = 0.7428571428571429
User 81657 AUC after training: 0.7428571428571429
User 81657 does not improve AUC. Reverting changes.
Training on augumented user 8176 4/50 current_auc = 0.7428571428571429
User 8176 AUC after training: 0.7406593406593407
User 8176 does not improve AUC. Reverting changes.
Training on augumented user 50995 5/50 current_auc = 0.7428571428571429
User 50995 AUC after training: 0.7428571428571429
User 50995 does not improve AUC. Reverting changes.
Training on augumented user 21171 6/50 current_auc = 0.7428571428571429
User 21171 AUC after training: 0.7406593406593407
User 21171 does not improve AUC. Reverting changes.
Training on augumented user 75363 7/50 current_auc = 0.7428571428571429
User 75363 AUC after training: 0.7428571428571429
User 75363 does not improve AUC. Reverting changes.
Training on augumented user 89315 8/50 current_auc = 0.7428571428571429
User 89315 AUC after training: 0.7406593406593407
User 89315 does not improve AUC. Reverting changes.
Training on augumented user 101342 9/50 current_auc = 0.7428571428571429
User 101342 AUC after training: 0.7428571428571429
User 101342 does not improve AUC. Reverting changes.
Training on augumented user 78407 10/50 current_auc = 0.7428571428571429
User 78407 AUC after training: 0.7406593406593407
User 78407 does not improve AUC. Reverting changes.
Training on augumented user 34554 11/50 current_auc = 0.7428571428571429
User 34554 AUC after training: 0.7428571428571429
User 34554 does not improve AUC. Reverting changes.
Training on augumented user 25349 12/50 current_auc = 0.7428571428571429
User 25349 AUC after training: 0.7406593406593407
User 25349 does not improve AUC. Reverting changes.
Training on augumented user 8153 13/50 current_auc = 0.7428571428571429
User 8153 AUC after training: 0.7406593406593407
User 8153 does not improve AUC. Reverting changes.
Training on augumented user 59304 14/50 current_auc = 0.7428571428571429
User 59304 AUC after training: 0.7384615384615385
User 59304 does not improve AUC. Reverting changes.
Training on augumented user 86736 15/50 current_auc = 0.7428571428571429
User 86736 AUC after training: 0.7384615384615385
User 86736 does not improve AUC. Reverting changes.
Training on augumented user 80170 16/50 current_auc = 0.7428571428571429
User 80170 AUC after training: 0.7428571428571429
User 80170 does not improve AUC. Reverting changes.
Training on augumented user 45174 17/50 current_auc = 0.7428571428571429
User 45174 AUC after training: 0.7384615384615385
User 45174 does not improve AUC. Reverting changes.
Training on augumented user 80337 18/50 current_auc = 0.7428571428571429
User 80337 AUC after training: 0.7406593406593407
User 80337 does not improve AUC. Reverting changes.
Training on augumented user 18244 19/50 current_auc = 0.7428571428571429
User 18244 AUC after training: 0.7406593406593407
User 18244 does not improve AUC. Reverting changes.
Training on augumented user 94396 20/50 current_auc = 0.7428571428571429
User 94396 AUC after training: 0.7428571428571429
User 94396 does not improve AUC. Reverting changes.
Training on augumented user 116776 21/50 current_auc = 0.7428571428571429
User 116776 AUC after training: 0.7406593406593407
User 116776 does not improve AUC. Reverting changes.
Training on augumented user 4229 22/50 current_auc = 0.7428571428571429
User 4229 AUC after training: 0.7384615384615385
User 4229 does not improve AUC. Reverting changes.
Training on augumented user 19253 23/50 current_auc = 0.7428571428571429
User 19253 AUC after training: 0.7384615384615385
User 19253 does not improve AUC. Reverting changes.
Training on augumented user 50549 24/50 current_auc = 0.7428571428571429
User 50549 AUC after training: 0.7406593406593407
User 50549 does not improve AUC. Reverting changes.
Training on augumented user 35267 25/50 current_auc = 0.7428571428571429
User 35267 AUC after training: 0.7450549450549451
User 35267 improves AUC. Keeping the model.
Training on augumented user 36955 26/50 current_auc = 0.7450549450549451
User 36955 AUC after training: 0.7406593406593407
User 36955 does not improve AUC. Reverting changes.
Training on augumented user 61663 27/50 current_auc = 0.7450549450549451
User 61663 AUC after training: 0.7417582417582418
User 61663 does not improve AUC. Reverting changes.
Training on augumented user 27846 28/50 current_auc = 0.7450549450549451
User 27846 AUC after training: 0.7428571428571429
User 27846 does not improve AUC. Reverting changes.
Training on augumented user 99565 29/50 current_auc = 0.7450549450549451
User 99565 AUC after training: 0.7428571428571429
User 99565 does not improve AUC. Reverting changes.
Training on augumented user 78696 30/50 current_auc = 0.7450549450549451
User 78696 AUC after training: 0.7450549450549451
User 78696 does not improve AUC. Reverting changes.
Training on augumented user 44097 31/50 current_auc = 0.7450549450549451
User 44097 AUC after training: 0.7428571428571429
User 44097 does not improve AUC. Reverting changes.
Training on augumented user 34304 32/50 current_auc = 0.7450549450549451
User 34304 AUC after training: 0.7428571428571429
User 34304 does not improve AUC. Reverting changes.
Training on augumented user 122505 33/50 current_auc = 0.7450549450549451
User 122505 AUC after training: 0.7472527472527473
User 122505 improves AUC. Keeping the model.
Training on augumented user 109268 34/50 current_auc = 0.7472527472527473
User 109268 AUC after training: 0.7461538461538462
User 109268 does not improve AUC. Reverting changes.
Training on augumented user 47118 35/50 current_auc = 0.7472527472527473
User 47118 AUC after training: 0.7472527472527473
User 47118 does not improve AUC. Reverting changes.
Training on augumented user 67069 36/50 current_auc = 0.7472527472527473
User 67069 AUC after training: 0.7472527472527473
User 67069 does not improve AUC. Reverting changes.
Training on augumented user 11892 37/50 current_auc = 0.7472527472527473
User 11892 AUC after training: 0.7461538461538462
User 11892 does not improve AUC. Reverting changes.
Training on augumented user 91136 38/50 current_auc = 0.7472527472527473
User 91136 AUC after training: 0.7450549450549451
User 91136 does not improve AUC. Reverting changes.
Training on augumented user 115986 39/50 current_auc = 0.7472527472527473
User 115986 AUC after training: 0.7395604395604396
User 115986 does not improve AUC. Reverting changes.
Training on augumented user 24736 40/50 current_auc = 0.7472527472527473
User 24736 AUC after training: 0.7472527472527473
User 24736 does not improve AUC. Reverting changes.
Training on augumented user 95348 41/50 current_auc = 0.7472527472527473
User 95348 AUC after training: 0.743956043956044
User 95348 does not improve AUC. Reverting changes.
Training on augumented user 126200 42/50 current_auc = 0.7472527472527473
User 126200 AUC after training: 0.7450549450549451
User 126200 does not improve AUC. Reverting changes.
Training on augumented user 124278 43/50 current_auc = 0.7472527472527473
User 124278 AUC after training: 0.7406593406593407
User 124278 does not improve AUC. Reverting changes.
Training on augumented user 42029 44/50 current_auc = 0.7472527472527473
User 42029 AUC after training: 0.7417582417582418
User 42029 does not improve AUC. Reverting changes.
Training on augumented user 16995 45/50 current_auc = 0.7472527472527473
User 16995 AUC after training: 0.743956043956044
User 16995 does not improve AUC. Reverting changes.
Training on augumented user 40811 46/50 current_auc = 0.7472527472527473
User 40811 AUC after training: 0.7472527472527473
User 40811 does not improve AUC. Reverting changes.
Training on augumented user 134373 47/50 current_auc = 0.7472527472527473
User 134373 AUC after training: 0.7472527472527473
User 134373 does not improve AUC. Reverting changes.
Training on augumented user 63097 48/50 current_auc = 0.7472527472527473
User 63097 AUC after training: 0.7395604395604396
User 63097 does not improve AUC. Reverting changes.
Training on augumented user 10982 49/50 current_auc = 0.7472527472527473
User 10982 AUC after training: 0.743956043956044
User 10982 does not improve AUC. Reverting changes.
[2024-12-02 19:04:34.465155] start test user 30778 150/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:34.868020] start test user 30778 150/568 recall augumented users by random, augumented_users = [21028, 97496, 101163, 46135, 24675, 9567, 130258, 27871, 23160, 19920, 82791, 11459, 84035, 83865, 136234, 21884, 23614, 7591, 34105, 118570, 60891, 23004, 43047, 131890, 3142, 101486, 62796, 53660, 91899, 71614, 90881, 49962, 50089, 18626, 92585, 98066, 25809, 132906, 78270, 5166, 22445, 124587, 36323, 125574, 2042, 33538, 124789, 99411, 37480, 132667]
[2024-12-02 19:04:34.883240] user = 30778 Cloud 150/568
[2024-12-02 19:04:34.918568] user = 30778 Local 150/568
[2024-12-02 19:04:34.989851] user = 30778 Local+ 150/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:37.177822] user = 30778 MPDA- 150/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6924580795548537
Training on augumented user 21028 0/50 current_auc = 0.6924580795548537
User 21028 AUC after training: 0.6926836604255959
User 21028 improves AUC. Keeping the model.
Training on augumented user 97496 1/50 current_auc = 0.6926836604255959
User 97496 AUC after training: 0.6927588540491767
User 97496 improves AUC. Keeping the model.
Training on augumented user 101163 2/50 current_auc = 0.6927588540491767
User 101163 AUC after training: 0.6921949018723212
User 101163 does not improve AUC. Reverting changes.
Training on augumented user 46135 3/50 current_auc = 0.6927588540491767
User 46135 AUC after training: 0.6931724189788706
User 46135 improves AUC. Keeping the model.
Training on augumented user 24675 4/50 current_auc = 0.6931724189788706
User 24675 AUC after training: 0.6920069178133694
User 24675 does not improve AUC. Reverting changes.
Training on augumented user 9567 5/50 current_auc = 0.6931724189788706
User 9567 AUC after training: 0.6934731934731935
User 9567 improves AUC. Keeping the model.
Training on augumented user 130258 6/50 current_auc = 0.6934731934731935
User 130258 AUC after training: 0.6933604030378224
User 130258 does not improve AUC. Reverting changes.
Training on augumented user 27871 7/50 current_auc = 0.6934731934731935
User 27871 AUC after training: 0.6917061433190466
User 27871 does not improve AUC. Reverting changes.
Training on augumented user 23160 8/50 current_auc = 0.6934731934731935
User 23160 AUC after training: 0.6929468381081284
User 23160 does not improve AUC. Reverting changes.
Training on augumented user 19920 9/50 current_auc = 0.6934731934731935
User 19920 AUC after training: 0.693210015790661
User 19920 does not improve AUC. Reverting changes.
Training on augumented user 82791 10/50 current_auc = 0.6934731934731935
User 82791 AUC after training: 0.6935107902849837
User 82791 improves AUC. Keeping the model.
Training on augumented user 11459 11/50 current_auc = 0.6935107902849837
User 11459 AUC after training: 0.6930972253552898
User 11459 does not improve AUC. Reverting changes.
Training on augumented user 84035 12/50 current_auc = 0.6935107902849837
User 84035 AUC after training: 0.6936235807203548
User 84035 improves AUC. Keeping the model.
Training on augumented user 83865 13/50 current_auc = 0.6936235807203548
User 83865 AUC after training: 0.692796450860967
User 83865 does not improve AUC. Reverting changes.
Training on augumented user 136234 14/50 current_auc = 0.6936235807203548
User 136234 AUC after training: 0.6930972253552898
User 136234 does not improve AUC. Reverting changes.
Training on augumented user 21884 15/50 current_auc = 0.6936235807203548
User 21884 AUC after training: 0.6920069178133694
User 21884 does not improve AUC. Reverting changes.
Training on augumented user 23614 16/50 current_auc = 0.6936235807203548
User 23614 AUC after training: 0.6928716444845477
User 23614 does not improve AUC. Reverting changes.
Training on augumented user 7591 17/50 current_auc = 0.6936235807203548
User 7591 AUC after training: 0.693322806226032
User 7591 does not improve AUC. Reverting changes.
Training on augumented user 34105 18/50 current_auc = 0.6936235807203548
User 34105 AUC after training: 0.693623580720355
User 34105 improves AUC. Keeping the model.
Training on augumented user 118570 19/50 current_auc = 0.693623580720355
User 118570 AUC after training: 0.6931724189788705
User 118570 does not improve AUC. Reverting changes.
Training on augumented user 60891 20/50 current_auc = 0.693623580720355
User 60891 AUC after training: 0.6936611775321453
User 60891 improves AUC. Keeping the model.
Training on augumented user 23004 21/50 current_auc = 0.6936611775321453
User 23004 AUC after training: 0.6932476126024514
User 23004 does not improve AUC. Reverting changes.
Training on augumented user 43047 22/50 current_auc = 0.6936611775321453
User 43047 AUC after training: 0.6932476126024513
User 43047 does not improve AUC. Reverting changes.
Training on augumented user 131890 23/50 current_auc = 0.6936611775321453
User 131890 AUC after training: 0.6935859839085645
User 131890 does not improve AUC. Reverting changes.
Training on augumented user 3142 24/50 current_auc = 0.6936611775321453
User 3142 AUC after training: 0.6933604030378224
User 3142 does not improve AUC. Reverting changes.
Training on augumented user 101486 25/50 current_auc = 0.6936611775321453
User 101486 AUC after training: 0.6935859839085645
User 101486 does not improve AUC. Reverting changes.
Training on augumented user 62796 26/50 current_auc = 0.6936611775321453
User 62796 AUC after training: 0.6935483870967742
User 62796 does not improve AUC. Reverting changes.
Training on augumented user 53660 27/50 current_auc = 0.6936611775321453
User 53660 AUC after training: 0.6925332731784345
User 53660 does not improve AUC. Reverting changes.
Training on augumented user 91899 28/50 current_auc = 0.6936611775321453
User 91899 AUC after training: 0.6934731934731935
User 91899 does not improve AUC. Reverting changes.
Training on augumented user 71614 29/50 current_auc = 0.6936611775321453
User 71614 AUC after training: 0.6936235807203549
User 71614 does not improve AUC. Reverting changes.
Training on augumented user 90881 30/50 current_auc = 0.6936611775321453
User 90881 AUC after training: 0.6933604030378224
User 90881 does not improve AUC. Reverting changes.
Training on augumented user 49962 31/50 current_auc = 0.6936611775321453
User 49962 AUC after training: 0.6929844349199188
User 49962 does not improve AUC. Reverting changes.
Training on augumented user 50089 32/50 current_auc = 0.6936611775321453
User 50089 AUC after training: 0.6922324986841115
User 50089 does not improve AUC. Reverting changes.
Training on augumented user 18626 33/50 current_auc = 0.6936611775321453
User 18626 AUC after training: 0.6938491615910971
User 18626 improves AUC. Keeping the model.
Training on augumented user 92585 34/50 current_auc = 0.6938491615910971
User 92585 AUC after training: 0.6936987743439357
User 92585 does not improve AUC. Reverting changes.
Training on augumented user 98066 35/50 current_auc = 0.6938491615910971
User 98066 AUC after training: 0.6938491615910971
User 98066 does not improve AUC. Reverting changes.
Training on augumented user 25809 36/50 current_auc = 0.6938491615910971
User 25809 AUC after training: 0.6921949018723212
User 25809 does not improve AUC. Reverting changes.
Training on augumented user 132906 37/50 current_auc = 0.6938491615910971
User 132906 AUC after training: 0.693210015790661
User 132906 does not improve AUC. Reverting changes.
Training on augumented user 78270 38/50 current_auc = 0.6938491615910971
User 78270 AUC after training: 0.6926084668020152
User 78270 does not improve AUC. Reverting changes.
Training on augumented user 5166 39/50 current_auc = 0.6938491615910971
User 5166 AUC after training: 0.6921573050605309
User 5166 does not improve AUC. Reverting changes.
Training on augumented user 22445 40/50 current_auc = 0.6938491615910971
User 22445 AUC after training: 0.6934731934731935
User 22445 does not improve AUC. Reverting changes.
Training on augumented user 124587 41/50 current_auc = 0.6938491615910971
User 124587 AUC after training: 0.6930596285434996
User 124587 does not improve AUC. Reverting changes.
Training on augumented user 36323 42/50 current_auc = 0.6938491615910971
User 36323 AUC after training: 0.6926836604255959
User 36323 does not improve AUC. Reverting changes.
Training on augumented user 125574 43/50 current_auc = 0.6938491615910971
User 125574 AUC after training: 0.6932852094142417
User 125574 does not improve AUC. Reverting changes.
Training on augumented user 2042 44/50 current_auc = 0.6938491615910971
User 2042 AUC after training: 0.6926836604255959
User 2042 does not improve AUC. Reverting changes.
Training on augumented user 33538 45/50 current_auc = 0.6938491615910971
User 33538 AUC after training: 0.6931348221670803
User 33538 does not improve AUC. Reverting changes.
Training on augumented user 124789 46/50 current_auc = 0.6938491615910971
User 124789 AUC after training: 0.6932852094142418
User 124789 does not improve AUC. Reverting changes.
Training on augumented user 99411 47/50 current_auc = 0.6938491615910971
User 99411 AUC after training: 0.6935483870967742
User 99411 does not improve AUC. Reverting changes.
Training on augumented user 37480 48/50 current_auc = 0.6938491615910971
User 37480 AUC after training: 0.693322806226032
User 37480 does not improve AUC. Reverting changes.
Training on augumented user 132667 49/50 current_auc = 0.6938491615910971
User 132667 AUC after training: 0.6918941273779984
User 132667 does not improve AUC. Reverting changes.
[2024-12-02 19:05:10.461820] start test user 30817 151/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:10.865438] start test user 30817 151/568 recall augumented users by random, augumented_users = [118176, 129663, 96342, 132210, 124878, 79104, 32539, 137664, 40394, 117395, 61049, 42121, 2082, 81557, 135004, 85452, 25611, 73488, 90155, 78190, 116308, 121500, 58307, 64755, 15789, 68507, 116066, 1076, 60405, 99852, 85136, 46028, 96703, 61296, 27571, 114541, 50763, 26470, 82055, 15899, 91669, 81589, 94828, 27381, 3706, 30962, 84718, 16622, 18767, 66520]
[2024-12-02 19:05:10.879301] user = 30817 Cloud 151/568
[2024-12-02 19:05:10.888840] user = 30817 Local 151/568
[2024-12-02 19:05:10.914995] user = 30817 Local+ 151/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:14.095032] user = 30817 MPDA- 151/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8571428571428572
Training on augumented user 118176 0/50 current_auc = 0.8571428571428572
User 118176 AUC after training: 0.8571428571428572
User 118176 does not improve AUC. Reverting changes.
Training on augumented user 129663 1/50 current_auc = 0.8571428571428572
User 129663 AUC after training: 0.8571428571428572
User 129663 does not improve AUC. Reverting changes.
Training on augumented user 96342 2/50 current_auc = 0.8571428571428572
User 96342 AUC after training: 0.8571428571428572
User 96342 does not improve AUC. Reverting changes.
Training on augumented user 132210 3/50 current_auc = 0.8571428571428572
User 132210 AUC after training: 0.8571428571428572
User 132210 does not improve AUC. Reverting changes.
Training on augumented user 124878 4/50 current_auc = 0.8571428571428572
User 124878 AUC after training: 0.8571428571428572
User 124878 does not improve AUC. Reverting changes.
Training on augumented user 79104 5/50 current_auc = 0.8571428571428572
User 79104 AUC after training: 0.861904761904762
User 79104 improves AUC. Keeping the model.
Training on augumented user 32539 6/50 current_auc = 0.861904761904762
User 32539 AUC after training: 0.861904761904762
User 32539 does not improve AUC. Reverting changes.
Training on augumented user 137664 7/50 current_auc = 0.861904761904762
User 137664 AUC after training: 0.861904761904762
User 137664 does not improve AUC. Reverting changes.
Training on augumented user 40394 8/50 current_auc = 0.861904761904762
User 40394 AUC after training: 0.861904761904762
User 40394 does not improve AUC. Reverting changes.
Training on augumented user 117395 9/50 current_auc = 0.861904761904762
User 117395 AUC after training: 0.8547619047619048
User 117395 does not improve AUC. Reverting changes.
Training on augumented user 61049 10/50 current_auc = 0.861904761904762
User 61049 AUC after training: 0.861904761904762
User 61049 does not improve AUC. Reverting changes.
Training on augumented user 42121 11/50 current_auc = 0.861904761904762
User 42121 AUC after training: 0.861904761904762
User 42121 does not improve AUC. Reverting changes.
Training on augumented user 2082 12/50 current_auc = 0.861904761904762
User 2082 AUC after training: 0.8571428571428572
User 2082 does not improve AUC. Reverting changes.
Training on augumented user 81557 13/50 current_auc = 0.861904761904762
User 81557 AUC after training: 0.861904761904762
User 81557 does not improve AUC. Reverting changes.
Training on augumented user 135004 14/50 current_auc = 0.861904761904762
User 135004 AUC after training: 0.861904761904762
User 135004 does not improve AUC. Reverting changes.
Training on augumented user 85452 15/50 current_auc = 0.861904761904762
User 85452 AUC after training: 0.861904761904762
User 85452 does not improve AUC. Reverting changes.
Training on augumented user 25611 16/50 current_auc = 0.861904761904762
User 25611 AUC after training: 0.861904761904762
User 25611 does not improve AUC. Reverting changes.
Training on augumented user 73488 17/50 current_auc = 0.861904761904762
User 73488 AUC after training: 0.861904761904762
User 73488 does not improve AUC. Reverting changes.
Training on augumented user 90155 18/50 current_auc = 0.861904761904762
User 90155 AUC after training: 0.861904761904762
User 90155 does not improve AUC. Reverting changes.
Training on augumented user 78190 19/50 current_auc = 0.861904761904762
User 78190 AUC after training: 0.861904761904762
User 78190 does not improve AUC. Reverting changes.
Training on augumented user 116308 20/50 current_auc = 0.861904761904762
User 116308 AUC after training: 0.861904761904762
User 116308 does not improve AUC. Reverting changes.
Training on augumented user 121500 21/50 current_auc = 0.861904761904762
User 121500 AUC after training: 0.861904761904762
User 121500 does not improve AUC. Reverting changes.
Training on augumented user 58307 22/50 current_auc = 0.861904761904762
User 58307 AUC after training: 0.861904761904762
User 58307 does not improve AUC. Reverting changes.
Training on augumented user 64755 23/50 current_auc = 0.861904761904762
User 64755 AUC after training: 0.861904761904762
User 64755 does not improve AUC. Reverting changes.
Training on augumented user 15789 24/50 current_auc = 0.861904761904762
User 15789 AUC after training: 0.8666666666666667
User 15789 improves AUC. Keeping the model.
Training on augumented user 68507 25/50 current_auc = 0.8666666666666667
User 68507 AUC after training: 0.8666666666666667
User 68507 does not improve AUC. Reverting changes.
Training on augumented user 116066 26/50 current_auc = 0.8666666666666667
User 116066 AUC after training: 0.8666666666666667
User 116066 does not improve AUC. Reverting changes.
Training on augumented user 1076 27/50 current_auc = 0.8666666666666667
User 1076 AUC after training: 0.8666666666666667
User 1076 does not improve AUC. Reverting changes.
Training on augumented user 60405 28/50 current_auc = 0.8666666666666667
User 60405 AUC after training: 0.8666666666666667
User 60405 does not improve AUC. Reverting changes.
Training on augumented user 99852 29/50 current_auc = 0.8666666666666667
User 99852 AUC after training: 0.8666666666666667
User 99852 does not improve AUC. Reverting changes.
Training on augumented user 85136 30/50 current_auc = 0.8666666666666667
User 85136 AUC after training: 0.8666666666666667
User 85136 does not improve AUC. Reverting changes.
Training on augumented user 46028 31/50 current_auc = 0.8666666666666667
User 46028 AUC after training: 0.8666666666666667
User 46028 does not improve AUC. Reverting changes.
Training on augumented user 96703 32/50 current_auc = 0.8666666666666667
User 96703 AUC after training: 0.8666666666666667
User 96703 does not improve AUC. Reverting changes.
Training on augumented user 61296 33/50 current_auc = 0.8666666666666667
User 61296 AUC after training: 0.8666666666666667
User 61296 does not improve AUC. Reverting changes.
Training on augumented user 27571 34/50 current_auc = 0.8666666666666667
User 27571 AUC after training: 0.8666666666666667
User 27571 does not improve AUC. Reverting changes.
Training on augumented user 114541 35/50 current_auc = 0.8666666666666667
User 114541 AUC after training: 0.8666666666666667
User 114541 does not improve AUC. Reverting changes.
Training on augumented user 50763 36/50 current_auc = 0.8666666666666667
User 50763 AUC after training: 0.8666666666666667
User 50763 does not improve AUC. Reverting changes.
Training on augumented user 26470 37/50 current_auc = 0.8666666666666667
User 26470 AUC after training: 0.8666666666666667
User 26470 does not improve AUC. Reverting changes.
Training on augumented user 82055 38/50 current_auc = 0.8666666666666667
User 82055 AUC after training: 0.8642857142857143
User 82055 does not improve AUC. Reverting changes.
Training on augumented user 15899 39/50 current_auc = 0.8666666666666667
User 15899 AUC after training: 0.8666666666666667
User 15899 does not improve AUC. Reverting changes.
Training on augumented user 91669 40/50 current_auc = 0.8666666666666667
User 91669 AUC after training: 0.8666666666666667
User 91669 does not improve AUC. Reverting changes.
Training on augumented user 81589 41/50 current_auc = 0.8666666666666667
User 81589 AUC after training: 0.8666666666666667
User 81589 does not improve AUC. Reverting changes.
Training on augumented user 94828 42/50 current_auc = 0.8666666666666667
User 94828 AUC after training: 0.8666666666666667
User 94828 does not improve AUC. Reverting changes.
Training on augumented user 27381 43/50 current_auc = 0.8666666666666667
User 27381 AUC after training: 0.8666666666666667
User 27381 does not improve AUC. Reverting changes.
Training on augumented user 3706 44/50 current_auc = 0.8666666666666667
User 3706 AUC after training: 0.8666666666666667
User 3706 does not improve AUC. Reverting changes.
Training on augumented user 30962 45/50 current_auc = 0.8666666666666667
User 30962 AUC after training: 0.8666666666666667
User 30962 does not improve AUC. Reverting changes.
Training on augumented user 84718 46/50 current_auc = 0.8666666666666667
User 84718 AUC after training: 0.8666666666666667
User 84718 does not improve AUC. Reverting changes.
Training on augumented user 16622 47/50 current_auc = 0.8666666666666667
User 16622 AUC after training: 0.8666666666666667
User 16622 does not improve AUC. Reverting changes.
Training on augumented user 18767 48/50 current_auc = 0.8666666666666667
User 18767 AUC after training: 0.8666666666666667
User 18767 does not improve AUC. Reverting changes.
Training on augumented user 66520 49/50 current_auc = 0.8666666666666667
User 66520 AUC after training: 0.8666666666666667
User 66520 does not improve AUC. Reverting changes.
[2024-12-02 19:05:46.328853] start test user 30829 152/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:46.750941] start test user 30829 152/568 recall augumented users by random, augumented_users = [128827, 99608, 48437, 43582, 45680, 78380, 9723, 18292, 44498, 122856, 113767, 8134, 19200, 115287, 17961, 128706, 14075, 105072, 69252, 2186, 110825, 20449, 53133, 29371, 64502, 57294, 134201, 83686, 80295, 136683, 127568, 83195, 32348, 105324, 120927, 86404, 93563, 115624, 90438, 27774, 19606, 47874, 34200, 91636, 67150, 126802, 35474, 133854, 98196, 133695]
[2024-12-02 19:05:46.766205] user = 30829 Cloud 152/568
[2024-12-02 19:05:46.775796] user = 30829 Local 152/568
[2024-12-02 19:05:46.809139] user = 30829 Local+ 152/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:48.338055] user = 30829 MPDA- 152/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 128827 0/50 current_auc = 1.0
User 128827 AUC after training: 1.0
User 128827 does not improve AUC. Reverting changes.
Training on augumented user 99608 1/50 current_auc = 1.0
User 99608 AUC after training: 1.0
User 99608 does not improve AUC. Reverting changes.
Training on augumented user 48437 2/50 current_auc = 1.0
User 48437 AUC after training: 1.0
User 48437 does not improve AUC. Reverting changes.
Training on augumented user 43582 3/50 current_auc = 1.0
User 43582 AUC after training: 1.0
User 43582 does not improve AUC. Reverting changes.
Training on augumented user 45680 4/50 current_auc = 1.0
User 45680 AUC after training: 1.0
User 45680 does not improve AUC. Reverting changes.
Training on augumented user 78380 5/50 current_auc = 1.0
User 78380 AUC after training: 1.0
User 78380 does not improve AUC. Reverting changes.
Training on augumented user 9723 6/50 current_auc = 1.0
User 9723 AUC after training: 1.0
User 9723 does not improve AUC. Reverting changes.
Training on augumented user 18292 7/50 current_auc = 1.0
User 18292 AUC after training: 1.0
User 18292 does not improve AUC. Reverting changes.
Training on augumented user 44498 8/50 current_auc = 1.0
User 44498 AUC after training: 1.0
User 44498 does not improve AUC. Reverting changes.
Training on augumented user 122856 9/50 current_auc = 1.0
User 122856 AUC after training: 1.0
User 122856 does not improve AUC. Reverting changes.
Training on augumented user 113767 10/50 current_auc = 1.0
User 113767 AUC after training: 1.0
User 113767 does not improve AUC. Reverting changes.
Training on augumented user 8134 11/50 current_auc = 1.0
User 8134 AUC after training: 1.0
User 8134 does not improve AUC. Reverting changes.
Training on augumented user 19200 12/50 current_auc = 1.0
User 19200 AUC after training: 1.0
User 19200 does not improve AUC. Reverting changes.
Training on augumented user 115287 13/50 current_auc = 1.0
User 115287 AUC after training: 1.0
User 115287 does not improve AUC. Reverting changes.
Training on augumented user 17961 14/50 current_auc = 1.0
User 17961 AUC after training: 1.0
User 17961 does not improve AUC. Reverting changes.
Training on augumented user 128706 15/50 current_auc = 1.0
User 128706 AUC after training: 1.0
User 128706 does not improve AUC. Reverting changes.
Training on augumented user 14075 16/50 current_auc = 1.0
User 14075 AUC after training: 1.0
User 14075 does not improve AUC. Reverting changes.
Training on augumented user 105072 17/50 current_auc = 1.0
User 105072 AUC after training: 1.0
User 105072 does not improve AUC. Reverting changes.
Training on augumented user 69252 18/50 current_auc = 1.0
User 69252 AUC after training: 1.0
User 69252 does not improve AUC. Reverting changes.
Training on augumented user 2186 19/50 current_auc = 1.0
User 2186 AUC after training: 1.0
User 2186 does not improve AUC. Reverting changes.
Training on augumented user 110825 20/50 current_auc = 1.0
User 110825 AUC after training: 1.0
User 110825 does not improve AUC. Reverting changes.
Training on augumented user 20449 21/50 current_auc = 1.0
User 20449 AUC after training: 1.0
User 20449 does not improve AUC. Reverting changes.
Training on augumented user 53133 22/50 current_auc = 1.0
User 53133 AUC after training: 1.0
User 53133 does not improve AUC. Reverting changes.
Training on augumented user 29371 23/50 current_auc = 1.0
User 29371 AUC after training: 1.0
User 29371 does not improve AUC. Reverting changes.
Training on augumented user 64502 24/50 current_auc = 1.0
User 64502 AUC after training: 1.0
User 64502 does not improve AUC. Reverting changes.
Training on augumented user 57294 25/50 current_auc = 1.0
User 57294 AUC after training: 1.0
User 57294 does not improve AUC. Reverting changes.
Training on augumented user 134201 26/50 current_auc = 1.0
User 134201 AUC after training: 1.0
User 134201 does not improve AUC. Reverting changes.
Training on augumented user 83686 27/50 current_auc = 1.0
User 83686 AUC after training: 1.0
User 83686 does not improve AUC. Reverting changes.
Training on augumented user 80295 28/50 current_auc = 1.0
User 80295 AUC after training: 1.0
User 80295 does not improve AUC. Reverting changes.
Training on augumented user 136683 29/50 current_auc = 1.0
User 136683 AUC after training: 1.0
User 136683 does not improve AUC. Reverting changes.
Training on augumented user 127568 30/50 current_auc = 1.0
User 127568 AUC after training: 1.0
User 127568 does not improve AUC. Reverting changes.
Training on augumented user 83195 31/50 current_auc = 1.0
User 83195 AUC after training: 1.0
User 83195 does not improve AUC. Reverting changes.
Training on augumented user 32348 32/50 current_auc = 1.0
User 32348 AUC after training: 1.0
User 32348 does not improve AUC. Reverting changes.
Training on augumented user 105324 33/50 current_auc = 1.0
User 105324 AUC after training: 1.0
User 105324 does not improve AUC. Reverting changes.
Training on augumented user 120927 34/50 current_auc = 1.0
User 120927 AUC after training: 1.0
User 120927 does not improve AUC. Reverting changes.
Training on augumented user 86404 35/50 current_auc = 1.0
User 86404 AUC after training: 1.0
User 86404 does not improve AUC. Reverting changes.
Training on augumented user 93563 36/50 current_auc = 1.0
User 93563 AUC after training: 1.0
User 93563 does not improve AUC. Reverting changes.
Training on augumented user 115624 37/50 current_auc = 1.0
User 115624 AUC after training: 1.0
User 115624 does not improve AUC. Reverting changes.
Training on augumented user 90438 38/50 current_auc = 1.0
User 90438 AUC after training: 1.0
User 90438 does not improve AUC. Reverting changes.
Training on augumented user 27774 39/50 current_auc = 1.0
User 27774 AUC after training: 1.0
User 27774 does not improve AUC. Reverting changes.
Training on augumented user 19606 40/50 current_auc = 1.0
User 19606 AUC after training: 1.0
User 19606 does not improve AUC. Reverting changes.
Training on augumented user 47874 41/50 current_auc = 1.0
User 47874 AUC after training: 1.0
User 47874 does not improve AUC. Reverting changes.
Training on augumented user 34200 42/50 current_auc = 1.0
User 34200 AUC after training: 1.0
User 34200 does not improve AUC. Reverting changes.
Training on augumented user 91636 43/50 current_auc = 1.0
User 91636 AUC after training: 1.0
User 91636 does not improve AUC. Reverting changes.
Training on augumented user 67150 44/50 current_auc = 1.0
User 67150 AUC after training: 1.0
User 67150 does not improve AUC. Reverting changes.
Training on augumented user 126802 45/50 current_auc = 1.0
User 126802 AUC after training: 1.0
User 126802 does not improve AUC. Reverting changes.
Training on augumented user 35474 46/50 current_auc = 1.0
User 35474 AUC after training: 1.0
User 35474 does not improve AUC. Reverting changes.
Training on augumented user 133854 47/50 current_auc = 1.0
User 133854 AUC after training: 1.0
User 133854 does not improve AUC. Reverting changes.
Training on augumented user 98196 48/50 current_auc = 1.0
User 98196 AUC after training: 1.0
User 98196 does not improve AUC. Reverting changes.
Training on augumented user 133695 49/50 current_auc = 1.0
User 133695 AUC after training: 1.0
User 133695 does not improve AUC. Reverting changes.
[2024-12-02 19:06:14.870522] start test user 30881 153/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:15.418302] start test user 30881 153/568 recall augumented users by random, augumented_users = [48095, 99950, 117886, 122838, 44218, 44338, 62820, 95060, 114820, 39835, 2139, 7956, 35880, 119493, 7453, 42151, 40156, 89021, 62819, 44536, 125243, 113053, 105777, 74078, 76088, 129019, 117133, 89076, 85503, 80767, 88196, 7187, 99009, 89867, 115738, 117285, 86106, 29385, 84300, 31392, 131690, 31688, 6349, 44219, 63946, 2398, 95431, 132250, 103770, 58966]
[2024-12-02 19:06:15.452878] user = 30881 Cloud 153/568
[2024-12-02 19:06:15.515269] user = 30881 Local 153/568
[2024-12-02 19:06:15.626674] user = 30881 Local+ 153/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:18.630514] user = 30881 MPDA- 153/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5768707482993197
Training on augumented user 48095 0/50 current_auc = 0.5768707482993197
User 48095 AUC after training: 0.5775510204081633
User 48095 improves AUC. Keeping the model.
Training on augumented user 99950 1/50 current_auc = 0.5775510204081633
User 99950 AUC after training: 0.5809523809523809
User 99950 improves AUC. Keeping the model.
Training on augumented user 117886 2/50 current_auc = 0.5809523809523809
User 117886 AUC after training: 0.580952380952381
User 117886 improves AUC. Keeping the model.
Training on augumented user 122838 3/50 current_auc = 0.580952380952381
User 122838 AUC after training: 0.5836734693877552
User 122838 improves AUC. Keeping the model.
Training on augumented user 44218 4/50 current_auc = 0.5836734693877552
User 44218 AUC after training: 0.5809523809523809
User 44218 does not improve AUC. Reverting changes.
Training on augumented user 44338 5/50 current_auc = 0.5836734693877552
User 44338 AUC after training: 0.5795918367346939
User 44338 does not improve AUC. Reverting changes.
Training on augumented user 62820 6/50 current_auc = 0.5836734693877552
User 62820 AUC after training: 0.5816326530612245
User 62820 does not improve AUC. Reverting changes.
Training on augumented user 95060 7/50 current_auc = 0.5836734693877552
User 95060 AUC after training: 0.5829931972789116
User 95060 does not improve AUC. Reverting changes.
Training on augumented user 114820 8/50 current_auc = 0.5836734693877552
User 114820 AUC after training: 0.5802721088435374
User 114820 does not improve AUC. Reverting changes.
Training on augumented user 39835 9/50 current_auc = 0.5836734693877552
User 39835 AUC after training: 0.5809523809523809
User 39835 does not improve AUC. Reverting changes.
Training on augumented user 2139 10/50 current_auc = 0.5836734693877552
User 2139 AUC after training: 0.5833333333333334
User 2139 does not improve AUC. Reverting changes.
Training on augumented user 7956 11/50 current_auc = 0.5836734693877552
User 7956 AUC after training: 0.5829931972789115
User 7956 does not improve AUC. Reverting changes.
Training on augumented user 35880 12/50 current_auc = 0.5836734693877552
User 35880 AUC after training: 0.580952380952381
User 35880 does not improve AUC. Reverting changes.
Training on augumented user 119493 13/50 current_auc = 0.5836734693877552
User 119493 AUC after training: 0.5816326530612245
User 119493 does not improve AUC. Reverting changes.
Training on augumented user 7453 14/50 current_auc = 0.5836734693877552
User 7453 AUC after training: 0.5836734693877551
User 7453 does not improve AUC. Reverting changes.
Training on augumented user 42151 15/50 current_auc = 0.5836734693877552
User 42151 AUC after training: 0.582312925170068
User 42151 does not improve AUC. Reverting changes.
Training on augumented user 40156 16/50 current_auc = 0.5836734693877552
User 40156 AUC after training: 0.5850340136054422
User 40156 improves AUC. Keeping the model.
Training on augumented user 89021 17/50 current_auc = 0.5850340136054422
User 89021 AUC after training: 0.5829931972789115
User 89021 does not improve AUC. Reverting changes.
Training on augumented user 62819 18/50 current_auc = 0.5850340136054422
User 62819 AUC after training: 0.583673469387755
User 62819 does not improve AUC. Reverting changes.
Training on augumented user 44536 19/50 current_auc = 0.5850340136054422
User 44536 AUC after training: 0.5843537414965987
User 44536 does not improve AUC. Reverting changes.
Training on augumented user 125243 20/50 current_auc = 0.5850340136054422
User 125243 AUC after training: 0.5816326530612245
User 125243 does not improve AUC. Reverting changes.
Training on augumented user 113053 21/50 current_auc = 0.5850340136054422
User 113053 AUC after training: 0.5829931972789116
User 113053 does not improve AUC. Reverting changes.
Training on augumented user 105777 22/50 current_auc = 0.5850340136054422
User 105777 AUC after training: 0.5850340136054422
User 105777 does not improve AUC. Reverting changes.
Training on augumented user 74078 23/50 current_auc = 0.5850340136054422
User 74078 AUC after training: 0.5843537414965987
User 74078 does not improve AUC. Reverting changes.
Training on augumented user 76088 24/50 current_auc = 0.5850340136054422
User 76088 AUC after training: 0.5843537414965987
User 76088 does not improve AUC. Reverting changes.
Training on augumented user 129019 25/50 current_auc = 0.5850340136054422
User 129019 AUC after training: 0.5843537414965987
User 129019 does not improve AUC. Reverting changes.
Training on augumented user 117133 26/50 current_auc = 0.5850340136054422
User 117133 AUC after training: 0.5850340136054422
User 117133 does not improve AUC. Reverting changes.
Training on augumented user 89076 27/50 current_auc = 0.5850340136054422
User 89076 AUC after training: 0.5843537414965987
User 89076 does not improve AUC. Reverting changes.
Training on augumented user 85503 28/50 current_auc = 0.5850340136054422
User 85503 AUC after training: 0.5836734693877551
User 85503 does not improve AUC. Reverting changes.
Training on augumented user 80767 29/50 current_auc = 0.5850340136054422
User 80767 AUC after training: 0.5850340136054422
User 80767 does not improve AUC. Reverting changes.
Training on augumented user 88196 30/50 current_auc = 0.5850340136054422
User 88196 AUC after training: 0.5850340136054422
User 88196 does not improve AUC. Reverting changes.
Training on augumented user 7187 31/50 current_auc = 0.5850340136054422
User 7187 AUC after training: 0.5843537414965987
User 7187 does not improve AUC. Reverting changes.
Training on augumented user 99009 32/50 current_auc = 0.5850340136054422
User 99009 AUC after training: 0.5843537414965987
User 99009 does not improve AUC. Reverting changes.
Training on augumented user 89867 33/50 current_auc = 0.5850340136054422
User 89867 AUC after training: 0.5843537414965987
User 89867 does not improve AUC. Reverting changes.
Training on augumented user 115738 34/50 current_auc = 0.5850340136054422
User 115738 AUC after training: 0.5850340136054422
User 115738 does not improve AUC. Reverting changes.
Training on augumented user 117285 35/50 current_auc = 0.5850340136054422
User 117285 AUC after training: 0.5836734693877551
User 117285 does not improve AUC. Reverting changes.
Training on augumented user 86106 36/50 current_auc = 0.5850340136054422
User 86106 AUC after training: 0.5816326530612245
User 86106 does not improve AUC. Reverting changes.
Training on augumented user 29385 37/50 current_auc = 0.5850340136054422
User 29385 AUC after training: 0.5836734693877551
User 29385 does not improve AUC. Reverting changes.
Training on augumented user 84300 38/50 current_auc = 0.5850340136054422
User 84300 AUC after training: 0.5836734693877551
User 84300 does not improve AUC. Reverting changes.
Training on augumented user 31392 39/50 current_auc = 0.5850340136054422
User 31392 AUC after training: 0.5857142857142857
User 31392 improves AUC. Keeping the model.
Training on augumented user 131690 40/50 current_auc = 0.5857142857142857
User 131690 AUC after training: 0.5863945578231293
User 131690 improves AUC. Keeping the model.
Training on augumented user 31688 41/50 current_auc = 0.5863945578231293
User 31688 AUC after training: 0.5857142857142857
User 31688 does not improve AUC. Reverting changes.
Training on augumented user 6349 42/50 current_auc = 0.5863945578231293
User 6349 AUC after training: 0.5829931972789116
User 6349 does not improve AUC. Reverting changes.
Training on augumented user 44219 43/50 current_auc = 0.5863945578231293
User 44219 AUC after training: 0.5850340136054422
User 44219 does not improve AUC. Reverting changes.
Training on augumented user 63946 44/50 current_auc = 0.5863945578231293
User 63946 AUC after training: 0.5870748299319728
User 63946 improves AUC. Keeping the model.
Training on augumented user 2398 45/50 current_auc = 0.5870748299319728
User 2398 AUC after training: 0.5836734693877551
User 2398 does not improve AUC. Reverting changes.
Training on augumented user 95431 46/50 current_auc = 0.5870748299319728
User 95431 AUC after training: 0.5877551020408164
User 95431 improves AUC. Keeping the model.
Training on augumented user 132250 47/50 current_auc = 0.5877551020408164
User 132250 AUC after training: 0.5863945578231292
User 132250 does not improve AUC. Reverting changes.
Training on augumented user 103770 48/50 current_auc = 0.5877551020408164
User 103770 AUC after training: 0.5877551020408163
User 103770 does not improve AUC. Reverting changes.
Training on augumented user 58966 49/50 current_auc = 0.5877551020408164
User 58966 AUC after training: 0.5863945578231293
User 58966 does not improve AUC. Reverting changes.
[2024-12-02 19:06:49.969751] start test user 30895 154/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:50.491756] start test user 30895 154/568 recall augumented users by random, augumented_users = [83694, 66349, 1297, 55487, 6575, 98874, 26051, 12773, 72034, 35378, 86696, 78859, 61378, 113609, 71218, 15822, 27972, 61932, 137004, 27770, 106468, 100371, 136869, 102247, 11043, 65986, 113437, 5127, 46477, 95866, 138069, 2660, 130900, 102694, 100415, 7515, 74357, 131052, 48220, 709, 136808, 123968, 71183, 120890, 99141, 8174, 126173, 86334, 8354, 107889]
[2024-12-02 19:06:50.506645] user = 30895 Cloud 154/568
[2024-12-02 19:06:50.517410] user = 30895 Local 154/568
[2024-12-02 19:06:50.538229] user = 30895 Local+ 154/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:53.403971] user = 30895 MPDA- 154/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7218045112781954
Training on augumented user 83694 0/50 current_auc = 0.7218045112781954
User 83694 AUC after training: 0.7218045112781954
User 83694 does not improve AUC. Reverting changes.
Training on augumented user 66349 1/50 current_auc = 0.7218045112781954
User 66349 AUC after training: 0.7218045112781954
User 66349 does not improve AUC. Reverting changes.
Training on augumented user 1297 2/50 current_auc = 0.7218045112781954
User 1297 AUC after training: 0.7218045112781954
User 1297 does not improve AUC. Reverting changes.
Training on augumented user 55487 3/50 current_auc = 0.7218045112781954
User 55487 AUC after training: 0.7218045112781954
User 55487 does not improve AUC. Reverting changes.
Training on augumented user 6575 4/50 current_auc = 0.7218045112781954
User 6575 AUC after training: 0.7180451127819549
User 6575 does not improve AUC. Reverting changes.
Training on augumented user 98874 5/50 current_auc = 0.7218045112781954
User 98874 AUC after training: 0.7180451127819549
User 98874 does not improve AUC. Reverting changes.
Training on augumented user 26051 6/50 current_auc = 0.7218045112781954
User 26051 AUC after training: 0.7180451127819549
User 26051 does not improve AUC. Reverting changes.
Training on augumented user 12773 7/50 current_auc = 0.7218045112781954
User 12773 AUC after training: 0.7180451127819549
User 12773 does not improve AUC. Reverting changes.
Training on augumented user 72034 8/50 current_auc = 0.7218045112781954
User 72034 AUC after training: 0.7180451127819549
User 72034 does not improve AUC. Reverting changes.
Training on augumented user 35378 9/50 current_auc = 0.7218045112781954
User 35378 AUC after training: 0.7180451127819549
User 35378 does not improve AUC. Reverting changes.
Training on augumented user 86696 10/50 current_auc = 0.7218045112781954
User 86696 AUC after training: 0.7142857142857144
User 86696 does not improve AUC. Reverting changes.
Training on augumented user 78859 11/50 current_auc = 0.7218045112781954
User 78859 AUC after training: 0.7180451127819549
User 78859 does not improve AUC. Reverting changes.
Training on augumented user 61378 12/50 current_auc = 0.7218045112781954
User 61378 AUC after training: 0.7218045112781954
User 61378 does not improve AUC. Reverting changes.
Training on augumented user 113609 13/50 current_auc = 0.7218045112781954
User 113609 AUC after training: 0.7180451127819549
User 113609 does not improve AUC. Reverting changes.
Training on augumented user 71218 14/50 current_auc = 0.7218045112781954
User 71218 AUC after training: 0.7218045112781954
User 71218 does not improve AUC. Reverting changes.
Training on augumented user 15822 15/50 current_auc = 0.7218045112781954
User 15822 AUC after training: 0.7180451127819549
User 15822 does not improve AUC. Reverting changes.
Training on augumented user 27972 16/50 current_auc = 0.7218045112781954
User 27972 AUC after training: 0.7180451127819549
User 27972 does not improve AUC. Reverting changes.
Training on augumented user 61932 17/50 current_auc = 0.7218045112781954
User 61932 AUC after training: 0.7218045112781954
User 61932 does not improve AUC. Reverting changes.
Training on augumented user 137004 18/50 current_auc = 0.7218045112781954
User 137004 AUC after training: 0.7180451127819549
User 137004 does not improve AUC. Reverting changes.
Training on augumented user 27770 19/50 current_auc = 0.7218045112781954
User 27770 AUC after training: 0.7218045112781954
User 27770 does not improve AUC. Reverting changes.
Training on augumented user 106468 20/50 current_auc = 0.7218045112781954
User 106468 AUC after training: 0.7218045112781954
User 106468 does not improve AUC. Reverting changes.
Training on augumented user 100371 21/50 current_auc = 0.7218045112781954
User 100371 AUC after training: 0.7180451127819549
User 100371 does not improve AUC. Reverting changes.
Training on augumented user 136869 22/50 current_auc = 0.7218045112781954
User 136869 AUC after training: 0.7218045112781954
User 136869 does not improve AUC. Reverting changes.
Training on augumented user 102247 23/50 current_auc = 0.7218045112781954
User 102247 AUC after training: 0.7180451127819549
User 102247 does not improve AUC. Reverting changes.
Training on augumented user 11043 24/50 current_auc = 0.7218045112781954
User 11043 AUC after training: 0.7218045112781954
User 11043 does not improve AUC. Reverting changes.
Training on augumented user 65986 25/50 current_auc = 0.7218045112781954
User 65986 AUC after training: 0.7218045112781954
User 65986 does not improve AUC. Reverting changes.
Training on augumented user 113437 26/50 current_auc = 0.7218045112781954
User 113437 AUC after training: 0.7218045112781954
User 113437 does not improve AUC. Reverting changes.
Training on augumented user 5127 27/50 current_auc = 0.7218045112781954
User 5127 AUC after training: 0.7180451127819549
User 5127 does not improve AUC. Reverting changes.
Training on augumented user 46477 28/50 current_auc = 0.7218045112781954
User 46477 AUC after training: 0.7180451127819549
User 46477 does not improve AUC. Reverting changes.
Training on augumented user 95866 29/50 current_auc = 0.7218045112781954
User 95866 AUC after training: 0.7199248120300752
User 95866 does not improve AUC. Reverting changes.
Training on augumented user 138069 30/50 current_auc = 0.7218045112781954
User 138069 AUC after training: 0.7180451127819549
User 138069 does not improve AUC. Reverting changes.
Training on augumented user 2660 31/50 current_auc = 0.7218045112781954
User 2660 AUC after training: 0.7218045112781954
User 2660 does not improve AUC. Reverting changes.
Training on augumented user 130900 32/50 current_auc = 0.7218045112781954
User 130900 AUC after training: 0.7180451127819549
User 130900 does not improve AUC. Reverting changes.
Training on augumented user 102694 33/50 current_auc = 0.7218045112781954
User 102694 AUC after training: 0.7180451127819549
User 102694 does not improve AUC. Reverting changes.
Training on augumented user 100415 34/50 current_auc = 0.7218045112781954
User 100415 AUC after training: 0.7180451127819549
User 100415 does not improve AUC. Reverting changes.
Training on augumented user 7515 35/50 current_auc = 0.7218045112781954
User 7515 AUC after training: 0.7218045112781954
User 7515 does not improve AUC. Reverting changes.
Training on augumented user 74357 36/50 current_auc = 0.7218045112781954
User 74357 AUC after training: 0.7142857142857143
User 74357 does not improve AUC. Reverting changes.
Training on augumented user 131052 37/50 current_auc = 0.7218045112781954
User 131052 AUC after training: 0.7218045112781954
User 131052 does not improve AUC. Reverting changes.
Training on augumented user 48220 38/50 current_auc = 0.7218045112781954
User 48220 AUC after training: 0.7218045112781954
User 48220 does not improve AUC. Reverting changes.
Training on augumented user 709 39/50 current_auc = 0.7218045112781954
User 709 AUC after training: 0.7180451127819549
User 709 does not improve AUC. Reverting changes.
Training on augumented user 136808 40/50 current_auc = 0.7218045112781954
User 136808 AUC after training: 0.7218045112781954
User 136808 does not improve AUC. Reverting changes.
Training on augumented user 123968 41/50 current_auc = 0.7218045112781954
User 123968 AUC after training: 0.7218045112781954
User 123968 does not improve AUC. Reverting changes.
Training on augumented user 71183 42/50 current_auc = 0.7218045112781954
User 71183 AUC after training: 0.7142857142857143
User 71183 does not improve AUC. Reverting changes.
Training on augumented user 120890 43/50 current_auc = 0.7218045112781954
User 120890 AUC after training: 0.7180451127819549
User 120890 does not improve AUC. Reverting changes.
Training on augumented user 99141 44/50 current_auc = 0.7218045112781954
User 99141 AUC after training: 0.7218045112781954
User 99141 does not improve AUC. Reverting changes.
Training on augumented user 8174 45/50 current_auc = 0.7218045112781954
User 8174 AUC after training: 0.7218045112781954
User 8174 does not improve AUC. Reverting changes.
Training on augumented user 126173 46/50 current_auc = 0.7218045112781954
User 126173 AUC after training: 0.7180451127819549
User 126173 does not improve AUC. Reverting changes.
Training on augumented user 86334 47/50 current_auc = 0.7218045112781954
User 86334 AUC after training: 0.7218045112781954
User 86334 does not improve AUC. Reverting changes.
Training on augumented user 8354 48/50 current_auc = 0.7218045112781954
User 8354 AUC after training: 0.7218045112781954
User 8354 does not improve AUC. Reverting changes.
Training on augumented user 107889 49/50 current_auc = 0.7218045112781954
User 107889 AUC after training: 0.7180451127819549
User 107889 does not improve AUC. Reverting changes.
[2024-12-02 19:07:22.563206] start test user 30929 155/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:23.017080] start test user 30929 155/568 recall augumented users by random, augumented_users = [5280, 54761, 50372, 61184, 16455, 45343, 91040, 19684, 88661, 118773, 20566, 106929, 51068, 111920, 101935, 104943, 96503, 67, 100281, 132646, 135167, 111802, 9381, 65864, 12807, 7502, 23306, 103670, 71109, 22934, 37848, 95106, 99556, 26985, 17010, 61698, 42248, 113137, 100785, 130493, 72195, 2239, 100147, 56162, 66035, 121946, 87571, 133088, 23529, 13962]
[2024-12-02 19:07:23.033452] user = 30929 Cloud 155/568
[2024-12-02 19:07:23.049788] user = 30929 Local 155/568
[2024-12-02 19:07:23.102363] user = 30929 Local+ 155/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:25.388770] user = 30929 MPDA- 155/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5380029806259314
Training on augumented user 5280 0/50 current_auc = 0.5380029806259314
User 5280 AUC after training: 0.5394932935916542
User 5280 improves AUC. Keeping the model.
Training on augumented user 54761 1/50 current_auc = 0.5394932935916542
User 54761 AUC after training: 0.5409836065573771
User 54761 improves AUC. Keeping the model.
Training on augumented user 50372 2/50 current_auc = 0.5409836065573771
User 50372 AUC after training: 0.5424739195230999
User 50372 improves AUC. Keeping the model.
Training on augumented user 61184 3/50 current_auc = 0.5424739195230999
User 61184 AUC after training: 0.5394932935916542
User 61184 does not improve AUC. Reverting changes.
Training on augumented user 16455 4/50 current_auc = 0.5424739195230999
User 16455 AUC after training: 0.5394932935916542
User 16455 does not improve AUC. Reverting changes.
Training on augumented user 45343 5/50 current_auc = 0.5424739195230999
User 45343 AUC after training: 0.5439642324888226
User 45343 improves AUC. Keeping the model.
Training on augumented user 91040 6/50 current_auc = 0.5439642324888226
User 91040 AUC after training: 0.5305514157973175
User 91040 does not improve AUC. Reverting changes.
Training on augumented user 19684 7/50 current_auc = 0.5439642324888226
User 19684 AUC after training: 0.5439642324888226
User 19684 does not improve AUC. Reverting changes.
Training on augumented user 88661 8/50 current_auc = 0.5439642324888226
User 88661 AUC after training: 0.5454545454545454
User 88661 improves AUC. Keeping the model.
Training on augumented user 118773 9/50 current_auc = 0.5454545454545454
User 118773 AUC after training: 0.5454545454545454
User 118773 does not improve AUC. Reverting changes.
Training on augumented user 20566 10/50 current_auc = 0.5454545454545454
User 20566 AUC after training: 0.5454545454545454
User 20566 does not improve AUC. Reverting changes.
Training on augumented user 106929 11/50 current_auc = 0.5454545454545454
User 106929 AUC after training: 0.5469448584202683
User 106929 improves AUC. Keeping the model.
Training on augumented user 51068 12/50 current_auc = 0.5469448584202683
User 51068 AUC after training: 0.5454545454545454
User 51068 does not improve AUC. Reverting changes.
Training on augumented user 111920 13/50 current_auc = 0.5469448584202683
User 111920 AUC after training: 0.5454545454545454
User 111920 does not improve AUC. Reverting changes.
Training on augumented user 101935 14/50 current_auc = 0.5469448584202683
User 101935 AUC after training: 0.5469448584202682
User 101935 does not improve AUC. Reverting changes.
Training on augumented user 104943 15/50 current_auc = 0.5469448584202683
User 104943 AUC after training: 0.5484351713859911
User 104943 improves AUC. Keeping the model.
Training on augumented user 96503 16/50 current_auc = 0.5484351713859911
User 96503 AUC after training: 0.5484351713859911
User 96503 does not improve AUC. Reverting changes.
Training on augumented user 67 17/50 current_auc = 0.5484351713859911
User 67 AUC after training: 0.5499254843517138
User 67 improves AUC. Keeping the model.
Training on augumented user 100281 18/50 current_auc = 0.5499254843517138
User 100281 AUC after training: 0.5499254843517138
User 100281 does not improve AUC. Reverting changes.
Training on augumented user 132646 19/50 current_auc = 0.5499254843517138
User 132646 AUC after training: 0.5499254843517138
User 132646 does not improve AUC. Reverting changes.
Training on augumented user 135167 20/50 current_auc = 0.5499254843517138
User 135167 AUC after training: 0.5499254843517138
User 135167 does not improve AUC. Reverting changes.
Training on augumented user 111802 21/50 current_auc = 0.5499254843517138
User 111802 AUC after training: 0.5543964232488823
User 111802 improves AUC. Keeping the model.
Training on augumented user 9381 22/50 current_auc = 0.5543964232488823
User 9381 AUC after training: 0.555886736214605
User 9381 improves AUC. Keeping the model.
Training on augumented user 65864 23/50 current_auc = 0.555886736214605
User 65864 AUC after training: 0.555886736214605
User 65864 does not improve AUC. Reverting changes.
Training on augumented user 12807 24/50 current_auc = 0.555886736214605
User 12807 AUC after training: 0.5543964232488823
User 12807 does not improve AUC. Reverting changes.
Training on augumented user 7502 25/50 current_auc = 0.555886736214605
User 7502 AUC after training: 0.5603576751117734
User 7502 improves AUC. Keeping the model.
Training on augumented user 23306 26/50 current_auc = 0.5603576751117734
User 23306 AUC after training: 0.5618479880774963
User 23306 improves AUC. Keeping the model.
Training on augumented user 103670 27/50 current_auc = 0.5618479880774963
User 103670 AUC after training: 0.5603576751117735
User 103670 does not improve AUC. Reverting changes.
Training on augumented user 71109 28/50 current_auc = 0.5618479880774963
User 71109 AUC after training: 0.5618479880774963
User 71109 does not improve AUC. Reverting changes.
Training on augumented user 22934 29/50 current_auc = 0.5618479880774963
User 22934 AUC after training: 0.5588673621460507
User 22934 does not improve AUC. Reverting changes.
Training on augumented user 37848 30/50 current_auc = 0.5618479880774963
User 37848 AUC after training: 0.5588673621460507
User 37848 does not improve AUC. Reverting changes.
Training on augumented user 95106 31/50 current_auc = 0.5618479880774963
User 95106 AUC after training: 0.5618479880774963
User 95106 does not improve AUC. Reverting changes.
Training on augumented user 99556 32/50 current_auc = 0.5618479880774963
User 99556 AUC after training: 0.5618479880774963
User 99556 does not improve AUC. Reverting changes.
Training on augumented user 26985 33/50 current_auc = 0.5618479880774963
User 26985 AUC after training: 0.5633383010432191
User 26985 improves AUC. Keeping the model.
Training on augumented user 17010 34/50 current_auc = 0.5633383010432191
User 17010 AUC after training: 0.5618479880774963
User 17010 does not improve AUC. Reverting changes.
Training on augumented user 61698 35/50 current_auc = 0.5633383010432191
User 61698 AUC after training: 0.5618479880774963
User 61698 does not improve AUC. Reverting changes.
Training on augumented user 42248 36/50 current_auc = 0.5633383010432191
User 42248 AUC after training: 0.5633383010432191
User 42248 does not improve AUC. Reverting changes.
Training on augumented user 113137 37/50 current_auc = 0.5633383010432191
User 113137 AUC after training: 0.5633383010432191
User 113137 does not improve AUC. Reverting changes.
Training on augumented user 100785 38/50 current_auc = 0.5633383010432191
User 100785 AUC after training: 0.5618479880774963
User 100785 does not improve AUC. Reverting changes.
Training on augumented user 130493 39/50 current_auc = 0.5633383010432191
User 130493 AUC after training: 0.5588673621460507
User 130493 does not improve AUC. Reverting changes.
Training on augumented user 72195 40/50 current_auc = 0.5633383010432191
User 72195 AUC after training: 0.5633383010432191
User 72195 does not improve AUC. Reverting changes.
Training on augumented user 2239 41/50 current_auc = 0.5633383010432191
User 2239 AUC after training: 0.5573770491803278
User 2239 does not improve AUC. Reverting changes.
Training on augumented user 100147 42/50 current_auc = 0.5633383010432191
User 100147 AUC after training: 0.5603576751117735
User 100147 does not improve AUC. Reverting changes.
Training on augumented user 56162 43/50 current_auc = 0.5633383010432191
User 56162 AUC after training: 0.555886736214605
User 56162 does not improve AUC. Reverting changes.
Training on augumented user 66035 44/50 current_auc = 0.5633383010432191
User 66035 AUC after training: 0.5618479880774963
User 66035 does not improve AUC. Reverting changes.
Training on augumented user 121946 45/50 current_auc = 0.5633383010432191
User 121946 AUC after training: 0.5633383010432191
User 121946 does not improve AUC. Reverting changes.
Training on augumented user 87571 46/50 current_auc = 0.5633383010432191
User 87571 AUC after training: 0.5633383010432191
User 87571 does not improve AUC. Reverting changes.
Training on augumented user 133088 47/50 current_auc = 0.5633383010432191
User 133088 AUC after training: 0.5618479880774963
User 133088 does not improve AUC. Reverting changes.
Training on augumented user 23529 48/50 current_auc = 0.5633383010432191
User 23529 AUC after training: 0.5618479880774963
User 23529 does not improve AUC. Reverting changes.
Training on augumented user 13962 49/50 current_auc = 0.5633383010432191
User 13962 AUC after training: 0.5633383010432191
User 13962 does not improve AUC. Reverting changes.
[2024-12-02 19:07:54.330437] start test user 31067 156/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:55.152866] start test user 31067 156/568 recall augumented users by random, augumented_users = [6263, 30760, 127990, 120608, 114972, 74089, 19031, 113089, 107994, 62059, 82610, 137164, 10160, 106631, 52455, 134297, 66986, 60103, 91961, 57206, 33038, 34247, 103808, 13026, 30939, 101184, 15044, 74964, 18496, 3025, 17278, 100767, 95919, 73378, 65377, 38066, 128227, 132488, 36333, 101803, 92470, 4003, 7382, 131391, 80909, 51206, 68659, 135156, 63009, 2011]
[2024-12-02 19:07:55.168473] user = 31067 Cloud 156/568
[2024-12-02 19:07:55.184420] user = 31067 Local 156/568
[2024-12-02 19:07:55.209217] user = 31067 Local+ 156/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:58.668541] user = 31067 MPDA- 156/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4458161865569273
Training on augumented user 6263 0/50 current_auc = 0.4458161865569273
User 6263 AUC after training: 0.4458161865569273
User 6263 does not improve AUC. Reverting changes.
Training on augumented user 30760 1/50 current_auc = 0.4458161865569273
User 30760 AUC after training: 0.4458161865569273
User 30760 does not improve AUC. Reverting changes.
Training on augumented user 127990 2/50 current_auc = 0.4458161865569273
User 127990 AUC after training: 0.44718792866941015
User 127990 improves AUC. Keeping the model.
Training on augumented user 120608 3/50 current_auc = 0.44718792866941015
User 120608 AUC after training: 0.4444444444444444
User 120608 does not improve AUC. Reverting changes.
Training on augumented user 114972 4/50 current_auc = 0.44718792866941015
User 114972 AUC after training: 0.44718792866941015
User 114972 does not improve AUC. Reverting changes.
Training on augumented user 74089 5/50 current_auc = 0.44718792866941015
User 74089 AUC after training: 0.4444444444444444
User 74089 does not improve AUC. Reverting changes.
Training on augumented user 19031 6/50 current_auc = 0.44718792866941015
User 19031 AUC after training: 0.44718792866941015
User 19031 does not improve AUC. Reverting changes.
Training on augumented user 113089 7/50 current_auc = 0.44718792866941015
User 113089 AUC after training: 0.4444444444444444
User 113089 does not improve AUC. Reverting changes.
Training on augumented user 107994 8/50 current_auc = 0.44718792866941015
User 107994 AUC after training: 0.44718792866941015
User 107994 does not improve AUC. Reverting changes.
Training on augumented user 62059 9/50 current_auc = 0.44718792866941015
User 62059 AUC after training: 0.4444444444444444
User 62059 does not improve AUC. Reverting changes.
Training on augumented user 82610 10/50 current_auc = 0.44718792866941015
User 82610 AUC after training: 0.448559670781893
User 82610 improves AUC. Keeping the model.
Training on augumented user 137164 11/50 current_auc = 0.448559670781893
User 137164 AUC after training: 0.448559670781893
User 137164 does not improve AUC. Reverting changes.
Training on augumented user 10160 12/50 current_auc = 0.448559670781893
User 10160 AUC after training: 0.44718792866941015
User 10160 does not improve AUC. Reverting changes.
Training on augumented user 106631 13/50 current_auc = 0.448559670781893
User 106631 AUC after training: 0.4458161865569273
User 106631 does not improve AUC. Reverting changes.
Training on augumented user 52455 14/50 current_auc = 0.448559670781893
User 52455 AUC after training: 0.44718792866941015
User 52455 does not improve AUC. Reverting changes.
Training on augumented user 134297 15/50 current_auc = 0.448559670781893
User 134297 AUC after training: 0.4458161865569273
User 134297 does not improve AUC. Reverting changes.
Training on augumented user 66986 16/50 current_auc = 0.448559670781893
User 66986 AUC after training: 0.44307270233196155
User 66986 does not improve AUC. Reverting changes.
Training on augumented user 60103 17/50 current_auc = 0.448559670781893
User 60103 AUC after training: 0.4499314128943758
User 60103 improves AUC. Keeping the model.
Training on augumented user 91961 18/50 current_auc = 0.4499314128943758
User 91961 AUC after training: 0.44855967078189296
User 91961 does not improve AUC. Reverting changes.
Training on augumented user 57206 19/50 current_auc = 0.4499314128943758
User 57206 AUC after training: 0.448559670781893
User 57206 does not improve AUC. Reverting changes.
Training on augumented user 33038 20/50 current_auc = 0.4499314128943758
User 33038 AUC after training: 0.4444444444444444
User 33038 does not improve AUC. Reverting changes.
Training on augumented user 34247 21/50 current_auc = 0.4499314128943758
User 34247 AUC after training: 0.44581618655692734
User 34247 does not improve AUC. Reverting changes.
Training on augumented user 103808 22/50 current_auc = 0.4499314128943758
User 103808 AUC after training: 0.44307270233196167
User 103808 does not improve AUC. Reverting changes.
Training on augumented user 13026 23/50 current_auc = 0.4499314128943758
User 13026 AUC after training: 0.44855967078189296
User 13026 does not improve AUC. Reverting changes.
Training on augumented user 30939 24/50 current_auc = 0.4499314128943758
User 30939 AUC after training: 0.448559670781893
User 30939 does not improve AUC. Reverting changes.
Training on augumented user 101184 25/50 current_auc = 0.4499314128943758
User 101184 AUC after training: 0.4458161865569273
User 101184 does not improve AUC. Reverting changes.
Training on augumented user 15044 26/50 current_auc = 0.4499314128943758
User 15044 AUC after training: 0.44718792866941015
User 15044 does not improve AUC. Reverting changes.
Training on augumented user 74964 27/50 current_auc = 0.4499314128943758
User 74964 AUC after training: 0.44718792866941015
User 74964 does not improve AUC. Reverting changes.
Training on augumented user 18496 28/50 current_auc = 0.4499314128943758
User 18496 AUC after training: 0.44718792866941015
User 18496 does not improve AUC. Reverting changes.
Training on augumented user 3025 29/50 current_auc = 0.4499314128943758
User 3025 AUC after training: 0.4444444444444444
User 3025 does not improve AUC. Reverting changes.
Training on augumented user 17278 30/50 current_auc = 0.4499314128943758
User 17278 AUC after training: 0.44718792866941015
User 17278 does not improve AUC. Reverting changes.
Training on augumented user 100767 31/50 current_auc = 0.4499314128943758
User 100767 AUC after training: 0.4458161865569273
User 100767 does not improve AUC. Reverting changes.
Training on augumented user 95919 32/50 current_auc = 0.4499314128943758
User 95919 AUC after training: 0.4458161865569273
User 95919 does not improve AUC. Reverting changes.
Training on augumented user 73378 33/50 current_auc = 0.4499314128943758
User 73378 AUC after training: 0.44855967078189296
User 73378 does not improve AUC. Reverting changes.
Training on augumented user 65377 34/50 current_auc = 0.4499314128943758
User 65377 AUC after training: 0.44718792866941015
User 65377 does not improve AUC. Reverting changes.
Training on augumented user 38066 35/50 current_auc = 0.4499314128943758
User 38066 AUC after training: 0.4444444444444444
User 38066 does not improve AUC. Reverting changes.
Training on augumented user 128227 36/50 current_auc = 0.4499314128943758
User 128227 AUC after training: 0.438957475994513
User 128227 does not improve AUC. Reverting changes.
Training on augumented user 132488 37/50 current_auc = 0.4499314128943758
User 132488 AUC after training: 0.4499314128943758
User 132488 does not improve AUC. Reverting changes.
Training on augumented user 36333 38/50 current_auc = 0.4499314128943758
User 36333 AUC after training: 0.4403292181069959
User 36333 does not improve AUC. Reverting changes.
Training on augumented user 101803 39/50 current_auc = 0.4499314128943758
User 101803 AUC after training: 0.44307270233196155
User 101803 does not improve AUC. Reverting changes.
Training on augumented user 92470 40/50 current_auc = 0.4499314128943758
User 92470 AUC after training: 0.44718792866941015
User 92470 does not improve AUC. Reverting changes.
Training on augumented user 4003 41/50 current_auc = 0.4499314128943758
User 4003 AUC after training: 0.4458161865569273
User 4003 does not improve AUC. Reverting changes.
Training on augumented user 7382 42/50 current_auc = 0.4499314128943758
User 7382 AUC after training: 0.4444444444444444
User 7382 does not improve AUC. Reverting changes.
Training on augumented user 131391 43/50 current_auc = 0.4499314128943758
User 131391 AUC after training: 0.44718792866941015
User 131391 does not improve AUC. Reverting changes.
Training on augumented user 80909 44/50 current_auc = 0.4499314128943758
User 80909 AUC after training: 0.4444444444444444
User 80909 does not improve AUC. Reverting changes.
Training on augumented user 51206 45/50 current_auc = 0.4499314128943758
User 51206 AUC after training: 0.44718792866941015
User 51206 does not improve AUC. Reverting changes.
Training on augumented user 68659 46/50 current_auc = 0.4499314128943758
User 68659 AUC after training: 0.4499314128943758
User 68659 does not improve AUC. Reverting changes.
Training on augumented user 135156 47/50 current_auc = 0.4499314128943758
User 135156 AUC after training: 0.4458161865569273
User 135156 does not improve AUC. Reverting changes.
Training on augumented user 63009 48/50 current_auc = 0.4499314128943758
User 63009 AUC after training: 0.44718792866941015
User 63009 does not improve AUC. Reverting changes.
Training on augumented user 2011 49/50 current_auc = 0.4499314128943758
User 2011 AUC after training: 0.4499314128943758
User 2011 does not improve AUC. Reverting changes.
[2024-12-02 19:08:34.406361] start test user 31076 157/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:34.909508] start test user 31076 157/568 recall augumented users by random, augumented_users = [115197, 93312, 105282, 48050, 36747, 114340, 136494, 101079, 13712, 8897, 85096, 38293, 17220, 103750, 75574, 130919, 120735, 28462, 72994, 133349, 27706, 72174, 123952, 47055, 88019, 33999, 2736, 74709, 116472, 17218, 11912, 91280, 121744, 128280, 18536, 107555, 133605, 66707, 64068, 111607, 12791, 60994, 30125, 71920, 34134, 75579, 115059, 90058, 22234, 113695]
[2024-12-02 19:08:34.924787] user = 31076 Cloud 157/568
[2024-12-02 19:08:34.954589] user = 31076 Local 157/568
[2024-12-02 19:08:35.041309] user = 31076 Local+ 157/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:37.632454] user = 31076 MPDA- 157/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.704406779661017
Training on augumented user 115197 0/50 current_auc = 0.704406779661017
User 115197 AUC after training: 0.7040677966101695
User 115197 does not improve AUC. Reverting changes.
Training on augumented user 93312 1/50 current_auc = 0.704406779661017
User 93312 AUC after training: 0.704406779661017
User 93312 does not improve AUC. Reverting changes.
Training on augumented user 105282 2/50 current_auc = 0.704406779661017
User 105282 AUC after training: 0.7057627118644068
User 105282 improves AUC. Keeping the model.
Training on augumented user 48050 3/50 current_auc = 0.7057627118644068
User 48050 AUC after training: 0.7057627118644068
User 48050 does not improve AUC. Reverting changes.
Training on augumented user 36747 4/50 current_auc = 0.7057627118644068
User 36747 AUC after training: 0.7050847457627119
User 36747 does not improve AUC. Reverting changes.
Training on augumented user 114340 5/50 current_auc = 0.7057627118644068
User 114340 AUC after training: 0.7064406779661018
User 114340 improves AUC. Keeping the model.
Training on augumented user 136494 6/50 current_auc = 0.7064406779661018
User 136494 AUC after training: 0.7064406779661017
User 136494 does not improve AUC. Reverting changes.
Training on augumented user 101079 7/50 current_auc = 0.7064406779661018
User 101079 AUC after training: 0.7057627118644068
User 101079 does not improve AUC. Reverting changes.
Training on augumented user 13712 8/50 current_auc = 0.7064406779661018
User 13712 AUC after training: 0.7057627118644069
User 13712 does not improve AUC. Reverting changes.
Training on augumented user 8897 9/50 current_auc = 0.7064406779661018
User 8897 AUC after training: 0.7050847457627119
User 8897 does not improve AUC. Reverting changes.
Training on augumented user 85096 10/50 current_auc = 0.7064406779661018
User 85096 AUC after training: 0.7057627118644068
User 85096 does not improve AUC. Reverting changes.
Training on augumented user 38293 11/50 current_auc = 0.7064406779661018
User 38293 AUC after training: 0.7057627118644068
User 38293 does not improve AUC. Reverting changes.
Training on augumented user 17220 12/50 current_auc = 0.7064406779661018
User 17220 AUC after training: 0.7057627118644068
User 17220 does not improve AUC. Reverting changes.
Training on augumented user 103750 13/50 current_auc = 0.7064406779661018
User 103750 AUC after training: 0.7050847457627119
User 103750 does not improve AUC. Reverting changes.
Training on augumented user 75574 14/50 current_auc = 0.7064406779661018
User 75574 AUC after training: 0.7064406779661018
User 75574 does not improve AUC. Reverting changes.
Training on augumented user 130919 15/50 current_auc = 0.7064406779661018
User 130919 AUC after training: 0.7050847457627119
User 130919 does not improve AUC. Reverting changes.
Training on augumented user 120735 16/50 current_auc = 0.7064406779661018
User 120735 AUC after training: 0.704406779661017
User 120735 does not improve AUC. Reverting changes.
Training on augumented user 28462 17/50 current_auc = 0.7064406779661018
User 28462 AUC after training: 0.7064406779661017
User 28462 does not improve AUC. Reverting changes.
Training on augumented user 72994 18/50 current_auc = 0.7064406779661018
User 72994 AUC after training: 0.7064406779661018
User 72994 does not improve AUC. Reverting changes.
Training on augumented user 133349 19/50 current_auc = 0.7064406779661018
User 133349 AUC after training: 0.7064406779661018
User 133349 does not improve AUC. Reverting changes.
Training on augumented user 27706 20/50 current_auc = 0.7064406779661018
User 27706 AUC after training: 0.7057627118644068
User 27706 does not improve AUC. Reverting changes.
Training on augumented user 72174 21/50 current_auc = 0.7064406779661018
User 72174 AUC after training: 0.7057627118644068
User 72174 does not improve AUC. Reverting changes.
Training on augumented user 123952 22/50 current_auc = 0.7064406779661018
User 123952 AUC after training: 0.7057627118644068
User 123952 does not improve AUC. Reverting changes.
Training on augumented user 47055 23/50 current_auc = 0.7064406779661018
User 47055 AUC after training: 0.7057627118644068
User 47055 does not improve AUC. Reverting changes.
Training on augumented user 88019 24/50 current_auc = 0.7064406779661018
User 88019 AUC after training: 0.7057627118644068
User 88019 does not improve AUC. Reverting changes.
Training on augumented user 33999 25/50 current_auc = 0.7064406779661018
User 33999 AUC after training: 0.7050847457627119
User 33999 does not improve AUC. Reverting changes.
Training on augumented user 2736 26/50 current_auc = 0.7064406779661018
User 2736 AUC after training: 0.7050847457627119
User 2736 does not improve AUC. Reverting changes.
Training on augumented user 74709 27/50 current_auc = 0.7064406779661018
User 74709 AUC after training: 0.7057627118644068
User 74709 does not improve AUC. Reverting changes.
Training on augumented user 116472 28/50 current_auc = 0.7064406779661018
User 116472 AUC after training: 0.7064406779661018
User 116472 does not improve AUC. Reverting changes.
Training on augumented user 17218 29/50 current_auc = 0.7064406779661018
User 17218 AUC after training: 0.7057627118644068
User 17218 does not improve AUC. Reverting changes.
Training on augumented user 11912 30/50 current_auc = 0.7064406779661018
User 11912 AUC after training: 0.7064406779661017
User 11912 does not improve AUC. Reverting changes.
Training on augumented user 91280 31/50 current_auc = 0.7064406779661018
User 91280 AUC after training: 0.7064406779661017
User 91280 does not improve AUC. Reverting changes.
Training on augumented user 121744 32/50 current_auc = 0.7064406779661018
User 121744 AUC after training: 0.704406779661017
User 121744 does not improve AUC. Reverting changes.
Training on augumented user 128280 33/50 current_auc = 0.7064406779661018
User 128280 AUC after training: 0.703728813559322
User 128280 does not improve AUC. Reverting changes.
Training on augumented user 18536 34/50 current_auc = 0.7064406779661018
User 18536 AUC after training: 0.7064406779661017
User 18536 does not improve AUC. Reverting changes.
Training on augumented user 107555 35/50 current_auc = 0.7064406779661018
User 107555 AUC after training: 0.7057627118644068
User 107555 does not improve AUC. Reverting changes.
Training on augumented user 133605 36/50 current_auc = 0.7064406779661018
User 133605 AUC after training: 0.7057627118644068
User 133605 does not improve AUC. Reverting changes.
Training on augumented user 66707 37/50 current_auc = 0.7064406779661018
User 66707 AUC after training: 0.7050847457627119
User 66707 does not improve AUC. Reverting changes.
Training on augumented user 64068 38/50 current_auc = 0.7064406779661018
User 64068 AUC after training: 0.7044067796610171
User 64068 does not improve AUC. Reverting changes.
Training on augumented user 111607 39/50 current_auc = 0.7064406779661018
User 111607 AUC after training: 0.7057627118644068
User 111607 does not improve AUC. Reverting changes.
Training on augumented user 12791 40/50 current_auc = 0.7064406779661018
User 12791 AUC after training: 0.7057627118644068
User 12791 does not improve AUC. Reverting changes.
Training on augumented user 60994 41/50 current_auc = 0.7064406779661018
User 60994 AUC after training: 0.7057627118644068
User 60994 does not improve AUC. Reverting changes.
Training on augumented user 30125 42/50 current_auc = 0.7064406779661018
User 30125 AUC after training: 0.7064406779661018
User 30125 does not improve AUC. Reverting changes.
Training on augumented user 71920 43/50 current_auc = 0.7064406779661018
User 71920 AUC after training: 0.7064406779661018
User 71920 does not improve AUC. Reverting changes.
Training on augumented user 34134 44/50 current_auc = 0.7064406779661018
User 34134 AUC after training: 0.7050847457627119
User 34134 does not improve AUC. Reverting changes.
Training on augumented user 75579 45/50 current_auc = 0.7064406779661018
User 75579 AUC after training: 0.7050847457627119
User 75579 does not improve AUC. Reverting changes.
Training on augumented user 115059 46/50 current_auc = 0.7064406779661018
User 115059 AUC after training: 0.7064406779661018
User 115059 does not improve AUC. Reverting changes.
Training on augumented user 90058 47/50 current_auc = 0.7064406779661018
User 90058 AUC after training: 0.7050847457627119
User 90058 does not improve AUC. Reverting changes.
Training on augumented user 22234 48/50 current_auc = 0.7064406779661018
User 22234 AUC after training: 0.7071186440677966
User 22234 improves AUC. Keeping the model.
Training on augumented user 113695 49/50 current_auc = 0.7071186440677966
User 113695 AUC after training: 0.7057627118644068
User 113695 does not improve AUC. Reverting changes.
[2024-12-02 19:09:04.150804] start test user 31086 158/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:04.598614] start test user 31086 158/568 recall augumented users by random, augumented_users = [57101, 71127, 563, 88534, 113229, 4290, 87964, 9874, 23832, 131136, 127161, 131272, 42727, 24616, 97145, 66352, 104725, 112768, 39821, 112416, 109010, 48389, 42263, 137878, 121336, 68665, 102892, 73872, 98627, 61169, 36250, 51889, 114914, 83490, 93493, 89475, 73714, 39600, 92945, 11177, 16470, 57246, 35094, 79017, 120987, 103740, 29851, 64919, 37107, 128735]
[2024-12-02 19:09:04.612785] user = 31086 Cloud 158/568
[2024-12-02 19:09:04.622942] user = 31086 Local 158/568
[2024-12-02 19:09:04.662586] user = 31086 Local+ 158/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:07.750049] user = 31086 MPDA- 158/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6222222222222222
Training on augumented user 57101 0/50 current_auc = 0.6222222222222222
User 57101 AUC after training: 0.6222222222222222
User 57101 does not improve AUC. Reverting changes.
Training on augumented user 71127 1/50 current_auc = 0.6222222222222222
User 71127 AUC after training: 0.6333333333333333
User 71127 improves AUC. Keeping the model.
Training on augumented user 563 2/50 current_auc = 0.6333333333333333
User 563 AUC after training: 0.6555555555555554
User 563 improves AUC. Keeping the model.
Training on augumented user 88534 3/50 current_auc = 0.6555555555555554
User 88534 AUC after training: 0.6333333333333333
User 88534 does not improve AUC. Reverting changes.
Training on augumented user 113229 4/50 current_auc = 0.6555555555555554
User 113229 AUC after training: 0.6555555555555554
User 113229 does not improve AUC. Reverting changes.
Training on augumented user 4290 5/50 current_auc = 0.6555555555555554
User 4290 AUC after training: 0.6333333333333333
User 4290 does not improve AUC. Reverting changes.
Training on augumented user 87964 6/50 current_auc = 0.6555555555555554
User 87964 AUC after training: 0.6555555555555554
User 87964 does not improve AUC. Reverting changes.
Training on augumented user 9874 7/50 current_auc = 0.6555555555555554
User 9874 AUC after training: 0.6333333333333333
User 9874 does not improve AUC. Reverting changes.
Training on augumented user 23832 8/50 current_auc = 0.6555555555555554
User 23832 AUC after training: 0.6444444444444444
User 23832 does not improve AUC. Reverting changes.
Training on augumented user 131136 9/50 current_auc = 0.6555555555555554
User 131136 AUC after training: 0.6555555555555554
User 131136 does not improve AUC. Reverting changes.
Training on augumented user 127161 10/50 current_auc = 0.6555555555555554
User 127161 AUC after training: 0.6555555555555554
User 127161 does not improve AUC. Reverting changes.
Training on augumented user 131272 11/50 current_auc = 0.6555555555555554
User 131272 AUC after training: 0.6555555555555554
User 131272 does not improve AUC. Reverting changes.
Training on augumented user 42727 12/50 current_auc = 0.6555555555555554
User 42727 AUC after training: 0.6444444444444444
User 42727 does not improve AUC. Reverting changes.
Training on augumented user 24616 13/50 current_auc = 0.6555555555555554
User 24616 AUC after training: 0.6555555555555554
User 24616 does not improve AUC. Reverting changes.
Training on augumented user 97145 14/50 current_auc = 0.6555555555555554
User 97145 AUC after training: 0.6555555555555554
User 97145 does not improve AUC. Reverting changes.
Training on augumented user 66352 15/50 current_auc = 0.6555555555555554
User 66352 AUC after training: 0.6444444444444444
User 66352 does not improve AUC. Reverting changes.
Training on augumented user 104725 16/50 current_auc = 0.6555555555555554
User 104725 AUC after training: 0.6333333333333333
User 104725 does not improve AUC. Reverting changes.
Training on augumented user 112768 17/50 current_auc = 0.6555555555555554
User 112768 AUC after training: 0.6555555555555554
User 112768 does not improve AUC. Reverting changes.
Training on augumented user 39821 18/50 current_auc = 0.6555555555555554
User 39821 AUC after training: 0.6555555555555554
User 39821 does not improve AUC. Reverting changes.
Training on augumented user 112416 19/50 current_auc = 0.6555555555555554
User 112416 AUC after training: 0.6555555555555554
User 112416 does not improve AUC. Reverting changes.
Training on augumented user 109010 20/50 current_auc = 0.6555555555555554
User 109010 AUC after training: 0.6555555555555554
User 109010 does not improve AUC. Reverting changes.
Training on augumented user 48389 21/50 current_auc = 0.6555555555555554
User 48389 AUC after training: 0.6333333333333333
User 48389 does not improve AUC. Reverting changes.
Training on augumented user 42263 22/50 current_auc = 0.6555555555555554
User 42263 AUC after training: 0.6333333333333333
User 42263 does not improve AUC. Reverting changes.
Training on augumented user 137878 23/50 current_auc = 0.6555555555555554
User 137878 AUC after training: 0.6555555555555554
User 137878 does not improve AUC. Reverting changes.
Training on augumented user 121336 24/50 current_auc = 0.6555555555555554
User 121336 AUC after training: 0.6555555555555554
User 121336 does not improve AUC. Reverting changes.
Training on augumented user 68665 25/50 current_auc = 0.6555555555555554
User 68665 AUC after training: 0.6555555555555554
User 68665 does not improve AUC. Reverting changes.
Training on augumented user 102892 26/50 current_auc = 0.6555555555555554
User 102892 AUC after training: 0.6333333333333333
User 102892 does not improve AUC. Reverting changes.
Training on augumented user 73872 27/50 current_auc = 0.6555555555555554
User 73872 AUC after training: 0.6555555555555554
User 73872 does not improve AUC. Reverting changes.
Training on augumented user 98627 28/50 current_auc = 0.6555555555555554
User 98627 AUC after training: 0.6555555555555554
User 98627 does not improve AUC. Reverting changes.
Training on augumented user 61169 29/50 current_auc = 0.6555555555555554
User 61169 AUC after training: 0.6333333333333333
User 61169 does not improve AUC. Reverting changes.
Training on augumented user 36250 30/50 current_auc = 0.6555555555555554
User 36250 AUC after training: 0.6444444444444444
User 36250 does not improve AUC. Reverting changes.
Training on augumented user 51889 31/50 current_auc = 0.6555555555555554
User 51889 AUC after training: 0.6555555555555554
User 51889 does not improve AUC. Reverting changes.
Training on augumented user 114914 32/50 current_auc = 0.6555555555555554
User 114914 AUC after training: 0.6555555555555554
User 114914 does not improve AUC. Reverting changes.
Training on augumented user 83490 33/50 current_auc = 0.6555555555555554
User 83490 AUC after training: 0.6555555555555554
User 83490 does not improve AUC. Reverting changes.
Training on augumented user 93493 34/50 current_auc = 0.6555555555555554
User 93493 AUC after training: 0.6555555555555554
User 93493 does not improve AUC. Reverting changes.
Training on augumented user 89475 35/50 current_auc = 0.6555555555555554
User 89475 AUC after training: 0.6555555555555554
User 89475 does not improve AUC. Reverting changes.
Training on augumented user 73714 36/50 current_auc = 0.6555555555555554
User 73714 AUC after training: 0.6555555555555554
User 73714 does not improve AUC. Reverting changes.
Training on augumented user 39600 37/50 current_auc = 0.6555555555555554
User 39600 AUC after training: 0.6555555555555554
User 39600 does not improve AUC. Reverting changes.
Training on augumented user 92945 38/50 current_auc = 0.6555555555555554
User 92945 AUC after training: 0.6444444444444444
User 92945 does not improve AUC. Reverting changes.
Training on augumented user 11177 39/50 current_auc = 0.6555555555555554
User 11177 AUC after training: 0.6555555555555554
User 11177 does not improve AUC. Reverting changes.
Training on augumented user 16470 40/50 current_auc = 0.6555555555555554
User 16470 AUC after training: 0.6333333333333333
User 16470 does not improve AUC. Reverting changes.
Training on augumented user 57246 41/50 current_auc = 0.6555555555555554
User 57246 AUC after training: 0.6333333333333333
User 57246 does not improve AUC. Reverting changes.
Training on augumented user 35094 42/50 current_auc = 0.6555555555555554
User 35094 AUC after training: 0.6555555555555554
User 35094 does not improve AUC. Reverting changes.
Training on augumented user 79017 43/50 current_auc = 0.6555555555555554
User 79017 AUC after training: 0.6555555555555554
User 79017 does not improve AUC. Reverting changes.
Training on augumented user 120987 44/50 current_auc = 0.6555555555555554
User 120987 AUC after training: 0.6555555555555554
User 120987 does not improve AUC. Reverting changes.
Training on augumented user 103740 45/50 current_auc = 0.6555555555555554
User 103740 AUC after training: 0.6555555555555554
User 103740 does not improve AUC. Reverting changes.
Training on augumented user 29851 46/50 current_auc = 0.6555555555555554
User 29851 AUC after training: 0.6555555555555554
User 29851 does not improve AUC. Reverting changes.
Training on augumented user 64919 47/50 current_auc = 0.6555555555555554
User 64919 AUC after training: 0.6555555555555554
User 64919 does not improve AUC. Reverting changes.
Training on augumented user 37107 48/50 current_auc = 0.6555555555555554
User 37107 AUC after training: 0.6555555555555554
User 37107 does not improve AUC. Reverting changes.
Training on augumented user 128735 49/50 current_auc = 0.6555555555555554
User 128735 AUC after training: 0.6555555555555554
User 128735 does not improve AUC. Reverting changes.
[2024-12-02 19:09:35.104648] start test user 31181 159/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:35.517479] start test user 31181 159/568 recall augumented users by random, augumented_users = [14365, 39174, 22241, 36232, 77876, 65708, 22581, 118326, 98211, 116288, 105739, 46246, 59984, 132889, 104201, 71988, 67092, 5329, 62024, 85149, 35533, 59917, 45007, 112569, 86253, 8712, 82854, 10495, 102614, 97430, 32970, 39937, 15846, 121159, 100515, 137299, 86230, 98204, 28040, 134049, 13867, 127246, 114819, 121059, 96325, 103610, 42488, 75035, 22776, 21000]
[2024-12-02 19:09:35.534860] user = 31181 Cloud 159/568
[2024-12-02 19:09:35.601782] user = 31181 Local 159/568
[2024-12-02 19:09:35.777713] user = 31181 Local+ 159/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:38.684279] user = 31181 MPDA- 159/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5167750167750168
Training on augumented user 14365 0/50 current_auc = 0.5167750167750168
User 14365 AUC after training: 0.5169537669537669
User 14365 improves AUC. Keeping the model.
Training on augumented user 39174 1/50 current_auc = 0.5169537669537669
User 39174 AUC after training: 0.517036267036267
User 39174 improves AUC. Keeping the model.
Training on augumented user 22241 2/50 current_auc = 0.517036267036267
User 22241 AUC after training: 0.5177980177980178
User 22241 improves AUC. Keeping the model.
Training on augumented user 36232 3/50 current_auc = 0.5177980177980178
User 36232 AUC after training: 0.5174735174735174
User 36232 does not improve AUC. Reverting changes.
Training on augumented user 77876 4/50 current_auc = 0.5177980177980178
User 77876 AUC after training: 0.5177402677402678
User 77876 does not improve AUC. Reverting changes.
Training on augumented user 65708 5/50 current_auc = 0.5177980177980178
User 65708 AUC after training: 0.5181280181280181
User 65708 improves AUC. Keeping the model.
Training on augumented user 22581 6/50 current_auc = 0.5181280181280181
User 22581 AUC after training: 0.5193627693627694
User 22581 improves AUC. Keeping the model.
Training on augumented user 118326 7/50 current_auc = 0.5193627693627694
User 118326 AUC after training: 0.5185405185405185
User 118326 does not improve AUC. Reverting changes.
Training on augumented user 98211 8/50 current_auc = 0.5193627693627694
User 98211 AUC after training: 0.5175835175835175
User 98211 does not improve AUC. Reverting changes.
Training on augumented user 116288 9/50 current_auc = 0.5193627693627694
User 116288 AUC after training: 0.5198302698302698
User 116288 improves AUC. Keeping the model.
Training on augumented user 105739 10/50 current_auc = 0.5198302698302698
User 105739 AUC after training: 0.5202510202510202
User 105739 improves AUC. Keeping the model.
Training on augumented user 46246 11/50 current_auc = 0.5202510202510202
User 46246 AUC after training: 0.5201547701547702
User 46246 does not improve AUC. Reverting changes.
Training on augumented user 59984 12/50 current_auc = 0.5202510202510202
User 59984 AUC after training: 0.5207680207680208
User 59984 improves AUC. Keeping the model.
Training on augumented user 132889 13/50 current_auc = 0.5207680207680208
User 132889 AUC after training: 0.517935517935518
User 132889 does not improve AUC. Reverting changes.
Training on augumented user 104201 14/50 current_auc = 0.5207680207680208
User 104201 AUC after training: 0.52005577005577
User 104201 does not improve AUC. Reverting changes.
Training on augumented user 71988 15/50 current_auc = 0.5207680207680208
User 71988 AUC after training: 0.5198137698137698
User 71988 does not improve AUC. Reverting changes.
Training on augumented user 67092 16/50 current_auc = 0.5207680207680208
User 67092 AUC after training: 0.5185845185845186
User 67092 does not improve AUC. Reverting changes.
Training on augumented user 5329 17/50 current_auc = 0.5207680207680208
User 5329 AUC after training: 0.5206965206965206
User 5329 does not improve AUC. Reverting changes.
Training on augumented user 62024 18/50 current_auc = 0.5207680207680208
User 62024 AUC after training: 0.5206525206525205
User 62024 does not improve AUC. Reverting changes.
Training on augumented user 85149 19/50 current_auc = 0.5207680207680208
User 85149 AUC after training: 0.5170885170885171
User 85149 does not improve AUC. Reverting changes.
Training on augumented user 35533 20/50 current_auc = 0.5207680207680208
User 35533 AUC after training: 0.5209055209055209
User 35533 improves AUC. Keeping the model.
Training on augumented user 59917 21/50 current_auc = 0.5209055209055209
User 59917 AUC after training: 0.5190410190410191
User 59917 does not improve AUC. Reverting changes.
Training on augumented user 45007 22/50 current_auc = 0.5209055209055209
User 45007 AUC after training: 0.5188540188540188
User 45007 does not improve AUC. Reverting changes.
Training on augumented user 112569 23/50 current_auc = 0.5209055209055209
User 112569 AUC after training: 0.5198275198275197
User 112569 does not improve AUC. Reverting changes.
Training on augumented user 86253 24/50 current_auc = 0.5209055209055209
User 86253 AUC after training: 0.521037521037521
User 86253 improves AUC. Keeping the model.
Training on augumented user 8712 25/50 current_auc = 0.521037521037521
User 8712 AUC after training: 0.5215545215545216
User 8712 improves AUC. Keeping the model.
Training on augumented user 82854 26/50 current_auc = 0.5215545215545216
User 82854 AUC after training: 0.5221732721732721
User 82854 improves AUC. Keeping the model.
Training on augumented user 10495 27/50 current_auc = 0.5221732721732721
User 10495 AUC after training: 0.5217855217855217
User 10495 does not improve AUC. Reverting changes.
Training on augumented user 102614 28/50 current_auc = 0.5221732721732721
User 102614 AUC after training: 0.5224757724757725
User 102614 improves AUC. Keeping the model.
Training on augumented user 97430 29/50 current_auc = 0.5224757724757725
User 97430 AUC after training: 0.5227865227865228
User 97430 improves AUC. Keeping the model.
Training on augumented user 32970 30/50 current_auc = 0.5227865227865228
User 32970 AUC after training: 0.5221870221870222
User 32970 does not improve AUC. Reverting changes.
Training on augumented user 39937 31/50 current_auc = 0.5227865227865228
User 39937 AUC after training: 0.5218460218460218
User 39937 does not improve AUC. Reverting changes.
Training on augumented user 15846 32/50 current_auc = 0.5227865227865228
User 15846 AUC after training: 0.5244227744227744
User 15846 improves AUC. Keeping the model.
Training on augumented user 121159 33/50 current_auc = 0.5244227744227744
User 121159 AUC after training: 0.5244502744502744
User 121159 improves AUC. Keeping the model.
Training on augumented user 100515 34/50 current_auc = 0.5244502744502744
User 100515 AUC after training: 0.5240680240680241
User 100515 does not improve AUC. Reverting changes.
Training on augumented user 137299 35/50 current_auc = 0.5244502744502744
User 137299 AUC after training: 0.5243292743292743
User 137299 does not improve AUC. Reverting changes.
Training on augumented user 86230 36/50 current_auc = 0.5244502744502744
User 86230 AUC after training: 0.5228415228415229
User 86230 does not improve AUC. Reverting changes.
Training on augumented user 98204 37/50 current_auc = 0.5244502744502744
User 98204 AUC after training: 0.5243265243265243
User 98204 does not improve AUC. Reverting changes.
Training on augumented user 28040 38/50 current_auc = 0.5244502744502744
User 28040 AUC after training: 0.5239497739497739
User 28040 does not improve AUC. Reverting changes.
Training on augumented user 134049 39/50 current_auc = 0.5244502744502744
User 134049 AUC after training: 0.5236390236390236
User 134049 does not improve AUC. Reverting changes.
Training on augumented user 13867 40/50 current_auc = 0.5244502744502744
User 13867 AUC after training: 0.5237820237820238
User 13867 does not improve AUC. Reverting changes.
Training on augumented user 127246 41/50 current_auc = 0.5244502744502744
User 127246 AUC after training: 0.5238150238150238
User 127246 does not improve AUC. Reverting changes.
Training on augumented user 114819 42/50 current_auc = 0.5244502744502744
User 114819 AUC after training: 0.5243815243815244
User 114819 does not improve AUC. Reverting changes.
Training on augumented user 121059 43/50 current_auc = 0.5244502744502744
User 121059 AUC after training: 0.5244420244420245
User 121059 does not improve AUC. Reverting changes.
Training on augumented user 96325 44/50 current_auc = 0.5244502744502744
User 96325 AUC after training: 0.5234410234410234
User 96325 does not improve AUC. Reverting changes.
Training on augumented user 103610 45/50 current_auc = 0.5244502744502744
User 103610 AUC after training: 0.5239800239800241
User 103610 does not improve AUC. Reverting changes.
Training on augumented user 42488 46/50 current_auc = 0.5244502744502744
User 42488 AUC after training: 0.5244145244145244
User 42488 does not improve AUC. Reverting changes.
Training on augumented user 75035 47/50 current_auc = 0.5244502744502744
User 75035 AUC after training: 0.5242385242385242
User 75035 does not improve AUC. Reverting changes.
Training on augumented user 22776 48/50 current_auc = 0.5244502744502744
User 22776 AUC after training: 0.5245877745877746
User 22776 improves AUC. Keeping the model.
Training on augumented user 21000 49/50 current_auc = 0.5245877745877746
User 21000 AUC after training: 0.5232045232045233
User 21000 does not improve AUC. Reverting changes.
[2024-12-02 19:10:08.564295] start test user 31192 160/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:09.366405] start test user 31192 160/568 recall augumented users by random, augumented_users = [83301, 44865, 109913, 67722, 127993, 51109, 38654, 101460, 73547, 13191, 117376, 2381, 27445, 49394, 133156, 81312, 78199, 17457, 128182, 36672, 116310, 19368, 73901, 40649, 7834, 90457, 107126, 113985, 116863, 42394, 136331, 75377, 78630, 122887, 52494, 32954, 80104, 3765, 112826, 32634, 48821, 14051, 135138, 52065, 27788, 54512, 101093, 41473, 44005, 136912]
[2024-12-02 19:10:09.388326] user = 31192 Cloud 160/568
[2024-12-02 19:10:09.412533] user = 31192 Local 160/568
[2024-12-02 19:10:09.456430] user = 31192 Local+ 160/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:11.582738] user = 31192 MPDA- 160/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4074675324675325
Training on augumented user 83301 0/50 current_auc = 0.4074675324675325
User 83301 AUC after training: 0.41071428571428575
User 83301 improves AUC. Keeping the model.
Training on augumented user 44865 1/50 current_auc = 0.41071428571428575
User 44865 AUC after training: 0.4107142857142857
User 44865 does not improve AUC. Reverting changes.
Training on augumented user 109913 2/50 current_auc = 0.41071428571428575
User 109913 AUC after training: 0.4074675324675325
User 109913 does not improve AUC. Reverting changes.
Training on augumented user 67722 3/50 current_auc = 0.41071428571428575
User 67722 AUC after training: 0.4074675324675325
User 67722 does not improve AUC. Reverting changes.
Training on augumented user 127993 4/50 current_auc = 0.41071428571428575
User 127993 AUC after training: 0.41071428571428575
User 127993 does not improve AUC. Reverting changes.
Training on augumented user 51109 5/50 current_auc = 0.41071428571428575
User 51109 AUC after training: 0.4074675324675325
User 51109 does not improve AUC. Reverting changes.
Training on augumented user 38654 6/50 current_auc = 0.41071428571428575
User 38654 AUC after training: 0.40422077922077926
User 38654 does not improve AUC. Reverting changes.
Training on augumented user 101460 7/50 current_auc = 0.41071428571428575
User 101460 AUC after training: 0.413961038961039
User 101460 improves AUC. Keeping the model.
Training on augumented user 73547 8/50 current_auc = 0.413961038961039
User 73547 AUC after training: 0.4074675324675324
User 73547 does not improve AUC. Reverting changes.
Training on augumented user 13191 9/50 current_auc = 0.413961038961039
User 13191 AUC after training: 0.41071428571428575
User 13191 does not improve AUC. Reverting changes.
Training on augumented user 117376 10/50 current_auc = 0.413961038961039
User 117376 AUC after training: 0.4074675324675324
User 117376 does not improve AUC. Reverting changes.
Training on augumented user 2381 11/50 current_auc = 0.413961038961039
User 2381 AUC after training: 0.4074675324675324
User 2381 does not improve AUC. Reverting changes.
Training on augumented user 27445 12/50 current_auc = 0.413961038961039
User 27445 AUC after training: 0.413961038961039
User 27445 does not improve AUC. Reverting changes.
Training on augumented user 49394 13/50 current_auc = 0.413961038961039
User 49394 AUC after training: 0.413961038961039
User 49394 does not improve AUC. Reverting changes.
Training on augumented user 133156 14/50 current_auc = 0.413961038961039
User 133156 AUC after training: 0.413961038961039
User 133156 does not improve AUC. Reverting changes.
Training on augumented user 81312 15/50 current_auc = 0.413961038961039
User 81312 AUC after training: 0.4074675324675324
User 81312 does not improve AUC. Reverting changes.
Training on augumented user 78199 16/50 current_auc = 0.413961038961039
User 78199 AUC after training: 0.4074675324675324
User 78199 does not improve AUC. Reverting changes.
Training on augumented user 17457 17/50 current_auc = 0.413961038961039
User 17457 AUC after training: 0.41071428571428575
User 17457 does not improve AUC. Reverting changes.
Training on augumented user 128182 18/50 current_auc = 0.413961038961039
User 128182 AUC after training: 0.4074675324675324
User 128182 does not improve AUC. Reverting changes.
Training on augumented user 36672 19/50 current_auc = 0.413961038961039
User 36672 AUC after training: 0.4074675324675324
User 36672 does not improve AUC. Reverting changes.
Training on augumented user 116310 20/50 current_auc = 0.413961038961039
User 116310 AUC after training: 0.4107142857142857
User 116310 does not improve AUC. Reverting changes.
Training on augumented user 19368 21/50 current_auc = 0.413961038961039
User 19368 AUC after training: 0.400974025974026
User 19368 does not improve AUC. Reverting changes.
Training on augumented user 73901 22/50 current_auc = 0.413961038961039
User 73901 AUC after training: 0.41071428571428575
User 73901 does not improve AUC. Reverting changes.
Training on augumented user 40649 23/50 current_auc = 0.413961038961039
User 40649 AUC after training: 0.413961038961039
User 40649 does not improve AUC. Reverting changes.
Training on augumented user 7834 24/50 current_auc = 0.413961038961039
User 7834 AUC after training: 0.4107142857142857
User 7834 does not improve AUC. Reverting changes.
Training on augumented user 90457 25/50 current_auc = 0.413961038961039
User 90457 AUC after training: 0.40746753246753253
User 90457 does not improve AUC. Reverting changes.
Training on augumented user 107126 26/50 current_auc = 0.413961038961039
User 107126 AUC after training: 0.4107142857142857
User 107126 does not improve AUC. Reverting changes.
Training on augumented user 113985 27/50 current_auc = 0.413961038961039
User 113985 AUC after training: 0.413961038961039
User 113985 does not improve AUC. Reverting changes.
Training on augumented user 116863 28/50 current_auc = 0.413961038961039
User 116863 AUC after training: 0.41071428571428575
User 116863 does not improve AUC. Reverting changes.
Training on augumented user 42394 29/50 current_auc = 0.413961038961039
User 42394 AUC after training: 0.4074675324675325
User 42394 does not improve AUC. Reverting changes.
Training on augumented user 136331 30/50 current_auc = 0.413961038961039
User 136331 AUC after training: 0.413961038961039
User 136331 does not improve AUC. Reverting changes.
Training on augumented user 75377 31/50 current_auc = 0.413961038961039
User 75377 AUC after training: 0.4107142857142857
User 75377 does not improve AUC. Reverting changes.
Training on augumented user 78630 32/50 current_auc = 0.413961038961039
User 78630 AUC after training: 0.4107142857142857
User 78630 does not improve AUC. Reverting changes.
Training on augumented user 122887 33/50 current_auc = 0.413961038961039
User 122887 AUC after training: 0.4107142857142857
User 122887 does not improve AUC. Reverting changes.
Training on augumented user 52494 34/50 current_auc = 0.413961038961039
User 52494 AUC after training: 0.4107142857142857
User 52494 does not improve AUC. Reverting changes.
Training on augumented user 32954 35/50 current_auc = 0.413961038961039
User 32954 AUC after training: 0.413961038961039
User 32954 does not improve AUC. Reverting changes.
Training on augumented user 80104 36/50 current_auc = 0.413961038961039
User 80104 AUC after training: 0.4107142857142857
User 80104 does not improve AUC. Reverting changes.
Training on augumented user 3765 37/50 current_auc = 0.413961038961039
User 3765 AUC after training: 0.4074675324675324
User 3765 does not improve AUC. Reverting changes.
Training on augumented user 112826 38/50 current_auc = 0.413961038961039
User 112826 AUC after training: 0.4074675324675324
User 112826 does not improve AUC. Reverting changes.
Training on augumented user 32634 39/50 current_auc = 0.413961038961039
User 32634 AUC after training: 0.41071428571428575
User 32634 does not improve AUC. Reverting changes.
Training on augumented user 48821 40/50 current_auc = 0.413961038961039
User 48821 AUC after training: 0.4172077922077922
User 48821 improves AUC. Keeping the model.
Training on augumented user 14051 41/50 current_auc = 0.4172077922077922
User 14051 AUC after training: 0.413961038961039
User 14051 does not improve AUC. Reverting changes.
Training on augumented user 135138 42/50 current_auc = 0.4172077922077922
User 135138 AUC after training: 0.41071428571428575
User 135138 does not improve AUC. Reverting changes.
Training on augumented user 52065 43/50 current_auc = 0.4172077922077922
User 52065 AUC after training: 0.41071428571428575
User 52065 does not improve AUC. Reverting changes.
Training on augumented user 27788 44/50 current_auc = 0.4172077922077922
User 27788 AUC after training: 0.4107142857142857
User 27788 does not improve AUC. Reverting changes.
Training on augumented user 54512 45/50 current_auc = 0.4172077922077922
User 54512 AUC after training: 0.4074675324675324
User 54512 does not improve AUC. Reverting changes.
Training on augumented user 101093 46/50 current_auc = 0.4172077922077922
User 101093 AUC after training: 0.413961038961039
User 101093 does not improve AUC. Reverting changes.
Training on augumented user 41473 47/50 current_auc = 0.4172077922077922
User 41473 AUC after training: 0.413961038961039
User 41473 does not improve AUC. Reverting changes.
Training on augumented user 44005 48/50 current_auc = 0.4172077922077922
User 44005 AUC after training: 0.4172077922077922
User 44005 does not improve AUC. Reverting changes.
Training on augumented user 136912 49/50 current_auc = 0.4172077922077922
User 136912 AUC after training: 0.41071428571428575
User 136912 does not improve AUC. Reverting changes.
[2024-12-02 19:10:45.215801] start test user 31199 161/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:46.209390] start test user 31199 161/568 recall augumented users by random, augumented_users = [136248, 86197, 73709, 125720, 30404, 88011, 83543, 105417, 34658, 62889, 125371, 73819, 48878, 131358, 99231, 14965, 19998, 75599, 74566, 67694, 123298, 97954, 119151, 54323, 97329, 38913, 7498, 48070, 59906, 92215, 77167, 118938, 72286, 58732, 74343, 16741, 2206, 125408, 49502, 23347, 57399, 120615, 49694, 64730, 21068, 11951, 13599, 411, 19418, 40080]
[2024-12-02 19:10:46.242464] user = 31199 Cloud 161/568
[2024-12-02 19:10:46.272711] user = 31199 Local 161/568
[2024-12-02 19:10:46.401810] user = 31199 Local+ 161/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:49.282476] user = 31199 MPDA- 161/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6166512059369202
Training on augumented user 136248 0/50 current_auc = 0.6166512059369202
User 136248 AUC after training: 0.6147959183673468
User 136248 does not improve AUC. Reverting changes.
Training on augumented user 86197 1/50 current_auc = 0.6166512059369202
User 86197 AUC after training: 0.6171150278293135
User 86197 improves AUC. Keeping the model.
Training on augumented user 73709 2/50 current_auc = 0.6171150278293135
User 73709 AUC after training: 0.6161873840445269
User 73709 does not improve AUC. Reverting changes.
Training on augumented user 125720 3/50 current_auc = 0.6171150278293135
User 125720 AUC after training: 0.6161873840445269
User 125720 does not improve AUC. Reverting changes.
Training on augumented user 30404 4/50 current_auc = 0.6171150278293135
User 30404 AUC after training: 0.6166512059369202
User 30404 does not improve AUC. Reverting changes.
Training on augumented user 88011 5/50 current_auc = 0.6171150278293135
User 88011 AUC after training: 0.6157235621521335
User 88011 does not improve AUC. Reverting changes.
Training on augumented user 83543 6/50 current_auc = 0.6171150278293135
User 83543 AUC after training: 0.6166512059369202
User 83543 does not improve AUC. Reverting changes.
Training on augumented user 105417 7/50 current_auc = 0.6171150278293135
User 105417 AUC after training: 0.6161873840445269
User 105417 does not improve AUC. Reverting changes.
Training on augumented user 34658 8/50 current_auc = 0.6171150278293135
User 34658 AUC after training: 0.6161873840445269
User 34658 does not improve AUC. Reverting changes.
Training on augumented user 62889 9/50 current_auc = 0.6171150278293135
User 62889 AUC after training: 0.6171150278293136
User 62889 improves AUC. Keeping the model.
Training on augumented user 125371 10/50 current_auc = 0.6171150278293136
User 125371 AUC after training: 0.6161873840445269
User 125371 does not improve AUC. Reverting changes.
Training on augumented user 73819 11/50 current_auc = 0.6171150278293136
User 73819 AUC after training: 0.6175788497217067
User 73819 improves AUC. Keeping the model.
Training on augumented user 48878 12/50 current_auc = 0.6175788497217067
User 48878 AUC after training: 0.6161873840445269
User 48878 does not improve AUC. Reverting changes.
Training on augumented user 131358 13/50 current_auc = 0.6175788497217067
User 131358 AUC after training: 0.6175788497217068
User 131358 improves AUC. Keeping the model.
Training on augumented user 99231 14/50 current_auc = 0.6175788497217068
User 99231 AUC after training: 0.6178107606679035
User 99231 improves AUC. Keeping the model.
Training on augumented user 14965 15/50 current_auc = 0.6178107606679035
User 14965 AUC after training: 0.6178107606679035
User 14965 does not improve AUC. Reverting changes.
Training on augumented user 19998 16/50 current_auc = 0.6178107606679035
User 19998 AUC after training: 0.6173469387755102
User 19998 does not improve AUC. Reverting changes.
Training on augumented user 75599 17/50 current_auc = 0.6178107606679035
User 75599 AUC after training: 0.6168831168831168
User 75599 does not improve AUC. Reverting changes.
Training on augumented user 74566 18/50 current_auc = 0.6178107606679035
User 74566 AUC after training: 0.6173469387755102
User 74566 does not improve AUC. Reverting changes.
Training on augumented user 67694 19/50 current_auc = 0.6178107606679035
User 67694 AUC after training: 0.6173469387755102
User 67694 does not improve AUC. Reverting changes.
Training on augumented user 123298 20/50 current_auc = 0.6178107606679035
User 123298 AUC after training: 0.6182745825602969
User 123298 improves AUC. Keeping the model.
Training on augumented user 97954 21/50 current_auc = 0.6182745825602969
User 97954 AUC after training: 0.6178107606679035
User 97954 does not improve AUC. Reverting changes.
Training on augumented user 119151 22/50 current_auc = 0.6182745825602969
User 119151 AUC after training: 0.6187384044526902
User 119151 improves AUC. Keeping the model.
Training on augumented user 54323 23/50 current_auc = 0.6187384044526902
User 54323 AUC after training: 0.6205936920222634
User 54323 improves AUC. Keeping the model.
Training on augumented user 97329 24/50 current_auc = 0.6205936920222634
User 97329 AUC after training: 0.6192022263450836
User 97329 does not improve AUC. Reverting changes.
Training on augumented user 38913 25/50 current_auc = 0.6205936920222634
User 38913 AUC after training: 0.6196660482374767
User 38913 does not improve AUC. Reverting changes.
Training on augumented user 7498 26/50 current_auc = 0.6205936920222634
User 7498 AUC after training: 0.6164192949907237
User 7498 does not improve AUC. Reverting changes.
Training on augumented user 48070 27/50 current_auc = 0.6205936920222634
User 48070 AUC after training: 0.6233766233766234
User 48070 improves AUC. Keeping the model.
Training on augumented user 59906 28/50 current_auc = 0.6233766233766234
User 59906 AUC after training: 0.6224489795918368
User 59906 does not improve AUC. Reverting changes.
Training on augumented user 92215 29/50 current_auc = 0.6233766233766234
User 92215 AUC after training: 0.6219851576994434
User 92215 does not improve AUC. Reverting changes.
Training on augumented user 77167 30/50 current_auc = 0.6233766233766234
User 77167 AUC after training: 0.6238404452690167
User 77167 improves AUC. Keeping the model.
Training on augumented user 118938 31/50 current_auc = 0.6238404452690167
User 118938 AUC after training: 0.62430426716141
User 118938 improves AUC. Keeping the model.
Training on augumented user 72286 32/50 current_auc = 0.62430426716141
User 72286 AUC after training: 0.62430426716141
User 72286 does not improve AUC. Reverting changes.
Training on augumented user 58732 33/50 current_auc = 0.62430426716141
User 58732 AUC after training: 0.62430426716141
User 58732 does not improve AUC. Reverting changes.
Training on augumented user 74343 34/50 current_auc = 0.62430426716141
User 74343 AUC after training: 0.62430426716141
User 74343 does not improve AUC. Reverting changes.
Training on augumented user 16741 35/50 current_auc = 0.62430426716141
User 16741 AUC after training: 0.6224489795918369
User 16741 does not improve AUC. Reverting changes.
Training on augumented user 2206 36/50 current_auc = 0.62430426716141
User 2206 AUC after training: 0.6201298701298701
User 2206 does not improve AUC. Reverting changes.
Training on augumented user 125408 37/50 current_auc = 0.62430426716141
User 125408 AUC after training: 0.6224489795918368
User 125408 does not improve AUC. Reverting changes.
Training on augumented user 49502 38/50 current_auc = 0.62430426716141
User 49502 AUC after training: 0.6224489795918368
User 49502 does not improve AUC. Reverting changes.
Training on augumented user 23347 39/50 current_auc = 0.62430426716141
User 23347 AUC after training: 0.6229128014842301
User 23347 does not improve AUC. Reverting changes.
Training on augumented user 57399 40/50 current_auc = 0.62430426716141
User 57399 AUC after training: 0.62291280148423
User 57399 does not improve AUC. Reverting changes.
Training on augumented user 120615 41/50 current_auc = 0.62430426716141
User 120615 AUC after training: 0.6233766233766234
User 120615 does not improve AUC. Reverting changes.
Training on augumented user 49694 42/50 current_auc = 0.62430426716141
User 49694 AUC after training: 0.6222170686456401
User 49694 does not improve AUC. Reverting changes.
Training on augumented user 64730 43/50 current_auc = 0.62430426716141
User 64730 AUC after training: 0.6233766233766234
User 64730 does not improve AUC. Reverting changes.
Training on augumented user 21068 44/50 current_auc = 0.62430426716141
User 21068 AUC after training: 0.62430426716141
User 21068 does not improve AUC. Reverting changes.
Training on augumented user 11951 45/50 current_auc = 0.62430426716141
User 11951 AUC after training: 0.6238404452690167
User 11951 does not improve AUC. Reverting changes.
Training on augumented user 13599 46/50 current_auc = 0.62430426716141
User 13599 AUC after training: 0.62430426716141
User 13599 does not improve AUC. Reverting changes.
Training on augumented user 411 47/50 current_auc = 0.62430426716141
User 411 AUC after training: 0.6219851576994435
User 411 does not improve AUC. Reverting changes.
Training on augumented user 19418 48/50 current_auc = 0.62430426716141
User 19418 AUC after training: 0.6238404452690167
User 19418 does not improve AUC. Reverting changes.
Training on augumented user 40080 49/50 current_auc = 0.62430426716141
User 40080 AUC after training: 0.6233766233766234
User 40080 does not improve AUC. Reverting changes.
[2024-12-02 19:11:19.291049] start test user 31273 162/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:19.718556] start test user 31273 162/568 recall augumented users by random, augumented_users = [99731, 16668, 133356, 93785, 80326, 83840, 114791, 32235, 52193, 38023, 11087, 54169, 36520, 67867, 99510, 878, 59589, 32777, 14593, 65693, 120009, 136817, 94338, 38519, 96312, 41392, 25589, 7529, 41422, 97301, 31418, 116615, 63627, 135158, 97161, 11394, 130528, 108854, 30651, 65154, 5987, 30033, 90043, 70712, 65339, 91657, 126196, 26936, 90177, 116488]
[2024-12-02 19:11:19.734499] user = 31273 Cloud 162/568
[2024-12-02 19:11:19.792785] user = 31273 Local 162/568
[2024-12-02 19:11:19.886286] user = 31273 Local+ 162/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:21.334659] user = 31273 MPDA- 162/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6517003245975208
Training on augumented user 99731 0/50 current_auc = 0.6517003245975208
User 99731 AUC after training: 0.652310306515914
User 99731 improves AUC. Keeping the model.
Training on augumented user 16668 1/50 current_auc = 0.652310306515914
User 16668 AUC after training: 0.6521795961048298
User 16668 does not improve AUC. Reverting changes.
Training on augumented user 133356 2/50 current_auc = 0.652310306515914
User 133356 AUC after training: 0.6525281572010544
User 133356 improves AUC. Keeping the model.
Training on augumented user 93785 3/50 current_auc = 0.6525281572010544
User 93785 AUC after training: 0.6525935124065965
User 93785 improves AUC. Keeping the model.
Training on augumented user 80326 4/50 current_auc = 0.6525935124065965
User 80326 AUC after training: 0.6528113630917369
User 80326 improves AUC. Keeping the model.
Training on augumented user 83840 5/50 current_auc = 0.6528113630917369
User 83840 AUC after training: 0.6534867002156721
User 83840 improves AUC. Keeping the model.
Training on augumented user 114791 6/50 current_auc = 0.6534867002156721
User 114791 AUC after training: 0.65342134501013
User 114791 does not improve AUC. Reverting changes.
Training on augumented user 32235 7/50 current_auc = 0.6534867002156721
User 32235 AUC after training: 0.6535738404897284
User 32235 improves AUC. Keeping the model.
Training on augumented user 52193 8/50 current_auc = 0.6535738404897284
User 52193 AUC after training: 0.6536827658322986
User 52193 improves AUC. Keeping the model.
Training on augumented user 38023 9/50 current_auc = 0.6536827658322986
User 38023 AUC after training: 0.6532143868592467
User 38023 does not improve AUC. Reverting changes.
Training on augumented user 11087 10/50 current_auc = 0.6536827658322986
User 11087 AUC after training: 0.6535084852841863
User 11087 does not improve AUC. Reverting changes.
Training on augumented user 54169 11/50 current_auc = 0.6536827658322986
User 54169 AUC after training: 0.6527242228176807
User 54169 does not improve AUC. Reverting changes.
Training on augumented user 36520 12/50 current_auc = 0.6536827658322986
User 36520 AUC after training: 0.6532470644620176
User 36520 does not improve AUC. Reverting changes.
Training on augumented user 67867 13/50 current_auc = 0.6536827658322986
User 67867 AUC after training: 0.6538134762433828
User 67867 improves AUC. Keeping the model.
Training on augumented user 99510 14/50 current_auc = 0.6538134762433828
User 99510 AUC after training: 0.6537045509008126
User 99510 does not improve AUC. Reverting changes.
Training on augumented user 878 15/50 current_auc = 0.6538134762433828
User 878 AUC after training: 0.6537699061063547
User 878 does not improve AUC. Reverting changes.
Training on augumented user 59589 16/50 current_auc = 0.6538134762433828
User 59589 AUC after training: 0.6538788314489249
User 59589 improves AUC. Keeping the model.
Training on augumented user 32777 17/50 current_auc = 0.6538788314489249
User 32777 AUC after training: 0.6536391956952705
User 32777 does not improve AUC. Reverting changes.
Training on augumented user 14593 18/50 current_auc = 0.6538788314489249
User 14593 AUC after training: 0.6536827658322986
User 14593 does not improve AUC. Reverting changes.
Training on augumented user 65693 19/50 current_auc = 0.6538788314489249
User 65693 AUC after training: 0.6538788314489249
User 65693 does not improve AUC. Reverting changes.
Training on augumented user 120009 20/50 current_auc = 0.6538788314489249
User 120009 AUC after training: 0.6537481210378406
User 120009 does not improve AUC. Reverting changes.
Training on augumented user 136817 21/50 current_auc = 0.6538788314489249
User 136817 AUC after training: 0.6541838224081215
User 136817 improves AUC. Keeping the model.
Training on augumented user 94338 22/50 current_auc = 0.6541838224081215
User 94338 AUC after training: 0.6543581029562338
User 94338 improves AUC. Keeping the model.
Training on augumented user 38519 23/50 current_auc = 0.6543581029562338
User 38519 AUC after training: 0.6543145328192057
User 38519 does not improve AUC. Reverting changes.
Training on augumented user 96312 24/50 current_auc = 0.6543581029562338
User 96312 AUC after training: 0.6536391956952705
User 96312 does not improve AUC. Reverting changes.
Training on augumented user 41392 25/50 current_auc = 0.6543581029562338
User 41392 AUC after training: 0.653900616517439
User 41392 does not improve AUC. Reverting changes.
Training on augumented user 25589 26/50 current_auc = 0.6543581029562338
User 25589 AUC after training: 0.6537481210378406
User 25589 does not improve AUC. Reverting changes.
Training on augumented user 7529 27/50 current_auc = 0.6543581029562338
User 7529 AUC after training: 0.6539877567914951
User 7529 does not improve AUC. Reverting changes.
Training on augumented user 41422 28/50 current_auc = 0.6543581029562338
User 41422 AUC after training: 0.6538570463804109
User 41422 does not improve AUC. Reverting changes.
Training on augumented user 97301 29/50 current_auc = 0.6543581029562338
User 97301 AUC after training: 0.6537481210378406
User 97301 does not improve AUC. Reverting changes.
Training on augumented user 31418 30/50 current_auc = 0.6543581029562338
User 31418 AUC after training: 0.6540531119970372
User 31418 does not improve AUC. Reverting changes.
Training on augumented user 116615 31/50 current_auc = 0.6543581029562338
User 116615 AUC after training: 0.6535738404897283
User 116615 does not improve AUC. Reverting changes.
Training on augumented user 63627 32/50 current_auc = 0.6543581029562338
User 63627 AUC after training: 0.6535084852841861
User 63627 does not improve AUC. Reverting changes.
Training on augumented user 135158 33/50 current_auc = 0.6543581029562338
User 135158 AUC after training: 0.6536827658322985
User 135158 does not improve AUC. Reverting changes.
Training on augumented user 97161 34/50 current_auc = 0.6543581029562338
User 97161 AUC after training: 0.6534322375443871
User 97161 does not improve AUC. Reverting changes.
Training on augumented user 11394 35/50 current_auc = 0.6543581029562338
User 11394 AUC after training: 0.6542056074766355
User 11394 does not improve AUC. Reverting changes.
Training on augumented user 130528 36/50 current_auc = 0.6543581029562338
User 130528 AUC after training: 0.6543145328192057
User 130528 does not improve AUC. Reverting changes.
Training on augumented user 108854 37/50 current_auc = 0.6543581029562338
User 108854 AUC after training: 0.6542491776136636
User 108854 does not improve AUC. Reverting changes.
Training on augumented user 30651 38/50 current_auc = 0.6543581029562338
User 30651 AUC after training: 0.6538570463804108
User 30651 does not improve AUC. Reverting changes.
Training on augumented user 65154 39/50 current_auc = 0.6543581029562338
User 65154 AUC after training: 0.6537916911748689
User 65154 does not improve AUC. Reverting changes.
Training on augumented user 5987 40/50 current_auc = 0.6543581029562338
User 5987 AUC after training: 0.6540095418600091
User 5987 does not improve AUC. Reverting changes.
Training on augumented user 30033 41/50 current_auc = 0.6543581029562338
User 30033 AUC after training: 0.6543581029562338
User 30033 does not improve AUC. Reverting changes.
Training on augumented user 90043 42/50 current_auc = 0.6543581029562338
User 90043 AUC after training: 0.653922401585953
User 90043 does not improve AUC. Reverting changes.
Training on augumented user 70712 43/50 current_auc = 0.6543581029562338
User 70712 AUC after training: 0.6540095418600091
User 70712 does not improve AUC. Reverting changes.
Training on augumented user 65339 44/50 current_auc = 0.6543581029562338
User 65339 AUC after training: 0.6530509988453914
User 65339 does not improve AUC. Reverting changes.
Training on augumented user 91657 45/50 current_auc = 0.6543581029562338
User 91657 AUC after training: 0.6541838224081213
User 91657 does not improve AUC. Reverting changes.
Training on augumented user 126196 46/50 current_auc = 0.6543581029562338
User 126196 AUC after training: 0.6535520554212143
User 126196 does not improve AUC. Reverting changes.
Training on augumented user 26936 47/50 current_auc = 0.6543581029562338
User 26936 AUC after training: 0.6541402522710933
User 26936 does not improve AUC. Reverting changes.
Training on augumented user 90177 48/50 current_auc = 0.6543581029562338
User 90177 AUC after training: 0.6541402522710934
User 90177 does not improve AUC. Reverting changes.
Training on augumented user 116488 49/50 current_auc = 0.6543581029562338
User 116488 AUC after training: 0.6539441866544671
User 116488 does not improve AUC. Reverting changes.
[2024-12-02 19:11:47.464546] start test user 31284 163/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:48.027606] start test user 31284 163/568 recall augumented users by random, augumented_users = [103100, 59689, 74395, 68401, 131300, 95426, 88557, 93873, 128571, 22408, 23658, 5263, 13604, 115791, 121517, 131032, 46123, 16936, 136717, 13448, 56974, 38094, 121446, 80380, 83983, 43551, 69842, 73795, 101460, 67139, 62211, 74325, 39484, 133985, 60178, 106113, 62672, 54810, 122885, 123330, 134263, 106651, 125384, 40242, 138246, 94846, 136140, 118514, 21627, 23604]
[2024-12-02 19:11:48.046492] user = 31284 Cloud 163/568
[2024-12-02 19:11:48.055079] user = 31284 Local 163/568
[2024-12-02 19:11:48.128042] user = 31284 Local+ 163/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:51.418915] user = 31284 MPDA- 163/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 103100 0/50 current_auc = 0.0
User 103100 AUC after training: 0.0
User 103100 does not improve AUC. Reverting changes.
Training on augumented user 59689 1/50 current_auc = 0.0
User 59689 AUC after training: 0.0
User 59689 does not improve AUC. Reverting changes.
Training on augumented user 74395 2/50 current_auc = 0.0
User 74395 AUC after training: 0.0
User 74395 does not improve AUC. Reverting changes.
Training on augumented user 68401 3/50 current_auc = 0.0
User 68401 AUC after training: 0.0
User 68401 does not improve AUC. Reverting changes.
Training on augumented user 131300 4/50 current_auc = 0.0
User 131300 AUC after training: 0.0
User 131300 does not improve AUC. Reverting changes.
Training on augumented user 95426 5/50 current_auc = 0.0
User 95426 AUC after training: 0.0
User 95426 does not improve AUC. Reverting changes.
Training on augumented user 88557 6/50 current_auc = 0.0
User 88557 AUC after training: 0.0
User 88557 does not improve AUC. Reverting changes.
Training on augumented user 93873 7/50 current_auc = 0.0
User 93873 AUC after training: 0.0
User 93873 does not improve AUC. Reverting changes.
Training on augumented user 128571 8/50 current_auc = 0.0
User 128571 AUC after training: 0.0
User 128571 does not improve AUC. Reverting changes.
Training on augumented user 22408 9/50 current_auc = 0.0
User 22408 AUC after training: 0.0
User 22408 does not improve AUC. Reverting changes.
Training on augumented user 23658 10/50 current_auc = 0.0
User 23658 AUC after training: 0.0
User 23658 does not improve AUC. Reverting changes.
Training on augumented user 5263 11/50 current_auc = 0.0
User 5263 AUC after training: 0.0
User 5263 does not improve AUC. Reverting changes.
Training on augumented user 13604 12/50 current_auc = 0.0
User 13604 AUC after training: 0.0
User 13604 does not improve AUC. Reverting changes.
Training on augumented user 115791 13/50 current_auc = 0.0
User 115791 AUC after training: 0.0
User 115791 does not improve AUC. Reverting changes.
Training on augumented user 121517 14/50 current_auc = 0.0
User 121517 AUC after training: 0.0
User 121517 does not improve AUC. Reverting changes.
Training on augumented user 131032 15/50 current_auc = 0.0
User 131032 AUC after training: 0.0
User 131032 does not improve AUC. Reverting changes.
Training on augumented user 46123 16/50 current_auc = 0.0
User 46123 AUC after training: 0.0
User 46123 does not improve AUC. Reverting changes.
Training on augumented user 16936 17/50 current_auc = 0.0
User 16936 AUC after training: 0.0
User 16936 does not improve AUC. Reverting changes.
Training on augumented user 136717 18/50 current_auc = 0.0
User 136717 AUC after training: 0.0
User 136717 does not improve AUC. Reverting changes.
Training on augumented user 13448 19/50 current_auc = 0.0
User 13448 AUC after training: 0.0
User 13448 does not improve AUC. Reverting changes.
Training on augumented user 56974 20/50 current_auc = 0.0
User 56974 AUC after training: 0.0
User 56974 does not improve AUC. Reverting changes.
Training on augumented user 38094 21/50 current_auc = 0.0
User 38094 AUC after training: 0.0
User 38094 does not improve AUC. Reverting changes.
Training on augumented user 121446 22/50 current_auc = 0.0
User 121446 AUC after training: 0.0
User 121446 does not improve AUC. Reverting changes.
Training on augumented user 80380 23/50 current_auc = 0.0
User 80380 AUC after training: 0.0
User 80380 does not improve AUC. Reverting changes.
Training on augumented user 83983 24/50 current_auc = 0.0
User 83983 AUC after training: 0.0
User 83983 does not improve AUC. Reverting changes.
Training on augumented user 43551 25/50 current_auc = 0.0
User 43551 AUC after training: 0.0
User 43551 does not improve AUC. Reverting changes.
Training on augumented user 69842 26/50 current_auc = 0.0
User 69842 AUC after training: 0.0
User 69842 does not improve AUC. Reverting changes.
Training on augumented user 73795 27/50 current_auc = 0.0
User 73795 AUC after training: 0.0
User 73795 does not improve AUC. Reverting changes.
Training on augumented user 101460 28/50 current_auc = 0.0
User 101460 AUC after training: 0.0
User 101460 does not improve AUC. Reverting changes.
Training on augumented user 67139 29/50 current_auc = 0.0
User 67139 AUC after training: 0.0
User 67139 does not improve AUC. Reverting changes.
Training on augumented user 62211 30/50 current_auc = 0.0
User 62211 AUC after training: 0.0
User 62211 does not improve AUC. Reverting changes.
Training on augumented user 74325 31/50 current_auc = 0.0
User 74325 AUC after training: 0.0
User 74325 does not improve AUC. Reverting changes.
Training on augumented user 39484 32/50 current_auc = 0.0
User 39484 AUC after training: 0.0
User 39484 does not improve AUC. Reverting changes.
Training on augumented user 133985 33/50 current_auc = 0.0
User 133985 AUC after training: 0.0
User 133985 does not improve AUC. Reverting changes.
Training on augumented user 60178 34/50 current_auc = 0.0
User 60178 AUC after training: 0.0
User 60178 does not improve AUC. Reverting changes.
Training on augumented user 106113 35/50 current_auc = 0.0
User 106113 AUC after training: 0.0
User 106113 does not improve AUC. Reverting changes.
Training on augumented user 62672 36/50 current_auc = 0.0
User 62672 AUC after training: 0.0
User 62672 does not improve AUC. Reverting changes.
Training on augumented user 54810 37/50 current_auc = 0.0
User 54810 AUC after training: 0.0
User 54810 does not improve AUC. Reverting changes.
Training on augumented user 122885 38/50 current_auc = 0.0
User 122885 AUC after training: 0.0
User 122885 does not improve AUC. Reverting changes.
Training on augumented user 123330 39/50 current_auc = 0.0
User 123330 AUC after training: 0.0
User 123330 does not improve AUC. Reverting changes.
Training on augumented user 134263 40/50 current_auc = 0.0
User 134263 AUC after training: 0.0
User 134263 does not improve AUC. Reverting changes.
Training on augumented user 106651 41/50 current_auc = 0.0
User 106651 AUC after training: 0.0
User 106651 does not improve AUC. Reverting changes.
Training on augumented user 125384 42/50 current_auc = 0.0
User 125384 AUC after training: 0.0
User 125384 does not improve AUC. Reverting changes.
Training on augumented user 40242 43/50 current_auc = 0.0
User 40242 AUC after training: 0.0
User 40242 does not improve AUC. Reverting changes.
Training on augumented user 138246 44/50 current_auc = 0.0
User 138246 AUC after training: 0.0
User 138246 does not improve AUC. Reverting changes.
Training on augumented user 94846 45/50 current_auc = 0.0
User 94846 AUC after training: 0.0
User 94846 does not improve AUC. Reverting changes.
Training on augumented user 136140 46/50 current_auc = 0.0
User 136140 AUC after training: 0.0
User 136140 does not improve AUC. Reverting changes.
Training on augumented user 118514 47/50 current_auc = 0.0
User 118514 AUC after training: 0.0
User 118514 does not improve AUC. Reverting changes.
Training on augumented user 21627 48/50 current_auc = 0.0
User 21627 AUC after training: 0.0
User 21627 does not improve AUC. Reverting changes.
Training on augumented user 23604 49/50 current_auc = 0.0
User 23604 AUC after training: 0.0
User 23604 does not improve AUC. Reverting changes.
[2024-12-02 19:12:20.484331] start test user 31291 164/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:21.057054] start test user 31291 164/568 recall augumented users by random, augumented_users = [95601, 78215, 96051, 108649, 78114, 51049, 96049, 9762, 87316, 87782, 41801, 84751, 98472, 117934, 33138, 73256, 73649, 117243, 137883, 12579, 114913, 106571, 135486, 90403, 16265, 83624, 124308, 76968, 96480, 117128, 97980, 15081, 121979, 14722, 27003, 119650, 73847, 121948, 70654, 113431, 15685, 46059, 37553, 94692, 41713, 82193, 109950, 97756, 8381, 81218]
[2024-12-02 19:12:21.085616] user = 31291 Cloud 164/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:12:21.112686] user = 31291 Local 164/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:12:21.173718] user = 31291 Local+ 164/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:12:23.934324] user = 31291 MPDA- 164/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 95601 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95601 AUC after training: 0.5
User 95601 does not improve AUC. Reverting changes.
Training on augumented user 78215 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78215 AUC after training: 0.5
User 78215 does not improve AUC. Reverting changes.
Training on augumented user 96051 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96051 AUC after training: 0.5
User 96051 does not improve AUC. Reverting changes.
Training on augumented user 108649 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108649 AUC after training: 0.5
User 108649 does not improve AUC. Reverting changes.
Training on augumented user 78114 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78114 AUC after training: 0.5
User 78114 does not improve AUC. Reverting changes.
Training on augumented user 51049 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51049 AUC after training: 0.5
User 51049 does not improve AUC. Reverting changes.
Training on augumented user 96049 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96049 AUC after training: 0.5
User 96049 does not improve AUC. Reverting changes.
Training on augumented user 9762 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9762 AUC after training: 0.5
User 9762 does not improve AUC. Reverting changes.
Training on augumented user 87316 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87316 AUC after training: 0.5
User 87316 does not improve AUC. Reverting changes.
Training on augumented user 87782 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87782 AUC after training: 0.5
User 87782 does not improve AUC. Reverting changes.
Training on augumented user 41801 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41801 AUC after training: 0.5
User 41801 does not improve AUC. Reverting changes.
Training on augumented user 84751 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84751 AUC after training: 0.5
User 84751 does not improve AUC. Reverting changes.
Training on augumented user 98472 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98472 AUC after training: 0.5
User 98472 does not improve AUC. Reverting changes.
Training on augumented user 117934 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117934 AUC after training: 0.5
User 117934 does not improve AUC. Reverting changes.
Training on augumented user 33138 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33138 AUC after training: 0.5
User 33138 does not improve AUC. Reverting changes.
Training on augumented user 73256 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73256 AUC after training: 0.5
User 73256 does not improve AUC. Reverting changes.
Training on augumented user 73649 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73649 AUC after training: 0.5
User 73649 does not improve AUC. Reverting changes.
Training on augumented user 117243 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117243 AUC after training: 0.5
User 117243 does not improve AUC. Reverting changes.
Training on augumented user 137883 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137883 AUC after training: 0.5
User 137883 does not improve AUC. Reverting changes.
Training on augumented user 12579 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12579 AUC after training: 0.5
User 12579 does not improve AUC. Reverting changes.
Training on augumented user 114913 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114913 AUC after training: 0.5
User 114913 does not improve AUC. Reverting changes.
Training on augumented user 106571 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106571 AUC after training: 0.5
User 106571 does not improve AUC. Reverting changes.
Training on augumented user 135486 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135486 AUC after training: 0.5
User 135486 does not improve AUC. Reverting changes.
Training on augumented user 90403 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90403 AUC after training: 0.5
User 90403 does not improve AUC. Reverting changes.
Training on augumented user 16265 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16265 AUC after training: 0.5
User 16265 does not improve AUC. Reverting changes.
Training on augumented user 83624 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83624 AUC after training: 0.5
User 83624 does not improve AUC. Reverting changes.
Training on augumented user 124308 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124308 AUC after training: 0.5
User 124308 does not improve AUC. Reverting changes.
Training on augumented user 76968 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76968 AUC after training: 0.5
User 76968 does not improve AUC. Reverting changes.
Training on augumented user 96480 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96480 AUC after training: 0.5
User 96480 does not improve AUC. Reverting changes.
Training on augumented user 117128 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117128 AUC after training: 0.5
User 117128 does not improve AUC. Reverting changes.
Training on augumented user 97980 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97980 AUC after training: 0.5
User 97980 does not improve AUC. Reverting changes.
Training on augumented user 15081 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15081 AUC after training: 0.5
User 15081 does not improve AUC. Reverting changes.
Training on augumented user 121979 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121979 AUC after training: 0.5
User 121979 does not improve AUC. Reverting changes.
Training on augumented user 14722 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14722 AUC after training: 0.5
User 14722 does not improve AUC. Reverting changes.
Training on augumented user 27003 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27003 AUC after training: 0.5
User 27003 does not improve AUC. Reverting changes.
Training on augumented user 119650 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119650 AUC after training: 0.5
User 119650 does not improve AUC. Reverting changes.
Training on augumented user 73847 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73847 AUC after training: 0.5
User 73847 does not improve AUC. Reverting changes.
Training on augumented user 121948 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121948 AUC after training: 0.5
User 121948 does not improve AUC. Reverting changes.
Training on augumented user 70654 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70654 AUC after training: 0.5
User 70654 does not improve AUC. Reverting changes.
Training on augumented user 113431 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113431 AUC after training: 0.5
User 113431 does not improve AUC. Reverting changes.
Training on augumented user 15685 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15685 AUC after training: 0.5
User 15685 does not improve AUC. Reverting changes.
Training on augumented user 46059 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46059 AUC after training: 0.5
User 46059 does not improve AUC. Reverting changes.
Training on augumented user 37553 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37553 AUC after training: 0.5
User 37553 does not improve AUC. Reverting changes.
Training on augumented user 94692 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94692 AUC after training: 0.5
User 94692 does not improve AUC. Reverting changes.
Training on augumented user 41713 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41713 AUC after training: 0.5
User 41713 does not improve AUC. Reverting changes.
Training on augumented user 82193 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82193 AUC after training: 0.5
User 82193 does not improve AUC. Reverting changes.
Training on augumented user 109950 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109950 AUC after training: 0.5
User 109950 does not improve AUC. Reverting changes.
Training on augumented user 97756 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97756 AUC after training: 0.5
User 97756 does not improve AUC. Reverting changes.
Training on augumented user 8381 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8381 AUC after training: 0.5
User 8381 does not improve AUC. Reverting changes.
Training on augumented user 81218 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81218 AUC after training: 0.5
User 81218 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:12:52.894304] start test user 31321 165/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:53.504839] start test user 31321 165/568 recall augumented users by random, augumented_users = [115915, 44096, 105011, 92219, 61666, 102942, 119813, 31930, 73643, 99223, 70057, 117301, 84816, 35973, 83005, 17524, 100310, 70779, 30960, 18358, 126103, 25212, 5929, 81842, 119935, 95612, 97949, 3142, 13219, 88188, 125477, 40416, 63413, 27200, 110380, 11135, 2668, 5863, 6745, 107618, 109253, 87592, 39557, 135678, 69729, 44303, 136957, 21629, 28755, 34990]
[2024-12-02 19:12:53.520342] user = 31321 Cloud 165/568
[2024-12-02 19:12:53.601493] user = 31321 Local 165/568
[2024-12-02 19:12:53.749451] user = 31321 Local+ 165/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:55.595414] user = 31321 MPDA- 165/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6788501912363849
Training on augumented user 115915 0/50 current_auc = 0.6788501912363849
User 115915 AUC after training: 0.6791152199218424
User 115915 improves AUC. Keeping the model.
Training on augumented user 44096 1/50 current_auc = 0.6791152199218424
User 44096 AUC after training: 0.6783591086721543
User 44096 does not improve AUC. Reverting changes.
Training on augumented user 105011 2/50 current_auc = 0.6791152199218424
User 105011 AUC after training: 0.6791827762534297
User 105011 improves AUC. Keeping the model.
Training on augumented user 92219 3/50 current_auc = 0.6791827762534297
User 92219 AUC after training: 0.6791879728943211
User 92219 improves AUC. Keeping the model.
Training on augumented user 61666 4/50 current_auc = 0.6791879728943211
User 61666 AUC after training: 0.680294857404174
User 61666 improves AUC. Keeping the model.
Training on augumented user 102942 5/50 current_auc = 0.680294857404174
User 102942 AUC after training: 0.6803286355699676
User 102942 improves AUC. Keeping the model.
Training on augumented user 119813 6/50 current_auc = 0.6803286355699676
User 119813 AUC after training: 0.6806768105096865
User 119813 improves AUC. Keeping the model.
Training on augumented user 31930 7/50 current_auc = 0.6806768105096865
User 31930 AUC after training: 0.6799336908622268
User 31930 does not improve AUC. Reverting changes.
Training on augumented user 73643 8/50 current_auc = 0.6806768105096865
User 73643 AUC after training: 0.6802896607632825
User 73643 does not improve AUC. Reverting changes.
Training on augumented user 99223 9/50 current_auc = 0.6806768105096865
User 99223 AUC after training: 0.6807833416479587
User 99223 improves AUC. Keeping the model.
Training on augumented user 70057 10/50 current_auc = 0.6807833416479587
User 70057 AUC after training: 0.6809184543111332
User 70057 improves AUC. Keeping the model.
Training on augumented user 117301 11/50 current_auc = 0.6809184543111332
User 117301 AUC after training: 0.6796374823314211
User 117301 does not improve AUC. Reverting changes.
Training on augumented user 84816 12/50 current_auc = 0.6809184543111332
User 84816 AUC after training: 0.6809262492724703
User 84816 improves AUC. Keeping the model.
Training on augumented user 35973 13/50 current_auc = 0.6809262492724703
User 35973 AUC after training: 0.6797362185083562
User 35973 does not improve AUC. Reverting changes.
Training on augumented user 83005 14/50 current_auc = 0.6809262492724703
User 83005 AUC after training: 0.6793984368504198
User 83005 does not improve AUC. Reverting changes.
Training on augumented user 17524 15/50 current_auc = 0.6809262492724703
User 17524 AUC after training: 0.6811808846761453
User 17524 improves AUC. Keeping the model.
Training on augumented user 100310 16/50 current_auc = 0.6811808846761453
User 100310 AUC after training: 0.6810561652947535
User 100310 does not improve AUC. Reverting changes.
Training on augumented user 70779 17/50 current_auc = 0.6811808846761453
User 70779 AUC after training: 0.6810717552174275
User 70779 does not improve AUC. Reverting changes.
Training on augumented user 30960 18/50 current_auc = 0.6811808846761453
User 30960 AUC after training: 0.6788995593248525
User 30960 does not improve AUC. Reverting changes.
Training on augumented user 18358 19/50 current_auc = 0.6811808846761453
User 18358 AUC after training: 0.6811808846761453
User 18358 does not improve AUC. Reverting changes.
Training on augumented user 126103 20/50 current_auc = 0.6811808846761453
User 126103 AUC after training: 0.6815862226656689
User 126103 improves AUC. Keeping the model.
Training on augumented user 25212 21/50 current_auc = 0.6815862226656689
User 25212 AUC after training: 0.6810275837698512
User 25212 does not improve AUC. Reverting changes.
Training on augumented user 5929 22/50 current_auc = 0.6815862226656689
User 5929 AUC after training: 0.6786916936891992
User 5929 does not improve AUC. Reverting changes.
Training on augumented user 81842 23/50 current_auc = 0.6815862226656689
User 81842 AUC after training: 0.6815732310634406
User 81842 does not improve AUC. Reverting changes.
Training on augumented user 119935 24/50 current_auc = 0.6815862226656689
User 119935 AUC after training: 0.680889872786231
User 119935 does not improve AUC. Reverting changes.
Training on augumented user 95612 25/50 current_auc = 0.6815862226656689
User 95612 AUC after training: 0.6810093955267316
User 95612 does not improve AUC. Reverting changes.
Training on augumented user 97949 26/50 current_auc = 0.6815862226656689
User 97949 AUC after training: 0.6815030764114076
User 97949 does not improve AUC. Reverting changes.
Training on augumented user 3142 27/50 current_auc = 0.6815862226656689
User 3142 AUC after training: 0.6809938056040574
User 3142 does not improve AUC. Reverting changes.
Training on augumented user 13219 28/50 current_auc = 0.6815862226656689
User 13219 AUC after training: 0.6812432443668412
User 13219 does not improve AUC. Reverting changes.
Training on augumented user 88188 29/50 current_auc = 0.6815862226656689
User 88188 AUC after training: 0.6796582688949864
User 88188 does not improve AUC. Reverting changes.
Training on augumented user 125477 30/50 current_auc = 0.6815862226656689
User 125477 AUC after training: 0.6816329924336909
User 125477 improves AUC. Keeping the model.
Training on augumented user 40416 31/50 current_auc = 0.6816329924336909
User 40416 AUC after training: 0.6811029350627754
User 40416 does not improve AUC. Reverting changes.
Training on augumented user 63413 32/50 current_auc = 0.6816329924336909
User 63413 AUC after training: 0.6806092541780993
User 63413 does not improve AUC. Reverting changes.
Training on augumented user 27200 33/50 current_auc = 0.6816329924336909
User 27200 AUC after training: 0.6814978797705163
User 27200 does not improve AUC. Reverting changes.
Training on augumented user 110380 34/50 current_auc = 0.6816329924336909
User 110380 AUC after training: 0.6814744948865052
User 110380 does not improve AUC. Reverting changes.
Training on augumented user 11135 35/50 current_auc = 0.6816329924336909
User 11135 AUC after training: 0.6810405753720794
User 11135 does not improve AUC. Reverting changes.
Training on augumented user 2668 36/50 current_auc = 0.6816329924336909
User 2668 AUC after training: 0.6813315872619939
User 2668 does not improve AUC. Reverting changes.
Training on augumented user 5863 37/50 current_auc = 0.6816329924336909
User 5863 AUC after training: 0.6814666999251683
User 5863 does not improve AUC. Reverting changes.
Training on augumented user 6745 38/50 current_auc = 0.6816329924336909
User 6745 AUC after training: 0.6818512513511266
User 6745 improves AUC. Keeping the model.
Training on augumented user 107618 39/50 current_auc = 0.6818512513511266
User 107618 AUC after training: 0.6818928244782573
User 107618 improves AUC. Keeping the model.
Training on augumented user 109253 40/50 current_auc = 0.6818928244782573
User 109253 AUC after training: 0.6817083437266152
User 109253 does not improve AUC. Reverting changes.
Training on augumented user 87592 41/50 current_auc = 0.6818928244782573
User 87592 AUC after training: 0.681461503284277
User 87592 does not improve AUC. Reverting changes.
Training on augumented user 39557 42/50 current_auc = 0.6818928244782573
User 39557 AUC after training: 0.6816615739585932
User 39557 does not improve AUC. Reverting changes.
Training on augumented user 135678 43/50 current_auc = 0.6818928244782573
User 135678 AUC after training: 0.6814666999251683
User 135678 does not improve AUC. Reverting changes.
Training on augumented user 69729 44/50 current_auc = 0.6818928244782573
User 69729 AUC after training: 0.6810561652947534
User 69729 does not improve AUC. Reverting changes.
Training on augumented user 44303 45/50 current_auc = 0.6818928244782573
User 44303 AUC after training: 0.6815654361021036
User 44303 does not improve AUC. Reverting changes.
Training on augumented user 136957 46/50 current_auc = 0.6818928244782573
User 136957 AUC after training: 0.6804221751060116
User 136957 does not improve AUC. Reverting changes.
Training on augumented user 21629 47/50 current_auc = 0.6818928244782573
User 21629 AUC after training: 0.6817265319697348
User 21629 does not improve AUC. Reverting changes.
Training on augumented user 28755 48/50 current_auc = 0.6818928244782573
User 28755 AUC after training: 0.6817966866217676
User 28755 does not improve AUC. Reverting changes.
Training on augumented user 34990 49/50 current_auc = 0.6818928244782573
User 34990 AUC after training: 0.6814043402344724
User 34990 does not improve AUC. Reverting changes.
[2024-12-02 19:13:25.061295] start test user 31338 166/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:25.661712] start test user 31338 166/568 recall augumented users by random, augumented_users = [21374, 89775, 136539, 90836, 12920, 61437, 27006, 66561, 95175, 5521, 51757, 75486, 5216, 85504, 78691, 41640, 103857, 113446, 44463, 35761, 80572, 54048, 132276, 79516, 64637, 60897, 73297, 21564, 17524, 120475, 82613, 68497, 96813, 56855, 48592, 117677, 137671, 62295, 38595, 53366, 108876, 123737, 3300, 87717, 25039, 137063, 37427, 69835, 110866, 114780]
[2024-12-02 19:13:25.676601] user = 31338 Cloud 166/568
[2024-12-02 19:13:25.691557] user = 31338 Local 166/568
[2024-12-02 19:13:25.718001] user = 31338 Local+ 166/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:28.715599] user = 31338 MPDA- 166/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6900780379041248
Training on augumented user 21374 0/50 current_auc = 0.6900780379041248
User 21374 AUC after training: 0.6904496469713861
User 21374 improves AUC. Keeping the model.
Training on augumented user 89775 1/50 current_auc = 0.6904496469713861
User 89775 AUC after training: 0.6889632107023411
User 89775 does not improve AUC. Reverting changes.
Training on augumented user 136539 2/50 current_auc = 0.6904496469713861
User 136539 AUC after training: 0.6915644741731698
User 136539 improves AUC. Keeping the model.
Training on augumented user 90836 3/50 current_auc = 0.6915644741731698
User 90836 AUC after training: 0.6930509104422148
User 90836 improves AUC. Keeping the model.
Training on augumented user 12920 4/50 current_auc = 0.6930509104422148
User 12920 AUC after training: 0.6923076923076923
User 12920 does not improve AUC. Reverting changes.
Training on augumented user 61437 5/50 current_auc = 0.6930509104422148
User 61437 AUC after training: 0.694908955778521
User 61437 improves AUC. Keeping the model.
Training on augumented user 27006 6/50 current_auc = 0.694908955778521
User 27006 AUC after training: 0.6952805648457822
User 27006 improves AUC. Keeping the model.
Training on augumented user 66561 7/50 current_auc = 0.6952805648457822
User 66561 AUC after training: 0.6960237829803047
User 66561 improves AUC. Keeping the model.
Training on augumented user 95175 8/50 current_auc = 0.6960237829803047
User 95175 AUC after training: 0.6945373467112597
User 95175 does not improve AUC. Reverting changes.
Training on augumented user 5521 9/50 current_auc = 0.6960237829803047
User 5521 AUC after training: 0.6960237829803048
User 5521 improves AUC. Keeping the model.
Training on augumented user 51757 10/50 current_auc = 0.6960237829803048
User 51757 AUC after training: 0.6945373467112598
User 51757 does not improve AUC. Reverting changes.
Training on augumented user 75486 11/50 current_auc = 0.6960237829803048
User 75486 AUC after training: 0.696395392047566
User 75486 improves AUC. Keeping the model.
Training on augumented user 5216 12/50 current_auc = 0.696395392047566
User 5216 AUC after training: 0.6967670011148271
User 5216 improves AUC. Keeping the model.
Training on augumented user 85504 13/50 current_auc = 0.6967670011148271
User 85504 AUC after training: 0.6967670011148271
User 85504 does not improve AUC. Reverting changes.
Training on augumented user 78691 14/50 current_auc = 0.6967670011148271
User 78691 AUC after training: 0.6967670011148271
User 78691 does not improve AUC. Reverting changes.
Training on augumented user 41640 15/50 current_auc = 0.6967670011148271
User 41640 AUC after training: 0.696395392047566
User 41640 does not improve AUC. Reverting changes.
Training on augumented user 103857 16/50 current_auc = 0.6967670011148271
User 103857 AUC after training: 0.6971386101820884
User 103857 improves AUC. Keeping the model.
Training on augumented user 113446 17/50 current_auc = 0.6971386101820884
User 113446 AUC after training: 0.6971386101820884
User 113446 does not improve AUC. Reverting changes.
Training on augumented user 44463 18/50 current_auc = 0.6971386101820884
User 44463 AUC after training: 0.6975102192493497
User 44463 improves AUC. Keeping the model.
Training on augumented user 35761 19/50 current_auc = 0.6975102192493497
User 35761 AUC after training: 0.6986250464511333
User 35761 improves AUC. Keeping the model.
Training on augumented user 80572 20/50 current_auc = 0.6986250464511333
User 80572 AUC after training: 0.6978818283166109
User 80572 does not improve AUC. Reverting changes.
Training on augumented user 54048 21/50 current_auc = 0.6986250464511333
User 54048 AUC after training: 0.6986250464511334
User 54048 improves AUC. Keeping the model.
Training on augumented user 132276 22/50 current_auc = 0.6986250464511334
User 132276 AUC after training: 0.6993682645856558
User 132276 improves AUC. Keeping the model.
Training on augumented user 79516 23/50 current_auc = 0.6993682645856558
User 79516 AUC after training: 0.6978818283166109
User 79516 does not improve AUC. Reverting changes.
Training on augumented user 64637 24/50 current_auc = 0.6993682645856558
User 64637 AUC after training: 0.6982534373838721
User 64637 does not improve AUC. Reverting changes.
Training on augumented user 60897 25/50 current_auc = 0.6993682645856558
User 60897 AUC after training: 0.6986250464511334
User 60897 does not improve AUC. Reverting changes.
Training on augumented user 73297 26/50 current_auc = 0.6993682645856558
User 73297 AUC after training: 0.6982534373838721
User 73297 does not improve AUC. Reverting changes.
Training on augumented user 21564 27/50 current_auc = 0.6993682645856558
User 21564 AUC after training: 0.7008547008547009
User 21564 improves AUC. Keeping the model.
Training on augumented user 17524 28/50 current_auc = 0.7008547008547009
User 17524 AUC after training: 0.7012263099219621
User 17524 improves AUC. Keeping the model.
Training on augumented user 120475 29/50 current_auc = 0.7012263099219621
User 120475 AUC after training: 0.7015979189892232
User 120475 improves AUC. Keeping the model.
Training on augumented user 82613 30/50 current_auc = 0.7015979189892232
User 82613 AUC after training: 0.7012263099219621
User 82613 does not improve AUC. Reverting changes.
Training on augumented user 68497 31/50 current_auc = 0.7015979189892232
User 68497 AUC after training: 0.7008547008547009
User 68497 does not improve AUC. Reverting changes.
Training on augumented user 96813 32/50 current_auc = 0.7015979189892232
User 96813 AUC after training: 0.7008547008547008
User 96813 does not improve AUC. Reverting changes.
Training on augumented user 56855 33/50 current_auc = 0.7015979189892232
User 56855 AUC after training: 0.7004830917874395
User 56855 does not improve AUC. Reverting changes.
Training on augumented user 48592 34/50 current_auc = 0.7015979189892232
User 48592 AUC after training: 0.6993682645856558
User 48592 does not improve AUC. Reverting changes.
Training on augumented user 117677 35/50 current_auc = 0.7015979189892232
User 117677 AUC after training: 0.7004830917874395
User 117677 does not improve AUC. Reverting changes.
Training on augumented user 137671 36/50 current_auc = 0.7015979189892232
User 137671 AUC after training: 0.7004830917874395
User 137671 does not improve AUC. Reverting changes.
Training on augumented user 62295 37/50 current_auc = 0.7015979189892232
User 62295 AUC after training: 0.7004830917874397
User 62295 does not improve AUC. Reverting changes.
Training on augumented user 38595 38/50 current_auc = 0.7015979189892232
User 38595 AUC after training: 0.7015979189892233
User 38595 improves AUC. Keeping the model.
Training on augumented user 53366 39/50 current_auc = 0.7015979189892233
User 53366 AUC after training: 0.7015979189892233
User 53366 does not improve AUC. Reverting changes.
Training on augumented user 108876 40/50 current_auc = 0.7015979189892233
User 108876 AUC after training: 0.7023411371237458
User 108876 improves AUC. Keeping the model.
Training on augumented user 123737 41/50 current_auc = 0.7023411371237458
User 123737 AUC after training: 0.7019695280564845
User 123737 does not improve AUC. Reverting changes.
Training on augumented user 3300 42/50 current_auc = 0.7023411371237458
User 3300 AUC after training: 0.7023411371237458
User 3300 does not improve AUC. Reverting changes.
Training on augumented user 87717 43/50 current_auc = 0.7023411371237458
User 87717 AUC after training: 0.7041991824600519
User 87717 improves AUC. Keeping the model.
Training on augumented user 25039 44/50 current_auc = 0.7041991824600519
User 25039 AUC after training: 0.7038275733927907
User 25039 does not improve AUC. Reverting changes.
Training on augumented user 137063 45/50 current_auc = 0.7041991824600519
User 137063 AUC after training: 0.7045707915273132
User 137063 improves AUC. Keeping the model.
Training on augumented user 37427 46/50 current_auc = 0.7045707915273132
User 37427 AUC after training: 0.7045707915273132
User 37427 does not improve AUC. Reverting changes.
Training on augumented user 69835 47/50 current_auc = 0.7045707915273132
User 69835 AUC after training: 0.705685618729097
User 69835 improves AUC. Keeping the model.
Training on augumented user 110866 48/50 current_auc = 0.705685618729097
User 110866 AUC after training: 0.7064288368636193
User 110866 improves AUC. Keeping the model.
Training on augumented user 114780 49/50 current_auc = 0.7064288368636193
User 114780 AUC after training: 0.7082868821999256
User 114780 improves AUC. Keeping the model.
[2024-12-02 19:13:55.897201] start test user 31405 167/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:56.298582] start test user 31405 167/568 recall augumented users by random, augumented_users = [71138, 46056, 23709, 99809, 90400, 108578, 130048, 85652, 2273, 61402, 88911, 103516, 113377, 137254, 36885, 14759, 51814, 132516, 2507, 5573, 123257, 137579, 73537, 95227, 109978, 7326, 115860, 20068, 76067, 50689, 84591, 13790, 82686, 82494, 104083, 10340, 114701, 133795, 35507, 105628, 62662, 42181, 63572, 93738, 75890, 3136, 70569, 123246, 55744, 5802]
[2024-12-02 19:13:56.314453] user = 31405 Cloud 167/568
[2024-12-02 19:13:56.329217] user = 31405 Local 167/568
[2024-12-02 19:13:56.397223] user = 31405 Local+ 167/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:57.984162] user = 31405 MPDA- 167/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5983050847457627
Training on augumented user 71138 0/50 current_auc = 0.5983050847457627
User 71138 AUC after training: 0.5995762711864407
User 71138 improves AUC. Keeping the model.
Training on augumented user 46056 1/50 current_auc = 0.5995762711864407
User 46056 AUC after training: 0.5995762711864407
User 46056 does not improve AUC. Reverting changes.
Training on augumented user 23709 2/50 current_auc = 0.5995762711864407
User 23709 AUC after training: 0.5991525423728814
User 23709 does not improve AUC. Reverting changes.
Training on augumented user 99809 3/50 current_auc = 0.5995762711864407
User 99809 AUC after training: 0.5991525423728814
User 99809 does not improve AUC. Reverting changes.
Training on augumented user 90400 4/50 current_auc = 0.5995762711864407
User 90400 AUC after training: 0.5995762711864407
User 90400 does not improve AUC. Reverting changes.
Training on augumented user 108578 5/50 current_auc = 0.5995762711864407
User 108578 AUC after training: 0.5995762711864407
User 108578 does not improve AUC. Reverting changes.
Training on augumented user 130048 6/50 current_auc = 0.5995762711864407
User 130048 AUC after training: 0.6
User 130048 improves AUC. Keeping the model.
Training on augumented user 85652 7/50 current_auc = 0.6
User 85652 AUC after training: 0.6000000000000001
User 85652 improves AUC. Keeping the model.
Training on augumented user 2273 8/50 current_auc = 0.6000000000000001
User 2273 AUC after training: 0.6
User 2273 does not improve AUC. Reverting changes.
Training on augumented user 61402 9/50 current_auc = 0.6000000000000001
User 61402 AUC after training: 0.6
User 61402 does not improve AUC. Reverting changes.
Training on augumented user 88911 10/50 current_auc = 0.6000000000000001
User 88911 AUC after training: 0.6000000000000001
User 88911 does not improve AUC. Reverting changes.
Training on augumented user 103516 11/50 current_auc = 0.6000000000000001
User 103516 AUC after training: 0.6000000000000001
User 103516 does not improve AUC. Reverting changes.
Training on augumented user 113377 12/50 current_auc = 0.6000000000000001
User 113377 AUC after training: 0.5991525423728814
User 113377 does not improve AUC. Reverting changes.
Training on augumented user 137254 13/50 current_auc = 0.6000000000000001
User 137254 AUC after training: 0.6000000000000001
User 137254 does not improve AUC. Reverting changes.
Training on augumented user 36885 14/50 current_auc = 0.6000000000000001
User 36885 AUC after training: 0.6004237288135594
User 36885 improves AUC. Keeping the model.
Training on augumented user 14759 15/50 current_auc = 0.6004237288135594
User 14759 AUC after training: 0.5991525423728814
User 14759 does not improve AUC. Reverting changes.
Training on augumented user 51814 16/50 current_auc = 0.6004237288135594
User 51814 AUC after training: 0.6
User 51814 does not improve AUC. Reverting changes.
Training on augumented user 132516 17/50 current_auc = 0.6004237288135594
User 132516 AUC after training: 0.5991525423728814
User 132516 does not improve AUC. Reverting changes.
Training on augumented user 2507 18/50 current_auc = 0.6004237288135594
User 2507 AUC after training: 0.5995762711864407
User 2507 does not improve AUC. Reverting changes.
Training on augumented user 5573 19/50 current_auc = 0.6004237288135594
User 5573 AUC after training: 0.5991525423728814
User 5573 does not improve AUC. Reverting changes.
Training on augumented user 123257 20/50 current_auc = 0.6004237288135594
User 123257 AUC after training: 0.5991525423728814
User 123257 does not improve AUC. Reverting changes.
Training on augumented user 137579 21/50 current_auc = 0.6004237288135594
User 137579 AUC after training: 0.6
User 137579 does not improve AUC. Reverting changes.
Training on augumented user 73537 22/50 current_auc = 0.6004237288135594
User 73537 AUC after training: 0.6004237288135594
User 73537 does not improve AUC. Reverting changes.
Training on augumented user 95227 23/50 current_auc = 0.6004237288135594
User 95227 AUC after training: 0.6
User 95227 does not improve AUC. Reverting changes.
Training on augumented user 109978 24/50 current_auc = 0.6004237288135594
User 109978 AUC after training: 0.6004237288135594
User 109978 does not improve AUC. Reverting changes.
Training on augumented user 7326 25/50 current_auc = 0.6004237288135594
User 7326 AUC after training: 0.6004237288135594
User 7326 does not improve AUC. Reverting changes.
Training on augumented user 115860 26/50 current_auc = 0.6004237288135594
User 115860 AUC after training: 0.5991525423728814
User 115860 does not improve AUC. Reverting changes.
Training on augumented user 20068 27/50 current_auc = 0.6004237288135594
User 20068 AUC after training: 0.5983050847457627
User 20068 does not improve AUC. Reverting changes.
Training on augumented user 76067 28/50 current_auc = 0.6004237288135594
User 76067 AUC after training: 0.6004237288135594
User 76067 does not improve AUC. Reverting changes.
Training on augumented user 50689 29/50 current_auc = 0.6004237288135594
User 50689 AUC after training: 0.6004237288135594
User 50689 does not improve AUC. Reverting changes.
Training on augumented user 84591 30/50 current_auc = 0.6004237288135594
User 84591 AUC after training: 0.6004237288135594
User 84591 does not improve AUC. Reverting changes.
Training on augumented user 13790 31/50 current_auc = 0.6004237288135594
User 13790 AUC after training: 0.6
User 13790 does not improve AUC. Reverting changes.
Training on augumented user 82686 32/50 current_auc = 0.6004237288135594
User 82686 AUC after training: 0.6
User 82686 does not improve AUC. Reverting changes.
Training on augumented user 82494 33/50 current_auc = 0.6004237288135594
User 82494 AUC after training: 0.5995762711864407
User 82494 does not improve AUC. Reverting changes.
Training on augumented user 104083 34/50 current_auc = 0.6004237288135594
User 104083 AUC after training: 0.6004237288135594
User 104083 does not improve AUC. Reverting changes.
Training on augumented user 10340 35/50 current_auc = 0.6004237288135594
User 10340 AUC after training: 0.6004237288135594
User 10340 does not improve AUC. Reverting changes.
Training on augumented user 114701 36/50 current_auc = 0.6004237288135594
User 114701 AUC after training: 0.5995762711864407
User 114701 does not improve AUC. Reverting changes.
Training on augumented user 133795 37/50 current_auc = 0.6004237288135594
User 133795 AUC after training: 0.6
User 133795 does not improve AUC. Reverting changes.
Training on augumented user 35507 38/50 current_auc = 0.6004237288135594
User 35507 AUC after training: 0.6
User 35507 does not improve AUC. Reverting changes.
Training on augumented user 105628 39/50 current_auc = 0.6004237288135594
User 105628 AUC after training: 0.6004237288135594
User 105628 does not improve AUC. Reverting changes.
Training on augumented user 62662 40/50 current_auc = 0.6004237288135594
User 62662 AUC after training: 0.6004237288135593
User 62662 does not improve AUC. Reverting changes.
Training on augumented user 42181 41/50 current_auc = 0.6004237288135594
User 42181 AUC after training: 0.6
User 42181 does not improve AUC. Reverting changes.
Training on augumented user 63572 42/50 current_auc = 0.6004237288135594
User 63572 AUC after training: 0.6004237288135593
User 63572 does not improve AUC. Reverting changes.
Training on augumented user 93738 43/50 current_auc = 0.6004237288135594
User 93738 AUC after training: 0.5983050847457627
User 93738 does not improve AUC. Reverting changes.
Training on augumented user 75890 44/50 current_auc = 0.6004237288135594
User 75890 AUC after training: 0.6008474576271188
User 75890 improves AUC. Keeping the model.
Training on augumented user 3136 45/50 current_auc = 0.6008474576271188
User 3136 AUC after training: 0.6004237288135593
User 3136 does not improve AUC. Reverting changes.
Training on augumented user 70569 46/50 current_auc = 0.6008474576271188
User 70569 AUC after training: 0.6004237288135593
User 70569 does not improve AUC. Reverting changes.
Training on augumented user 123246 47/50 current_auc = 0.6008474576271188
User 123246 AUC after training: 0.6004237288135593
User 123246 does not improve AUC. Reverting changes.
Training on augumented user 55744 48/50 current_auc = 0.6008474576271188
User 55744 AUC after training: 0.6004237288135593
User 55744 does not improve AUC. Reverting changes.
Training on augumented user 5802 49/50 current_auc = 0.6008474576271188
User 5802 AUC after training: 0.6004237288135593
User 5802 does not improve AUC. Reverting changes.
[2024-12-02 19:14:25.723844] start test user 31406 168/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:26.132808] start test user 31406 168/568 recall augumented users by random, augumented_users = [52789, 43121, 87943, 1915, 91198, 130201, 38076, 22759, 19288, 105656, 127882, 57383, 94897, 95542, 8493, 56963, 129348, 49800, 50795, 58219, 134589, 30969, 67943, 65277, 37437, 40948, 51532, 82101, 34351, 120797, 84630, 89635, 113466, 111152, 3396, 43022, 77978, 103203, 57319, 137329, 61235, 28569, 102512, 124140, 50085, 92323, 71138, 135756, 131106, 77831]
[2024-12-02 19:14:26.146505] user = 31406 Cloud 168/568
[2024-12-02 19:14:26.154535] user = 31406 Local 168/568
[2024-12-02 19:14:26.247453] user = 31406 Local+ 168/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:28.662027] user = 31406 MPDA- 168/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.46923076923076923
Training on augumented user 52789 0/50 current_auc = 0.46923076923076923
User 52789 AUC after training: 0.46923076923076923
User 52789 does not improve AUC. Reverting changes.
Training on augumented user 43121 1/50 current_auc = 0.46923076923076923
User 43121 AUC after training: 0.46153846153846156
User 43121 does not improve AUC. Reverting changes.
Training on augumented user 87943 2/50 current_auc = 0.46923076923076923
User 87943 AUC after training: 0.46923076923076923
User 87943 does not improve AUC. Reverting changes.
Training on augumented user 1915 3/50 current_auc = 0.46923076923076923
User 1915 AUC after training: 0.46923076923076923
User 1915 does not improve AUC. Reverting changes.
Training on augumented user 91198 4/50 current_auc = 0.46923076923076923
User 91198 AUC after training: 0.46153846153846156
User 91198 does not improve AUC. Reverting changes.
Training on augumented user 130201 5/50 current_auc = 0.46923076923076923
User 130201 AUC after training: 0.46923076923076923
User 130201 does not improve AUC. Reverting changes.
Training on augumented user 38076 6/50 current_auc = 0.46923076923076923
User 38076 AUC after training: 0.46153846153846156
User 38076 does not improve AUC. Reverting changes.
Training on augumented user 22759 7/50 current_auc = 0.46923076923076923
User 22759 AUC after training: 0.46923076923076923
User 22759 does not improve AUC. Reverting changes.
Training on augumented user 19288 8/50 current_auc = 0.46923076923076923
User 19288 AUC after training: 0.46923076923076923
User 19288 does not improve AUC. Reverting changes.
Training on augumented user 105656 9/50 current_auc = 0.46923076923076923
User 105656 AUC after training: 0.46923076923076923
User 105656 does not improve AUC. Reverting changes.
Training on augumented user 127882 10/50 current_auc = 0.46923076923076923
User 127882 AUC after training: 0.46923076923076923
User 127882 does not improve AUC. Reverting changes.
Training on augumented user 57383 11/50 current_auc = 0.46923076923076923
User 57383 AUC after training: 0.46923076923076923
User 57383 does not improve AUC. Reverting changes.
Training on augumented user 94897 12/50 current_auc = 0.46923076923076923
User 94897 AUC after training: 0.46923076923076923
User 94897 does not improve AUC. Reverting changes.
Training on augumented user 95542 13/50 current_auc = 0.46923076923076923
User 95542 AUC after training: 0.46153846153846156
User 95542 does not improve AUC. Reverting changes.
Training on augumented user 8493 14/50 current_auc = 0.46923076923076923
User 8493 AUC after training: 0.46923076923076923
User 8493 does not improve AUC. Reverting changes.
Training on augumented user 56963 15/50 current_auc = 0.46923076923076923
User 56963 AUC after training: 0.46923076923076923
User 56963 does not improve AUC. Reverting changes.
Training on augumented user 129348 16/50 current_auc = 0.46923076923076923
User 129348 AUC after training: 0.46923076923076923
User 129348 does not improve AUC. Reverting changes.
Training on augumented user 49800 17/50 current_auc = 0.46923076923076923
User 49800 AUC after training: 0.46923076923076923
User 49800 does not improve AUC. Reverting changes.
Training on augumented user 50795 18/50 current_auc = 0.46923076923076923
User 50795 AUC after training: 0.46923076923076923
User 50795 does not improve AUC. Reverting changes.
Training on augumented user 58219 19/50 current_auc = 0.46923076923076923
User 58219 AUC after training: 0.46153846153846156
User 58219 does not improve AUC. Reverting changes.
Training on augumented user 134589 20/50 current_auc = 0.46923076923076923
User 134589 AUC after training: 0.46923076923076923
User 134589 does not improve AUC. Reverting changes.
Training on augumented user 30969 21/50 current_auc = 0.46923076923076923
User 30969 AUC after training: 0.46923076923076923
User 30969 does not improve AUC. Reverting changes.
Training on augumented user 67943 22/50 current_auc = 0.46923076923076923
User 67943 AUC after training: 0.46923076923076923
User 67943 does not improve AUC. Reverting changes.
Training on augumented user 65277 23/50 current_auc = 0.46923076923076923
User 65277 AUC after training: 0.46923076923076923
User 65277 does not improve AUC. Reverting changes.
Training on augumented user 37437 24/50 current_auc = 0.46923076923076923
User 37437 AUC after training: 0.46153846153846156
User 37437 does not improve AUC. Reverting changes.
Training on augumented user 40948 25/50 current_auc = 0.46923076923076923
User 40948 AUC after training: 0.46923076923076923
User 40948 does not improve AUC. Reverting changes.
Training on augumented user 51532 26/50 current_auc = 0.46923076923076923
User 51532 AUC after training: 0.46923076923076923
User 51532 does not improve AUC. Reverting changes.
Training on augumented user 82101 27/50 current_auc = 0.46923076923076923
User 82101 AUC after training: 0.46923076923076923
User 82101 does not improve AUC. Reverting changes.
Training on augumented user 34351 28/50 current_auc = 0.46923076923076923
User 34351 AUC after training: 0.46923076923076923
User 34351 does not improve AUC. Reverting changes.
Training on augumented user 120797 29/50 current_auc = 0.46923076923076923
User 120797 AUC after training: 0.46153846153846156
User 120797 does not improve AUC. Reverting changes.
Training on augumented user 84630 30/50 current_auc = 0.46923076923076923
User 84630 AUC after training: 0.46923076923076923
User 84630 does not improve AUC. Reverting changes.
Training on augumented user 89635 31/50 current_auc = 0.46923076923076923
User 89635 AUC after training: 0.46923076923076923
User 89635 does not improve AUC. Reverting changes.
Training on augumented user 113466 32/50 current_auc = 0.46923076923076923
User 113466 AUC after training: 0.46923076923076923
User 113466 does not improve AUC. Reverting changes.
Training on augumented user 111152 33/50 current_auc = 0.46923076923076923
User 111152 AUC after training: 0.46923076923076923
User 111152 does not improve AUC. Reverting changes.
Training on augumented user 3396 34/50 current_auc = 0.46923076923076923
User 3396 AUC after training: 0.46923076923076923
User 3396 does not improve AUC. Reverting changes.
Training on augumented user 43022 35/50 current_auc = 0.46923076923076923
User 43022 AUC after training: 0.46153846153846156
User 43022 does not improve AUC. Reverting changes.
Training on augumented user 77978 36/50 current_auc = 0.46923076923076923
User 77978 AUC after training: 0.46923076923076923
User 77978 does not improve AUC. Reverting changes.
Training on augumented user 103203 37/50 current_auc = 0.46923076923076923
User 103203 AUC after training: 0.46153846153846156
User 103203 does not improve AUC. Reverting changes.
Training on augumented user 57319 38/50 current_auc = 0.46923076923076923
User 57319 AUC after training: 0.46923076923076923
User 57319 does not improve AUC. Reverting changes.
Training on augumented user 137329 39/50 current_auc = 0.46923076923076923
User 137329 AUC after training: 0.46153846153846156
User 137329 does not improve AUC. Reverting changes.
Training on augumented user 61235 40/50 current_auc = 0.46923076923076923
User 61235 AUC after training: 0.46923076923076923
User 61235 does not improve AUC. Reverting changes.
Training on augumented user 28569 41/50 current_auc = 0.46923076923076923
User 28569 AUC after training: 0.46153846153846156
User 28569 does not improve AUC. Reverting changes.
Training on augumented user 102512 42/50 current_auc = 0.46923076923076923
User 102512 AUC after training: 0.46923076923076923
User 102512 does not improve AUC. Reverting changes.
Training on augumented user 124140 43/50 current_auc = 0.46923076923076923
User 124140 AUC after training: 0.46923076923076923
User 124140 does not improve AUC. Reverting changes.
Training on augumented user 50085 44/50 current_auc = 0.46923076923076923
User 50085 AUC after training: 0.46153846153846156
User 50085 does not improve AUC. Reverting changes.
Training on augumented user 92323 45/50 current_auc = 0.46923076923076923
User 92323 AUC after training: 0.46153846153846156
User 92323 does not improve AUC. Reverting changes.
Training on augumented user 71138 46/50 current_auc = 0.46923076923076923
User 71138 AUC after training: 0.46153846153846156
User 71138 does not improve AUC. Reverting changes.
Training on augumented user 135756 47/50 current_auc = 0.46923076923076923
User 135756 AUC after training: 0.46923076923076923
User 135756 does not improve AUC. Reverting changes.
Training on augumented user 131106 48/50 current_auc = 0.46923076923076923
User 131106 AUC after training: 0.46923076923076923
User 131106 does not improve AUC. Reverting changes.
Training on augumented user 77831 49/50 current_auc = 0.46923076923076923
User 77831 AUC after training: 0.46923076923076923
User 77831 does not improve AUC. Reverting changes.
[2024-12-02 19:15:00.856707] start test user 31408 169/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:01.399446] start test user 31408 169/568 recall augumented users by random, augumented_users = [8502, 57059, 83016, 37715, 8074, 51786, 66581, 81994, 20902, 13643, 3618, 122588, 26515, 116978, 108000, 38768, 114695, 128509, 63051, 21693, 82961, 79394, 71057, 51624, 132370, 32752, 37495, 101358, 40627, 93684, 137978, 18572, 34350, 93089, 62407, 117281, 120122, 29211, 57618, 130515, 125515, 106231, 28102, 20089, 26155, 114397, 36796, 46564, 134733, 31424]
[2024-12-02 19:15:01.435161] user = 31408 Cloud 169/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:15:01.447659] user = 31408 Local 169/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:15:01.511364] user = 31408 Local+ 169/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:15:04.658082] user = 31408 MPDA- 169/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 8502 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8502 AUC after training: 0.5
User 8502 does not improve AUC. Reverting changes.
Training on augumented user 57059 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57059 AUC after training: 0.5
User 57059 does not improve AUC. Reverting changes.
Training on augumented user 83016 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83016 AUC after training: 0.5
User 83016 does not improve AUC. Reverting changes.
Training on augumented user 37715 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37715 AUC after training: 0.5
User 37715 does not improve AUC. Reverting changes.
Training on augumented user 8074 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8074 AUC after training: 0.5
User 8074 does not improve AUC. Reverting changes.
Training on augumented user 51786 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51786 AUC after training: 0.5
User 51786 does not improve AUC. Reverting changes.
Training on augumented user 66581 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66581 AUC after training: 0.5
User 66581 does not improve AUC. Reverting changes.
Training on augumented user 81994 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81994 AUC after training: 0.5
User 81994 does not improve AUC. Reverting changes.
Training on augumented user 20902 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20902 AUC after training: 0.5
User 20902 does not improve AUC. Reverting changes.
Training on augumented user 13643 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13643 AUC after training: 0.5
User 13643 does not improve AUC. Reverting changes.
Training on augumented user 3618 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3618 AUC after training: 0.5
User 3618 does not improve AUC. Reverting changes.
Training on augumented user 122588 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122588 AUC after training: 0.5
User 122588 does not improve AUC. Reverting changes.
Training on augumented user 26515 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26515 AUC after training: 0.5
User 26515 does not improve AUC. Reverting changes.
Training on augumented user 116978 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116978 AUC after training: 0.5
User 116978 does not improve AUC. Reverting changes.
Training on augumented user 108000 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108000 AUC after training: 0.5
User 108000 does not improve AUC. Reverting changes.
Training on augumented user 38768 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38768 AUC after training: 0.5
User 38768 does not improve AUC. Reverting changes.
Training on augumented user 114695 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114695 AUC after training: 0.5
User 114695 does not improve AUC. Reverting changes.
Training on augumented user 128509 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128509 AUC after training: 0.5
User 128509 does not improve AUC. Reverting changes.
Training on augumented user 63051 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63051 AUC after training: 0.5
User 63051 does not improve AUC. Reverting changes.
Training on augumented user 21693 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21693 AUC after training: 0.5
User 21693 does not improve AUC. Reverting changes.
Training on augumented user 82961 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82961 AUC after training: 0.5
User 82961 does not improve AUC. Reverting changes.
Training on augumented user 79394 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79394 AUC after training: 0.5
User 79394 does not improve AUC. Reverting changes.
Training on augumented user 71057 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71057 AUC after training: 0.5
User 71057 does not improve AUC. Reverting changes.
Training on augumented user 51624 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51624 AUC after training: 0.5
User 51624 does not improve AUC. Reverting changes.
Training on augumented user 132370 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132370 AUC after training: 0.5
User 132370 does not improve AUC. Reverting changes.
Training on augumented user 32752 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32752 AUC after training: 0.5
User 32752 does not improve AUC. Reverting changes.
Training on augumented user 37495 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37495 AUC after training: 0.5
User 37495 does not improve AUC. Reverting changes.
Training on augumented user 101358 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101358 AUC after training: 0.5
User 101358 does not improve AUC. Reverting changes.
Training on augumented user 40627 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40627 AUC after training: 0.5
User 40627 does not improve AUC. Reverting changes.
Training on augumented user 93684 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93684 AUC after training: 0.5
User 93684 does not improve AUC. Reverting changes.
Training on augumented user 137978 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137978 AUC after training: 0.5
User 137978 does not improve AUC. Reverting changes.
Training on augumented user 18572 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18572 AUC after training: 0.5
User 18572 does not improve AUC. Reverting changes.
Training on augumented user 34350 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34350 AUC after training: 0.5
User 34350 does not improve AUC. Reverting changes.
Training on augumented user 93089 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93089 AUC after training: 0.5
User 93089 does not improve AUC. Reverting changes.
Training on augumented user 62407 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62407 AUC after training: 0.5
User 62407 does not improve AUC. Reverting changes.
Training on augumented user 117281 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117281 AUC after training: 0.5
User 117281 does not improve AUC. Reverting changes.
Training on augumented user 120122 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120122 AUC after training: 0.5
User 120122 does not improve AUC. Reverting changes.
Training on augumented user 29211 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29211 AUC after training: 0.5
User 29211 does not improve AUC. Reverting changes.
Training on augumented user 57618 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57618 AUC after training: 0.5
User 57618 does not improve AUC. Reverting changes.
Training on augumented user 130515 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130515 AUC after training: 0.5
User 130515 does not improve AUC. Reverting changes.
Training on augumented user 125515 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125515 AUC after training: 0.5
User 125515 does not improve AUC. Reverting changes.
Training on augumented user 106231 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106231 AUC after training: 0.5
User 106231 does not improve AUC. Reverting changes.
Training on augumented user 28102 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28102 AUC after training: 0.5
User 28102 does not improve AUC. Reverting changes.
Training on augumented user 20089 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20089 AUC after training: 0.5
User 20089 does not improve AUC. Reverting changes.
Training on augumented user 26155 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26155 AUC after training: 0.5
User 26155 does not improve AUC. Reverting changes.
Training on augumented user 114397 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114397 AUC after training: 0.5
User 114397 does not improve AUC. Reverting changes.
Training on augumented user 36796 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36796 AUC after training: 0.5
User 36796 does not improve AUC. Reverting changes.
Training on augumented user 46564 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46564 AUC after training: 0.5
User 46564 does not improve AUC. Reverting changes.
Training on augumented user 134733 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134733 AUC after training: 0.5
User 134733 does not improve AUC. Reverting changes.
Training on augumented user 31424 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31424 AUC after training: 0.5
User 31424 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:15:34.284190] start test user 31434 170/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:34.727506] start test user 31434 170/568 recall augumented users by random, augumented_users = [95654, 12295, 125125, 130103, 6607, 116274, 1142, 91885, 107082, 4379, 14725, 91230, 43163, 62696, 74210, 138237, 76502, 8442, 35290, 128145, 25213, 29046, 78568, 76287, 23968, 112972, 136893, 47901, 135022, 66300, 130597, 28199, 56573, 127513, 102484, 46345, 20871, 106325, 108798, 1790, 21686, 133596, 65439, 136129, 67180, 87996, 133839, 35057, 26221, 134497]
[2024-12-02 19:15:34.743267] user = 31434 Cloud 170/568
[2024-12-02 19:15:34.785728] user = 31434 Local 170/568
[2024-12-02 19:15:34.855011] user = 31434 Local+ 170/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:37.293920] user = 31434 MPDA- 170/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7718101733447003
Training on augumented user 95654 0/50 current_auc = 0.7718101733447003
User 95654 AUC after training: 0.7716396703608981
User 95654 does not improve AUC. Reverting changes.
Training on augumented user 12295 1/50 current_auc = 0.7718101733447003
User 12295 AUC after training: 0.771753339016766
User 12295 does not improve AUC. Reverting changes.
Training on augumented user 125125 2/50 current_auc = 0.7718101733447003
User 125125 AUC after training: 0.7721890688642606
User 125125 improves AUC. Keeping the model.
Training on augumented user 130103 3/50 current_auc = 0.7721890688642606
User 130103 AUC after training: 0.7719806763285025
User 130103 does not improve AUC. Reverting changes.
Training on augumented user 6607 4/50 current_auc = 0.7721890688642606
User 6607 AUC after training: 0.772435350951975
User 6607 improves AUC. Keeping the model.
Training on augumented user 116274 5/50 current_auc = 0.772435350951975
User 116274 AUC after training: 0.7725300748318651
User 116274 improves AUC. Keeping the model.
Training on augumented user 1142 6/50 current_auc = 0.7725300748318651
User 1142 AUC after training: 0.7725490196078432
User 1142 improves AUC. Keeping the model.
Training on augumented user 91885 7/50 current_auc = 0.7725490196078432
User 91885 AUC after training: 0.7725490196078431
User 91885 does not improve AUC. Reverting changes.
Training on augumented user 107082 8/50 current_auc = 0.7725490196078432
User 107082 AUC after training: 0.7724732405039312
User 107082 does not improve AUC. Reverting changes.
Training on augumented user 4379 9/50 current_auc = 0.7725490196078432
User 4379 AUC after training: 0.7724164061759969
User 4379 does not improve AUC. Reverting changes.
Training on augumented user 14725 10/50 current_auc = 0.7725490196078432
User 14725 AUC after training: 0.7725300748318651
User 14725 does not improve AUC. Reverting changes.
Training on augumented user 91230 11/50 current_auc = 0.7725490196078432
User 91230 AUC after training: 0.7725869091597991
User 91230 improves AUC. Keeping the model.
Training on augumented user 43163 12/50 current_auc = 0.7725869091597991
User 43163 AUC after training: 0.7723406270720848
User 43163 does not improve AUC. Reverting changes.
Training on augumented user 62696 13/50 current_auc = 0.7725869091597991
User 62696 AUC after training: 0.7726058539357773
User 62696 improves AUC. Keeping the model.
Training on augumented user 74210 14/50 current_auc = 0.7726058539357773
User 74210 AUC after training: 0.7729089703514256
User 74210 improves AUC. Keeping the model.
Training on augumented user 138237 15/50 current_auc = 0.7729089703514256
User 138237 AUC after training: 0.7727574121436014
User 138237 does not improve AUC. Reverting changes.
Training on augumented user 76502 16/50 current_auc = 0.7729089703514256
User 76502 AUC after training: 0.7727384673676234
User 76502 does not improve AUC. Reverting changes.
Training on augumented user 8442 17/50 current_auc = 0.7729089703514256
User 8442 AUC after training: 0.7726816330396893
User 8442 does not improve AUC. Reverting changes.
Training on augumented user 35290 18/50 current_auc = 0.7729089703514256
User 35290 AUC after training: 0.7726626882637113
User 35290 does not improve AUC. Reverting changes.
Training on augumented user 128145 19/50 current_auc = 0.7729089703514256
User 128145 AUC after training: 0.7727953016955575
User 128145 does not improve AUC. Reverting changes.
Training on augumented user 25213 20/50 current_auc = 0.7729089703514256
User 25213 AUC after training: 0.7727195225916454
User 25213 does not improve AUC. Reverting changes.
Training on augumented user 29046 21/50 current_auc = 0.7729089703514256
User 29046 AUC after training: 0.7727574121436014
User 29046 does not improve AUC. Reverting changes.
Training on augumented user 78568 22/50 current_auc = 0.7729089703514256
User 78568 AUC after training: 0.7728710807994695
User 78568 does not improve AUC. Reverting changes.
Training on augumented user 76287 23/50 current_auc = 0.7729089703514256
User 76287 AUC after training: 0.7724732405039312
User 76287 does not improve AUC. Reverting changes.
Training on augumented user 23968 24/50 current_auc = 0.7729089703514256
User 23968 AUC after training: 0.7727953016955574
User 23968 does not improve AUC. Reverting changes.
Training on augumented user 112972 25/50 current_auc = 0.7729089703514256
User 112972 AUC after training: 0.7728142464715355
User 112972 does not improve AUC. Reverting changes.
Training on augumented user 136893 26/50 current_auc = 0.7729089703514256
User 136893 AUC after training: 0.7728900255754476
User 136893 does not improve AUC. Reverting changes.
Training on augumented user 47901 27/50 current_auc = 0.7729089703514256
User 47901 AUC after training: 0.7724732405039311
User 47901 does not improve AUC. Reverting changes.
Training on augumented user 135022 28/50 current_auc = 0.7729089703514256
User 135022 AUC after training: 0.7726058539357773
User 135022 does not improve AUC. Reverting changes.
Training on augumented user 66300 29/50 current_auc = 0.7729089703514256
User 66300 AUC after training: 0.7728142464715355
User 66300 does not improve AUC. Reverting changes.
Training on augumented user 130597 30/50 current_auc = 0.7729089703514256
User 130597 AUC after training: 0.7727005778156674
User 130597 does not improve AUC. Reverting changes.
Training on augumented user 28199 31/50 current_auc = 0.7729089703514256
User 28199 AUC after training: 0.7728331912475136
User 28199 does not improve AUC. Reverting changes.
Training on augumented user 56573 32/50 current_auc = 0.7729089703514256
User 56573 AUC after training: 0.7729279151274037
User 56573 improves AUC. Keeping the model.
Training on augumented user 127513 33/50 current_auc = 0.7729279151274037
User 127513 AUC after training: 0.7730415837832718
User 127513 improves AUC. Keeping the model.
Training on augumented user 102484 34/50 current_auc = 0.7730415837832718
User 102484 AUC after training: 0.7729279151274037
User 102484 does not improve AUC. Reverting changes.
Training on augumented user 46345 35/50 current_auc = 0.7730415837832718
User 46345 AUC after training: 0.7729279151274036
User 46345 does not improve AUC. Reverting changes.
Training on augumented user 20871 36/50 current_auc = 0.7730415837832718
User 20871 AUC after training: 0.7729279151274037
User 20871 does not improve AUC. Reverting changes.
Training on augumented user 106325 37/50 current_auc = 0.7730415837832718
User 106325 AUC after training: 0.7728331912475135
User 106325 does not improve AUC. Reverting changes.
Training on augumented user 108798 38/50 current_auc = 0.7730415837832718
User 108798 AUC after training: 0.7730036942313158
User 108798 does not improve AUC. Reverting changes.
Training on augumented user 1790 39/50 current_auc = 0.7730415837832718
User 1790 AUC after training: 0.7729089703514256
User 1790 does not improve AUC. Reverting changes.
Training on augumented user 21686 40/50 current_auc = 0.7730415837832718
User 21686 AUC after training: 0.7730794733352278
User 21686 improves AUC. Keeping the model.
Training on augumented user 133596 41/50 current_auc = 0.7730794733352278
User 133596 AUC after training: 0.7730605285592498
User 133596 does not improve AUC. Reverting changes.
Training on augumented user 65439 42/50 current_auc = 0.7730794733352278
User 65439 AUC after training: 0.7727384673676234
User 65439 does not improve AUC. Reverting changes.
Training on augumented user 136129 43/50 current_auc = 0.7730794733352278
User 136129 AUC after training: 0.7729468599033816
User 136129 does not improve AUC. Reverting changes.
Training on augumented user 67180 44/50 current_auc = 0.7730794733352278
User 67180 AUC after training: 0.7729468599033817
User 67180 does not improve AUC. Reverting changes.
Training on augumented user 87996 45/50 current_auc = 0.7730794733352278
User 87996 AUC after training: 0.7730415837832718
User 87996 does not improve AUC. Reverting changes.
Training on augumented user 133839 46/50 current_auc = 0.7730794733352278
User 133839 AUC after training: 0.7730226390072937
User 133839 does not improve AUC. Reverting changes.
Training on augumented user 35057 47/50 current_auc = 0.7730794733352278
User 35057 AUC after training: 0.7726437434877332
User 35057 does not improve AUC. Reverting changes.
Training on augumented user 26221 48/50 current_auc = 0.7730794733352278
User 26221 AUC after training: 0.7727005778156674
User 26221 does not improve AUC. Reverting changes.
Training on augumented user 134497 49/50 current_auc = 0.7730794733352278
User 134497 AUC after training: 0.7727953016955574
User 134497 does not improve AUC. Reverting changes.
[2024-12-02 19:16:06.270755] start test user 31440 171/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:06.674807] start test user 31440 171/568 recall augumented users by random, augumented_users = [37809, 91036, 96500, 79451, 54281, 33559, 38416, 52233, 114539, 1085, 124721, 98071, 101372, 10249, 95312, 92107, 15239, 133750, 112215, 85316, 57269, 4528, 79699, 86075, 33791, 22496, 97031, 68729, 115537, 74839, 105412, 80741, 41472, 29209, 33, 105949, 22928, 70929, 39816, 106669, 103867, 23597, 42494, 38314, 21515, 63386, 27235, 115461, 87234, 8530]
[2024-12-02 19:16:06.689068] user = 31440 Cloud 171/568
[2024-12-02 19:16:06.698333] user = 31440 Local 171/568
[2024-12-02 19:16:06.715980] user = 31440 Local+ 171/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:09.360961] user = 31440 MPDA- 171/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4965034965034965
Training on augumented user 37809 0/50 current_auc = 0.4965034965034965
User 37809 AUC after training: 0.4965034965034965
User 37809 does not improve AUC. Reverting changes.
Training on augumented user 91036 1/50 current_auc = 0.4965034965034965
User 91036 AUC after training: 0.4965034965034965
User 91036 does not improve AUC. Reverting changes.
Training on augumented user 96500 2/50 current_auc = 0.4965034965034965
User 96500 AUC after training: 0.4895104895104895
User 96500 does not improve AUC. Reverting changes.
Training on augumented user 79451 3/50 current_auc = 0.4965034965034965
User 79451 AUC after training: 0.4965034965034965
User 79451 does not improve AUC. Reverting changes.
Training on augumented user 54281 4/50 current_auc = 0.4965034965034965
User 54281 AUC after training: 0.4965034965034965
User 54281 does not improve AUC. Reverting changes.
Training on augumented user 33559 5/50 current_auc = 0.4965034965034965
User 33559 AUC after training: 0.4895104895104895
User 33559 does not improve AUC. Reverting changes.
Training on augumented user 38416 6/50 current_auc = 0.4965034965034965
User 38416 AUC after training: 0.4965034965034965
User 38416 does not improve AUC. Reverting changes.
Training on augumented user 52233 7/50 current_auc = 0.4965034965034965
User 52233 AUC after training: 0.4965034965034965
User 52233 does not improve AUC. Reverting changes.
Training on augumented user 114539 8/50 current_auc = 0.4965034965034965
User 114539 AUC after training: 0.4965034965034965
User 114539 does not improve AUC. Reverting changes.
Training on augumented user 1085 9/50 current_auc = 0.4965034965034965
User 1085 AUC after training: 0.4825174825174825
User 1085 does not improve AUC. Reverting changes.
Training on augumented user 124721 10/50 current_auc = 0.4965034965034965
User 124721 AUC after training: 0.4965034965034965
User 124721 does not improve AUC. Reverting changes.
Training on augumented user 98071 11/50 current_auc = 0.4965034965034965
User 98071 AUC after training: 0.4965034965034965
User 98071 does not improve AUC. Reverting changes.
Training on augumented user 101372 12/50 current_auc = 0.4965034965034965
User 101372 AUC after training: 0.4965034965034965
User 101372 does not improve AUC. Reverting changes.
Training on augumented user 10249 13/50 current_auc = 0.4965034965034965
User 10249 AUC after training: 0.4965034965034965
User 10249 does not improve AUC. Reverting changes.
Training on augumented user 95312 14/50 current_auc = 0.4965034965034965
User 95312 AUC after training: 0.4965034965034965
User 95312 does not improve AUC. Reverting changes.
Training on augumented user 92107 15/50 current_auc = 0.4965034965034965
User 92107 AUC after training: 0.4965034965034965
User 92107 does not improve AUC. Reverting changes.
Training on augumented user 15239 16/50 current_auc = 0.4965034965034965
User 15239 AUC after training: 0.4965034965034965
User 15239 does not improve AUC. Reverting changes.
Training on augumented user 133750 17/50 current_auc = 0.4965034965034965
User 133750 AUC after training: 0.4895104895104895
User 133750 does not improve AUC. Reverting changes.
Training on augumented user 112215 18/50 current_auc = 0.4965034965034965
User 112215 AUC after training: 0.4965034965034965
User 112215 does not improve AUC. Reverting changes.
Training on augumented user 85316 19/50 current_auc = 0.4965034965034965
User 85316 AUC after training: 0.4965034965034965
User 85316 does not improve AUC. Reverting changes.
Training on augumented user 57269 20/50 current_auc = 0.4965034965034965
User 57269 AUC after training: 0.4965034965034965
User 57269 does not improve AUC. Reverting changes.
Training on augumented user 4528 21/50 current_auc = 0.4965034965034965
User 4528 AUC after training: 0.4965034965034965
User 4528 does not improve AUC. Reverting changes.
Training on augumented user 79699 22/50 current_auc = 0.4965034965034965
User 79699 AUC after training: 0.4895104895104895
User 79699 does not improve AUC. Reverting changes.
Training on augumented user 86075 23/50 current_auc = 0.4965034965034965
User 86075 AUC after training: 0.4965034965034965
User 86075 does not improve AUC. Reverting changes.
Training on augumented user 33791 24/50 current_auc = 0.4965034965034965
User 33791 AUC after training: 0.4965034965034965
User 33791 does not improve AUC. Reverting changes.
Training on augumented user 22496 25/50 current_auc = 0.4965034965034965
User 22496 AUC after training: 0.4895104895104895
User 22496 does not improve AUC. Reverting changes.
Training on augumented user 97031 26/50 current_auc = 0.4965034965034965
User 97031 AUC after training: 0.4965034965034965
User 97031 does not improve AUC. Reverting changes.
Training on augumented user 68729 27/50 current_auc = 0.4965034965034965
User 68729 AUC after training: 0.4965034965034965
User 68729 does not improve AUC. Reverting changes.
Training on augumented user 115537 28/50 current_auc = 0.4965034965034965
User 115537 AUC after training: 0.4965034965034965
User 115537 does not improve AUC. Reverting changes.
Training on augumented user 74839 29/50 current_auc = 0.4965034965034965
User 74839 AUC after training: 0.4965034965034965
User 74839 does not improve AUC. Reverting changes.
Training on augumented user 105412 30/50 current_auc = 0.4965034965034965
User 105412 AUC after training: 0.4965034965034965
User 105412 does not improve AUC. Reverting changes.
Training on augumented user 80741 31/50 current_auc = 0.4965034965034965
User 80741 AUC after training: 0.4965034965034965
User 80741 does not improve AUC. Reverting changes.
Training on augumented user 41472 32/50 current_auc = 0.4965034965034965
User 41472 AUC after training: 0.4965034965034965
User 41472 does not improve AUC. Reverting changes.
Training on augumented user 29209 33/50 current_auc = 0.4965034965034965
User 29209 AUC after training: 0.4965034965034965
User 29209 does not improve AUC. Reverting changes.
Training on augumented user 33 34/50 current_auc = 0.4965034965034965
User 33 AUC after training: 0.4965034965034965
User 33 does not improve AUC. Reverting changes.
Training on augumented user 105949 35/50 current_auc = 0.4965034965034965
User 105949 AUC after training: 0.4895104895104895
User 105949 does not improve AUC. Reverting changes.
Training on augumented user 22928 36/50 current_auc = 0.4965034965034965
User 22928 AUC after training: 0.4965034965034965
User 22928 does not improve AUC. Reverting changes.
Training on augumented user 70929 37/50 current_auc = 0.4965034965034965
User 70929 AUC after training: 0.4895104895104895
User 70929 does not improve AUC. Reverting changes.
Training on augumented user 39816 38/50 current_auc = 0.4965034965034965
User 39816 AUC after training: 0.4895104895104895
User 39816 does not improve AUC. Reverting changes.
Training on augumented user 106669 39/50 current_auc = 0.4965034965034965
User 106669 AUC after training: 0.4965034965034965
User 106669 does not improve AUC. Reverting changes.
Training on augumented user 103867 40/50 current_auc = 0.4965034965034965
User 103867 AUC after training: 0.4965034965034965
User 103867 does not improve AUC. Reverting changes.
Training on augumented user 23597 41/50 current_auc = 0.4965034965034965
User 23597 AUC after training: 0.4965034965034965
User 23597 does not improve AUC. Reverting changes.
Training on augumented user 42494 42/50 current_auc = 0.4965034965034965
User 42494 AUC after training: 0.4965034965034965
User 42494 does not improve AUC. Reverting changes.
Training on augumented user 38314 43/50 current_auc = 0.4965034965034965
User 38314 AUC after training: 0.4895104895104895
User 38314 does not improve AUC. Reverting changes.
Training on augumented user 21515 44/50 current_auc = 0.4965034965034965
User 21515 AUC after training: 0.4965034965034965
User 21515 does not improve AUC. Reverting changes.
Training on augumented user 63386 45/50 current_auc = 0.4965034965034965
User 63386 AUC after training: 0.4965034965034965
User 63386 does not improve AUC. Reverting changes.
Training on augumented user 27235 46/50 current_auc = 0.4965034965034965
User 27235 AUC after training: 0.4965034965034965
User 27235 does not improve AUC. Reverting changes.
Training on augumented user 115461 47/50 current_auc = 0.4965034965034965
User 115461 AUC after training: 0.4965034965034965
User 115461 does not improve AUC. Reverting changes.
Training on augumented user 87234 48/50 current_auc = 0.4965034965034965
User 87234 AUC after training: 0.4965034965034965
User 87234 does not improve AUC. Reverting changes.
Training on augumented user 8530 49/50 current_auc = 0.4965034965034965
User 8530 AUC after training: 0.4965034965034965
User 8530 does not improve AUC. Reverting changes.
[2024-12-02 19:16:36.791859] start test user 31449 172/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:37.249075] start test user 31449 172/568 recall augumented users by random, augumented_users = [51123, 78738, 47434, 3954, 50594, 117661, 23671, 36944, 60582, 134888, 2443, 73035, 58461, 73308, 28588, 123053, 89026, 37531, 127649, 68909, 34251, 46928, 130070, 26343, 36008, 122833, 89311, 137898, 50908, 34170, 68884, 59043, 24436, 107981, 85515, 121417, 49557, 22820, 6770, 114445, 129117, 132581, 80987, 77628, 73932, 93093, 14986, 60455, 128682, 132698]
[2024-12-02 19:16:37.263876] user = 31449 Cloud 172/568
[2024-12-02 19:16:37.285545] user = 31449 Local 172/568
[2024-12-02 19:16:37.358836] user = 31449 Local+ 172/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:38.885081] user = 31449 MPDA- 172/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7796568627450979
Training on augumented user 51123 0/50 current_auc = 0.7796568627450979
User 51123 AUC after training: 0.7791666666666666
User 51123 does not improve AUC. Reverting changes.
Training on augumented user 78738 1/50 current_auc = 0.7796568627450979
User 78738 AUC after training: 0.7789215686274509
User 78738 does not improve AUC. Reverting changes.
Training on augumented user 47434 2/50 current_auc = 0.7796568627450979
User 47434 AUC after training: 0.7806372549019608
User 47434 improves AUC. Keeping the model.
Training on augumented user 3954 3/50 current_auc = 0.7806372549019608
User 3954 AUC after training: 0.7806372549019608
User 3954 does not improve AUC. Reverting changes.
Training on augumented user 50594 4/50 current_auc = 0.7806372549019608
User 50594 AUC after training: 0.7791666666666666
User 50594 does not improve AUC. Reverting changes.
Training on augumented user 117661 5/50 current_auc = 0.7806372549019608
User 117661 AUC after training: 0.7791666666666666
User 117661 does not improve AUC. Reverting changes.
Training on augumented user 23671 6/50 current_auc = 0.7806372549019608
User 23671 AUC after training: 0.7791666666666666
User 23671 does not improve AUC. Reverting changes.
Training on augumented user 36944 7/50 current_auc = 0.7806372549019608
User 36944 AUC after training: 0.7791666666666666
User 36944 does not improve AUC. Reverting changes.
Training on augumented user 60582 8/50 current_auc = 0.7806372549019608
User 60582 AUC after training: 0.7786764705882352
User 60582 does not improve AUC. Reverting changes.
Training on augumented user 134888 9/50 current_auc = 0.7806372549019608
User 134888 AUC after training: 0.7791666666666666
User 134888 does not improve AUC. Reverting changes.
Training on augumented user 2443 10/50 current_auc = 0.7806372549019608
User 2443 AUC after training: 0.7801470588235293
User 2443 does not improve AUC. Reverting changes.
Training on augumented user 73035 11/50 current_auc = 0.7806372549019608
User 73035 AUC after training: 0.7791666666666666
User 73035 does not improve AUC. Reverting changes.
Training on augumented user 58461 12/50 current_auc = 0.7806372549019608
User 58461 AUC after training: 0.7791666666666666
User 58461 does not improve AUC. Reverting changes.
Training on augumented user 73308 13/50 current_auc = 0.7806372549019608
User 73308 AUC after training: 0.7789215686274509
User 73308 does not improve AUC. Reverting changes.
Training on augumented user 28588 14/50 current_auc = 0.7806372549019608
User 28588 AUC after training: 0.7791666666666666
User 28588 does not improve AUC. Reverting changes.
Training on augumented user 123053 15/50 current_auc = 0.7806372549019608
User 123053 AUC after training: 0.7806372549019607
User 123053 does not improve AUC. Reverting changes.
Training on augumented user 89026 16/50 current_auc = 0.7806372549019608
User 89026 AUC after training: 0.7801470588235293
User 89026 does not improve AUC. Reverting changes.
Training on augumented user 37531 17/50 current_auc = 0.7806372549019608
User 37531 AUC after training: 0.7786764705882352
User 37531 does not improve AUC. Reverting changes.
Training on augumented user 127649 18/50 current_auc = 0.7806372549019608
User 127649 AUC after training: 0.7801470588235293
User 127649 does not improve AUC. Reverting changes.
Training on augumented user 68909 19/50 current_auc = 0.7806372549019608
User 68909 AUC after training: 0.7791666666666666
User 68909 does not improve AUC. Reverting changes.
Training on augumented user 34251 20/50 current_auc = 0.7806372549019608
User 34251 AUC after training: 0.779656862745098
User 34251 does not improve AUC. Reverting changes.
Training on augumented user 46928 21/50 current_auc = 0.7806372549019608
User 46928 AUC after training: 0.7784313725490195
User 46928 does not improve AUC. Reverting changes.
Training on augumented user 130070 22/50 current_auc = 0.7806372549019608
User 130070 AUC after training: 0.7796568627450979
User 130070 does not improve AUC. Reverting changes.
Training on augumented user 26343 23/50 current_auc = 0.7806372549019608
User 26343 AUC after training: 0.7796568627450979
User 26343 does not improve AUC. Reverting changes.
Training on augumented user 36008 24/50 current_auc = 0.7806372549019608
User 36008 AUC after training: 0.7786764705882352
User 36008 does not improve AUC. Reverting changes.
Training on augumented user 122833 25/50 current_auc = 0.7806372549019608
User 122833 AUC after training: 0.779656862745098
User 122833 does not improve AUC. Reverting changes.
Training on augumented user 89311 26/50 current_auc = 0.7806372549019608
User 89311 AUC after training: 0.7796568627450979
User 89311 does not improve AUC. Reverting changes.
Training on augumented user 137898 27/50 current_auc = 0.7806372549019608
User 137898 AUC after training: 0.7811274509803922
User 137898 improves AUC. Keeping the model.
Training on augumented user 50908 28/50 current_auc = 0.7811274509803922
User 50908 AUC after training: 0.7811274509803922
User 50908 does not improve AUC. Reverting changes.
Training on augumented user 34170 29/50 current_auc = 0.7811274509803922
User 34170 AUC after training: 0.7811274509803922
User 34170 does not improve AUC. Reverting changes.
Training on augumented user 68884 30/50 current_auc = 0.7811274509803922
User 68884 AUC after training: 0.7806372549019607
User 68884 does not improve AUC. Reverting changes.
Training on augumented user 59043 31/50 current_auc = 0.7811274509803922
User 59043 AUC after training: 0.7806372549019608
User 59043 does not improve AUC. Reverting changes.
Training on augumented user 24436 32/50 current_auc = 0.7811274509803922
User 24436 AUC after training: 0.7806372549019608
User 24436 does not improve AUC. Reverting changes.
Training on augumented user 107981 33/50 current_auc = 0.7811274509803922
User 107981 AUC after training: 0.7801470588235293
User 107981 does not improve AUC. Reverting changes.
Training on augumented user 85515 34/50 current_auc = 0.7811274509803922
User 85515 AUC after training: 0.7806372549019608
User 85515 does not improve AUC. Reverting changes.
Training on augumented user 121417 35/50 current_auc = 0.7811274509803922
User 121417 AUC after training: 0.7811274509803922
User 121417 does not improve AUC. Reverting changes.
Training on augumented user 49557 36/50 current_auc = 0.7811274509803922
User 49557 AUC after training: 0.7811274509803922
User 49557 does not improve AUC. Reverting changes.
Training on augumented user 22820 37/50 current_auc = 0.7811274509803922
User 22820 AUC after training: 0.7811274509803922
User 22820 does not improve AUC. Reverting changes.
Training on augumented user 6770 38/50 current_auc = 0.7811274509803922
User 6770 AUC after training: 0.7811274509803922
User 6770 does not improve AUC. Reverting changes.
Training on augumented user 114445 39/50 current_auc = 0.7811274509803922
User 114445 AUC after training: 0.7806372549019607
User 114445 does not improve AUC. Reverting changes.
Training on augumented user 129117 40/50 current_auc = 0.7811274509803922
User 129117 AUC after training: 0.7811274509803922
User 129117 does not improve AUC. Reverting changes.
Training on augumented user 132581 41/50 current_auc = 0.7811274509803922
User 132581 AUC after training: 0.7821078431372549
User 132581 improves AUC. Keeping the model.
Training on augumented user 80987 42/50 current_auc = 0.7821078431372549
User 80987 AUC after training: 0.7808823529411764
User 80987 does not improve AUC. Reverting changes.
Training on augumented user 77628 43/50 current_auc = 0.7821078431372549
User 77628 AUC after training: 0.780392156862745
User 77628 does not improve AUC. Reverting changes.
Training on augumented user 73932 44/50 current_auc = 0.7821078431372549
User 73932 AUC after training: 0.7796568627450979
User 73932 does not improve AUC. Reverting changes.
Training on augumented user 93093 45/50 current_auc = 0.7821078431372549
User 93093 AUC after training: 0.7806372549019607
User 93093 does not improve AUC. Reverting changes.
Training on augumented user 14986 46/50 current_auc = 0.7821078431372549
User 14986 AUC after training: 0.7816176470588235
User 14986 does not improve AUC. Reverting changes.
Training on augumented user 60455 47/50 current_auc = 0.7821078431372549
User 60455 AUC after training: 0.7825980392156862
User 60455 improves AUC. Keeping the model.
Training on augumented user 128682 48/50 current_auc = 0.7825980392156862
User 128682 AUC after training: 0.7816176470588234
User 128682 does not improve AUC. Reverting changes.
Training on augumented user 132698 49/50 current_auc = 0.7825980392156862
User 132698 AUC after training: 0.7821078431372549
User 132698 does not improve AUC. Reverting changes.
[2024-12-02 19:17:09.423312] start test user 31468 173/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:10.277684] start test user 31468 173/568 recall augumented users by random, augumented_users = [125124, 98405, 18555, 8761, 113983, 74883, 20263, 128673, 80560, 116474, 39731, 120141, 30876, 16608, 102126, 133916, 109144, 67190, 1534, 66072, 63111, 77505, 60189, 64996, 93877, 18666, 31720, 128430, 79147, 115660, 68844, 121773, 13194, 69922, 63447, 85057, 72861, 116618, 75670, 42532, 60198, 14836, 47083, 101935, 76900, 56278, 75910, 60658, 98945, 43829]
[2024-12-02 19:17:10.295660] user = 31468 Cloud 173/568
[2024-12-02 19:17:10.306713] user = 31468 Local 173/568
[2024-12-02 19:17:10.495168] user = 31468 Local+ 173/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:13.140818] user = 31468 MPDA- 173/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 125124 0/50 current_auc = 0.5
User 125124 AUC after training: 0.5
User 125124 does not improve AUC. Reverting changes.
Training on augumented user 98405 1/50 current_auc = 0.5
User 98405 AUC after training: 0.5
User 98405 does not improve AUC. Reverting changes.
Training on augumented user 18555 2/50 current_auc = 0.5
User 18555 AUC after training: 0.5
User 18555 does not improve AUC. Reverting changes.
Training on augumented user 8761 3/50 current_auc = 0.5
User 8761 AUC after training: 0.5
User 8761 does not improve AUC. Reverting changes.
Training on augumented user 113983 4/50 current_auc = 0.5
User 113983 AUC after training: 0.5
User 113983 does not improve AUC. Reverting changes.
Training on augumented user 74883 5/50 current_auc = 0.5
User 74883 AUC after training: 0.5
User 74883 does not improve AUC. Reverting changes.
Training on augumented user 20263 6/50 current_auc = 0.5
User 20263 AUC after training: 0.5
User 20263 does not improve AUC. Reverting changes.
Training on augumented user 128673 7/50 current_auc = 0.5
User 128673 AUC after training: 0.5
User 128673 does not improve AUC. Reverting changes.
Training on augumented user 80560 8/50 current_auc = 0.5
User 80560 AUC after training: 0.5
User 80560 does not improve AUC. Reverting changes.
Training on augumented user 116474 9/50 current_auc = 0.5
User 116474 AUC after training: 0.5
User 116474 does not improve AUC. Reverting changes.
Training on augumented user 39731 10/50 current_auc = 0.5
User 39731 AUC after training: 0.5
User 39731 does not improve AUC. Reverting changes.
Training on augumented user 120141 11/50 current_auc = 0.5
User 120141 AUC after training: 0.5
User 120141 does not improve AUC. Reverting changes.
Training on augumented user 30876 12/50 current_auc = 0.5
User 30876 AUC after training: 0.5
User 30876 does not improve AUC. Reverting changes.
Training on augumented user 16608 13/50 current_auc = 0.5
User 16608 AUC after training: 0.5
User 16608 does not improve AUC. Reverting changes.
Training on augumented user 102126 14/50 current_auc = 0.5
User 102126 AUC after training: 0.5
User 102126 does not improve AUC. Reverting changes.
Training on augumented user 133916 15/50 current_auc = 0.5
User 133916 AUC after training: 0.5
User 133916 does not improve AUC. Reverting changes.
Training on augumented user 109144 16/50 current_auc = 0.5
User 109144 AUC after training: 0.5
User 109144 does not improve AUC. Reverting changes.
Training on augumented user 67190 17/50 current_auc = 0.5
User 67190 AUC after training: 0.5
User 67190 does not improve AUC. Reverting changes.
Training on augumented user 1534 18/50 current_auc = 0.5
User 1534 AUC after training: 0.5
User 1534 does not improve AUC. Reverting changes.
Training on augumented user 66072 19/50 current_auc = 0.5
User 66072 AUC after training: 0.5
User 66072 does not improve AUC. Reverting changes.
Training on augumented user 63111 20/50 current_auc = 0.5
User 63111 AUC after training: 0.5
User 63111 does not improve AUC. Reverting changes.
Training on augumented user 77505 21/50 current_auc = 0.5
User 77505 AUC after training: 0.5
User 77505 does not improve AUC. Reverting changes.
Training on augumented user 60189 22/50 current_auc = 0.5
User 60189 AUC after training: 0.5
User 60189 does not improve AUC. Reverting changes.
Training on augumented user 64996 23/50 current_auc = 0.5
User 64996 AUC after training: 0.5
User 64996 does not improve AUC. Reverting changes.
Training on augumented user 93877 24/50 current_auc = 0.5
User 93877 AUC after training: 0.5
User 93877 does not improve AUC. Reverting changes.
Training on augumented user 18666 25/50 current_auc = 0.5
User 18666 AUC after training: 0.5
User 18666 does not improve AUC. Reverting changes.
Training on augumented user 31720 26/50 current_auc = 0.5
User 31720 AUC after training: 0.5
User 31720 does not improve AUC. Reverting changes.
Training on augumented user 128430 27/50 current_auc = 0.5
User 128430 AUC after training: 0.5
User 128430 does not improve AUC. Reverting changes.
Training on augumented user 79147 28/50 current_auc = 0.5
User 79147 AUC after training: 0.5
User 79147 does not improve AUC. Reverting changes.
Training on augumented user 115660 29/50 current_auc = 0.5
User 115660 AUC after training: 0.5
User 115660 does not improve AUC. Reverting changes.
Training on augumented user 68844 30/50 current_auc = 0.5
User 68844 AUC after training: 0.5
User 68844 does not improve AUC. Reverting changes.
Training on augumented user 121773 31/50 current_auc = 0.5
User 121773 AUC after training: 0.5
User 121773 does not improve AUC. Reverting changes.
Training on augumented user 13194 32/50 current_auc = 0.5
User 13194 AUC after training: 0.5
User 13194 does not improve AUC. Reverting changes.
Training on augumented user 69922 33/50 current_auc = 0.5
User 69922 AUC after training: 0.5
User 69922 does not improve AUC. Reverting changes.
Training on augumented user 63447 34/50 current_auc = 0.5
User 63447 AUC after training: 0.5
User 63447 does not improve AUC. Reverting changes.
Training on augumented user 85057 35/50 current_auc = 0.5
User 85057 AUC after training: 0.5
User 85057 does not improve AUC. Reverting changes.
Training on augumented user 72861 36/50 current_auc = 0.5
User 72861 AUC after training: 0.5
User 72861 does not improve AUC. Reverting changes.
Training on augumented user 116618 37/50 current_auc = 0.5
User 116618 AUC after training: 0.5
User 116618 does not improve AUC. Reverting changes.
Training on augumented user 75670 38/50 current_auc = 0.5
User 75670 AUC after training: 0.5
User 75670 does not improve AUC. Reverting changes.
Training on augumented user 42532 39/50 current_auc = 0.5
User 42532 AUC after training: 0.5
User 42532 does not improve AUC. Reverting changes.
Training on augumented user 60198 40/50 current_auc = 0.5
User 60198 AUC after training: 0.5
User 60198 does not improve AUC. Reverting changes.
Training on augumented user 14836 41/50 current_auc = 0.5
User 14836 AUC after training: 0.5
User 14836 does not improve AUC. Reverting changes.
Training on augumented user 47083 42/50 current_auc = 0.5
User 47083 AUC after training: 0.5
User 47083 does not improve AUC. Reverting changes.
Training on augumented user 101935 43/50 current_auc = 0.5
User 101935 AUC after training: 0.5
User 101935 does not improve AUC. Reverting changes.
Training on augumented user 76900 44/50 current_auc = 0.5
User 76900 AUC after training: 0.5
User 76900 does not improve AUC. Reverting changes.
Training on augumented user 56278 45/50 current_auc = 0.5
User 56278 AUC after training: 0.5
User 56278 does not improve AUC. Reverting changes.
Training on augumented user 75910 46/50 current_auc = 0.5
User 75910 AUC after training: 0.5
User 75910 does not improve AUC. Reverting changes.
Training on augumented user 60658 47/50 current_auc = 0.5
User 60658 AUC after training: 0.5
User 60658 does not improve AUC. Reverting changes.
Training on augumented user 98945 48/50 current_auc = 0.5
User 98945 AUC after training: 0.5
User 98945 does not improve AUC. Reverting changes.
Training on augumented user 43829 49/50 current_auc = 0.5
User 43829 AUC after training: 0.5
User 43829 does not improve AUC. Reverting changes.
[2024-12-02 19:17:43.213396] start test user 31499 174/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:43.990855] start test user 31499 174/568 recall augumented users by random, augumented_users = [86876, 15226, 137290, 29931, 64591, 36509, 16434, 126418, 91991, 67548, 75219, 130331, 2359, 20164, 136022, 37129, 33452, 31553, 26542, 122656, 71469, 13436, 117361, 126944, 10134, 42255, 70052, 59259, 107080, 72506, 1223, 97381, 26625, 22598, 30100, 33359, 16007, 105675, 42103, 66950, 6825, 20502, 70742, 137998, 11856, 41596, 11123, 89847, 49190, 103229]
[2024-12-02 19:17:44.012129] user = 31499 Cloud 174/568
[2024-12-02 19:17:44.022227] user = 31499 Local 174/568
[2024-12-02 19:17:44.068541] user = 31499 Local+ 174/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:46.140172] user = 31499 MPDA- 174/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8043478260869565
Training on augumented user 86876 0/50 current_auc = 0.8043478260869565
User 86876 AUC after training: 0.8152173913043478
User 86876 improves AUC. Keeping the model.
Training on augumented user 15226 1/50 current_auc = 0.8152173913043478
User 15226 AUC after training: 0.8115942028985508
User 15226 does not improve AUC. Reverting changes.
Training on augumented user 137290 2/50 current_auc = 0.8152173913043478
User 137290 AUC after training: 0.8188405797101449
User 137290 improves AUC. Keeping the model.
Training on augumented user 29931 3/50 current_auc = 0.8188405797101449
User 29931 AUC after training: 0.8115942028985507
User 29931 does not improve AUC. Reverting changes.
Training on augumented user 64591 4/50 current_auc = 0.8188405797101449
User 64591 AUC after training: 0.822463768115942
User 64591 improves AUC. Keeping the model.
Training on augumented user 36509 5/50 current_auc = 0.822463768115942
User 36509 AUC after training: 0.8188405797101449
User 36509 does not improve AUC. Reverting changes.
Training on augumented user 16434 6/50 current_auc = 0.822463768115942
User 16434 AUC after training: 0.822463768115942
User 16434 does not improve AUC. Reverting changes.
Training on augumented user 126418 7/50 current_auc = 0.822463768115942
User 126418 AUC after training: 0.822463768115942
User 126418 does not improve AUC. Reverting changes.
Training on augumented user 91991 8/50 current_auc = 0.822463768115942
User 91991 AUC after training: 0.8188405797101449
User 91991 does not improve AUC. Reverting changes.
Training on augumented user 67548 9/50 current_auc = 0.822463768115942
User 67548 AUC after training: 0.822463768115942
User 67548 does not improve AUC. Reverting changes.
Training on augumented user 75219 10/50 current_auc = 0.822463768115942
User 75219 AUC after training: 0.822463768115942
User 75219 does not improve AUC. Reverting changes.
Training on augumented user 130331 11/50 current_auc = 0.822463768115942
User 130331 AUC after training: 0.822463768115942
User 130331 does not improve AUC. Reverting changes.
Training on augumented user 2359 12/50 current_auc = 0.822463768115942
User 2359 AUC after training: 0.822463768115942
User 2359 does not improve AUC. Reverting changes.
Training on augumented user 20164 13/50 current_auc = 0.822463768115942
User 20164 AUC after training: 0.8188405797101449
User 20164 does not improve AUC. Reverting changes.
Training on augumented user 136022 14/50 current_auc = 0.822463768115942
User 136022 AUC after training: 0.8043478260869565
User 136022 does not improve AUC. Reverting changes.
Training on augumented user 37129 15/50 current_auc = 0.822463768115942
User 37129 AUC after training: 0.822463768115942
User 37129 does not improve AUC. Reverting changes.
Training on augumented user 33452 16/50 current_auc = 0.822463768115942
User 33452 AUC after training: 0.822463768115942
User 33452 does not improve AUC. Reverting changes.
Training on augumented user 31553 17/50 current_auc = 0.822463768115942
User 31553 AUC after training: 0.822463768115942
User 31553 does not improve AUC. Reverting changes.
Training on augumented user 26542 18/50 current_auc = 0.822463768115942
User 26542 AUC after training: 0.822463768115942
User 26542 does not improve AUC. Reverting changes.
Training on augumented user 122656 19/50 current_auc = 0.822463768115942
User 122656 AUC after training: 0.8188405797101449
User 122656 does not improve AUC. Reverting changes.
Training on augumented user 71469 20/50 current_auc = 0.822463768115942
User 71469 AUC after training: 0.822463768115942
User 71469 does not improve AUC. Reverting changes.
Training on augumented user 13436 21/50 current_auc = 0.822463768115942
User 13436 AUC after training: 0.822463768115942
User 13436 does not improve AUC. Reverting changes.
Training on augumented user 117361 22/50 current_auc = 0.822463768115942
User 117361 AUC after training: 0.822463768115942
User 117361 does not improve AUC. Reverting changes.
Training on augumented user 126944 23/50 current_auc = 0.822463768115942
User 126944 AUC after training: 0.822463768115942
User 126944 does not improve AUC. Reverting changes.
Training on augumented user 10134 24/50 current_auc = 0.822463768115942
User 10134 AUC after training: 0.822463768115942
User 10134 does not improve AUC. Reverting changes.
Training on augumented user 42255 25/50 current_auc = 0.822463768115942
User 42255 AUC after training: 0.822463768115942
User 42255 does not improve AUC. Reverting changes.
Training on augumented user 70052 26/50 current_auc = 0.822463768115942
User 70052 AUC after training: 0.8188405797101449
User 70052 does not improve AUC. Reverting changes.
Training on augumented user 59259 27/50 current_auc = 0.822463768115942
User 59259 AUC after training: 0.822463768115942
User 59259 does not improve AUC. Reverting changes.
Training on augumented user 107080 28/50 current_auc = 0.822463768115942
User 107080 AUC after training: 0.8079710144927535
User 107080 does not improve AUC. Reverting changes.
Training on augumented user 72506 29/50 current_auc = 0.822463768115942
User 72506 AUC after training: 0.8188405797101449
User 72506 does not improve AUC. Reverting changes.
Training on augumented user 1223 30/50 current_auc = 0.822463768115942
User 1223 AUC after training: 0.822463768115942
User 1223 does not improve AUC. Reverting changes.
Training on augumented user 97381 31/50 current_auc = 0.822463768115942
User 97381 AUC after training: 0.822463768115942
User 97381 does not improve AUC. Reverting changes.
Training on augumented user 26625 32/50 current_auc = 0.822463768115942
User 26625 AUC after training: 0.8152173913043478
User 26625 does not improve AUC. Reverting changes.
Training on augumented user 22598 33/50 current_auc = 0.822463768115942
User 22598 AUC after training: 0.822463768115942
User 22598 does not improve AUC. Reverting changes.
Training on augumented user 30100 34/50 current_auc = 0.822463768115942
User 30100 AUC after training: 0.8152173913043479
User 30100 does not improve AUC. Reverting changes.
Training on augumented user 33359 35/50 current_auc = 0.822463768115942
User 33359 AUC after training: 0.822463768115942
User 33359 does not improve AUC. Reverting changes.
Training on augumented user 16007 36/50 current_auc = 0.822463768115942
User 16007 AUC after training: 0.8188405797101449
User 16007 does not improve AUC. Reverting changes.
Training on augumented user 105675 37/50 current_auc = 0.822463768115942
User 105675 AUC after training: 0.8188405797101449
User 105675 does not improve AUC. Reverting changes.
Training on augumented user 42103 38/50 current_auc = 0.822463768115942
User 42103 AUC after training: 0.8152173913043478
User 42103 does not improve AUC. Reverting changes.
Training on augumented user 66950 39/50 current_auc = 0.822463768115942
User 66950 AUC after training: 0.8188405797101449
User 66950 does not improve AUC. Reverting changes.
Training on augumented user 6825 40/50 current_auc = 0.822463768115942
User 6825 AUC after training: 0.822463768115942
User 6825 does not improve AUC. Reverting changes.
Training on augumented user 20502 41/50 current_auc = 0.822463768115942
User 20502 AUC after training: 0.822463768115942
User 20502 does not improve AUC. Reverting changes.
Training on augumented user 70742 42/50 current_auc = 0.822463768115942
User 70742 AUC after training: 0.822463768115942
User 70742 does not improve AUC. Reverting changes.
Training on augumented user 137998 43/50 current_auc = 0.822463768115942
User 137998 AUC after training: 0.8188405797101449
User 137998 does not improve AUC. Reverting changes.
Training on augumented user 11856 44/50 current_auc = 0.822463768115942
User 11856 AUC after training: 0.8188405797101449
User 11856 does not improve AUC. Reverting changes.
Training on augumented user 41596 45/50 current_auc = 0.822463768115942
User 41596 AUC after training: 0.8260869565217391
User 41596 improves AUC. Keeping the model.
Training on augumented user 11123 46/50 current_auc = 0.8260869565217391
User 11123 AUC after training: 0.8188405797101449
User 11123 does not improve AUC. Reverting changes.
Training on augumented user 89847 47/50 current_auc = 0.8260869565217391
User 89847 AUC after training: 0.822463768115942
User 89847 does not improve AUC. Reverting changes.
Training on augumented user 49190 48/50 current_auc = 0.8260869565217391
User 49190 AUC after training: 0.8297101449275361
User 49190 improves AUC. Keeping the model.
Training on augumented user 103229 49/50 current_auc = 0.8297101449275361
User 103229 AUC after training: 0.8260869565217391
User 103229 does not improve AUC. Reverting changes.
[2024-12-02 19:18:10.208345] start test user 31551 175/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:10.619355] start test user 31551 175/568 recall augumented users by random, augumented_users = [78713, 5748, 116646, 127376, 26698, 73220, 109295, 84250, 53688, 129838, 59330, 54327, 53634, 109839, 61772, 87644, 50532, 8269, 62016, 112581, 130344, 15483, 16154, 53280, 22519, 119973, 64068, 31013, 90837, 125313, 96400, 18249, 106152, 89135, 56735, 56569, 102204, 42597, 18112, 96473, 15710, 23184, 5246, 81003, 19216, 12030, 92547, 76526, 6973, 137412]
[2024-12-02 19:18:10.633981] user = 31551 Cloud 175/568
[2024-12-02 19:18:10.645045] user = 31551 Local 175/568
[2024-12-02 19:18:10.671586] user = 31551 Local+ 175/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:12.595751] user = 31551 MPDA- 175/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7252747252747253
Training on augumented user 78713 0/50 current_auc = 0.7252747252747253
User 78713 AUC after training: 0.7252747252747253
User 78713 does not improve AUC. Reverting changes.
Training on augumented user 5748 1/50 current_auc = 0.7252747252747253
User 5748 AUC after training: 0.7252747252747253
User 5748 does not improve AUC. Reverting changes.
Training on augumented user 116646 2/50 current_auc = 0.7252747252747253
User 116646 AUC after training: 0.7252747252747253
User 116646 does not improve AUC. Reverting changes.
Training on augumented user 127376 3/50 current_auc = 0.7252747252747253
User 127376 AUC after training: 0.7252747252747253
User 127376 does not improve AUC. Reverting changes.
Training on augumented user 26698 4/50 current_auc = 0.7252747252747253
User 26698 AUC after training: 0.7252747252747253
User 26698 does not improve AUC. Reverting changes.
Training on augumented user 73220 5/50 current_auc = 0.7252747252747253
User 73220 AUC after training: 0.7362637362637363
User 73220 improves AUC. Keeping the model.
Training on augumented user 109295 6/50 current_auc = 0.7362637362637363
User 109295 AUC after training: 0.7417582417582418
User 109295 improves AUC. Keeping the model.
Training on augumented user 84250 7/50 current_auc = 0.7417582417582418
User 84250 AUC after training: 0.7417582417582418
User 84250 does not improve AUC. Reverting changes.
Training on augumented user 53688 8/50 current_auc = 0.7417582417582418
User 53688 AUC after training: 0.7417582417582418
User 53688 does not improve AUC. Reverting changes.
Training on augumented user 129838 9/50 current_auc = 0.7417582417582418
User 129838 AUC after training: 0.7417582417582418
User 129838 does not improve AUC. Reverting changes.
Training on augumented user 59330 10/50 current_auc = 0.7417582417582418
User 59330 AUC after training: 0.7417582417582418
User 59330 does not improve AUC. Reverting changes.
Training on augumented user 54327 11/50 current_auc = 0.7417582417582418
User 54327 AUC after training: 0.7417582417582418
User 54327 does not improve AUC. Reverting changes.
Training on augumented user 53634 12/50 current_auc = 0.7417582417582418
User 53634 AUC after training: 0.7362637362637363
User 53634 does not improve AUC. Reverting changes.
Training on augumented user 109839 13/50 current_auc = 0.7417582417582418
User 109839 AUC after training: 0.7417582417582418
User 109839 does not improve AUC. Reverting changes.
Training on augumented user 61772 14/50 current_auc = 0.7417582417582418
User 61772 AUC after training: 0.7417582417582418
User 61772 does not improve AUC. Reverting changes.
Training on augumented user 87644 15/50 current_auc = 0.7417582417582418
User 87644 AUC after training: 0.7417582417582418
User 87644 does not improve AUC. Reverting changes.
Training on augumented user 50532 16/50 current_auc = 0.7417582417582418
User 50532 AUC after training: 0.7417582417582418
User 50532 does not improve AUC. Reverting changes.
Training on augumented user 8269 17/50 current_auc = 0.7417582417582418
User 8269 AUC after training: 0.7417582417582418
User 8269 does not improve AUC. Reverting changes.
Training on augumented user 62016 18/50 current_auc = 0.7417582417582418
User 62016 AUC after training: 0.7362637362637363
User 62016 does not improve AUC. Reverting changes.
Training on augumented user 112581 19/50 current_auc = 0.7417582417582418
User 112581 AUC after training: 0.7417582417582418
User 112581 does not improve AUC. Reverting changes.
Training on augumented user 130344 20/50 current_auc = 0.7417582417582418
User 130344 AUC after training: 0.7417582417582418
User 130344 does not improve AUC. Reverting changes.
Training on augumented user 15483 21/50 current_auc = 0.7417582417582418
User 15483 AUC after training: 0.7417582417582418
User 15483 does not improve AUC. Reverting changes.
Training on augumented user 16154 22/50 current_auc = 0.7417582417582418
User 16154 AUC after training: 0.7417582417582418
User 16154 does not improve AUC. Reverting changes.
Training on augumented user 53280 23/50 current_auc = 0.7417582417582418
User 53280 AUC after training: 0.7417582417582418
User 53280 does not improve AUC. Reverting changes.
Training on augumented user 22519 24/50 current_auc = 0.7417582417582418
User 22519 AUC after training: 0.7417582417582418
User 22519 does not improve AUC. Reverting changes.
Training on augumented user 119973 25/50 current_auc = 0.7417582417582418
User 119973 AUC after training: 0.7417582417582418
User 119973 does not improve AUC. Reverting changes.
Training on augumented user 64068 26/50 current_auc = 0.7417582417582418
User 64068 AUC after training: 0.7417582417582418
User 64068 does not improve AUC. Reverting changes.
Training on augumented user 31013 27/50 current_auc = 0.7417582417582418
User 31013 AUC after training: 0.7417582417582418
User 31013 does not improve AUC. Reverting changes.
Training on augumented user 90837 28/50 current_auc = 0.7417582417582418
User 90837 AUC after training: 0.7362637362637363
User 90837 does not improve AUC. Reverting changes.
Training on augumented user 125313 29/50 current_auc = 0.7417582417582418
User 125313 AUC after training: 0.7417582417582418
User 125313 does not improve AUC. Reverting changes.
Training on augumented user 96400 30/50 current_auc = 0.7417582417582418
User 96400 AUC after training: 0.7417582417582418
User 96400 does not improve AUC. Reverting changes.
Training on augumented user 18249 31/50 current_auc = 0.7417582417582418
User 18249 AUC after training: 0.7417582417582418
User 18249 does not improve AUC. Reverting changes.
Training on augumented user 106152 32/50 current_auc = 0.7417582417582418
User 106152 AUC after training: 0.7417582417582418
User 106152 does not improve AUC. Reverting changes.
Training on augumented user 89135 33/50 current_auc = 0.7417582417582418
User 89135 AUC after training: 0.7417582417582418
User 89135 does not improve AUC. Reverting changes.
Training on augumented user 56735 34/50 current_auc = 0.7417582417582418
User 56735 AUC after training: 0.7417582417582418
User 56735 does not improve AUC. Reverting changes.
Training on augumented user 56569 35/50 current_auc = 0.7417582417582418
User 56569 AUC after training: 0.7417582417582418
User 56569 does not improve AUC. Reverting changes.
Training on augumented user 102204 36/50 current_auc = 0.7417582417582418
User 102204 AUC after training: 0.7417582417582418
User 102204 does not improve AUC. Reverting changes.
Training on augumented user 42597 37/50 current_auc = 0.7417582417582418
User 42597 AUC after training: 0.7417582417582418
User 42597 does not improve AUC. Reverting changes.
Training on augumented user 18112 38/50 current_auc = 0.7417582417582418
User 18112 AUC after training: 0.7362637362637363
User 18112 does not improve AUC. Reverting changes.
Training on augumented user 96473 39/50 current_auc = 0.7417582417582418
User 96473 AUC after training: 0.7362637362637363
User 96473 does not improve AUC. Reverting changes.
Training on augumented user 15710 40/50 current_auc = 0.7417582417582418
User 15710 AUC after training: 0.7362637362637363
User 15710 does not improve AUC. Reverting changes.
Training on augumented user 23184 41/50 current_auc = 0.7417582417582418
User 23184 AUC after training: 0.7417582417582418
User 23184 does not improve AUC. Reverting changes.
Training on augumented user 5246 42/50 current_auc = 0.7417582417582418
User 5246 AUC after training: 0.7417582417582418
User 5246 does not improve AUC. Reverting changes.
Training on augumented user 81003 43/50 current_auc = 0.7417582417582418
User 81003 AUC after training: 0.7362637362637363
User 81003 does not improve AUC. Reverting changes.
Training on augumented user 19216 44/50 current_auc = 0.7417582417582418
User 19216 AUC after training: 0.7417582417582418
User 19216 does not improve AUC. Reverting changes.
Training on augumented user 12030 45/50 current_auc = 0.7417582417582418
User 12030 AUC after training: 0.7417582417582418
User 12030 does not improve AUC. Reverting changes.
Training on augumented user 92547 46/50 current_auc = 0.7417582417582418
User 92547 AUC after training: 0.7362637362637363
User 92547 does not improve AUC. Reverting changes.
Training on augumented user 76526 47/50 current_auc = 0.7417582417582418
User 76526 AUC after training: 0.7362637362637363
User 76526 does not improve AUC. Reverting changes.
Training on augumented user 6973 48/50 current_auc = 0.7417582417582418
User 6973 AUC after training: 0.7417582417582418
User 6973 does not improve AUC. Reverting changes.
Training on augumented user 137412 49/50 current_auc = 0.7417582417582418
User 137412 AUC after training: 0.7362637362637363
User 137412 does not improve AUC. Reverting changes.
[2024-12-02 19:18:41.130402] start test user 31610 176/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:41.863247] start test user 31610 176/568 recall augumented users by random, augumented_users = [134905, 42489, 59237, 20547, 113326, 122228, 102271, 128891, 27296, 87889, 116454, 5480, 22380, 58720, 80081, 11048, 4138, 120212, 124374, 71564, 19858, 120230, 109291, 117284, 77375, 55245, 66121, 13141, 119427, 44128, 6896, 35600, 18078, 74175, 94846, 90582, 96520, 44583, 31966, 49860, 24101, 6323, 123009, 132007, 93089, 131867, 66526, 137615, 80116, 46729]
[2024-12-02 19:18:41.878508] user = 31610 Cloud 176/568
[2024-12-02 19:18:41.890027] user = 31610 Local 176/568
[2024-12-02 19:18:41.922840] user = 31610 Local+ 176/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:44.531775] user = 31610 MPDA- 176/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5994152046783626
Training on augumented user 134905 0/50 current_auc = 0.5994152046783626
User 134905 AUC after training: 0.5994152046783626
User 134905 does not improve AUC. Reverting changes.
Training on augumented user 42489 1/50 current_auc = 0.5994152046783626
User 42489 AUC after training: 0.5994152046783626
User 42489 does not improve AUC. Reverting changes.
Training on augumented user 59237 2/50 current_auc = 0.5994152046783626
User 59237 AUC after training: 0.5994152046783626
User 59237 does not improve AUC. Reverting changes.
Training on augumented user 20547 3/50 current_auc = 0.5994152046783626
User 20547 AUC after training: 0.5994152046783626
User 20547 does not improve AUC. Reverting changes.
Training on augumented user 113326 4/50 current_auc = 0.5994152046783626
User 113326 AUC after training: 0.5994152046783626
User 113326 does not improve AUC. Reverting changes.
Training on augumented user 122228 5/50 current_auc = 0.5994152046783626
User 122228 AUC after training: 0.5935672514619883
User 122228 does not improve AUC. Reverting changes.
Training on augumented user 102271 6/50 current_auc = 0.5994152046783626
User 102271 AUC after training: 0.5935672514619883
User 102271 does not improve AUC. Reverting changes.
Training on augumented user 128891 7/50 current_auc = 0.5994152046783626
User 128891 AUC after training: 0.5964912280701755
User 128891 does not improve AUC. Reverting changes.
Training on augumented user 27296 8/50 current_auc = 0.5994152046783626
User 27296 AUC after training: 0.5994152046783626
User 27296 does not improve AUC. Reverting changes.
Training on augumented user 87889 9/50 current_auc = 0.5994152046783626
User 87889 AUC after training: 0.5994152046783626
User 87889 does not improve AUC. Reverting changes.
Training on augumented user 116454 10/50 current_auc = 0.5994152046783626
User 116454 AUC after training: 0.5964912280701755
User 116454 does not improve AUC. Reverting changes.
Training on augumented user 5480 11/50 current_auc = 0.5994152046783626
User 5480 AUC after training: 0.5994152046783626
User 5480 does not improve AUC. Reverting changes.
Training on augumented user 22380 12/50 current_auc = 0.5994152046783626
User 22380 AUC after training: 0.5994152046783626
User 22380 does not improve AUC. Reverting changes.
Training on augumented user 58720 13/50 current_auc = 0.5994152046783626
User 58720 AUC after training: 0.5994152046783626
User 58720 does not improve AUC. Reverting changes.
Training on augumented user 80081 14/50 current_auc = 0.5994152046783626
User 80081 AUC after training: 0.5964912280701755
User 80081 does not improve AUC. Reverting changes.
Training on augumented user 11048 15/50 current_auc = 0.5994152046783626
User 11048 AUC after training: 0.5994152046783626
User 11048 does not improve AUC. Reverting changes.
Training on augumented user 4138 16/50 current_auc = 0.5994152046783626
User 4138 AUC after training: 0.5994152046783626
User 4138 does not improve AUC. Reverting changes.
Training on augumented user 120212 17/50 current_auc = 0.5994152046783626
User 120212 AUC after training: 0.5935672514619883
User 120212 does not improve AUC. Reverting changes.
Training on augumented user 124374 18/50 current_auc = 0.5994152046783626
User 124374 AUC after training: 0.5994152046783626
User 124374 does not improve AUC. Reverting changes.
Training on augumented user 71564 19/50 current_auc = 0.5994152046783626
User 71564 AUC after training: 0.5964912280701755
User 71564 does not improve AUC. Reverting changes.
Training on augumented user 19858 20/50 current_auc = 0.5994152046783626
User 19858 AUC after training: 0.5994152046783626
User 19858 does not improve AUC. Reverting changes.
Training on augumented user 120230 21/50 current_auc = 0.5994152046783626
User 120230 AUC after training: 0.5994152046783626
User 120230 does not improve AUC. Reverting changes.
Training on augumented user 109291 22/50 current_auc = 0.5994152046783626
User 109291 AUC after training: 0.5935672514619883
User 109291 does not improve AUC. Reverting changes.
Training on augumented user 117284 23/50 current_auc = 0.5994152046783626
User 117284 AUC after training: 0.5964912280701755
User 117284 does not improve AUC. Reverting changes.
Training on augumented user 77375 24/50 current_auc = 0.5994152046783626
User 77375 AUC after training: 0.5994152046783626
User 77375 does not improve AUC. Reverting changes.
Training on augumented user 55245 25/50 current_auc = 0.5994152046783626
User 55245 AUC after training: 0.5994152046783626
User 55245 does not improve AUC. Reverting changes.
Training on augumented user 66121 26/50 current_auc = 0.5994152046783626
User 66121 AUC after training: 0.5964912280701755
User 66121 does not improve AUC. Reverting changes.
Training on augumented user 13141 27/50 current_auc = 0.5994152046783626
User 13141 AUC after training: 0.5994152046783626
User 13141 does not improve AUC. Reverting changes.
Training on augumented user 119427 28/50 current_auc = 0.5994152046783626
User 119427 AUC after training: 0.5994152046783626
User 119427 does not improve AUC. Reverting changes.
Training on augumented user 44128 29/50 current_auc = 0.5994152046783626
User 44128 AUC after training: 0.5994152046783626
User 44128 does not improve AUC. Reverting changes.
Training on augumented user 6896 30/50 current_auc = 0.5994152046783626
User 6896 AUC after training: 0.5994152046783626
User 6896 does not improve AUC. Reverting changes.
Training on augumented user 35600 31/50 current_auc = 0.5994152046783626
User 35600 AUC after training: 0.5994152046783626
User 35600 does not improve AUC. Reverting changes.
Training on augumented user 18078 32/50 current_auc = 0.5994152046783626
User 18078 AUC after training: 0.5994152046783626
User 18078 does not improve AUC. Reverting changes.
Training on augumented user 74175 33/50 current_auc = 0.5994152046783626
User 74175 AUC after training: 0.5935672514619883
User 74175 does not improve AUC. Reverting changes.
Training on augumented user 94846 34/50 current_auc = 0.5994152046783626
User 94846 AUC after training: 0.5994152046783626
User 94846 does not improve AUC. Reverting changes.
Training on augumented user 90582 35/50 current_auc = 0.5994152046783626
User 90582 AUC after training: 0.5964912280701755
User 90582 does not improve AUC. Reverting changes.
Training on augumented user 96520 36/50 current_auc = 0.5994152046783626
User 96520 AUC after training: 0.5994152046783626
User 96520 does not improve AUC. Reverting changes.
Training on augumented user 44583 37/50 current_auc = 0.5994152046783626
User 44583 AUC after training: 0.5994152046783626
User 44583 does not improve AUC. Reverting changes.
Training on augumented user 31966 38/50 current_auc = 0.5994152046783626
User 31966 AUC after training: 0.5994152046783626
User 31966 does not improve AUC. Reverting changes.
Training on augumented user 49860 39/50 current_auc = 0.5994152046783626
User 49860 AUC after training: 0.5935672514619883
User 49860 does not improve AUC. Reverting changes.
Training on augumented user 24101 40/50 current_auc = 0.5994152046783626
User 24101 AUC after training: 0.5994152046783626
User 24101 does not improve AUC. Reverting changes.
Training on augumented user 6323 41/50 current_auc = 0.5994152046783626
User 6323 AUC after training: 0.5994152046783626
User 6323 does not improve AUC. Reverting changes.
Training on augumented user 123009 42/50 current_auc = 0.5994152046783626
User 123009 AUC after training: 0.5994152046783626
User 123009 does not improve AUC. Reverting changes.
Training on augumented user 132007 43/50 current_auc = 0.5994152046783626
User 132007 AUC after training: 0.5994152046783626
User 132007 does not improve AUC. Reverting changes.
Training on augumented user 93089 44/50 current_auc = 0.5994152046783626
User 93089 AUC after training: 0.5994152046783625
User 93089 does not improve AUC. Reverting changes.
Training on augumented user 131867 45/50 current_auc = 0.5994152046783626
User 131867 AUC after training: 0.5994152046783626
User 131867 does not improve AUC. Reverting changes.
Training on augumented user 66526 46/50 current_auc = 0.5994152046783626
User 66526 AUC after training: 0.5994152046783626
User 66526 does not improve AUC. Reverting changes.
Training on augumented user 137615 47/50 current_auc = 0.5994152046783626
User 137615 AUC after training: 0.5994152046783626
User 137615 does not improve AUC. Reverting changes.
Training on augumented user 80116 48/50 current_auc = 0.5994152046783626
User 80116 AUC after training: 0.5994152046783626
User 80116 does not improve AUC. Reverting changes.
Training on augumented user 46729 49/50 current_auc = 0.5994152046783626
User 46729 AUC after training: 0.5994152046783626
User 46729 does not improve AUC. Reverting changes.
[2024-12-02 19:19:15.865924] start test user 31654 177/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:16.418662] start test user 31654 177/568 recall augumented users by random, augumented_users = [2591, 24391, 87715, 3173, 40166, 90201, 15539, 89644, 34671, 121188, 3666, 132618, 80437, 24147, 40124, 21563, 101154, 59413, 46238, 74626, 72177, 12231, 15480, 118297, 27389, 76139, 50470, 40140, 69889, 13135, 42765, 133037, 75446, 96641, 65923, 78836, 59969, 82050, 103382, 71059, 53686, 67990, 6891, 13351, 114977, 3487, 2911, 36478, 128077, 25181]
[2024-12-02 19:19:16.443970] user = 31654 Cloud 177/568
[2024-12-02 19:19:16.469003] user = 31654 Local 177/568
[2024-12-02 19:19:16.643500] user = 31654 Local+ 177/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:19.668827] user = 31654 MPDA- 177/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7777777777777778
Training on augumented user 2591 0/50 current_auc = 0.7777777777777778
User 2591 AUC after training: 0.7777777777777778
User 2591 does not improve AUC. Reverting changes.
Training on augumented user 24391 1/50 current_auc = 0.7777777777777778
User 24391 AUC after training: 0.7777777777777778
User 24391 does not improve AUC. Reverting changes.
Training on augumented user 87715 2/50 current_auc = 0.7777777777777778
User 87715 AUC after training: 0.7777777777777778
User 87715 does not improve AUC. Reverting changes.
Training on augumented user 3173 3/50 current_auc = 0.7777777777777778
User 3173 AUC after training: 0.7777777777777778
User 3173 does not improve AUC. Reverting changes.
Training on augumented user 40166 4/50 current_auc = 0.7777777777777778
User 40166 AUC after training: 0.7777777777777778
User 40166 does not improve AUC. Reverting changes.
Training on augumented user 90201 5/50 current_auc = 0.7777777777777778
User 90201 AUC after training: 0.7777777777777778
User 90201 does not improve AUC. Reverting changes.
Training on augumented user 15539 6/50 current_auc = 0.7777777777777778
User 15539 AUC after training: 0.7777777777777778
User 15539 does not improve AUC. Reverting changes.
Training on augumented user 89644 7/50 current_auc = 0.7777777777777778
User 89644 AUC after training: 0.7777777777777778
User 89644 does not improve AUC. Reverting changes.
Training on augumented user 34671 8/50 current_auc = 0.7777777777777778
User 34671 AUC after training: 0.7777777777777778
User 34671 does not improve AUC. Reverting changes.
Training on augumented user 121188 9/50 current_auc = 0.7777777777777778
User 121188 AUC after training: 0.7777777777777778
User 121188 does not improve AUC. Reverting changes.
Training on augumented user 3666 10/50 current_auc = 0.7777777777777778
User 3666 AUC after training: 0.7777777777777778
User 3666 does not improve AUC. Reverting changes.
Training on augumented user 132618 11/50 current_auc = 0.7777777777777778
User 132618 AUC after training: 0.7777777777777778
User 132618 does not improve AUC. Reverting changes.
Training on augumented user 80437 12/50 current_auc = 0.7777777777777778
User 80437 AUC after training: 0.7777777777777778
User 80437 does not improve AUC. Reverting changes.
Training on augumented user 24147 13/50 current_auc = 0.7777777777777778
User 24147 AUC after training: 0.7777777777777778
User 24147 does not improve AUC. Reverting changes.
Training on augumented user 40124 14/50 current_auc = 0.7777777777777778
User 40124 AUC after training: 0.7777777777777778
User 40124 does not improve AUC. Reverting changes.
Training on augumented user 21563 15/50 current_auc = 0.7777777777777778
User 21563 AUC after training: 0.7777777777777778
User 21563 does not improve AUC. Reverting changes.
Training on augumented user 101154 16/50 current_auc = 0.7777777777777778
User 101154 AUC after training: 0.7777777777777778
User 101154 does not improve AUC. Reverting changes.
Training on augumented user 59413 17/50 current_auc = 0.7777777777777778
User 59413 AUC after training: 0.7777777777777778
User 59413 does not improve AUC. Reverting changes.
Training on augumented user 46238 18/50 current_auc = 0.7777777777777778
User 46238 AUC after training: 0.7777777777777778
User 46238 does not improve AUC. Reverting changes.
Training on augumented user 74626 19/50 current_auc = 0.7777777777777778
User 74626 AUC after training: 0.7777777777777778
User 74626 does not improve AUC. Reverting changes.
Training on augumented user 72177 20/50 current_auc = 0.7777777777777778
User 72177 AUC after training: 0.7777777777777778
User 72177 does not improve AUC. Reverting changes.
Training on augumented user 12231 21/50 current_auc = 0.7777777777777778
User 12231 AUC after training: 0.7777777777777778
User 12231 does not improve AUC. Reverting changes.
Training on augumented user 15480 22/50 current_auc = 0.7777777777777778
User 15480 AUC after training: 0.7777777777777778
User 15480 does not improve AUC. Reverting changes.
Training on augumented user 118297 23/50 current_auc = 0.7777777777777778
User 118297 AUC after training: 0.7777777777777778
User 118297 does not improve AUC. Reverting changes.
Training on augumented user 27389 24/50 current_auc = 0.7777777777777778
User 27389 AUC after training: 0.7777777777777778
User 27389 does not improve AUC. Reverting changes.
Training on augumented user 76139 25/50 current_auc = 0.7777777777777778
User 76139 AUC after training: 0.7777777777777778
User 76139 does not improve AUC. Reverting changes.
Training on augumented user 50470 26/50 current_auc = 0.7777777777777778
User 50470 AUC after training: 0.7777777777777778
User 50470 does not improve AUC. Reverting changes.
Training on augumented user 40140 27/50 current_auc = 0.7777777777777778
User 40140 AUC after training: 0.7777777777777778
User 40140 does not improve AUC. Reverting changes.
Training on augumented user 69889 28/50 current_auc = 0.7777777777777778
User 69889 AUC after training: 0.7777777777777778
User 69889 does not improve AUC. Reverting changes.
Training on augumented user 13135 29/50 current_auc = 0.7777777777777778
User 13135 AUC after training: 0.7777777777777778
User 13135 does not improve AUC. Reverting changes.
Training on augumented user 42765 30/50 current_auc = 0.7777777777777778
User 42765 AUC after training: 0.7777777777777778
User 42765 does not improve AUC. Reverting changes.
Training on augumented user 133037 31/50 current_auc = 0.7777777777777778
User 133037 AUC after training: 0.7777777777777778
User 133037 does not improve AUC. Reverting changes.
Training on augumented user 75446 32/50 current_auc = 0.7777777777777778
User 75446 AUC after training: 0.7777777777777778
User 75446 does not improve AUC. Reverting changes.
Training on augumented user 96641 33/50 current_auc = 0.7777777777777778
User 96641 AUC after training: 0.7777777777777778
User 96641 does not improve AUC. Reverting changes.
Training on augumented user 65923 34/50 current_auc = 0.7777777777777778
User 65923 AUC after training: 0.7777777777777778
User 65923 does not improve AUC. Reverting changes.
Training on augumented user 78836 35/50 current_auc = 0.7777777777777778
User 78836 AUC after training: 0.7777777777777778
User 78836 does not improve AUC. Reverting changes.
Training on augumented user 59969 36/50 current_auc = 0.7777777777777778
User 59969 AUC after training: 0.7777777777777778
User 59969 does not improve AUC. Reverting changes.
Training on augumented user 82050 37/50 current_auc = 0.7777777777777778
User 82050 AUC after training: 0.7777777777777778
User 82050 does not improve AUC. Reverting changes.
Training on augumented user 103382 38/50 current_auc = 0.7777777777777778
User 103382 AUC after training: 0.7777777777777778
User 103382 does not improve AUC. Reverting changes.
Training on augumented user 71059 39/50 current_auc = 0.7777777777777778
User 71059 AUC after training: 0.7777777777777778
User 71059 does not improve AUC. Reverting changes.
Training on augumented user 53686 40/50 current_auc = 0.7777777777777778
User 53686 AUC after training: 0.7777777777777778
User 53686 does not improve AUC. Reverting changes.
Training on augumented user 67990 41/50 current_auc = 0.7777777777777778
User 67990 AUC after training: 0.7777777777777778
User 67990 does not improve AUC. Reverting changes.
Training on augumented user 6891 42/50 current_auc = 0.7777777777777778
User 6891 AUC after training: 0.7777777777777778
User 6891 does not improve AUC. Reverting changes.
Training on augumented user 13351 43/50 current_auc = 0.7777777777777778
User 13351 AUC after training: 0.7777777777777778
User 13351 does not improve AUC. Reverting changes.
Training on augumented user 114977 44/50 current_auc = 0.7777777777777778
User 114977 AUC after training: 0.7777777777777778
User 114977 does not improve AUC. Reverting changes.
Training on augumented user 3487 45/50 current_auc = 0.7777777777777778
User 3487 AUC after training: 0.7777777777777778
User 3487 does not improve AUC. Reverting changes.
Training on augumented user 2911 46/50 current_auc = 0.7777777777777778
User 2911 AUC after training: 0.7777777777777778
User 2911 does not improve AUC. Reverting changes.
Training on augumented user 36478 47/50 current_auc = 0.7777777777777778
User 36478 AUC after training: 0.7777777777777778
User 36478 does not improve AUC. Reverting changes.
Training on augumented user 128077 48/50 current_auc = 0.7777777777777778
User 128077 AUC after training: 0.7777777777777778
User 128077 does not improve AUC. Reverting changes.
Training on augumented user 25181 49/50 current_auc = 0.7777777777777778
User 25181 AUC after training: 0.7777777777777778
User 25181 does not improve AUC. Reverting changes.
[2024-12-02 19:19:47.046493] start test user 31732 178/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:47.748703] start test user 31732 178/568 recall augumented users by random, augumented_users = [76150, 66189, 66425, 131477, 133440, 55799, 135316, 50528, 63542, 20763, 26197, 96459, 117094, 34919, 114038, 43279, 126730, 88284, 110573, 93264, 49245, 89183, 107829, 66354, 88564, 108151, 47256, 68827, 43793, 59319, 16288, 29063, 93989, 29694, 129915, 137377, 101981, 94580, 33139, 40776, 99040, 97986, 55316, 116405, 7672, 38222, 55819, 82435, 66063, 105862]
[2024-12-02 19:19:47.779055] user = 31732 Cloud 178/568
[2024-12-02 19:19:47.802498] user = 31732 Local 178/568
[2024-12-02 19:19:47.875932] user = 31732 Local+ 178/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:50.782387] user = 31732 MPDA- 178/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6595949855351977
Training on augumented user 76150 0/50 current_auc = 0.6595949855351977
User 76150 AUC after training: 0.660559305689489
User 76150 improves AUC. Keeping the model.
Training on augumented user 66189 1/50 current_auc = 0.660559305689489
User 66189 AUC after training: 0.660559305689489
User 66189 does not improve AUC. Reverting changes.
Training on augumented user 66425 2/50 current_auc = 0.660559305689489
User 66425 AUC after training: 0.6595949855351977
User 66425 does not improve AUC. Reverting changes.
Training on augumented user 131477 3/50 current_auc = 0.660559305689489
User 131477 AUC after training: 0.6634522661523626
User 131477 improves AUC. Keeping the model.
Training on augumented user 133440 4/50 current_auc = 0.6634522661523626
User 133440 AUC after training: 0.6634522661523626
User 133440 does not improve AUC. Reverting changes.
Training on augumented user 55799 5/50 current_auc = 0.6634522661523626
User 55799 AUC after training: 0.6624879459980714
User 55799 does not improve AUC. Reverting changes.
Training on augumented user 135316 6/50 current_auc = 0.6634522661523626
User 135316 AUC after training: 0.6634522661523626
User 135316 does not improve AUC. Reverting changes.
Training on augumented user 50528 7/50 current_auc = 0.6634522661523626
User 50528 AUC after training: 0.6634522661523626
User 50528 does not improve AUC. Reverting changes.
Training on augumented user 63542 8/50 current_auc = 0.6634522661523626
User 63542 AUC after training: 0.6634522661523626
User 63542 does not improve AUC. Reverting changes.
Training on augumented user 20763 9/50 current_auc = 0.6634522661523626
User 20763 AUC after training: 0.6634522661523626
User 20763 does not improve AUC. Reverting changes.
Training on augumented user 26197 10/50 current_auc = 0.6634522661523626
User 26197 AUC after training: 0.6624879459980714
User 26197 does not improve AUC. Reverting changes.
Training on augumented user 96459 11/50 current_auc = 0.6634522661523626
User 96459 AUC after training: 0.6634522661523626
User 96459 does not improve AUC. Reverting changes.
Training on augumented user 117094 12/50 current_auc = 0.6634522661523626
User 117094 AUC after training: 0.6663452266152363
User 117094 improves AUC. Keeping the model.
Training on augumented user 34919 13/50 current_auc = 0.6663452266152363
User 34919 AUC after training: 0.6634522661523626
User 34919 does not improve AUC. Reverting changes.
Training on augumented user 114038 14/50 current_auc = 0.6663452266152363
User 114038 AUC after training: 0.6644165863066538
User 114038 does not improve AUC. Reverting changes.
Training on augumented user 43279 15/50 current_auc = 0.6663452266152363
User 43279 AUC after training: 0.6644165863066538
User 43279 does not improve AUC. Reverting changes.
Training on augumented user 126730 16/50 current_auc = 0.6663452266152363
User 126730 AUC after training: 0.6682738669238187
User 126730 improves AUC. Keeping the model.
Training on augumented user 88284 17/50 current_auc = 0.6682738669238187
User 88284 AUC after training: 0.6673095467695275
User 88284 does not improve AUC. Reverting changes.
Training on augumented user 110573 18/50 current_auc = 0.6682738669238187
User 110573 AUC after training: 0.6673095467695275
User 110573 does not improve AUC. Reverting changes.
Training on augumented user 93264 19/50 current_auc = 0.6682738669238187
User 93264 AUC after training: 0.6673095467695275
User 93264 does not improve AUC. Reverting changes.
Training on augumented user 49245 20/50 current_auc = 0.6682738669238187
User 49245 AUC after training: 0.6673095467695276
User 49245 does not improve AUC. Reverting changes.
Training on augumented user 89183 21/50 current_auc = 0.6682738669238187
User 89183 AUC after training: 0.6682738669238187
User 89183 does not improve AUC. Reverting changes.
Training on augumented user 107829 22/50 current_auc = 0.6682738669238187
User 107829 AUC after training: 0.6673095467695275
User 107829 does not improve AUC. Reverting changes.
Training on augumented user 66354 23/50 current_auc = 0.6682738669238187
User 66354 AUC after training: 0.6663452266152363
User 66354 does not improve AUC. Reverting changes.
Training on augumented user 88564 24/50 current_auc = 0.6682738669238187
User 88564 AUC after training: 0.6673095467695276
User 88564 does not improve AUC. Reverting changes.
Training on augumented user 108151 25/50 current_auc = 0.6682738669238187
User 108151 AUC after training: 0.6663452266152363
User 108151 does not improve AUC. Reverting changes.
Training on augumented user 47256 26/50 current_auc = 0.6682738669238187
User 47256 AUC after training: 0.6682738669238187
User 47256 does not improve AUC. Reverting changes.
Training on augumented user 68827 27/50 current_auc = 0.6682738669238187
User 68827 AUC after training: 0.6673095467695276
User 68827 does not improve AUC. Reverting changes.
Training on augumented user 43793 28/50 current_auc = 0.6682738669238187
User 43793 AUC after training: 0.6682738669238187
User 43793 does not improve AUC. Reverting changes.
Training on augumented user 59319 29/50 current_auc = 0.6682738669238187
User 59319 AUC after training: 0.6644165863066539
User 59319 does not improve AUC. Reverting changes.
Training on augumented user 16288 30/50 current_auc = 0.6682738669238187
User 16288 AUC after training: 0.6673095467695276
User 16288 does not improve AUC. Reverting changes.
Training on augumented user 29063 31/50 current_auc = 0.6682738669238187
User 29063 AUC after training: 0.6644165863066538
User 29063 does not improve AUC. Reverting changes.
Training on augumented user 93989 32/50 current_auc = 0.6682738669238187
User 93989 AUC after training: 0.6663452266152363
User 93989 does not improve AUC. Reverting changes.
Training on augumented user 29694 33/50 current_auc = 0.6682738669238187
User 29694 AUC after training: 0.6673095467695276
User 29694 does not improve AUC. Reverting changes.
Training on augumented user 129915 34/50 current_auc = 0.6682738669238187
User 129915 AUC after training: 0.665380906460945
User 129915 does not improve AUC. Reverting changes.
Training on augumented user 137377 35/50 current_auc = 0.6682738669238187
User 137377 AUC after training: 0.6702025072324012
User 137377 improves AUC. Keeping the model.
Training on augumented user 101981 36/50 current_auc = 0.6702025072324012
User 101981 AUC after training: 0.6711668273866924
User 101981 improves AUC. Keeping the model.
Training on augumented user 94580 37/50 current_auc = 0.6711668273866924
User 94580 AUC after training: 0.6702025072324012
User 94580 does not improve AUC. Reverting changes.
Training on augumented user 33139 38/50 current_auc = 0.6711668273866924
User 33139 AUC after training: 0.6730954676952748
User 33139 improves AUC. Keeping the model.
Training on augumented user 40776 39/50 current_auc = 0.6730954676952748
User 40776 AUC after training: 0.6750241080038574
User 40776 improves AUC. Keeping the model.
Training on augumented user 99040 40/50 current_auc = 0.6750241080038574
User 99040 AUC after training: 0.6702025072324012
User 99040 does not improve AUC. Reverting changes.
Training on augumented user 97986 41/50 current_auc = 0.6750241080038574
User 97986 AUC after training: 0.6759884281581485
User 97986 improves AUC. Keeping the model.
Training on augumented user 55316 42/50 current_auc = 0.6759884281581485
User 55316 AUC after training: 0.6750241080038574
User 55316 does not improve AUC. Reverting changes.
Training on augumented user 116405 43/50 current_auc = 0.6759884281581485
User 116405 AUC after training: 0.6759884281581485
User 116405 does not improve AUC. Reverting changes.
Training on augumented user 7672 44/50 current_auc = 0.6759884281581485
User 7672 AUC after training: 0.6759884281581485
User 7672 does not improve AUC. Reverting changes.
Training on augumented user 38222 45/50 current_auc = 0.6759884281581485
User 38222 AUC after training: 0.6682738669238186
User 38222 does not improve AUC. Reverting changes.
Training on augumented user 55819 46/50 current_auc = 0.6759884281581485
User 55819 AUC after training: 0.6759884281581485
User 55819 does not improve AUC. Reverting changes.
Training on augumented user 82435 47/50 current_auc = 0.6759884281581485
User 82435 AUC after training: 0.6740597878495661
User 82435 does not improve AUC. Reverting changes.
Training on augumented user 66063 48/50 current_auc = 0.6759884281581485
User 66063 AUC after training: 0.6750241080038574
User 66063 does not improve AUC. Reverting changes.
Training on augumented user 105862 49/50 current_auc = 0.6759884281581485
User 105862 AUC after training: 0.6750241080038574
User 105862 does not improve AUC. Reverting changes.
[2024-12-02 19:20:20.389328] start test user 31865 179/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:21.212932] start test user 31865 179/568 recall augumented users by random, augumented_users = [65426, 81938, 38502, 25214, 95354, 117549, 3631, 124902, 50821, 46787, 121919, 58752, 59828, 120246, 47289, 77572, 3892, 16618, 58526, 95513, 85130, 118132, 28761, 940, 75890, 57669, 103329, 14625, 77185, 135562, 51075, 116306, 70467, 22750, 73243, 109904, 97826, 74312, 16414, 2274, 66709, 133798, 68844, 61400, 95375, 58029, 87931, 25533, 60337, 38263]
[2024-12-02 19:20:21.229795] user = 31865 Cloud 179/568
[2024-12-02 19:20:21.241117] user = 31865 Local 179/568
[2024-12-02 19:20:21.291809] user = 31865 Local+ 179/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:25.301995] user = 31865 MPDA- 179/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7
Training on augumented user 65426 0/50 current_auc = 0.7
User 65426 AUC after training: 0.7
User 65426 does not improve AUC. Reverting changes.
Training on augumented user 81938 1/50 current_auc = 0.7
User 81938 AUC after training: 0.7
User 81938 does not improve AUC. Reverting changes.
Training on augumented user 38502 2/50 current_auc = 0.7
User 38502 AUC after training: 0.7
User 38502 does not improve AUC. Reverting changes.
Training on augumented user 25214 3/50 current_auc = 0.7
User 25214 AUC after training: 0.6916666666666667
User 25214 does not improve AUC. Reverting changes.
Training on augumented user 95354 4/50 current_auc = 0.7
User 95354 AUC after training: 0.6916666666666667
User 95354 does not improve AUC. Reverting changes.
Training on augumented user 117549 5/50 current_auc = 0.7
User 117549 AUC after training: 0.7
User 117549 does not improve AUC. Reverting changes.
Training on augumented user 3631 6/50 current_auc = 0.7
User 3631 AUC after training: 0.6916666666666667
User 3631 does not improve AUC. Reverting changes.
Training on augumented user 124902 7/50 current_auc = 0.7
User 124902 AUC after training: 0.7
User 124902 does not improve AUC. Reverting changes.
Training on augumented user 50821 8/50 current_auc = 0.7
User 50821 AUC after training: 0.7083333333333334
User 50821 improves AUC. Keeping the model.
Training on augumented user 46787 9/50 current_auc = 0.7083333333333334
User 46787 AUC after training: 0.7
User 46787 does not improve AUC. Reverting changes.
Training on augumented user 121919 10/50 current_auc = 0.7083333333333334
User 121919 AUC after training: 0.7083333333333334
User 121919 does not improve AUC. Reverting changes.
Training on augumented user 58752 11/50 current_auc = 0.7083333333333334
User 58752 AUC after training: 0.7083333333333334
User 58752 does not improve AUC. Reverting changes.
Training on augumented user 59828 12/50 current_auc = 0.7083333333333334
User 59828 AUC after training: 0.7
User 59828 does not improve AUC. Reverting changes.
Training on augumented user 120246 13/50 current_auc = 0.7083333333333334
User 120246 AUC after training: 0.7
User 120246 does not improve AUC. Reverting changes.
Training on augumented user 47289 14/50 current_auc = 0.7083333333333334
User 47289 AUC after training: 0.7083333333333334
User 47289 does not improve AUC. Reverting changes.
Training on augumented user 77572 15/50 current_auc = 0.7083333333333334
User 77572 AUC after training: 0.7083333333333334
User 77572 does not improve AUC. Reverting changes.
Training on augumented user 3892 16/50 current_auc = 0.7083333333333334
User 3892 AUC after training: 0.7
User 3892 does not improve AUC. Reverting changes.
Training on augumented user 16618 17/50 current_auc = 0.7083333333333334
User 16618 AUC after training: 0.7
User 16618 does not improve AUC. Reverting changes.
Training on augumented user 58526 18/50 current_auc = 0.7083333333333334
User 58526 AUC after training: 0.6916666666666667
User 58526 does not improve AUC. Reverting changes.
Training on augumented user 95513 19/50 current_auc = 0.7083333333333334
User 95513 AUC after training: 0.7
User 95513 does not improve AUC. Reverting changes.
Training on augumented user 85130 20/50 current_auc = 0.7083333333333334
User 85130 AUC after training: 0.7083333333333334
User 85130 does not improve AUC. Reverting changes.
Training on augumented user 118132 21/50 current_auc = 0.7083333333333334
User 118132 AUC after training: 0.7
User 118132 does not improve AUC. Reverting changes.
Training on augumented user 28761 22/50 current_auc = 0.7083333333333334
User 28761 AUC after training: 0.7083333333333334
User 28761 does not improve AUC. Reverting changes.
Training on augumented user 940 23/50 current_auc = 0.7083333333333334
User 940 AUC after training: 0.7
User 940 does not improve AUC. Reverting changes.
Training on augumented user 75890 24/50 current_auc = 0.7083333333333334
User 75890 AUC after training: 0.6916666666666667
User 75890 does not improve AUC. Reverting changes.
Training on augumented user 57669 25/50 current_auc = 0.7083333333333334
User 57669 AUC after training: 0.7083333333333334
User 57669 does not improve AUC. Reverting changes.
Training on augumented user 103329 26/50 current_auc = 0.7083333333333334
User 103329 AUC after training: 0.6916666666666667
User 103329 does not improve AUC. Reverting changes.
Training on augumented user 14625 27/50 current_auc = 0.7083333333333334
User 14625 AUC after training: 0.7
User 14625 does not improve AUC. Reverting changes.
Training on augumented user 77185 28/50 current_auc = 0.7083333333333334
User 77185 AUC after training: 0.7083333333333334
User 77185 does not improve AUC. Reverting changes.
Training on augumented user 135562 29/50 current_auc = 0.7083333333333334
User 135562 AUC after training: 0.6916666666666667
User 135562 does not improve AUC. Reverting changes.
Training on augumented user 51075 30/50 current_auc = 0.7083333333333334
User 51075 AUC after training: 0.7
User 51075 does not improve AUC. Reverting changes.
Training on augumented user 116306 31/50 current_auc = 0.7083333333333334
User 116306 AUC after training: 0.7083333333333334
User 116306 does not improve AUC. Reverting changes.
Training on augumented user 70467 32/50 current_auc = 0.7083333333333334
User 70467 AUC after training: 0.7083333333333334
User 70467 does not improve AUC. Reverting changes.
Training on augumented user 22750 33/50 current_auc = 0.7083333333333334
User 22750 AUC after training: 0.7083333333333334
User 22750 does not improve AUC. Reverting changes.
Training on augumented user 73243 34/50 current_auc = 0.7083333333333334
User 73243 AUC after training: 0.7
User 73243 does not improve AUC. Reverting changes.
Training on augumented user 109904 35/50 current_auc = 0.7083333333333334
User 109904 AUC after training: 0.7
User 109904 does not improve AUC. Reverting changes.
Training on augumented user 97826 36/50 current_auc = 0.7083333333333334
User 97826 AUC after training: 0.7
User 97826 does not improve AUC. Reverting changes.
Training on augumented user 74312 37/50 current_auc = 0.7083333333333334
User 74312 AUC after training: 0.7083333333333334
User 74312 does not improve AUC. Reverting changes.
Training on augumented user 16414 38/50 current_auc = 0.7083333333333334
User 16414 AUC after training: 0.7
User 16414 does not improve AUC. Reverting changes.
Training on augumented user 2274 39/50 current_auc = 0.7083333333333334
User 2274 AUC after training: 0.6916666666666667
User 2274 does not improve AUC. Reverting changes.
Training on augumented user 66709 40/50 current_auc = 0.7083333333333334
User 66709 AUC after training: 0.7
User 66709 does not improve AUC. Reverting changes.
Training on augumented user 133798 41/50 current_auc = 0.7083333333333334
User 133798 AUC after training: 0.7
User 133798 does not improve AUC. Reverting changes.
Training on augumented user 68844 42/50 current_auc = 0.7083333333333334
User 68844 AUC after training: 0.7
User 68844 does not improve AUC. Reverting changes.
Training on augumented user 61400 43/50 current_auc = 0.7083333333333334
User 61400 AUC after training: 0.6916666666666667
User 61400 does not improve AUC. Reverting changes.
Training on augumented user 95375 44/50 current_auc = 0.7083333333333334
User 95375 AUC after training: 0.7
User 95375 does not improve AUC. Reverting changes.
Training on augumented user 58029 45/50 current_auc = 0.7083333333333334
User 58029 AUC after training: 0.7
User 58029 does not improve AUC. Reverting changes.
Training on augumented user 87931 46/50 current_auc = 0.7083333333333334
User 87931 AUC after training: 0.7
User 87931 does not improve AUC. Reverting changes.
Training on augumented user 25533 47/50 current_auc = 0.7083333333333334
User 25533 AUC after training: 0.7
User 25533 does not improve AUC. Reverting changes.
Training on augumented user 60337 48/50 current_auc = 0.7083333333333334
User 60337 AUC after training: 0.7
User 60337 does not improve AUC. Reverting changes.
Training on augumented user 38263 49/50 current_auc = 0.7083333333333334
User 38263 AUC after training: 0.7083333333333334
User 38263 does not improve AUC. Reverting changes.
[2024-12-02 19:20:54.187983] start test user 31887 180/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:54.857642] start test user 31887 180/568 recall augumented users by random, augumented_users = [118671, 71697, 46065, 69250, 87565, 91296, 68407, 9795, 118494, 85140, 120843, 33711, 137079, 113480, 70809, 80444, 13860, 47949, 127740, 137139, 41992, 63153, 61492, 21100, 100551, 122259, 66507, 66179, 15531, 83058, 43660, 80932, 36106, 53171, 41359, 134956, 107329, 74485, 120399, 114849, 50902, 100570, 7703, 78019, 76745, 94810, 41657, 18117, 40978, 6636]
[2024-12-02 19:20:54.873442] user = 31887 Cloud 180/568
[2024-12-02 19:20:54.894117] user = 31887 Local 180/568
[2024-12-02 19:20:55.140503] user = 31887 Local+ 180/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:58.436145] user = 31887 MPDA- 180/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5615770042194094
Training on augumented user 118671 0/50 current_auc = 0.5615770042194094
User 118671 AUC after training: 0.5611814345991561
User 118671 does not improve AUC. Reverting changes.
Training on augumented user 71697 1/50 current_auc = 0.5615770042194094
User 71697 AUC after training: 0.560785864978903
User 71697 does not improve AUC. Reverting changes.
Training on augumented user 46065 2/50 current_auc = 0.5615770042194094
User 46065 AUC after training: 0.5617088607594938
User 46065 improves AUC. Keeping the model.
Training on augumented user 69250 3/50 current_auc = 0.5617088607594938
User 69250 AUC after training: 0.5602584388185654
User 69250 does not improve AUC. Reverting changes.
Training on augumented user 87565 4/50 current_auc = 0.5617088607594938
User 87565 AUC after training: 0.5614451476793251
User 87565 does not improve AUC. Reverting changes.
Training on augumented user 91296 5/50 current_auc = 0.5617088607594938
User 91296 AUC after training: 0.5609177215189874
User 91296 does not improve AUC. Reverting changes.
Training on augumented user 68407 6/50 current_auc = 0.5617088607594938
User 68407 AUC after training: 0.561445147679325
User 68407 does not improve AUC. Reverting changes.
Training on augumented user 9795 7/50 current_auc = 0.5617088607594938
User 9795 AUC after training: 0.5613132911392406
User 9795 does not improve AUC. Reverting changes.
Training on augumented user 118494 8/50 current_auc = 0.5617088607594938
User 118494 AUC after training: 0.5622362869198313
User 118494 improves AUC. Keeping the model.
Training on augumented user 85140 9/50 current_auc = 0.5622362869198313
User 85140 AUC after training: 0.5602584388185654
User 85140 does not improve AUC. Reverting changes.
Training on augumented user 120843 10/50 current_auc = 0.5622362869198313
User 120843 AUC after training: 0.5615770042194093
User 120843 does not improve AUC. Reverting changes.
Training on augumented user 33711 11/50 current_auc = 0.5622362869198313
User 33711 AUC after training: 0.5622362869198313
User 33711 does not improve AUC. Reverting changes.
Training on augumented user 137079 12/50 current_auc = 0.5622362869198313
User 137079 AUC after training: 0.5619725738396625
User 137079 does not improve AUC. Reverting changes.
Training on augumented user 113480 13/50 current_auc = 0.5622362869198313
User 113480 AUC after training: 0.5613132911392406
User 113480 does not improve AUC. Reverting changes.
Training on augumented user 70809 14/50 current_auc = 0.5622362869198313
User 70809 AUC after training: 0.5618407172995782
User 70809 does not improve AUC. Reverting changes.
Training on augumented user 80444 15/50 current_auc = 0.5622362869198313
User 80444 AUC after training: 0.5601265822784811
User 80444 does not improve AUC. Reverting changes.
Training on augumented user 13860 16/50 current_auc = 0.5622362869198313
User 13860 AUC after training: 0.5623681434599157
User 13860 improves AUC. Keeping the model.
Training on augumented user 47949 17/50 current_auc = 0.5623681434599157
User 47949 AUC after training: 0.5619725738396625
User 47949 does not improve AUC. Reverting changes.
Training on augumented user 127740 18/50 current_auc = 0.5623681434599157
User 127740 AUC after training: 0.5615770042194093
User 127740 does not improve AUC. Reverting changes.
Training on augumented user 137139 19/50 current_auc = 0.5623681434599157
User 137139 AUC after training: 0.5615770042194094
User 137139 does not improve AUC. Reverting changes.
Training on augumented user 41992 20/50 current_auc = 0.5623681434599157
User 41992 AUC after training: 0.5625
User 41992 improves AUC. Keeping the model.
Training on augumented user 63153 21/50 current_auc = 0.5625
User 63153 AUC after training: 0.5618407172995781
User 63153 does not improve AUC. Reverting changes.
Training on augumented user 61492 22/50 current_auc = 0.5625
User 61492 AUC after training: 0.5618407172995781
User 61492 does not improve AUC. Reverting changes.
Training on augumented user 21100 23/50 current_auc = 0.5625
User 21100 AUC after training: 0.5619725738396626
User 21100 does not improve AUC. Reverting changes.
Training on augumented user 100551 24/50 current_auc = 0.5625
User 100551 AUC after training: 0.5621044303797468
User 100551 does not improve AUC. Reverting changes.
Training on augumented user 122259 25/50 current_auc = 0.5625
User 122259 AUC after training: 0.5627637130801688
User 122259 improves AUC. Keeping the model.
Training on augumented user 66507 26/50 current_auc = 0.5627637130801688
User 66507 AUC after training: 0.5610495780590717
User 66507 does not improve AUC. Reverting changes.
Training on augumented user 66179 27/50 current_auc = 0.5627637130801688
User 66179 AUC after training: 0.5597310126582279
User 66179 does not improve AUC. Reverting changes.
Training on augumented user 15531 28/50 current_auc = 0.5627637130801688
User 15531 AUC after training: 0.5623681434599157
User 15531 does not improve AUC. Reverting changes.
Training on augumented user 83058 29/50 current_auc = 0.5627637130801688
User 83058 AUC after training: 0.5619725738396625
User 83058 does not improve AUC. Reverting changes.
Training on augumented user 43660 30/50 current_auc = 0.5627637130801688
User 43660 AUC after training: 0.561445147679325
User 43660 does not improve AUC. Reverting changes.
Training on augumented user 80932 31/50 current_auc = 0.5627637130801688
User 80932 AUC after training: 0.5597310126582279
User 80932 does not improve AUC. Reverting changes.
Training on augumented user 36106 32/50 current_auc = 0.5627637130801688
User 36106 AUC after training: 0.5621044303797469
User 36106 does not improve AUC. Reverting changes.
Training on augumented user 53171 33/50 current_auc = 0.5627637130801688
User 53171 AUC after training: 0.5618407172995781
User 53171 does not improve AUC. Reverting changes.
Training on augumented user 41359 34/50 current_auc = 0.5627637130801688
User 41359 AUC after training: 0.5609177215189873
User 41359 does not improve AUC. Reverting changes.
Training on augumented user 134956 35/50 current_auc = 0.5627637130801688
User 134956 AUC after training: 0.5619725738396625
User 134956 does not improve AUC. Reverting changes.
Training on augumented user 107329 36/50 current_auc = 0.5627637130801688
User 107329 AUC after training: 0.5613132911392406
User 107329 does not improve AUC. Reverting changes.
Training on augumented user 74485 37/50 current_auc = 0.5627637130801688
User 74485 AUC after training: 0.5611814345991561
User 74485 does not improve AUC. Reverting changes.
Training on augumented user 120399 38/50 current_auc = 0.5627637130801688
User 120399 AUC after training: 0.5618407172995781
User 120399 does not improve AUC. Reverting changes.
Training on augumented user 114849 39/50 current_auc = 0.5627637130801688
User 114849 AUC after training: 0.5617088607594937
User 114849 does not improve AUC. Reverting changes.
Training on augumented user 50902 40/50 current_auc = 0.5627637130801688
User 50902 AUC after training: 0.5617088607594937
User 50902 does not improve AUC. Reverting changes.
Training on augumented user 100570 41/50 current_auc = 0.5627637130801688
User 100570 AUC after training: 0.5626318565400844
User 100570 does not improve AUC. Reverting changes.
Training on augumented user 7703 42/50 current_auc = 0.5627637130801688
User 7703 AUC after training: 0.5611814345991561
User 7703 does not improve AUC. Reverting changes.
Training on augumented user 78019 43/50 current_auc = 0.5627637130801688
User 78019 AUC after training: 0.5622362869198313
User 78019 does not improve AUC. Reverting changes.
Training on augumented user 76745 44/50 current_auc = 0.5627637130801688
User 76745 AUC after training: 0.5613132911392406
User 76745 does not improve AUC. Reverting changes.
Training on augumented user 94810 45/50 current_auc = 0.5627637130801688
User 94810 AUC after training: 0.5618407172995782
User 94810 does not improve AUC. Reverting changes.
Training on augumented user 41657 46/50 current_auc = 0.5627637130801688
User 41657 AUC after training: 0.5615770042194093
User 41657 does not improve AUC. Reverting changes.
Training on augumented user 18117 47/50 current_auc = 0.5627637130801688
User 18117 AUC after training: 0.5609177215189873
User 18117 does not improve AUC. Reverting changes.
Training on augumented user 40978 48/50 current_auc = 0.5627637130801688
User 40978 AUC after training: 0.5623681434599157
User 40978 does not improve AUC. Reverting changes.
Training on augumented user 6636 49/50 current_auc = 0.5627637130801688
User 6636 AUC after training: 0.5618407172995782
User 6636 does not improve AUC. Reverting changes.
[2024-12-02 19:21:30.676008] start test user 31891 181/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:31.318387] start test user 31891 181/568 recall augumented users by random, augumented_users = [38611, 121124, 116284, 12794, 92356, 76501, 69180, 70981, 119922, 82822, 123762, 29688, 69641, 119831, 10039, 119709, 96978, 87652, 17235, 81136, 94248, 20356, 84673, 106176, 18533, 27146, 75217, 65914, 113136, 57266, 119731, 30055, 50881, 54622, 87453, 27884, 43601, 122894, 98103, 48177, 24943, 48092, 116179, 2142, 15410, 65015, 636, 119918, 41066, 69998]
[2024-12-02 19:21:31.334548] user = 31891 Cloud 181/568
[2024-12-02 19:21:31.353639] user = 31891 Local 181/568
[2024-12-02 19:21:31.425876] user = 31891 Local+ 181/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:33.218399] user = 31891 MPDA- 181/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6254674145299146
Training on augumented user 38611 0/50 current_auc = 0.6254674145299146
User 38611 AUC after training: 0.625400641025641
User 38611 does not improve AUC. Reverting changes.
Training on augumented user 121124 1/50 current_auc = 0.6254674145299146
User 121124 AUC after training: 0.6239316239316239
User 121124 does not improve AUC. Reverting changes.
Training on augumented user 116284 2/50 current_auc = 0.6254674145299146
User 116284 AUC after training: 0.6243322649572649
User 116284 does not improve AUC. Reverting changes.
Training on augumented user 12794 3/50 current_auc = 0.6254674145299146
User 12794 AUC after training: 0.6248664529914529
User 12794 does not improve AUC. Reverting changes.
Training on augumented user 92356 4/50 current_auc = 0.6254674145299146
User 92356 AUC after training: 0.625
User 92356 does not improve AUC. Reverting changes.
Training on augumented user 76501 5/50 current_auc = 0.6254674145299146
User 76501 AUC after training: 0.6256677350427351
User 76501 improves AUC. Keeping the model.
Training on augumented user 69180 6/50 current_auc = 0.6256677350427351
User 69180 AUC after training: 0.624599358974359
User 69180 does not improve AUC. Reverting changes.
Training on augumented user 70981 7/50 current_auc = 0.6256677350427351
User 70981 AUC after training: 0.6256677350427351
User 70981 does not improve AUC. Reverting changes.
Training on augumented user 119922 8/50 current_auc = 0.6256677350427351
User 119922 AUC after training: 0.6256677350427351
User 119922 does not improve AUC. Reverting changes.
Training on augumented user 82822 9/50 current_auc = 0.6256677350427351
User 82822 AUC after training: 0.6252670940170939
User 82822 does not improve AUC. Reverting changes.
Training on augumented user 123762 10/50 current_auc = 0.6256677350427351
User 123762 AUC after training: 0.6256677350427351
User 123762 does not improve AUC. Reverting changes.
Training on augumented user 29688 11/50 current_auc = 0.6256677350427351
User 29688 AUC after training: 0.6262019230769231
User 29688 improves AUC. Keeping the model.
Training on augumented user 69641 12/50 current_auc = 0.6262019230769231
User 69641 AUC after training: 0.625
User 69641 does not improve AUC. Reverting changes.
Training on augumented user 119831 13/50 current_auc = 0.6262019230769231
User 119831 AUC after training: 0.6260683760683761
User 119831 does not improve AUC. Reverting changes.
Training on augumented user 10039 14/50 current_auc = 0.6262019230769231
User 10039 AUC after training: 0.625534188034188
User 10039 does not improve AUC. Reverting changes.
Training on augumented user 119709 15/50 current_auc = 0.6262019230769231
User 119709 AUC after training: 0.6257345085470085
User 119709 does not improve AUC. Reverting changes.
Training on augumented user 96978 16/50 current_auc = 0.6262019230769231
User 96978 AUC after training: 0.6267361111111112
User 96978 improves AUC. Keeping the model.
Training on augumented user 87652 17/50 current_auc = 0.6267361111111112
User 87652 AUC after training: 0.6260683760683761
User 87652 does not improve AUC. Reverting changes.
Training on augumented user 17235 18/50 current_auc = 0.6267361111111112
User 17235 AUC after training: 0.6251335470085471
User 17235 does not improve AUC. Reverting changes.
Training on augumented user 81136 19/50 current_auc = 0.6267361111111112
User 81136 AUC after training: 0.625400641025641
User 81136 does not improve AUC. Reverting changes.
Training on augumented user 94248 20/50 current_auc = 0.6267361111111112
User 94248 AUC after training: 0.6270032051282051
User 94248 improves AUC. Keeping the model.
Training on augumented user 20356 21/50 current_auc = 0.6270032051282051
User 20356 AUC after training: 0.6272702991452992
User 20356 improves AUC. Keeping the model.
Training on augumented user 84673 22/50 current_auc = 0.6272702991452992
User 84673 AUC after training: 0.6270032051282051
User 84673 does not improve AUC. Reverting changes.
Training on augumented user 106176 23/50 current_auc = 0.6272702991452992
User 106176 AUC after training: 0.6270032051282053
User 106176 does not improve AUC. Reverting changes.
Training on augumented user 18533 24/50 current_auc = 0.6272702991452992
User 18533 AUC after training: 0.6266025641025641
User 18533 does not improve AUC. Reverting changes.
Training on augumented user 27146 25/50 current_auc = 0.6272702991452992
User 27146 AUC after training: 0.626469017094017
User 27146 does not improve AUC. Reverting changes.
Training on augumented user 75217 26/50 current_auc = 0.6272702991452992
User 75217 AUC after training: 0.6277377136752137
User 75217 improves AUC. Keeping the model.
Training on augumented user 65914 27/50 current_auc = 0.6277377136752137
User 65914 AUC after training: 0.6275373931623931
User 65914 does not improve AUC. Reverting changes.
Training on augumented user 113136 28/50 current_auc = 0.6277377136752137
User 113136 AUC after training: 0.6270032051282051
User 113136 does not improve AUC. Reverting changes.
Training on augumented user 57266 29/50 current_auc = 0.6277377136752137
User 57266 AUC after training: 0.6280715811965811
User 57266 improves AUC. Keeping the model.
Training on augumented user 119731 30/50 current_auc = 0.6280715811965811
User 119731 AUC after training: 0.6282051282051282
User 119731 improves AUC. Keeping the model.
Training on augumented user 30055 31/50 current_auc = 0.6282051282051282
User 30055 AUC after training: 0.6279380341880343
User 30055 does not improve AUC. Reverting changes.
Training on augumented user 50881 32/50 current_auc = 0.6282051282051282
User 50881 AUC after training: 0.6284722222222221
User 50881 improves AUC. Keeping the model.
Training on augumented user 54622 33/50 current_auc = 0.6284722222222221
User 54622 AUC after training: 0.6280048076923077
User 54622 does not improve AUC. Reverting changes.
Training on augumented user 87453 34/50 current_auc = 0.6284722222222221
User 87453 AUC after training: 0.6278712606837606
User 87453 does not improve AUC. Reverting changes.
Training on augumented user 27884 35/50 current_auc = 0.6284722222222221
User 27884 AUC after training: 0.6280715811965811
User 27884 does not improve AUC. Reverting changes.
Training on augumented user 43601 36/50 current_auc = 0.6284722222222221
User 43601 AUC after training: 0.6276709401709402
User 43601 does not improve AUC. Reverting changes.
Training on augumented user 122894 37/50 current_auc = 0.6284722222222221
User 122894 AUC after training: 0.6269364316239316
User 122894 does not improve AUC. Reverting changes.
Training on augumented user 98103 38/50 current_auc = 0.6284722222222221
User 98103 AUC after training: 0.6284054487179487
User 98103 does not improve AUC. Reverting changes.
Training on augumented user 48177 39/50 current_auc = 0.6284722222222221
User 48177 AUC after training: 0.6286725427350428
User 48177 improves AUC. Keeping the model.
Training on augumented user 24943 40/50 current_auc = 0.6286725427350428
User 24943 AUC after training: 0.6285389957264957
User 24943 does not improve AUC. Reverting changes.
Training on augumented user 48092 41/50 current_auc = 0.6286725427350428
User 48092 AUC after training: 0.6265357905982907
User 48092 does not improve AUC. Reverting changes.
Training on augumented user 116179 42/50 current_auc = 0.6286725427350428
User 116179 AUC after training: 0.6273370726495726
User 116179 does not improve AUC. Reverting changes.
Training on augumented user 2142 43/50 current_auc = 0.6286725427350428
User 2142 AUC after training: 0.6284054487179487
User 2142 does not improve AUC. Reverting changes.
Training on augumented user 15410 44/50 current_auc = 0.6286725427350428
User 15410 AUC after training: 0.6280715811965811
User 15410 does not improve AUC. Reverting changes.
Training on augumented user 65015 45/50 current_auc = 0.6286725427350428
User 65015 AUC after training: 0.6283386752136753
User 65015 does not improve AUC. Reverting changes.
Training on augumented user 636 46/50 current_auc = 0.6286725427350428
User 636 AUC after training: 0.6275373931623931
User 636 does not improve AUC. Reverting changes.
Training on augumented user 119918 47/50 current_auc = 0.6286725427350428
User 119918 AUC after training: 0.6284722222222223
User 119918 does not improve AUC. Reverting changes.
Training on augumented user 41066 48/50 current_auc = 0.6286725427350428
User 41066 AUC after training: 0.626469017094017
User 41066 does not improve AUC. Reverting changes.
Training on augumented user 69998 49/50 current_auc = 0.6286725427350428
User 69998 AUC after training: 0.6280048076923077
User 69998 does not improve AUC. Reverting changes.
[2024-12-02 19:22:02.834462] start test user 31896 182/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:03.310658] start test user 31896 182/568 recall augumented users by random, augumented_users = [11343, 86023, 37002, 28142, 101948, 9648, 136050, 1051, 20874, 47233, 81017, 137775, 39338, 50859, 14136, 103755, 48334, 15887, 127293, 122077, 40370, 30534, 113750, 59448, 116464, 121945, 83775, 34360, 86202, 6446, 70564, 123424, 48175, 64678, 69477, 124056, 27055, 134059, 691, 126174, 82299, 69153, 9307, 4629, 37057, 92946, 28942, 39791, 134606, 130823]
[2024-12-02 19:22:03.357808] user = 31896 Cloud 182/568
[2024-12-02 19:22:03.375546] user = 31896 Local 182/568
[2024-12-02 19:22:03.426496] user = 31896 Local+ 182/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:05.562445] user = 31896 MPDA- 182/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5960784313725491
Training on augumented user 11343 0/50 current_auc = 0.5960784313725491
User 11343 AUC after training: 0.596078431372549
User 11343 does not improve AUC. Reverting changes.
Training on augumented user 86023 1/50 current_auc = 0.5960784313725491
User 86023 AUC after training: 0.5960784313725491
User 86023 does not improve AUC. Reverting changes.
Training on augumented user 37002 2/50 current_auc = 0.5960784313725491
User 37002 AUC after training: 0.5960784313725491
User 37002 does not improve AUC. Reverting changes.
Training on augumented user 28142 3/50 current_auc = 0.5960784313725491
User 28142 AUC after training: 0.596078431372549
User 28142 does not improve AUC. Reverting changes.
Training on augumented user 101948 4/50 current_auc = 0.5960784313725491
User 101948 AUC after training: 0.607843137254902
User 101948 improves AUC. Keeping the model.
Training on augumented user 9648 5/50 current_auc = 0.607843137254902
User 9648 AUC after training: 0.6000000000000001
User 9648 does not improve AUC. Reverting changes.
Training on augumented user 136050 6/50 current_auc = 0.607843137254902
User 136050 AUC after training: 0.603921568627451
User 136050 does not improve AUC. Reverting changes.
Training on augumented user 1051 7/50 current_auc = 0.607843137254902
User 1051 AUC after training: 0.603921568627451
User 1051 does not improve AUC. Reverting changes.
Training on augumented user 20874 8/50 current_auc = 0.607843137254902
User 20874 AUC after training: 0.603921568627451
User 20874 does not improve AUC. Reverting changes.
Training on augumented user 47233 9/50 current_auc = 0.607843137254902
User 47233 AUC after training: 0.603921568627451
User 47233 does not improve AUC. Reverting changes.
Training on augumented user 81017 10/50 current_auc = 0.607843137254902
User 81017 AUC after training: 0.603921568627451
User 81017 does not improve AUC. Reverting changes.
Training on augumented user 137775 11/50 current_auc = 0.607843137254902
User 137775 AUC after training: 0.6
User 137775 does not improve AUC. Reverting changes.
Training on augumented user 39338 12/50 current_auc = 0.607843137254902
User 39338 AUC after training: 0.603921568627451
User 39338 does not improve AUC. Reverting changes.
Training on augumented user 50859 13/50 current_auc = 0.607843137254902
User 50859 AUC after training: 0.603921568627451
User 50859 does not improve AUC. Reverting changes.
Training on augumented user 14136 14/50 current_auc = 0.607843137254902
User 14136 AUC after training: 0.603921568627451
User 14136 does not improve AUC. Reverting changes.
Training on augumented user 103755 15/50 current_auc = 0.607843137254902
User 103755 AUC after training: 0.5960784313725491
User 103755 does not improve AUC. Reverting changes.
Training on augumented user 48334 16/50 current_auc = 0.607843137254902
User 48334 AUC after training: 0.6000000000000001
User 48334 does not improve AUC. Reverting changes.
Training on augumented user 15887 17/50 current_auc = 0.607843137254902
User 15887 AUC after training: 0.603921568627451
User 15887 does not improve AUC. Reverting changes.
Training on augumented user 127293 18/50 current_auc = 0.607843137254902
User 127293 AUC after training: 0.603921568627451
User 127293 does not improve AUC. Reverting changes.
Training on augumented user 122077 19/50 current_auc = 0.607843137254902
User 122077 AUC after training: 0.6000000000000001
User 122077 does not improve AUC. Reverting changes.
Training on augumented user 40370 20/50 current_auc = 0.607843137254902
User 40370 AUC after training: 0.603921568627451
User 40370 does not improve AUC. Reverting changes.
Training on augumented user 30534 21/50 current_auc = 0.607843137254902
User 30534 AUC after training: 0.603921568627451
User 30534 does not improve AUC. Reverting changes.
Training on augumented user 113750 22/50 current_auc = 0.607843137254902
User 113750 AUC after training: 0.6
User 113750 does not improve AUC. Reverting changes.
Training on augumented user 59448 23/50 current_auc = 0.607843137254902
User 59448 AUC after training: 0.603921568627451
User 59448 does not improve AUC. Reverting changes.
Training on augumented user 116464 24/50 current_auc = 0.607843137254902
User 116464 AUC after training: 0.603921568627451
User 116464 does not improve AUC. Reverting changes.
Training on augumented user 121945 25/50 current_auc = 0.607843137254902
User 121945 AUC after training: 0.603921568627451
User 121945 does not improve AUC. Reverting changes.
Training on augumented user 83775 26/50 current_auc = 0.607843137254902
User 83775 AUC after training: 0.607843137254902
User 83775 does not improve AUC. Reverting changes.
Training on augumented user 34360 27/50 current_auc = 0.607843137254902
User 34360 AUC after training: 0.603921568627451
User 34360 does not improve AUC. Reverting changes.
Training on augumented user 86202 28/50 current_auc = 0.607843137254902
User 86202 AUC after training: 0.607843137254902
User 86202 does not improve AUC. Reverting changes.
Training on augumented user 6446 29/50 current_auc = 0.607843137254902
User 6446 AUC after training: 0.6039215686274509
User 6446 does not improve AUC. Reverting changes.
Training on augumented user 70564 30/50 current_auc = 0.607843137254902
User 70564 AUC after training: 0.6
User 70564 does not improve AUC. Reverting changes.
Training on augumented user 123424 31/50 current_auc = 0.607843137254902
User 123424 AUC after training: 0.5960784313725491
User 123424 does not improve AUC. Reverting changes.
Training on augumented user 48175 32/50 current_auc = 0.607843137254902
User 48175 AUC after training: 0.6000000000000001
User 48175 does not improve AUC. Reverting changes.
Training on augumented user 64678 33/50 current_auc = 0.607843137254902
User 64678 AUC after training: 0.607843137254902
User 64678 does not improve AUC. Reverting changes.
Training on augumented user 69477 34/50 current_auc = 0.607843137254902
User 69477 AUC after training: 0.6039215686274509
User 69477 does not improve AUC. Reverting changes.
Training on augumented user 124056 35/50 current_auc = 0.607843137254902
User 124056 AUC after training: 0.6039215686274509
User 124056 does not improve AUC. Reverting changes.
Training on augumented user 27055 36/50 current_auc = 0.607843137254902
User 27055 AUC after training: 0.596078431372549
User 27055 does not improve AUC. Reverting changes.
Training on augumented user 134059 37/50 current_auc = 0.607843137254902
User 134059 AUC after training: 0.603921568627451
User 134059 does not improve AUC. Reverting changes.
Training on augumented user 691 38/50 current_auc = 0.607843137254902
User 691 AUC after training: 0.603921568627451
User 691 does not improve AUC. Reverting changes.
Training on augumented user 126174 39/50 current_auc = 0.607843137254902
User 126174 AUC after training: 0.603921568627451
User 126174 does not improve AUC. Reverting changes.
Training on augumented user 82299 40/50 current_auc = 0.607843137254902
User 82299 AUC after training: 0.603921568627451
User 82299 does not improve AUC. Reverting changes.
Training on augumented user 69153 41/50 current_auc = 0.607843137254902
User 69153 AUC after training: 0.6000000000000001
User 69153 does not improve AUC. Reverting changes.
Training on augumented user 9307 42/50 current_auc = 0.607843137254902
User 9307 AUC after training: 0.611764705882353
User 9307 improves AUC. Keeping the model.
Training on augumented user 4629 43/50 current_auc = 0.611764705882353
User 4629 AUC after training: 0.6000000000000001
User 4629 does not improve AUC. Reverting changes.
Training on augumented user 37057 44/50 current_auc = 0.611764705882353
User 37057 AUC after training: 0.6000000000000001
User 37057 does not improve AUC. Reverting changes.
Training on augumented user 92946 45/50 current_auc = 0.611764705882353
User 92946 AUC after training: 0.603921568627451
User 92946 does not improve AUC. Reverting changes.
Training on augumented user 28942 46/50 current_auc = 0.611764705882353
User 28942 AUC after training: 0.607843137254902
User 28942 does not improve AUC. Reverting changes.
Training on augumented user 39791 47/50 current_auc = 0.611764705882353
User 39791 AUC after training: 0.5960784313725491
User 39791 does not improve AUC. Reverting changes.
Training on augumented user 134606 48/50 current_auc = 0.611764705882353
User 134606 AUC after training: 0.611764705882353
User 134606 does not improve AUC. Reverting changes.
Training on augumented user 130823 49/50 current_auc = 0.611764705882353
User 130823 AUC after training: 0.611764705882353
User 130823 does not improve AUC. Reverting changes.
[2024-12-02 19:22:30.615360] start test user 31903 183/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:31.019350] start test user 31903 183/568 recall augumented users by random, augumented_users = [55686, 83518, 35739, 106591, 132459, 77866, 42746, 121059, 8978, 49795, 103329, 43716, 18159, 87544, 59660, 40506, 38504, 89301, 61131, 78636, 138466, 33821, 106773, 34904, 135509, 48763, 73332, 64797, 68765, 46044, 55488, 71731, 85673, 30668, 60494, 18059, 60271, 98020, 59757, 59194, 25569, 22309, 101880, 56931, 114558, 6482, 24660, 113419, 83804, 86125]
[2024-12-02 19:22:31.034772] user = 31903 Cloud 183/568
[2024-12-02 19:22:31.055553] user = 31903 Local 183/568
[2024-12-02 19:22:31.134299] user = 31903 Local+ 183/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:33.020964] user = 31903 MPDA- 183/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5150568181818183
Training on augumented user 55686 0/50 current_auc = 0.5150568181818183
User 55686 AUC after training: 0.5167613636363636
User 55686 improves AUC. Keeping the model.
Training on augumented user 83518 1/50 current_auc = 0.5167613636363636
User 83518 AUC after training: 0.5170454545454546
User 83518 improves AUC. Keeping the model.
Training on augumented user 35739 2/50 current_auc = 0.5170454545454546
User 35739 AUC after training: 0.5181818181818182
User 35739 improves AUC. Keeping the model.
Training on augumented user 106591 3/50 current_auc = 0.5181818181818182
User 106591 AUC after training: 0.5170454545454546
User 106591 does not improve AUC. Reverting changes.
Training on augumented user 132459 4/50 current_auc = 0.5181818181818182
User 132459 AUC after training: 0.5181818181818182
User 132459 does not improve AUC. Reverting changes.
Training on augumented user 77866 5/50 current_auc = 0.5181818181818182
User 77866 AUC after training: 0.5198863636363635
User 77866 improves AUC. Keeping the model.
Training on augumented user 42746 6/50 current_auc = 0.5198863636363635
User 42746 AUC after training: 0.5167613636363636
User 42746 does not improve AUC. Reverting changes.
Training on augumented user 121059 7/50 current_auc = 0.5198863636363635
User 121059 AUC after training: 0.5170454545454546
User 121059 does not improve AUC. Reverting changes.
Training on augumented user 8978 8/50 current_auc = 0.5198863636363635
User 8978 AUC after training: 0.5193181818181818
User 8978 does not improve AUC. Reverting changes.
Training on augumented user 49795 9/50 current_auc = 0.5198863636363635
User 49795 AUC after training: 0.5176136363636363
User 49795 does not improve AUC. Reverting changes.
Training on augumented user 103329 10/50 current_auc = 0.5198863636363635
User 103329 AUC after training: 0.5173295454545455
User 103329 does not improve AUC. Reverting changes.
Training on augumented user 43716 11/50 current_auc = 0.5198863636363635
User 43716 AUC after training: 0.5193181818181818
User 43716 does not improve AUC. Reverting changes.
Training on augumented user 18159 12/50 current_auc = 0.5198863636363635
User 18159 AUC after training: 0.5176136363636363
User 18159 does not improve AUC. Reverting changes.
Training on augumented user 87544 13/50 current_auc = 0.5198863636363635
User 87544 AUC after training: 0.5164772727272727
User 87544 does not improve AUC. Reverting changes.
Training on augumented user 59660 14/50 current_auc = 0.5198863636363635
User 59660 AUC after training: 0.5170454545454545
User 59660 does not improve AUC. Reverting changes.
Training on augumented user 40506 15/50 current_auc = 0.5198863636363635
User 40506 AUC after training: 0.5176136363636363
User 40506 does not improve AUC. Reverting changes.
Training on augumented user 38504 16/50 current_auc = 0.5198863636363635
User 38504 AUC after training: 0.5170454545454546
User 38504 does not improve AUC. Reverting changes.
Training on augumented user 89301 17/50 current_auc = 0.5198863636363635
User 89301 AUC after training: 0.5167613636363637
User 89301 does not improve AUC. Reverting changes.
Training on augumented user 61131 18/50 current_auc = 0.5198863636363635
User 61131 AUC after training: 0.5170454545454545
User 61131 does not improve AUC. Reverting changes.
Training on augumented user 78636 19/50 current_auc = 0.5198863636363635
User 78636 AUC after training: 0.5176136363636363
User 78636 does not improve AUC. Reverting changes.
Training on augumented user 138466 20/50 current_auc = 0.5198863636363635
User 138466 AUC after training: 0.5176136363636363
User 138466 does not improve AUC. Reverting changes.
Training on augumented user 33821 21/50 current_auc = 0.5198863636363635
User 33821 AUC after training: 0.5181818181818182
User 33821 does not improve AUC. Reverting changes.
Training on augumented user 106773 22/50 current_auc = 0.5198863636363635
User 106773 AUC after training: 0.5193181818181818
User 106773 does not improve AUC. Reverting changes.
Training on augumented user 34904 23/50 current_auc = 0.5198863636363635
User 34904 AUC after training: 0.5125
User 34904 does not improve AUC. Reverting changes.
Training on augumented user 135509 24/50 current_auc = 0.5198863636363635
User 135509 AUC after training: 0.5170454545454545
User 135509 does not improve AUC. Reverting changes.
Training on augumented user 48763 25/50 current_auc = 0.5198863636363635
User 48763 AUC after training: 0.5176136363636363
User 48763 does not improve AUC. Reverting changes.
Training on augumented user 73332 26/50 current_auc = 0.5198863636363635
User 73332 AUC after training: 0.5176136363636363
User 73332 does not improve AUC. Reverting changes.
Training on augumented user 64797 27/50 current_auc = 0.5198863636363635
User 64797 AUC after training: 0.5176136363636363
User 64797 does not improve AUC. Reverting changes.
Training on augumented user 68765 28/50 current_auc = 0.5198863636363635
User 68765 AUC after training: 0.5193181818181818
User 68765 does not improve AUC. Reverting changes.
Training on augumented user 46044 29/50 current_auc = 0.5198863636363635
User 46044 AUC after training: 0.5164772727272727
User 46044 does not improve AUC. Reverting changes.
Training on augumented user 55488 30/50 current_auc = 0.5198863636363635
User 55488 AUC after training: 0.5193181818181818
User 55488 does not improve AUC. Reverting changes.
Training on augumented user 71731 31/50 current_auc = 0.5198863636363635
User 71731 AUC after training: 0.5193181818181818
User 71731 does not improve AUC. Reverting changes.
Training on augumented user 85673 32/50 current_auc = 0.5198863636363635
User 85673 AUC after training: 0.5181818181818182
User 85673 does not improve AUC. Reverting changes.
Training on augumented user 30668 33/50 current_auc = 0.5198863636363635
User 30668 AUC after training: 0.5187499999999999
User 30668 does not improve AUC. Reverting changes.
Training on augumented user 60494 34/50 current_auc = 0.5198863636363635
User 60494 AUC after training: 0.5176136363636364
User 60494 does not improve AUC. Reverting changes.
Training on augumented user 18059 35/50 current_auc = 0.5198863636363635
User 18059 AUC after training: 0.5170454545454546
User 18059 does not improve AUC. Reverting changes.
Training on augumented user 60271 36/50 current_auc = 0.5198863636363635
User 60271 AUC after training: 0.5213068181818182
User 60271 improves AUC. Keeping the model.
Training on augumented user 98020 37/50 current_auc = 0.5213068181818182
User 98020 AUC after training: 0.5196022727272728
User 98020 does not improve AUC. Reverting changes.
Training on augumented user 59757 38/50 current_auc = 0.5213068181818182
User 59757 AUC after training: 0.5181818181818182
User 59757 does not improve AUC. Reverting changes.
Training on augumented user 59194 39/50 current_auc = 0.5213068181818182
User 59194 AUC after training: 0.5198863636363636
User 59194 does not improve AUC. Reverting changes.
Training on augumented user 25569 40/50 current_auc = 0.5213068181818182
User 25569 AUC after training: 0.5181818181818182
User 25569 does not improve AUC. Reverting changes.
Training on augumented user 22309 41/50 current_auc = 0.5213068181818182
User 22309 AUC after training: 0.515340909090909
User 22309 does not improve AUC. Reverting changes.
Training on augumented user 101880 42/50 current_auc = 0.5213068181818182
User 101880 AUC after training: 0.5170454545454546
User 101880 does not improve AUC. Reverting changes.
Training on augumented user 56931 43/50 current_auc = 0.5213068181818182
User 56931 AUC after training: 0.5207386363636364
User 56931 does not improve AUC. Reverting changes.
Training on augumented user 114558 44/50 current_auc = 0.5213068181818182
User 114558 AUC after training: 0.5184659090909092
User 114558 does not improve AUC. Reverting changes.
Training on augumented user 6482 45/50 current_auc = 0.5213068181818182
User 6482 AUC after training: 0.5190340909090909
User 6482 does not improve AUC. Reverting changes.
Training on augumented user 24660 46/50 current_auc = 0.5213068181818182
User 24660 AUC after training: 0.5176136363636363
User 24660 does not improve AUC. Reverting changes.
Training on augumented user 113419 47/50 current_auc = 0.5213068181818182
User 113419 AUC after training: 0.5210227272727274
User 113419 does not improve AUC. Reverting changes.
Training on augumented user 83804 48/50 current_auc = 0.5213068181818182
User 83804 AUC after training: 0.5190340909090909
User 83804 does not improve AUC. Reverting changes.
Training on augumented user 86125 49/50 current_auc = 0.5213068181818182
User 86125 AUC after training: 0.5178977272727272
User 86125 does not improve AUC. Reverting changes.
[2024-12-02 19:22:58.370514] start test user 31922 184/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:58.777963] start test user 31922 184/568 recall augumented users by random, augumented_users = [103185, 10448, 35437, 56620, 96811, 70699, 61508, 65009, 33734, 3586, 104962, 17258, 132704, 119559, 53301, 60717, 69969, 81415, 128615, 97655, 26608, 119069, 57127, 118195, 138365, 66771, 28499, 72129, 72189, 136379, 124987, 28889, 60340, 40167, 77569, 30435, 96885, 45010, 66138, 38303, 123094, 37383, 56594, 121066, 85651, 41975, 59253, 100822, 81352, 112108]
[2024-12-02 19:22:58.792864] user = 31922 Cloud 184/568
[2024-12-02 19:22:58.802156] user = 31922 Local 184/568
[2024-12-02 19:22:58.821308] user = 31922 Local+ 184/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:01.547435] user = 31922 MPDA- 184/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.55
Training on augumented user 103185 0/50 current_auc = 0.55
User 103185 AUC after training: 0.55
User 103185 does not improve AUC. Reverting changes.
Training on augumented user 10448 1/50 current_auc = 0.55
User 10448 AUC after training: 0.6
User 10448 improves AUC. Keeping the model.
Training on augumented user 35437 2/50 current_auc = 0.6
User 35437 AUC after training: 0.6
User 35437 does not improve AUC. Reverting changes.
Training on augumented user 56620 3/50 current_auc = 0.6
User 56620 AUC after training: 0.6
User 56620 does not improve AUC. Reverting changes.
Training on augumented user 96811 4/50 current_auc = 0.6
User 96811 AUC after training: 0.6
User 96811 does not improve AUC. Reverting changes.
Training on augumented user 70699 5/50 current_auc = 0.6
User 70699 AUC after training: 0.6
User 70699 does not improve AUC. Reverting changes.
Training on augumented user 61508 6/50 current_auc = 0.6
User 61508 AUC after training: 0.6
User 61508 does not improve AUC. Reverting changes.
Training on augumented user 65009 7/50 current_auc = 0.6
User 65009 AUC after training: 0.6
User 65009 does not improve AUC. Reverting changes.
Training on augumented user 33734 8/50 current_auc = 0.6
User 33734 AUC after training: 0.6
User 33734 does not improve AUC. Reverting changes.
Training on augumented user 3586 9/50 current_auc = 0.6
User 3586 AUC after training: 0.6
User 3586 does not improve AUC. Reverting changes.
Training on augumented user 104962 10/50 current_auc = 0.6
User 104962 AUC after training: 0.55
User 104962 does not improve AUC. Reverting changes.
Training on augumented user 17258 11/50 current_auc = 0.6
User 17258 AUC after training: 0.6
User 17258 does not improve AUC. Reverting changes.
Training on augumented user 132704 12/50 current_auc = 0.6
User 132704 AUC after training: 0.6
User 132704 does not improve AUC. Reverting changes.
Training on augumented user 119559 13/50 current_auc = 0.6
User 119559 AUC after training: 0.55
User 119559 does not improve AUC. Reverting changes.
Training on augumented user 53301 14/50 current_auc = 0.6
User 53301 AUC after training: 0.55
User 53301 does not improve AUC. Reverting changes.
Training on augumented user 60717 15/50 current_auc = 0.6
User 60717 AUC after training: 0.6
User 60717 does not improve AUC. Reverting changes.
Training on augumented user 69969 16/50 current_auc = 0.6
User 69969 AUC after training: 0.55
User 69969 does not improve AUC. Reverting changes.
Training on augumented user 81415 17/50 current_auc = 0.6
User 81415 AUC after training: 0.6
User 81415 does not improve AUC. Reverting changes.
Training on augumented user 128615 18/50 current_auc = 0.6
User 128615 AUC after training: 0.55
User 128615 does not improve AUC. Reverting changes.
Training on augumented user 97655 19/50 current_auc = 0.6
User 97655 AUC after training: 0.6
User 97655 does not improve AUC. Reverting changes.
Training on augumented user 26608 20/50 current_auc = 0.6
User 26608 AUC after training: 0.6
User 26608 does not improve AUC. Reverting changes.
Training on augumented user 119069 21/50 current_auc = 0.6
User 119069 AUC after training: 0.55
User 119069 does not improve AUC. Reverting changes.
Training on augumented user 57127 22/50 current_auc = 0.6
User 57127 AUC after training: 0.6
User 57127 does not improve AUC. Reverting changes.
Training on augumented user 118195 23/50 current_auc = 0.6
User 118195 AUC after training: 0.6
User 118195 does not improve AUC. Reverting changes.
Training on augumented user 138365 24/50 current_auc = 0.6
User 138365 AUC after training: 0.6
User 138365 does not improve AUC. Reverting changes.
Training on augumented user 66771 25/50 current_auc = 0.6
User 66771 AUC after training: 0.6
User 66771 does not improve AUC. Reverting changes.
Training on augumented user 28499 26/50 current_auc = 0.6
User 28499 AUC after training: 0.6
User 28499 does not improve AUC. Reverting changes.
Training on augumented user 72129 27/50 current_auc = 0.6
User 72129 AUC after training: 0.55
User 72129 does not improve AUC. Reverting changes.
Training on augumented user 72189 28/50 current_auc = 0.6
User 72189 AUC after training: 0.6
User 72189 does not improve AUC. Reverting changes.
Training on augumented user 136379 29/50 current_auc = 0.6
User 136379 AUC after training: 0.6
User 136379 does not improve AUC. Reverting changes.
Training on augumented user 124987 30/50 current_auc = 0.6
User 124987 AUC after training: 0.6
User 124987 does not improve AUC. Reverting changes.
Training on augumented user 28889 31/50 current_auc = 0.6
User 28889 AUC after training: 0.6
User 28889 does not improve AUC. Reverting changes.
Training on augumented user 60340 32/50 current_auc = 0.6
User 60340 AUC after training: 0.6
User 60340 does not improve AUC. Reverting changes.
Training on augumented user 40167 33/50 current_auc = 0.6
User 40167 AUC after training: 0.55
User 40167 does not improve AUC. Reverting changes.
Training on augumented user 77569 34/50 current_auc = 0.6
User 77569 AUC after training: 0.6
User 77569 does not improve AUC. Reverting changes.
Training on augumented user 30435 35/50 current_auc = 0.6
User 30435 AUC after training: 0.6
User 30435 does not improve AUC. Reverting changes.
Training on augumented user 96885 36/50 current_auc = 0.6
User 96885 AUC after training: 0.65
User 96885 improves AUC. Keeping the model.
Training on augumented user 45010 37/50 current_auc = 0.65
User 45010 AUC after training: 0.6
User 45010 does not improve AUC. Reverting changes.
Training on augumented user 66138 38/50 current_auc = 0.65
User 66138 AUC after training: 0.65
User 66138 does not improve AUC. Reverting changes.
Training on augumented user 38303 39/50 current_auc = 0.65
User 38303 AUC after training: 0.6
User 38303 does not improve AUC. Reverting changes.
Training on augumented user 123094 40/50 current_auc = 0.65
User 123094 AUC after training: 0.6
User 123094 does not improve AUC. Reverting changes.
Training on augumented user 37383 41/50 current_auc = 0.65
User 37383 AUC after training: 0.6
User 37383 does not improve AUC. Reverting changes.
Training on augumented user 56594 42/50 current_auc = 0.65
User 56594 AUC after training: 0.6
User 56594 does not improve AUC. Reverting changes.
Training on augumented user 121066 43/50 current_auc = 0.65
User 121066 AUC after training: 0.55
User 121066 does not improve AUC. Reverting changes.
Training on augumented user 85651 44/50 current_auc = 0.65
User 85651 AUC after training: 0.6
User 85651 does not improve AUC. Reverting changes.
Training on augumented user 41975 45/50 current_auc = 0.65
User 41975 AUC after training: 0.6
User 41975 does not improve AUC. Reverting changes.
Training on augumented user 59253 46/50 current_auc = 0.65
User 59253 AUC after training: 0.6
User 59253 does not improve AUC. Reverting changes.
Training on augumented user 100822 47/50 current_auc = 0.65
User 100822 AUC after training: 0.6
User 100822 does not improve AUC. Reverting changes.
Training on augumented user 81352 48/50 current_auc = 0.65
User 81352 AUC after training: 0.6
User 81352 does not improve AUC. Reverting changes.
Training on augumented user 112108 49/50 current_auc = 0.65
User 112108 AUC after training: 0.65
User 112108 does not improve AUC. Reverting changes.
[2024-12-02 19:23:33.359450] start test user 32011 185/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:33.781029] start test user 32011 185/568 recall augumented users by random, augumented_users = [37436, 99364, 29874, 785, 83790, 94962, 8157, 42951, 132167, 70038, 36710, 62150, 22806, 66095, 56839, 32917, 102378, 9407, 98195, 27956, 32975, 646, 59894, 85612, 124685, 106291, 1723, 115968, 34848, 91681, 37482, 18065, 68177, 94684, 101652, 80643, 126374, 40199, 54996, 8616, 126516, 39354, 81292, 97885, 67650, 94209, 6867, 39677, 82895, 66244]
[2024-12-02 19:23:33.796637] user = 32011 Cloud 185/568
[2024-12-02 19:23:33.807022] user = 32011 Local 185/568
[2024-12-02 19:23:33.826423] user = 32011 Local+ 185/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:36.018453] user = 32011 MPDA- 185/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5787037037037037
Training on augumented user 37436 0/50 current_auc = 0.5787037037037037
User 37436 AUC after training: 0.5925925925925926
User 37436 improves AUC. Keeping the model.
Training on augumented user 99364 1/50 current_auc = 0.5925925925925926
User 99364 AUC after training: 0.6064814814814815
User 99364 improves AUC. Keeping the model.
Training on augumented user 29874 2/50 current_auc = 0.6064814814814815
User 29874 AUC after training: 0.5787037037037037
User 29874 does not improve AUC. Reverting changes.
Training on augumented user 785 3/50 current_auc = 0.6064814814814815
User 785 AUC after training: 0.6064814814814815
User 785 does not improve AUC. Reverting changes.
Training on augumented user 83790 4/50 current_auc = 0.6064814814814815
User 83790 AUC after training: 0.611111111111111
User 83790 improves AUC. Keeping the model.
Training on augumented user 94962 5/50 current_auc = 0.611111111111111
User 94962 AUC after training: 0.6435185185185185
User 94962 improves AUC. Keeping the model.
Training on augumented user 8157 6/50 current_auc = 0.6435185185185185
User 8157 AUC after training: 0.6527777777777778
User 8157 improves AUC. Keeping the model.
Training on augumented user 42951 7/50 current_auc = 0.6527777777777778
User 42951 AUC after training: 0.6527777777777778
User 42951 does not improve AUC. Reverting changes.
Training on augumented user 132167 8/50 current_auc = 0.6527777777777778
User 132167 AUC after training: 0.625
User 132167 does not improve AUC. Reverting changes.
Training on augumented user 70038 9/50 current_auc = 0.6527777777777778
User 70038 AUC after training: 0.6527777777777778
User 70038 does not improve AUC. Reverting changes.
Training on augumented user 36710 10/50 current_auc = 0.6527777777777778
User 36710 AUC after training: 0.6296296296296297
User 36710 does not improve AUC. Reverting changes.
Training on augumented user 62150 11/50 current_auc = 0.6527777777777778
User 62150 AUC after training: 0.6435185185185185
User 62150 does not improve AUC. Reverting changes.
Training on augumented user 22806 12/50 current_auc = 0.6527777777777778
User 22806 AUC after training: 0.6481481481481481
User 22806 does not improve AUC. Reverting changes.
Training on augumented user 66095 13/50 current_auc = 0.6527777777777778
User 66095 AUC after training: 0.6435185185185185
User 66095 does not improve AUC. Reverting changes.
Training on augumented user 56839 14/50 current_auc = 0.6527777777777778
User 56839 AUC after training: 0.6435185185185185
User 56839 does not improve AUC. Reverting changes.
Training on augumented user 32917 15/50 current_auc = 0.6527777777777778
User 32917 AUC after training: 0.6527777777777778
User 32917 does not improve AUC. Reverting changes.
Training on augumented user 102378 16/50 current_auc = 0.6527777777777778
User 102378 AUC after training: 0.6342592592592593
User 102378 does not improve AUC. Reverting changes.
Training on augumented user 9407 17/50 current_auc = 0.6527777777777778
User 9407 AUC after training: 0.6481481481481481
User 9407 does not improve AUC. Reverting changes.
Training on augumented user 98195 18/50 current_auc = 0.6527777777777778
User 98195 AUC after training: 0.6435185185185186
User 98195 does not improve AUC. Reverting changes.
Training on augumented user 27956 19/50 current_auc = 0.6527777777777778
User 27956 AUC after training: 0.6574074074074073
User 27956 improves AUC. Keeping the model.
Training on augumented user 32975 20/50 current_auc = 0.6574074074074073
User 32975 AUC after training: 0.6620370370370371
User 32975 improves AUC. Keeping the model.
Training on augumented user 646 21/50 current_auc = 0.6620370370370371
User 646 AUC after training: 0.6342592592592593
User 646 does not improve AUC. Reverting changes.
Training on augumented user 59894 22/50 current_auc = 0.6620370370370371
User 59894 AUC after training: 0.6574074074074073
User 59894 does not improve AUC. Reverting changes.
Training on augumented user 85612 23/50 current_auc = 0.6620370370370371
User 85612 AUC after training: 0.6435185185185185
User 85612 does not improve AUC. Reverting changes.
Training on augumented user 124685 24/50 current_auc = 0.6620370370370371
User 124685 AUC after training: 0.6620370370370371
User 124685 does not improve AUC. Reverting changes.
Training on augumented user 106291 25/50 current_auc = 0.6620370370370371
User 106291 AUC after training: 0.6574074074074073
User 106291 does not improve AUC. Reverting changes.
Training on augumented user 1723 26/50 current_auc = 0.6620370370370371
User 1723 AUC after training: 0.6527777777777778
User 1723 does not improve AUC. Reverting changes.
Training on augumented user 115968 27/50 current_auc = 0.6620370370370371
User 115968 AUC after training: 0.6574074074074074
User 115968 does not improve AUC. Reverting changes.
Training on augumented user 34848 28/50 current_auc = 0.6620370370370371
User 34848 AUC after training: 0.6203703703703703
User 34848 does not improve AUC. Reverting changes.
Training on augumented user 91681 29/50 current_auc = 0.6620370370370371
User 91681 AUC after training: 0.6435185185185185
User 91681 does not improve AUC. Reverting changes.
Training on augumented user 37482 30/50 current_auc = 0.6620370370370371
User 37482 AUC after training: 0.6527777777777778
User 37482 does not improve AUC. Reverting changes.
Training on augumented user 18065 31/50 current_auc = 0.6620370370370371
User 18065 AUC after training: 0.6574074074074074
User 18065 does not improve AUC. Reverting changes.
Training on augumented user 68177 32/50 current_auc = 0.6620370370370371
User 68177 AUC after training: 0.6342592592592593
User 68177 does not improve AUC. Reverting changes.
Training on augumented user 94684 33/50 current_auc = 0.6620370370370371
User 94684 AUC after training: 0.6527777777777778
User 94684 does not improve AUC. Reverting changes.
Training on augumented user 101652 34/50 current_auc = 0.6620370370370371
User 101652 AUC after training: 0.5925925925925926
User 101652 does not improve AUC. Reverting changes.
Training on augumented user 80643 35/50 current_auc = 0.6620370370370371
User 80643 AUC after training: 0.6342592592592593
User 80643 does not improve AUC. Reverting changes.
Training on augumented user 126374 36/50 current_auc = 0.6620370370370371
User 126374 AUC after training: 0.6157407407407407
User 126374 does not improve AUC. Reverting changes.
Training on augumented user 40199 37/50 current_auc = 0.6620370370370371
User 40199 AUC after training: 0.6527777777777778
User 40199 does not improve AUC. Reverting changes.
Training on augumented user 54996 38/50 current_auc = 0.6620370370370371
User 54996 AUC after training: 0.6481481481481481
User 54996 does not improve AUC. Reverting changes.
Training on augumented user 8616 39/50 current_auc = 0.6620370370370371
User 8616 AUC after training: 0.6481481481481481
User 8616 does not improve AUC. Reverting changes.
Training on augumented user 126516 40/50 current_auc = 0.6620370370370371
User 126516 AUC after training: 0.6296296296296297
User 126516 does not improve AUC. Reverting changes.
Training on augumented user 39354 41/50 current_auc = 0.6620370370370371
User 39354 AUC after training: 0.6527777777777778
User 39354 does not improve AUC. Reverting changes.
Training on augumented user 81292 42/50 current_auc = 0.6620370370370371
User 81292 AUC after training: 0.6481481481481481
User 81292 does not improve AUC. Reverting changes.
Training on augumented user 97885 43/50 current_auc = 0.6620370370370371
User 97885 AUC after training: 0.6481481481481481
User 97885 does not improve AUC. Reverting changes.
Training on augumented user 67650 44/50 current_auc = 0.6620370370370371
User 67650 AUC after training: 0.6574074074074074
User 67650 does not improve AUC. Reverting changes.
Training on augumented user 94209 45/50 current_auc = 0.6620370370370371
User 94209 AUC after training: 0.6574074074074074
User 94209 does not improve AUC. Reverting changes.
Training on augumented user 6867 46/50 current_auc = 0.6620370370370371
User 6867 AUC after training: 0.6527777777777778
User 6867 does not improve AUC. Reverting changes.
Training on augumented user 39677 47/50 current_auc = 0.6620370370370371
User 39677 AUC after training: 0.6527777777777778
User 39677 does not improve AUC. Reverting changes.
Training on augumented user 82895 48/50 current_auc = 0.6620370370370371
User 82895 AUC after training: 0.6481481481481481
User 82895 does not improve AUC. Reverting changes.
Training on augumented user 66244 49/50 current_auc = 0.6620370370370371
User 66244 AUC after training: 0.6296296296296297
User 66244 does not improve AUC. Reverting changes.
[2024-12-02 19:24:01.772787] start test user 32109 186/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:02.291664] start test user 32109 186/568 recall augumented users by random, augumented_users = [6898, 87767, 134763, 27374, 12701, 353, 32015, 92740, 137299, 122507, 53128, 71173, 104253, 99281, 121966, 110076, 49890, 60477, 82567, 41165, 81934, 16142, 64583, 107362, 47487, 3450, 7724, 21833, 6231, 81374, 55718, 124935, 113553, 37968, 74949, 39914, 118163, 99381, 47139, 107057, 9396, 129591, 37427, 16597, 17436, 48630, 104884, 133400, 24869, 83828]
[2024-12-02 19:24:02.308446] user = 32109 Cloud 186/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:24:02.325287] user = 32109 Local 186/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:24:02.381089] user = 32109 Local+ 186/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:24:04.366219] user = 32109 MPDA- 186/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 6898 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6898 AUC after training: 0.5
User 6898 does not improve AUC. Reverting changes.
Training on augumented user 87767 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87767 AUC after training: 0.5
User 87767 does not improve AUC. Reverting changes.
Training on augumented user 134763 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134763 AUC after training: 0.5
User 134763 does not improve AUC. Reverting changes.
Training on augumented user 27374 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27374 AUC after training: 0.5
User 27374 does not improve AUC. Reverting changes.
Training on augumented user 12701 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12701 AUC after training: 0.5
User 12701 does not improve AUC. Reverting changes.
Training on augumented user 353 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 353 AUC after training: 0.5
User 353 does not improve AUC. Reverting changes.
Training on augumented user 32015 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32015 AUC after training: 0.5
User 32015 does not improve AUC. Reverting changes.
Training on augumented user 92740 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92740 AUC after training: 0.5
User 92740 does not improve AUC. Reverting changes.
Training on augumented user 137299 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137299 AUC after training: 0.5
User 137299 does not improve AUC. Reverting changes.
Training on augumented user 122507 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122507 AUC after training: 0.5
User 122507 does not improve AUC. Reverting changes.
Training on augumented user 53128 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53128 AUC after training: 0.5
User 53128 does not improve AUC. Reverting changes.
Training on augumented user 71173 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71173 AUC after training: 0.5
User 71173 does not improve AUC. Reverting changes.
Training on augumented user 104253 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104253 AUC after training: 0.5
User 104253 does not improve AUC. Reverting changes.
Training on augumented user 99281 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99281 AUC after training: 0.5
User 99281 does not improve AUC. Reverting changes.
Training on augumented user 121966 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121966 AUC after training: 0.5
User 121966 does not improve AUC. Reverting changes.
Training on augumented user 110076 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110076 AUC after training: 0.5
User 110076 does not improve AUC. Reverting changes.
Training on augumented user 49890 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49890 AUC after training: 0.5
User 49890 does not improve AUC. Reverting changes.
Training on augumented user 60477 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60477 AUC after training: 0.5
User 60477 does not improve AUC. Reverting changes.
Training on augumented user 82567 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82567 AUC after training: 0.5
User 82567 does not improve AUC. Reverting changes.
Training on augumented user 41165 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41165 AUC after training: 0.5
User 41165 does not improve AUC. Reverting changes.
Training on augumented user 81934 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81934 AUC after training: 0.5
User 81934 does not improve AUC. Reverting changes.
Training on augumented user 16142 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16142 AUC after training: 0.5
User 16142 does not improve AUC. Reverting changes.
Training on augumented user 64583 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64583 AUC after training: 0.5
User 64583 does not improve AUC. Reverting changes.
Training on augumented user 107362 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107362 AUC after training: 0.5
User 107362 does not improve AUC. Reverting changes.
Training on augumented user 47487 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47487 AUC after training: 0.5
User 47487 does not improve AUC. Reverting changes.
Training on augumented user 3450 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3450 AUC after training: 0.5
User 3450 does not improve AUC. Reverting changes.
Training on augumented user 7724 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7724 AUC after training: 0.5
User 7724 does not improve AUC. Reverting changes.
Training on augumented user 21833 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21833 AUC after training: 0.5
User 21833 does not improve AUC. Reverting changes.
Training on augumented user 6231 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6231 AUC after training: 0.5
User 6231 does not improve AUC. Reverting changes.
Training on augumented user 81374 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81374 AUC after training: 0.5
User 81374 does not improve AUC. Reverting changes.
Training on augumented user 55718 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55718 AUC after training: 0.5
User 55718 does not improve AUC. Reverting changes.
Training on augumented user 124935 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124935 AUC after training: 0.5
User 124935 does not improve AUC. Reverting changes.
Training on augumented user 113553 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113553 AUC after training: 0.5
User 113553 does not improve AUC. Reverting changes.
Training on augumented user 37968 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37968 AUC after training: 0.5
User 37968 does not improve AUC. Reverting changes.
Training on augumented user 74949 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74949 AUC after training: 0.5
User 74949 does not improve AUC. Reverting changes.
Training on augumented user 39914 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39914 AUC after training: 0.5
User 39914 does not improve AUC. Reverting changes.
Training on augumented user 118163 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118163 AUC after training: 0.5
User 118163 does not improve AUC. Reverting changes.
Training on augumented user 99381 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99381 AUC after training: 0.5
User 99381 does not improve AUC. Reverting changes.
Training on augumented user 47139 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47139 AUC after training: 0.5
User 47139 does not improve AUC. Reverting changes.
Training on augumented user 107057 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107057 AUC after training: 0.5
User 107057 does not improve AUC. Reverting changes.
Training on augumented user 9396 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9396 AUC after training: 0.5
User 9396 does not improve AUC. Reverting changes.
Training on augumented user 129591 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129591 AUC after training: 0.5
User 129591 does not improve AUC. Reverting changes.
Training on augumented user 37427 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37427 AUC after training: 0.5
User 37427 does not improve AUC. Reverting changes.
Training on augumented user 16597 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16597 AUC after training: 0.5
User 16597 does not improve AUC. Reverting changes.
Training on augumented user 17436 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17436 AUC after training: 0.5
User 17436 does not improve AUC. Reverting changes.
Training on augumented user 48630 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48630 AUC after training: 0.5
User 48630 does not improve AUC. Reverting changes.
Training on augumented user 104884 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104884 AUC after training: 0.5
User 104884 does not improve AUC. Reverting changes.
Training on augumented user 133400 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133400 AUC after training: 0.5
User 133400 does not improve AUC. Reverting changes.
Training on augumented user 24869 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24869 AUC after training: 0.5
User 24869 does not improve AUC. Reverting changes.
Training on augumented user 83828 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83828 AUC after training: 0.5
User 83828 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:24:28.465597] start test user 32122 187/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:29.118996] start test user 32122 187/568 recall augumented users by random, augumented_users = [74198, 101200, 99848, 74269, 19422, 85277, 117627, 44536, 11172, 11315, 70239, 10839, 55149, 89256, 137061, 69514, 114904, 8961, 72511, 104947, 46747, 101111, 73338, 100160, 57972, 40191, 75438, 41234, 75890, 137547, 74668, 72504, 85146, 20232, 116110, 69791, 100861, 130950, 65440, 58767, 40871, 68469, 114574, 126944, 92319, 119325, 64293, 8660, 12447, 106159]
[2024-12-02 19:24:29.176482] user = 32122 Cloud 187/568
[2024-12-02 19:24:29.229123] user = 32122 Local 187/568
[2024-12-02 19:24:29.280359] user = 32122 Local+ 187/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:31.194523] user = 32122 MPDA- 187/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7500000000000001
Training on augumented user 74198 0/50 current_auc = 0.7500000000000001
User 74198 AUC after training: 0.7526881720430108
User 74198 improves AUC. Keeping the model.
Training on augumented user 101200 1/50 current_auc = 0.7526881720430108
User 101200 AUC after training: 0.7526881720430108
User 101200 does not improve AUC. Reverting changes.
Training on augumented user 99848 2/50 current_auc = 0.7526881720430108
User 99848 AUC after training: 0.7526881720430108
User 99848 does not improve AUC. Reverting changes.
Training on augumented user 74269 3/50 current_auc = 0.7526881720430108
User 74269 AUC after training: 0.75
User 74269 does not improve AUC. Reverting changes.
Training on augumented user 19422 4/50 current_auc = 0.7526881720430108
User 19422 AUC after training: 0.7526881720430108
User 19422 does not improve AUC. Reverting changes.
Training on augumented user 85277 5/50 current_auc = 0.7526881720430108
User 85277 AUC after training: 0.75
User 85277 does not improve AUC. Reverting changes.
Training on augumented user 117627 6/50 current_auc = 0.7526881720430108
User 117627 AUC after training: 0.7526881720430108
User 117627 does not improve AUC. Reverting changes.
Training on augumented user 44536 7/50 current_auc = 0.7526881720430108
User 44536 AUC after training: 0.7553763440860216
User 44536 improves AUC. Keeping the model.
Training on augumented user 11172 8/50 current_auc = 0.7553763440860216
User 11172 AUC after training: 0.7526881720430109
User 11172 does not improve AUC. Reverting changes.
Training on augumented user 11315 9/50 current_auc = 0.7553763440860216
User 11315 AUC after training: 0.7553763440860216
User 11315 does not improve AUC. Reverting changes.
Training on augumented user 70239 10/50 current_auc = 0.7553763440860216
User 70239 AUC after training: 0.7526881720430108
User 70239 does not improve AUC. Reverting changes.
Training on augumented user 10839 11/50 current_auc = 0.7553763440860216
User 10839 AUC after training: 0.7526881720430108
User 10839 does not improve AUC. Reverting changes.
Training on augumented user 55149 12/50 current_auc = 0.7553763440860216
User 55149 AUC after training: 0.7526881720430108
User 55149 does not improve AUC. Reverting changes.
Training on augumented user 89256 13/50 current_auc = 0.7553763440860216
User 89256 AUC after training: 0.7473118279569894
User 89256 does not improve AUC. Reverting changes.
Training on augumented user 137061 14/50 current_auc = 0.7553763440860216
User 137061 AUC after training: 0.7473118279569892
User 137061 does not improve AUC. Reverting changes.
Training on augumented user 69514 15/50 current_auc = 0.7553763440860216
User 69514 AUC after training: 0.7526881720430109
User 69514 does not improve AUC. Reverting changes.
Training on augumented user 114904 16/50 current_auc = 0.7553763440860216
User 114904 AUC after training: 0.7500000000000001
User 114904 does not improve AUC. Reverting changes.
Training on augumented user 8961 17/50 current_auc = 0.7553763440860216
User 8961 AUC after training: 0.7553763440860216
User 8961 does not improve AUC. Reverting changes.
Training on augumented user 72511 18/50 current_auc = 0.7553763440860216
User 72511 AUC after training: 0.75
User 72511 does not improve AUC. Reverting changes.
Training on augumented user 104947 19/50 current_auc = 0.7553763440860216
User 104947 AUC after training: 0.75
User 104947 does not improve AUC. Reverting changes.
Training on augumented user 46747 20/50 current_auc = 0.7553763440860216
User 46747 AUC after training: 0.7526881720430109
User 46747 does not improve AUC. Reverting changes.
Training on augumented user 101111 21/50 current_auc = 0.7553763440860216
User 101111 AUC after training: 0.7526881720430108
User 101111 does not improve AUC. Reverting changes.
Training on augumented user 73338 22/50 current_auc = 0.7553763440860216
User 73338 AUC after training: 0.7500000000000001
User 73338 does not improve AUC. Reverting changes.
Training on augumented user 100160 23/50 current_auc = 0.7553763440860216
User 100160 AUC after training: 0.7526881720430108
User 100160 does not improve AUC. Reverting changes.
Training on augumented user 57972 24/50 current_auc = 0.7553763440860216
User 57972 AUC after training: 0.7526881720430108
User 57972 does not improve AUC. Reverting changes.
Training on augumented user 40191 25/50 current_auc = 0.7553763440860216
User 40191 AUC after training: 0.7500000000000001
User 40191 does not improve AUC. Reverting changes.
Training on augumented user 75438 26/50 current_auc = 0.7553763440860216
User 75438 AUC after training: 0.7500000000000001
User 75438 does not improve AUC. Reverting changes.
Training on augumented user 41234 27/50 current_auc = 0.7553763440860216
User 41234 AUC after training: 0.7526881720430108
User 41234 does not improve AUC. Reverting changes.
Training on augumented user 75890 28/50 current_auc = 0.7553763440860216
User 75890 AUC after training: 0.7526881720430109
User 75890 does not improve AUC. Reverting changes.
Training on augumented user 137547 29/50 current_auc = 0.7553763440860216
User 137547 AUC after training: 0.7500000000000001
User 137547 does not improve AUC. Reverting changes.
Training on augumented user 74668 30/50 current_auc = 0.7553763440860216
User 74668 AUC after training: 0.7473118279569892
User 74668 does not improve AUC. Reverting changes.
Training on augumented user 72504 31/50 current_auc = 0.7553763440860216
User 72504 AUC after training: 0.75
User 72504 does not improve AUC. Reverting changes.
Training on augumented user 85146 32/50 current_auc = 0.7553763440860216
User 85146 AUC after training: 0.7526881720430109
User 85146 does not improve AUC. Reverting changes.
Training on augumented user 20232 33/50 current_auc = 0.7553763440860216
User 20232 AUC after training: 0.7553763440860215
User 20232 does not improve AUC. Reverting changes.
Training on augumented user 116110 34/50 current_auc = 0.7553763440860216
User 116110 AUC after training: 0.7526881720430109
User 116110 does not improve AUC. Reverting changes.
Training on augumented user 69791 35/50 current_auc = 0.7553763440860216
User 69791 AUC after training: 0.7500000000000001
User 69791 does not improve AUC. Reverting changes.
Training on augumented user 100861 36/50 current_auc = 0.7553763440860216
User 100861 AUC after training: 0.7526881720430109
User 100861 does not improve AUC. Reverting changes.
Training on augumented user 130950 37/50 current_auc = 0.7553763440860216
User 130950 AUC after training: 0.7526881720430108
User 130950 does not improve AUC. Reverting changes.
Training on augumented user 65440 38/50 current_auc = 0.7553763440860216
User 65440 AUC after training: 0.7553763440860216
User 65440 does not improve AUC. Reverting changes.
Training on augumented user 58767 39/50 current_auc = 0.7553763440860216
User 58767 AUC after training: 0.7500000000000001
User 58767 does not improve AUC. Reverting changes.
Training on augumented user 40871 40/50 current_auc = 0.7553763440860216
User 40871 AUC after training: 0.7526881720430108
User 40871 does not improve AUC. Reverting changes.
Training on augumented user 68469 41/50 current_auc = 0.7553763440860216
User 68469 AUC after training: 0.75
User 68469 does not improve AUC. Reverting changes.
Training on augumented user 114574 42/50 current_auc = 0.7553763440860216
User 114574 AUC after training: 0.7553763440860216
User 114574 does not improve AUC. Reverting changes.
Training on augumented user 126944 43/50 current_auc = 0.7553763440860216
User 126944 AUC after training: 0.75
User 126944 does not improve AUC. Reverting changes.
Training on augumented user 92319 44/50 current_auc = 0.7553763440860216
User 92319 AUC after training: 0.7526881720430109
User 92319 does not improve AUC. Reverting changes.
Training on augumented user 119325 45/50 current_auc = 0.7553763440860216
User 119325 AUC after training: 0.7526881720430109
User 119325 does not improve AUC. Reverting changes.
Training on augumented user 64293 46/50 current_auc = 0.7553763440860216
User 64293 AUC after training: 0.7553763440860216
User 64293 does not improve AUC. Reverting changes.
Training on augumented user 8660 47/50 current_auc = 0.7553763440860216
User 8660 AUC after training: 0.7419354838709679
User 8660 does not improve AUC. Reverting changes.
Training on augumented user 12447 48/50 current_auc = 0.7553763440860216
User 12447 AUC after training: 0.7526881720430108
User 12447 does not improve AUC. Reverting changes.
Training on augumented user 106159 49/50 current_auc = 0.7553763440860216
User 106159 AUC after training: 0.7446236559139785
User 106159 does not improve AUC. Reverting changes.
[2024-12-02 19:25:05.140481] start test user 32161 188/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:05.927554] start test user 32161 188/568 recall augumented users by random, augumented_users = [127653, 84865, 78681, 57288, 96931, 114292, 109068, 11449, 106582, 106812, 66753, 2506, 27479, 47780, 79396, 65998, 118125, 75330, 20689, 114215, 20304, 88206, 21469, 8973, 9342, 80498, 131243, 129568, 82587, 56579, 6895, 87000, 12648, 6000, 74475, 17358, 85269, 130578, 71655, 91787, 122062, 11957, 27735, 128629, 96972, 116005, 81165, 43568, 22379, 32838]
[2024-12-02 19:25:05.945075] user = 32161 Cloud 188/568
[2024-12-02 19:25:05.961239] user = 32161 Local 188/568
[2024-12-02 19:25:06.335028] user = 32161 Local+ 188/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:08.394351] user = 32161 MPDA- 188/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7812960235640648
Training on augumented user 127653 0/50 current_auc = 0.7812960235640648
User 127653 AUC after training: 0.7812960235640648
User 127653 does not improve AUC. Reverting changes.
Training on augumented user 84865 1/50 current_auc = 0.7812960235640648
User 84865 AUC after training: 0.7831369661266568
User 84865 improves AUC. Keeping the model.
Training on augumented user 78681 2/50 current_auc = 0.7831369661266568
User 78681 AUC after training: 0.7790868924889544
User 78681 does not improve AUC. Reverting changes.
Training on augumented user 57288 3/50 current_auc = 0.7831369661266568
User 57288 AUC after training: 0.7831369661266568
User 57288 does not improve AUC. Reverting changes.
Training on augumented user 96931 4/50 current_auc = 0.7831369661266568
User 96931 AUC after training: 0.78240058910162
User 96931 does not improve AUC. Reverting changes.
Training on augumented user 114292 5/50 current_auc = 0.7831369661266568
User 114292 AUC after training: 0.7831369661266568
User 114292 does not improve AUC. Reverting changes.
Training on augumented user 109068 6/50 current_auc = 0.7831369661266568
User 109068 AUC after training: 0.7831369661266568
User 109068 does not improve AUC. Reverting changes.
Training on augumented user 11449 7/50 current_auc = 0.7831369661266568
User 11449 AUC after training: 0.7820324005891016
User 11449 does not improve AUC. Reverting changes.
Training on augumented user 106582 8/50 current_auc = 0.7831369661266568
User 106582 AUC after training: 0.78240058910162
User 106582 does not improve AUC. Reverting changes.
Training on augumented user 106812 9/50 current_auc = 0.7831369661266568
User 106812 AUC after training: 0.7820324005891016
User 106812 does not improve AUC. Reverting changes.
Training on augumented user 66753 10/50 current_auc = 0.7831369661266568
User 66753 AUC after training: 0.7827687776141384
User 66753 does not improve AUC. Reverting changes.
Training on augumented user 2506 11/50 current_auc = 0.7831369661266568
User 2506 AUC after training: 0.78240058910162
User 2506 does not improve AUC. Reverting changes.
Training on augumented user 27479 12/50 current_auc = 0.7831369661266568
User 27479 AUC after training: 0.7835051546391752
User 27479 improves AUC. Keeping the model.
Training on augumented user 47780 13/50 current_auc = 0.7835051546391752
User 47780 AUC after training: 0.7827687776141384
User 47780 does not improve AUC. Reverting changes.
Training on augumented user 79396 14/50 current_auc = 0.7835051546391752
User 79396 AUC after training: 0.7835051546391752
User 79396 does not improve AUC. Reverting changes.
Training on augumented user 65998 15/50 current_auc = 0.7835051546391752
User 65998 AUC after training: 0.7831369661266568
User 65998 does not improve AUC. Reverting changes.
Training on augumented user 118125 16/50 current_auc = 0.7835051546391752
User 118125 AUC after training: 0.7842415316642121
User 118125 improves AUC. Keeping the model.
Training on augumented user 75330 17/50 current_auc = 0.7842415316642121
User 75330 AUC after training: 0.7835051546391752
User 75330 does not improve AUC. Reverting changes.
Training on augumented user 20689 18/50 current_auc = 0.7842415316642121
User 20689 AUC after training: 0.7820324005891016
User 20689 does not improve AUC. Reverting changes.
Training on augumented user 114215 19/50 current_auc = 0.7842415316642121
User 114215 AUC after training: 0.7842415316642121
User 114215 does not improve AUC. Reverting changes.
Training on augumented user 20304 20/50 current_auc = 0.7842415316642121
User 20304 AUC after training: 0.7849779086892489
User 20304 improves AUC. Keeping the model.
Training on augumented user 88206 21/50 current_auc = 0.7849779086892489
User 88206 AUC after training: 0.7857142857142857
User 88206 improves AUC. Keeping the model.
Training on augumented user 21469 22/50 current_auc = 0.7857142857142857
User 21469 AUC after training: 0.7857142857142857
User 21469 does not improve AUC. Reverting changes.
Training on augumented user 8973 23/50 current_auc = 0.7857142857142857
User 8973 AUC after training: 0.7864506627393225
User 8973 improves AUC. Keeping the model.
Training on augumented user 9342 24/50 current_auc = 0.7864506627393225
User 9342 AUC after training: 0.7868188512518409
User 9342 improves AUC. Keeping the model.
Training on augumented user 80498 25/50 current_auc = 0.7868188512518409
User 80498 AUC after training: 0.7857142857142857
User 80498 does not improve AUC. Reverting changes.
Training on augumented user 131243 26/50 current_auc = 0.7868188512518409
User 131243 AUC after training: 0.7846097201767305
User 131243 does not improve AUC. Reverting changes.
Training on augumented user 129568 27/50 current_auc = 0.7868188512518409
User 129568 AUC after training: 0.7838733431516937
User 129568 does not improve AUC. Reverting changes.
Training on augumented user 82587 28/50 current_auc = 0.7868188512518409
User 82587 AUC after training: 0.7868188512518409
User 82587 does not improve AUC. Reverting changes.
Training on augumented user 56579 29/50 current_auc = 0.7868188512518409
User 56579 AUC after training: 0.7827687776141384
User 56579 does not improve AUC. Reverting changes.
Training on augumented user 6895 30/50 current_auc = 0.7868188512518409
User 6895 AUC after training: 0.7860824742268041
User 6895 does not improve AUC. Reverting changes.
Training on augumented user 87000 31/50 current_auc = 0.7868188512518409
User 87000 AUC after training: 0.7846097201767305
User 87000 does not improve AUC. Reverting changes.
Training on augumented user 12648 32/50 current_auc = 0.7868188512518409
User 12648 AUC after training: 0.786818851251841
User 12648 improves AUC. Keeping the model.
Training on augumented user 6000 33/50 current_auc = 0.786818851251841
User 6000 AUC after training: 0.78240058910162
User 6000 does not improve AUC. Reverting changes.
Training on augumented user 74475 34/50 current_auc = 0.786818851251841
User 74475 AUC after training: 0.7816642120765832
User 74475 does not improve AUC. Reverting changes.
Training on augumented user 17358 35/50 current_auc = 0.786818851251841
User 17358 AUC after training: 0.7846097201767305
User 17358 does not improve AUC. Reverting changes.
Training on augumented user 85269 36/50 current_auc = 0.786818851251841
User 85269 AUC after training: 0.7871870397643593
User 85269 improves AUC. Keeping the model.
Training on augumented user 130578 37/50 current_auc = 0.7871870397643593
User 130578 AUC after training: 0.7879234167893961
User 130578 improves AUC. Keeping the model.
Training on augumented user 71655 38/50 current_auc = 0.7879234167893961
User 71655 AUC after training: 0.7857142857142857
User 71655 does not improve AUC. Reverting changes.
Training on augumented user 91787 39/50 current_auc = 0.7879234167893961
User 91787 AUC after training: 0.7860824742268041
User 91787 does not improve AUC. Reverting changes.
Training on augumented user 122062 40/50 current_auc = 0.7879234167893961
User 122062 AUC after training: 0.7864506627393225
User 122062 does not improve AUC. Reverting changes.
Training on augumented user 11957 41/50 current_auc = 0.7879234167893961
User 11957 AUC after training: 0.7871870397643594
User 11957 does not improve AUC. Reverting changes.
Training on augumented user 27735 42/50 current_auc = 0.7879234167893961
User 27735 AUC after training: 0.7875552282768777
User 27735 does not improve AUC. Reverting changes.
Training on augumented user 128629 43/50 current_auc = 0.7879234167893961
User 128629 AUC after training: 0.7868188512518409
User 128629 does not improve AUC. Reverting changes.
Training on augumented user 96972 44/50 current_auc = 0.7879234167893961
User 96972 AUC after training: 0.7857142857142857
User 96972 does not improve AUC. Reverting changes.
Training on augumented user 116005 45/50 current_auc = 0.7879234167893961
User 116005 AUC after training: 0.7860824742268041
User 116005 does not improve AUC. Reverting changes.
Training on augumented user 81165 46/50 current_auc = 0.7879234167893961
User 81165 AUC after training: 0.7864506627393225
User 81165 does not improve AUC. Reverting changes.
Training on augumented user 43568 47/50 current_auc = 0.7879234167893961
User 43568 AUC after training: 0.7864506627393226
User 43568 does not improve AUC. Reverting changes.
Training on augumented user 22379 48/50 current_auc = 0.7879234167893961
User 22379 AUC after training: 0.7857142857142857
User 22379 does not improve AUC. Reverting changes.
Training on augumented user 32838 49/50 current_auc = 0.7879234167893961
User 32838 AUC after training: 0.7849779086892489
User 32838 does not improve AUC. Reverting changes.
[2024-12-02 19:25:37.263492] start test user 32180 189/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:37.963140] start test user 32180 189/568 recall augumented users by random, augumented_users = [4757, 53525, 108402, 25920, 85353, 89276, 130315, 98481, 129140, 1639, 125807, 13667, 63857, 51435, 107481, 114729, 18436, 21279, 62460, 64582, 75218, 52724, 51680, 86224, 40816, 3061, 121999, 23160, 47230, 31139, 76301, 12987, 64417, 105533, 103930, 56982, 128657, 112487, 46331, 87042, 132573, 103815, 11930, 62833, 4113, 50346, 126174, 63733, 72387, 39242]
[2024-12-02 19:25:37.980520] user = 32180 Cloud 189/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:25:37.988047] user = 32180 Local 189/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:25:38.057806] user = 32180 Local+ 189/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:25:40.512744] user = 32180 MPDA- 189/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 4757 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4757 AUC after training: 0.5
User 4757 does not improve AUC. Reverting changes.
Training on augumented user 53525 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53525 AUC after training: 0.5
User 53525 does not improve AUC. Reverting changes.
Training on augumented user 108402 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108402 AUC after training: 0.5
User 108402 does not improve AUC. Reverting changes.
Training on augumented user 25920 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25920 AUC after training: 0.5
User 25920 does not improve AUC. Reverting changes.
Training on augumented user 85353 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85353 AUC after training: 0.5
User 85353 does not improve AUC. Reverting changes.
Training on augumented user 89276 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89276 AUC after training: 0.5
User 89276 does not improve AUC. Reverting changes.
Training on augumented user 130315 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130315 AUC after training: 0.5
User 130315 does not improve AUC. Reverting changes.
Training on augumented user 98481 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98481 AUC after training: 0.5
User 98481 does not improve AUC. Reverting changes.
Training on augumented user 129140 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129140 AUC after training: 0.5
User 129140 does not improve AUC. Reverting changes.
Training on augumented user 1639 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1639 AUC after training: 0.5
User 1639 does not improve AUC. Reverting changes.
Training on augumented user 125807 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125807 AUC after training: 0.5
User 125807 does not improve AUC. Reverting changes.
Training on augumented user 13667 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13667 AUC after training: 0.5
User 13667 does not improve AUC. Reverting changes.
Training on augumented user 63857 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63857 AUC after training: 0.5
User 63857 does not improve AUC. Reverting changes.
Training on augumented user 51435 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51435 AUC after training: 0.5
User 51435 does not improve AUC. Reverting changes.
Training on augumented user 107481 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107481 AUC after training: 0.5
User 107481 does not improve AUC. Reverting changes.
Training on augumented user 114729 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114729 AUC after training: 0.5
User 114729 does not improve AUC. Reverting changes.
Training on augumented user 18436 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18436 AUC after training: 0.5
User 18436 does not improve AUC. Reverting changes.
Training on augumented user 21279 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21279 AUC after training: 0.5
User 21279 does not improve AUC. Reverting changes.
Training on augumented user 62460 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62460 AUC after training: 0.5
User 62460 does not improve AUC. Reverting changes.
Training on augumented user 64582 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64582 AUC after training: 0.5
User 64582 does not improve AUC. Reverting changes.
Training on augumented user 75218 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75218 AUC after training: 0.5
User 75218 does not improve AUC. Reverting changes.
Training on augumented user 52724 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52724 AUC after training: 0.5
User 52724 does not improve AUC. Reverting changes.
Training on augumented user 51680 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51680 AUC after training: 0.5
User 51680 does not improve AUC. Reverting changes.
Training on augumented user 86224 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86224 AUC after training: 0.5
User 86224 does not improve AUC. Reverting changes.
Training on augumented user 40816 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40816 AUC after training: 0.5
User 40816 does not improve AUC. Reverting changes.
Training on augumented user 3061 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3061 AUC after training: 0.5
User 3061 does not improve AUC. Reverting changes.
Training on augumented user 121999 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121999 AUC after training: 0.5
User 121999 does not improve AUC. Reverting changes.
Training on augumented user 23160 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23160 AUC after training: 0.5
User 23160 does not improve AUC. Reverting changes.
Training on augumented user 47230 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47230 AUC after training: 0.5
User 47230 does not improve AUC. Reverting changes.
Training on augumented user 31139 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31139 AUC after training: 0.5
User 31139 does not improve AUC. Reverting changes.
Training on augumented user 76301 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76301 AUC after training: 0.5
User 76301 does not improve AUC. Reverting changes.
Training on augumented user 12987 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12987 AUC after training: 0.5
User 12987 does not improve AUC. Reverting changes.
Training on augumented user 64417 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64417 AUC after training: 0.5
User 64417 does not improve AUC. Reverting changes.
Training on augumented user 105533 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105533 AUC after training: 0.5
User 105533 does not improve AUC. Reverting changes.
Training on augumented user 103930 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103930 AUC after training: 0.5
User 103930 does not improve AUC. Reverting changes.
Training on augumented user 56982 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56982 AUC after training: 0.5
User 56982 does not improve AUC. Reverting changes.
Training on augumented user 128657 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128657 AUC after training: 0.5
User 128657 does not improve AUC. Reverting changes.
Training on augumented user 112487 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112487 AUC after training: 0.5
User 112487 does not improve AUC. Reverting changes.
Training on augumented user 46331 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46331 AUC after training: 0.5
User 46331 does not improve AUC. Reverting changes.
Training on augumented user 87042 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87042 AUC after training: 0.5
User 87042 does not improve AUC. Reverting changes.
Training on augumented user 132573 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132573 AUC after training: 0.5
User 132573 does not improve AUC. Reverting changes.
Training on augumented user 103815 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103815 AUC after training: 0.5
User 103815 does not improve AUC. Reverting changes.
Training on augumented user 11930 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11930 AUC after training: 0.5
User 11930 does not improve AUC. Reverting changes.
Training on augumented user 62833 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62833 AUC after training: 0.5
User 62833 does not improve AUC. Reverting changes.
Training on augumented user 4113 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4113 AUC after training: 0.5
User 4113 does not improve AUC. Reverting changes.
Training on augumented user 50346 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50346 AUC after training: 0.5
User 50346 does not improve AUC. Reverting changes.
Training on augumented user 126174 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126174 AUC after training: 0.5
User 126174 does not improve AUC. Reverting changes.
Training on augumented user 63733 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63733 AUC after training: 0.5
User 63733 does not improve AUC. Reverting changes.
Training on augumented user 72387 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72387 AUC after training: 0.5
User 72387 does not improve AUC. Reverting changes.
Training on augumented user 39242 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39242 AUC after training: 0.5
User 39242 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:26:10.214665] start test user 32185 190/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:10.710260] start test user 32185 190/568 recall augumented users by random, augumented_users = [10125, 126578, 115930, 26044, 21032, 135896, 109419, 117825, 95238, 114506, 81389, 56497, 57230, 10831, 114236, 105797, 67005, 97461, 65553, 113650, 15297, 19228, 108779, 120224, 69534, 104533, 15614, 86764, 134073, 31328, 100131, 102977, 69451, 95553, 27558, 33085, 83785, 71882, 18333, 86328, 100789, 47398, 47647, 6190, 108144, 18120, 9715, 45700, 131125, 55906]
[2024-12-02 19:26:10.727518] user = 32185 Cloud 190/568
[2024-12-02 19:26:10.745598] user = 32185 Local 190/568
[2024-12-02 19:26:10.825024] user = 32185 Local+ 190/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:13.417431] user = 32185 MPDA- 190/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6598194833488951
Training on augumented user 10125 0/50 current_auc = 0.6598194833488951
User 10125 AUC after training: 0.6604419545596016
User 10125 improves AUC. Keeping the model.
Training on augumented user 126578 1/50 current_auc = 0.6604419545596016
User 126578 AUC after training: 0.6601307189542484
User 126578 does not improve AUC. Reverting changes.
Training on augumented user 115930 2/50 current_auc = 0.6604419545596016
User 115930 AUC after training: 0.6607531901649548
User 115930 improves AUC. Keeping the model.
Training on augumented user 26044 3/50 current_auc = 0.6607531901649548
User 26044 AUC after training: 0.6607531901649548
User 26044 does not improve AUC. Reverting changes.
Training on augumented user 21032 4/50 current_auc = 0.6607531901649548
User 21032 AUC after training: 0.6604419545596016
User 21032 does not improve AUC. Reverting changes.
Training on augumented user 135896 5/50 current_auc = 0.6607531901649548
User 135896 AUC after training: 0.6598194833488951
User 135896 does not improve AUC. Reverting changes.
Training on augumented user 109419 6/50 current_auc = 0.6607531901649548
User 109419 AUC after training: 0.6601307189542484
User 109419 does not improve AUC. Reverting changes.
Training on augumented user 117825 7/50 current_auc = 0.6607531901649548
User 117825 AUC after training: 0.6588857765328354
User 117825 does not improve AUC. Reverting changes.
Training on augumented user 95238 8/50 current_auc = 0.6607531901649548
User 95238 AUC after training: 0.6601307189542484
User 95238 does not improve AUC. Reverting changes.
Training on augumented user 114506 9/50 current_auc = 0.6607531901649548
User 114506 AUC after training: 0.6607531901649549
User 114506 improves AUC. Keeping the model.
Training on augumented user 81389 10/50 current_auc = 0.6607531901649549
User 81389 AUC after training: 0.6607531901649548
User 81389 does not improve AUC. Reverting changes.
Training on augumented user 56497 11/50 current_auc = 0.6607531901649549
User 56497 AUC after training: 0.6598194833488952
User 56497 does not improve AUC. Reverting changes.
Training on augumented user 57230 12/50 current_auc = 0.6607531901649549
User 57230 AUC after training: 0.658574540927482
User 57230 does not improve AUC. Reverting changes.
Training on augumented user 10831 13/50 current_auc = 0.6607531901649549
User 10831 AUC after training: 0.6595082477435419
User 10831 does not improve AUC. Reverting changes.
Training on augumented user 114236 14/50 current_auc = 0.6607531901649549
User 114236 AUC after training: 0.6607531901649548
User 114236 does not improve AUC. Reverting changes.
Training on augumented user 105797 15/50 current_auc = 0.6607531901649549
User 105797 AUC after training: 0.6601307189542485
User 105797 does not improve AUC. Reverting changes.
Training on augumented user 67005 16/50 current_auc = 0.6607531901649549
User 67005 AUC after training: 0.6604419545596015
User 67005 does not improve AUC. Reverting changes.
Training on augumented user 97461 17/50 current_auc = 0.6607531901649549
User 97461 AUC after training: 0.6598194833488951
User 97461 does not improve AUC. Reverting changes.
Training on augumented user 65553 18/50 current_auc = 0.6607531901649549
User 65553 AUC after training: 0.6601307189542484
User 65553 does not improve AUC. Reverting changes.
Training on augumented user 113650 19/50 current_auc = 0.6607531901649549
User 113650 AUC after training: 0.6607531901649549
User 113650 does not improve AUC. Reverting changes.
Training on augumented user 15297 20/50 current_auc = 0.6607531901649549
User 15297 AUC after training: 0.6610644257703081
User 15297 improves AUC. Keeping the model.
Training on augumented user 19228 21/50 current_auc = 0.6610644257703081
User 19228 AUC after training: 0.6613756613756614
User 19228 improves AUC. Keeping the model.
Training on augumented user 108779 22/50 current_auc = 0.6613756613756614
User 108779 AUC after training: 0.6610644257703081
User 108779 does not improve AUC. Reverting changes.
Training on augumented user 120224 23/50 current_auc = 0.6613756613756614
User 120224 AUC after training: 0.6616868969810146
User 120224 improves AUC. Keeping the model.
Training on augumented user 69534 24/50 current_auc = 0.6616868969810146
User 69534 AUC after training: 0.6610644257703081
User 69534 does not improve AUC. Reverting changes.
Training on augumented user 104533 25/50 current_auc = 0.6616868969810146
User 104533 AUC after training: 0.6610644257703081
User 104533 does not improve AUC. Reverting changes.
Training on augumented user 15614 26/50 current_auc = 0.6616868969810146
User 15614 AUC after training: 0.6613756613756613
User 15614 does not improve AUC. Reverting changes.
Training on augumented user 86764 27/50 current_auc = 0.6616868969810146
User 86764 AUC after training: 0.6610644257703081
User 86764 does not improve AUC. Reverting changes.
Training on augumented user 134073 28/50 current_auc = 0.6616868969810146
User 134073 AUC after training: 0.6613756613756614
User 134073 does not improve AUC. Reverting changes.
Training on augumented user 31328 29/50 current_auc = 0.6616868969810146
User 31328 AUC after training: 0.6610644257703081
User 31328 does not improve AUC. Reverting changes.
Training on augumented user 100131 30/50 current_auc = 0.6616868969810146
User 100131 AUC after training: 0.6607531901649548
User 100131 does not improve AUC. Reverting changes.
Training on augumented user 102977 31/50 current_auc = 0.6616868969810146
User 102977 AUC after training: 0.6616868969810146
User 102977 does not improve AUC. Reverting changes.
Training on augumented user 69451 32/50 current_auc = 0.6616868969810146
User 69451 AUC after training: 0.6601307189542484
User 69451 does not improve AUC. Reverting changes.
Training on augumented user 95553 33/50 current_auc = 0.6616868969810146
User 95553 AUC after training: 0.6610644257703081
User 95553 does not improve AUC. Reverting changes.
Training on augumented user 27558 34/50 current_auc = 0.6616868969810146
User 27558 AUC after training: 0.6601307189542484
User 27558 does not improve AUC. Reverting changes.
Training on augumented user 33085 35/50 current_auc = 0.6616868969810146
User 33085 AUC after training: 0.6616868969810147
User 33085 improves AUC. Keeping the model.
Training on augumented user 83785 36/50 current_auc = 0.6616868969810147
User 83785 AUC after training: 0.6604419545596016
User 83785 does not improve AUC. Reverting changes.
Training on augumented user 71882 37/50 current_auc = 0.6616868969810147
User 71882 AUC after training: 0.6607531901649549
User 71882 does not improve AUC. Reverting changes.
Training on augumented user 18333 38/50 current_auc = 0.6616868969810147
User 18333 AUC after training: 0.6601307189542484
User 18333 does not improve AUC. Reverting changes.
Training on augumented user 86328 39/50 current_auc = 0.6616868969810147
User 86328 AUC after training: 0.6610644257703081
User 86328 does not improve AUC. Reverting changes.
Training on augumented user 100789 40/50 current_auc = 0.6616868969810147
User 100789 AUC after training: 0.6607531901649549
User 100789 does not improve AUC. Reverting changes.
Training on augumented user 47398 41/50 current_auc = 0.6616868969810147
User 47398 AUC after training: 0.6613756613756613
User 47398 does not improve AUC. Reverting changes.
Training on augumented user 47647 42/50 current_auc = 0.6616868969810147
User 47647 AUC after training: 0.6613756613756614
User 47647 does not improve AUC. Reverting changes.
Training on augumented user 6190 43/50 current_auc = 0.6616868969810147
User 6190 AUC after training: 0.6616868969810147
User 6190 does not improve AUC. Reverting changes.
Training on augumented user 108144 44/50 current_auc = 0.6616868969810147
User 108144 AUC after training: 0.6619981325863679
User 108144 improves AUC. Keeping the model.
Training on augumented user 18120 45/50 current_auc = 0.6619981325863679
User 18120 AUC after training: 0.6601307189542484
User 18120 does not improve AUC. Reverting changes.
Training on augumented user 9715 46/50 current_auc = 0.6619981325863679
User 9715 AUC after training: 0.6607531901649548
User 9715 does not improve AUC. Reverting changes.
Training on augumented user 45700 47/50 current_auc = 0.6619981325863679
User 45700 AUC after training: 0.6619981325863679
User 45700 does not improve AUC. Reverting changes.
Training on augumented user 131125 48/50 current_auc = 0.6619981325863679
User 131125 AUC after training: 0.6601307189542485
User 131125 does not improve AUC. Reverting changes.
Training on augumented user 55906 49/50 current_auc = 0.6619981325863679
User 55906 AUC after training: 0.6619981325863679
User 55906 does not improve AUC. Reverting changes.
[2024-12-02 19:26:40.707674] start test user 32198 191/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:41.450619] start test user 32198 191/568 recall augumented users by random, augumented_users = [110400, 82858, 97630, 101573, 116261, 55198, 13620, 15156, 25196, 72590, 35569, 79772, 39366, 67279, 97423, 135654, 133410, 116864, 56534, 119459, 104967, 45266, 41362, 61617, 16366, 50089, 81392, 42121, 73772, 91207, 67666, 115532, 26751, 49682, 6867, 22679, 23019, 103955, 86819, 47176, 44295, 18512, 99922, 7985, 90490, 109299, 107404, 106756, 97769, 123588]
[2024-12-02 19:26:41.484353] user = 32198 Cloud 191/568
[2024-12-02 19:26:41.522990] user = 32198 Local 191/568
[2024-12-02 19:26:41.566677] user = 32198 Local+ 191/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:44.034563] user = 32198 MPDA- 191/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.375
Training on augumented user 110400 0/50 current_auc = 0.375
User 110400 AUC after training: 0.3888888888888889
User 110400 improves AUC. Keeping the model.
Training on augumented user 82858 1/50 current_auc = 0.3888888888888889
User 82858 AUC after training: 0.4166666666666667
User 82858 improves AUC. Keeping the model.
Training on augumented user 97630 2/50 current_auc = 0.4166666666666667
User 97630 AUC after training: 0.4166666666666667
User 97630 does not improve AUC. Reverting changes.
Training on augumented user 101573 3/50 current_auc = 0.4166666666666667
User 101573 AUC after training: 0.4027777777777778
User 101573 does not improve AUC. Reverting changes.
Training on augumented user 116261 4/50 current_auc = 0.4166666666666667
User 116261 AUC after training: 0.4166666666666667
User 116261 does not improve AUC. Reverting changes.
Training on augumented user 55198 5/50 current_auc = 0.4166666666666667
User 55198 AUC after training: 0.4166666666666667
User 55198 does not improve AUC. Reverting changes.
Training on augumented user 13620 6/50 current_auc = 0.4166666666666667
User 13620 AUC after training: 0.4166666666666667
User 13620 does not improve AUC. Reverting changes.
Training on augumented user 15156 7/50 current_auc = 0.4166666666666667
User 15156 AUC after training: 0.4166666666666667
User 15156 does not improve AUC. Reverting changes.
Training on augumented user 25196 8/50 current_auc = 0.4166666666666667
User 25196 AUC after training: 0.4166666666666667
User 25196 does not improve AUC. Reverting changes.
Training on augumented user 72590 9/50 current_auc = 0.4166666666666667
User 72590 AUC after training: 0.4166666666666667
User 72590 does not improve AUC. Reverting changes.
Training on augumented user 35569 10/50 current_auc = 0.4166666666666667
User 35569 AUC after training: 0.4166666666666667
User 35569 does not improve AUC. Reverting changes.
Training on augumented user 79772 11/50 current_auc = 0.4166666666666667
User 79772 AUC after training: 0.4166666666666667
User 79772 does not improve AUC. Reverting changes.
Training on augumented user 39366 12/50 current_auc = 0.4166666666666667
User 39366 AUC after training: 0.4166666666666667
User 39366 does not improve AUC. Reverting changes.
Training on augumented user 67279 13/50 current_auc = 0.4166666666666667
User 67279 AUC after training: 0.4166666666666667
User 67279 does not improve AUC. Reverting changes.
Training on augumented user 97423 14/50 current_auc = 0.4166666666666667
User 97423 AUC after training: 0.4166666666666667
User 97423 does not improve AUC. Reverting changes.
Training on augumented user 135654 15/50 current_auc = 0.4166666666666667
User 135654 AUC after training: 0.4166666666666667
User 135654 does not improve AUC. Reverting changes.
Training on augumented user 133410 16/50 current_auc = 0.4166666666666667
User 133410 AUC after training: 0.4166666666666667
User 133410 does not improve AUC. Reverting changes.
Training on augumented user 116864 17/50 current_auc = 0.4166666666666667
User 116864 AUC after training: 0.4166666666666667
User 116864 does not improve AUC. Reverting changes.
Training on augumented user 56534 18/50 current_auc = 0.4166666666666667
User 56534 AUC after training: 0.4166666666666667
User 56534 does not improve AUC. Reverting changes.
Training on augumented user 119459 19/50 current_auc = 0.4166666666666667
User 119459 AUC after training: 0.4166666666666667
User 119459 does not improve AUC. Reverting changes.
Training on augumented user 104967 20/50 current_auc = 0.4166666666666667
User 104967 AUC after training: 0.4166666666666667
User 104967 does not improve AUC. Reverting changes.
Training on augumented user 45266 21/50 current_auc = 0.4166666666666667
User 45266 AUC after training: 0.4166666666666667
User 45266 does not improve AUC. Reverting changes.
Training on augumented user 41362 22/50 current_auc = 0.4166666666666667
User 41362 AUC after training: 0.4166666666666667
User 41362 does not improve AUC. Reverting changes.
Training on augumented user 61617 23/50 current_auc = 0.4166666666666667
User 61617 AUC after training: 0.4166666666666667
User 61617 does not improve AUC. Reverting changes.
Training on augumented user 16366 24/50 current_auc = 0.4166666666666667
User 16366 AUC after training: 0.4166666666666667
User 16366 does not improve AUC. Reverting changes.
Training on augumented user 50089 25/50 current_auc = 0.4166666666666667
User 50089 AUC after training: 0.4166666666666667
User 50089 does not improve AUC. Reverting changes.
Training on augumented user 81392 26/50 current_auc = 0.4166666666666667
User 81392 AUC after training: 0.4166666666666667
User 81392 does not improve AUC. Reverting changes.
Training on augumented user 42121 27/50 current_auc = 0.4166666666666667
User 42121 AUC after training: 0.4166666666666667
User 42121 does not improve AUC. Reverting changes.
Training on augumented user 73772 28/50 current_auc = 0.4166666666666667
User 73772 AUC after training: 0.4166666666666667
User 73772 does not improve AUC. Reverting changes.
Training on augumented user 91207 29/50 current_auc = 0.4166666666666667
User 91207 AUC after training: 0.4027777777777778
User 91207 does not improve AUC. Reverting changes.
Training on augumented user 67666 30/50 current_auc = 0.4166666666666667
User 67666 AUC after training: 0.4027777777777778
User 67666 does not improve AUC. Reverting changes.
Training on augumented user 115532 31/50 current_auc = 0.4166666666666667
User 115532 AUC after training: 0.4166666666666667
User 115532 does not improve AUC. Reverting changes.
Training on augumented user 26751 32/50 current_auc = 0.4166666666666667
User 26751 AUC after training: 0.4166666666666667
User 26751 does not improve AUC. Reverting changes.
Training on augumented user 49682 33/50 current_auc = 0.4166666666666667
User 49682 AUC after training: 0.4166666666666667
User 49682 does not improve AUC. Reverting changes.
Training on augumented user 6867 34/50 current_auc = 0.4166666666666667
User 6867 AUC after training: 0.4166666666666667
User 6867 does not improve AUC. Reverting changes.
Training on augumented user 22679 35/50 current_auc = 0.4166666666666667
User 22679 AUC after training: 0.4166666666666667
User 22679 does not improve AUC. Reverting changes.
Training on augumented user 23019 36/50 current_auc = 0.4166666666666667
User 23019 AUC after training: 0.4166666666666667
User 23019 does not improve AUC. Reverting changes.
Training on augumented user 103955 37/50 current_auc = 0.4166666666666667
User 103955 AUC after training: 0.4166666666666667
User 103955 does not improve AUC. Reverting changes.
Training on augumented user 86819 38/50 current_auc = 0.4166666666666667
User 86819 AUC after training: 0.4166666666666667
User 86819 does not improve AUC. Reverting changes.
Training on augumented user 47176 39/50 current_auc = 0.4166666666666667
User 47176 AUC after training: 0.4166666666666667
User 47176 does not improve AUC. Reverting changes.
Training on augumented user 44295 40/50 current_auc = 0.4166666666666667
User 44295 AUC after training: 0.4166666666666667
User 44295 does not improve AUC. Reverting changes.
Training on augumented user 18512 41/50 current_auc = 0.4166666666666667
User 18512 AUC after training: 0.4166666666666667
User 18512 does not improve AUC. Reverting changes.
Training on augumented user 99922 42/50 current_auc = 0.4166666666666667
User 99922 AUC after training: 0.4166666666666667
User 99922 does not improve AUC. Reverting changes.
Training on augumented user 7985 43/50 current_auc = 0.4166666666666667
User 7985 AUC after training: 0.4166666666666667
User 7985 does not improve AUC. Reverting changes.
Training on augumented user 90490 44/50 current_auc = 0.4166666666666667
User 90490 AUC after training: 0.4027777777777778
User 90490 does not improve AUC. Reverting changes.
Training on augumented user 109299 45/50 current_auc = 0.4166666666666667
User 109299 AUC after training: 0.375
User 109299 does not improve AUC. Reverting changes.
Training on augumented user 107404 46/50 current_auc = 0.4166666666666667
User 107404 AUC after training: 0.4166666666666667
User 107404 does not improve AUC. Reverting changes.
Training on augumented user 106756 47/50 current_auc = 0.4166666666666667
User 106756 AUC after training: 0.4166666666666667
User 106756 does not improve AUC. Reverting changes.
Training on augumented user 97769 48/50 current_auc = 0.4166666666666667
User 97769 AUC after training: 0.4166666666666667
User 97769 does not improve AUC. Reverting changes.
Training on augumented user 123588 49/50 current_auc = 0.4166666666666667
User 123588 AUC after training: 0.4166666666666667
User 123588 does not improve AUC. Reverting changes.
[2024-12-02 19:27:14.573211] start test user 32222 192/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:15.277172] start test user 32222 192/568 recall augumented users by random, augumented_users = [14786, 109752, 50953, 25485, 54276, 32182, 45878, 83966, 69573, 49230, 106941, 19819, 22876, 51800, 60344, 120035, 60570, 14232, 35430, 69019, 25595, 111239, 15547, 22087, 96460, 2397, 105038, 69702, 10441, 88613, 114290, 110120, 92059, 6440, 72695, 137630, 135933, 108364, 4159, 2443, 90544, 120533, 107310, 26986, 1719, 102159, 4068, 76238, 122458, 75534]
[2024-12-02 19:27:15.298809] user = 32222 Cloud 192/568
[2024-12-02 19:27:15.310893] user = 32222 Local 192/568
[2024-12-02 19:27:15.419754] user = 32222 Local+ 192/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:17.997227] user = 32222 MPDA- 192/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6458333333333334
Training on augumented user 14786 0/50 current_auc = 0.6458333333333334
User 14786 AUC after training: 0.6447368421052632
User 14786 does not improve AUC. Reverting changes.
Training on augumented user 109752 1/50 current_auc = 0.6458333333333334
User 109752 AUC after training: 0.6458333333333334
User 109752 does not improve AUC. Reverting changes.
Training on augumented user 50953 2/50 current_auc = 0.6458333333333334
User 50953 AUC after training: 0.6469298245614035
User 50953 improves AUC. Keeping the model.
Training on augumented user 25485 3/50 current_auc = 0.6469298245614035
User 25485 AUC after training: 0.6480263157894737
User 25485 improves AUC. Keeping the model.
Training on augumented user 54276 4/50 current_auc = 0.6480263157894737
User 54276 AUC after training: 0.6491228070175438
User 54276 improves AUC. Keeping the model.
Training on augumented user 32182 5/50 current_auc = 0.6491228070175438
User 32182 AUC after training: 0.6491228070175438
User 32182 does not improve AUC. Reverting changes.
Training on augumented user 45878 6/50 current_auc = 0.6491228070175438
User 45878 AUC after training: 0.6491228070175438
User 45878 does not improve AUC. Reverting changes.
Training on augumented user 83966 7/50 current_auc = 0.6491228070175438
User 83966 AUC after training: 0.6491228070175438
User 83966 does not improve AUC. Reverting changes.
Training on augumented user 69573 8/50 current_auc = 0.6491228070175438
User 69573 AUC after training: 0.6491228070175438
User 69573 does not improve AUC. Reverting changes.
Training on augumented user 49230 9/50 current_auc = 0.6491228070175438
User 49230 AUC after training: 0.6469298245614035
User 49230 does not improve AUC. Reverting changes.
Training on augumented user 106941 10/50 current_auc = 0.6491228070175438
User 106941 AUC after training: 0.6458333333333334
User 106941 does not improve AUC. Reverting changes.
Training on augumented user 19819 11/50 current_auc = 0.6491228070175438
User 19819 AUC after training: 0.6491228070175438
User 19819 does not improve AUC. Reverting changes.
Training on augumented user 22876 12/50 current_auc = 0.6491228070175438
User 22876 AUC after training: 0.6491228070175438
User 22876 does not improve AUC. Reverting changes.
Training on augumented user 51800 13/50 current_auc = 0.6491228070175438
User 51800 AUC after training: 0.6491228070175438
User 51800 does not improve AUC. Reverting changes.
Training on augumented user 60344 14/50 current_auc = 0.6491228070175438
User 60344 AUC after training: 0.6491228070175438
User 60344 does not improve AUC. Reverting changes.
Training on augumented user 120035 15/50 current_auc = 0.6491228070175438
User 120035 AUC after training: 0.6480263157894738
User 120035 does not improve AUC. Reverting changes.
Training on augumented user 60570 16/50 current_auc = 0.6491228070175438
User 60570 AUC after training: 0.6480263157894737
User 60570 does not improve AUC. Reverting changes.
Training on augumented user 14232 17/50 current_auc = 0.6491228070175438
User 14232 AUC after training: 0.6480263157894737
User 14232 does not improve AUC. Reverting changes.
Training on augumented user 35430 18/50 current_auc = 0.6491228070175438
User 35430 AUC after training: 0.6469298245614036
User 35430 does not improve AUC. Reverting changes.
Training on augumented user 69019 19/50 current_auc = 0.6491228070175438
User 69019 AUC after training: 0.6480263157894737
User 69019 does not improve AUC. Reverting changes.
Training on augumented user 25595 20/50 current_auc = 0.6491228070175438
User 25595 AUC after training: 0.6458333333333334
User 25595 does not improve AUC. Reverting changes.
Training on augumented user 111239 21/50 current_auc = 0.6491228070175438
User 111239 AUC after training: 0.6491228070175438
User 111239 does not improve AUC. Reverting changes.
Training on augumented user 15547 22/50 current_auc = 0.6491228070175438
User 15547 AUC after training: 0.6491228070175438
User 15547 does not improve AUC. Reverting changes.
Training on augumented user 22087 23/50 current_auc = 0.6491228070175438
User 22087 AUC after training: 0.6491228070175438
User 22087 does not improve AUC. Reverting changes.
Training on augumented user 96460 24/50 current_auc = 0.6491228070175438
User 96460 AUC after training: 0.6480263157894737
User 96460 does not improve AUC. Reverting changes.
Training on augumented user 2397 25/50 current_auc = 0.6491228070175438
User 2397 AUC after training: 0.6458333333333334
User 2397 does not improve AUC. Reverting changes.
Training on augumented user 105038 26/50 current_auc = 0.6491228070175438
User 105038 AUC after training: 0.6491228070175438
User 105038 does not improve AUC. Reverting changes.
Training on augumented user 69702 27/50 current_auc = 0.6491228070175438
User 69702 AUC after training: 0.643640350877193
User 69702 does not improve AUC. Reverting changes.
Training on augumented user 10441 28/50 current_auc = 0.6491228070175438
User 10441 AUC after training: 0.6491228070175438
User 10441 does not improve AUC. Reverting changes.
Training on augumented user 88613 29/50 current_auc = 0.6491228070175438
User 88613 AUC after training: 0.6458333333333334
User 88613 does not improve AUC. Reverting changes.
Training on augumented user 114290 30/50 current_auc = 0.6491228070175438
User 114290 AUC after training: 0.6491228070175438
User 114290 does not improve AUC. Reverting changes.
Training on augumented user 110120 31/50 current_auc = 0.6491228070175438
User 110120 AUC after training: 0.6491228070175438
User 110120 does not improve AUC. Reverting changes.
Training on augumented user 92059 32/50 current_auc = 0.6491228070175438
User 92059 AUC after training: 0.6491228070175439
User 92059 improves AUC. Keeping the model.
Training on augumented user 6440 33/50 current_auc = 0.6491228070175439
User 6440 AUC after training: 0.6480263157894737
User 6440 does not improve AUC. Reverting changes.
Training on augumented user 72695 34/50 current_auc = 0.6491228070175439
User 72695 AUC after training: 0.6480263157894738
User 72695 does not improve AUC. Reverting changes.
Training on augumented user 137630 35/50 current_auc = 0.6491228070175439
User 137630 AUC after training: 0.6480263157894738
User 137630 does not improve AUC. Reverting changes.
Training on augumented user 135933 36/50 current_auc = 0.6491228070175439
User 135933 AUC after training: 0.6469298245614036
User 135933 does not improve AUC. Reverting changes.
Training on augumented user 108364 37/50 current_auc = 0.6491228070175439
User 108364 AUC after training: 0.6491228070175439
User 108364 does not improve AUC. Reverting changes.
Training on augumented user 4159 38/50 current_auc = 0.6491228070175439
User 4159 AUC after training: 0.6480263157894738
User 4159 does not improve AUC. Reverting changes.
Training on augumented user 2443 39/50 current_auc = 0.6491228070175439
User 2443 AUC after training: 0.6469298245614036
User 2443 does not improve AUC. Reverting changes.
Training on augumented user 90544 40/50 current_auc = 0.6491228070175439
User 90544 AUC after training: 0.6491228070175439
User 90544 does not improve AUC. Reverting changes.
Training on augumented user 120533 41/50 current_auc = 0.6491228070175439
User 120533 AUC after training: 0.6480263157894738
User 120533 does not improve AUC. Reverting changes.
Training on augumented user 107310 42/50 current_auc = 0.6491228070175439
User 107310 AUC after training: 0.6480263157894738
User 107310 does not improve AUC. Reverting changes.
Training on augumented user 26986 43/50 current_auc = 0.6491228070175439
User 26986 AUC after training: 0.6491228070175439
User 26986 does not improve AUC. Reverting changes.
Training on augumented user 1719 44/50 current_auc = 0.6491228070175439
User 1719 AUC after training: 0.6491228070175439
User 1719 does not improve AUC. Reverting changes.
Training on augumented user 102159 45/50 current_auc = 0.6491228070175439
User 102159 AUC after training: 0.6469298245614036
User 102159 does not improve AUC. Reverting changes.
Training on augumented user 4068 46/50 current_auc = 0.6491228070175439
User 4068 AUC after training: 0.6480263157894738
User 4068 does not improve AUC. Reverting changes.
Training on augumented user 76238 47/50 current_auc = 0.6491228070175439
User 76238 AUC after training: 0.6480263157894738
User 76238 does not improve AUC. Reverting changes.
Training on augumented user 122458 48/50 current_auc = 0.6491228070175439
User 122458 AUC after training: 0.6480263157894738
User 122458 does not improve AUC. Reverting changes.
Training on augumented user 75534 49/50 current_auc = 0.6491228070175439
User 75534 AUC after training: 0.6480263157894738
User 75534 does not improve AUC. Reverting changes.
[2024-12-02 19:27:41.987384] start test user 32284 193/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:42.395059] start test user 32284 193/568 recall augumented users by random, augumented_users = [109986, 8031, 135117, 18577, 82845, 12354, 115744, 119499, 30296, 103516, 78658, 117606, 13357, 46604, 122301, 50286, 98891, 11212, 110898, 120339, 47761, 93500, 11167, 86858, 64500, 136774, 103512, 115086, 78672, 48605, 66918, 34230, 130354, 124259, 55652, 109583, 114710, 18859, 17004, 111972, 39411, 4856, 7273, 10047, 36559, 50561, 134273, 26980, 94245, 84301]
[2024-12-02 19:27:42.410201] user = 32284 Cloud 193/568
[2024-12-02 19:27:42.432647] user = 32284 Local 193/568
[2024-12-02 19:27:42.577400] user = 32284 Local+ 193/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:44.730325] user = 32284 MPDA- 193/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5952528379772962
Training on augumented user 109986 0/50 current_auc = 0.5952528379772962
User 109986 AUC after training: 0.5943240454076367
User 109986 does not improve AUC. Reverting changes.
Training on augumented user 8031 1/50 current_auc = 0.5952528379772962
User 8031 AUC after training: 0.5948400412796698
User 8031 does not improve AUC. Reverting changes.
Training on augumented user 135117 2/50 current_auc = 0.5952528379772962
User 135117 AUC after training: 0.5948400412796698
User 135117 does not improve AUC. Reverting changes.
Training on augumented user 18577 3/50 current_auc = 0.5952528379772962
User 18577 AUC after training: 0.5936016511867905
User 18577 does not improve AUC. Reverting changes.
Training on augumented user 82845 4/50 current_auc = 0.5952528379772962
User 82845 AUC after training: 0.5943756449948401
User 82845 does not improve AUC. Reverting changes.
Training on augumented user 12354 5/50 current_auc = 0.5952528379772962
User 12354 AUC after training: 0.595046439628483
User 12354 does not improve AUC. Reverting changes.
Training on augumented user 115744 6/50 current_auc = 0.5952528379772962
User 115744 AUC after training: 0.5938080495356037
User 115744 does not improve AUC. Reverting changes.
Training on augumented user 119499 7/50 current_auc = 0.5952528379772962
User 119499 AUC after training: 0.5947368421052631
User 119499 does not improve AUC. Reverting changes.
Training on augumented user 30296 8/50 current_auc = 0.5952528379772962
User 30296 AUC after training: 0.5940144478844169
User 30296 does not improve AUC. Reverting changes.
Training on augumented user 103516 9/50 current_auc = 0.5952528379772962
User 103516 AUC after training: 0.5940144478844169
User 103516 does not improve AUC. Reverting changes.
Training on augumented user 78658 10/50 current_auc = 0.5952528379772962
User 78658 AUC after training: 0.5950980392156864
User 78658 does not improve AUC. Reverting changes.
Training on augumented user 117606 11/50 current_auc = 0.5952528379772962
User 117606 AUC after training: 0.5944272445820434
User 117606 does not improve AUC. Reverting changes.
Training on augumented user 13357 12/50 current_auc = 0.5952528379772962
User 13357 AUC after training: 0.5934984520123839
User 13357 does not improve AUC. Reverting changes.
Training on augumented user 46604 13/50 current_auc = 0.5952528379772962
User 46604 AUC after training: 0.5932920536635707
User 46604 does not improve AUC. Reverting changes.
Training on augumented user 122301 14/50 current_auc = 0.5952528379772962
User 122301 AUC after training: 0.5932920536635707
User 122301 does not improve AUC. Reverting changes.
Training on augumented user 50286 15/50 current_auc = 0.5952528379772962
User 50286 AUC after training: 0.5920020639834881
User 50286 does not improve AUC. Reverting changes.
Training on augumented user 98891 16/50 current_auc = 0.5952528379772962
User 98891 AUC after training: 0.5946336429308566
User 98891 does not improve AUC. Reverting changes.
Training on augumented user 11212 17/50 current_auc = 0.5952528379772962
User 11212 AUC after training: 0.5948916408668731
User 11212 does not improve AUC. Reverting changes.
Training on augumented user 110898 18/50 current_auc = 0.5952528379772962
User 110898 AUC after training: 0.5950980392156863
User 110898 does not improve AUC. Reverting changes.
Training on augumented user 120339 19/50 current_auc = 0.5952528379772962
User 120339 AUC after training: 0.5922084623323013
User 120339 does not improve AUC. Reverting changes.
Training on augumented user 47761 20/50 current_auc = 0.5952528379772962
User 47761 AUC after training: 0.5943756449948401
User 47761 does not improve AUC. Reverting changes.
Training on augumented user 93500 21/50 current_auc = 0.5952528379772962
User 93500 AUC after training: 0.5943756449948402
User 93500 does not improve AUC. Reverting changes.
Training on augumented user 11167 22/50 current_auc = 0.5952528379772962
User 11167 AUC after training: 0.5949432404540764
User 11167 does not improve AUC. Reverting changes.
Training on augumented user 86858 23/50 current_auc = 0.5952528379772962
User 86858 AUC after training: 0.5933952528379774
User 86858 does not improve AUC. Reverting changes.
Training on augumented user 64500 24/50 current_auc = 0.5952528379772962
User 64500 AUC after training: 0.5945820433436533
User 64500 does not improve AUC. Reverting changes.
Training on augumented user 136774 25/50 current_auc = 0.5952528379772962
User 136774 AUC after training: 0.5944788441692467
User 136774 does not improve AUC. Reverting changes.
Training on augumented user 103512 26/50 current_auc = 0.5952528379772962
User 103512 AUC after training: 0.5945304437564499
User 103512 does not improve AUC. Reverting changes.
Training on augumented user 115086 27/50 current_auc = 0.5952528379772962
User 115086 AUC after training: 0.5940144478844169
User 115086 does not improve AUC. Reverting changes.
Training on augumented user 78672 28/50 current_auc = 0.5952528379772962
User 78672 AUC after training: 0.5948400412796698
User 78672 does not improve AUC. Reverting changes.
Training on augumented user 48605 29/50 current_auc = 0.5952528379772962
User 48605 AUC after training: 0.5947368421052632
User 48605 does not improve AUC. Reverting changes.
Training on augumented user 66918 30/50 current_auc = 0.5952528379772962
User 66918 AUC after training: 0.5938080495356038
User 66918 does not improve AUC. Reverting changes.
Training on augumented user 34230 31/50 current_auc = 0.5952528379772962
User 34230 AUC after training: 0.5940144478844169
User 34230 does not improve AUC. Reverting changes.
Training on augumented user 130354 32/50 current_auc = 0.5952528379772962
User 130354 AUC after training: 0.5924148606811146
User 130354 does not improve AUC. Reverting changes.
Training on augumented user 124259 33/50 current_auc = 0.5952528379772962
User 124259 AUC after training: 0.5949432404540764
User 124259 does not improve AUC. Reverting changes.
Training on augumented user 55652 34/50 current_auc = 0.5952528379772962
User 55652 AUC after training: 0.5946336429308566
User 55652 does not improve AUC. Reverting changes.
Training on augumented user 109583 35/50 current_auc = 0.5952528379772962
User 109583 AUC after training: 0.5943756449948401
User 109583 does not improve AUC. Reverting changes.
Training on augumented user 114710 36/50 current_auc = 0.5952528379772962
User 114710 AUC after training: 0.5939112487100104
User 114710 does not improve AUC. Reverting changes.
Training on augumented user 18859 37/50 current_auc = 0.5952528379772962
User 18859 AUC after training: 0.5947884416924665
User 18859 does not improve AUC. Reverting changes.
Training on augumented user 17004 38/50 current_auc = 0.5952528379772962
User 17004 AUC after training: 0.5952528379772962
User 17004 does not improve AUC. Reverting changes.
Training on augumented user 111972 39/50 current_auc = 0.5952528379772962
User 111972 AUC after training: 0.5935500515995873
User 111972 does not improve AUC. Reverting changes.
Training on augumented user 39411 40/50 current_auc = 0.5952528379772962
User 39411 AUC after training: 0.5939112487100103
User 39411 does not improve AUC. Reverting changes.
Training on augumented user 4856 41/50 current_auc = 0.5952528379772962
User 4856 AUC after training: 0.5941176470588235
User 4856 does not improve AUC. Reverting changes.
Training on augumented user 7273 42/50 current_auc = 0.5952528379772962
User 7273 AUC after training: 0.5949432404540764
User 7273 does not improve AUC. Reverting changes.
Training on augumented user 10047 43/50 current_auc = 0.5952528379772962
User 10047 AUC after training: 0.5941176470588236
User 10047 does not improve AUC. Reverting changes.
Training on augumented user 36559 44/50 current_auc = 0.5952528379772962
User 36559 AUC after training: 0.5933436532507741
User 36559 does not improve AUC. Reverting changes.
Training on augumented user 50561 45/50 current_auc = 0.5952528379772962
User 50561 AUC after training: 0.5951496388028896
User 50561 does not improve AUC. Reverting changes.
Training on augumented user 134273 46/50 current_auc = 0.5952528379772962
User 134273 AUC after training: 0.5946336429308565
User 134273 does not improve AUC. Reverting changes.
Training on augumented user 26980 47/50 current_auc = 0.5952528379772962
User 26980 AUC after training: 0.5933952528379773
User 26980 does not improve AUC. Reverting changes.
Training on augumented user 94245 48/50 current_auc = 0.5952528379772962
User 94245 AUC after training: 0.5935500515995873
User 94245 does not improve AUC. Reverting changes.
Training on augumented user 84301 49/50 current_auc = 0.5952528379772962
User 84301 AUC after training: 0.5934984520123839
User 84301 does not improve AUC. Reverting changes.
[2024-12-02 19:28:17.205699] start test user 32337 194/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:17.785739] start test user 32337 194/568 recall augumented users by random, augumented_users = [84709, 76517, 51342, 3436, 74376, 98906, 30054, 13252, 61931, 19360, 84064, 6304, 35552, 43299, 110793, 93059, 136799, 102363, 119752, 81921, 98153, 129998, 33356, 130212, 44196, 61281, 75676, 104937, 28205, 84588, 48290, 53199, 45533, 44348, 122890, 36909, 48032, 56911, 54668, 67304, 70718, 114655, 59259, 59304, 117917, 113866, 23687, 84279, 45945, 84053]
[2024-12-02 19:28:17.802932] user = 32337 Cloud 194/568
[2024-12-02 19:28:17.813584] user = 32337 Local 194/568
[2024-12-02 19:28:17.877520] user = 32337 Local+ 194/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:19.919304] user = 32337 MPDA- 194/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4444444444444445
Training on augumented user 84709 0/50 current_auc = 0.4444444444444445
User 84709 AUC after training: 0.4444444444444445
User 84709 does not improve AUC. Reverting changes.
Training on augumented user 76517 1/50 current_auc = 0.4444444444444445
User 76517 AUC after training: 0.4444444444444445
User 76517 does not improve AUC. Reverting changes.
Training on augumented user 51342 2/50 current_auc = 0.4444444444444445
User 51342 AUC after training: 0.4444444444444445
User 51342 does not improve AUC. Reverting changes.
Training on augumented user 3436 3/50 current_auc = 0.4444444444444445
User 3436 AUC after training: 0.4444444444444445
User 3436 does not improve AUC. Reverting changes.
Training on augumented user 74376 4/50 current_auc = 0.4444444444444445
User 74376 AUC after training: 0.4444444444444445
User 74376 does not improve AUC. Reverting changes.
Training on augumented user 98906 5/50 current_auc = 0.4444444444444445
User 98906 AUC after training: 0.4444444444444445
User 98906 does not improve AUC. Reverting changes.
Training on augumented user 30054 6/50 current_auc = 0.4444444444444445
User 30054 AUC after training: 0.4444444444444445
User 30054 does not improve AUC. Reverting changes.
Training on augumented user 13252 7/50 current_auc = 0.4444444444444445
User 13252 AUC after training: 0.4444444444444445
User 13252 does not improve AUC. Reverting changes.
Training on augumented user 61931 8/50 current_auc = 0.4444444444444445
User 61931 AUC after training: 0.4444444444444445
User 61931 does not improve AUC. Reverting changes.
Training on augumented user 19360 9/50 current_auc = 0.4444444444444445
User 19360 AUC after training: 0.4444444444444445
User 19360 does not improve AUC. Reverting changes.
Training on augumented user 84064 10/50 current_auc = 0.4444444444444445
User 84064 AUC after training: 0.4444444444444445
User 84064 does not improve AUC. Reverting changes.
Training on augumented user 6304 11/50 current_auc = 0.4444444444444445
User 6304 AUC after training: 0.4444444444444445
User 6304 does not improve AUC. Reverting changes.
Training on augumented user 35552 12/50 current_auc = 0.4444444444444445
User 35552 AUC after training: 0.4444444444444445
User 35552 does not improve AUC. Reverting changes.
Training on augumented user 43299 13/50 current_auc = 0.4444444444444445
User 43299 AUC after training: 0.4444444444444445
User 43299 does not improve AUC. Reverting changes.
Training on augumented user 110793 14/50 current_auc = 0.4444444444444445
User 110793 AUC after training: 0.4444444444444445
User 110793 does not improve AUC. Reverting changes.
Training on augumented user 93059 15/50 current_auc = 0.4444444444444445
User 93059 AUC after training: 0.4444444444444445
User 93059 does not improve AUC. Reverting changes.
Training on augumented user 136799 16/50 current_auc = 0.4444444444444445
User 136799 AUC after training: 0.4444444444444445
User 136799 does not improve AUC. Reverting changes.
Training on augumented user 102363 17/50 current_auc = 0.4444444444444445
User 102363 AUC after training: 0.4444444444444445
User 102363 does not improve AUC. Reverting changes.
Training on augumented user 119752 18/50 current_auc = 0.4444444444444445
User 119752 AUC after training: 0.4444444444444445
User 119752 does not improve AUC. Reverting changes.
Training on augumented user 81921 19/50 current_auc = 0.4444444444444445
User 81921 AUC after training: 0.4444444444444445
User 81921 does not improve AUC. Reverting changes.
Training on augumented user 98153 20/50 current_auc = 0.4444444444444445
User 98153 AUC after training: 0.4444444444444445
User 98153 does not improve AUC. Reverting changes.
Training on augumented user 129998 21/50 current_auc = 0.4444444444444445
User 129998 AUC after training: 0.4444444444444445
User 129998 does not improve AUC. Reverting changes.
Training on augumented user 33356 22/50 current_auc = 0.4444444444444445
User 33356 AUC after training: 0.4444444444444445
User 33356 does not improve AUC. Reverting changes.
Training on augumented user 130212 23/50 current_auc = 0.4444444444444445
User 130212 AUC after training: 0.4444444444444445
User 130212 does not improve AUC. Reverting changes.
Training on augumented user 44196 24/50 current_auc = 0.4444444444444445
User 44196 AUC after training: 0.4444444444444445
User 44196 does not improve AUC. Reverting changes.
Training on augumented user 61281 25/50 current_auc = 0.4444444444444445
User 61281 AUC after training: 0.4444444444444445
User 61281 does not improve AUC. Reverting changes.
Training on augumented user 75676 26/50 current_auc = 0.4444444444444445
User 75676 AUC after training: 0.4444444444444445
User 75676 does not improve AUC. Reverting changes.
Training on augumented user 104937 27/50 current_auc = 0.4444444444444445
User 104937 AUC after training: 0.4444444444444445
User 104937 does not improve AUC. Reverting changes.
Training on augumented user 28205 28/50 current_auc = 0.4444444444444445
User 28205 AUC after training: 0.4444444444444445
User 28205 does not improve AUC. Reverting changes.
Training on augumented user 84588 29/50 current_auc = 0.4444444444444445
User 84588 AUC after training: 0.4444444444444445
User 84588 does not improve AUC. Reverting changes.
Training on augumented user 48290 30/50 current_auc = 0.4444444444444445
User 48290 AUC after training: 0.4444444444444445
User 48290 does not improve AUC. Reverting changes.
Training on augumented user 53199 31/50 current_auc = 0.4444444444444445
User 53199 AUC after training: 0.4444444444444445
User 53199 does not improve AUC. Reverting changes.
Training on augumented user 45533 32/50 current_auc = 0.4444444444444445
User 45533 AUC after training: 0.4444444444444445
User 45533 does not improve AUC. Reverting changes.
Training on augumented user 44348 33/50 current_auc = 0.4444444444444445
User 44348 AUC after training: 0.4444444444444445
User 44348 does not improve AUC. Reverting changes.
Training on augumented user 122890 34/50 current_auc = 0.4444444444444445
User 122890 AUC after training: 0.4444444444444445
User 122890 does not improve AUC. Reverting changes.
Training on augumented user 36909 35/50 current_auc = 0.4444444444444445
User 36909 AUC after training: 0.4444444444444445
User 36909 does not improve AUC. Reverting changes.
Training on augumented user 48032 36/50 current_auc = 0.4444444444444445
User 48032 AUC after training: 0.4444444444444445
User 48032 does not improve AUC. Reverting changes.
Training on augumented user 56911 37/50 current_auc = 0.4444444444444445
User 56911 AUC after training: 0.4444444444444445
User 56911 does not improve AUC. Reverting changes.
Training on augumented user 54668 38/50 current_auc = 0.4444444444444445
User 54668 AUC after training: 0.4444444444444445
User 54668 does not improve AUC. Reverting changes.
Training on augumented user 67304 39/50 current_auc = 0.4444444444444445
User 67304 AUC after training: 0.4444444444444445
User 67304 does not improve AUC. Reverting changes.
Training on augumented user 70718 40/50 current_auc = 0.4444444444444445
User 70718 AUC after training: 0.4444444444444445
User 70718 does not improve AUC. Reverting changes.
Training on augumented user 114655 41/50 current_auc = 0.4444444444444445
User 114655 AUC after training: 0.4444444444444445
User 114655 does not improve AUC. Reverting changes.
Training on augumented user 59259 42/50 current_auc = 0.4444444444444445
User 59259 AUC after training: 0.4444444444444445
User 59259 does not improve AUC. Reverting changes.
Training on augumented user 59304 43/50 current_auc = 0.4444444444444445
User 59304 AUC after training: 0.4444444444444445
User 59304 does not improve AUC. Reverting changes.
Training on augumented user 117917 44/50 current_auc = 0.4444444444444445
User 117917 AUC after training: 0.4444444444444445
User 117917 does not improve AUC. Reverting changes.
Training on augumented user 113866 45/50 current_auc = 0.4444444444444445
User 113866 AUC after training: 0.4444444444444445
User 113866 does not improve AUC. Reverting changes.
Training on augumented user 23687 46/50 current_auc = 0.4444444444444445
User 23687 AUC after training: 0.4444444444444445
User 23687 does not improve AUC. Reverting changes.
Training on augumented user 84279 47/50 current_auc = 0.4444444444444445
User 84279 AUC after training: 0.4444444444444445
User 84279 does not improve AUC. Reverting changes.
Training on augumented user 45945 48/50 current_auc = 0.4444444444444445
User 45945 AUC after training: 0.4444444444444445
User 45945 does not improve AUC. Reverting changes.
Training on augumented user 84053 49/50 current_auc = 0.4444444444444445
User 84053 AUC after training: 0.4444444444444445
User 84053 does not improve AUC. Reverting changes.
[2024-12-02 19:28:47.825418] start test user 32368 195/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:48.788197] start test user 32368 195/568 recall augumented users by random, augumented_users = [35912, 23161, 104607, 130652, 178, 116133, 118156, 55927, 80292, 25057, 90376, 40980, 71752, 56102, 74742, 107401, 47536, 129338, 133578, 49476, 107460, 124807, 21863, 86075, 21425, 50484, 84546, 104034, 66417, 100297, 122924, 27469, 26301, 59529, 54384, 21572, 5466, 81380, 56098, 115542, 38208, 8338, 66734, 1393, 83019, 44115, 93249, 100681, 134679, 19650]
[2024-12-02 19:28:48.819564] user = 32368 Cloud 195/568
[2024-12-02 19:28:48.849600] user = 32368 Local 195/568
[2024-12-02 19:28:48.910339] user = 32368 Local+ 195/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:51.710791] user = 32368 MPDA- 195/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7934782608695652
Training on augumented user 35912 0/50 current_auc = 0.7934782608695652
User 35912 AUC after training: 0.7934782608695652
User 35912 does not improve AUC. Reverting changes.
Training on augumented user 23161 1/50 current_auc = 0.7934782608695652
User 23161 AUC after training: 0.7934782608695652
User 23161 does not improve AUC. Reverting changes.
Training on augumented user 104607 2/50 current_auc = 0.7934782608695652
User 104607 AUC after training: 0.7934782608695652
User 104607 does not improve AUC. Reverting changes.
Training on augumented user 130652 3/50 current_auc = 0.7934782608695652
User 130652 AUC after training: 0.7934782608695652
User 130652 does not improve AUC. Reverting changes.
Training on augumented user 178 4/50 current_auc = 0.7934782608695652
User 178 AUC after training: 0.7934782608695652
User 178 does not improve AUC. Reverting changes.
Training on augumented user 116133 5/50 current_auc = 0.7934782608695652
User 116133 AUC after training: 0.7934782608695652
User 116133 does not improve AUC. Reverting changes.
Training on augumented user 118156 6/50 current_auc = 0.7934782608695652
User 118156 AUC after training: 0.7934782608695652
User 118156 does not improve AUC. Reverting changes.
Training on augumented user 55927 7/50 current_auc = 0.7934782608695652
User 55927 AUC after training: 0.7934782608695652
User 55927 does not improve AUC. Reverting changes.
Training on augumented user 80292 8/50 current_auc = 0.7934782608695652
User 80292 AUC after training: 0.7934782608695652
User 80292 does not improve AUC. Reverting changes.
Training on augumented user 25057 9/50 current_auc = 0.7934782608695652
User 25057 AUC after training: 0.7934782608695652
User 25057 does not improve AUC. Reverting changes.
Training on augumented user 90376 10/50 current_auc = 0.7934782608695652
User 90376 AUC after training: 0.7826086956521738
User 90376 does not improve AUC. Reverting changes.
Training on augumented user 40980 11/50 current_auc = 0.7934782608695652
User 40980 AUC after training: 0.7934782608695652
User 40980 does not improve AUC. Reverting changes.
Training on augumented user 71752 12/50 current_auc = 0.7934782608695652
User 71752 AUC after training: 0.7826086956521738
User 71752 does not improve AUC. Reverting changes.
Training on augumented user 56102 13/50 current_auc = 0.7934782608695652
User 56102 AUC after training: 0.7934782608695652
User 56102 does not improve AUC. Reverting changes.
Training on augumented user 74742 14/50 current_auc = 0.7934782608695652
User 74742 AUC after training: 0.7826086956521738
User 74742 does not improve AUC. Reverting changes.
Training on augumented user 107401 15/50 current_auc = 0.7934782608695652
User 107401 AUC after training: 0.7934782608695652
User 107401 does not improve AUC. Reverting changes.
Training on augumented user 47536 16/50 current_auc = 0.7934782608695652
User 47536 AUC after training: 0.7934782608695652
User 47536 does not improve AUC. Reverting changes.
Training on augumented user 129338 17/50 current_auc = 0.7934782608695652
User 129338 AUC after training: 0.7934782608695652
User 129338 does not improve AUC. Reverting changes.
Training on augumented user 133578 18/50 current_auc = 0.7934782608695652
User 133578 AUC after training: 0.7826086956521738
User 133578 does not improve AUC. Reverting changes.
Training on augumented user 49476 19/50 current_auc = 0.7934782608695652
User 49476 AUC after training: 0.7934782608695652
User 49476 does not improve AUC. Reverting changes.
Training on augumented user 107460 20/50 current_auc = 0.7934782608695652
User 107460 AUC after training: 0.7934782608695652
User 107460 does not improve AUC. Reverting changes.
Training on augumented user 124807 21/50 current_auc = 0.7934782608695652
User 124807 AUC after training: 0.7934782608695652
User 124807 does not improve AUC. Reverting changes.
Training on augumented user 21863 22/50 current_auc = 0.7934782608695652
User 21863 AUC after training: 0.7934782608695652
User 21863 does not improve AUC. Reverting changes.
Training on augumented user 86075 23/50 current_auc = 0.7934782608695652
User 86075 AUC after training: 0.7934782608695652
User 86075 does not improve AUC. Reverting changes.
Training on augumented user 21425 24/50 current_auc = 0.7934782608695652
User 21425 AUC after training: 0.7934782608695652
User 21425 does not improve AUC. Reverting changes.
Training on augumented user 50484 25/50 current_auc = 0.7934782608695652
User 50484 AUC after training: 0.7934782608695652
User 50484 does not improve AUC. Reverting changes.
Training on augumented user 84546 26/50 current_auc = 0.7934782608695652
User 84546 AUC after training: 0.7934782608695652
User 84546 does not improve AUC. Reverting changes.
Training on augumented user 104034 27/50 current_auc = 0.7934782608695652
User 104034 AUC after training: 0.7934782608695652
User 104034 does not improve AUC. Reverting changes.
Training on augumented user 66417 28/50 current_auc = 0.7934782608695652
User 66417 AUC after training: 0.7934782608695652
User 66417 does not improve AUC. Reverting changes.
Training on augumented user 100297 29/50 current_auc = 0.7934782608695652
User 100297 AUC after training: 0.7934782608695652
User 100297 does not improve AUC. Reverting changes.
Training on augumented user 122924 30/50 current_auc = 0.7934782608695652
User 122924 AUC after training: 0.7934782608695652
User 122924 does not improve AUC. Reverting changes.
Training on augumented user 27469 31/50 current_auc = 0.7934782608695652
User 27469 AUC after training: 0.7826086956521738
User 27469 does not improve AUC. Reverting changes.
Training on augumented user 26301 32/50 current_auc = 0.7934782608695652
User 26301 AUC after training: 0.7826086956521738
User 26301 does not improve AUC. Reverting changes.
Training on augumented user 59529 33/50 current_auc = 0.7934782608695652
User 59529 AUC after training: 0.7934782608695652
User 59529 does not improve AUC. Reverting changes.
Training on augumented user 54384 34/50 current_auc = 0.7934782608695652
User 54384 AUC after training: 0.7934782608695652
User 54384 does not improve AUC. Reverting changes.
Training on augumented user 21572 35/50 current_auc = 0.7934782608695652
User 21572 AUC after training: 0.7934782608695652
User 21572 does not improve AUC. Reverting changes.
Training on augumented user 5466 36/50 current_auc = 0.7934782608695652
User 5466 AUC after training: 0.7934782608695652
User 5466 does not improve AUC. Reverting changes.
Training on augumented user 81380 37/50 current_auc = 0.7934782608695652
User 81380 AUC after training: 0.7826086956521738
User 81380 does not improve AUC. Reverting changes.
Training on augumented user 56098 38/50 current_auc = 0.7934782608695652
User 56098 AUC after training: 0.7934782608695652
User 56098 does not improve AUC. Reverting changes.
Training on augumented user 115542 39/50 current_auc = 0.7934782608695652
User 115542 AUC after training: 0.7934782608695652
User 115542 does not improve AUC. Reverting changes.
Training on augumented user 38208 40/50 current_auc = 0.7934782608695652
User 38208 AUC after training: 0.7934782608695652
User 38208 does not improve AUC. Reverting changes.
Training on augumented user 8338 41/50 current_auc = 0.7934782608695652
User 8338 AUC after training: 0.7934782608695652
User 8338 does not improve AUC. Reverting changes.
Training on augumented user 66734 42/50 current_auc = 0.7934782608695652
User 66734 AUC after training: 0.7826086956521738
User 66734 does not improve AUC. Reverting changes.
Training on augumented user 1393 43/50 current_auc = 0.7934782608695652
User 1393 AUC after training: 0.7826086956521738
User 1393 does not improve AUC. Reverting changes.
Training on augumented user 83019 44/50 current_auc = 0.7934782608695652
User 83019 AUC after training: 0.7826086956521738
User 83019 does not improve AUC. Reverting changes.
Training on augumented user 44115 45/50 current_auc = 0.7934782608695652
User 44115 AUC after training: 0.7934782608695652
User 44115 does not improve AUC. Reverting changes.
Training on augumented user 93249 46/50 current_auc = 0.7934782608695652
User 93249 AUC after training: 0.7934782608695652
User 93249 does not improve AUC. Reverting changes.
Training on augumented user 100681 47/50 current_auc = 0.7934782608695652
User 100681 AUC after training: 0.7826086956521738
User 100681 does not improve AUC. Reverting changes.
Training on augumented user 134679 48/50 current_auc = 0.7934782608695652
User 134679 AUC after training: 0.7826086956521738
User 134679 does not improve AUC. Reverting changes.
Training on augumented user 19650 49/50 current_auc = 0.7934782608695652
User 19650 AUC after training: 0.7934782608695652
User 19650 does not improve AUC. Reverting changes.
[2024-12-02 19:29:18.514612] start test user 32372 196/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:19.205761] start test user 32372 196/568 recall augumented users by random, augumented_users = [75456, 125506, 107667, 43836, 64210, 119070, 16626, 56223, 37806, 38986, 26339, 46598, 78981, 96760, 47292, 53899, 50864, 74449, 85458, 79550, 68655, 61643, 8391, 87208, 82129, 13952, 93436, 93760, 18373, 18475, 57966, 4557, 64333, 66023, 123631, 21768, 27486, 113139, 32516, 75656, 18893, 12750, 128279, 22736, 96931, 39428, 119218, 64850, 59494, 25194]
[2024-12-02 19:29:19.227793] user = 32372 Cloud 196/568
[2024-12-02 19:29:19.257313] user = 32372 Local 196/568
[2024-12-02 19:29:19.409212] user = 32372 Local+ 196/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:21.857966] user = 32372 MPDA- 196/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5721153846153846
Training on augumented user 75456 0/50 current_auc = 0.5721153846153846
User 75456 AUC after training: 0.5865384615384615
User 75456 improves AUC. Keeping the model.
Training on augumented user 125506 1/50 current_auc = 0.5865384615384615
User 125506 AUC after training: 0.5865384615384615
User 125506 does not improve AUC. Reverting changes.
Training on augumented user 107667 2/50 current_auc = 0.5865384615384615
User 107667 AUC after training: 0.5865384615384615
User 107667 does not improve AUC. Reverting changes.
Training on augumented user 43836 3/50 current_auc = 0.5865384615384615
User 43836 AUC after training: 0.5865384615384615
User 43836 does not improve AUC. Reverting changes.
Training on augumented user 64210 4/50 current_auc = 0.5865384615384615
User 64210 AUC after training: 0.5865384615384615
User 64210 does not improve AUC. Reverting changes.
Training on augumented user 119070 5/50 current_auc = 0.5865384615384615
User 119070 AUC after training: 0.5817307692307692
User 119070 does not improve AUC. Reverting changes.
Training on augumented user 16626 6/50 current_auc = 0.5865384615384615
User 16626 AUC after training: 0.5865384615384615
User 16626 does not improve AUC. Reverting changes.
Training on augumented user 56223 7/50 current_auc = 0.5865384615384615
User 56223 AUC after training: 0.5817307692307692
User 56223 does not improve AUC. Reverting changes.
Training on augumented user 37806 8/50 current_auc = 0.5865384615384615
User 37806 AUC after training: 0.5865384615384615
User 37806 does not improve AUC. Reverting changes.
Training on augumented user 38986 9/50 current_auc = 0.5865384615384615
User 38986 AUC after training: 0.5865384615384615
User 38986 does not improve AUC. Reverting changes.
Training on augumented user 26339 10/50 current_auc = 0.5865384615384615
User 26339 AUC after training: 0.5865384615384615
User 26339 does not improve AUC. Reverting changes.
Training on augumented user 46598 11/50 current_auc = 0.5865384615384615
User 46598 AUC after training: 0.5865384615384615
User 46598 does not improve AUC. Reverting changes.
Training on augumented user 78981 12/50 current_auc = 0.5865384615384615
User 78981 AUC after training: 0.5865384615384615
User 78981 does not improve AUC. Reverting changes.
Training on augumented user 96760 13/50 current_auc = 0.5865384615384615
User 96760 AUC after training: 0.5865384615384615
User 96760 does not improve AUC. Reverting changes.
Training on augumented user 47292 14/50 current_auc = 0.5865384615384615
User 47292 AUC after training: 0.5817307692307692
User 47292 does not improve AUC. Reverting changes.
Training on augumented user 53899 15/50 current_auc = 0.5865384615384615
User 53899 AUC after training: 0.5865384615384615
User 53899 does not improve AUC. Reverting changes.
Training on augumented user 50864 16/50 current_auc = 0.5865384615384615
User 50864 AUC after training: 0.5817307692307692
User 50864 does not improve AUC. Reverting changes.
Training on augumented user 74449 17/50 current_auc = 0.5865384615384615
User 74449 AUC after training: 0.5865384615384615
User 74449 does not improve AUC. Reverting changes.
Training on augumented user 85458 18/50 current_auc = 0.5865384615384615
User 85458 AUC after training: 0.5817307692307692
User 85458 does not improve AUC. Reverting changes.
Training on augumented user 79550 19/50 current_auc = 0.5865384615384615
User 79550 AUC after training: 0.5817307692307692
User 79550 does not improve AUC. Reverting changes.
Training on augumented user 68655 20/50 current_auc = 0.5865384615384615
User 68655 AUC after training: 0.5865384615384615
User 68655 does not improve AUC. Reverting changes.
Training on augumented user 61643 21/50 current_auc = 0.5865384615384615
User 61643 AUC after training: 0.5865384615384615
User 61643 does not improve AUC. Reverting changes.
Training on augumented user 8391 22/50 current_auc = 0.5865384615384615
User 8391 AUC after training: 0.5769230769230769
User 8391 does not improve AUC. Reverting changes.
Training on augumented user 87208 23/50 current_auc = 0.5865384615384615
User 87208 AUC after training: 0.5865384615384615
User 87208 does not improve AUC. Reverting changes.
Training on augumented user 82129 24/50 current_auc = 0.5865384615384615
User 82129 AUC after training: 0.5817307692307692
User 82129 does not improve AUC. Reverting changes.
Training on augumented user 13952 25/50 current_auc = 0.5865384615384615
User 13952 AUC after training: 0.5865384615384615
User 13952 does not improve AUC. Reverting changes.
Training on augumented user 93436 26/50 current_auc = 0.5865384615384615
User 93436 AUC after training: 0.5817307692307692
User 93436 does not improve AUC. Reverting changes.
Training on augumented user 93760 27/50 current_auc = 0.5865384615384615
User 93760 AUC after training: 0.5817307692307692
User 93760 does not improve AUC. Reverting changes.
Training on augumented user 18373 28/50 current_auc = 0.5865384615384615
User 18373 AUC after training: 0.5865384615384615
User 18373 does not improve AUC. Reverting changes.
Training on augumented user 18475 29/50 current_auc = 0.5865384615384615
User 18475 AUC after training: 0.5769230769230769
User 18475 does not improve AUC. Reverting changes.
Training on augumented user 57966 30/50 current_auc = 0.5865384615384615
User 57966 AUC after training: 0.5865384615384615
User 57966 does not improve AUC. Reverting changes.
Training on augumented user 4557 31/50 current_auc = 0.5865384615384615
User 4557 AUC after training: 0.5817307692307692
User 4557 does not improve AUC. Reverting changes.
Training on augumented user 64333 32/50 current_auc = 0.5865384615384615
User 64333 AUC after training: 0.5865384615384615
User 64333 does not improve AUC. Reverting changes.
Training on augumented user 66023 33/50 current_auc = 0.5865384615384615
User 66023 AUC after training: 0.5817307692307692
User 66023 does not improve AUC. Reverting changes.
Training on augumented user 123631 34/50 current_auc = 0.5865384615384615
User 123631 AUC after training: 0.5865384615384615
User 123631 does not improve AUC. Reverting changes.
Training on augumented user 21768 35/50 current_auc = 0.5865384615384615
User 21768 AUC after training: 0.5769230769230769
User 21768 does not improve AUC. Reverting changes.
Training on augumented user 27486 36/50 current_auc = 0.5865384615384615
User 27486 AUC after training: 0.5865384615384615
User 27486 does not improve AUC. Reverting changes.
Training on augumented user 113139 37/50 current_auc = 0.5865384615384615
User 113139 AUC after training: 0.5865384615384615
User 113139 does not improve AUC. Reverting changes.
Training on augumented user 32516 38/50 current_auc = 0.5865384615384615
User 32516 AUC after training: 0.5817307692307692
User 32516 does not improve AUC. Reverting changes.
Training on augumented user 75656 39/50 current_auc = 0.5865384615384615
User 75656 AUC after training: 0.5865384615384615
User 75656 does not improve AUC. Reverting changes.
Training on augumented user 18893 40/50 current_auc = 0.5865384615384615
User 18893 AUC after training: 0.5817307692307692
User 18893 does not improve AUC. Reverting changes.
Training on augumented user 12750 41/50 current_auc = 0.5865384615384615
User 12750 AUC after training: 0.5769230769230769
User 12750 does not improve AUC. Reverting changes.
Training on augumented user 128279 42/50 current_auc = 0.5865384615384615
User 128279 AUC after training: 0.5865384615384615
User 128279 does not improve AUC. Reverting changes.
Training on augumented user 22736 43/50 current_auc = 0.5865384615384615
User 22736 AUC after training: 0.5817307692307692
User 22736 does not improve AUC. Reverting changes.
Training on augumented user 96931 44/50 current_auc = 0.5865384615384615
User 96931 AUC after training: 0.5817307692307692
User 96931 does not improve AUC. Reverting changes.
Training on augumented user 39428 45/50 current_auc = 0.5865384615384615
User 39428 AUC after training: 0.5865384615384615
User 39428 does not improve AUC. Reverting changes.
Training on augumented user 119218 46/50 current_auc = 0.5865384615384615
User 119218 AUC after training: 0.5817307692307692
User 119218 does not improve AUC. Reverting changes.
Training on augumented user 64850 47/50 current_auc = 0.5865384615384615
User 64850 AUC after training: 0.5865384615384615
User 64850 does not improve AUC. Reverting changes.
Training on augumented user 59494 48/50 current_auc = 0.5865384615384615
User 59494 AUC after training: 0.5865384615384615
User 59494 does not improve AUC. Reverting changes.
Training on augumented user 25194 49/50 current_auc = 0.5865384615384615
User 25194 AUC after training: 0.5865384615384615
User 25194 does not improve AUC. Reverting changes.
[2024-12-02 19:29:56.524507] start test user 32386 197/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:57.281450] start test user 32386 197/568 recall augumented users by random, augumented_users = [103193, 131189, 24496, 128726, 77003, 13597, 85913, 136894, 114920, 104708, 35172, 87592, 43931, 117866, 1887, 120037, 87451, 79612, 119482, 12830, 23546, 52321, 113009, 13897, 105, 11739, 51268, 51929, 11332, 112142, 37880, 77757, 54282, 6283, 87594, 101654, 87427, 97340, 118218, 82908, 77598, 105176, 3394, 127320, 2326, 81058, 104118, 117698, 130614, 43003]
[2024-12-02 19:29:57.299027] user = 32386 Cloud 197/568
[2024-12-02 19:29:57.320065] user = 32386 Local 197/568
[2024-12-02 19:29:57.422881] user = 32386 Local+ 197/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:00.672999] user = 32386 MPDA- 197/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6719315895372233
Training on augumented user 103193 0/50 current_auc = 0.6719315895372233
User 103193 AUC after training: 0.6723340040241449
User 103193 improves AUC. Keeping the model.
Training on augumented user 131189 1/50 current_auc = 0.6723340040241449
User 131189 AUC after training: 0.6714285714285715
User 131189 does not improve AUC. Reverting changes.
Training on augumented user 24496 2/50 current_auc = 0.6723340040241449
User 24496 AUC after training: 0.6734406438631791
User 24496 improves AUC. Keeping the model.
Training on augumented user 128726 3/50 current_auc = 0.6734406438631791
User 128726 AUC after training: 0.6734406438631791
User 128726 does not improve AUC. Reverting changes.
Training on augumented user 77003 4/50 current_auc = 0.6734406438631791
User 77003 AUC after training: 0.6738430583501006
User 77003 improves AUC. Keeping the model.
Training on augumented user 13597 5/50 current_auc = 0.6738430583501006
User 13597 AUC after training: 0.6740442655935613
User 13597 improves AUC. Keeping the model.
Training on augumented user 85913 6/50 current_auc = 0.6740442655935613
User 85913 AUC after training: 0.6740442655935613
User 85913 does not improve AUC. Reverting changes.
Training on augumented user 136894 7/50 current_auc = 0.6740442655935613
User 136894 AUC after training: 0.6710261569416499
User 136894 does not improve AUC. Reverting changes.
Training on augumented user 114920 8/50 current_auc = 0.6740442655935613
User 114920 AUC after training: 0.6742454728370222
User 114920 improves AUC. Keeping the model.
Training on augumented user 104708 9/50 current_auc = 0.6742454728370222
User 104708 AUC after training: 0.6738430583501006
User 104708 does not improve AUC. Reverting changes.
Training on augumented user 35172 10/50 current_auc = 0.6742454728370222
User 35172 AUC after training: 0.6745472837022133
User 35172 improves AUC. Keeping the model.
Training on augumented user 87592 11/50 current_auc = 0.6745472837022133
User 87592 AUC after training: 0.6743460764587524
User 87592 does not improve AUC. Reverting changes.
Training on augumented user 43931 12/50 current_auc = 0.6745472837022133
User 43931 AUC after training: 0.6738430583501006
User 43931 does not improve AUC. Reverting changes.
Training on augumented user 117866 13/50 current_auc = 0.6745472837022133
User 117866 AUC after training: 0.6738430583501006
User 117866 does not improve AUC. Reverting changes.
Training on augumented user 1887 14/50 current_auc = 0.6745472837022133
User 1887 AUC after training: 0.6745472837022132
User 1887 does not improve AUC. Reverting changes.
Training on augumented user 120037 15/50 current_auc = 0.6745472837022133
User 120037 AUC after training: 0.6751509054325956
User 120037 improves AUC. Keeping the model.
Training on augumented user 87451 16/50 current_auc = 0.6751509054325956
User 87451 AUC after training: 0.6742454728370222
User 87451 does not improve AUC. Reverting changes.
Training on augumented user 79612 17/50 current_auc = 0.6751509054325956
User 79612 AUC after training: 0.6741448692152917
User 79612 does not improve AUC. Reverting changes.
Training on augumented user 119482 18/50 current_auc = 0.6751509054325956
User 119482 AUC after training: 0.6738430583501006
User 119482 does not improve AUC. Reverting changes.
Training on augumented user 12830 19/50 current_auc = 0.6751509054325956
User 12830 AUC after training: 0.6742454728370221
User 12830 does not improve AUC. Reverting changes.
Training on augumented user 23546 20/50 current_auc = 0.6751509054325956
User 23546 AUC after training: 0.6749496981891349
User 23546 does not improve AUC. Reverting changes.
Training on augumented user 52321 21/50 current_auc = 0.6751509054325956
User 52321 AUC after training: 0.6737424547283702
User 52321 does not improve AUC. Reverting changes.
Training on augumented user 113009 22/50 current_auc = 0.6751509054325956
User 113009 AUC after training: 0.6721327967806842
User 113009 does not improve AUC. Reverting changes.
Training on augumented user 13897 23/50 current_auc = 0.6751509054325956
User 13897 AUC after training: 0.6737424547283702
User 13897 does not improve AUC. Reverting changes.
Training on augumented user 105 24/50 current_auc = 0.6751509054325956
User 105 AUC after training: 0.6740442655935613
User 105 does not improve AUC. Reverting changes.
Training on augumented user 11739 25/50 current_auc = 0.6751509054325956
User 11739 AUC after training: 0.6749496981891349
User 11739 does not improve AUC. Reverting changes.
Training on augumented user 51268 26/50 current_auc = 0.6751509054325956
User 51268 AUC after training: 0.6746478873239438
User 51268 does not improve AUC. Reverting changes.
Training on augumented user 51929 27/50 current_auc = 0.6751509054325956
User 51929 AUC after training: 0.6744466800804828
User 51929 does not improve AUC. Reverting changes.
Training on augumented user 11332 28/50 current_auc = 0.6751509054325956
User 11332 AUC after training: 0.6741448692152917
User 11332 does not improve AUC. Reverting changes.
Training on augumented user 112142 29/50 current_auc = 0.6751509054325956
User 112142 AUC after training: 0.6728370221327967
User 112142 does not improve AUC. Reverting changes.
Training on augumented user 37880 30/50 current_auc = 0.6751509054325956
User 37880 AUC after training: 0.6748490945674044
User 37880 does not improve AUC. Reverting changes.
Training on augumented user 77757 31/50 current_auc = 0.6751509054325956
User 77757 AUC after training: 0.6746478873239438
User 77757 does not improve AUC. Reverting changes.
Training on augumented user 54282 32/50 current_auc = 0.6751509054325956
User 54282 AUC after training: 0.6730382293762575
User 54282 does not improve AUC. Reverting changes.
Training on augumented user 6283 33/50 current_auc = 0.6751509054325956
User 6283 AUC after training: 0.673943661971831
User 6283 does not improve AUC. Reverting changes.
Training on augumented user 87594 34/50 current_auc = 0.6751509054325956
User 87594 AUC after training: 0.6745472837022133
User 87594 does not improve AUC. Reverting changes.
Training on augumented user 101654 35/50 current_auc = 0.6751509054325956
User 101654 AUC after training: 0.6732394366197182
User 101654 does not improve AUC. Reverting changes.
Training on augumented user 87427 36/50 current_auc = 0.6751509054325956
User 87427 AUC after training: 0.6724346076458753
User 87427 does not improve AUC. Reverting changes.
Training on augumented user 97340 37/50 current_auc = 0.6751509054325956
User 97340 AUC after training: 0.6722334004024144
User 97340 does not improve AUC. Reverting changes.
Training on augumented user 118218 38/50 current_auc = 0.6751509054325956
User 118218 AUC after training: 0.672635814889336
User 118218 does not improve AUC. Reverting changes.
Training on augumented user 82908 39/50 current_auc = 0.6751509054325956
User 82908 AUC after training: 0.6722334004024145
User 82908 does not improve AUC. Reverting changes.
Training on augumented user 77598 40/50 current_auc = 0.6751509054325956
User 77598 AUC after training: 0.672635814889336
User 77598 does not improve AUC. Reverting changes.
Training on augumented user 105176 41/50 current_auc = 0.6751509054325956
User 105176 AUC after training: 0.6745472837022133
User 105176 does not improve AUC. Reverting changes.
Training on augumented user 3394 42/50 current_auc = 0.6751509054325956
User 3394 AUC after training: 0.674748490945674
User 3394 does not improve AUC. Reverting changes.
Training on augumented user 127320 43/50 current_auc = 0.6751509054325956
User 127320 AUC after training: 0.6742454728370222
User 127320 does not improve AUC. Reverting changes.
Training on augumented user 2326 44/50 current_auc = 0.6751509054325956
User 2326 AUC after training: 0.6738430583501006
User 2326 does not improve AUC. Reverting changes.
Training on augumented user 81058 45/50 current_auc = 0.6751509054325956
User 81058 AUC after training: 0.6738430583501006
User 81058 does not improve AUC. Reverting changes.
Training on augumented user 104118 46/50 current_auc = 0.6751509054325956
User 104118 AUC after training: 0.6742454728370221
User 104118 does not improve AUC. Reverting changes.
Training on augumented user 117698 47/50 current_auc = 0.6751509054325956
User 117698 AUC after training: 0.6730382293762575
User 117698 does not improve AUC. Reverting changes.
Training on augumented user 130614 48/50 current_auc = 0.6751509054325956
User 130614 AUC after training: 0.6743460764587524
User 130614 does not improve AUC. Reverting changes.
Training on augumented user 43003 49/50 current_auc = 0.6751509054325956
User 43003 AUC after training: 0.6741448692152917
User 43003 does not improve AUC. Reverting changes.
[2024-12-02 19:30:29.237746] start test user 32391 198/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:29.697529] start test user 32391 198/568 recall augumented users by random, augumented_users = [42340, 128055, 59917, 87253, 41727, 19777, 92062, 57634, 111767, 64936, 32867, 72444, 19689, 110902, 77053, 125544, 47274, 63322, 26499, 59888, 31305, 38603, 80211, 22557, 50641, 75769, 74867, 75581, 56582, 83965, 123409, 28289, 109259, 122082, 103030, 99962, 80146, 117135, 67014, 125705, 128375, 136995, 113336, 125048, 41824, 131149, 69369, 4058, 11479, 129743]
[2024-12-02 19:30:29.712322] user = 32391 Cloud 198/568
[2024-12-02 19:30:29.725195] user = 32391 Local 198/568
[2024-12-02 19:30:29.768771] user = 32391 Local+ 198/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:32.466019] user = 32391 MPDA- 198/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6655172413793103
Training on augumented user 42340 0/50 current_auc = 0.6655172413793103
User 42340 AUC after training: 0.6655172413793103
User 42340 does not improve AUC. Reverting changes.
Training on augumented user 128055 1/50 current_auc = 0.6655172413793103
User 128055 AUC after training: 0.6706896551724139
User 128055 improves AUC. Keeping the model.
Training on augumented user 59917 2/50 current_auc = 0.6706896551724139
User 59917 AUC after training: 0.6689655172413793
User 59917 does not improve AUC. Reverting changes.
Training on augumented user 87253 3/50 current_auc = 0.6706896551724139
User 87253 AUC after training: 0.6672413793103449
User 87253 does not improve AUC. Reverting changes.
Training on augumented user 41727 4/50 current_auc = 0.6706896551724139
User 41727 AUC after training: 0.6672413793103449
User 41727 does not improve AUC. Reverting changes.
Training on augumented user 19777 5/50 current_auc = 0.6706896551724139
User 19777 AUC after training: 0.6706896551724139
User 19777 does not improve AUC. Reverting changes.
Training on augumented user 92062 6/50 current_auc = 0.6706896551724139
User 92062 AUC after training: 0.6706896551724139
User 92062 does not improve AUC. Reverting changes.
Training on augumented user 57634 7/50 current_auc = 0.6706896551724139
User 57634 AUC after training: 0.6672413793103449
User 57634 does not improve AUC. Reverting changes.
Training on augumented user 111767 8/50 current_auc = 0.6706896551724139
User 111767 AUC after training: 0.6706896551724139
User 111767 does not improve AUC. Reverting changes.
Training on augumented user 64936 9/50 current_auc = 0.6706896551724139
User 64936 AUC after training: 0.6672413793103449
User 64936 does not improve AUC. Reverting changes.
Training on augumented user 32867 10/50 current_auc = 0.6706896551724139
User 32867 AUC after training: 0.6672413793103449
User 32867 does not improve AUC. Reverting changes.
Training on augumented user 72444 11/50 current_auc = 0.6706896551724139
User 72444 AUC after training: 0.6706896551724139
User 72444 does not improve AUC. Reverting changes.
Training on augumented user 19689 12/50 current_auc = 0.6706896551724139
User 19689 AUC after training: 0.6706896551724139
User 19689 does not improve AUC. Reverting changes.
Training on augumented user 110902 13/50 current_auc = 0.6706896551724139
User 110902 AUC after training: 0.6706896551724139
User 110902 does not improve AUC. Reverting changes.
Training on augumented user 77053 14/50 current_auc = 0.6706896551724139
User 77053 AUC after training: 0.6672413793103449
User 77053 does not improve AUC. Reverting changes.
Training on augumented user 125544 15/50 current_auc = 0.6706896551724139
User 125544 AUC after training: 0.6672413793103449
User 125544 does not improve AUC. Reverting changes.
Training on augumented user 47274 16/50 current_auc = 0.6706896551724139
User 47274 AUC after training: 0.6706896551724139
User 47274 does not improve AUC. Reverting changes.
Training on augumented user 63322 17/50 current_auc = 0.6706896551724139
User 63322 AUC after training: 0.6724137931034483
User 63322 improves AUC. Keeping the model.
Training on augumented user 26499 18/50 current_auc = 0.6724137931034483
User 26499 AUC after training: 0.6637931034482759
User 26499 does not improve AUC. Reverting changes.
Training on augumented user 59888 19/50 current_auc = 0.6724137931034483
User 59888 AUC after training: 0.6706896551724139
User 59888 does not improve AUC. Reverting changes.
Training on augumented user 31305 20/50 current_auc = 0.6724137931034483
User 31305 AUC after training: 0.6706896551724139
User 31305 does not improve AUC. Reverting changes.
Training on augumented user 38603 21/50 current_auc = 0.6724137931034483
User 38603 AUC after training: 0.6741379310344828
User 38603 improves AUC. Keeping the model.
Training on augumented user 80211 22/50 current_auc = 0.6741379310344828
User 80211 AUC after training: 0.6741379310344828
User 80211 does not improve AUC. Reverting changes.
Training on augumented user 22557 23/50 current_auc = 0.6741379310344828
User 22557 AUC after training: 0.6724137931034483
User 22557 does not improve AUC. Reverting changes.
Training on augumented user 50641 24/50 current_auc = 0.6741379310344828
User 50641 AUC after training: 0.6706896551724137
User 50641 does not improve AUC. Reverting changes.
Training on augumented user 75769 25/50 current_auc = 0.6741379310344828
User 75769 AUC after training: 0.6758620689655173
User 75769 improves AUC. Keeping the model.
Training on augumented user 74867 26/50 current_auc = 0.6758620689655173
User 74867 AUC after training: 0.6758620689655173
User 74867 does not improve AUC. Reverting changes.
Training on augumented user 75581 27/50 current_auc = 0.6758620689655173
User 75581 AUC after training: 0.6758620689655173
User 75581 does not improve AUC. Reverting changes.
Training on augumented user 56582 28/50 current_auc = 0.6758620689655173
User 56582 AUC after training: 0.6741379310344828
User 56582 does not improve AUC. Reverting changes.
Training on augumented user 83965 29/50 current_auc = 0.6758620689655173
User 83965 AUC after training: 0.6672413793103449
User 83965 does not improve AUC. Reverting changes.
Training on augumented user 123409 30/50 current_auc = 0.6758620689655173
User 123409 AUC after training: 0.6724137931034484
User 123409 does not improve AUC. Reverting changes.
Training on augumented user 28289 31/50 current_auc = 0.6758620689655173
User 28289 AUC after training: 0.6758620689655173
User 28289 does not improve AUC. Reverting changes.
Training on augumented user 109259 32/50 current_auc = 0.6758620689655173
User 109259 AUC after training: 0.6758620689655173
User 109259 does not improve AUC. Reverting changes.
Training on augumented user 122082 33/50 current_auc = 0.6758620689655173
User 122082 AUC after training: 0.6724137931034483
User 122082 does not improve AUC. Reverting changes.
Training on augumented user 103030 34/50 current_auc = 0.6758620689655173
User 103030 AUC after training: 0.6758620689655173
User 103030 does not improve AUC. Reverting changes.
Training on augumented user 99962 35/50 current_auc = 0.6758620689655173
User 99962 AUC after training: 0.6741379310344828
User 99962 does not improve AUC. Reverting changes.
Training on augumented user 80146 36/50 current_auc = 0.6758620689655173
User 80146 AUC after training: 0.6706896551724139
User 80146 does not improve AUC. Reverting changes.
Training on augumented user 117135 37/50 current_auc = 0.6758620689655173
User 117135 AUC after training: 0.6689655172413793
User 117135 does not improve AUC. Reverting changes.
Training on augumented user 67014 38/50 current_auc = 0.6758620689655173
User 67014 AUC after training: 0.6724137931034483
User 67014 does not improve AUC. Reverting changes.
Training on augumented user 125705 39/50 current_auc = 0.6758620689655173
User 125705 AUC after training: 0.6775862068965518
User 125705 improves AUC. Keeping the model.
Training on augumented user 128375 40/50 current_auc = 0.6775862068965518
User 128375 AUC after training: 0.6775862068965518
User 128375 does not improve AUC. Reverting changes.
Training on augumented user 136995 41/50 current_auc = 0.6775862068965518
User 136995 AUC after training: 0.6758620689655173
User 136995 does not improve AUC. Reverting changes.
Training on augumented user 113336 42/50 current_auc = 0.6775862068965518
User 113336 AUC after training: 0.6767241379310345
User 113336 does not improve AUC. Reverting changes.
Training on augumented user 125048 43/50 current_auc = 0.6775862068965518
User 125048 AUC after training: 0.6758620689655173
User 125048 does not improve AUC. Reverting changes.
Training on augumented user 41824 44/50 current_auc = 0.6775862068965518
User 41824 AUC after training: 0.6775862068965518
User 41824 does not improve AUC. Reverting changes.
Training on augumented user 131149 45/50 current_auc = 0.6775862068965518
User 131149 AUC after training: 0.6775862068965518
User 131149 does not improve AUC. Reverting changes.
Training on augumented user 69369 46/50 current_auc = 0.6775862068965518
User 69369 AUC after training: 0.6741379310344828
User 69369 does not improve AUC. Reverting changes.
Training on augumented user 4058 47/50 current_auc = 0.6775862068965518
User 4058 AUC after training: 0.6758620689655173
User 4058 does not improve AUC. Reverting changes.
Training on augumented user 11479 48/50 current_auc = 0.6775862068965518
User 11479 AUC after training: 0.6758620689655173
User 11479 does not improve AUC. Reverting changes.
Training on augumented user 129743 49/50 current_auc = 0.6775862068965518
User 129743 AUC after training: 0.6672413793103449
User 129743 does not improve AUC. Reverting changes.
[2024-12-02 19:31:00.336309] start test user 32414 199/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:00.816641] start test user 32414 199/568 recall augumented users by random, augumented_users = [64400, 65382, 71289, 55058, 110796, 68904, 81313, 33882, 55365, 55619, 45748, 118339, 9544, 15757, 31895, 27866, 128148, 2639, 15218, 118896, 125390, 80476, 83338, 116310, 102603, 42109, 123701, 94948, 53290, 119983, 37503, 123025, 31274, 7784, 31545, 137002, 138149, 68888, 19210, 98659, 5970, 111089, 89373, 70374, 38594, 28683, 71870, 33408, 87460, 124198]
[2024-12-02 19:31:00.831355] user = 32414 Cloud 199/568
[2024-12-02 19:31:00.841636] user = 32414 Local 199/568
[2024-12-02 19:31:00.861922] user = 32414 Local+ 199/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:03.664922] user = 32414 MPDA- 199/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.48863636363636365
Training on augumented user 64400 0/50 current_auc = 0.48863636363636365
User 64400 AUC after training: 0.48579545454545453
User 64400 does not improve AUC. Reverting changes.
Training on augumented user 65382 1/50 current_auc = 0.48863636363636365
User 65382 AUC after training: 0.4886363636363636
User 65382 does not improve AUC. Reverting changes.
Training on augumented user 71289 2/50 current_auc = 0.48863636363636365
User 71289 AUC after training: 0.4829545454545454
User 71289 does not improve AUC. Reverting changes.
Training on augumented user 55058 3/50 current_auc = 0.48863636363636365
User 55058 AUC after training: 0.4914772727272727
User 55058 improves AUC. Keeping the model.
Training on augumented user 110796 4/50 current_auc = 0.4914772727272727
User 110796 AUC after training: 0.48153409090909094
User 110796 does not improve AUC. Reverting changes.
Training on augumented user 68904 5/50 current_auc = 0.4914772727272727
User 68904 AUC after training: 0.48863636363636365
User 68904 does not improve AUC. Reverting changes.
Training on augumented user 81313 6/50 current_auc = 0.4914772727272727
User 81313 AUC after training: 0.48721590909090906
User 81313 does not improve AUC. Reverting changes.
Training on augumented user 33882 7/50 current_auc = 0.4914772727272727
User 33882 AUC after training: 0.48863636363636365
User 33882 does not improve AUC. Reverting changes.
Training on augumented user 55365 8/50 current_auc = 0.4914772727272727
User 55365 AUC after training: 0.4829545454545454
User 55365 does not improve AUC. Reverting changes.
Training on augumented user 55619 9/50 current_auc = 0.4914772727272727
User 55619 AUC after training: 0.48579545454545453
User 55619 does not improve AUC. Reverting changes.
Training on augumented user 45748 10/50 current_auc = 0.4914772727272727
User 45748 AUC after training: 0.484375
User 45748 does not improve AUC. Reverting changes.
Training on augumented user 118339 11/50 current_auc = 0.4914772727272727
User 118339 AUC after training: 0.48863636363636365
User 118339 does not improve AUC. Reverting changes.
Training on augumented user 9544 12/50 current_auc = 0.4914772727272727
User 9544 AUC after training: 0.4829545454545454
User 9544 does not improve AUC. Reverting changes.
Training on augumented user 15757 13/50 current_auc = 0.4914772727272727
User 15757 AUC after training: 0.48579545454545453
User 15757 does not improve AUC. Reverting changes.
Training on augumented user 31895 14/50 current_auc = 0.4914772727272727
User 31895 AUC after training: 0.48579545454545453
User 31895 does not improve AUC. Reverting changes.
Training on augumented user 27866 15/50 current_auc = 0.4914772727272727
User 27866 AUC after training: 0.48579545454545453
User 27866 does not improve AUC. Reverting changes.
Training on augumented user 128148 16/50 current_auc = 0.4914772727272727
User 128148 AUC after training: 0.48863636363636365
User 128148 does not improve AUC. Reverting changes.
Training on augumented user 2639 17/50 current_auc = 0.4914772727272727
User 2639 AUC after training: 0.48295454545454547
User 2639 does not improve AUC. Reverting changes.
Training on augumented user 15218 18/50 current_auc = 0.4914772727272727
User 15218 AUC after training: 0.48721590909090906
User 15218 does not improve AUC. Reverting changes.
Training on augumented user 118896 19/50 current_auc = 0.4914772727272727
User 118896 AUC after training: 0.48863636363636365
User 118896 does not improve AUC. Reverting changes.
Training on augumented user 125390 20/50 current_auc = 0.4914772727272727
User 125390 AUC after training: 0.4829545454545454
User 125390 does not improve AUC. Reverting changes.
Training on augumented user 80476 21/50 current_auc = 0.4914772727272727
User 80476 AUC after training: 0.48295454545454547
User 80476 does not improve AUC. Reverting changes.
Training on augumented user 83338 22/50 current_auc = 0.4914772727272727
User 83338 AUC after training: 0.48579545454545453
User 83338 does not improve AUC. Reverting changes.
Training on augumented user 116310 23/50 current_auc = 0.4914772727272727
User 116310 AUC after training: 0.484375
User 116310 does not improve AUC. Reverting changes.
Training on augumented user 102603 24/50 current_auc = 0.4914772727272727
User 102603 AUC after training: 0.4857954545454546
User 102603 does not improve AUC. Reverting changes.
Training on augumented user 42109 25/50 current_auc = 0.4914772727272727
User 42109 AUC after training: 0.48863636363636365
User 42109 does not improve AUC. Reverting changes.
Training on augumented user 123701 26/50 current_auc = 0.4914772727272727
User 123701 AUC after training: 0.4900568181818182
User 123701 does not improve AUC. Reverting changes.
Training on augumented user 94948 27/50 current_auc = 0.4914772727272727
User 94948 AUC after training: 0.48863636363636365
User 94948 does not improve AUC. Reverting changes.
Training on augumented user 53290 28/50 current_auc = 0.4914772727272727
User 53290 AUC after training: 0.48579545454545453
User 53290 does not improve AUC. Reverting changes.
Training on augumented user 119983 29/50 current_auc = 0.4914772727272727
User 119983 AUC after training: 0.48295454545454547
User 119983 does not improve AUC. Reverting changes.
Training on augumented user 37503 30/50 current_auc = 0.4914772727272727
User 37503 AUC after training: 0.4914772727272727
User 37503 does not improve AUC. Reverting changes.
Training on augumented user 123025 31/50 current_auc = 0.4914772727272727
User 123025 AUC after training: 0.48579545454545453
User 123025 does not improve AUC. Reverting changes.
Training on augumented user 31274 32/50 current_auc = 0.4914772727272727
User 31274 AUC after training: 0.4900568181818182
User 31274 does not improve AUC. Reverting changes.
Training on augumented user 7784 33/50 current_auc = 0.4914772727272727
User 7784 AUC after training: 0.4829545454545454
User 7784 does not improve AUC. Reverting changes.
Training on augumented user 31545 34/50 current_auc = 0.4914772727272727
User 31545 AUC after training: 0.48863636363636365
User 31545 does not improve AUC. Reverting changes.
Training on augumented user 137002 35/50 current_auc = 0.4914772727272727
User 137002 AUC after training: 0.48579545454545453
User 137002 does not improve AUC. Reverting changes.
Training on augumented user 138149 36/50 current_auc = 0.4914772727272727
User 138149 AUC after training: 0.4900568181818182
User 138149 does not improve AUC. Reverting changes.
Training on augumented user 68888 37/50 current_auc = 0.4914772727272727
User 68888 AUC after training: 0.48579545454545453
User 68888 does not improve AUC. Reverting changes.
Training on augumented user 19210 38/50 current_auc = 0.4914772727272727
User 19210 AUC after training: 0.4914772727272727
User 19210 does not improve AUC. Reverting changes.
Training on augumented user 98659 39/50 current_auc = 0.4914772727272727
User 98659 AUC after training: 0.48721590909090906
User 98659 does not improve AUC. Reverting changes.
Training on augumented user 5970 40/50 current_auc = 0.4914772727272727
User 5970 AUC after training: 0.48863636363636365
User 5970 does not improve AUC. Reverting changes.
Training on augumented user 111089 41/50 current_auc = 0.4914772727272727
User 111089 AUC after training: 0.48579545454545453
User 111089 does not improve AUC. Reverting changes.
Training on augumented user 89373 42/50 current_auc = 0.4914772727272727
User 89373 AUC after training: 0.48295454545454547
User 89373 does not improve AUC. Reverting changes.
Training on augumented user 70374 43/50 current_auc = 0.4914772727272727
User 70374 AUC after training: 0.48579545454545453
User 70374 does not improve AUC. Reverting changes.
Training on augumented user 38594 44/50 current_auc = 0.4914772727272727
User 38594 AUC after training: 0.48721590909090906
User 38594 does not improve AUC. Reverting changes.
Training on augumented user 28683 45/50 current_auc = 0.4914772727272727
User 28683 AUC after training: 0.48863636363636365
User 28683 does not improve AUC. Reverting changes.
Training on augumented user 71870 46/50 current_auc = 0.4914772727272727
User 71870 AUC after training: 0.48721590909090906
User 71870 does not improve AUC. Reverting changes.
Training on augumented user 33408 47/50 current_auc = 0.4914772727272727
User 33408 AUC after training: 0.48721590909090906
User 33408 does not improve AUC. Reverting changes.
Training on augumented user 87460 48/50 current_auc = 0.4914772727272727
User 87460 AUC after training: 0.48863636363636365
User 87460 does not improve AUC. Reverting changes.
Training on augumented user 124198 49/50 current_auc = 0.4914772727272727
User 124198 AUC after training: 0.484375
User 124198 does not improve AUC. Reverting changes.
[2024-12-02 19:31:33.112957] start test user 32454 200/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:33.547531] start test user 32454 200/568 recall augumented users by random, augumented_users = [136384, 45230, 67607, 15588, 80249, 1781, 41490, 87393, 23799, 62822, 105578, 118235, 8746, 75186, 95519, 75225, 45160, 15441, 147, 600, 51180, 18551, 32975, 5534, 67544, 23052, 128386, 85873, 111407, 37076, 65012, 93596, 103844, 109432, 98576, 78667, 127396, 130603, 35857, 134775, 92965, 68321, 94393, 7958, 7152, 104582, 86417, 30197, 83395, 40837]
[2024-12-02 19:31:33.562512] user = 32454 Cloud 200/568
[2024-12-02 19:31:33.571637] user = 32454 Local 200/568
[2024-12-02 19:31:33.619133] user = 32454 Local+ 200/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:36.837538] user = 32454 MPDA- 200/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9166666666666667
Training on augumented user 136384 0/50 current_auc = 0.9166666666666667
User 136384 AUC after training: 0.9166666666666667
User 136384 does not improve AUC. Reverting changes.
Training on augumented user 45230 1/50 current_auc = 0.9166666666666667
User 45230 AUC after training: 0.9166666666666667
User 45230 does not improve AUC. Reverting changes.
Training on augumented user 67607 2/50 current_auc = 0.9166666666666667
User 67607 AUC after training: 0.9166666666666667
User 67607 does not improve AUC. Reverting changes.
Training on augumented user 15588 3/50 current_auc = 0.9166666666666667
User 15588 AUC after training: 0.9166666666666667
User 15588 does not improve AUC. Reverting changes.
Training on augumented user 80249 4/50 current_auc = 0.9166666666666667
User 80249 AUC after training: 0.9166666666666667
User 80249 does not improve AUC. Reverting changes.
Training on augumented user 1781 5/50 current_auc = 0.9166666666666667
User 1781 AUC after training: 0.9166666666666667
User 1781 does not improve AUC. Reverting changes.
Training on augumented user 41490 6/50 current_auc = 0.9166666666666667
User 41490 AUC after training: 0.9166666666666667
User 41490 does not improve AUC. Reverting changes.
Training on augumented user 87393 7/50 current_auc = 0.9166666666666667
User 87393 AUC after training: 0.9166666666666667
User 87393 does not improve AUC. Reverting changes.
Training on augumented user 23799 8/50 current_auc = 0.9166666666666667
User 23799 AUC after training: 0.9166666666666667
User 23799 does not improve AUC. Reverting changes.
Training on augumented user 62822 9/50 current_auc = 0.9166666666666667
User 62822 AUC after training: 0.9166666666666667
User 62822 does not improve AUC. Reverting changes.
Training on augumented user 105578 10/50 current_auc = 0.9166666666666667
User 105578 AUC after training: 0.9166666666666667
User 105578 does not improve AUC. Reverting changes.
Training on augumented user 118235 11/50 current_auc = 0.9166666666666667
User 118235 AUC after training: 0.9166666666666667
User 118235 does not improve AUC. Reverting changes.
Training on augumented user 8746 12/50 current_auc = 0.9166666666666667
User 8746 AUC after training: 0.9166666666666667
User 8746 does not improve AUC. Reverting changes.
Training on augumented user 75186 13/50 current_auc = 0.9166666666666667
User 75186 AUC after training: 0.9166666666666667
User 75186 does not improve AUC. Reverting changes.
Training on augumented user 95519 14/50 current_auc = 0.9166666666666667
User 95519 AUC after training: 0.9166666666666667
User 95519 does not improve AUC. Reverting changes.
Training on augumented user 75225 15/50 current_auc = 0.9166666666666667
User 75225 AUC after training: 0.9166666666666667
User 75225 does not improve AUC. Reverting changes.
Training on augumented user 45160 16/50 current_auc = 0.9166666666666667
User 45160 AUC after training: 0.9166666666666667
User 45160 does not improve AUC. Reverting changes.
Training on augumented user 15441 17/50 current_auc = 0.9166666666666667
User 15441 AUC after training: 0.9166666666666667
User 15441 does not improve AUC. Reverting changes.
Training on augumented user 147 18/50 current_auc = 0.9166666666666667
User 147 AUC after training: 0.9166666666666667
User 147 does not improve AUC. Reverting changes.
Training on augumented user 600 19/50 current_auc = 0.9166666666666667
User 600 AUC after training: 0.9166666666666667
User 600 does not improve AUC. Reverting changes.
Training on augumented user 51180 20/50 current_auc = 0.9166666666666667
User 51180 AUC after training: 0.9166666666666667
User 51180 does not improve AUC. Reverting changes.
Training on augumented user 18551 21/50 current_auc = 0.9166666666666667
User 18551 AUC after training: 0.9166666666666667
User 18551 does not improve AUC. Reverting changes.
Training on augumented user 32975 22/50 current_auc = 0.9166666666666667
User 32975 AUC after training: 0.9166666666666667
User 32975 does not improve AUC. Reverting changes.
Training on augumented user 5534 23/50 current_auc = 0.9166666666666667
User 5534 AUC after training: 0.9166666666666667
User 5534 does not improve AUC. Reverting changes.
Training on augumented user 67544 24/50 current_auc = 0.9166666666666667
User 67544 AUC after training: 0.9166666666666667
User 67544 does not improve AUC. Reverting changes.
Training on augumented user 23052 25/50 current_auc = 0.9166666666666667
User 23052 AUC after training: 0.9166666666666667
User 23052 does not improve AUC. Reverting changes.
Training on augumented user 128386 26/50 current_auc = 0.9166666666666667
User 128386 AUC after training: 0.9166666666666667
User 128386 does not improve AUC. Reverting changes.
Training on augumented user 85873 27/50 current_auc = 0.9166666666666667
User 85873 AUC after training: 0.9166666666666667
User 85873 does not improve AUC. Reverting changes.
Training on augumented user 111407 28/50 current_auc = 0.9166666666666667
User 111407 AUC after training: 0.9166666666666667
User 111407 does not improve AUC. Reverting changes.
Training on augumented user 37076 29/50 current_auc = 0.9166666666666667
User 37076 AUC after training: 0.9166666666666667
User 37076 does not improve AUC. Reverting changes.
Training on augumented user 65012 30/50 current_auc = 0.9166666666666667
User 65012 AUC after training: 0.9166666666666667
User 65012 does not improve AUC. Reverting changes.
Training on augumented user 93596 31/50 current_auc = 0.9166666666666667
User 93596 AUC after training: 0.9166666666666667
User 93596 does not improve AUC. Reverting changes.
Training on augumented user 103844 32/50 current_auc = 0.9166666666666667
User 103844 AUC after training: 0.9166666666666667
User 103844 does not improve AUC. Reverting changes.
Training on augumented user 109432 33/50 current_auc = 0.9166666666666667
User 109432 AUC after training: 0.9166666666666667
User 109432 does not improve AUC. Reverting changes.
Training on augumented user 98576 34/50 current_auc = 0.9166666666666667
User 98576 AUC after training: 0.9166666666666667
User 98576 does not improve AUC. Reverting changes.
Training on augumented user 78667 35/50 current_auc = 0.9166666666666667
User 78667 AUC after training: 0.9166666666666667
User 78667 does not improve AUC. Reverting changes.
Training on augumented user 127396 36/50 current_auc = 0.9166666666666667
User 127396 AUC after training: 0.9166666666666667
User 127396 does not improve AUC. Reverting changes.
Training on augumented user 130603 37/50 current_auc = 0.9166666666666667
User 130603 AUC after training: 0.9166666666666667
User 130603 does not improve AUC. Reverting changes.
Training on augumented user 35857 38/50 current_auc = 0.9166666666666667
User 35857 AUC after training: 0.9166666666666667
User 35857 does not improve AUC. Reverting changes.
Training on augumented user 134775 39/50 current_auc = 0.9166666666666667
User 134775 AUC after training: 0.9166666666666667
User 134775 does not improve AUC. Reverting changes.
Training on augumented user 92965 40/50 current_auc = 0.9166666666666667
User 92965 AUC after training: 0.9166666666666667
User 92965 does not improve AUC. Reverting changes.
Training on augumented user 68321 41/50 current_auc = 0.9166666666666667
User 68321 AUC after training: 0.9166666666666667
User 68321 does not improve AUC. Reverting changes.
Training on augumented user 94393 42/50 current_auc = 0.9166666666666667
User 94393 AUC after training: 0.9166666666666667
User 94393 does not improve AUC. Reverting changes.
Training on augumented user 7958 43/50 current_auc = 0.9166666666666667
User 7958 AUC after training: 0.9166666666666667
User 7958 does not improve AUC. Reverting changes.
Training on augumented user 7152 44/50 current_auc = 0.9166666666666667
User 7152 AUC after training: 0.9166666666666667
User 7152 does not improve AUC. Reverting changes.
Training on augumented user 104582 45/50 current_auc = 0.9166666666666667
User 104582 AUC after training: 0.9166666666666667
User 104582 does not improve AUC. Reverting changes.
Training on augumented user 86417 46/50 current_auc = 0.9166666666666667
User 86417 AUC after training: 0.9166666666666667
User 86417 does not improve AUC. Reverting changes.
Training on augumented user 30197 47/50 current_auc = 0.9166666666666667
User 30197 AUC after training: 0.9166666666666667
User 30197 does not improve AUC. Reverting changes.
Training on augumented user 83395 48/50 current_auc = 0.9166666666666667
User 83395 AUC after training: 0.9166666666666667
User 83395 does not improve AUC. Reverting changes.
Training on augumented user 40837 49/50 current_auc = 0.9166666666666667
User 40837 AUC after training: 0.9166666666666667
User 40837 does not improve AUC. Reverting changes.
[2024-12-02 19:32:07.687608] start test user 32487 201/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:08.184286] start test user 32487 201/568 recall augumented users by random, augumented_users = [134579, 19135, 43579, 119004, 54173, 100755, 96046, 10413, 132955, 86749, 9470, 81528, 38699, 85931, 51343, 92354, 49332, 97558, 136383, 69412, 1702, 65958, 132134, 77565, 2006, 133654, 111715, 33574, 97525, 18814, 93826, 135225, 43858, 32638, 69901, 116525, 131531, 134618, 72078, 54882, 46592, 104848, 1522, 116262, 131981, 86779, 13918, 47211, 33744, 2019]
[2024-12-02 19:32:08.201474] user = 32487 Cloud 201/568
[2024-12-02 19:32:08.221459] user = 32487 Local 201/568
[2024-12-02 19:32:08.267048] user = 32487 Local+ 201/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:10.626021] user = 32487 MPDA- 201/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8114909781576448
Training on augumented user 134579 0/50 current_auc = 0.8114909781576448
User 134579 AUC after training: 0.8110754985754987
User 134579 does not improve AUC. Reverting changes.
Training on augumented user 19135 1/50 current_auc = 0.8114909781576448
User 19135 AUC after training: 0.8110754985754987
User 19135 does not improve AUC. Reverting changes.
Training on augumented user 43579 2/50 current_auc = 0.8114909781576448
User 43579 AUC after training: 0.8111942070275404
User 43579 does not improve AUC. Reverting changes.
Training on augumented user 119004 3/50 current_auc = 0.8114909781576448
User 119004 AUC after training: 0.8119064577397911
User 119004 improves AUC. Keeping the model.
Training on augumented user 54173 4/50 current_auc = 0.8119064577397911
User 54173 AUC after training: 0.8119658119658121
User 54173 improves AUC. Keeping the model.
Training on augumented user 100755 5/50 current_auc = 0.8119658119658121
User 100755 AUC after training: 0.8122032288698956
User 100755 improves AUC. Keeping the model.
Training on augumented user 96046 6/50 current_auc = 0.8122032288698956
User 96046 AUC after training: 0.8110161443494777
User 96046 does not improve AUC. Reverting changes.
Training on augumented user 10413 7/50 current_auc = 0.8122032288698956
User 10413 AUC after training: 0.8126780626780626
User 10413 improves AUC. Keeping the model.
Training on augumented user 132955 8/50 current_auc = 0.8126780626780626
User 132955 AUC after training: 0.8125593542260209
User 132955 does not improve AUC. Reverting changes.
Training on augumented user 86749 9/50 current_auc = 0.8126780626780626
User 86749 AUC after training: 0.8104819563152896
User 86749 does not improve AUC. Reverting changes.
Training on augumented user 9470 10/50 current_auc = 0.8126780626780626
User 9470 AUC after training: 0.8123219373219374
User 9470 does not improve AUC. Reverting changes.
Training on augumented user 81528 11/50 current_auc = 0.8126780626780626
User 81528 AUC after training: 0.8139838556505223
User 81528 improves AUC. Keeping the model.
Training on augumented user 38699 12/50 current_auc = 0.8139838556505223
User 38699 AUC after training: 0.8131528964862299
User 38699 does not improve AUC. Reverting changes.
Training on augumented user 85931 13/50 current_auc = 0.8139838556505223
User 85931 AUC after training: 0.813627730294397
User 85931 does not improve AUC. Reverting changes.
Training on augumented user 51343 14/50 current_auc = 0.8139838556505223
User 51343 AUC after training: 0.8133903133903134
User 51343 does not improve AUC. Reverting changes.
Training on augumented user 92354 15/50 current_auc = 0.8139838556505223
User 92354 AUC after training: 0.8129748338081672
User 92354 does not improve AUC. Reverting changes.
Training on augumented user 49332 16/50 current_auc = 0.8139838556505223
User 49332 AUC after training: 0.8133309591642924
User 49332 does not improve AUC. Reverting changes.
Training on augumented user 97558 17/50 current_auc = 0.8139838556505223
User 97558 AUC after training: 0.8128561253561254
User 97558 does not improve AUC. Reverting changes.
Training on augumented user 136383 18/50 current_auc = 0.8139838556505223
User 136383 AUC after training: 0.8133903133903134
User 136383 does not improve AUC. Reverting changes.
Training on augumented user 69412 19/50 current_auc = 0.8139838556505223
User 69412 AUC after training: 0.8125000000000001
User 69412 does not improve AUC. Reverting changes.
Training on augumented user 1702 20/50 current_auc = 0.8139838556505223
User 1702 AUC after training: 0.8127374169040836
User 1702 does not improve AUC. Reverting changes.
Training on augumented user 65958 21/50 current_auc = 0.8139838556505223
User 65958 AUC after training: 0.8122032288698956
User 65958 does not improve AUC. Reverting changes.
Training on augumented user 132134 22/50 current_auc = 0.8139838556505223
User 132134 AUC after training: 0.8143993352326686
User 132134 improves AUC. Keeping the model.
Training on augumented user 77565 23/50 current_auc = 0.8143993352326686
User 77565 AUC after training: 0.8143993352326686
User 77565 does not improve AUC. Reverting changes.
Training on augumented user 2006 24/50 current_auc = 0.8143993352326686
User 2006 AUC after training: 0.813034188034188
User 2006 does not improve AUC. Reverting changes.
Training on augumented user 133654 25/50 current_auc = 0.8143993352326686
User 133654 AUC after training: 0.8132716049382717
User 133654 does not improve AUC. Reverting changes.
Training on augumented user 111715 26/50 current_auc = 0.8143993352326686
User 111715 AUC after training: 0.8138651471984807
User 111715 does not improve AUC. Reverting changes.
Training on augumented user 33574 27/50 current_auc = 0.8143993352326686
User 33574 AUC after training: 0.8126780626780626
User 33574 does not improve AUC. Reverting changes.
Training on augumented user 97525 28/50 current_auc = 0.8143993352326686
User 97525 AUC after training: 0.8133903133903134
User 97525 does not improve AUC. Reverting changes.
Training on augumented user 18814 29/50 current_auc = 0.8143993352326686
User 18814 AUC after training: 0.8128561253561254
User 18814 does not improve AUC. Reverting changes.
Training on augumented user 93826 30/50 current_auc = 0.8143993352326686
User 93826 AUC after training: 0.813034188034188
User 93826 does not improve AUC. Reverting changes.
Training on augumented user 135225 31/50 current_auc = 0.8143993352326686
User 135225 AUC after training: 0.813627730294397
User 135225 does not improve AUC. Reverting changes.
Training on augumented user 43858 32/50 current_auc = 0.8143993352326686
User 43858 AUC after training: 0.8127967711301045
User 43858 does not improve AUC. Reverting changes.
Training on augumented user 32638 33/50 current_auc = 0.8143993352326686
User 32638 AUC after training: 0.8142806267806268
User 32638 does not improve AUC. Reverting changes.
Training on augumented user 69901 34/50 current_auc = 0.8143993352326686
User 69901 AUC after training: 0.8143399810066477
User 69901 does not improve AUC. Reverting changes.
Training on augumented user 116525 35/50 current_auc = 0.8143993352326686
User 116525 AUC after training: 0.8142212725546059
User 116525 does not improve AUC. Reverting changes.
Training on augumented user 131531 36/50 current_auc = 0.8143993352326686
User 131531 AUC after training: 0.8137464387464388
User 131531 does not improve AUC. Reverting changes.
Training on augumented user 134618 37/50 current_auc = 0.8143993352326686
User 134618 AUC after training: 0.8125000000000001
User 134618 does not improve AUC. Reverting changes.
Training on augumented user 72078 38/50 current_auc = 0.8143993352326686
User 72078 AUC after training: 0.8133903133903133
User 72078 does not improve AUC. Reverting changes.
Training on augumented user 54882 39/50 current_auc = 0.8143993352326686
User 54882 AUC after training: 0.8126780626780628
User 54882 does not improve AUC. Reverting changes.
Training on augumented user 46592 40/50 current_auc = 0.8143993352326686
User 46592 AUC after training: 0.8128561253561254
User 46592 does not improve AUC. Reverting changes.
Training on augumented user 104848 41/50 current_auc = 0.8143993352326686
User 104848 AUC after training: 0.8133903133903134
User 104848 does not improve AUC. Reverting changes.
Training on augumented user 1522 42/50 current_auc = 0.8143993352326686
User 1522 AUC after training: 0.8139245014245016
User 1522 does not improve AUC. Reverting changes.
Training on augumented user 116262 43/50 current_auc = 0.8143993352326686
User 116262 AUC after training: 0.8120251661918328
User 116262 does not improve AUC. Reverting changes.
Training on augumented user 131981 44/50 current_auc = 0.8143993352326686
User 131981 AUC after training: 0.8135090218423552
User 131981 does not improve AUC. Reverting changes.
Training on augumented user 86779 45/50 current_auc = 0.8143993352326686
User 86779 AUC after training: 0.8141025641025641
User 86779 does not improve AUC. Reverting changes.
Training on augumented user 13918 46/50 current_auc = 0.8143993352326686
User 13918 AUC after training: 0.8126187084520419
User 13918 does not improve AUC. Reverting changes.
Training on augumented user 47211 47/50 current_auc = 0.8143993352326686
User 47211 AUC after training: 0.8136870845204178
User 47211 does not improve AUC. Reverting changes.
Training on augumented user 33744 48/50 current_auc = 0.8143993352326686
User 33744 AUC after training: 0.8125593542260209
User 33744 does not improve AUC. Reverting changes.
Training on augumented user 2019 49/50 current_auc = 0.8143993352326686
User 2019 AUC after training: 0.8136277302943971
User 2019 does not improve AUC. Reverting changes.
[2024-12-02 19:32:40.953317] start test user 32541 202/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:41.383056] start test user 32541 202/568 recall augumented users by random, augumented_users = [122541, 37817, 120226, 34848, 25869, 45297, 133454, 102897, 126690, 105918, 95705, 46506, 25807, 85264, 19859, 115768, 61824, 97013, 34756, 44946, 125415, 86164, 48607, 36832, 6383, 66182, 52422, 12996, 76020, 66501, 85034, 61721, 97380, 114379, 65945, 27221, 36748, 66266, 9832, 3630, 18630, 39852, 11869, 130897, 45265, 117885, 2078, 135410, 99119, 104432]
[2024-12-02 19:32:41.398658] user = 32541 Cloud 202/568
[2024-12-02 19:32:41.417427] user = 32541 Local 202/568
[2024-12-02 19:32:41.484004] user = 32541 Local+ 202/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:43.721412] user = 32541 MPDA- 202/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7134344528710725
Training on augumented user 122541 0/50 current_auc = 0.7134344528710725
User 122541 AUC after training: 0.7142470205850487
User 122541 improves AUC. Keeping the model.
Training on augumented user 37817 1/50 current_auc = 0.7142470205850487
User 37817 AUC after training: 0.7131635969664138
User 37817 does not improve AUC. Reverting changes.
Training on augumented user 120226 2/50 current_auc = 0.7142470205850487
User 120226 AUC after training: 0.7137053087757314
User 120226 does not improve AUC. Reverting changes.
Training on augumented user 34848 3/50 current_auc = 0.7142470205850487
User 34848 AUC after training: 0.7137053087757314
User 34848 does not improve AUC. Reverting changes.
Training on augumented user 25869 4/50 current_auc = 0.7142470205850487
User 25869 AUC after training: 0.7145178764897074
User 25869 improves AUC. Keeping the model.
Training on augumented user 45297 5/50 current_auc = 0.7145178764897074
User 45297 AUC after training: 0.7142470205850487
User 45297 does not improve AUC. Reverting changes.
Training on augumented user 133454 6/50 current_auc = 0.7145178764897074
User 133454 AUC after training: 0.7134344528710725
User 133454 does not improve AUC. Reverting changes.
Training on augumented user 102897 7/50 current_auc = 0.7145178764897074
User 102897 AUC after training: 0.7142470205850487
User 102897 does not improve AUC. Reverting changes.
Training on augumented user 126690 8/50 current_auc = 0.7145178764897074
User 126690 AUC after training: 0.713163596966414
User 126690 does not improve AUC. Reverting changes.
Training on augumented user 105918 9/50 current_auc = 0.7145178764897074
User 105918 AUC after training: 0.7145178764897074
User 105918 does not improve AUC. Reverting changes.
Training on augumented user 95705 10/50 current_auc = 0.7145178764897074
User 95705 AUC after training: 0.7137053087757314
User 95705 does not improve AUC. Reverting changes.
Training on augumented user 46506 11/50 current_auc = 0.7145178764897074
User 46506 AUC after training: 0.71397616468039
User 46506 does not improve AUC. Reverting changes.
Training on augumented user 25807 12/50 current_auc = 0.7145178764897074
User 25807 AUC after training: 0.712080173347779
User 25807 does not improve AUC. Reverting changes.
Training on augumented user 85264 13/50 current_auc = 0.7145178764897074
User 85264 AUC after training: 0.712486457204767
User 85264 does not improve AUC. Reverting changes.
Training on augumented user 19859 14/50 current_auc = 0.7145178764897074
User 19859 AUC after training: 0.7145178764897075
User 19859 improves AUC. Keeping the model.
Training on augumented user 115768 15/50 current_auc = 0.7145178764897075
User 115768 AUC after training: 0.7142470205850489
User 115768 does not improve AUC. Reverting changes.
Training on augumented user 61824 16/50 current_auc = 0.7145178764897075
User 61824 AUC after training: 0.712892741061755
User 61824 does not improve AUC. Reverting changes.
Training on augumented user 97013 17/50 current_auc = 0.7145178764897075
User 97013 AUC after training: 0.7142470205850487
User 97013 does not improve AUC. Reverting changes.
Training on augumented user 34756 18/50 current_auc = 0.7145178764897075
User 34756 AUC after training: 0.7153304442036836
User 34756 improves AUC. Keeping the model.
Training on augumented user 44946 19/50 current_auc = 0.7153304442036836
User 44946 AUC after training: 0.71397616468039
User 44946 does not improve AUC. Reverting changes.
Training on augumented user 125415 20/50 current_auc = 0.7153304442036836
User 125415 AUC after training: 0.7150595882990249
User 125415 does not improve AUC. Reverting changes.
Training on augumented user 86164 21/50 current_auc = 0.7153304442036836
User 86164 AUC after training: 0.7150595882990249
User 86164 does not improve AUC. Reverting changes.
Training on augumented user 48607 22/50 current_auc = 0.7153304442036836
User 48607 AUC after training: 0.7145178764897074
User 48607 does not improve AUC. Reverting changes.
Training on augumented user 36832 23/50 current_auc = 0.7153304442036836
User 36832 AUC after training: 0.7145178764897075
User 36832 does not improve AUC. Reverting changes.
Training on augumented user 6383 24/50 current_auc = 0.7153304442036836
User 6383 AUC after training: 0.7142470205850487
User 6383 does not improve AUC. Reverting changes.
Training on augumented user 66182 25/50 current_auc = 0.7153304442036836
User 66182 AUC after training: 0.7150595882990249
User 66182 does not improve AUC. Reverting changes.
Training on augumented user 52422 26/50 current_auc = 0.7153304442036836
User 52422 AUC after training: 0.7137053087757312
User 52422 does not improve AUC. Reverting changes.
Training on augumented user 12996 27/50 current_auc = 0.7153304442036836
User 12996 AUC after training: 0.7134344528710725
User 12996 does not improve AUC. Reverting changes.
Training on augumented user 76020 28/50 current_auc = 0.7153304442036836
User 76020 AUC after training: 0.7142470205850487
User 76020 does not improve AUC. Reverting changes.
Training on augumented user 66501 29/50 current_auc = 0.7153304442036836
User 66501 AUC after training: 0.7134344528710727
User 66501 does not improve AUC. Reverting changes.
Training on augumented user 85034 30/50 current_auc = 0.7153304442036836
User 85034 AUC after training: 0.715872156013001
User 85034 improves AUC. Keeping the model.
Training on augumented user 61721 31/50 current_auc = 0.715872156013001
User 61721 AUC after training: 0.7156013001083423
User 61721 does not improve AUC. Reverting changes.
Training on augumented user 97380 32/50 current_auc = 0.715872156013001
User 97380 AUC after training: 0.7147887323943662
User 97380 does not improve AUC. Reverting changes.
Training on augumented user 114379 33/50 current_auc = 0.715872156013001
User 114379 AUC after training: 0.7156013001083423
User 114379 does not improve AUC. Reverting changes.
Training on augumented user 65945 34/50 current_auc = 0.715872156013001
User 65945 AUC after training: 0.7164138678223185
User 65945 improves AUC. Keeping the model.
Training on augumented user 27221 35/50 current_auc = 0.7164138678223185
User 27221 AUC after training: 0.715872156013001
User 27221 does not improve AUC. Reverting changes.
Training on augumented user 36748 36/50 current_auc = 0.7164138678223185
User 36748 AUC after training: 0.7149241603466956
User 36748 does not improve AUC. Reverting changes.
Training on augumented user 66266 37/50 current_auc = 0.7164138678223185
User 66266 AUC after training: 0.7153304442036836
User 66266 does not improve AUC. Reverting changes.
Training on augumented user 9832 38/50 current_auc = 0.7164138678223185
User 9832 AUC after training: 0.7158721560130011
User 9832 does not improve AUC. Reverting changes.
Training on augumented user 3630 39/50 current_auc = 0.7164138678223185
User 3630 AUC after training: 0.7130281690140845
User 3630 does not improve AUC. Reverting changes.
Training on augumented user 18630 40/50 current_auc = 0.7164138678223185
User 18630 AUC after training: 0.7161430119176598
User 18630 does not improve AUC. Reverting changes.
Training on augumented user 39852 41/50 current_auc = 0.7164138678223185
User 39852 AUC after training: 0.7164138678223185
User 39852 does not improve AUC. Reverting changes.
Training on augumented user 11869 42/50 current_auc = 0.7164138678223185
User 11869 AUC after training: 0.7158721560130011
User 11869 does not improve AUC. Reverting changes.
Training on augumented user 130897 43/50 current_auc = 0.7164138678223185
User 130897 AUC after training: 0.7169555796316359
User 130897 improves AUC. Keeping the model.
Training on augumented user 45265 44/50 current_auc = 0.7169555796316359
User 45265 AUC after training: 0.715872156013001
User 45265 does not improve AUC. Reverting changes.
Training on augumented user 117885 45/50 current_auc = 0.7169555796316359
User 117885 AUC after training: 0.7164138678223185
User 117885 does not improve AUC. Reverting changes.
Training on augumented user 2078 46/50 current_auc = 0.7169555796316359
User 2078 AUC after training: 0.7153304442036836
User 2078 does not improve AUC. Reverting changes.
Training on augumented user 135410 47/50 current_auc = 0.7169555796316359
User 135410 AUC after training: 0.7166847237269772
User 135410 does not improve AUC. Reverting changes.
Training on augumented user 99119 48/50 current_auc = 0.7169555796316359
User 99119 AUC after training: 0.7137053087757314
User 99119 does not improve AUC. Reverting changes.
Training on augumented user 104432 49/50 current_auc = 0.7169555796316359
User 104432 AUC after training: 0.7150595882990249
User 104432 does not improve AUC. Reverting changes.
[2024-12-02 19:33:12.812301] start test user 32545 203/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:13.606712] start test user 32545 203/568 recall augumented users by random, augumented_users = [13298, 9707, 101173, 79887, 79839, 118164, 5558, 101999, 64285, 107821, 107237, 19797, 74831, 28422, 61358, 99842, 120408, 85885, 34436, 48116, 98752, 121795, 77598, 113358, 117252, 136033, 13451, 117032, 22735, 22149, 133467, 95268, 11621, 76551, 57632, 85656, 51169, 111870, 34279, 50966, 29919, 11568, 98712, 31339, 94474, 17483, 37084, 99244, 106751, 108837]
[2024-12-02 19:33:13.623491] user = 32545 Cloud 203/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:33:13.656058] user = 32545 Local 203/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:33:13.734486] user = 32545 Local+ 203/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:33:16.248423] user = 32545 MPDA- 203/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 13298 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13298 AUC after training: 0.5
User 13298 does not improve AUC. Reverting changes.
Training on augumented user 9707 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9707 AUC after training: 0.5
User 9707 does not improve AUC. Reverting changes.
Training on augumented user 101173 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101173 AUC after training: 0.5
User 101173 does not improve AUC. Reverting changes.
Training on augumented user 79887 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79887 AUC after training: 0.5
User 79887 does not improve AUC. Reverting changes.
Training on augumented user 79839 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79839 AUC after training: 0.5
User 79839 does not improve AUC. Reverting changes.
Training on augumented user 118164 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118164 AUC after training: 0.5
User 118164 does not improve AUC. Reverting changes.
Training on augumented user 5558 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5558 AUC after training: 0.5
User 5558 does not improve AUC. Reverting changes.
Training on augumented user 101999 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101999 AUC after training: 0.5
User 101999 does not improve AUC. Reverting changes.
Training on augumented user 64285 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64285 AUC after training: 0.5
User 64285 does not improve AUC. Reverting changes.
Training on augumented user 107821 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107821 AUC after training: 0.5
User 107821 does not improve AUC. Reverting changes.
Training on augumented user 107237 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107237 AUC after training: 0.5
User 107237 does not improve AUC. Reverting changes.
Training on augumented user 19797 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19797 AUC after training: 0.5
User 19797 does not improve AUC. Reverting changes.
Training on augumented user 74831 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74831 AUC after training: 0.5
User 74831 does not improve AUC. Reverting changes.
Training on augumented user 28422 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28422 AUC after training: 0.5
User 28422 does not improve AUC. Reverting changes.
Training on augumented user 61358 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61358 AUC after training: 0.5
User 61358 does not improve AUC. Reverting changes.
Training on augumented user 99842 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99842 AUC after training: 0.5
User 99842 does not improve AUC. Reverting changes.
Training on augumented user 120408 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120408 AUC after training: 0.5
User 120408 does not improve AUC. Reverting changes.
Training on augumented user 85885 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85885 AUC after training: 0.5
User 85885 does not improve AUC. Reverting changes.
Training on augumented user 34436 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34436 AUC after training: 0.5
User 34436 does not improve AUC. Reverting changes.
Training on augumented user 48116 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48116 AUC after training: 0.5
User 48116 does not improve AUC. Reverting changes.
Training on augumented user 98752 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98752 AUC after training: 0.5
User 98752 does not improve AUC. Reverting changes.
Training on augumented user 121795 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121795 AUC after training: 0.5
User 121795 does not improve AUC. Reverting changes.
Training on augumented user 77598 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77598 AUC after training: 0.5
User 77598 does not improve AUC. Reverting changes.
Training on augumented user 113358 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113358 AUC after training: 0.5
User 113358 does not improve AUC. Reverting changes.
Training on augumented user 117252 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117252 AUC after training: 0.5
User 117252 does not improve AUC. Reverting changes.
Training on augumented user 136033 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136033 AUC after training: 0.5
User 136033 does not improve AUC. Reverting changes.
Training on augumented user 13451 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13451 AUC after training: 0.5
User 13451 does not improve AUC. Reverting changes.
Training on augumented user 117032 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117032 AUC after training: 0.5
User 117032 does not improve AUC. Reverting changes.
Training on augumented user 22735 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22735 AUC after training: 0.5
User 22735 does not improve AUC. Reverting changes.
Training on augumented user 22149 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22149 AUC after training: 0.5
User 22149 does not improve AUC. Reverting changes.
Training on augumented user 133467 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133467 AUC after training: 0.5
User 133467 does not improve AUC. Reverting changes.
Training on augumented user 95268 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95268 AUC after training: 0.5
User 95268 does not improve AUC. Reverting changes.
Training on augumented user 11621 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11621 AUC after training: 0.5
User 11621 does not improve AUC. Reverting changes.
Training on augumented user 76551 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76551 AUC after training: 0.5
User 76551 does not improve AUC. Reverting changes.
Training on augumented user 57632 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57632 AUC after training: 0.5
User 57632 does not improve AUC. Reverting changes.
Training on augumented user 85656 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85656 AUC after training: 0.5
User 85656 does not improve AUC. Reverting changes.
Training on augumented user 51169 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51169 AUC after training: 0.5
User 51169 does not improve AUC. Reverting changes.
Training on augumented user 111870 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111870 AUC after training: 0.5
User 111870 does not improve AUC. Reverting changes.
Training on augumented user 34279 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34279 AUC after training: 0.5
User 34279 does not improve AUC. Reverting changes.
Training on augumented user 50966 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50966 AUC after training: 0.5
User 50966 does not improve AUC. Reverting changes.
Training on augumented user 29919 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29919 AUC after training: 0.5
User 29919 does not improve AUC. Reverting changes.
Training on augumented user 11568 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11568 AUC after training: 0.5
User 11568 does not improve AUC. Reverting changes.
Training on augumented user 98712 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98712 AUC after training: 0.5
User 98712 does not improve AUC. Reverting changes.
Training on augumented user 31339 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31339 AUC after training: 0.5
User 31339 does not improve AUC. Reverting changes.
Training on augumented user 94474 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94474 AUC after training: 0.5
User 94474 does not improve AUC. Reverting changes.
Training on augumented user 17483 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17483 AUC after training: 0.5
User 17483 does not improve AUC. Reverting changes.
Training on augumented user 37084 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37084 AUC after training: 0.5
User 37084 does not improve AUC. Reverting changes.
Training on augumented user 99244 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99244 AUC after training: 0.5
User 99244 does not improve AUC. Reverting changes.
Training on augumented user 106751 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106751 AUC after training: 0.5
User 106751 does not improve AUC. Reverting changes.
Training on augumented user 108837 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108837 AUC after training: 0.5
User 108837 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:33:45.742271] start test user 32613 204/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:46.180530] start test user 32613 204/568 recall augumented users by random, augumented_users = [38551, 124353, 66986, 74993, 129836, 101505, 91824, 16937, 29578, 19894, 29285, 69333, 66641, 43983, 68654, 134785, 9999, 45455, 9382, 88368, 112758, 86255, 105226, 2520, 41587, 104975, 40021, 3278, 120607, 53262, 30661, 47934, 59467, 50277, 76078, 44950, 74081, 102793, 75659, 117314, 4894, 44107, 51401, 9782, 79837, 49888, 30413, 104994, 101808, 25770]
[2024-12-02 19:33:46.201687] user = 32613 Cloud 204/568
[2024-12-02 19:33:46.230436] user = 32613 Local 204/568
[2024-12-02 19:33:46.360135] user = 32613 Local+ 204/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:48.617355] user = 32613 MPDA- 204/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5843015913109372
Training on augumented user 38551 0/50 current_auc = 0.5843015913109372
User 38551 AUC after training: 0.584554180348573
User 38551 improves AUC. Keeping the model.
Training on augumented user 124353 1/50 current_auc = 0.584554180348573
User 124353 AUC after training: 0.5853750947208891
User 124353 improves AUC. Keeping the model.
Training on augumented user 66986 2/50 current_auc = 0.5853750947208891
User 66986 AUC after training: 0.5847436221267996
User 66986 does not improve AUC. Reverting changes.
Training on augumented user 74993 3/50 current_auc = 0.5853750947208891
User 74993 AUC after training: 0.5848699166456175
User 74993 does not improve AUC. Reverting changes.
Training on augumented user 129836 4/50 current_auc = 0.5853750947208891
User 129836 AUC after training: 0.5851225056832533
User 129836 does not improve AUC. Reverting changes.
Training on augumented user 101505 5/50 current_auc = 0.5853750947208891
User 101505 AUC after training: 0.5848699166456176
User 101505 does not improve AUC. Reverting changes.
Training on augumented user 91824 6/50 current_auc = 0.5853750947208891
User 91824 AUC after training: 0.584364738570346
User 91824 does not improve AUC. Reverting changes.
Training on augumented user 16937 7/50 current_auc = 0.5853750947208891
User 16937 AUC after training: 0.5851225056832533
User 16937 does not improve AUC. Reverting changes.
Training on augumented user 29578 8/50 current_auc = 0.5853750947208891
User 29578 AUC after training: 0.584364738570346
User 29578 does not improve AUC. Reverting changes.
Training on augumented user 19894 9/50 current_auc = 0.5853750947208891
User 19894 AUC after training: 0.5855013892397071
User 19894 improves AUC. Keeping the model.
Training on augumented user 29285 10/50 current_auc = 0.5855013892397071
User 29285 AUC after training: 0.5848699166456176
User 29285 does not improve AUC. Reverting changes.
Training on augumented user 69333 11/50 current_auc = 0.5855013892397071
User 69333 AUC after training: 0.5857539782773427
User 69333 improves AUC. Keeping the model.
Training on augumented user 66641 12/50 current_auc = 0.5857539782773427
User 66641 AUC after training: 0.5853750947208891
User 66641 does not improve AUC. Reverting changes.
Training on augumented user 43983 13/50 current_auc = 0.5857539782773427
User 43983 AUC after training: 0.5848699166456176
User 43983 does not improve AUC. Reverting changes.
Training on augumented user 68654 14/50 current_auc = 0.5857539782773427
User 68654 AUC after training: 0.585501389239707
User 68654 does not improve AUC. Reverting changes.
Training on augumented user 134785 15/50 current_auc = 0.5857539782773427
User 134785 AUC after training: 0.5847436221267996
User 134785 does not improve AUC. Reverting changes.
Training on augumented user 9999 16/50 current_auc = 0.5857539782773427
User 9999 AUC after training: 0.5855013892397071
User 9999 does not improve AUC. Reverting changes.
Training on augumented user 45455 17/50 current_auc = 0.5857539782773427
User 45455 AUC after training: 0.585501389239707
User 45455 does not improve AUC. Reverting changes.
Training on augumented user 9382 18/50 current_auc = 0.5857539782773427
User 9382 AUC after training: 0.5846173276079818
User 9382 does not improve AUC. Reverting changes.
Training on augumented user 88368 19/50 current_auc = 0.5857539782773427
User 88368 AUC after training: 0.5858802727961607
User 88368 improves AUC. Keeping the model.
Training on augumented user 112758 20/50 current_auc = 0.5858802727961607
User 112758 AUC after training: 0.5839858550138923
User 112758 does not improve AUC. Reverting changes.
Training on augumented user 86255 21/50 current_auc = 0.5858802727961607
User 86255 AUC after training: 0.5855013892397071
User 86255 does not improve AUC. Reverting changes.
Training on augumented user 105226 22/50 current_auc = 0.5858802727961607
User 105226 AUC after training: 0.5855013892397071
User 105226 does not improve AUC. Reverting changes.
Training on augumented user 2520 23/50 current_auc = 0.5858802727961607
User 2520 AUC after training: 0.5851225056832533
User 2520 does not improve AUC. Reverting changes.
Training on augumented user 41587 24/50 current_auc = 0.5858802727961607
User 41587 AUC after training: 0.5849962111644355
User 41587 does not improve AUC. Reverting changes.
Training on augumented user 104975 25/50 current_auc = 0.5858802727961607
User 104975 AUC after training: 0.5851225056832533
User 104975 does not improve AUC. Reverting changes.
Training on augumented user 40021 26/50 current_auc = 0.5858802727961607
User 40021 AUC after training: 0.5843647385703461
User 40021 does not improve AUC. Reverting changes.
Training on augumented user 3278 27/50 current_auc = 0.5858802727961607
User 3278 AUC after training: 0.5854382419802981
User 3278 does not improve AUC. Reverting changes.
Training on augumented user 120607 28/50 current_auc = 0.5858802727961607
User 120607 AUC after training: 0.5852488002020713
User 120607 does not improve AUC. Reverting changes.
Training on augumented user 53262 29/50 current_auc = 0.5858802727961607
User 53262 AUC after training: 0.5856276837585249
User 53262 does not improve AUC. Reverting changes.
Training on augumented user 30661 30/50 current_auc = 0.5858802727961607
User 30661 AUC after training: 0.5856276837585249
User 30661 does not improve AUC. Reverting changes.
Training on augumented user 47934 31/50 current_auc = 0.5858802727961607
User 47934 AUC after training: 0.5843647385703461
User 47934 does not improve AUC. Reverting changes.
Training on augumented user 59467 32/50 current_auc = 0.5858802727961607
User 59467 AUC after training: 0.5852488002020713
User 59467 does not improve AUC. Reverting changes.
Training on augumented user 50277 33/50 current_auc = 0.5858802727961607
User 50277 AUC after training: 0.5839227077544835
User 50277 does not improve AUC. Reverting changes.
Training on augumented user 76078 34/50 current_auc = 0.5858802727961607
User 76078 AUC after training: 0.5847436221267996
User 76078 does not improve AUC. Reverting changes.
Training on augumented user 44950 35/50 current_auc = 0.5858802727961607
User 44950 AUC after training: 0.5860065673149786
User 44950 improves AUC. Keeping the model.
Training on augumented user 74081 36/50 current_auc = 0.5860065673149786
User 74081 AUC after training: 0.5856276837585249
User 74081 does not improve AUC. Reverting changes.
Training on augumented user 102793 37/50 current_auc = 0.5860065673149786
User 102793 AUC after training: 0.5842384440515281
User 102793 does not improve AUC. Reverting changes.
Training on augumented user 75659 38/50 current_auc = 0.5860065673149786
User 75659 AUC after training: 0.5853750947208892
User 75659 does not improve AUC. Reverting changes.
Training on augumented user 117314 39/50 current_auc = 0.5860065673149786
User 117314 AUC after training: 0.5848699166456176
User 117314 does not improve AUC. Reverting changes.
Training on augumented user 4894 40/50 current_auc = 0.5860065673149786
User 4894 AUC after training: 0.585501389239707
User 4894 does not improve AUC. Reverting changes.
Training on augumented user 44107 41/50 current_auc = 0.5860065673149786
User 44107 AUC after training: 0.5842384440515281
User 44107 does not improve AUC. Reverting changes.
Training on augumented user 51401 42/50 current_auc = 0.5860065673149786
User 51401 AUC after training: 0.5853119474614801
User 51401 does not improve AUC. Reverting changes.
Training on augumented user 9782 43/50 current_auc = 0.5860065673149786
User 9782 AUC after training: 0.5853750947208891
User 9782 does not improve AUC. Reverting changes.
Training on augumented user 79837 44/50 current_auc = 0.5860065673149786
User 79837 AUC after training: 0.5847436221267996
User 79837 does not improve AUC. Reverting changes.
Training on augumented user 49888 45/50 current_auc = 0.5860065673149786
User 49888 AUC after training: 0.5839227077544834
User 49888 does not improve AUC. Reverting changes.
Training on augumented user 30413 46/50 current_auc = 0.5860065673149786
User 30413 AUC after training: 0.5851225056832534
User 30413 does not improve AUC. Reverting changes.
Training on augumented user 104994 47/50 current_auc = 0.5860065673149786
User 104994 AUC after training: 0.5853750947208891
User 104994 does not improve AUC. Reverting changes.
Training on augumented user 101808 48/50 current_auc = 0.5860065673149786
User 101808 AUC after training: 0.5857539782773428
User 101808 does not improve AUC. Reverting changes.
Training on augumented user 25770 49/50 current_auc = 0.5860065673149786
User 25770 AUC after training: 0.5842384440515281
User 25770 does not improve AUC. Reverting changes.
[2024-12-02 19:34:19.248814] start test user 32618 205/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:19.897050] start test user 32618 205/568 recall augumented users by random, augumented_users = [33081, 83964, 128940, 102405, 22081, 68224, 123284, 68104, 80555, 71228, 22978, 90358, 107181, 4003, 76451, 125198, 74311, 64867, 26733, 125156, 133747, 67034, 121740, 25536, 31318, 49821, 126957, 20077, 7807, 95598, 106855, 135185, 124034, 51237, 70015, 34695, 63521, 111532, 5627, 80483, 5952, 104008, 129417, 43743, 97990, 106333, 32133, 36337, 78545, 54820]
[2024-12-02 19:34:19.957942] user = 32618 Cloud 205/568
[2024-12-02 19:34:19.994506] user = 32618 Local 205/568
[2024-12-02 19:34:20.070816] user = 32618 Local+ 205/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:22.007504] user = 32618 MPDA- 205/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6131578947368421
Training on augumented user 33081 0/50 current_auc = 0.6131578947368421
User 33081 AUC after training: 0.6140350877192982
User 33081 improves AUC. Keeping the model.
Training on augumented user 83964 1/50 current_auc = 0.6140350877192982
User 83964 AUC after training: 0.6140350877192983
User 83964 improves AUC. Keeping the model.
Training on augumented user 128940 2/50 current_auc = 0.6140350877192983
User 128940 AUC after training: 0.6131578947368421
User 128940 does not improve AUC. Reverting changes.
Training on augumented user 102405 3/50 current_auc = 0.6140350877192983
User 102405 AUC after training: 0.612280701754386
User 102405 does not improve AUC. Reverting changes.
Training on augumented user 22081 4/50 current_auc = 0.6140350877192983
User 22081 AUC after training: 0.6131578947368421
User 22081 does not improve AUC. Reverting changes.
Training on augumented user 68224 5/50 current_auc = 0.6140350877192983
User 68224 AUC after training: 0.6140350877192983
User 68224 does not improve AUC. Reverting changes.
Training on augumented user 123284 6/50 current_auc = 0.6140350877192983
User 123284 AUC after training: 0.612280701754386
User 123284 does not improve AUC. Reverting changes.
Training on augumented user 68104 7/50 current_auc = 0.6140350877192983
User 68104 AUC after training: 0.6140350877192983
User 68104 does not improve AUC. Reverting changes.
Training on augumented user 80555 8/50 current_auc = 0.6140350877192983
User 80555 AUC after training: 0.6131578947368421
User 80555 does not improve AUC. Reverting changes.
Training on augumented user 71228 9/50 current_auc = 0.6140350877192983
User 71228 AUC after training: 0.613157894736842
User 71228 does not improve AUC. Reverting changes.
Training on augumented user 22978 10/50 current_auc = 0.6140350877192983
User 22978 AUC after training: 0.6131578947368421
User 22978 does not improve AUC. Reverting changes.
Training on augumented user 90358 11/50 current_auc = 0.6140350877192983
User 90358 AUC after training: 0.6140350877192983
User 90358 does not improve AUC. Reverting changes.
Training on augumented user 107181 12/50 current_auc = 0.6140350877192983
User 107181 AUC after training: 0.6140350877192983
User 107181 does not improve AUC. Reverting changes.
Training on augumented user 4003 13/50 current_auc = 0.6140350877192983
User 4003 AUC after training: 0.6131578947368421
User 4003 does not improve AUC. Reverting changes.
Training on augumented user 76451 14/50 current_auc = 0.6140350877192983
User 76451 AUC after training: 0.6140350877192983
User 76451 does not improve AUC. Reverting changes.
Training on augumented user 125198 15/50 current_auc = 0.6140350877192983
User 125198 AUC after training: 0.6131578947368421
User 125198 does not improve AUC. Reverting changes.
Training on augumented user 74311 16/50 current_auc = 0.6140350877192983
User 74311 AUC after training: 0.612280701754386
User 74311 does not improve AUC. Reverting changes.
Training on augumented user 64867 17/50 current_auc = 0.6140350877192983
User 64867 AUC after training: 0.6096491228070176
User 64867 does not improve AUC. Reverting changes.
Training on augumented user 26733 18/50 current_auc = 0.6140350877192983
User 26733 AUC after training: 0.6114035087719298
User 26733 does not improve AUC. Reverting changes.
Training on augumented user 125156 19/50 current_auc = 0.6140350877192983
User 125156 AUC after training: 0.6131578947368421
User 125156 does not improve AUC. Reverting changes.
Training on augumented user 133747 20/50 current_auc = 0.6140350877192983
User 133747 AUC after training: 0.6078947368421053
User 133747 does not improve AUC. Reverting changes.
Training on augumented user 67034 21/50 current_auc = 0.6140350877192983
User 67034 AUC after training: 0.6131578947368421
User 67034 does not improve AUC. Reverting changes.
Training on augumented user 121740 22/50 current_auc = 0.6140350877192983
User 121740 AUC after training: 0.612280701754386
User 121740 does not improve AUC. Reverting changes.
Training on augumented user 25536 23/50 current_auc = 0.6140350877192983
User 25536 AUC after training: 0.6131578947368421
User 25536 does not improve AUC. Reverting changes.
Training on augumented user 31318 24/50 current_auc = 0.6140350877192983
User 31318 AUC after training: 0.6140350877192982
User 31318 does not improve AUC. Reverting changes.
Training on augumented user 49821 25/50 current_auc = 0.6140350877192983
User 49821 AUC after training: 0.6131578947368421
User 49821 does not improve AUC. Reverting changes.
Training on augumented user 126957 26/50 current_auc = 0.6140350877192983
User 126957 AUC after training: 0.6131578947368421
User 126957 does not improve AUC. Reverting changes.
Training on augumented user 20077 27/50 current_auc = 0.6140350877192983
User 20077 AUC after training: 0.612280701754386
User 20077 does not improve AUC. Reverting changes.
Training on augumented user 7807 28/50 current_auc = 0.6140350877192983
User 7807 AUC after training: 0.6131578947368421
User 7807 does not improve AUC. Reverting changes.
Training on augumented user 95598 29/50 current_auc = 0.6140350877192983
User 95598 AUC after training: 0.6149122807017544
User 95598 improves AUC. Keeping the model.
Training on augumented user 106855 30/50 current_auc = 0.6149122807017544
User 106855 AUC after training: 0.6140350877192983
User 106855 does not improve AUC. Reverting changes.
Training on augumented user 135185 31/50 current_auc = 0.6149122807017544
User 135185 AUC after training: 0.6166666666666667
User 135185 improves AUC. Keeping the model.
Training on augumented user 124034 32/50 current_auc = 0.6166666666666667
User 124034 AUC after training: 0.6149122807017544
User 124034 does not improve AUC. Reverting changes.
Training on augumented user 51237 33/50 current_auc = 0.6166666666666667
User 51237 AUC after training: 0.6140350877192983
User 51237 does not improve AUC. Reverting changes.
Training on augumented user 70015 34/50 current_auc = 0.6166666666666667
User 70015 AUC after training: 0.6166666666666667
User 70015 does not improve AUC. Reverting changes.
Training on augumented user 34695 35/50 current_auc = 0.6166666666666667
User 34695 AUC after training: 0.6157894736842106
User 34695 does not improve AUC. Reverting changes.
Training on augumented user 63521 36/50 current_auc = 0.6166666666666667
User 63521 AUC after training: 0.612280701754386
User 63521 does not improve AUC. Reverting changes.
Training on augumented user 111532 37/50 current_auc = 0.6166666666666667
User 111532 AUC after training: 0.6149122807017544
User 111532 does not improve AUC. Reverting changes.
Training on augumented user 5627 38/50 current_auc = 0.6166666666666667
User 5627 AUC after training: 0.6157894736842106
User 5627 does not improve AUC. Reverting changes.
Training on augumented user 80483 39/50 current_auc = 0.6166666666666667
User 80483 AUC after training: 0.6166666666666667
User 80483 does not improve AUC. Reverting changes.
Training on augumented user 5952 40/50 current_auc = 0.6166666666666667
User 5952 AUC after training: 0.6131578947368421
User 5952 does not improve AUC. Reverting changes.
Training on augumented user 104008 41/50 current_auc = 0.6166666666666667
User 104008 AUC after training: 0.6157894736842104
User 104008 does not improve AUC. Reverting changes.
Training on augumented user 129417 42/50 current_auc = 0.6166666666666667
User 129417 AUC after training: 0.6149122807017544
User 129417 does not improve AUC. Reverting changes.
Training on augumented user 43743 43/50 current_auc = 0.6166666666666667
User 43743 AUC after training: 0.6157894736842106
User 43743 does not improve AUC. Reverting changes.
Training on augumented user 97990 44/50 current_auc = 0.6166666666666667
User 97990 AUC after training: 0.6131578947368421
User 97990 does not improve AUC. Reverting changes.
Training on augumented user 106333 45/50 current_auc = 0.6166666666666667
User 106333 AUC after training: 0.6140350877192983
User 106333 does not improve AUC. Reverting changes.
Training on augumented user 32133 46/50 current_auc = 0.6166666666666667
User 32133 AUC after training: 0.6157894736842106
User 32133 does not improve AUC. Reverting changes.
Training on augumented user 36337 47/50 current_auc = 0.6166666666666667
User 36337 AUC after training: 0.612280701754386
User 36337 does not improve AUC. Reverting changes.
Training on augumented user 78545 48/50 current_auc = 0.6166666666666667
User 78545 AUC after training: 0.6201754385964913
User 78545 improves AUC. Keeping the model.
Training on augumented user 54820 49/50 current_auc = 0.6201754385964913
User 54820 AUC after training: 0.618421052631579
User 54820 does not improve AUC. Reverting changes.
[2024-12-02 19:34:50.714930] start test user 32620 206/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:51.385356] start test user 32620 206/568 recall augumented users by random, augumented_users = [116121, 32083, 62402, 113495, 133231, 61124, 89048, 28747, 27603, 134465, 60886, 1659, 16307, 9488, 38491, 118028, 47777, 131178, 10554, 67986, 29169, 2883, 55124, 5454, 61225, 9906, 90207, 25467, 4619, 52621, 10111, 107278, 83567, 114854, 129376, 52890, 15699, 73276, 105732, 135093, 26005, 136578, 83355, 131689, 16021, 102035, 12079, 52734, 103309, 29847]
[2024-12-02 19:34:51.412281] user = 32620 Cloud 206/568
[2024-12-02 19:34:51.428853] user = 32620 Local 206/568
[2024-12-02 19:34:51.459287] user = 32620 Local+ 206/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:53.165056] user = 32620 MPDA- 206/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9298245614035088
Training on augumented user 116121 0/50 current_auc = 0.9298245614035088
User 116121 AUC after training: 0.912280701754386
User 116121 does not improve AUC. Reverting changes.
Training on augumented user 32083 1/50 current_auc = 0.9298245614035088
User 32083 AUC after training: 0.9298245614035088
User 32083 does not improve AUC. Reverting changes.
Training on augumented user 62402 2/50 current_auc = 0.9298245614035088
User 62402 AUC after training: 0.9298245614035088
User 62402 does not improve AUC. Reverting changes.
Training on augumented user 113495 3/50 current_auc = 0.9298245614035088
User 113495 AUC after training: 0.9298245614035088
User 113495 does not improve AUC. Reverting changes.
Training on augumented user 133231 4/50 current_auc = 0.9298245614035088
User 133231 AUC after training: 0.9298245614035088
User 133231 does not improve AUC. Reverting changes.
Training on augumented user 61124 5/50 current_auc = 0.9298245614035088
User 61124 AUC after training: 0.9298245614035088
User 61124 does not improve AUC. Reverting changes.
Training on augumented user 89048 6/50 current_auc = 0.9298245614035088
User 89048 AUC after training: 0.9298245614035088
User 89048 does not improve AUC. Reverting changes.
Training on augumented user 28747 7/50 current_auc = 0.9298245614035088
User 28747 AUC after training: 0.9298245614035088
User 28747 does not improve AUC. Reverting changes.
Training on augumented user 27603 8/50 current_auc = 0.9298245614035088
User 27603 AUC after training: 0.9298245614035088
User 27603 does not improve AUC. Reverting changes.
Training on augumented user 134465 9/50 current_auc = 0.9298245614035088
User 134465 AUC after training: 0.9298245614035088
User 134465 does not improve AUC. Reverting changes.
Training on augumented user 60886 10/50 current_auc = 0.9298245614035088
User 60886 AUC after training: 0.9298245614035088
User 60886 does not improve AUC. Reverting changes.
Training on augumented user 1659 11/50 current_auc = 0.9298245614035088
User 1659 AUC after training: 0.9298245614035088
User 1659 does not improve AUC. Reverting changes.
Training on augumented user 16307 12/50 current_auc = 0.9298245614035088
User 16307 AUC after training: 0.9298245614035088
User 16307 does not improve AUC. Reverting changes.
Training on augumented user 9488 13/50 current_auc = 0.9298245614035088
User 9488 AUC after training: 0.9298245614035088
User 9488 does not improve AUC. Reverting changes.
Training on augumented user 38491 14/50 current_auc = 0.9298245614035088
User 38491 AUC after training: 0.9298245614035088
User 38491 does not improve AUC. Reverting changes.
Training on augumented user 118028 15/50 current_auc = 0.9298245614035088
User 118028 AUC after training: 0.9298245614035088
User 118028 does not improve AUC. Reverting changes.
Training on augumented user 47777 16/50 current_auc = 0.9298245614035088
User 47777 AUC after training: 0.9298245614035088
User 47777 does not improve AUC. Reverting changes.
Training on augumented user 131178 17/50 current_auc = 0.9298245614035088
User 131178 AUC after training: 0.9298245614035088
User 131178 does not improve AUC. Reverting changes.
Training on augumented user 10554 18/50 current_auc = 0.9298245614035088
User 10554 AUC after training: 0.9298245614035088
User 10554 does not improve AUC. Reverting changes.
Training on augumented user 67986 19/50 current_auc = 0.9298245614035088
User 67986 AUC after training: 0.9298245614035088
User 67986 does not improve AUC. Reverting changes.
Training on augumented user 29169 20/50 current_auc = 0.9298245614035088
User 29169 AUC after training: 0.9298245614035088
User 29169 does not improve AUC. Reverting changes.
Training on augumented user 2883 21/50 current_auc = 0.9298245614035088
User 2883 AUC after training: 0.9298245614035088
User 2883 does not improve AUC. Reverting changes.
Training on augumented user 55124 22/50 current_auc = 0.9298245614035088
User 55124 AUC after training: 0.9298245614035088
User 55124 does not improve AUC. Reverting changes.
Training on augumented user 5454 23/50 current_auc = 0.9298245614035088
User 5454 AUC after training: 0.9298245614035088
User 5454 does not improve AUC. Reverting changes.
Training on augumented user 61225 24/50 current_auc = 0.9298245614035088
User 61225 AUC after training: 0.912280701754386
User 61225 does not improve AUC. Reverting changes.
Training on augumented user 9906 25/50 current_auc = 0.9298245614035088
User 9906 AUC after training: 0.9298245614035088
User 9906 does not improve AUC. Reverting changes.
Training on augumented user 90207 26/50 current_auc = 0.9298245614035088
User 90207 AUC after training: 0.9298245614035088
User 90207 does not improve AUC. Reverting changes.
Training on augumented user 25467 27/50 current_auc = 0.9298245614035088
User 25467 AUC after training: 0.9298245614035088
User 25467 does not improve AUC. Reverting changes.
Training on augumented user 4619 28/50 current_auc = 0.9298245614035088
User 4619 AUC after training: 0.9298245614035088
User 4619 does not improve AUC. Reverting changes.
Training on augumented user 52621 29/50 current_auc = 0.9298245614035088
User 52621 AUC after training: 0.9298245614035088
User 52621 does not improve AUC. Reverting changes.
Training on augumented user 10111 30/50 current_auc = 0.9298245614035088
User 10111 AUC after training: 0.9298245614035088
User 10111 does not improve AUC. Reverting changes.
Training on augumented user 107278 31/50 current_auc = 0.9298245614035088
User 107278 AUC after training: 0.9298245614035088
User 107278 does not improve AUC. Reverting changes.
Training on augumented user 83567 32/50 current_auc = 0.9298245614035088
User 83567 AUC after training: 0.9298245614035088
User 83567 does not improve AUC. Reverting changes.
Training on augumented user 114854 33/50 current_auc = 0.9298245614035088
User 114854 AUC after training: 0.9298245614035088
User 114854 does not improve AUC. Reverting changes.
Training on augumented user 129376 34/50 current_auc = 0.9298245614035088
User 129376 AUC after training: 0.9298245614035088
User 129376 does not improve AUC. Reverting changes.
Training on augumented user 52890 35/50 current_auc = 0.9298245614035088
User 52890 AUC after training: 0.9298245614035088
User 52890 does not improve AUC. Reverting changes.
Training on augumented user 15699 36/50 current_auc = 0.9298245614035088
User 15699 AUC after training: 0.9298245614035088
User 15699 does not improve AUC. Reverting changes.
Training on augumented user 73276 37/50 current_auc = 0.9298245614035088
User 73276 AUC after training: 0.9298245614035088
User 73276 does not improve AUC. Reverting changes.
Training on augumented user 105732 38/50 current_auc = 0.9298245614035088
User 105732 AUC after training: 0.9298245614035088
User 105732 does not improve AUC. Reverting changes.
Training on augumented user 135093 39/50 current_auc = 0.9298245614035088
User 135093 AUC after training: 0.9298245614035088
User 135093 does not improve AUC. Reverting changes.
Training on augumented user 26005 40/50 current_auc = 0.9298245614035088
User 26005 AUC after training: 0.9298245614035088
User 26005 does not improve AUC. Reverting changes.
Training on augumented user 136578 41/50 current_auc = 0.9298245614035088
User 136578 AUC after training: 0.9298245614035088
User 136578 does not improve AUC. Reverting changes.
Training on augumented user 83355 42/50 current_auc = 0.9298245614035088
User 83355 AUC after training: 0.9298245614035088
User 83355 does not improve AUC. Reverting changes.
Training on augumented user 131689 43/50 current_auc = 0.9298245614035088
User 131689 AUC after training: 0.9298245614035088
User 131689 does not improve AUC. Reverting changes.
Training on augumented user 16021 44/50 current_auc = 0.9298245614035088
User 16021 AUC after training: 0.9298245614035088
User 16021 does not improve AUC. Reverting changes.
Training on augumented user 102035 45/50 current_auc = 0.9298245614035088
User 102035 AUC after training: 0.912280701754386
User 102035 does not improve AUC. Reverting changes.
Training on augumented user 12079 46/50 current_auc = 0.9298245614035088
User 12079 AUC after training: 0.9298245614035088
User 12079 does not improve AUC. Reverting changes.
Training on augumented user 52734 47/50 current_auc = 0.9298245614035088
User 52734 AUC after training: 0.9298245614035088
User 52734 does not improve AUC. Reverting changes.
Training on augumented user 103309 48/50 current_auc = 0.9298245614035088
User 103309 AUC after training: 0.9298245614035088
User 103309 does not improve AUC. Reverting changes.
Training on augumented user 29847 49/50 current_auc = 0.9298245614035088
User 29847 AUC after training: 0.9298245614035088
User 29847 does not improve AUC. Reverting changes.
[2024-12-02 19:35:20.636785] start test user 32624 207/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:21.055389] start test user 32624 207/568 recall augumented users by random, augumented_users = [117336, 79536, 8071, 117285, 16753, 80172, 59266, 67484, 134856, 35575, 28314, 78018, 62967, 99915, 16068, 3621, 94298, 59756, 39124, 113210, 107842, 57288, 73770, 110021, 32834, 80655, 27104, 68385, 375, 15750, 126367, 33669, 27935, 81895, 110878, 13691, 87520, 131098, 37785, 88130, 43869, 48826, 65941, 55655, 103912, 61202, 25990, 123938, 131721, 96141]
[2024-12-02 19:35:21.069794] user = 32624 Cloud 207/568
[2024-12-02 19:35:21.080236] user = 32624 Local 207/568
[2024-12-02 19:35:21.107117] user = 32624 Local+ 207/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:24.199903] user = 32624 MPDA- 207/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8888888888888888
Training on augumented user 117336 0/50 current_auc = 0.8888888888888888
User 117336 AUC after training: 0.8888888888888888
User 117336 does not improve AUC. Reverting changes.
Training on augumented user 79536 1/50 current_auc = 0.8888888888888888
User 79536 AUC after training: 0.8888888888888888
User 79536 does not improve AUC. Reverting changes.
Training on augumented user 8071 2/50 current_auc = 0.8888888888888888
User 8071 AUC after training: 0.8888888888888888
User 8071 does not improve AUC. Reverting changes.
Training on augumented user 117285 3/50 current_auc = 0.8888888888888888
User 117285 AUC after training: 0.8888888888888888
User 117285 does not improve AUC. Reverting changes.
Training on augumented user 16753 4/50 current_auc = 0.8888888888888888
User 16753 AUC after training: 0.8888888888888888
User 16753 does not improve AUC. Reverting changes.
Training on augumented user 80172 5/50 current_auc = 0.8888888888888888
User 80172 AUC after training: 0.8888888888888888
User 80172 does not improve AUC. Reverting changes.
Training on augumented user 59266 6/50 current_auc = 0.8888888888888888
User 59266 AUC after training: 0.8888888888888888
User 59266 does not improve AUC. Reverting changes.
Training on augumented user 67484 7/50 current_auc = 0.8888888888888888
User 67484 AUC after training: 0.8888888888888888
User 67484 does not improve AUC. Reverting changes.
Training on augumented user 134856 8/50 current_auc = 0.8888888888888888
User 134856 AUC after training: 0.8888888888888888
User 134856 does not improve AUC. Reverting changes.
Training on augumented user 35575 9/50 current_auc = 0.8888888888888888
User 35575 AUC after training: 0.8888888888888888
User 35575 does not improve AUC. Reverting changes.
Training on augumented user 28314 10/50 current_auc = 0.8888888888888888
User 28314 AUC after training: 0.8888888888888888
User 28314 does not improve AUC. Reverting changes.
Training on augumented user 78018 11/50 current_auc = 0.8888888888888888
User 78018 AUC after training: 0.8888888888888888
User 78018 does not improve AUC. Reverting changes.
Training on augumented user 62967 12/50 current_auc = 0.8888888888888888
User 62967 AUC after training: 0.8888888888888888
User 62967 does not improve AUC. Reverting changes.
Training on augumented user 99915 13/50 current_auc = 0.8888888888888888
User 99915 AUC after training: 0.8888888888888888
User 99915 does not improve AUC. Reverting changes.
Training on augumented user 16068 14/50 current_auc = 0.8888888888888888
User 16068 AUC after training: 0.8888888888888888
User 16068 does not improve AUC. Reverting changes.
Training on augumented user 3621 15/50 current_auc = 0.8888888888888888
User 3621 AUC after training: 0.8888888888888888
User 3621 does not improve AUC. Reverting changes.
Training on augumented user 94298 16/50 current_auc = 0.8888888888888888
User 94298 AUC after training: 0.8888888888888888
User 94298 does not improve AUC. Reverting changes.
Training on augumented user 59756 17/50 current_auc = 0.8888888888888888
User 59756 AUC after training: 0.8888888888888888
User 59756 does not improve AUC. Reverting changes.
Training on augumented user 39124 18/50 current_auc = 0.8888888888888888
User 39124 AUC after training: 0.8888888888888888
User 39124 does not improve AUC. Reverting changes.
Training on augumented user 113210 19/50 current_auc = 0.8888888888888888
User 113210 AUC after training: 0.8888888888888888
User 113210 does not improve AUC. Reverting changes.
Training on augumented user 107842 20/50 current_auc = 0.8888888888888888
User 107842 AUC after training: 0.8888888888888888
User 107842 does not improve AUC. Reverting changes.
Training on augumented user 57288 21/50 current_auc = 0.8888888888888888
User 57288 AUC after training: 0.8888888888888888
User 57288 does not improve AUC. Reverting changes.
Training on augumented user 73770 22/50 current_auc = 0.8888888888888888
User 73770 AUC after training: 0.8888888888888888
User 73770 does not improve AUC. Reverting changes.
Training on augumented user 110021 23/50 current_auc = 0.8888888888888888
User 110021 AUC after training: 0.8888888888888888
User 110021 does not improve AUC. Reverting changes.
Training on augumented user 32834 24/50 current_auc = 0.8888888888888888
User 32834 AUC after training: 0.8888888888888888
User 32834 does not improve AUC. Reverting changes.
Training on augumented user 80655 25/50 current_auc = 0.8888888888888888
User 80655 AUC after training: 0.8888888888888888
User 80655 does not improve AUC. Reverting changes.
Training on augumented user 27104 26/50 current_auc = 0.8888888888888888
User 27104 AUC after training: 0.8888888888888888
User 27104 does not improve AUC. Reverting changes.
Training on augumented user 68385 27/50 current_auc = 0.8888888888888888
User 68385 AUC after training: 0.8888888888888888
User 68385 does not improve AUC. Reverting changes.
Training on augumented user 375 28/50 current_auc = 0.8888888888888888
User 375 AUC after training: 0.8888888888888888
User 375 does not improve AUC. Reverting changes.
Training on augumented user 15750 29/50 current_auc = 0.8888888888888888
User 15750 AUC after training: 0.8888888888888888
User 15750 does not improve AUC. Reverting changes.
Training on augumented user 126367 30/50 current_auc = 0.8888888888888888
User 126367 AUC after training: 0.8888888888888888
User 126367 does not improve AUC. Reverting changes.
Training on augumented user 33669 31/50 current_auc = 0.8888888888888888
User 33669 AUC after training: 0.8888888888888888
User 33669 does not improve AUC. Reverting changes.
Training on augumented user 27935 32/50 current_auc = 0.8888888888888888
User 27935 AUC after training: 0.8888888888888888
User 27935 does not improve AUC. Reverting changes.
Training on augumented user 81895 33/50 current_auc = 0.8888888888888888
User 81895 AUC after training: 0.8888888888888888
User 81895 does not improve AUC. Reverting changes.
Training on augumented user 110878 34/50 current_auc = 0.8888888888888888
User 110878 AUC after training: 0.8888888888888888
User 110878 does not improve AUC. Reverting changes.
Training on augumented user 13691 35/50 current_auc = 0.8888888888888888
User 13691 AUC after training: 0.8888888888888888
User 13691 does not improve AUC. Reverting changes.
Training on augumented user 87520 36/50 current_auc = 0.8888888888888888
User 87520 AUC after training: 0.8888888888888888
User 87520 does not improve AUC. Reverting changes.
Training on augumented user 131098 37/50 current_auc = 0.8888888888888888
User 131098 AUC after training: 0.8888888888888888
User 131098 does not improve AUC. Reverting changes.
Training on augumented user 37785 38/50 current_auc = 0.8888888888888888
User 37785 AUC after training: 0.8888888888888888
User 37785 does not improve AUC. Reverting changes.
Training on augumented user 88130 39/50 current_auc = 0.8888888888888888
User 88130 AUC after training: 0.8888888888888888
User 88130 does not improve AUC. Reverting changes.
Training on augumented user 43869 40/50 current_auc = 0.8888888888888888
User 43869 AUC after training: 0.8888888888888888
User 43869 does not improve AUC. Reverting changes.
Training on augumented user 48826 41/50 current_auc = 0.8888888888888888
User 48826 AUC after training: 0.8888888888888888
User 48826 does not improve AUC. Reverting changes.
Training on augumented user 65941 42/50 current_auc = 0.8888888888888888
User 65941 AUC after training: 0.8888888888888888
User 65941 does not improve AUC. Reverting changes.
Training on augumented user 55655 43/50 current_auc = 0.8888888888888888
User 55655 AUC after training: 0.8888888888888888
User 55655 does not improve AUC. Reverting changes.
Training on augumented user 103912 44/50 current_auc = 0.8888888888888888
User 103912 AUC after training: 0.8888888888888888
User 103912 does not improve AUC. Reverting changes.
Training on augumented user 61202 45/50 current_auc = 0.8888888888888888
User 61202 AUC after training: 0.8888888888888888
User 61202 does not improve AUC. Reverting changes.
Training on augumented user 25990 46/50 current_auc = 0.8888888888888888
User 25990 AUC after training: 0.8888888888888888
User 25990 does not improve AUC. Reverting changes.
Training on augumented user 123938 47/50 current_auc = 0.8888888888888888
User 123938 AUC after training: 0.8888888888888888
User 123938 does not improve AUC. Reverting changes.
Training on augumented user 131721 48/50 current_auc = 0.8888888888888888
User 131721 AUC after training: 0.8888888888888888
User 131721 does not improve AUC. Reverting changes.
Training on augumented user 96141 49/50 current_auc = 0.8888888888888888
User 96141 AUC after training: 0.8888888888888888
User 96141 does not improve AUC. Reverting changes.
[2024-12-02 19:35:51.220103] start test user 32640 208/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:51.668898] start test user 32640 208/568 recall augumented users by random, augumented_users = [67460, 96115, 50503, 70091, 38363, 11591, 119680, 95799, 133650, 83, 7142, 15981, 35534, 38767, 135122, 59015, 31397, 16646, 13607, 38491, 17141, 85923, 67640, 66143, 30150, 20231, 17962, 104332, 51391, 56653, 97307, 101844, 112678, 79032, 85053, 8802, 51266, 2812, 115734, 66879, 124365, 138193, 113714, 54913, 73828, 60516, 13549, 67575, 33429, 16001]
[2024-12-02 19:35:51.684132] user = 32640 Cloud 208/568
[2024-12-02 19:35:51.692834] user = 32640 Local 208/568
[2024-12-02 19:35:51.769976] user = 32640 Local+ 208/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:53.972103] user = 32640 MPDA- 208/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 67460 0/50 current_auc = 0.5
User 67460 AUC after training: 0.5
User 67460 does not improve AUC. Reverting changes.
Training on augumented user 96115 1/50 current_auc = 0.5
User 96115 AUC after training: 0.5
User 96115 does not improve AUC. Reverting changes.
Training on augumented user 50503 2/50 current_auc = 0.5
User 50503 AUC after training: 0.5
User 50503 does not improve AUC. Reverting changes.
Training on augumented user 70091 3/50 current_auc = 0.5
User 70091 AUC after training: 0.5
User 70091 does not improve AUC. Reverting changes.
Training on augumented user 38363 4/50 current_auc = 0.5
User 38363 AUC after training: 0.5
User 38363 does not improve AUC. Reverting changes.
Training on augumented user 11591 5/50 current_auc = 0.5
User 11591 AUC after training: 0.5
User 11591 does not improve AUC. Reverting changes.
Training on augumented user 119680 6/50 current_auc = 0.5
User 119680 AUC after training: 0.5
User 119680 does not improve AUC. Reverting changes.
Training on augumented user 95799 7/50 current_auc = 0.5
User 95799 AUC after training: 0.5
User 95799 does not improve AUC. Reverting changes.
Training on augumented user 133650 8/50 current_auc = 0.5
User 133650 AUC after training: 0.5
User 133650 does not improve AUC. Reverting changes.
Training on augumented user 83 9/50 current_auc = 0.5
User 83 AUC after training: 0.5
User 83 does not improve AUC. Reverting changes.
Training on augumented user 7142 10/50 current_auc = 0.5
User 7142 AUC after training: 0.5
User 7142 does not improve AUC. Reverting changes.
Training on augumented user 15981 11/50 current_auc = 0.5
User 15981 AUC after training: 0.5
User 15981 does not improve AUC. Reverting changes.
Training on augumented user 35534 12/50 current_auc = 0.5
User 35534 AUC after training: 0.5
User 35534 does not improve AUC. Reverting changes.
Training on augumented user 38767 13/50 current_auc = 0.5
User 38767 AUC after training: 0.5
User 38767 does not improve AUC. Reverting changes.
Training on augumented user 135122 14/50 current_auc = 0.5
User 135122 AUC after training: 0.5
User 135122 does not improve AUC. Reverting changes.
Training on augumented user 59015 15/50 current_auc = 0.5
User 59015 AUC after training: 0.5
User 59015 does not improve AUC. Reverting changes.
Training on augumented user 31397 16/50 current_auc = 0.5
User 31397 AUC after training: 0.5
User 31397 does not improve AUC. Reverting changes.
Training on augumented user 16646 17/50 current_auc = 0.5
User 16646 AUC after training: 0.5
User 16646 does not improve AUC. Reverting changes.
Training on augumented user 13607 18/50 current_auc = 0.5
User 13607 AUC after training: 0.5
User 13607 does not improve AUC. Reverting changes.
Training on augumented user 38491 19/50 current_auc = 0.5
User 38491 AUC after training: 0.5
User 38491 does not improve AUC. Reverting changes.
Training on augumented user 17141 20/50 current_auc = 0.5
User 17141 AUC after training: 0.5
User 17141 does not improve AUC. Reverting changes.
Training on augumented user 85923 21/50 current_auc = 0.5
User 85923 AUC after training: 0.5
User 85923 does not improve AUC. Reverting changes.
Training on augumented user 67640 22/50 current_auc = 0.5
User 67640 AUC after training: 0.5
User 67640 does not improve AUC. Reverting changes.
Training on augumented user 66143 23/50 current_auc = 0.5
User 66143 AUC after training: 0.5
User 66143 does not improve AUC. Reverting changes.
Training on augumented user 30150 24/50 current_auc = 0.5
User 30150 AUC after training: 0.5
User 30150 does not improve AUC. Reverting changes.
Training on augumented user 20231 25/50 current_auc = 0.5
User 20231 AUC after training: 0.5
User 20231 does not improve AUC. Reverting changes.
Training on augumented user 17962 26/50 current_auc = 0.5
User 17962 AUC after training: 0.5
User 17962 does not improve AUC. Reverting changes.
Training on augumented user 104332 27/50 current_auc = 0.5
User 104332 AUC after training: 0.5
User 104332 does not improve AUC. Reverting changes.
Training on augumented user 51391 28/50 current_auc = 0.5
User 51391 AUC after training: 0.5
User 51391 does not improve AUC. Reverting changes.
Training on augumented user 56653 29/50 current_auc = 0.5
User 56653 AUC after training: 0.5
User 56653 does not improve AUC. Reverting changes.
Training on augumented user 97307 30/50 current_auc = 0.5
User 97307 AUC after training: 0.5
User 97307 does not improve AUC. Reverting changes.
Training on augumented user 101844 31/50 current_auc = 0.5
User 101844 AUC after training: 0.5
User 101844 does not improve AUC. Reverting changes.
Training on augumented user 112678 32/50 current_auc = 0.5
User 112678 AUC after training: 0.5
User 112678 does not improve AUC. Reverting changes.
Training on augumented user 79032 33/50 current_auc = 0.5
User 79032 AUC after training: 0.5
User 79032 does not improve AUC. Reverting changes.
Training on augumented user 85053 34/50 current_auc = 0.5
User 85053 AUC after training: 0.5
User 85053 does not improve AUC. Reverting changes.
Training on augumented user 8802 35/50 current_auc = 0.5
User 8802 AUC after training: 0.5
User 8802 does not improve AUC. Reverting changes.
Training on augumented user 51266 36/50 current_auc = 0.5
User 51266 AUC after training: 0.5
User 51266 does not improve AUC. Reverting changes.
Training on augumented user 2812 37/50 current_auc = 0.5
User 2812 AUC after training: 0.5
User 2812 does not improve AUC. Reverting changes.
Training on augumented user 115734 38/50 current_auc = 0.5
User 115734 AUC after training: 0.5
User 115734 does not improve AUC. Reverting changes.
Training on augumented user 66879 39/50 current_auc = 0.5
User 66879 AUC after training: 0.5
User 66879 does not improve AUC. Reverting changes.
Training on augumented user 124365 40/50 current_auc = 0.5
User 124365 AUC after training: 0.5
User 124365 does not improve AUC. Reverting changes.
Training on augumented user 138193 41/50 current_auc = 0.5
User 138193 AUC after training: 0.5
User 138193 does not improve AUC. Reverting changes.
Training on augumented user 113714 42/50 current_auc = 0.5
User 113714 AUC after training: 0.5
User 113714 does not improve AUC. Reverting changes.
Training on augumented user 54913 43/50 current_auc = 0.5
User 54913 AUC after training: 0.5
User 54913 does not improve AUC. Reverting changes.
Training on augumented user 73828 44/50 current_auc = 0.5
User 73828 AUC after training: 0.5
User 73828 does not improve AUC. Reverting changes.
Training on augumented user 60516 45/50 current_auc = 0.5
User 60516 AUC after training: 0.5
User 60516 does not improve AUC. Reverting changes.
Training on augumented user 13549 46/50 current_auc = 0.5
User 13549 AUC after training: 0.5
User 13549 does not improve AUC. Reverting changes.
Training on augumented user 67575 47/50 current_auc = 0.5
User 67575 AUC after training: 0.5
User 67575 does not improve AUC. Reverting changes.
Training on augumented user 33429 48/50 current_auc = 0.5
User 33429 AUC after training: 0.5
User 33429 does not improve AUC. Reverting changes.
Training on augumented user 16001 49/50 current_auc = 0.5
User 16001 AUC after training: 0.5
User 16001 does not improve AUC. Reverting changes.
[2024-12-02 19:36:21.226620] start test user 32659 209/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:22.083586] start test user 32659 209/568 recall augumented users by random, augumented_users = [125257, 104849, 72874, 48458, 42272, 131970, 62090, 101889, 11105, 134469, 6359, 77349, 27032, 76806, 123205, 88703, 115827, 132099, 14439, 35504, 37775, 4461, 7863, 83900, 29250, 70184, 8240, 58852, 43662, 52977, 89166, 109839, 97735, 34137, 9905, 3209, 118341, 20412, 22321, 53034, 16537, 135758, 46475, 92555, 59788, 14373, 26726, 28498, 39130, 7970]
[2024-12-02 19:36:22.107602] user = 32659 Cloud 209/568
[2024-12-02 19:36:22.118955] user = 32659 Local 209/568
[2024-12-02 19:36:22.170619] user = 32659 Local+ 209/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:24.235280] user = 32659 MPDA- 209/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5909090909090908
Training on augumented user 125257 0/50 current_auc = 0.5909090909090908
User 125257 AUC after training: 0.5909090909090908
User 125257 does not improve AUC. Reverting changes.
Training on augumented user 104849 1/50 current_auc = 0.5909090909090908
User 104849 AUC after training: 0.5909090909090908
User 104849 does not improve AUC. Reverting changes.
Training on augumented user 72874 2/50 current_auc = 0.5909090909090908
User 72874 AUC after training: 0.5909090909090908
User 72874 does not improve AUC. Reverting changes.
Training on augumented user 48458 3/50 current_auc = 0.5909090909090908
User 48458 AUC after training: 0.5909090909090908
User 48458 does not improve AUC. Reverting changes.
Training on augumented user 42272 4/50 current_auc = 0.5909090909090908
User 42272 AUC after training: 0.5909090909090908
User 42272 does not improve AUC. Reverting changes.
Training on augumented user 131970 5/50 current_auc = 0.5909090909090908
User 131970 AUC after training: 0.5909090909090908
User 131970 does not improve AUC. Reverting changes.
Training on augumented user 62090 6/50 current_auc = 0.5909090909090908
User 62090 AUC after training: 0.5909090909090908
User 62090 does not improve AUC. Reverting changes.
Training on augumented user 101889 7/50 current_auc = 0.5909090909090908
User 101889 AUC after training: 0.5909090909090908
User 101889 does not improve AUC. Reverting changes.
Training on augumented user 11105 8/50 current_auc = 0.5909090909090908
User 11105 AUC after training: 0.5909090909090908
User 11105 does not improve AUC. Reverting changes.
Training on augumented user 134469 9/50 current_auc = 0.5909090909090908
User 134469 AUC after training: 0.5909090909090908
User 134469 does not improve AUC. Reverting changes.
Training on augumented user 6359 10/50 current_auc = 0.5909090909090908
User 6359 AUC after training: 0.5909090909090908
User 6359 does not improve AUC. Reverting changes.
Training on augumented user 77349 11/50 current_auc = 0.5909090909090908
User 77349 AUC after training: 0.5909090909090908
User 77349 does not improve AUC. Reverting changes.
Training on augumented user 27032 12/50 current_auc = 0.5909090909090908
User 27032 AUC after training: 0.5909090909090908
User 27032 does not improve AUC. Reverting changes.
Training on augumented user 76806 13/50 current_auc = 0.5909090909090908
User 76806 AUC after training: 0.5909090909090908
User 76806 does not improve AUC. Reverting changes.
Training on augumented user 123205 14/50 current_auc = 0.5909090909090908
User 123205 AUC after training: 0.5909090909090908
User 123205 does not improve AUC. Reverting changes.
Training on augumented user 88703 15/50 current_auc = 0.5909090909090908
User 88703 AUC after training: 0.5909090909090908
User 88703 does not improve AUC. Reverting changes.
Training on augumented user 115827 16/50 current_auc = 0.5909090909090908
User 115827 AUC after training: 0.5909090909090908
User 115827 does not improve AUC. Reverting changes.
Training on augumented user 132099 17/50 current_auc = 0.5909090909090908
User 132099 AUC after training: 0.5909090909090908
User 132099 does not improve AUC. Reverting changes.
Training on augumented user 14439 18/50 current_auc = 0.5909090909090908
User 14439 AUC after training: 0.5909090909090908
User 14439 does not improve AUC. Reverting changes.
Training on augumented user 35504 19/50 current_auc = 0.5909090909090908
User 35504 AUC after training: 0.5909090909090908
User 35504 does not improve AUC. Reverting changes.
Training on augumented user 37775 20/50 current_auc = 0.5909090909090908
User 37775 AUC after training: 0.5909090909090908
User 37775 does not improve AUC. Reverting changes.
Training on augumented user 4461 21/50 current_auc = 0.5909090909090908
User 4461 AUC after training: 0.5909090909090908
User 4461 does not improve AUC. Reverting changes.
Training on augumented user 7863 22/50 current_auc = 0.5909090909090908
User 7863 AUC after training: 0.5909090909090908
User 7863 does not improve AUC. Reverting changes.
Training on augumented user 83900 23/50 current_auc = 0.5909090909090908
User 83900 AUC after training: 0.5909090909090908
User 83900 does not improve AUC. Reverting changes.
Training on augumented user 29250 24/50 current_auc = 0.5909090909090908
User 29250 AUC after training: 0.5909090909090908
User 29250 does not improve AUC. Reverting changes.
Training on augumented user 70184 25/50 current_auc = 0.5909090909090908
User 70184 AUC after training: 0.5909090909090908
User 70184 does not improve AUC. Reverting changes.
Training on augumented user 8240 26/50 current_auc = 0.5909090909090908
User 8240 AUC after training: 0.5909090909090908
User 8240 does not improve AUC. Reverting changes.
Training on augumented user 58852 27/50 current_auc = 0.5909090909090908
User 58852 AUC after training: 0.5909090909090908
User 58852 does not improve AUC. Reverting changes.
Training on augumented user 43662 28/50 current_auc = 0.5909090909090908
User 43662 AUC after training: 0.5909090909090908
User 43662 does not improve AUC. Reverting changes.
Training on augumented user 52977 29/50 current_auc = 0.5909090909090908
User 52977 AUC after training: 0.5909090909090908
User 52977 does not improve AUC. Reverting changes.
Training on augumented user 89166 30/50 current_auc = 0.5909090909090908
User 89166 AUC after training: 0.5909090909090908
User 89166 does not improve AUC. Reverting changes.
Training on augumented user 109839 31/50 current_auc = 0.5909090909090908
User 109839 AUC after training: 0.5909090909090908
User 109839 does not improve AUC. Reverting changes.
Training on augumented user 97735 32/50 current_auc = 0.5909090909090908
User 97735 AUC after training: 0.5909090909090908
User 97735 does not improve AUC. Reverting changes.
Training on augumented user 34137 33/50 current_auc = 0.5909090909090908
User 34137 AUC after training: 0.5909090909090908
User 34137 does not improve AUC. Reverting changes.
Training on augumented user 9905 34/50 current_auc = 0.5909090909090908
User 9905 AUC after training: 0.5909090909090908
User 9905 does not improve AUC. Reverting changes.
Training on augumented user 3209 35/50 current_auc = 0.5909090909090908
User 3209 AUC after training: 0.5909090909090908
User 3209 does not improve AUC. Reverting changes.
Training on augumented user 118341 36/50 current_auc = 0.5909090909090908
User 118341 AUC after training: 0.5909090909090908
User 118341 does not improve AUC. Reverting changes.
Training on augumented user 20412 37/50 current_auc = 0.5909090909090908
User 20412 AUC after training: 0.5909090909090908
User 20412 does not improve AUC. Reverting changes.
Training on augumented user 22321 38/50 current_auc = 0.5909090909090908
User 22321 AUC after training: 0.5909090909090908
User 22321 does not improve AUC. Reverting changes.
Training on augumented user 53034 39/50 current_auc = 0.5909090909090908
User 53034 AUC after training: 0.5909090909090908
User 53034 does not improve AUC. Reverting changes.
Training on augumented user 16537 40/50 current_auc = 0.5909090909090908
User 16537 AUC after training: 0.5909090909090908
User 16537 does not improve AUC. Reverting changes.
Training on augumented user 135758 41/50 current_auc = 0.5909090909090908
User 135758 AUC after training: 0.5909090909090908
User 135758 does not improve AUC. Reverting changes.
Training on augumented user 46475 42/50 current_auc = 0.5909090909090908
User 46475 AUC after training: 0.5909090909090908
User 46475 does not improve AUC. Reverting changes.
Training on augumented user 92555 43/50 current_auc = 0.5909090909090908
User 92555 AUC after training: 0.5909090909090908
User 92555 does not improve AUC. Reverting changes.
Training on augumented user 59788 44/50 current_auc = 0.5909090909090908
User 59788 AUC after training: 0.5909090909090908
User 59788 does not improve AUC. Reverting changes.
Training on augumented user 14373 45/50 current_auc = 0.5909090909090908
User 14373 AUC after training: 0.5909090909090908
User 14373 does not improve AUC. Reverting changes.
Training on augumented user 26726 46/50 current_auc = 0.5909090909090908
User 26726 AUC after training: 0.5909090909090908
User 26726 does not improve AUC. Reverting changes.
Training on augumented user 28498 47/50 current_auc = 0.5909090909090908
User 28498 AUC after training: 0.5909090909090908
User 28498 does not improve AUC. Reverting changes.
Training on augumented user 39130 48/50 current_auc = 0.5909090909090908
User 39130 AUC after training: 0.5909090909090908
User 39130 does not improve AUC. Reverting changes.
Training on augumented user 7970 49/50 current_auc = 0.5909090909090908
User 7970 AUC after training: 0.5909090909090908
User 7970 does not improve AUC. Reverting changes.
[2024-12-02 19:36:52.774492] start test user 32671 210/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:53.651458] start test user 32671 210/568 recall augumented users by random, augumented_users = [102671, 51975, 35619, 12809, 18980, 89166, 7457, 70482, 112193, 22495, 16004, 72433, 70511, 51471, 100305, 113640, 28483, 69013, 12127, 18675, 72032, 54430, 44013, 715, 30907, 63027, 68386, 105934, 58523, 95569, 16256, 90595, 124187, 78018, 34519, 130938, 43364, 111373, 18149, 83560, 77268, 129191, 93863, 96436, 43679, 102293, 82676, 71427, 58529, 26166]
[2024-12-02 19:36:53.670589] user = 32671 Cloud 210/568
[2024-12-02 19:36:53.700773] user = 32671 Local 210/568
[2024-12-02 19:36:54.014939] user = 32671 Local+ 210/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:56.778118] user = 32671 MPDA- 210/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7036282858200666
Training on augumented user 102671 0/50 current_auc = 0.7036282858200666
User 102671 AUC after training: 0.7027027027027027
User 102671 does not improve AUC. Reverting changes.
Training on augumented user 51975 1/50 current_auc = 0.7036282858200666
User 51975 AUC after training: 0.7034431691965939
User 51975 does not improve AUC. Reverting changes.
Training on augumented user 35619 2/50 current_auc = 0.7036282858200666
User 35619 AUC after training: 0.7027027027027027
User 35619 does not improve AUC. Reverting changes.
Training on augumented user 12809 3/50 current_auc = 0.7036282858200666
User 12809 AUC after training: 0.703258052573121
User 12809 does not improve AUC. Reverting changes.
Training on augumented user 18980 4/50 current_auc = 0.7036282858200666
User 18980 AUC after training: 0.7056645686782673
User 18980 improves AUC. Keeping the model.
Training on augumented user 89166 5/50 current_auc = 0.7056645686782673
User 89166 AUC after training: 0.7054794520547946
User 89166 does not improve AUC. Reverting changes.
Training on augumented user 7457 6/50 current_auc = 0.7056645686782673
User 7457 AUC after training: 0.7034431691965938
User 7457 does not improve AUC. Reverting changes.
Training on augumented user 70482 7/50 current_auc = 0.7056645686782673
User 70482 AUC after training: 0.7049241021843762
User 70482 does not improve AUC. Reverting changes.
Training on augumented user 112193 8/50 current_auc = 0.7056645686782673
User 112193 AUC after training: 0.7058496853017401
User 112193 improves AUC. Keeping the model.
Training on augumented user 22495 9/50 current_auc = 0.7058496853017401
User 22495 AUC after training: 0.7043687523139579
User 22495 does not improve AUC. Reverting changes.
Training on augumented user 16004 10/50 current_auc = 0.7058496853017401
User 16004 AUC after training: 0.7052943354313218
User 16004 does not improve AUC. Reverting changes.
Training on augumented user 72433 11/50 current_auc = 0.7058496853017401
User 72433 AUC after training: 0.7058496853017401
User 72433 does not improve AUC. Reverting changes.
Training on augumented user 70511 12/50 current_auc = 0.7058496853017401
User 70511 AUC after training: 0.7051092188078489
User 70511 does not improve AUC. Reverting changes.
Training on augumented user 51471 13/50 current_auc = 0.7058496853017401
User 51471 AUC after training: 0.7051092188078489
User 51471 does not improve AUC. Reverting changes.
Training on augumented user 100305 14/50 current_auc = 0.7058496853017401
User 100305 AUC after training: 0.7054794520547946
User 100305 does not improve AUC. Reverting changes.
Training on augumented user 113640 15/50 current_auc = 0.7058496853017401
User 113640 AUC after training: 0.7045538689374307
User 113640 does not improve AUC. Reverting changes.
Training on augumented user 28483 16/50 current_auc = 0.7058496853017401
User 28483 AUC after training: 0.7052943354313218
User 28483 does not improve AUC. Reverting changes.
Training on augumented user 69013 17/50 current_auc = 0.7058496853017401
User 69013 AUC after training: 0.7054794520547946
User 69013 does not improve AUC. Reverting changes.
Training on augumented user 12127 18/50 current_auc = 0.7058496853017401
User 12127 AUC after training: 0.7045538689374307
User 12127 does not improve AUC. Reverting changes.
Training on augumented user 18675 19/50 current_auc = 0.7058496853017401
User 18675 AUC after training: 0.7043687523139578
User 18675 does not improve AUC. Reverting changes.
Training on augumented user 72032 20/50 current_auc = 0.7058496853017401
User 72032 AUC after training: 0.704183635690485
User 72032 does not improve AUC. Reverting changes.
Training on augumented user 54430 21/50 current_auc = 0.7058496853017401
User 54430 AUC after training: 0.7039985190670123
User 54430 does not improve AUC. Reverting changes.
Training on augumented user 44013 22/50 current_auc = 0.7058496853017401
User 44013 AUC after training: 0.7054794520547946
User 44013 does not improve AUC. Reverting changes.
Training on augumented user 715 23/50 current_auc = 0.7058496853017401
User 715 AUC after training: 0.7054794520547946
User 715 does not improve AUC. Reverting changes.
Training on augumented user 30907 24/50 current_auc = 0.7058496853017401
User 30907 AUC after training: 0.7058496853017402
User 30907 improves AUC. Keeping the model.
Training on augumented user 63027 25/50 current_auc = 0.7058496853017402
User 63027 AUC after training: 0.7060348019252128
User 63027 improves AUC. Keeping the model.
Training on augumented user 68386 26/50 current_auc = 0.7060348019252128
User 68386 AUC after training: 0.7058496853017402
User 68386 does not improve AUC. Reverting changes.
Training on augumented user 105934 27/50 current_auc = 0.7060348019252128
User 105934 AUC after training: 0.706034801925213
User 105934 improves AUC. Keeping the model.
Training on augumented user 58523 28/50 current_auc = 0.706034801925213
User 58523 AUC after training: 0.706034801925213
User 58523 does not improve AUC. Reverting changes.
Training on augumented user 95569 29/50 current_auc = 0.706034801925213
User 95569 AUC after training: 0.706034801925213
User 95569 does not improve AUC. Reverting changes.
Training on augumented user 16256 30/50 current_auc = 0.706034801925213
User 16256 AUC after training: 0.7056645686782673
User 16256 does not improve AUC. Reverting changes.
Training on augumented user 90595 31/50 current_auc = 0.706034801925213
User 90595 AUC after training: 0.705109218807849
User 90595 does not improve AUC. Reverting changes.
Training on augumented user 124187 32/50 current_auc = 0.706034801925213
User 124187 AUC after training: 0.7062199185486857
User 124187 improves AUC. Keeping the model.
Training on augumented user 78018 33/50 current_auc = 0.7062199185486857
User 78018 AUC after training: 0.7056645686782673
User 78018 does not improve AUC. Reverting changes.
Training on augumented user 34519 34/50 current_auc = 0.7062199185486857
User 34519 AUC after training: 0.7058496853017401
User 34519 does not improve AUC. Reverting changes.
Training on augumented user 130938 35/50 current_auc = 0.7062199185486857
User 130938 AUC after training: 0.7045538689374307
User 130938 does not improve AUC. Reverting changes.
Training on augumented user 43364 36/50 current_auc = 0.7062199185486857
User 43364 AUC after training: 0.7067752684191041
User 43364 improves AUC. Keeping the model.
Training on augumented user 111373 37/50 current_auc = 0.7067752684191041
User 111373 AUC after training: 0.7058496853017401
User 111373 does not improve AUC. Reverting changes.
Training on augumented user 18149 38/50 current_auc = 0.7067752684191041
User 18149 AUC after training: 0.705109218807849
User 18149 does not improve AUC. Reverting changes.
Training on augumented user 83560 39/50 current_auc = 0.7067752684191041
User 83560 AUC after training: 0.7052943354313218
User 83560 does not improve AUC. Reverting changes.
Training on augumented user 77268 40/50 current_auc = 0.7067752684191041
User 77268 AUC after training: 0.7065901517956313
User 77268 does not improve AUC. Reverting changes.
Training on augumented user 129191 41/50 current_auc = 0.7067752684191041
User 129191 AUC after training: 0.7056645686782673
User 129191 does not improve AUC. Reverting changes.
Training on augumented user 93863 42/50 current_auc = 0.7067752684191041
User 93863 AUC after training: 0.706034801925213
User 93863 does not improve AUC. Reverting changes.
Training on augumented user 96436 43/50 current_auc = 0.7067752684191041
User 96436 AUC after training: 0.7054794520547946
User 96436 does not improve AUC. Reverting changes.
Training on augumented user 43679 44/50 current_auc = 0.7067752684191041
User 43679 AUC after training: 0.7064050351721586
User 43679 does not improve AUC. Reverting changes.
Training on augumented user 102293 45/50 current_auc = 0.7067752684191041
User 102293 AUC after training: 0.7071455016660496
User 102293 improves AUC. Keeping the model.
Training on augumented user 82676 46/50 current_auc = 0.7071455016660496
User 82676 AUC after training: 0.7075157349129952
User 82676 improves AUC. Keeping the model.
Training on augumented user 71427 47/50 current_auc = 0.7075157349129952
User 71427 AUC after training: 0.707700851536468
User 71427 improves AUC. Keeping the model.
Training on augumented user 58529 48/50 current_auc = 0.707700851536468
User 58529 AUC after training: 0.707700851536468
User 58529 does not improve AUC. Reverting changes.
Training on augumented user 26166 49/50 current_auc = 0.707700851536468
User 26166 AUC after training: 0.707700851536468
User 26166 does not improve AUC. Reverting changes.
[2024-12-02 19:37:28.403869] start test user 32675 211/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:28.839209] start test user 32675 211/568 recall augumented users by random, augumented_users = [33940, 662, 59148, 20537, 65388, 125768, 61484, 105108, 102413, 125583, 88912, 104879, 60351, 3146, 84089, 49591, 95176, 63375, 15237, 119158, 93178, 75585, 119069, 54806, 119508, 23184, 118173, 116247, 112618, 8236, 41178, 32307, 32338, 6137, 116174, 10671, 28752, 122097, 28682, 21218, 121771, 22684, 11612, 12980, 91999, 43727, 122701, 105479, 45533, 4037]
[2024-12-02 19:37:28.855211] user = 32675 Cloud 211/568
[2024-12-02 19:37:28.873760] user = 32675 Local 211/568
[2024-12-02 19:37:29.019060] user = 32675 Local+ 211/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:31.887976] user = 32675 MPDA- 211/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5254032258064516
Training on augumented user 33940 0/50 current_auc = 0.5254032258064516
User 33940 AUC after training: 0.5252016129032259
User 33940 does not improve AUC. Reverting changes.
Training on augumented user 662 1/50 current_auc = 0.5254032258064516
User 662 AUC after training: 0.5258064516129032
User 662 improves AUC. Keeping the model.
Training on augumented user 59148 2/50 current_auc = 0.5258064516129032
User 59148 AUC after training: 0.5235887096774193
User 59148 does not improve AUC. Reverting changes.
Training on augumented user 20537 3/50 current_auc = 0.5258064516129032
User 20537 AUC after training: 0.526008064516129
User 20537 improves AUC. Keeping the model.
Training on augumented user 65388 4/50 current_auc = 0.526008064516129
User 65388 AUC after training: 0.5268145161290323
User 65388 improves AUC. Keeping the model.
Training on augumented user 125768 5/50 current_auc = 0.5268145161290323
User 125768 AUC after training: 0.527016129032258
User 125768 improves AUC. Keeping the model.
Training on augumented user 61484 6/50 current_auc = 0.527016129032258
User 61484 AUC after training: 0.5264112903225807
User 61484 does not improve AUC. Reverting changes.
Training on augumented user 105108 7/50 current_auc = 0.527016129032258
User 105108 AUC after training: 0.527016129032258
User 105108 does not improve AUC. Reverting changes.
Training on augumented user 102413 8/50 current_auc = 0.527016129032258
User 102413 AUC after training: 0.5270161290322581
User 102413 improves AUC. Keeping the model.
Training on augumented user 125583 9/50 current_auc = 0.5270161290322581
User 125583 AUC after training: 0.5288306451612903
User 125583 improves AUC. Keeping the model.
Training on augumented user 88912 10/50 current_auc = 0.5288306451612903
User 88912 AUC after training: 0.5290322580645161
User 88912 improves AUC. Keeping the model.
Training on augumented user 104879 11/50 current_auc = 0.5290322580645161
User 104879 AUC after training: 0.5290322580645161
User 104879 does not improve AUC. Reverting changes.
Training on augumented user 60351 12/50 current_auc = 0.5290322580645161
User 60351 AUC after training: 0.5286290322580646
User 60351 does not improve AUC. Reverting changes.
Training on augumented user 3146 13/50 current_auc = 0.5290322580645161
User 3146 AUC after training: 0.5286290322580645
User 3146 does not improve AUC. Reverting changes.
Training on augumented user 84089 14/50 current_auc = 0.5290322580645161
User 84089 AUC after training: 0.5280241935483871
User 84089 does not improve AUC. Reverting changes.
Training on augumented user 49591 15/50 current_auc = 0.5290322580645161
User 49591 AUC after training: 0.5280241935483871
User 49591 does not improve AUC. Reverting changes.
Training on augumented user 95176 16/50 current_auc = 0.5290322580645161
User 95176 AUC after training: 0.528024193548387
User 95176 does not improve AUC. Reverting changes.
Training on augumented user 63375 17/50 current_auc = 0.5290322580645161
User 63375 AUC after training: 0.527016129032258
User 63375 does not improve AUC. Reverting changes.
Training on augumented user 15237 18/50 current_auc = 0.5290322580645161
User 15237 AUC after training: 0.5284274193548387
User 15237 does not improve AUC. Reverting changes.
Training on augumented user 119158 19/50 current_auc = 0.5290322580645161
User 119158 AUC after training: 0.5294354838709677
User 119158 improves AUC. Keeping the model.
Training on augumented user 93178 20/50 current_auc = 0.5294354838709677
User 93178 AUC after training: 0.5288306451612904
User 93178 does not improve AUC. Reverting changes.
Training on augumented user 75585 21/50 current_auc = 0.5294354838709677
User 75585 AUC after training: 0.5276209677419355
User 75585 does not improve AUC. Reverting changes.
Training on augumented user 119069 22/50 current_auc = 0.5294354838709677
User 119069 AUC after training: 0.5268145161290323
User 119069 does not improve AUC. Reverting changes.
Training on augumented user 54806 23/50 current_auc = 0.5294354838709677
User 54806 AUC after training: 0.5294354838709677
User 54806 does not improve AUC. Reverting changes.
Training on augumented user 119508 24/50 current_auc = 0.5294354838709677
User 119508 AUC after training: 0.5276209677419356
User 119508 does not improve AUC. Reverting changes.
Training on augumented user 23184 25/50 current_auc = 0.5294354838709677
User 23184 AUC after training: 0.5296370967741935
User 23184 improves AUC. Keeping the model.
Training on augumented user 118173 26/50 current_auc = 0.5296370967741935
User 118173 AUC after training: 0.5280241935483871
User 118173 does not improve AUC. Reverting changes.
Training on augumented user 116247 27/50 current_auc = 0.5296370967741935
User 116247 AUC after training: 0.5296370967741936
User 116247 improves AUC. Keeping the model.
Training on augumented user 112618 28/50 current_auc = 0.5296370967741936
User 112618 AUC after training: 0.5296370967741936
User 112618 does not improve AUC. Reverting changes.
Training on augumented user 8236 29/50 current_auc = 0.5296370967741936
User 8236 AUC after training: 0.530241935483871
User 8236 improves AUC. Keeping the model.
Training on augumented user 41178 30/50 current_auc = 0.530241935483871
User 41178 AUC after training: 0.5264112903225807
User 41178 does not improve AUC. Reverting changes.
Training on augumented user 32307 31/50 current_auc = 0.530241935483871
User 32307 AUC after training: 0.5296370967741935
User 32307 does not improve AUC. Reverting changes.
Training on augumented user 32338 32/50 current_auc = 0.530241935483871
User 32338 AUC after training: 0.5306451612903225
User 32338 improves AUC. Keeping the model.
Training on augumented user 6137 33/50 current_auc = 0.5306451612903225
User 6137 AUC after training: 0.5288306451612903
User 6137 does not improve AUC. Reverting changes.
Training on augumented user 116174 34/50 current_auc = 0.5306451612903225
User 116174 AUC after training: 0.5304435483870967
User 116174 does not improve AUC. Reverting changes.
Training on augumented user 10671 35/50 current_auc = 0.5306451612903225
User 10671 AUC after training: 0.5294354838709677
User 10671 does not improve AUC. Reverting changes.
Training on augumented user 28752 36/50 current_auc = 0.5306451612903225
User 28752 AUC after training: 0.5304435483870967
User 28752 does not improve AUC. Reverting changes.
Training on augumented user 122097 37/50 current_auc = 0.5306451612903225
User 122097 AUC after training: 0.5304435483870967
User 122097 does not improve AUC. Reverting changes.
Training on augumented user 28682 38/50 current_auc = 0.5306451612903225
User 28682 AUC after training: 0.5304435483870967
User 28682 does not improve AUC. Reverting changes.
Training on augumented user 21218 39/50 current_auc = 0.5306451612903225
User 21218 AUC after training: 0.5300403225806452
User 21218 does not improve AUC. Reverting changes.
Training on augumented user 121771 40/50 current_auc = 0.5306451612903225
User 121771 AUC after training: 0.5298387096774193
User 121771 does not improve AUC. Reverting changes.
Training on augumented user 22684 41/50 current_auc = 0.5306451612903225
User 22684 AUC after training: 0.5318548387096774
User 22684 improves AUC. Keeping the model.
Training on augumented user 11612 42/50 current_auc = 0.5318548387096774
User 11612 AUC after training: 0.5314516129032258
User 11612 does not improve AUC. Reverting changes.
Training on augumented user 12980 43/50 current_auc = 0.5318548387096774
User 12980 AUC after training: 0.5294354838709677
User 12980 does not improve AUC. Reverting changes.
Training on augumented user 91999 44/50 current_auc = 0.5318548387096774
User 91999 AUC after training: 0.5298387096774193
User 91999 does not improve AUC. Reverting changes.
Training on augumented user 43727 45/50 current_auc = 0.5318548387096774
User 43727 AUC after training: 0.5300403225806452
User 43727 does not improve AUC. Reverting changes.
Training on augumented user 122701 46/50 current_auc = 0.5318548387096774
User 122701 AUC after training: 0.5306451612903226
User 122701 does not improve AUC. Reverting changes.
Training on augumented user 105479 47/50 current_auc = 0.5318548387096774
User 105479 AUC after training: 0.53125
User 105479 does not improve AUC. Reverting changes.
Training on augumented user 45533 48/50 current_auc = 0.5318548387096774
User 45533 AUC after training: 0.5292338709677419
User 45533 does not improve AUC. Reverting changes.
Training on augumented user 4037 49/50 current_auc = 0.5318548387096774
User 4037 AUC after training: 0.5310483870967742
User 4037 does not improve AUC. Reverting changes.
[2024-12-02 19:37:57.872508] start test user 32716 212/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:58.277871] start test user 32716 212/568 recall augumented users by random, augumented_users = [66501, 109932, 137773, 101822, 133096, 132517, 6150, 81218, 51388, 92998, 59439, 114844, 91603, 126440, 14426, 115842, 35654, 41041, 91055, 76170, 40913, 121297, 128031, 76577, 45701, 74746, 24712, 63657, 34280, 2382, 1618, 45218, 16646, 85477, 47744, 39364, 64947, 47902, 12272, 56686, 134986, 73671, 58687, 59472, 23685, 63822, 94998, 10946, 84269, 79249]
[2024-12-02 19:37:58.292136] user = 32716 Cloud 212/568
[2024-12-02 19:37:58.313431] user = 32716 Local 212/568
[2024-12-02 19:37:58.372650] user = 32716 Local+ 212/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:01.003502] user = 32716 MPDA- 212/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.2631578947368421
Training on augumented user 66501 0/50 current_auc = 0.2631578947368421
User 66501 AUC after training: 0.2631578947368421
User 66501 does not improve AUC. Reverting changes.
Training on augumented user 109932 1/50 current_auc = 0.2631578947368421
User 109932 AUC after training: 0.2631578947368421
User 109932 does not improve AUC. Reverting changes.
Training on augumented user 137773 2/50 current_auc = 0.2631578947368421
User 137773 AUC after training: 0.2631578947368421
User 137773 does not improve AUC. Reverting changes.
Training on augumented user 101822 3/50 current_auc = 0.2631578947368421
User 101822 AUC after training: 0.2631578947368421
User 101822 does not improve AUC. Reverting changes.
Training on augumented user 133096 4/50 current_auc = 0.2631578947368421
User 133096 AUC after training: 0.2631578947368421
User 133096 does not improve AUC. Reverting changes.
Training on augumented user 132517 5/50 current_auc = 0.2631578947368421
User 132517 AUC after training: 0.2631578947368421
User 132517 does not improve AUC. Reverting changes.
Training on augumented user 6150 6/50 current_auc = 0.2631578947368421
User 6150 AUC after training: 0.2631578947368421
User 6150 does not improve AUC. Reverting changes.
Training on augumented user 81218 7/50 current_auc = 0.2631578947368421
User 81218 AUC after training: 0.2631578947368421
User 81218 does not improve AUC. Reverting changes.
Training on augumented user 51388 8/50 current_auc = 0.2631578947368421
User 51388 AUC after training: 0.2631578947368421
User 51388 does not improve AUC. Reverting changes.
Training on augumented user 92998 9/50 current_auc = 0.2631578947368421
User 92998 AUC after training: 0.2631578947368421
User 92998 does not improve AUC. Reverting changes.
Training on augumented user 59439 10/50 current_auc = 0.2631578947368421
User 59439 AUC after training: 0.2631578947368421
User 59439 does not improve AUC. Reverting changes.
Training on augumented user 114844 11/50 current_auc = 0.2631578947368421
User 114844 AUC after training: 0.2631578947368421
User 114844 does not improve AUC. Reverting changes.
Training on augumented user 91603 12/50 current_auc = 0.2631578947368421
User 91603 AUC after training: 0.2631578947368421
User 91603 does not improve AUC. Reverting changes.
Training on augumented user 126440 13/50 current_auc = 0.2631578947368421
User 126440 AUC after training: 0.2631578947368421
User 126440 does not improve AUC. Reverting changes.
Training on augumented user 14426 14/50 current_auc = 0.2631578947368421
User 14426 AUC after training: 0.2631578947368421
User 14426 does not improve AUC. Reverting changes.
Training on augumented user 115842 15/50 current_auc = 0.2631578947368421
User 115842 AUC after training: 0.2631578947368421
User 115842 does not improve AUC. Reverting changes.
Training on augumented user 35654 16/50 current_auc = 0.2631578947368421
User 35654 AUC after training: 0.2631578947368421
User 35654 does not improve AUC. Reverting changes.
Training on augumented user 41041 17/50 current_auc = 0.2631578947368421
User 41041 AUC after training: 0.2631578947368421
User 41041 does not improve AUC. Reverting changes.
Training on augumented user 91055 18/50 current_auc = 0.2631578947368421
User 91055 AUC after training: 0.2631578947368421
User 91055 does not improve AUC. Reverting changes.
Training on augumented user 76170 19/50 current_auc = 0.2631578947368421
User 76170 AUC after training: 0.2631578947368421
User 76170 does not improve AUC. Reverting changes.
Training on augumented user 40913 20/50 current_auc = 0.2631578947368421
User 40913 AUC after training: 0.2631578947368421
User 40913 does not improve AUC. Reverting changes.
Training on augumented user 121297 21/50 current_auc = 0.2631578947368421
User 121297 AUC after training: 0.2631578947368421
User 121297 does not improve AUC. Reverting changes.
Training on augumented user 128031 22/50 current_auc = 0.2631578947368421
User 128031 AUC after training: 0.2631578947368421
User 128031 does not improve AUC. Reverting changes.
Training on augumented user 76577 23/50 current_auc = 0.2631578947368421
User 76577 AUC after training: 0.2631578947368421
User 76577 does not improve AUC. Reverting changes.
Training on augumented user 45701 24/50 current_auc = 0.2631578947368421
User 45701 AUC after training: 0.2631578947368421
User 45701 does not improve AUC. Reverting changes.
Training on augumented user 74746 25/50 current_auc = 0.2631578947368421
User 74746 AUC after training: 0.2631578947368421
User 74746 does not improve AUC. Reverting changes.
Training on augumented user 24712 26/50 current_auc = 0.2631578947368421
User 24712 AUC after training: 0.2631578947368421
User 24712 does not improve AUC. Reverting changes.
Training on augumented user 63657 27/50 current_auc = 0.2631578947368421
User 63657 AUC after training: 0.2631578947368421
User 63657 does not improve AUC. Reverting changes.
Training on augumented user 34280 28/50 current_auc = 0.2631578947368421
User 34280 AUC after training: 0.2631578947368421
User 34280 does not improve AUC. Reverting changes.
Training on augumented user 2382 29/50 current_auc = 0.2631578947368421
User 2382 AUC after training: 0.2631578947368421
User 2382 does not improve AUC. Reverting changes.
Training on augumented user 1618 30/50 current_auc = 0.2631578947368421
User 1618 AUC after training: 0.2631578947368421
User 1618 does not improve AUC. Reverting changes.
Training on augumented user 45218 31/50 current_auc = 0.2631578947368421
User 45218 AUC after training: 0.2631578947368421
User 45218 does not improve AUC. Reverting changes.
Training on augumented user 16646 32/50 current_auc = 0.2631578947368421
User 16646 AUC after training: 0.2631578947368421
User 16646 does not improve AUC. Reverting changes.
Training on augumented user 85477 33/50 current_auc = 0.2631578947368421
User 85477 AUC after training: 0.2631578947368421
User 85477 does not improve AUC. Reverting changes.
Training on augumented user 47744 34/50 current_auc = 0.2631578947368421
User 47744 AUC after training: 0.2631578947368421
User 47744 does not improve AUC. Reverting changes.
Training on augumented user 39364 35/50 current_auc = 0.2631578947368421
User 39364 AUC after training: 0.2631578947368421
User 39364 does not improve AUC. Reverting changes.
Training on augumented user 64947 36/50 current_auc = 0.2631578947368421
User 64947 AUC after training: 0.2631578947368421
User 64947 does not improve AUC. Reverting changes.
Training on augumented user 47902 37/50 current_auc = 0.2631578947368421
User 47902 AUC after training: 0.2631578947368421
User 47902 does not improve AUC. Reverting changes.
Training on augumented user 12272 38/50 current_auc = 0.2631578947368421
User 12272 AUC after training: 0.2631578947368421
User 12272 does not improve AUC. Reverting changes.
Training on augumented user 56686 39/50 current_auc = 0.2631578947368421
User 56686 AUC after training: 0.2631578947368421
User 56686 does not improve AUC. Reverting changes.
Training on augumented user 134986 40/50 current_auc = 0.2631578947368421
User 134986 AUC after training: 0.2631578947368421
User 134986 does not improve AUC. Reverting changes.
Training on augumented user 73671 41/50 current_auc = 0.2631578947368421
User 73671 AUC after training: 0.2631578947368421
User 73671 does not improve AUC. Reverting changes.
Training on augumented user 58687 42/50 current_auc = 0.2631578947368421
User 58687 AUC after training: 0.2631578947368421
User 58687 does not improve AUC. Reverting changes.
Training on augumented user 59472 43/50 current_auc = 0.2631578947368421
User 59472 AUC after training: 0.2631578947368421
User 59472 does not improve AUC. Reverting changes.
Training on augumented user 23685 44/50 current_auc = 0.2631578947368421
User 23685 AUC after training: 0.2631578947368421
User 23685 does not improve AUC. Reverting changes.
Training on augumented user 63822 45/50 current_auc = 0.2631578947368421
User 63822 AUC after training: 0.2631578947368421
User 63822 does not improve AUC. Reverting changes.
Training on augumented user 94998 46/50 current_auc = 0.2631578947368421
User 94998 AUC after training: 0.2631578947368421
User 94998 does not improve AUC. Reverting changes.
Training on augumented user 10946 47/50 current_auc = 0.2631578947368421
User 10946 AUC after training: 0.2631578947368421
User 10946 does not improve AUC. Reverting changes.
Training on augumented user 84269 48/50 current_auc = 0.2631578947368421
User 84269 AUC after training: 0.2631578947368421
User 84269 does not improve AUC. Reverting changes.
Training on augumented user 79249 49/50 current_auc = 0.2631578947368421
User 79249 AUC after training: 0.2631578947368421
User 79249 does not improve AUC. Reverting changes.
[2024-12-02 19:38:24.333456] start test user 32729 213/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:24.590403] start test user 32729 213/568 recall augumented users by random, augumented_users = [126578, 61309, 98198, 39304, 102237, 50802, 4434, 135762, 44973, 135514, 109464, 114622, 125908, 113555, 87604, 109340, 72099, 54878, 107550, 53501, 53157, 134355, 61434, 5239, 114991, 108648, 86412, 94532, 130354, 12044, 125309, 46770, 118776, 127810, 96143, 14940, 90796, 17360, 89, 12924, 25916, 58203, 20208, 85196, 102189, 13020, 58138, 80742, 10531, 61948]
[2024-12-02 19:38:24.598235] user = 32729 Cloud 213/568
[2024-12-02 19:38:24.615265] user = 32729 Local 213/568
[2024-12-02 19:38:24.665980] user = 32729 Local+ 213/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:25.894363] user = 32729 MPDA- 213/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6600276963180189
Training on augumented user 126578 0/50 current_auc = 0.6600276963180189
User 126578 AUC after training: 0.6602313457152167
User 126578 improves AUC. Keeping the model.
Training on augumented user 61309 1/50 current_auc = 0.6602313457152167
User 61309 AUC after training: 0.6601906158357771
User 61309 does not improve AUC. Reverting changes.
Training on augumented user 98198 2/50 current_auc = 0.6602313457152167
User 98198 AUC after training: 0.6601906158357772
User 98198 does not improve AUC. Reverting changes.
Training on augumented user 39304 3/50 current_auc = 0.6602313457152167
User 39304 AUC after training: 0.6602720755946563
User 39304 improves AUC. Keeping the model.
Training on augumented user 102237 4/50 current_auc = 0.6602720755946563
User 102237 AUC after training: 0.6601091560768979
User 102237 does not improve AUC. Reverting changes.
Training on augumented user 50802 5/50 current_auc = 0.6602720755946563
User 50802 AUC after training: 0.6603128054740958
User 50802 improves AUC. Keeping the model.
Training on augumented user 4434 6/50 current_auc = 0.6603128054740958
User 4434 AUC after training: 0.6603535353535355
User 4434 improves AUC. Keeping the model.
Training on augumented user 135762 7/50 current_auc = 0.6603535353535355
User 135762 AUC after training: 0.6601906158357771
User 135762 does not improve AUC. Reverting changes.
Training on augumented user 44973 8/50 current_auc = 0.6603535353535355
User 44973 AUC after training: 0.6604757249918541
User 44973 improves AUC. Keeping the model.
Training on augumented user 135514 9/50 current_auc = 0.6604757249918541
User 135514 AUC after training: 0.6607201042684915
User 135514 improves AUC. Keeping the model.
Training on augumented user 109464 10/50 current_auc = 0.6607201042684915
User 109464 AUC after training: 0.6603942652329748
User 109464 does not improve AUC. Reverting changes.
Training on augumented user 114622 11/50 current_auc = 0.6607201042684915
User 114622 AUC after training: 0.660394265232975
User 114622 does not improve AUC. Reverting changes.
Training on augumented user 125908 12/50 current_auc = 0.6607201042684915
User 125908 AUC after training: 0.6609237536656892
User 125908 improves AUC. Keeping the model.
Training on augumented user 113555 13/50 current_auc = 0.6609237536656892
User 113555 AUC after training: 0.6608015640273706
User 113555 does not improve AUC. Reverting changes.
Training on augumented user 87604 14/50 current_auc = 0.6609237536656892
User 87604 AUC after training: 0.6602720755946563
User 87604 does not improve AUC. Reverting changes.
Training on augumented user 109340 15/50 current_auc = 0.6609237536656892
User 109340 AUC after training: 0.6605979146301727
User 109340 does not improve AUC. Reverting changes.
Training on augumented user 72099 16/50 current_auc = 0.6609237536656892
User 72099 AUC after training: 0.660760834147931
User 72099 does not improve AUC. Reverting changes.
Training on augumented user 54878 17/50 current_auc = 0.6609237536656892
User 54878 AUC after training: 0.6610052134245683
User 54878 improves AUC. Keeping the model.
Training on augumented user 107550 18/50 current_auc = 0.6610052134245683
User 107550 AUC after training: 0.6610459433040078
User 107550 improves AUC. Keeping the model.
Training on augumented user 53501 19/50 current_auc = 0.6610459433040078
User 53501 AUC after training: 0.6605164548712936
User 53501 does not improve AUC. Reverting changes.
Training on augumented user 53157 20/50 current_auc = 0.6610459433040078
User 53157 AUC after training: 0.660760834147931
User 53157 does not improve AUC. Reverting changes.
Training on augumented user 134355 21/50 current_auc = 0.6610459433040078
User 134355 AUC after training: 0.6610866731834474
User 134355 improves AUC. Keeping the model.
Training on augumented user 61434 22/50 current_auc = 0.6610866731834474
User 61434 AUC after training: 0.6610459433040079
User 61434 does not improve AUC. Reverting changes.
Training on augumented user 5239 23/50 current_auc = 0.6610866731834474
User 5239 AUC after training: 0.6611274030628871
User 5239 improves AUC. Keeping the model.
Training on augumented user 114991 24/50 current_auc = 0.6611274030628871
User 114991 AUC after training: 0.6610459433040079
User 114991 does not improve AUC. Reverting changes.
Training on augumented user 108648 25/50 current_auc = 0.6611274030628871
User 108648 AUC after training: 0.6610459433040078
User 108648 does not improve AUC. Reverting changes.
Training on augumented user 86412 26/50 current_auc = 0.6611274030628871
User 86412 AUC after training: 0.6611681329423265
User 86412 improves AUC. Keeping the model.
Training on augumented user 94532 27/50 current_auc = 0.6611681329423265
User 94532 AUC after training: 0.661208862821766
User 94532 improves AUC. Keeping the model.
Training on augumented user 130354 28/50 current_auc = 0.661208862821766
User 130354 AUC after training: 0.6613310524600846
User 130354 improves AUC. Keeping the model.
Training on augumented user 12044 29/50 current_auc = 0.6613310524600846
User 12044 AUC after training: 0.660475724991854
User 12044 does not improve AUC. Reverting changes.
Training on augumented user 125309 30/50 current_auc = 0.6613310524600846
User 125309 AUC after training: 0.6612903225806452
User 125309 does not improve AUC. Reverting changes.
Training on augumented user 46770 31/50 current_auc = 0.6613310524600846
User 46770 AUC after training: 0.6606793743890519
User 46770 does not improve AUC. Reverting changes.
Training on augumented user 118776 32/50 current_auc = 0.6613310524600846
User 118776 AUC after training: 0.6610866731834474
User 118776 does not improve AUC. Reverting changes.
Training on augumented user 127810 33/50 current_auc = 0.6613310524600846
User 127810 AUC after training: 0.6610866731834473
User 127810 does not improve AUC. Reverting changes.
Training on augumented user 96143 34/50 current_auc = 0.6613310524600846
User 96143 AUC after training: 0.6603535353535354
User 96143 does not improve AUC. Reverting changes.
Training on augumented user 14940 35/50 current_auc = 0.6613310524600846
User 14940 AUC after training: 0.66084229390681
User 14940 does not improve AUC. Reverting changes.
Training on augumented user 90796 36/50 current_auc = 0.6613310524600846
User 90796 AUC after training: 0.6608015640273706
User 90796 does not improve AUC. Reverting changes.
Training on augumented user 17360 37/50 current_auc = 0.6613310524600846
User 17360 AUC after training: 0.6611681329423265
User 17360 does not improve AUC. Reverting changes.
Training on augumented user 89 38/50 current_auc = 0.6613310524600846
User 89 AUC after training: 0.660760834147931
User 89 does not improve AUC. Reverting changes.
Training on augumented user 12924 39/50 current_auc = 0.6613310524600846
User 12924 AUC after training: 0.6611274030628869
User 12924 does not improve AUC. Reverting changes.
Training on augumented user 25916 40/50 current_auc = 0.6613310524600846
User 25916 AUC after training: 0.6608830237862495
User 25916 does not improve AUC. Reverting changes.
Training on augumented user 58203 41/50 current_auc = 0.6613310524600846
User 58203 AUC after training: 0.6609644835451287
User 58203 does not improve AUC. Reverting changes.
Training on augumented user 20208 42/50 current_auc = 0.6613310524600846
User 20208 AUC after training: 0.6613717823395243
User 20208 improves AUC. Keeping the model.
Training on augumented user 85196 43/50 current_auc = 0.6613717823395243
User 85196 AUC after training: 0.6612495927012056
User 85196 does not improve AUC. Reverting changes.
Training on augumented user 102189 44/50 current_auc = 0.6613717823395243
User 102189 AUC after training: 0.6610459433040078
User 102189 does not improve AUC. Reverting changes.
Training on augumented user 13020 45/50 current_auc = 0.6613717823395243
User 13020 AUC after training: 0.6610866731834474
User 13020 does not improve AUC. Reverting changes.
Training on augumented user 58138 46/50 current_auc = 0.6613717823395243
User 58138 AUC after training: 0.6610459433040079
User 58138 does not improve AUC. Reverting changes.
Training on augumented user 80742 47/50 current_auc = 0.6613717823395243
User 80742 AUC after training: 0.6612495927012056
User 80742 does not improve AUC. Reverting changes.
Training on augumented user 10531 48/50 current_auc = 0.6613717823395243
User 10531 AUC after training: 0.6612088628217662
User 10531 does not improve AUC. Reverting changes.
Training on augumented user 61948 49/50 current_auc = 0.6613717823395243
User 61948 AUC after training: 0.66084229390681
User 61948 does not improve AUC. Reverting changes.
[2024-12-02 19:38:52.584357] start test user 32768 214/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:53.067453] start test user 32768 214/568 recall augumented users by random, augumented_users = [78204, 7112, 78202, 27469, 69954, 35393, 109662, 6974, 4721, 104453, 1438, 8202, 96907, 28526, 67787, 735, 77547, 43884, 31643, 39837, 9210, 74164, 138412, 76010, 112714, 61322, 39443, 10274, 23608, 94312, 91049, 115743, 96884, 34399, 35451, 27, 36249, 59144, 49733, 77223, 72915, 44397, 55705, 75076, 48868, 128069, 18199, 40310, 31877, 34038]
[2024-12-02 19:38:53.083521] user = 32768 Cloud 214/568
[2024-12-02 19:38:53.093993] user = 32768 Local 214/568
[2024-12-02 19:38:53.375232] user = 32768 Local+ 214/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:55.845009] user = 32768 MPDA- 214/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.43333333333333335
Training on augumented user 78204 0/50 current_auc = 0.43333333333333335
User 78204 AUC after training: 0.43333333333333335
User 78204 does not improve AUC. Reverting changes.
Training on augumented user 7112 1/50 current_auc = 0.43333333333333335
User 7112 AUC after training: 0.43333333333333335
User 7112 does not improve AUC. Reverting changes.
Training on augumented user 78202 2/50 current_auc = 0.43333333333333335
User 78202 AUC after training: 0.43333333333333335
User 78202 does not improve AUC. Reverting changes.
Training on augumented user 27469 3/50 current_auc = 0.43333333333333335
User 27469 AUC after training: 0.43333333333333335
User 27469 does not improve AUC. Reverting changes.
Training on augumented user 69954 4/50 current_auc = 0.43333333333333335
User 69954 AUC after training: 0.42857142857142855
User 69954 does not improve AUC. Reverting changes.
Training on augumented user 35393 5/50 current_auc = 0.43333333333333335
User 35393 AUC after training: 0.43333333333333335
User 35393 does not improve AUC. Reverting changes.
Training on augumented user 109662 6/50 current_auc = 0.43333333333333335
User 109662 AUC after training: 0.43333333333333335
User 109662 does not improve AUC. Reverting changes.
Training on augumented user 6974 7/50 current_auc = 0.43333333333333335
User 6974 AUC after training: 0.43333333333333335
User 6974 does not improve AUC. Reverting changes.
Training on augumented user 4721 8/50 current_auc = 0.43333333333333335
User 4721 AUC after training: 0.43333333333333335
User 4721 does not improve AUC. Reverting changes.
Training on augumented user 104453 9/50 current_auc = 0.43333333333333335
User 104453 AUC after training: 0.43333333333333335
User 104453 does not improve AUC. Reverting changes.
Training on augumented user 1438 10/50 current_auc = 0.43333333333333335
User 1438 AUC after training: 0.43333333333333335
User 1438 does not improve AUC. Reverting changes.
Training on augumented user 8202 11/50 current_auc = 0.43333333333333335
User 8202 AUC after training: 0.43333333333333335
User 8202 does not improve AUC. Reverting changes.
Training on augumented user 96907 12/50 current_auc = 0.43333333333333335
User 96907 AUC after training: 0.43333333333333335
User 96907 does not improve AUC. Reverting changes.
Training on augumented user 28526 13/50 current_auc = 0.43333333333333335
User 28526 AUC after training: 0.43333333333333335
User 28526 does not improve AUC. Reverting changes.
Training on augumented user 67787 14/50 current_auc = 0.43333333333333335
User 67787 AUC after training: 0.43333333333333335
User 67787 does not improve AUC. Reverting changes.
Training on augumented user 735 15/50 current_auc = 0.43333333333333335
User 735 AUC after training: 0.42857142857142855
User 735 does not improve AUC. Reverting changes.
Training on augumented user 77547 16/50 current_auc = 0.43333333333333335
User 77547 AUC after training: 0.43333333333333335
User 77547 does not improve AUC. Reverting changes.
Training on augumented user 43884 17/50 current_auc = 0.43333333333333335
User 43884 AUC after training: 0.43333333333333335
User 43884 does not improve AUC. Reverting changes.
Training on augumented user 31643 18/50 current_auc = 0.43333333333333335
User 31643 AUC after training: 0.4238095238095238
User 31643 does not improve AUC. Reverting changes.
Training on augumented user 39837 19/50 current_auc = 0.43333333333333335
User 39837 AUC after training: 0.43333333333333335
User 39837 does not improve AUC. Reverting changes.
Training on augumented user 9210 20/50 current_auc = 0.43333333333333335
User 9210 AUC after training: 0.43333333333333335
User 9210 does not improve AUC. Reverting changes.
Training on augumented user 74164 21/50 current_auc = 0.43333333333333335
User 74164 AUC after training: 0.43333333333333335
User 74164 does not improve AUC. Reverting changes.
Training on augumented user 138412 22/50 current_auc = 0.43333333333333335
User 138412 AUC after training: 0.43333333333333335
User 138412 does not improve AUC. Reverting changes.
Training on augumented user 76010 23/50 current_auc = 0.43333333333333335
User 76010 AUC after training: 0.42857142857142855
User 76010 does not improve AUC. Reverting changes.
Training on augumented user 112714 24/50 current_auc = 0.43333333333333335
User 112714 AUC after training: 0.43333333333333335
User 112714 does not improve AUC. Reverting changes.
Training on augumented user 61322 25/50 current_auc = 0.43333333333333335
User 61322 AUC after training: 0.43333333333333335
User 61322 does not improve AUC. Reverting changes.
Training on augumented user 39443 26/50 current_auc = 0.43333333333333335
User 39443 AUC after training: 0.43333333333333335
User 39443 does not improve AUC. Reverting changes.
Training on augumented user 10274 27/50 current_auc = 0.43333333333333335
User 10274 AUC after training: 0.43333333333333335
User 10274 does not improve AUC. Reverting changes.
Training on augumented user 23608 28/50 current_auc = 0.43333333333333335
User 23608 AUC after training: 0.43333333333333335
User 23608 does not improve AUC. Reverting changes.
Training on augumented user 94312 29/50 current_auc = 0.43333333333333335
User 94312 AUC after training: 0.42857142857142855
User 94312 does not improve AUC. Reverting changes.
Training on augumented user 91049 30/50 current_auc = 0.43333333333333335
User 91049 AUC after training: 0.43333333333333335
User 91049 does not improve AUC. Reverting changes.
Training on augumented user 115743 31/50 current_auc = 0.43333333333333335
User 115743 AUC after training: 0.43333333333333335
User 115743 does not improve AUC. Reverting changes.
Training on augumented user 96884 32/50 current_auc = 0.43333333333333335
User 96884 AUC after training: 0.43333333333333335
User 96884 does not improve AUC. Reverting changes.
Training on augumented user 34399 33/50 current_auc = 0.43333333333333335
User 34399 AUC after training: 0.42857142857142855
User 34399 does not improve AUC. Reverting changes.
Training on augumented user 35451 34/50 current_auc = 0.43333333333333335
User 35451 AUC after training: 0.42857142857142855
User 35451 does not improve AUC. Reverting changes.
Training on augumented user 27 35/50 current_auc = 0.43333333333333335
User 27 AUC after training: 0.43333333333333335
User 27 does not improve AUC. Reverting changes.
Training on augumented user 36249 36/50 current_auc = 0.43333333333333335
User 36249 AUC after training: 0.43333333333333335
User 36249 does not improve AUC. Reverting changes.
Training on augumented user 59144 37/50 current_auc = 0.43333333333333335
User 59144 AUC after training: 0.43333333333333335
User 59144 does not improve AUC. Reverting changes.
Training on augumented user 49733 38/50 current_auc = 0.43333333333333335
User 49733 AUC after training: 0.43333333333333335
User 49733 does not improve AUC. Reverting changes.
Training on augumented user 77223 39/50 current_auc = 0.43333333333333335
User 77223 AUC after training: 0.43333333333333335
User 77223 does not improve AUC. Reverting changes.
Training on augumented user 72915 40/50 current_auc = 0.43333333333333335
User 72915 AUC after training: 0.43333333333333335
User 72915 does not improve AUC. Reverting changes.
Training on augumented user 44397 41/50 current_auc = 0.43333333333333335
User 44397 AUC after training: 0.43333333333333335
User 44397 does not improve AUC. Reverting changes.
Training on augumented user 55705 42/50 current_auc = 0.43333333333333335
User 55705 AUC after training: 0.43333333333333335
User 55705 does not improve AUC. Reverting changes.
Training on augumented user 75076 43/50 current_auc = 0.43333333333333335
User 75076 AUC after training: 0.4380952380952381
User 75076 improves AUC. Keeping the model.
Training on augumented user 48868 44/50 current_auc = 0.4380952380952381
User 48868 AUC after training: 0.4380952380952381
User 48868 does not improve AUC. Reverting changes.
Training on augumented user 128069 45/50 current_auc = 0.4380952380952381
User 128069 AUC after training: 0.4380952380952381
User 128069 does not improve AUC. Reverting changes.
Training on augumented user 18199 46/50 current_auc = 0.4380952380952381
User 18199 AUC after training: 0.4380952380952381
User 18199 does not improve AUC. Reverting changes.
Training on augumented user 40310 47/50 current_auc = 0.4380952380952381
User 40310 AUC after training: 0.4380952380952381
User 40310 does not improve AUC. Reverting changes.
Training on augumented user 31877 48/50 current_auc = 0.4380952380952381
User 31877 AUC after training: 0.4380952380952381
User 31877 does not improve AUC. Reverting changes.
Training on augumented user 34038 49/50 current_auc = 0.4380952380952381
User 34038 AUC after training: 0.4380952380952381
User 34038 does not improve AUC. Reverting changes.
[2024-12-02 19:39:25.872167] start test user 32785 215/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:26.396261] start test user 32785 215/568 recall augumented users by random, augumented_users = [2248, 21153, 39338, 25054, 27273, 114023, 105018, 1264, 137370, 13026, 40748, 118332, 125393, 80135, 2794, 53376, 117321, 101593, 74725, 21087, 134652, 112300, 46711, 3681, 120722, 87032, 80368, 87460, 102794, 81234, 60723, 91641, 138036, 92451, 27768, 15408, 129045, 84522, 63848, 84850, 43925, 63686, 97986, 71930, 37335, 78102, 128234, 104344, 34608, 66537]
[2024-12-02 19:39:26.410968] user = 32785 Cloud 215/568
[2024-12-02 19:39:26.423623] user = 32785 Local 215/568
[2024-12-02 19:39:26.464764] user = 32785 Local+ 215/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:28.161129] user = 32785 MPDA- 215/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5679785330948122
Training on augumented user 2248 0/50 current_auc = 0.5679785330948122
User 2248 AUC after training: 0.5670840787119856
User 2248 does not improve AUC. Reverting changes.
Training on augumented user 21153 1/50 current_auc = 0.5679785330948122
User 21153 AUC after training: 0.5697674418604651
User 21153 improves AUC. Keeping the model.
Training on augumented user 39338 2/50 current_auc = 0.5697674418604651
User 39338 AUC after training: 0.5724508050089445
User 39338 improves AUC. Keeping the model.
Training on augumented user 25054 3/50 current_auc = 0.5724508050089445
User 25054 AUC after training: 0.5724508050089445
User 25054 does not improve AUC. Reverting changes.
Training on augumented user 27273 4/50 current_auc = 0.5724508050089445
User 27273 AUC after training: 0.5715563506261181
User 27273 does not improve AUC. Reverting changes.
Training on augumented user 114023 5/50 current_auc = 0.5724508050089445
User 114023 AUC after training: 0.5706618962432916
User 114023 does not improve AUC. Reverting changes.
Training on augumented user 105018 6/50 current_auc = 0.5724508050089445
User 105018 AUC after training: 0.5715563506261181
User 105018 does not improve AUC. Reverting changes.
Training on augumented user 1264 7/50 current_auc = 0.5724508050089445
User 1264 AUC after training: 0.5733452593917711
User 1264 improves AUC. Keeping the model.
Training on augumented user 137370 8/50 current_auc = 0.5733452593917711
User 137370 AUC after training: 0.5715563506261181
User 137370 does not improve AUC. Reverting changes.
Training on augumented user 13026 9/50 current_auc = 0.5733452593917711
User 13026 AUC after training: 0.5724508050089445
User 13026 does not improve AUC. Reverting changes.
Training on augumented user 40748 10/50 current_auc = 0.5733452593917711
User 40748 AUC after training: 0.5715563506261181
User 40748 does not improve AUC. Reverting changes.
Training on augumented user 118332 11/50 current_auc = 0.5733452593917711
User 118332 AUC after training: 0.5697674418604651
User 118332 does not improve AUC. Reverting changes.
Training on augumented user 125393 12/50 current_auc = 0.5733452593917711
User 125393 AUC after training: 0.5724508050089445
User 125393 does not improve AUC. Reverting changes.
Training on augumented user 80135 13/50 current_auc = 0.5733452593917711
User 80135 AUC after training: 0.5706618962432916
User 80135 does not improve AUC. Reverting changes.
Training on augumented user 2794 14/50 current_auc = 0.5733452593917711
User 2794 AUC after training: 0.5724508050089445
User 2794 does not improve AUC. Reverting changes.
Training on augumented user 53376 15/50 current_auc = 0.5733452593917711
User 53376 AUC after training: 0.5724508050089445
User 53376 does not improve AUC. Reverting changes.
Training on augumented user 117321 16/50 current_auc = 0.5733452593917711
User 117321 AUC after training: 0.5715563506261181
User 117321 does not improve AUC. Reverting changes.
Training on augumented user 101593 17/50 current_auc = 0.5733452593917711
User 101593 AUC after training: 0.5742397137745976
User 101593 improves AUC. Keeping the model.
Training on augumented user 74725 18/50 current_auc = 0.5742397137745976
User 74725 AUC after training: 0.5724508050089445
User 74725 does not improve AUC. Reverting changes.
Training on augumented user 21087 19/50 current_auc = 0.5742397137745976
User 21087 AUC after training: 0.5733452593917711
User 21087 does not improve AUC. Reverting changes.
Training on augumented user 134652 20/50 current_auc = 0.5742397137745976
User 134652 AUC after training: 0.5733452593917711
User 134652 does not improve AUC. Reverting changes.
Training on augumented user 112300 21/50 current_auc = 0.5742397137745976
User 112300 AUC after training: 0.5724508050089445
User 112300 does not improve AUC. Reverting changes.
Training on augumented user 46711 22/50 current_auc = 0.5742397137745976
User 46711 AUC after training: 0.5733452593917711
User 46711 does not improve AUC. Reverting changes.
Training on augumented user 3681 23/50 current_auc = 0.5742397137745976
User 3681 AUC after training: 0.5733452593917711
User 3681 does not improve AUC. Reverting changes.
Training on augumented user 120722 24/50 current_auc = 0.5742397137745976
User 120722 AUC after training: 0.5724508050089445
User 120722 does not improve AUC. Reverting changes.
Training on augumented user 87032 25/50 current_auc = 0.5742397137745976
User 87032 AUC after training: 0.5724508050089445
User 87032 does not improve AUC. Reverting changes.
Training on augumented user 80368 26/50 current_auc = 0.5742397137745976
User 80368 AUC after training: 0.5742397137745975
User 80368 does not improve AUC. Reverting changes.
Training on augumented user 87460 27/50 current_auc = 0.5742397137745976
User 87460 AUC after training: 0.5706618962432917
User 87460 does not improve AUC. Reverting changes.
Training on augumented user 102794 28/50 current_auc = 0.5742397137745976
User 102794 AUC after training: 0.5742397137745975
User 102794 does not improve AUC. Reverting changes.
Training on augumented user 81234 29/50 current_auc = 0.5742397137745976
User 81234 AUC after training: 0.5742397137745976
User 81234 does not improve AUC. Reverting changes.
Training on augumented user 60723 30/50 current_auc = 0.5742397137745976
User 60723 AUC after training: 0.5733452593917711
User 60723 does not improve AUC. Reverting changes.
Training on augumented user 91641 31/50 current_auc = 0.5742397137745976
User 91641 AUC after training: 0.5742397137745976
User 91641 does not improve AUC. Reverting changes.
Training on augumented user 138036 32/50 current_auc = 0.5742397137745976
User 138036 AUC after training: 0.5733452593917711
User 138036 does not improve AUC. Reverting changes.
Training on augumented user 92451 33/50 current_auc = 0.5742397137745976
User 92451 AUC after training: 0.5733452593917711
User 92451 does not improve AUC. Reverting changes.
Training on augumented user 27768 34/50 current_auc = 0.5742397137745976
User 27768 AUC after training: 0.5715563506261181
User 27768 does not improve AUC. Reverting changes.
Training on augumented user 15408 35/50 current_auc = 0.5742397137745976
User 15408 AUC after training: 0.5733452593917711
User 15408 does not improve AUC. Reverting changes.
Training on augumented user 129045 36/50 current_auc = 0.5742397137745976
User 129045 AUC after training: 0.5715563506261181
User 129045 does not improve AUC. Reverting changes.
Training on augumented user 84522 37/50 current_auc = 0.5742397137745976
User 84522 AUC after training: 0.5679785330948122
User 84522 does not improve AUC. Reverting changes.
Training on augumented user 63848 38/50 current_auc = 0.5742397137745976
User 63848 AUC after training: 0.5724508050089445
User 63848 does not improve AUC. Reverting changes.
Training on augumented user 84850 39/50 current_auc = 0.5742397137745976
User 84850 AUC after training: 0.573345259391771
User 84850 does not improve AUC. Reverting changes.
Training on augumented user 43925 40/50 current_auc = 0.5742397137745976
User 43925 AUC after training: 0.5697674418604651
User 43925 does not improve AUC. Reverting changes.
Training on augumented user 63686 41/50 current_auc = 0.5742397137745976
User 63686 AUC after training: 0.5688729874776386
User 63686 does not improve AUC. Reverting changes.
Training on augumented user 97986 42/50 current_auc = 0.5742397137745976
User 97986 AUC after training: 0.5733452593917711
User 97986 does not improve AUC. Reverting changes.
Training on augumented user 71930 43/50 current_auc = 0.5742397137745976
User 71930 AUC after training: 0.5733452593917711
User 71930 does not improve AUC. Reverting changes.
Training on augumented user 37335 44/50 current_auc = 0.5742397137745976
User 37335 AUC after training: 0.5733452593917711
User 37335 does not improve AUC. Reverting changes.
Training on augumented user 78102 45/50 current_auc = 0.5742397137745976
User 78102 AUC after training: 0.575134168157424
User 78102 improves AUC. Keeping the model.
Training on augumented user 128234 46/50 current_auc = 0.575134168157424
User 128234 AUC after training: 0.575134168157424
User 128234 does not improve AUC. Reverting changes.
Training on augumented user 104344 47/50 current_auc = 0.575134168157424
User 104344 AUC after training: 0.575134168157424
User 104344 does not improve AUC. Reverting changes.
Training on augumented user 34608 48/50 current_auc = 0.575134168157424
User 34608 AUC after training: 0.5724508050089445
User 34608 does not improve AUC. Reverting changes.
Training on augumented user 66537 49/50 current_auc = 0.575134168157424
User 66537 AUC after training: 0.5742397137745976
User 66537 does not improve AUC. Reverting changes.
[2024-12-02 19:39:55.660367] start test user 32809 216/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:56.411964] start test user 32809 216/568 recall augumented users by random, augumented_users = [87790, 48893, 8145, 27603, 118705, 29438, 46301, 13049, 25113, 39539, 128989, 124629, 128786, 27449, 61179, 116210, 24315, 91757, 69595, 121646, 127797, 48168, 108003, 23688, 66713, 134119, 21055, 48945, 87136, 45516, 128873, 66565, 113052, 41231, 92286, 37605, 132810, 87121, 36132, 31811, 77053, 7641, 129300, 27115, 43082, 110352, 77716, 111608, 38751, 87508]
[2024-12-02 19:39:56.436121] user = 32809 Cloud 216/568
[2024-12-02 19:39:56.453080] user = 32809 Local 216/568
[2024-12-02 19:39:56.483218] user = 32809 Local+ 216/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:59.265818] user = 32809 MPDA- 216/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 87790 0/50 current_auc = 1.0
User 87790 AUC after training: 1.0
User 87790 does not improve AUC. Reverting changes.
Training on augumented user 48893 1/50 current_auc = 1.0
User 48893 AUC after training: 1.0
User 48893 does not improve AUC. Reverting changes.
Training on augumented user 8145 2/50 current_auc = 1.0
User 8145 AUC after training: 1.0
User 8145 does not improve AUC. Reverting changes.
Training on augumented user 27603 3/50 current_auc = 1.0
User 27603 AUC after training: 1.0
User 27603 does not improve AUC. Reverting changes.
Training on augumented user 118705 4/50 current_auc = 1.0
User 118705 AUC after training: 1.0
User 118705 does not improve AUC. Reverting changes.
Training on augumented user 29438 5/50 current_auc = 1.0
User 29438 AUC after training: 1.0
User 29438 does not improve AUC. Reverting changes.
Training on augumented user 46301 6/50 current_auc = 1.0
User 46301 AUC after training: 1.0
User 46301 does not improve AUC. Reverting changes.
Training on augumented user 13049 7/50 current_auc = 1.0
User 13049 AUC after training: 1.0
User 13049 does not improve AUC. Reverting changes.
Training on augumented user 25113 8/50 current_auc = 1.0
User 25113 AUC after training: 1.0
User 25113 does not improve AUC. Reverting changes.
Training on augumented user 39539 9/50 current_auc = 1.0
User 39539 AUC after training: 1.0
User 39539 does not improve AUC. Reverting changes.
Training on augumented user 128989 10/50 current_auc = 1.0
User 128989 AUC after training: 1.0
User 128989 does not improve AUC. Reverting changes.
Training on augumented user 124629 11/50 current_auc = 1.0
User 124629 AUC after training: 1.0
User 124629 does not improve AUC. Reverting changes.
Training on augumented user 128786 12/50 current_auc = 1.0
User 128786 AUC after training: 1.0
User 128786 does not improve AUC. Reverting changes.
Training on augumented user 27449 13/50 current_auc = 1.0
User 27449 AUC after training: 1.0
User 27449 does not improve AUC. Reverting changes.
Training on augumented user 61179 14/50 current_auc = 1.0
User 61179 AUC after training: 1.0
User 61179 does not improve AUC. Reverting changes.
Training on augumented user 116210 15/50 current_auc = 1.0
User 116210 AUC after training: 1.0
User 116210 does not improve AUC. Reverting changes.
Training on augumented user 24315 16/50 current_auc = 1.0
User 24315 AUC after training: 1.0
User 24315 does not improve AUC. Reverting changes.
Training on augumented user 91757 17/50 current_auc = 1.0
User 91757 AUC after training: 1.0
User 91757 does not improve AUC. Reverting changes.
Training on augumented user 69595 18/50 current_auc = 1.0
User 69595 AUC after training: 1.0
User 69595 does not improve AUC. Reverting changes.
Training on augumented user 121646 19/50 current_auc = 1.0
User 121646 AUC after training: 1.0
User 121646 does not improve AUC. Reverting changes.
Training on augumented user 127797 20/50 current_auc = 1.0
User 127797 AUC after training: 1.0
User 127797 does not improve AUC. Reverting changes.
Training on augumented user 48168 21/50 current_auc = 1.0
User 48168 AUC after training: 1.0
User 48168 does not improve AUC. Reverting changes.
Training on augumented user 108003 22/50 current_auc = 1.0
User 108003 AUC after training: 1.0
User 108003 does not improve AUC. Reverting changes.
Training on augumented user 23688 23/50 current_auc = 1.0
User 23688 AUC after training: 1.0
User 23688 does not improve AUC. Reverting changes.
Training on augumented user 66713 24/50 current_auc = 1.0
User 66713 AUC after training: 1.0
User 66713 does not improve AUC. Reverting changes.
Training on augumented user 134119 25/50 current_auc = 1.0
User 134119 AUC after training: 1.0
User 134119 does not improve AUC. Reverting changes.
Training on augumented user 21055 26/50 current_auc = 1.0
User 21055 AUC after training: 1.0
User 21055 does not improve AUC. Reverting changes.
Training on augumented user 48945 27/50 current_auc = 1.0
User 48945 AUC after training: 1.0
User 48945 does not improve AUC. Reverting changes.
Training on augumented user 87136 28/50 current_auc = 1.0
User 87136 AUC after training: 1.0
User 87136 does not improve AUC. Reverting changes.
Training on augumented user 45516 29/50 current_auc = 1.0
User 45516 AUC after training: 1.0
User 45516 does not improve AUC. Reverting changes.
Training on augumented user 128873 30/50 current_auc = 1.0
User 128873 AUC after training: 1.0
User 128873 does not improve AUC. Reverting changes.
Training on augumented user 66565 31/50 current_auc = 1.0
User 66565 AUC after training: 1.0
User 66565 does not improve AUC. Reverting changes.
Training on augumented user 113052 32/50 current_auc = 1.0
User 113052 AUC after training: 1.0
User 113052 does not improve AUC. Reverting changes.
Training on augumented user 41231 33/50 current_auc = 1.0
User 41231 AUC after training: 1.0
User 41231 does not improve AUC. Reverting changes.
Training on augumented user 92286 34/50 current_auc = 1.0
User 92286 AUC after training: 1.0
User 92286 does not improve AUC. Reverting changes.
Training on augumented user 37605 35/50 current_auc = 1.0
User 37605 AUC after training: 1.0
User 37605 does not improve AUC. Reverting changes.
Training on augumented user 132810 36/50 current_auc = 1.0
User 132810 AUC after training: 1.0
User 132810 does not improve AUC. Reverting changes.
Training on augumented user 87121 37/50 current_auc = 1.0
User 87121 AUC after training: 1.0
User 87121 does not improve AUC. Reverting changes.
Training on augumented user 36132 38/50 current_auc = 1.0
User 36132 AUC after training: 1.0
User 36132 does not improve AUC. Reverting changes.
Training on augumented user 31811 39/50 current_auc = 1.0
User 31811 AUC after training: 1.0
User 31811 does not improve AUC. Reverting changes.
Training on augumented user 77053 40/50 current_auc = 1.0
User 77053 AUC after training: 1.0
User 77053 does not improve AUC. Reverting changes.
Training on augumented user 7641 41/50 current_auc = 1.0
User 7641 AUC after training: 1.0
User 7641 does not improve AUC. Reverting changes.
Training on augumented user 129300 42/50 current_auc = 1.0
User 129300 AUC after training: 1.0
User 129300 does not improve AUC. Reverting changes.
Training on augumented user 27115 43/50 current_auc = 1.0
User 27115 AUC after training: 1.0
User 27115 does not improve AUC. Reverting changes.
Training on augumented user 43082 44/50 current_auc = 1.0
User 43082 AUC after training: 1.0
User 43082 does not improve AUC. Reverting changes.
Training on augumented user 110352 45/50 current_auc = 1.0
User 110352 AUC after training: 1.0
User 110352 does not improve AUC. Reverting changes.
Training on augumented user 77716 46/50 current_auc = 1.0
User 77716 AUC after training: 1.0
User 77716 does not improve AUC. Reverting changes.
Training on augumented user 111608 47/50 current_auc = 1.0
User 111608 AUC after training: 1.0
User 111608 does not improve AUC. Reverting changes.
Training on augumented user 38751 48/50 current_auc = 1.0
User 38751 AUC after training: 1.0
User 38751 does not improve AUC. Reverting changes.
Training on augumented user 87508 49/50 current_auc = 1.0
User 87508 AUC after training: 1.0
User 87508 does not improve AUC. Reverting changes.
[2024-12-02 19:40:27.552786] start test user 32855 217/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:28.214546] start test user 32855 217/568 recall augumented users by random, augumented_users = [27060, 136359, 47289, 9789, 133615, 100285, 134041, 94872, 136922, 136302, 84160, 68212, 13396, 21166, 43553, 13251, 61770, 71408, 77941, 138482, 125490, 25693, 103470, 92895, 129728, 3920, 96325, 88432, 57966, 136418, 66161, 20507, 99248, 100986, 99042, 132237, 88613, 20374, 62553, 95125, 93051, 102451, 13373, 131137, 46683, 42065, 38913, 80020, 61547, 30600]
[2024-12-02 19:40:28.236411] user = 32855 Cloud 217/568
[2024-12-02 19:40:28.281964] user = 32855 Local 217/568
[2024-12-02 19:40:28.377169] user = 32855 Local+ 217/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:30.547567] user = 32855 MPDA- 217/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7103580562659848
Training on augumented user 27060 0/50 current_auc = 0.7103580562659848
User 27060 AUC after training: 0.7084398976982098
User 27060 does not improve AUC. Reverting changes.
Training on augumented user 136359 1/50 current_auc = 0.7103580562659848
User 136359 AUC after training: 0.7116368286445014
User 136359 improves AUC. Keeping the model.
Training on augumented user 47289 2/50 current_auc = 0.7116368286445014
User 47289 AUC after training: 0.7116368286445014
User 47289 does not improve AUC. Reverting changes.
Training on augumented user 9789 3/50 current_auc = 0.7116368286445014
User 9789 AUC after training: 0.7071611253196931
User 9789 does not improve AUC. Reverting changes.
Training on augumented user 133615 4/50 current_auc = 0.7116368286445014
User 133615 AUC after training: 0.7097186700767263
User 133615 does not improve AUC. Reverting changes.
Training on augumented user 100285 5/50 current_auc = 0.7116368286445014
User 100285 AUC after training: 0.710997442455243
User 100285 does not improve AUC. Reverting changes.
Training on augumented user 134041 6/50 current_auc = 0.7116368286445014
User 134041 AUC after training: 0.710997442455243
User 134041 does not improve AUC. Reverting changes.
Training on augumented user 94872 7/50 current_auc = 0.7116368286445014
User 94872 AUC after training: 0.7122762148337597
User 94872 improves AUC. Keeping the model.
Training on augumented user 136922 8/50 current_auc = 0.7122762148337597
User 136922 AUC after training: 0.7135549872122762
User 136922 improves AUC. Keeping the model.
Training on augumented user 136302 9/50 current_auc = 0.7135549872122762
User 136302 AUC after training: 0.7122762148337596
User 136302 does not improve AUC. Reverting changes.
Training on augumented user 84160 10/50 current_auc = 0.7135549872122762
User 84160 AUC after training: 0.7113171355498721
User 84160 does not improve AUC. Reverting changes.
Training on augumented user 68212 11/50 current_auc = 0.7135549872122762
User 68212 AUC after training: 0.710997442455243
User 68212 does not improve AUC. Reverting changes.
Training on augumented user 13396 12/50 current_auc = 0.7135549872122762
User 13396 AUC after training: 0.710997442455243
User 13396 does not improve AUC. Reverting changes.
Training on augumented user 21166 13/50 current_auc = 0.7135549872122762
User 21166 AUC after training: 0.7122762148337596
User 21166 does not improve AUC. Reverting changes.
Training on augumented user 43553 14/50 current_auc = 0.7135549872122762
User 43553 AUC after training: 0.7122762148337596
User 43553 does not improve AUC. Reverting changes.
Training on augumented user 13251 15/50 current_auc = 0.7135549872122762
User 13251 AUC after training: 0.7103580562659847
User 13251 does not improve AUC. Reverting changes.
Training on augumented user 61770 16/50 current_auc = 0.7135549872122762
User 61770 AUC after training: 0.7138746803069054
User 61770 improves AUC. Keeping the model.
Training on augumented user 71408 17/50 current_auc = 0.7138746803069054
User 71408 AUC after training: 0.712915601023018
User 71408 does not improve AUC. Reverting changes.
Training on augumented user 77941 18/50 current_auc = 0.7138746803069054
User 77941 AUC after training: 0.7138746803069054
User 77941 does not improve AUC. Reverting changes.
Training on augumented user 138482 19/50 current_auc = 0.7138746803069054
User 138482 AUC after training: 0.7125959079283888
User 138482 does not improve AUC. Reverting changes.
Training on augumented user 125490 20/50 current_auc = 0.7138746803069054
User 125490 AUC after training: 0.712915601023018
User 125490 does not improve AUC. Reverting changes.
Training on augumented user 25693 21/50 current_auc = 0.7138746803069054
User 25693 AUC after training: 0.7135549872122762
User 25693 does not improve AUC. Reverting changes.
Training on augumented user 103470 22/50 current_auc = 0.7138746803069054
User 103470 AUC after training: 0.710997442455243
User 103470 does not improve AUC. Reverting changes.
Training on augumented user 92895 23/50 current_auc = 0.7138746803069054
User 92895 AUC after training: 0.7122762148337596
User 92895 does not improve AUC. Reverting changes.
Training on augumented user 129728 24/50 current_auc = 0.7138746803069054
User 129728 AUC after training: 0.7087595907928388
User 129728 does not improve AUC. Reverting changes.
Training on augumented user 3920 25/50 current_auc = 0.7138746803069054
User 3920 AUC after training: 0.7097186700767263
User 3920 does not improve AUC. Reverting changes.
Training on augumented user 96325 26/50 current_auc = 0.7138746803069054
User 96325 AUC after training: 0.7113171355498722
User 96325 does not improve AUC. Reverting changes.
Training on augumented user 88432 27/50 current_auc = 0.7138746803069054
User 88432 AUC after training: 0.713235294117647
User 88432 does not improve AUC. Reverting changes.
Training on augumented user 57966 28/50 current_auc = 0.7138746803069054
User 57966 AUC after training: 0.7103580562659847
User 57966 does not improve AUC. Reverting changes.
Training on augumented user 136418 29/50 current_auc = 0.7138746803069054
User 136418 AUC after training: 0.7119565217391304
User 136418 does not improve AUC. Reverting changes.
Training on augumented user 66161 30/50 current_auc = 0.7138746803069054
User 66161 AUC after training: 0.7132352941176471
User 66161 does not improve AUC. Reverting changes.
Training on augumented user 20507 31/50 current_auc = 0.7138746803069054
User 20507 AUC after training: 0.7138746803069054
User 20507 does not improve AUC. Reverting changes.
Training on augumented user 99248 32/50 current_auc = 0.7138746803069054
User 99248 AUC after training: 0.7090792838874681
User 99248 does not improve AUC. Reverting changes.
Training on augumented user 100986 33/50 current_auc = 0.7138746803069054
User 100986 AUC after training: 0.7087595907928388
User 100986 does not improve AUC. Reverting changes.
Training on augumented user 99042 34/50 current_auc = 0.7138746803069054
User 99042 AUC after training: 0.7113171355498721
User 99042 does not improve AUC. Reverting changes.
Training on augumented user 132237 35/50 current_auc = 0.7138746803069054
User 132237 AUC after training: 0.7103580562659846
User 132237 does not improve AUC. Reverting changes.
Training on augumented user 88613 36/50 current_auc = 0.7138746803069054
User 88613 AUC after training: 0.7125959079283888
User 88613 does not improve AUC. Reverting changes.
Training on augumented user 20374 37/50 current_auc = 0.7138746803069054
User 20374 AUC after training: 0.7103580562659846
User 20374 does not improve AUC. Reverting changes.
Training on augumented user 62553 38/50 current_auc = 0.7138746803069054
User 62553 AUC after training: 0.7125959079283887
User 62553 does not improve AUC. Reverting changes.
Training on augumented user 95125 39/50 current_auc = 0.7138746803069054
User 95125 AUC after training: 0.713235294117647
User 95125 does not improve AUC. Reverting changes.
Training on augumented user 93051 40/50 current_auc = 0.7138746803069054
User 93051 AUC after training: 0.712915601023018
User 93051 does not improve AUC. Reverting changes.
Training on augumented user 102451 41/50 current_auc = 0.7138746803069054
User 102451 AUC after training: 0.7119565217391304
User 102451 does not improve AUC. Reverting changes.
Training on augumented user 13373 42/50 current_auc = 0.7138746803069054
User 13373 AUC after training: 0.7122762148337596
User 13373 does not improve AUC. Reverting changes.
Training on augumented user 131137 43/50 current_auc = 0.7138746803069054
User 131137 AUC after training: 0.7100383631713556
User 131137 does not improve AUC. Reverting changes.
Training on augumented user 46683 44/50 current_auc = 0.7138746803069054
User 46683 AUC after training: 0.7135549872122762
User 46683 does not improve AUC. Reverting changes.
Training on augumented user 42065 45/50 current_auc = 0.7138746803069054
User 42065 AUC after training: 0.7113171355498721
User 42065 does not improve AUC. Reverting changes.
Training on augumented user 38913 46/50 current_auc = 0.7138746803069054
User 38913 AUC after training: 0.7132352941176471
User 38913 does not improve AUC. Reverting changes.
Training on augumented user 80020 47/50 current_auc = 0.7138746803069054
User 80020 AUC after training: 0.7116368286445013
User 80020 does not improve AUC. Reverting changes.
Training on augumented user 61547 48/50 current_auc = 0.7138746803069054
User 61547 AUC after training: 0.7119565217391304
User 61547 does not improve AUC. Reverting changes.
Training on augumented user 30600 49/50 current_auc = 0.7138746803069054
User 30600 AUC after training: 0.709079283887468
User 30600 does not improve AUC. Reverting changes.
[2024-12-02 19:41:01.848885] start test user 32899 218/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:02.263630] start test user 32899 218/568 recall augumented users by random, augumented_users = [90660, 90528, 1647, 45863, 30581, 80678, 3540, 35382, 129943, 25662, 347, 125568, 33816, 119423, 99212, 82497, 34568, 42301, 32182, 50193, 59097, 72219, 18856, 104289, 134470, 74493, 76130, 10991, 107330, 55091, 18291, 113366, 136903, 98597, 64672, 100443, 133532, 88223, 108271, 36814, 121695, 59743, 25811, 100537, 80838, 11402, 130797, 111597, 2858, 38334]
[2024-12-02 19:41:02.279398] user = 32899 Cloud 218/568
[2024-12-02 19:41:02.301441] user = 32899 Local 218/568
[2024-12-02 19:41:02.404592] user = 32899 Local+ 218/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:05.207260] user = 32899 MPDA- 218/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5998056220095693
Training on augumented user 90660 0/50 current_auc = 0.5998056220095693
User 90660 AUC after training: 0.5992075358851674
User 90660 does not improve AUC. Reverting changes.
Training on augumented user 90528 1/50 current_auc = 0.5998056220095693
User 90528 AUC after training: 0.5989832535885168
User 90528 does not improve AUC. Reverting changes.
Training on augumented user 1647 2/50 current_auc = 0.5998056220095693
User 1647 AUC after training: 0.600627990430622
User 1647 improves AUC. Keeping the model.
Training on augumented user 45863 3/50 current_auc = 0.600627990430622
User 45863 AUC after training: 0.6007027511961722
User 45863 improves AUC. Keeping the model.
Training on augumented user 30581 4/50 current_auc = 0.6007027511961722
User 30581 AUC after training: 0.6001794258373206
User 30581 does not improve AUC. Reverting changes.
Training on augumented user 80678 5/50 current_auc = 0.6007027511961722
User 80678 AUC after training: 0.6011513157894737
User 80678 improves AUC. Keeping the model.
Training on augumented user 3540 6/50 current_auc = 0.6011513157894737
User 3540 AUC after training: 0.6032446172248804
User 3540 improves AUC. Keeping the model.
Training on augumented user 35382 7/50 current_auc = 0.6032446172248804
User 35382 AUC after training: 0.6037305622009569
User 35382 improves AUC. Keeping the model.
Training on augumented user 129943 8/50 current_auc = 0.6037305622009569
User 129943 AUC after training: 0.6044407894736842
User 129943 improves AUC. Keeping the model.
Training on augumented user 25662 9/50 current_auc = 0.6044407894736842
User 25662 AUC after training: 0.6027960526315789
User 25662 does not improve AUC. Reverting changes.
Training on augumented user 347 10/50 current_auc = 0.6044407894736842
User 347 AUC after training: 0.6036184210526316
User 347 does not improve AUC. Reverting changes.
Training on augumented user 125568 11/50 current_auc = 0.6044407894736842
User 125568 AUC after training: 0.6048893540669856
User 125568 improves AUC. Keeping the model.
Training on augumented user 33816 12/50 current_auc = 0.6048893540669856
User 33816 AUC after training: 0.6039174641148325
User 33816 does not improve AUC. Reverting changes.
Training on augumented user 119423 13/50 current_auc = 0.6048893540669856
User 119423 AUC after training: 0.602796052631579
User 119423 does not improve AUC. Reverting changes.
Training on augumented user 99212 14/50 current_auc = 0.6048893540669856
User 99212 AUC after training: 0.6028708133971292
User 99212 does not improve AUC. Reverting changes.
Training on augumented user 82497 15/50 current_auc = 0.6048893540669856
User 82497 AUC after training: 0.6044407894736842
User 82497 does not improve AUC. Reverting changes.
Training on augumented user 34568 16/50 current_auc = 0.6048893540669856
User 34568 AUC after training: 0.6044407894736842
User 34568 does not improve AUC. Reverting changes.
Training on augumented user 42301 17/50 current_auc = 0.6048893540669856
User 42301 AUC after training: 0.6049641148325359
User 42301 improves AUC. Keeping the model.
Training on augumented user 32182 18/50 current_auc = 0.6049641148325359
User 32182 AUC after training: 0.6039174641148325
User 32182 does not improve AUC. Reverting changes.
Training on augumented user 50193 19/50 current_auc = 0.6049641148325359
User 50193 AUC after training: 0.6046650717703349
User 50193 does not improve AUC. Reverting changes.
Training on augumented user 59097 20/50 current_auc = 0.6049641148325359
User 59097 AUC after training: 0.6015998803827751
User 59097 does not improve AUC. Reverting changes.
Training on augumented user 72219 21/50 current_auc = 0.6049641148325359
User 72219 AUC after training: 0.6045155502392344
User 72219 does not improve AUC. Reverting changes.
Training on augumented user 18856 22/50 current_auc = 0.6049641148325359
User 18856 AUC after training: 0.6054126794258373
User 18856 improves AUC. Keeping the model.
Training on augumented user 104289 23/50 current_auc = 0.6054126794258373
User 104289 AUC after training: 0.6044407894736842
User 104289 does not improve AUC. Reverting changes.
Training on augumented user 134470 24/50 current_auc = 0.6054126794258373
User 134470 AUC after training: 0.6055622009569379
User 134470 improves AUC. Keeping the model.
Training on augumented user 74493 25/50 current_auc = 0.6055622009569379
User 74493 AUC after training: 0.6043660287081339
User 74493 does not improve AUC. Reverting changes.
Training on augumented user 76130 26/50 current_auc = 0.6055622009569379
User 76130 AUC after training: 0.6027960526315789
User 76130 does not improve AUC. Reverting changes.
Training on augumented user 10991 27/50 current_auc = 0.6055622009569379
User 10991 AUC after training: 0.6057117224880383
User 10991 improves AUC. Keeping the model.
Training on augumented user 107330 28/50 current_auc = 0.6057117224880383
User 107330 AUC after training: 0.604665071770335
User 107330 does not improve AUC. Reverting changes.
Training on augumented user 55091 29/50 current_auc = 0.6057117224880383
User 55091 AUC after training: 0.605936004784689
User 55091 improves AUC. Keeping the model.
Training on augumented user 18291 30/50 current_auc = 0.605936004784689
User 18291 AUC after training: 0.6063098086124402
User 18291 improves AUC. Keeping the model.
Training on augumented user 113366 31/50 current_auc = 0.6063098086124402
User 113366 AUC after training: 0.605936004784689
User 113366 does not improve AUC. Reverting changes.
Training on augumented user 136903 32/50 current_auc = 0.6063098086124402
User 136903 AUC after training: 0.603767942583732
User 136903 does not improve AUC. Reverting changes.
Training on augumented user 98597 33/50 current_auc = 0.6063098086124402
User 98597 AUC after training: 0.6057117224880383
User 98597 does not improve AUC. Reverting changes.
Training on augumented user 64672 34/50 current_auc = 0.6063098086124402
User 64672 AUC after training: 0.6058612440191388
User 64672 does not improve AUC. Reverting changes.
Training on augumented user 100443 35/50 current_auc = 0.6063098086124402
User 100443 AUC after training: 0.6036184210526316
User 100443 does not improve AUC. Reverting changes.
Training on augumented user 133532 36/50 current_auc = 0.6063098086124402
User 133532 AUC after training: 0.6051883971291865
User 133532 does not improve AUC. Reverting changes.
Training on augumented user 88223 37/50 current_auc = 0.6063098086124402
User 88223 AUC after training: 0.6035062799043063
User 88223 does not improve AUC. Reverting changes.
Training on augumented user 108271 38/50 current_auc = 0.6063098086124402
User 108271 AUC after training: 0.6054126794258373
User 108271 does not improve AUC. Reverting changes.
Training on augumented user 36814 39/50 current_auc = 0.6063098086124402
User 36814 AUC after training: 0.6069078947368421
User 36814 improves AUC. Keeping the model.
Training on augumented user 121695 40/50 current_auc = 0.6069078947368421
User 121695 AUC after training: 0.6054126794258372
User 121695 does not improve AUC. Reverting changes.
Training on augumented user 59743 41/50 current_auc = 0.6069078947368421
User 59743 AUC after training: 0.6054126794258373
User 59743 does not improve AUC. Reverting changes.
Training on augumented user 25811 42/50 current_auc = 0.6069078947368421
User 25811 AUC after training: 0.6056369617224879
User 25811 does not improve AUC. Reverting changes.
Training on augumented user 100537 43/50 current_auc = 0.6069078947368421
User 100537 AUC after training: 0.604066985645933
User 100537 does not improve AUC. Reverting changes.
Training on augumented user 80838 44/50 current_auc = 0.6069078947368421
User 80838 AUC after training: 0.6075807416267942
User 80838 improves AUC. Keeping the model.
Training on augumented user 11402 45/50 current_auc = 0.6075807416267942
User 11402 AUC after training: 0.6068331339712919
User 11402 does not improve AUC. Reverting changes.
Training on augumented user 130797 46/50 current_auc = 0.6075807416267942
User 130797 AUC after training: 0.6085526315789473
User 130797 improves AUC. Keeping the model.
Training on augumented user 111597 47/50 current_auc = 0.6085526315789473
User 111597 AUC after training: 0.6042165071770335
User 111597 does not improve AUC. Reverting changes.
Training on augumented user 2858 48/50 current_auc = 0.6085526315789473
User 2858 AUC after training: 0.607505980861244
User 2858 does not improve AUC. Reverting changes.
Training on augumented user 38334 49/50 current_auc = 0.6085526315789473
User 38334 AUC after training: 0.6072816985645932
User 38334 does not improve AUC. Reverting changes.
[2024-12-02 19:41:40.300504] start test user 32935 219/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:41.191197] start test user 32935 219/568 recall augumented users by random, augumented_users = [25806, 38641, 112797, 79521, 113451, 123883, 51331, 24490, 41892, 66499, 22732, 5297, 58551, 95144, 95707, 72597, 101754, 120002, 39282, 87741, 56386, 106329, 2000, 62948, 125332, 100825, 126471, 99069, 42796, 81785, 81400, 25026, 72019, 49711, 77936, 90083, 120296, 102794, 124691, 35724, 88994, 119154, 95772, 71745, 94870, 101529, 128392, 121158, 20027, 11152]
[2024-12-02 19:41:41.209486] user = 32935 Cloud 219/568
[2024-12-02 19:41:41.255776] user = 32935 Local 219/568
[2024-12-02 19:41:41.389501] user = 32935 Local+ 219/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:44.225122] user = 32935 MPDA- 219/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9032656663724625
Training on augumented user 25806 0/50 current_auc = 0.9032656663724625
User 25806 AUC after training: 0.9036187113857016
User 25806 improves AUC. Keeping the model.
Training on augumented user 38641 1/50 current_auc = 0.9036187113857016
User 38641 AUC after training: 0.9037069726390116
User 38641 improves AUC. Keeping the model.
Training on augumented user 112797 2/50 current_auc = 0.9037069726390116
User 112797 AUC after training: 0.9034421888790821
User 112797 does not improve AUC. Reverting changes.
Training on augumented user 79521 3/50 current_auc = 0.9037069726390116
User 79521 AUC after training: 0.9036187113857017
User 79521 does not improve AUC. Reverting changes.
Training on augumented user 113451 4/50 current_auc = 0.9037069726390116
User 113451 AUC after training: 0.9030891438658429
User 113451 does not improve AUC. Reverting changes.
Training on augumented user 123883 5/50 current_auc = 0.9037069726390116
User 123883 AUC after training: 0.9037069726390116
User 123883 does not improve AUC. Reverting changes.
Training on augumented user 51331 6/50 current_auc = 0.9037069726390116
User 51331 AUC after training: 0.9031774051191527
User 51331 does not improve AUC. Reverting changes.
Training on augumented user 24490 7/50 current_auc = 0.9037069726390116
User 24490 AUC after training: 0.9033539276257723
User 24490 does not improve AUC. Reverting changes.
Training on augumented user 41892 8/50 current_auc = 0.9037069726390116
User 41892 AUC after training: 0.9037069726390116
User 41892 does not improve AUC. Reverting changes.
Training on augumented user 66499 9/50 current_auc = 0.9037069726390116
User 66499 AUC after training: 0.9034421888790821
User 66499 does not improve AUC. Reverting changes.
Training on augumented user 22732 10/50 current_auc = 0.9037069726390116
User 22732 AUC after training: 0.9032656663724625
User 22732 does not improve AUC. Reverting changes.
Training on augumented user 5297 11/50 current_auc = 0.9037069726390116
User 5297 AUC after training: 0.9034421888790821
User 5297 does not improve AUC. Reverting changes.
Training on augumented user 58551 12/50 current_auc = 0.9037069726390116
User 58551 AUC after training: 0.9034421888790821
User 58551 does not improve AUC. Reverting changes.
Training on augumented user 95144 13/50 current_auc = 0.9037069726390116
User 95144 AUC after training: 0.9035304501323919
User 95144 does not improve AUC. Reverting changes.
Training on augumented user 95707 14/50 current_auc = 0.9037069726390116
User 95707 AUC after training: 0.9037952338923213
User 95707 improves AUC. Keeping the model.
Training on augumented user 72597 15/50 current_auc = 0.9037952338923213
User 72597 AUC after training: 0.9032656663724625
User 72597 does not improve AUC. Reverting changes.
Training on augumented user 101754 16/50 current_auc = 0.9037952338923213
User 101754 AUC after training: 0.9035304501323919
User 101754 does not improve AUC. Reverting changes.
Training on augumented user 120002 17/50 current_auc = 0.9037952338923213
User 120002 AUC after training: 0.9037069726390115
User 120002 does not improve AUC. Reverting changes.
Training on augumented user 39282 18/50 current_auc = 0.9037952338923213
User 39282 AUC after training: 0.9036187113857016
User 39282 does not improve AUC. Reverting changes.
Training on augumented user 87741 19/50 current_auc = 0.9037952338923213
User 87741 AUC after training: 0.903883495145631
User 87741 improves AUC. Keeping the model.
Training on augumented user 56386 20/50 current_auc = 0.903883495145631
User 56386 AUC after training: 0.9032656663724626
User 56386 does not improve AUC. Reverting changes.
Training on augumented user 106329 21/50 current_auc = 0.903883495145631
User 106329 AUC after training: 0.9037952338923213
User 106329 does not improve AUC. Reverting changes.
Training on augumented user 2000 22/50 current_auc = 0.903883495145631
User 2000 AUC after training: 0.9035304501323921
User 2000 does not improve AUC. Reverting changes.
Training on augumented user 62948 23/50 current_auc = 0.903883495145631
User 62948 AUC after training: 0.9030008826125332
User 62948 does not improve AUC. Reverting changes.
Training on augumented user 125332 24/50 current_auc = 0.903883495145631
User 125332 AUC after training: 0.9034421888790821
User 125332 does not improve AUC. Reverting changes.
Training on augumented user 100825 25/50 current_auc = 0.903883495145631
User 100825 AUC after training: 0.9031774051191527
User 100825 does not improve AUC. Reverting changes.
Training on augumented user 126471 26/50 current_auc = 0.903883495145631
User 126471 AUC after training: 0.9029126213592233
User 126471 does not improve AUC. Reverting changes.
Training on augumented user 99069 27/50 current_auc = 0.903883495145631
User 99069 AUC after training: 0.903883495145631
User 99069 does not improve AUC. Reverting changes.
Training on augumented user 42796 28/50 current_auc = 0.903883495145631
User 42796 AUC after training: 0.903883495145631
User 42796 does not improve AUC. Reverting changes.
Training on augumented user 81785 29/50 current_auc = 0.903883495145631
User 81785 AUC after training: 0.9035304501323919
User 81785 does not improve AUC. Reverting changes.
Training on augumented user 81400 30/50 current_auc = 0.903883495145631
User 81400 AUC after training: 0.9037069726390116
User 81400 does not improve AUC. Reverting changes.
Training on augumented user 25026 31/50 current_auc = 0.903883495145631
User 25026 AUC after training: 0.9037952338923213
User 25026 does not improve AUC. Reverting changes.
Training on augumented user 72019 32/50 current_auc = 0.903883495145631
User 72019 AUC after training: 0.9036187113857017
User 72019 does not improve AUC. Reverting changes.
Training on augumented user 49711 33/50 current_auc = 0.903883495145631
User 49711 AUC after training: 0.9040600176522507
User 49711 improves AUC. Keeping the model.
Training on augumented user 77936 34/50 current_auc = 0.9040600176522507
User 77936 AUC after training: 0.9043248014121801
User 77936 improves AUC. Keeping the model.
Training on augumented user 90083 35/50 current_auc = 0.9043248014121801
User 90083 AUC after training: 0.9041482789055605
User 90083 does not improve AUC. Reverting changes.
Training on augumented user 120296 36/50 current_auc = 0.9043248014121801
User 120296 AUC after training: 0.9041482789055605
User 120296 does not improve AUC. Reverting changes.
Training on augumented user 102794 37/50 current_auc = 0.9043248014121801
User 102794 AUC after training: 0.9039717563989409
User 102794 does not improve AUC. Reverting changes.
Training on augumented user 124691 38/50 current_auc = 0.9043248014121801
User 124691 AUC after training: 0.9041482789055605
User 124691 does not improve AUC. Reverting changes.
Training on augumented user 35724 39/50 current_auc = 0.9043248014121801
User 35724 AUC after training: 0.9040600176522507
User 35724 does not improve AUC. Reverting changes.
Training on augumented user 88994 40/50 current_auc = 0.9043248014121801
User 88994 AUC after training: 0.9044130626654899
User 88994 improves AUC. Keeping the model.
Training on augumented user 119154 41/50 current_auc = 0.9044130626654899
User 119154 AUC after training: 0.9039717563989409
User 119154 does not improve AUC. Reverting changes.
Training on augumented user 95772 42/50 current_auc = 0.9044130626654899
User 95772 AUC after training: 0.9041482789055605
User 95772 does not improve AUC. Reverting changes.
Training on augumented user 71745 43/50 current_auc = 0.9044130626654899
User 71745 AUC after training: 0.9043248014121801
User 71745 does not improve AUC. Reverting changes.
Training on augumented user 94870 44/50 current_auc = 0.9044130626654899
User 94870 AUC after training: 0.9033539276257724
User 94870 does not improve AUC. Reverting changes.
Training on augumented user 101529 45/50 current_auc = 0.9044130626654899
User 101529 AUC after training: 0.9040600176522507
User 101529 does not improve AUC. Reverting changes.
Training on augumented user 128392 46/50 current_auc = 0.9044130626654899
User 128392 AUC after training: 0.9042365401588702
User 128392 does not improve AUC. Reverting changes.
Training on augumented user 121158 47/50 current_auc = 0.9044130626654899
User 121158 AUC after training: 0.9032656663724625
User 121158 does not improve AUC. Reverting changes.
Training on augumented user 20027 48/50 current_auc = 0.9044130626654899
User 20027 AUC after training: 0.9040600176522507
User 20027 does not improve AUC. Reverting changes.
Training on augumented user 11152 49/50 current_auc = 0.9044130626654899
User 11152 AUC after training: 0.9025595763459842
User 11152 does not improve AUC. Reverting changes.
[2024-12-02 19:42:13.149573] start test user 32982 220/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:13.929802] start test user 32982 220/568 recall augumented users by random, augumented_users = [64697, 91159, 71177, 27872, 85087, 51464, 73444, 28751, 9318, 51055, 9115, 7311, 15252, 125121, 104272, 40455, 117721, 106794, 8831, 95091, 6037, 136555, 98876, 87347, 91797, 131073, 27460, 120379, 122434, 94549, 53239, 122966, 94128, 41086, 114820, 66735, 97552, 61009, 126735, 67731, 10117, 66314, 3317, 29499, 125282, 42513, 10035, 93889, 28526, 44979]
[2024-12-02 19:42:13.945212] user = 32982 Cloud 220/568
[2024-12-02 19:42:13.954836] user = 32982 Local 220/568
[2024-12-02 19:42:14.047547] user = 32982 Local+ 220/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:16.802162] user = 32982 MPDA- 220/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8333333333333334
Training on augumented user 64697 0/50 current_auc = 0.8333333333333334
User 64697 AUC after training: 0.8333333333333334
User 64697 does not improve AUC. Reverting changes.
Training on augumented user 91159 1/50 current_auc = 0.8333333333333334
User 91159 AUC after training: 0.8333333333333334
User 91159 does not improve AUC. Reverting changes.
Training on augumented user 71177 2/50 current_auc = 0.8333333333333334
User 71177 AUC after training: 0.8333333333333334
User 71177 does not improve AUC. Reverting changes.
Training on augumented user 27872 3/50 current_auc = 0.8333333333333334
User 27872 AUC after training: 0.8333333333333334
User 27872 does not improve AUC. Reverting changes.
Training on augumented user 85087 4/50 current_auc = 0.8333333333333334
User 85087 AUC after training: 0.8333333333333334
User 85087 does not improve AUC. Reverting changes.
Training on augumented user 51464 5/50 current_auc = 0.8333333333333334
User 51464 AUC after training: 0.8333333333333334
User 51464 does not improve AUC. Reverting changes.
Training on augumented user 73444 6/50 current_auc = 0.8333333333333334
User 73444 AUC after training: 0.8333333333333334
User 73444 does not improve AUC. Reverting changes.
Training on augumented user 28751 7/50 current_auc = 0.8333333333333334
User 28751 AUC after training: 0.8333333333333334
User 28751 does not improve AUC. Reverting changes.
Training on augumented user 9318 8/50 current_auc = 0.8333333333333334
User 9318 AUC after training: 0.8333333333333334
User 9318 does not improve AUC. Reverting changes.
Training on augumented user 51055 9/50 current_auc = 0.8333333333333334
User 51055 AUC after training: 0.8333333333333334
User 51055 does not improve AUC. Reverting changes.
Training on augumented user 9115 10/50 current_auc = 0.8333333333333334
User 9115 AUC after training: 0.8333333333333334
User 9115 does not improve AUC. Reverting changes.
Training on augumented user 7311 11/50 current_auc = 0.8333333333333334
User 7311 AUC after training: 0.8333333333333334
User 7311 does not improve AUC. Reverting changes.
Training on augumented user 15252 12/50 current_auc = 0.8333333333333334
User 15252 AUC after training: 0.8333333333333334
User 15252 does not improve AUC. Reverting changes.
Training on augumented user 125121 13/50 current_auc = 0.8333333333333334
User 125121 AUC after training: 0.8333333333333334
User 125121 does not improve AUC. Reverting changes.
Training on augumented user 104272 14/50 current_auc = 0.8333333333333334
User 104272 AUC after training: 0.8333333333333334
User 104272 does not improve AUC. Reverting changes.
Training on augumented user 40455 15/50 current_auc = 0.8333333333333334
User 40455 AUC after training: 0.8333333333333334
User 40455 does not improve AUC. Reverting changes.
Training on augumented user 117721 16/50 current_auc = 0.8333333333333334
User 117721 AUC after training: 0.8333333333333334
User 117721 does not improve AUC. Reverting changes.
Training on augumented user 106794 17/50 current_auc = 0.8333333333333334
User 106794 AUC after training: 0.8333333333333334
User 106794 does not improve AUC. Reverting changes.
Training on augumented user 8831 18/50 current_auc = 0.8333333333333334
User 8831 AUC after training: 0.8333333333333334
User 8831 does not improve AUC. Reverting changes.
Training on augumented user 95091 19/50 current_auc = 0.8333333333333334
User 95091 AUC after training: 0.8333333333333334
User 95091 does not improve AUC. Reverting changes.
Training on augumented user 6037 20/50 current_auc = 0.8333333333333334
User 6037 AUC after training: 0.8333333333333334
User 6037 does not improve AUC. Reverting changes.
Training on augumented user 136555 21/50 current_auc = 0.8333333333333334
User 136555 AUC after training: 0.8333333333333334
User 136555 does not improve AUC. Reverting changes.
Training on augumented user 98876 22/50 current_auc = 0.8333333333333334
User 98876 AUC after training: 0.8333333333333334
User 98876 does not improve AUC. Reverting changes.
Training on augumented user 87347 23/50 current_auc = 0.8333333333333334
User 87347 AUC after training: 0.8333333333333334
User 87347 does not improve AUC. Reverting changes.
Training on augumented user 91797 24/50 current_auc = 0.8333333333333334
User 91797 AUC after training: 0.8333333333333334
User 91797 does not improve AUC. Reverting changes.
Training on augumented user 131073 25/50 current_auc = 0.8333333333333334
User 131073 AUC after training: 0.8333333333333334
User 131073 does not improve AUC. Reverting changes.
Training on augumented user 27460 26/50 current_auc = 0.8333333333333334
User 27460 AUC after training: 0.8333333333333334
User 27460 does not improve AUC. Reverting changes.
Training on augumented user 120379 27/50 current_auc = 0.8333333333333334
User 120379 AUC after training: 0.8333333333333334
User 120379 does not improve AUC. Reverting changes.
Training on augumented user 122434 28/50 current_auc = 0.8333333333333334
User 122434 AUC after training: 0.8333333333333334
User 122434 does not improve AUC. Reverting changes.
Training on augumented user 94549 29/50 current_auc = 0.8333333333333334
User 94549 AUC after training: 0.8333333333333334
User 94549 does not improve AUC. Reverting changes.
Training on augumented user 53239 30/50 current_auc = 0.8333333333333334
User 53239 AUC after training: 0.8333333333333334
User 53239 does not improve AUC. Reverting changes.
Training on augumented user 122966 31/50 current_auc = 0.8333333333333334
User 122966 AUC after training: 0.8333333333333334
User 122966 does not improve AUC. Reverting changes.
Training on augumented user 94128 32/50 current_auc = 0.8333333333333334
User 94128 AUC after training: 0.8333333333333334
User 94128 does not improve AUC. Reverting changes.
Training on augumented user 41086 33/50 current_auc = 0.8333333333333334
User 41086 AUC after training: 0.8333333333333334
User 41086 does not improve AUC. Reverting changes.
Training on augumented user 114820 34/50 current_auc = 0.8333333333333334
User 114820 AUC after training: 0.8333333333333334
User 114820 does not improve AUC. Reverting changes.
Training on augumented user 66735 35/50 current_auc = 0.8333333333333334
User 66735 AUC after training: 0.8333333333333334
User 66735 does not improve AUC. Reverting changes.
Training on augumented user 97552 36/50 current_auc = 0.8333333333333334
User 97552 AUC after training: 0.8333333333333334
User 97552 does not improve AUC. Reverting changes.
Training on augumented user 61009 37/50 current_auc = 0.8333333333333334
User 61009 AUC after training: 0.8333333333333334
User 61009 does not improve AUC. Reverting changes.
Training on augumented user 126735 38/50 current_auc = 0.8333333333333334
User 126735 AUC after training: 0.8333333333333334
User 126735 does not improve AUC. Reverting changes.
Training on augumented user 67731 39/50 current_auc = 0.8333333333333334
User 67731 AUC after training: 0.8333333333333334
User 67731 does not improve AUC. Reverting changes.
Training on augumented user 10117 40/50 current_auc = 0.8333333333333334
User 10117 AUC after training: 0.8333333333333334
User 10117 does not improve AUC. Reverting changes.
Training on augumented user 66314 41/50 current_auc = 0.8333333333333334
User 66314 AUC after training: 0.8333333333333334
User 66314 does not improve AUC. Reverting changes.
Training on augumented user 3317 42/50 current_auc = 0.8333333333333334
User 3317 AUC after training: 0.8333333333333334
User 3317 does not improve AUC. Reverting changes.
Training on augumented user 29499 43/50 current_auc = 0.8333333333333334
User 29499 AUC after training: 0.8333333333333334
User 29499 does not improve AUC. Reverting changes.
Training on augumented user 125282 44/50 current_auc = 0.8333333333333334
User 125282 AUC after training: 0.8333333333333334
User 125282 does not improve AUC. Reverting changes.
Training on augumented user 42513 45/50 current_auc = 0.8333333333333334
User 42513 AUC after training: 0.8333333333333334
User 42513 does not improve AUC. Reverting changes.
Training on augumented user 10035 46/50 current_auc = 0.8333333333333334
User 10035 AUC after training: 0.8333333333333334
User 10035 does not improve AUC. Reverting changes.
Training on augumented user 93889 47/50 current_auc = 0.8333333333333334
User 93889 AUC after training: 0.8333333333333334
User 93889 does not improve AUC. Reverting changes.
Training on augumented user 28526 48/50 current_auc = 0.8333333333333334
User 28526 AUC after training: 0.8333333333333334
User 28526 does not improve AUC. Reverting changes.
Training on augumented user 44979 49/50 current_auc = 0.8333333333333334
User 44979 AUC after training: 0.8333333333333334
User 44979 does not improve AUC. Reverting changes.
[2024-12-02 19:42:43.702390] start test user 32984 221/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:44.390804] start test user 32984 221/568 recall augumented users by random, augumented_users = [9012, 45222, 39977, 133465, 15058, 96724, 111031, 27998, 37016, 9264, 124817, 78139, 94831, 95086, 18464, 40703, 68737, 11381, 83601, 127133, 57465, 101016, 72151, 96783, 60952, 45550, 93126, 2712, 447, 91049, 89565, 81709, 130869, 65363, 66519, 68564, 27750, 122579, 107197, 66490, 113687, 82914, 12263, 126397, 57952, 60905, 59159, 80901, 126476, 62153]
[2024-12-02 19:42:44.414621] user = 32984 Cloud 221/568
[2024-12-02 19:42:44.477982] user = 32984 Local 221/568
[2024-12-02 19:42:44.736276] user = 32984 Local+ 221/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:46.698230] user = 32984 MPDA- 221/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6327353616532722
Training on augumented user 9012 0/50 current_auc = 0.6327353616532722
User 9012 AUC after training: 0.6330223880597015
User 9012 improves AUC. Keeping the model.
Training on augumented user 45222 1/50 current_auc = 0.6330223880597015
User 45222 AUC after training: 0.6330941446613089
User 45222 improves AUC. Keeping the model.
Training on augumented user 39977 2/50 current_auc = 0.6330941446613089
User 39977 AUC after training: 0.6328788748564869
User 39977 does not improve AUC. Reverting changes.
Training on augumented user 133465 3/50 current_auc = 0.6330941446613089
User 133465 AUC after training: 0.6329649827784156
User 133465 does not improve AUC. Reverting changes.
Training on augumented user 15058 4/50 current_auc = 0.6330941446613089
User 15058 AUC after training: 0.6337543053960965
User 15058 improves AUC. Keeping the model.
Training on augumented user 96724 5/50 current_auc = 0.6337543053960965
User 96724 AUC after training: 0.6338547646383468
User 96724 improves AUC. Keeping the model.
Training on augumented user 111031 6/50 current_auc = 0.6338547646383468
User 111031 AUC after training: 0.6330797933409873
User 111031 does not improve AUC. Reverting changes.
Training on augumented user 27998 7/50 current_auc = 0.6338547646383468
User 27998 AUC after training: 0.6342278989667048
User 27998 improves AUC. Keeping the model.
Training on augumented user 37016 8/50 current_auc = 0.6342278989667048
User 37016 AUC after training: 0.6343140068886337
User 37016 improves AUC. Keeping the model.
Training on augumented user 9264 9/50 current_auc = 0.6343140068886337
User 9264 AUC after training: 0.6338978185993112
User 9264 does not improve AUC. Reverting changes.
Training on augumented user 124817 10/50 current_auc = 0.6343140068886337
User 124817 AUC after training: 0.6344862227324914
User 124817 improves AUC. Keeping the model.
Training on augumented user 78139 11/50 current_auc = 0.6344862227324914
User 78139 AUC after training: 0.6345149253731344
User 78139 improves AUC. Keeping the model.
Training on augumented user 94831 12/50 current_auc = 0.6345149253731344
User 94831 AUC after training: 0.6348306544202067
User 94831 improves AUC. Keeping the model.
Training on augumented user 95086 13/50 current_auc = 0.6348306544202067
User 95086 AUC after training: 0.634715843857635
User 95086 does not improve AUC. Reverting changes.
Training on augumented user 18464 14/50 current_auc = 0.6348306544202067
User 18464 AUC after training: 0.634715843857635
User 18464 does not improve AUC. Reverting changes.
Training on augumented user 40703 15/50 current_auc = 0.6348306544202067
User 40703 AUC after training: 0.634931113662457
User 40703 improves AUC. Keeping the model.
Training on augumented user 68737 16/50 current_auc = 0.634931113662457
User 68737 AUC after training: 0.6351607347876005
User 68737 improves AUC. Keeping the model.
Training on augumented user 11381 17/50 current_auc = 0.6351607347876005
User 11381 AUC after training: 0.6355912743972446
User 11381 improves AUC. Keeping the model.
Training on augumented user 83601 18/50 current_auc = 0.6355912743972446
User 83601 AUC after training: 0.6355482204362802
User 83601 does not improve AUC. Reverting changes.
Training on augumented user 127133 19/50 current_auc = 0.6355912743972446
User 127133 AUC after training: 0.635203788748565
User 127133 does not improve AUC. Reverting changes.
Training on augumented user 57465 20/50 current_auc = 0.6355912743972446
User 57465 AUC after training: 0.6351607347876005
User 57465 does not improve AUC. Reverting changes.
Training on augumented user 101016 21/50 current_auc = 0.6355912743972446
User 101016 AUC after training: 0.6354047072330654
User 101016 does not improve AUC. Reverting changes.
Training on augumented user 72151 22/50 current_auc = 0.6355912743972446
User 72151 AUC after training: 0.6352181400688863
User 72151 does not improve AUC. Reverting changes.
Training on augumented user 96783 23/50 current_auc = 0.6355912743972446
User 96783 AUC after training: 0.6355912743972446
User 96783 does not improve AUC. Reverting changes.
Training on augumented user 60952 24/50 current_auc = 0.6355912743972446
User 60952 AUC after training: 0.6355195177956372
User 60952 does not improve AUC. Reverting changes.
Training on augumented user 45550 25/50 current_auc = 0.6355912743972446
User 45550 AUC after training: 0.635146383467279
User 45550 does not improve AUC. Reverting changes.
Training on augumented user 93126 26/50 current_auc = 0.6355912743972446
User 93126 AUC after training: 0.6343140068886337
User 93126 does not improve AUC. Reverting changes.
Training on augumented user 2712 27/50 current_auc = 0.6355912743972446
User 2712 AUC after training: 0.6355769230769232
User 2712 does not improve AUC. Reverting changes.
Training on augumented user 447 28/50 current_auc = 0.6355912743972446
User 447 AUC after training: 0.6357491389207808
User 447 improves AUC. Keeping the model.
Training on augumented user 91049 29/50 current_auc = 0.6357491389207808
User 91049 AUC after training: 0.6360074626865673
User 91049 improves AUC. Keeping the model.
Training on augumented user 89565 30/50 current_auc = 0.6360074626865673
User 89565 AUC after training: 0.6354764638346728
User 89565 does not improve AUC. Reverting changes.
Training on augumented user 81709 31/50 current_auc = 0.6360074626865673
User 81709 AUC after training: 0.6357491389207808
User 81709 does not improve AUC. Reverting changes.
Training on augumented user 130869 32/50 current_auc = 0.6360074626865673
User 130869 AUC after training: 0.6357204362801379
User 130869 does not improve AUC. Reverting changes.
Training on augumented user 65363 33/50 current_auc = 0.6360074626865673
User 65363 AUC after training: 0.6359500574052813
User 65363 does not improve AUC. Reverting changes.
Training on augumented user 66519 34/50 current_auc = 0.6360074626865673
User 66519 AUC after training: 0.635663030998852
User 66519 does not improve AUC. Reverting changes.
Training on augumented user 68564 35/50 current_auc = 0.6360074626865673
User 68564 AUC after training: 0.6350172215843859
User 68564 does not improve AUC. Reverting changes.
Training on augumented user 27750 36/50 current_auc = 0.6360074626865673
User 27750 AUC after training: 0.6358639494833525
User 27750 does not improve AUC. Reverting changes.
Training on augumented user 122579 37/50 current_auc = 0.6360074626865673
User 122579 AUC after training: 0.6353185993111367
User 122579 does not improve AUC. Reverting changes.
Training on augumented user 107197 38/50 current_auc = 0.6360074626865673
User 107197 AUC after training: 0.6358352468427095
User 107197 does not improve AUC. Reverting changes.
Training on augumented user 66490 39/50 current_auc = 0.6360074626865673
User 66490 AUC after training: 0.6354908151549942
User 66490 does not improve AUC. Reverting changes.
Training on augumented user 113687 40/50 current_auc = 0.6360074626865673
User 113687 AUC after training: 0.6355769230769232
User 113687 does not improve AUC. Reverting changes.
Training on augumented user 82914 41/50 current_auc = 0.6360074626865673
User 82914 AUC after training: 0.6359213547646384
User 82914 does not improve AUC. Reverting changes.
Training on augumented user 12263 42/50 current_auc = 0.6360074626865673
User 12263 AUC after training: 0.6357778415614237
User 12263 does not improve AUC. Reverting changes.
Training on augumented user 126397 43/50 current_auc = 0.6360074626865673
User 126397 AUC after training: 0.6356056257175661
User 126397 does not improve AUC. Reverting changes.
Training on augumented user 57952 44/50 current_auc = 0.6360074626865673
User 57952 AUC after training: 0.6355912743972447
User 57952 does not improve AUC. Reverting changes.
Training on augumented user 60905 45/50 current_auc = 0.6360074626865673
User 60905 AUC after training: 0.6352324913892079
User 60905 does not improve AUC. Reverting changes.
Training on augumented user 59159 46/50 current_auc = 0.6360074626865673
User 59159 AUC after training: 0.6358926521239954
User 59159 does not improve AUC. Reverting changes.
Training on augumented user 80901 47/50 current_auc = 0.6360074626865673
User 80901 AUC after training: 0.635361653272101
User 80901 does not improve AUC. Reverting changes.
Training on augumented user 126476 48/50 current_auc = 0.6360074626865673
User 126476 AUC after training: 0.6358926521239955
User 126476 does not improve AUC. Reverting changes.
Training on augumented user 62153 49/50 current_auc = 0.6360074626865673
User 62153 AUC after training: 0.6344575200918484
User 62153 does not improve AUC. Reverting changes.
[2024-12-02 19:43:15.651125] start test user 33014 222/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:16.066829] start test user 33014 222/568 recall augumented users by random, augumented_users = [114769, 136891, 74048, 103276, 129158, 134349, 118371, 99424, 52617, 122194, 57919, 62047, 135047, 63075, 96490, 106127, 26531, 35654, 97588, 81167, 72561, 4089, 73308, 100067, 83868, 86835, 36116, 48158, 52439, 89751, 88085, 130767, 126253, 92260, 125795, 74785, 133198, 135019, 133621, 112318, 91730, 134331, 127521, 109525, 104563, 15545, 22291, 69350, 118513, 32280]
[2024-12-02 19:43:16.080397] user = 33014 Cloud 222/568
[2024-12-02 19:43:16.089677] user = 33014 Local 222/568
[2024-12-02 19:43:16.171698] user = 33014 Local+ 222/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:18.682783] user = 33014 MPDA- 222/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.2833333333333333
Training on augumented user 114769 0/50 current_auc = 0.2833333333333333
User 114769 AUC after training: 0.2833333333333333
User 114769 does not improve AUC. Reverting changes.
Training on augumented user 136891 1/50 current_auc = 0.2833333333333333
User 136891 AUC after training: 0.2833333333333333
User 136891 does not improve AUC. Reverting changes.
Training on augumented user 74048 2/50 current_auc = 0.2833333333333333
User 74048 AUC after training: 0.2833333333333333
User 74048 does not improve AUC. Reverting changes.
Training on augumented user 103276 3/50 current_auc = 0.2833333333333333
User 103276 AUC after training: 0.2833333333333333
User 103276 does not improve AUC. Reverting changes.
Training on augumented user 129158 4/50 current_auc = 0.2833333333333333
User 129158 AUC after training: 0.2833333333333333
User 129158 does not improve AUC. Reverting changes.
Training on augumented user 134349 5/50 current_auc = 0.2833333333333333
User 134349 AUC after training: 0.2833333333333333
User 134349 does not improve AUC. Reverting changes.
Training on augumented user 118371 6/50 current_auc = 0.2833333333333333
User 118371 AUC after training: 0.2833333333333333
User 118371 does not improve AUC. Reverting changes.
Training on augumented user 99424 7/50 current_auc = 0.2833333333333333
User 99424 AUC after training: 0.2833333333333333
User 99424 does not improve AUC. Reverting changes.
Training on augumented user 52617 8/50 current_auc = 0.2833333333333333
User 52617 AUC after training: 0.2833333333333333
User 52617 does not improve AUC. Reverting changes.
Training on augumented user 122194 9/50 current_auc = 0.2833333333333333
User 122194 AUC after training: 0.2833333333333333
User 122194 does not improve AUC. Reverting changes.
Training on augumented user 57919 10/50 current_auc = 0.2833333333333333
User 57919 AUC after training: 0.2833333333333333
User 57919 does not improve AUC. Reverting changes.
Training on augumented user 62047 11/50 current_auc = 0.2833333333333333
User 62047 AUC after training: 0.2833333333333333
User 62047 does not improve AUC. Reverting changes.
Training on augumented user 135047 12/50 current_auc = 0.2833333333333333
User 135047 AUC after training: 0.2833333333333333
User 135047 does not improve AUC. Reverting changes.
Training on augumented user 63075 13/50 current_auc = 0.2833333333333333
User 63075 AUC after training: 0.2833333333333333
User 63075 does not improve AUC. Reverting changes.
Training on augumented user 96490 14/50 current_auc = 0.2833333333333333
User 96490 AUC after training: 0.3
User 96490 improves AUC. Keeping the model.
Training on augumented user 106127 15/50 current_auc = 0.3
User 106127 AUC after training: 0.3
User 106127 does not improve AUC. Reverting changes.
Training on augumented user 26531 16/50 current_auc = 0.3
User 26531 AUC after training: 0.3
User 26531 does not improve AUC. Reverting changes.
Training on augumented user 35654 17/50 current_auc = 0.3
User 35654 AUC after training: 0.3
User 35654 does not improve AUC. Reverting changes.
Training on augumented user 97588 18/50 current_auc = 0.3
User 97588 AUC after training: 0.3
User 97588 does not improve AUC. Reverting changes.
Training on augumented user 81167 19/50 current_auc = 0.3
User 81167 AUC after training: 0.3
User 81167 does not improve AUC. Reverting changes.
Training on augumented user 72561 20/50 current_auc = 0.3
User 72561 AUC after training: 0.3
User 72561 does not improve AUC. Reverting changes.
Training on augumented user 4089 21/50 current_auc = 0.3
User 4089 AUC after training: 0.31666666666666665
User 4089 improves AUC. Keeping the model.
Training on augumented user 73308 22/50 current_auc = 0.31666666666666665
User 73308 AUC after training: 0.31666666666666665
User 73308 does not improve AUC. Reverting changes.
Training on augumented user 100067 23/50 current_auc = 0.31666666666666665
User 100067 AUC after training: 0.3
User 100067 does not improve AUC. Reverting changes.
Training on augumented user 83868 24/50 current_auc = 0.31666666666666665
User 83868 AUC after training: 0.2833333333333333
User 83868 does not improve AUC. Reverting changes.
Training on augumented user 86835 25/50 current_auc = 0.31666666666666665
User 86835 AUC after training: 0.31666666666666665
User 86835 does not improve AUC. Reverting changes.
Training on augumented user 36116 26/50 current_auc = 0.31666666666666665
User 36116 AUC after training: 0.3
User 36116 does not improve AUC. Reverting changes.
Training on augumented user 48158 27/50 current_auc = 0.31666666666666665
User 48158 AUC after training: 0.31666666666666665
User 48158 does not improve AUC. Reverting changes.
Training on augumented user 52439 28/50 current_auc = 0.31666666666666665
User 52439 AUC after training: 0.2833333333333333
User 52439 does not improve AUC. Reverting changes.
Training on augumented user 89751 29/50 current_auc = 0.31666666666666665
User 89751 AUC after training: 0.31666666666666665
User 89751 does not improve AUC. Reverting changes.
Training on augumented user 88085 30/50 current_auc = 0.31666666666666665
User 88085 AUC after training: 0.2833333333333333
User 88085 does not improve AUC. Reverting changes.
Training on augumented user 130767 31/50 current_auc = 0.31666666666666665
User 130767 AUC after training: 0.31666666666666665
User 130767 does not improve AUC. Reverting changes.
Training on augumented user 126253 32/50 current_auc = 0.31666666666666665
User 126253 AUC after training: 0.31666666666666665
User 126253 does not improve AUC. Reverting changes.
Training on augumented user 92260 33/50 current_auc = 0.31666666666666665
User 92260 AUC after training: 0.3
User 92260 does not improve AUC. Reverting changes.
Training on augumented user 125795 34/50 current_auc = 0.31666666666666665
User 125795 AUC after training: 0.3
User 125795 does not improve AUC. Reverting changes.
Training on augumented user 74785 35/50 current_auc = 0.31666666666666665
User 74785 AUC after training: 0.31666666666666665
User 74785 does not improve AUC. Reverting changes.
Training on augumented user 133198 36/50 current_auc = 0.31666666666666665
User 133198 AUC after training: 0.3
User 133198 does not improve AUC. Reverting changes.
Training on augumented user 135019 37/50 current_auc = 0.31666666666666665
User 135019 AUC after training: 0.31666666666666665
User 135019 does not improve AUC. Reverting changes.
Training on augumented user 133621 38/50 current_auc = 0.31666666666666665
User 133621 AUC after training: 0.2833333333333333
User 133621 does not improve AUC. Reverting changes.
Training on augumented user 112318 39/50 current_auc = 0.31666666666666665
User 112318 AUC after training: 0.31666666666666665
User 112318 does not improve AUC. Reverting changes.
Training on augumented user 91730 40/50 current_auc = 0.31666666666666665
User 91730 AUC after training: 0.3
User 91730 does not improve AUC. Reverting changes.
Training on augumented user 134331 41/50 current_auc = 0.31666666666666665
User 134331 AUC after training: 0.2833333333333333
User 134331 does not improve AUC. Reverting changes.
Training on augumented user 127521 42/50 current_auc = 0.31666666666666665
User 127521 AUC after training: 0.31666666666666665
User 127521 does not improve AUC. Reverting changes.
Training on augumented user 109525 43/50 current_auc = 0.31666666666666665
User 109525 AUC after training: 0.3
User 109525 does not improve AUC. Reverting changes.
Training on augumented user 104563 44/50 current_auc = 0.31666666666666665
User 104563 AUC after training: 0.3
User 104563 does not improve AUC. Reverting changes.
Training on augumented user 15545 45/50 current_auc = 0.31666666666666665
User 15545 AUC after training: 0.2833333333333333
User 15545 does not improve AUC. Reverting changes.
Training on augumented user 22291 46/50 current_auc = 0.31666666666666665
User 22291 AUC after training: 0.31666666666666665
User 22291 does not improve AUC. Reverting changes.
Training on augumented user 69350 47/50 current_auc = 0.31666666666666665
User 69350 AUC after training: 0.2833333333333333
User 69350 does not improve AUC. Reverting changes.
Training on augumented user 118513 48/50 current_auc = 0.31666666666666665
User 118513 AUC after training: 0.3
User 118513 does not improve AUC. Reverting changes.
Training on augumented user 32280 49/50 current_auc = 0.31666666666666665
User 32280 AUC after training: 0.2833333333333333
User 32280 does not improve AUC. Reverting changes.
[2024-12-02 19:43:48.500147] start test user 33035 223/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:49.074275] start test user 33035 223/568 recall augumented users by random, augumented_users = [24451, 21679, 28912, 33620, 11582, 113851, 19971, 29868, 127460, 26022, 29716, 110065, 84772, 26678, 70993, 98045, 113736, 80828, 77754, 104801, 129677, 49157, 114281, 20588, 71055, 72972, 88109, 101302, 117686, 11062, 14279, 84999, 42828, 116672, 92949, 20394, 32765, 56743, 120750, 103936, 8815, 121483, 136352, 99136, 55708, 134364, 103833, 128229, 90707, 137977]
[2024-12-02 19:43:49.102016] user = 33035 Cloud 223/568
[2024-12-02 19:43:49.195447] user = 33035 Local 223/568
[2024-12-02 19:43:49.334349] user = 33035 Local+ 223/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:52.365155] user = 33035 MPDA- 223/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6773884506410649
Training on augumented user 24451 0/50 current_auc = 0.6773884506410649
User 24451 AUC after training: 0.6769400110071546
User 24451 does not improve AUC. Reverting changes.
Training on augumented user 21679 1/50 current_auc = 0.6773884506410649
User 21679 AUC after training: 0.6762673515562894
User 21679 does not improve AUC. Reverting changes.
Training on augumented user 28912 2/50 current_auc = 0.6773884506410649
User 28912 AUC after training: 0.6771336553945249
User 28912 does not improve AUC. Reverting changes.
Training on augumented user 33620 3/50 current_auc = 0.6773884506410649
User 33620 AUC after training: 0.6773171079720336
User 33620 does not improve AUC. Reverting changes.
Training on augumented user 11582 4/50 current_auc = 0.6773884506410649
User 11582 AUC after training: 0.6775311359791272
User 11582 improves AUC. Keeping the model.
Training on augumented user 113851 5/50 current_auc = 0.6775311359791272
User 113851 AUC after training: 0.6773069161621721
User 113851 does not improve AUC. Reverting changes.
Training on augumented user 19971 6/50 current_auc = 0.6775311359791272
User 19971 AUC after training: 0.6780814937116534
User 19971 improves AUC. Keeping the model.
Training on augumented user 29868 7/50 current_auc = 0.6780814937116534
User 29868 AUC after training: 0.6778674657045598
User 29868 does not improve AUC. Reverting changes.
Training on augumented user 127460 8/50 current_auc = 0.6780814937116534
User 127460 AUC after training: 0.6774394096903728
User 127460 does not improve AUC. Reverting changes.
Training on augumented user 26022 9/50 current_auc = 0.6780814937116534
User 26022 AUC after training: 0.6781222609510996
User 26022 improves AUC. Keeping the model.
Training on augumented user 29716 10/50 current_auc = 0.6781222609510996
User 29716 AUC after training: 0.6779388083735909
User 29716 does not improve AUC. Reverting changes.
Training on augumented user 110065 11/50 current_auc = 0.6781222609510996
User 110065 AUC after training: 0.6769909700564626
User 110065 does not improve AUC. Reverting changes.
Training on augumented user 84772 12/50 current_auc = 0.6781222609510996
User 84772 AUC after training: 0.6780407264722069
User 84772 does not improve AUC. Reverting changes.
Training on augumented user 26678 13/50 current_auc = 0.6781222609510996
User 26678 AUC after training: 0.6782445626694388
User 26678 improves AUC. Keeping the model.
Training on augumented user 70993 14/50 current_auc = 0.6782445626694388
User 70993 AUC after training: 0.6774699851199576
User 70993 does not improve AUC. Reverting changes.
Training on augumented user 98045 15/50 current_auc = 0.6782445626694388
User 98045 AUC after training: 0.6783260971483316
User 98045 improves AUC. Keeping the model.
Training on augumented user 113736 16/50 current_auc = 0.6783260971483316
User 113736 AUC after training: 0.677734972176359
User 113736 does not improve AUC. Reverting changes.
Training on augumented user 80828 17/50 current_auc = 0.6783260971483316
User 80828 AUC after training: 0.6779999592327606
User 80828 does not improve AUC. Reverting changes.
Training on augumented user 77754 18/50 current_auc = 0.6783260971483316
User 77754 AUC after training: 0.6780814937116534
User 77754 does not improve AUC. Reverting changes.
Training on augumented user 104801 19/50 current_auc = 0.6783260971483316
User 104801 AUC after training: 0.6781630281905461
User 104801 does not improve AUC. Reverting changes.
Training on augumented user 129677 20/50 current_auc = 0.6783260971483316
User 129677 AUC after training: 0.6764508041337981
User 129677 does not improve AUC. Reverting changes.
Training on augumented user 49157 21/50 current_auc = 0.6783260971483316
User 49157 AUC after training: 0.6785095497258403
User 49157 improves AUC. Keeping the model.
Training on augumented user 114281 22/50 current_auc = 0.6785095497258403
User 114281 AUC after training: 0.678794920401965
User 114281 improves AUC. Keeping the model.
Training on augumented user 20588 23/50 current_auc = 0.678794920401965
User 20588 AUC after training: 0.6794471962331071
User 20588 improves AUC. Keeping the model.
Training on augumented user 71055 24/50 current_auc = 0.6794471962331071
User 71055 AUC after training: 0.6786930023033491
User 71055 does not improve AUC. Reverting changes.
Training on augumented user 72972 25/50 current_auc = 0.6794471962331071
User 72972 AUC after training: 0.6793656617542143
User 72972 does not improve AUC. Reverting changes.
Training on augumented user 88109 26/50 current_auc = 0.6794471962331071
User 88109 AUC after training: 0.6792841272753216
User 88109 does not improve AUC. Reverting changes.
Training on augumented user 101302 27/50 current_auc = 0.6794471962331071
User 101302 AUC after training: 0.679447196233107
User 101302 does not improve AUC. Reverting changes.
Training on augumented user 117686 28/50 current_auc = 0.6794471962331071
User 117686 AUC after training: 0.6791822091767055
User 117686 does not improve AUC. Reverting changes.
Training on augumented user 11062 29/50 current_auc = 0.6794471962331071
User 11062 AUC after training: 0.6791822091767055
User 11062 does not improve AUC. Reverting changes.
Training on augumented user 14279 30/50 current_auc = 0.6794471962331071
User 14279 AUC after training: 0.679121058317536
User 14279 does not improve AUC. Reverting changes.
Training on augumented user 84999 31/50 current_auc = 0.6794471962331071
User 84999 AUC after training: 0.6792025927964288
User 84999 does not improve AUC. Reverting changes.
Training on augumented user 42828 32/50 current_auc = 0.6794471962331071
User 42828 AUC after training: 0.6784483988666707
User 42828 does not improve AUC. Reverting changes.
Training on augumented user 116672 33/50 current_auc = 0.6794471962331071
User 116672 AUC after training: 0.678917222120304
User 116672 does not improve AUC. Reverting changes.
Training on augumented user 92949 34/50 current_auc = 0.6794471962331071
User 92949 AUC after training: 0.6793045108950447
User 92949 does not improve AUC. Reverting changes.
Training on augumented user 20394 35/50 current_auc = 0.6794471962331071
User 20394 AUC after training: 0.6793045108950446
User 20394 does not improve AUC. Reverting changes.
Training on augumented user 32765 36/50 current_auc = 0.6794471962331071
User 32765 AUC after training: 0.6794268126133839
User 32765 does not improve AUC. Reverting changes.
Training on augumented user 56743 37/50 current_auc = 0.6794471962331071
User 56743 AUC after training: 0.6796917996697853
User 56743 improves AUC. Keeping the model.
Training on augumented user 120750 38/50 current_auc = 0.6796917996697853
User 120750 AUC after training: 0.6796102651908926
User 120750 does not improve AUC. Reverting changes.
Training on augumented user 103936 39/50 current_auc = 0.6796917996697853
User 103936 AUC after training: 0.679324894514768
User 103936 does not improve AUC. Reverting changes.
Training on augumented user 8815 40/50 current_auc = 0.6796917996697853
User 8815 AUC after training: 0.6796510324303389
User 8815 does not improve AUC. Reverting changes.
Training on augumented user 121483 41/50 current_auc = 0.6796917996697853
User 121483 AUC after training: 0.6790802910780898
User 121483 does not improve AUC. Reverting changes.
Training on augumented user 136352 42/50 current_auc = 0.6796917996697853
User 136352 AUC after training: 0.6790191402189201
User 136352 does not improve AUC. Reverting changes.
Training on augumented user 99136 43/50 current_auc = 0.6796917996697853
User 99136 AUC after training: 0.6792025927964288
User 99136 does not improve AUC. Reverting changes.
Training on augumented user 55708 44/50 current_auc = 0.6796917996697853
User 55708 AUC after training: 0.6785707005850099
User 55708 does not improve AUC. Reverting changes.
Training on augumented user 134364 45/50 current_auc = 0.6796917996697853
User 134364 AUC after training: 0.6794064289936607
User 134364 does not improve AUC. Reverting changes.
Training on augumented user 103833 46/50 current_auc = 0.6796917996697853
User 103833 AUC after training: 0.6793452781344911
User 103833 does not improve AUC. Reverting changes.
Training on augumented user 128229 47/50 current_auc = 0.6796917996697853
User 128229 AUC after training: 0.6782649462891621
User 128229 does not improve AUC. Reverting changes.
Training on augumented user 90707 48/50 current_auc = 0.6796917996697853
User 90707 AUC after training: 0.6797121832895084
User 90707 improves AUC. Keeping the model.
Training on augumented user 137977 49/50 current_auc = 0.6797121832895084
User 137977 AUC after training: 0.6787541531625185
User 137977 does not improve AUC. Reverting changes.
[2024-12-02 19:44:22.762032] start test user 33074 224/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:23.458112] start test user 33074 224/568 recall augumented users by random, augumented_users = [55573, 96162, 28319, 123905, 103815, 35059, 88108, 91060, 9305, 133898, 96364, 94490, 44455, 101525, 24680, 29486, 52739, 52167, 77946, 33678, 32744, 128448, 124675, 9146, 70991, 45890, 78163, 15380, 92765, 86467, 106936, 22383, 117261, 37864, 32366, 77770, 66781, 65457, 49346, 58108, 55781, 14854, 43207, 30046, 117621, 71275, 52181, 17868, 113023, 137164]
[2024-12-02 19:44:23.476318] user = 33074 Cloud 224/568
[2024-12-02 19:44:23.487890] user = 33074 Local 224/568
[2024-12-02 19:44:23.571541] user = 33074 Local+ 224/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:26.619078] user = 33074 MPDA- 224/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.33333333333333337
Training on augumented user 55573 0/50 current_auc = 0.33333333333333337
User 55573 AUC after training: 0.33333333333333337
User 55573 does not improve AUC. Reverting changes.
Training on augumented user 96162 1/50 current_auc = 0.33333333333333337
User 96162 AUC after training: 0.33333333333333337
User 96162 does not improve AUC. Reverting changes.
Training on augumented user 28319 2/50 current_auc = 0.33333333333333337
User 28319 AUC after training: 0.33333333333333337
User 28319 does not improve AUC. Reverting changes.
Training on augumented user 123905 3/50 current_auc = 0.33333333333333337
User 123905 AUC after training: 0.33333333333333337
User 123905 does not improve AUC. Reverting changes.
Training on augumented user 103815 4/50 current_auc = 0.33333333333333337
User 103815 AUC after training: 0.33333333333333337
User 103815 does not improve AUC. Reverting changes.
Training on augumented user 35059 5/50 current_auc = 0.33333333333333337
User 35059 AUC after training: 0.33333333333333337
User 35059 does not improve AUC. Reverting changes.
Training on augumented user 88108 6/50 current_auc = 0.33333333333333337
User 88108 AUC after training: 0.33333333333333337
User 88108 does not improve AUC. Reverting changes.
Training on augumented user 91060 7/50 current_auc = 0.33333333333333337
User 91060 AUC after training: 0.33333333333333337
User 91060 does not improve AUC. Reverting changes.
Training on augumented user 9305 8/50 current_auc = 0.33333333333333337
User 9305 AUC after training: 0.33333333333333337
User 9305 does not improve AUC. Reverting changes.
Training on augumented user 133898 9/50 current_auc = 0.33333333333333337
User 133898 AUC after training: 0.33333333333333337
User 133898 does not improve AUC. Reverting changes.
Training on augumented user 96364 10/50 current_auc = 0.33333333333333337
User 96364 AUC after training: 0.33333333333333337
User 96364 does not improve AUC. Reverting changes.
Training on augumented user 94490 11/50 current_auc = 0.33333333333333337
User 94490 AUC after training: 0.33333333333333337
User 94490 does not improve AUC. Reverting changes.
Training on augumented user 44455 12/50 current_auc = 0.33333333333333337
User 44455 AUC after training: 0.33333333333333337
User 44455 does not improve AUC. Reverting changes.
Training on augumented user 101525 13/50 current_auc = 0.33333333333333337
User 101525 AUC after training: 0.33333333333333337
User 101525 does not improve AUC. Reverting changes.
Training on augumented user 24680 14/50 current_auc = 0.33333333333333337
User 24680 AUC after training: 0.33333333333333337
User 24680 does not improve AUC. Reverting changes.
Training on augumented user 29486 15/50 current_auc = 0.33333333333333337
User 29486 AUC after training: 0.33333333333333337
User 29486 does not improve AUC. Reverting changes.
Training on augumented user 52739 16/50 current_auc = 0.33333333333333337
User 52739 AUC after training: 0.33333333333333337
User 52739 does not improve AUC. Reverting changes.
Training on augumented user 52167 17/50 current_auc = 0.33333333333333337
User 52167 AUC after training: 0.33333333333333337
User 52167 does not improve AUC. Reverting changes.
Training on augumented user 77946 18/50 current_auc = 0.33333333333333337
User 77946 AUC after training: 0.33333333333333337
User 77946 does not improve AUC. Reverting changes.
Training on augumented user 33678 19/50 current_auc = 0.33333333333333337
User 33678 AUC after training: 0.33333333333333337
User 33678 does not improve AUC. Reverting changes.
Training on augumented user 32744 20/50 current_auc = 0.33333333333333337
User 32744 AUC after training: 0.33333333333333337
User 32744 does not improve AUC. Reverting changes.
Training on augumented user 128448 21/50 current_auc = 0.33333333333333337
User 128448 AUC after training: 0.33333333333333337
User 128448 does not improve AUC. Reverting changes.
Training on augumented user 124675 22/50 current_auc = 0.33333333333333337
User 124675 AUC after training: 0.33333333333333337
User 124675 does not improve AUC. Reverting changes.
Training on augumented user 9146 23/50 current_auc = 0.33333333333333337
User 9146 AUC after training: 0.33333333333333337
User 9146 does not improve AUC. Reverting changes.
Training on augumented user 70991 24/50 current_auc = 0.33333333333333337
User 70991 AUC after training: 0.33333333333333337
User 70991 does not improve AUC. Reverting changes.
Training on augumented user 45890 25/50 current_auc = 0.33333333333333337
User 45890 AUC after training: 0.33333333333333337
User 45890 does not improve AUC. Reverting changes.
Training on augumented user 78163 26/50 current_auc = 0.33333333333333337
User 78163 AUC after training: 0.33333333333333337
User 78163 does not improve AUC. Reverting changes.
Training on augumented user 15380 27/50 current_auc = 0.33333333333333337
User 15380 AUC after training: 0.33333333333333337
User 15380 does not improve AUC. Reverting changes.
Training on augumented user 92765 28/50 current_auc = 0.33333333333333337
User 92765 AUC after training: 0.33333333333333337
User 92765 does not improve AUC. Reverting changes.
Training on augumented user 86467 29/50 current_auc = 0.33333333333333337
User 86467 AUC after training: 0.33333333333333337
User 86467 does not improve AUC. Reverting changes.
Training on augumented user 106936 30/50 current_auc = 0.33333333333333337
User 106936 AUC after training: 0.33333333333333337
User 106936 does not improve AUC. Reverting changes.
Training on augumented user 22383 31/50 current_auc = 0.33333333333333337
User 22383 AUC after training: 0.33333333333333337
User 22383 does not improve AUC. Reverting changes.
Training on augumented user 117261 32/50 current_auc = 0.33333333333333337
User 117261 AUC after training: 0.4444444444444445
User 117261 improves AUC. Keeping the model.
Training on augumented user 37864 33/50 current_auc = 0.4444444444444445
User 37864 AUC after training: 0.4444444444444445
User 37864 does not improve AUC. Reverting changes.
Training on augumented user 32366 34/50 current_auc = 0.4444444444444445
User 32366 AUC after training: 0.33333333333333337
User 32366 does not improve AUC. Reverting changes.
Training on augumented user 77770 35/50 current_auc = 0.4444444444444445
User 77770 AUC after training: 0.33333333333333337
User 77770 does not improve AUC. Reverting changes.
Training on augumented user 66781 36/50 current_auc = 0.4444444444444445
User 66781 AUC after training: 0.33333333333333337
User 66781 does not improve AUC. Reverting changes.
Training on augumented user 65457 37/50 current_auc = 0.4444444444444445
User 65457 AUC after training: 0.33333333333333337
User 65457 does not improve AUC. Reverting changes.
Training on augumented user 49346 38/50 current_auc = 0.4444444444444445
User 49346 AUC after training: 0.4444444444444445
User 49346 does not improve AUC. Reverting changes.
Training on augumented user 58108 39/50 current_auc = 0.4444444444444445
User 58108 AUC after training: 0.4444444444444445
User 58108 does not improve AUC. Reverting changes.
Training on augumented user 55781 40/50 current_auc = 0.4444444444444445
User 55781 AUC after training: 0.4444444444444445
User 55781 does not improve AUC. Reverting changes.
Training on augumented user 14854 41/50 current_auc = 0.4444444444444445
User 14854 AUC after training: 0.4444444444444445
User 14854 does not improve AUC. Reverting changes.
Training on augumented user 43207 42/50 current_auc = 0.4444444444444445
User 43207 AUC after training: 0.4444444444444445
User 43207 does not improve AUC. Reverting changes.
Training on augumented user 30046 43/50 current_auc = 0.4444444444444445
User 30046 AUC after training: 0.4444444444444445
User 30046 does not improve AUC. Reverting changes.
Training on augumented user 117621 44/50 current_auc = 0.4444444444444445
User 117621 AUC after training: 0.4444444444444445
User 117621 does not improve AUC. Reverting changes.
Training on augumented user 71275 45/50 current_auc = 0.4444444444444445
User 71275 AUC after training: 0.33333333333333337
User 71275 does not improve AUC. Reverting changes.
Training on augumented user 52181 46/50 current_auc = 0.4444444444444445
User 52181 AUC after training: 0.4444444444444445
User 52181 does not improve AUC. Reverting changes.
Training on augumented user 17868 47/50 current_auc = 0.4444444444444445
User 17868 AUC after training: 0.4444444444444445
User 17868 does not improve AUC. Reverting changes.
Training on augumented user 113023 48/50 current_auc = 0.4444444444444445
User 113023 AUC after training: 0.33333333333333337
User 113023 does not improve AUC. Reverting changes.
Training on augumented user 137164 49/50 current_auc = 0.4444444444444445
User 137164 AUC after training: 0.33333333333333337
User 137164 does not improve AUC. Reverting changes.
[2024-12-02 19:44:52.656757] start test user 33082 225/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:53.187452] start test user 33082 225/568 recall augumented users by random, augumented_users = [114593, 109137, 136142, 74906, 1233, 132065, 7830, 48267, 54044, 96456, 15842, 7741, 95822, 21306, 99144, 37947, 40629, 128625, 115794, 127262, 60879, 103178, 87691, 133376, 112651, 25095, 79474, 11549, 26274, 120084, 7577, 28509, 71305, 21944, 8948, 121985, 39880, 134954, 12561, 15813, 51208, 132661, 5155, 76465, 76302, 78568, 107574, 83563, 733, 102023]
[2024-12-02 19:44:53.205938] user = 33082 Cloud 225/568
[2024-12-02 19:44:53.254090] user = 33082 Local 225/568
[2024-12-02 19:44:53.592041] user = 33082 Local+ 225/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:56.856284] user = 33082 MPDA- 225/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.627320419693301
Training on augumented user 114593 0/50 current_auc = 0.627320419693301
User 114593 AUC after training: 0.6281275221953189
User 114593 improves AUC. Keeping the model.
Training on augumented user 109137 1/50 current_auc = 0.6281275221953189
User 109137 AUC after training: 0.626311541565779
User 109137 does not improve AUC. Reverting changes.
Training on augumented user 136142 2/50 current_auc = 0.6281275221953189
User 136142 AUC after training: 0.6267150928167877
User 136142 does not improve AUC. Reverting changes.
Training on augumented user 74906 3/50 current_auc = 0.6281275221953189
User 74906 AUC after training: 0.6275221953188055
User 74906 does not improve AUC. Reverting changes.
Training on augumented user 1233 4/50 current_auc = 0.6281275221953189
User 1233 AUC after training: 0.6285310734463276
User 1233 improves AUC. Keeping the model.
Training on augumented user 132065 5/50 current_auc = 0.6285310734463276
User 132065 AUC after training: 0.6269168684422921
User 132065 does not improve AUC. Reverting changes.
Training on augumented user 7830 6/50 current_auc = 0.6285310734463276
User 7830 AUC after training: 0.6267150928167877
User 7830 does not improve AUC. Reverting changes.
Training on augumented user 48267 7/50 current_auc = 0.6285310734463276
User 48267 AUC after training: 0.6303470540758677
User 48267 improves AUC. Keeping the model.
Training on augumented user 54044 8/50 current_auc = 0.6303470540758677
User 54044 AUC after training: 0.6303470540758677
User 54044 does not improve AUC. Reverting changes.
Training on augumented user 96456 9/50 current_auc = 0.6303470540758677
User 96456 AUC after training: 0.6261097659402745
User 96456 does not improve AUC. Reverting changes.
Training on augumented user 15842 10/50 current_auc = 0.6303470540758677
User 15842 AUC after training: 0.6309523809523809
User 15842 improves AUC. Keeping the model.
Training on augumented user 7741 11/50 current_auc = 0.6309523809523809
User 7741 AUC after training: 0.6301452784503632
User 7741 does not improve AUC. Reverting changes.
Training on augumented user 95822 12/50 current_auc = 0.6309523809523809
User 95822 AUC after training: 0.6327683615819208
User 95822 improves AUC. Keeping the model.
Training on augumented user 21306 13/50 current_auc = 0.6327683615819208
User 21306 AUC after training: 0.6321630347054076
User 21306 does not improve AUC. Reverting changes.
Training on augumented user 99144 14/50 current_auc = 0.6327683615819208
User 99144 AUC after training: 0.6325665859564165
User 99144 does not improve AUC. Reverting changes.
Training on augumented user 37947 15/50 current_auc = 0.6327683615819208
User 37947 AUC after training: 0.6285310734463277
User 37947 does not improve AUC. Reverting changes.
Training on augumented user 40629 16/50 current_auc = 0.6327683615819208
User 40629 AUC after training: 0.6319612590799031
User 40629 does not improve AUC. Reverting changes.
Training on augumented user 128625 17/50 current_auc = 0.6327683615819208
User 128625 AUC after training: 0.6297417271993543
User 128625 does not improve AUC. Reverting changes.
Training on augumented user 115794 18/50 current_auc = 0.6327683615819208
User 115794 AUC after training: 0.632364810330912
User 115794 does not improve AUC. Reverting changes.
Training on augumented user 127262 19/50 current_auc = 0.6327683615819208
User 127262 AUC after training: 0.6321630347054076
User 127262 does not improve AUC. Reverting changes.
Training on augumented user 60879 20/50 current_auc = 0.6327683615819208
User 60879 AUC after training: 0.6331719128329298
User 60879 improves AUC. Keeping the model.
Training on augumented user 103178 21/50 current_auc = 0.6331719128329298
User 103178 AUC after training: 0.630548829701372
User 103178 does not improve AUC. Reverting changes.
Training on augumented user 87691 22/50 current_auc = 0.6331719128329298
User 87691 AUC after training: 0.6307506053268765
User 87691 does not improve AUC. Reverting changes.
Training on augumented user 133376 23/50 current_auc = 0.6331719128329298
User 133376 AUC after training: 0.6329701372074253
User 133376 does not improve AUC. Reverting changes.
Training on augumented user 112651 24/50 current_auc = 0.6331719128329298
User 112651 AUC after training: 0.6321630347054076
User 112651 does not improve AUC. Reverting changes.
Training on augumented user 25095 25/50 current_auc = 0.6331719128329298
User 25095 AUC after training: 0.6325665859564165
User 25095 does not improve AUC. Reverting changes.
Training on augumented user 79474 26/50 current_auc = 0.6331719128329298
User 79474 AUC after training: 0.6323648103309121
User 79474 does not improve AUC. Reverting changes.
Training on augumented user 11549 27/50 current_auc = 0.6331719128329298
User 11549 AUC after training: 0.6319612590799032
User 11549 does not improve AUC. Reverting changes.
Training on augumented user 26274 28/50 current_auc = 0.6331719128329298
User 26274 AUC after training: 0.6323648103309121
User 26274 does not improve AUC. Reverting changes.
Training on augumented user 120084 29/50 current_auc = 0.6331719128329298
User 120084 AUC after training: 0.6313559322033899
User 120084 does not improve AUC. Reverting changes.
Training on augumented user 7577 30/50 current_auc = 0.6331719128329298
User 7577 AUC after training: 0.6238902340597257
User 7577 does not improve AUC. Reverting changes.
Training on augumented user 28509 31/50 current_auc = 0.6331719128329298
User 28509 AUC after training: 0.6295399515738498
User 28509 does not improve AUC. Reverting changes.
Training on augumented user 71305 32/50 current_auc = 0.6331719128329298
User 71305 AUC after training: 0.6321630347054076
User 71305 does not improve AUC. Reverting changes.
Training on augumented user 21944 33/50 current_auc = 0.6331719128329298
User 21944 AUC after training: 0.6301452784503632
User 21944 does not improve AUC. Reverting changes.
Training on augumented user 8948 34/50 current_auc = 0.6331719128329298
User 8948 AUC after training: 0.6293381759483454
User 8948 does not improve AUC. Reverting changes.
Training on augumented user 121985 35/50 current_auc = 0.6331719128329298
User 121985 AUC after training: 0.632768361581921
User 121985 does not improve AUC. Reverting changes.
Training on augumented user 39880 36/50 current_auc = 0.6331719128329298
User 39880 AUC after training: 0.6325665859564165
User 39880 does not improve AUC. Reverting changes.
Training on augumented user 134954 37/50 current_auc = 0.6331719128329298
User 134954 AUC after training: 0.6309523809523809
User 134954 does not improve AUC. Reverting changes.
Training on augumented user 12561 38/50 current_auc = 0.6331719128329298
User 12561 AUC after training: 0.6325665859564166
User 12561 does not improve AUC. Reverting changes.
Training on augumented user 15813 39/50 current_auc = 0.6331719128329298
User 15813 AUC after training: 0.6269168684422922
User 15813 does not improve AUC. Reverting changes.
Training on augumented user 51208 40/50 current_auc = 0.6331719128329298
User 51208 AUC after training: 0.6319612590799031
User 51208 does not improve AUC. Reverting changes.
Training on augumented user 132661 41/50 current_auc = 0.6331719128329298
User 132661 AUC after training: 0.6325665859564165
User 132661 does not improve AUC. Reverting changes.
Training on augumented user 5155 42/50 current_auc = 0.6331719128329298
User 5155 AUC after training: 0.6297417271993543
User 5155 does not improve AUC. Reverting changes.
Training on augumented user 76465 43/50 current_auc = 0.6331719128329298
User 76465 AUC after training: 0.6331719128329298
User 76465 does not improve AUC. Reverting changes.
Training on augumented user 76302 44/50 current_auc = 0.6331719128329298
User 76302 AUC after training: 0.6307506053268765
User 76302 does not improve AUC. Reverting changes.
Training on augumented user 78568 45/50 current_auc = 0.6331719128329298
User 78568 AUC after training: 0.6321630347054076
User 78568 does not improve AUC. Reverting changes.
Training on augumented user 107574 46/50 current_auc = 0.6331719128329298
User 107574 AUC after training: 0.6287328490718321
User 107574 does not improve AUC. Reverting changes.
Training on augumented user 83563 47/50 current_auc = 0.6331719128329298
User 83563 AUC after training: 0.6319612590799031
User 83563 does not improve AUC. Reverting changes.
Training on augumented user 733 48/50 current_auc = 0.6331719128329298
User 733 AUC after training: 0.6311541565778853
User 733 does not improve AUC. Reverting changes.
Training on augumented user 102023 49/50 current_auc = 0.6331719128329298
User 102023 AUC after training: 0.6329701372074255
User 102023 does not improve AUC. Reverting changes.
[2024-12-02 19:45:26.756977] start test user 33136 226/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:27.374911] start test user 33136 226/568 recall augumented users by random, augumented_users = [114205, 86005, 111426, 50916, 3372, 83583, 59713, 40298, 19660, 18846, 136706, 49874, 75669, 114547, 37049, 34035, 135756, 77366, 32228, 62020, 50539, 89938, 73840, 73998, 130737, 88739, 85056, 120183, 100241, 41066, 109175, 7343, 123508, 106690, 53077, 81176, 20368, 114643, 12626, 7231, 50611, 31641, 23421, 49418, 2545, 42141, 7801, 75665, 21658, 127364]
[2024-12-02 19:45:27.410496] user = 33136 Cloud 226/568
[2024-12-02 19:45:27.481684] user = 33136 Local 226/568
[2024-12-02 19:45:27.635326] user = 33136 Local+ 226/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:30.131472] user = 33136 MPDA- 226/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5461349851593754
Training on augumented user 114205 0/50 current_auc = 0.5461349851593754
User 114205 AUC after training: 0.5444573493353981
User 114205 does not improve AUC. Reverting changes.
Training on augumented user 86005 1/50 current_auc = 0.5461349851593754
User 86005 AUC after training: 0.5466511807975223
User 86005 improves AUC. Keeping the model.
Training on augumented user 111426 2/50 current_auc = 0.5466511807975223
User 111426 AUC after training: 0.5470383275261324
User 111426 improves AUC. Keeping the model.
Training on augumented user 50916 3/50 current_auc = 0.5470383275261324
User 50916 AUC after training: 0.5474254742547426
User 50916 improves AUC. Keeping the model.
Training on augumented user 3372 4/50 current_auc = 0.5474254742547426
User 3372 AUC after training: 0.5483288166214997
User 3372 improves AUC. Keeping the model.
Training on augumented user 83583 5/50 current_auc = 0.5483288166214997
User 83583 AUC after training: 0.547683572073816
User 83583 does not improve AUC. Reverting changes.
Training on augumented user 59713 6/50 current_auc = 0.5483288166214997
User 59713 AUC after training: 0.5483288166214996
User 59713 does not improve AUC. Reverting changes.
Training on augumented user 40298 7/50 current_auc = 0.5483288166214997
User 40298 AUC after training: 0.5472964253452058
User 40298 does not improve AUC. Reverting changes.
Training on augumented user 19660 8/50 current_auc = 0.5483288166214997
User 19660 AUC after training: 0.5475545231642793
User 19660 does not improve AUC. Reverting changes.
Training on augumented user 18846 9/50 current_auc = 0.5483288166214997
User 18846 AUC after training: 0.5472964253452058
User 18846 does not improve AUC. Reverting changes.
Training on augumented user 136706 10/50 current_auc = 0.5483288166214997
User 136706 AUC after training: 0.5483288166214996
User 136706 does not improve AUC. Reverting changes.
Training on augumented user 49874 11/50 current_auc = 0.5483288166214997
User 49874 AUC after training: 0.5460059362498386
User 49874 does not improve AUC. Reverting changes.
Training on augumented user 75669 12/50 current_auc = 0.5483288166214997
User 75669 AUC after training: 0.5484578655310363
User 75669 improves AUC. Keeping the model.
Training on augumented user 114547 13/50 current_auc = 0.5484578655310363
User 114547 AUC after training: 0.5479416698928894
User 114547 does not improve AUC. Reverting changes.
Training on augumented user 37049 14/50 current_auc = 0.5484578655310363
User 37049 AUC after training: 0.5475545231642792
User 37049 does not improve AUC. Reverting changes.
Training on augumented user 34035 15/50 current_auc = 0.5484578655310363
User 34035 AUC after training: 0.547683572073816
User 34035 does not improve AUC. Reverting changes.
Training on augumented user 135756 16/50 current_auc = 0.5484578655310363
User 135756 AUC after training: 0.5472964253452058
User 135756 does not improve AUC. Reverting changes.
Training on augumented user 77366 17/50 current_auc = 0.5484578655310363
User 77366 AUC after training: 0.5483288166214996
User 77366 does not improve AUC. Reverting changes.
Training on augumented user 32228 18/50 current_auc = 0.5484578655310363
User 32228 AUC after training: 0.5488450122596464
User 32228 improves AUC. Keeping the model.
Training on augumented user 62020 19/50 current_auc = 0.5488450122596464
User 62020 AUC after training: 0.5483288166214995
User 62020 does not improve AUC. Reverting changes.
Training on augumented user 50539 20/50 current_auc = 0.5488450122596464
User 50539 AUC after training: 0.5488450122596464
User 50539 does not improve AUC. Reverting changes.
Training on augumented user 89938 21/50 current_auc = 0.5488450122596464
User 89938 AUC after training: 0.5479416698928894
User 89938 does not improve AUC. Reverting changes.
Training on augumented user 73840 22/50 current_auc = 0.5488450122596464
User 73840 AUC after training: 0.5480707188024261
User 73840 does not improve AUC. Reverting changes.
Training on augumented user 73998 23/50 current_auc = 0.5488450122596464
User 73998 AUC after training: 0.5488450122596464
User 73998 does not improve AUC. Reverting changes.
Training on augumented user 130737 24/50 current_auc = 0.5488450122596464
User 130737 AUC after training: 0.548586914440573
User 130737 does not improve AUC. Reverting changes.
Training on augumented user 88739 25/50 current_auc = 0.5488450122596464
User 88739 AUC after training: 0.5488450122596464
User 88739 does not improve AUC. Reverting changes.
Training on augumented user 85056 26/50 current_auc = 0.5488450122596464
User 85056 AUC after training: 0.5492321589882565
User 85056 improves AUC. Keeping the model.
Training on augumented user 120183 27/50 current_auc = 0.5492321589882565
User 120183 AUC after training: 0.5488450122596464
User 120183 does not improve AUC. Reverting changes.
Training on augumented user 100241 28/50 current_auc = 0.5492321589882565
User 100241 AUC after training: 0.5487159633501096
User 100241 does not improve AUC. Reverting changes.
Training on augumented user 41066 29/50 current_auc = 0.5492321589882565
User 41066 AUC after training: 0.5494902568073299
User 41066 improves AUC. Keeping the model.
Training on augumented user 109175 30/50 current_auc = 0.5494902568073299
User 109175 AUC after training: 0.5481997677119628
User 109175 does not improve AUC. Reverting changes.
Training on augumented user 7343 31/50 current_auc = 0.5494902568073299
User 7343 AUC after training: 0.5478126209833527
User 7343 does not improve AUC. Reverting changes.
Training on augumented user 123508 32/50 current_auc = 0.5494902568073299
User 123508 AUC after training: 0.5489740611691831
User 123508 does not improve AUC. Reverting changes.
Training on augumented user 106690 33/50 current_auc = 0.5494902568073299
User 106690 AUC after training: 0.5488450122596464
User 106690 does not improve AUC. Reverting changes.
Training on augumented user 53077 34/50 current_auc = 0.5494902568073299
User 53077 AUC after training: 0.548586914440573
User 53077 does not improve AUC. Reverting changes.
Training on augumented user 81176 35/50 current_auc = 0.5494902568073299
User 81176 AUC after training: 0.5488450122596464
User 81176 does not improve AUC. Reverting changes.
Training on augumented user 20368 36/50 current_auc = 0.5494902568073299
User 20368 AUC after training: 0.5492321589882565
User 20368 does not improve AUC. Reverting changes.
Training on augumented user 114643 37/50 current_auc = 0.5494902568073299
User 114643 AUC after training: 0.5491031100787198
User 114643 does not improve AUC. Reverting changes.
Training on augumented user 12626 38/50 current_auc = 0.5494902568073299
User 12626 AUC after training: 0.5497483546264034
User 12626 improves AUC. Keeping the model.
Training on augumented user 7231 39/50 current_auc = 0.5497483546264034
User 7231 AUC after training: 0.5498774035359402
User 7231 improves AUC. Keeping the model.
Training on augumented user 50611 40/50 current_auc = 0.5498774035359402
User 50611 AUC after training: 0.547683572073816
User 50611 does not improve AUC. Reverting changes.
Training on augumented user 31641 41/50 current_auc = 0.5498774035359402
User 31641 AUC after training: 0.5493612078977932
User 31641 does not improve AUC. Reverting changes.
Training on augumented user 23421 42/50 current_auc = 0.5498774035359402
User 23421 AUC after training: 0.5475545231642793
User 23421 does not improve AUC. Reverting changes.
Training on augumented user 49418 43/50 current_auc = 0.5498774035359402
User 49418 AUC after training: 0.5500064524454769
User 49418 improves AUC. Keeping the model.
Training on augumented user 2545 44/50 current_auc = 0.5500064524454769
User 2545 AUC after training: 0.5496193057168667
User 2545 does not improve AUC. Reverting changes.
Training on augumented user 42141 45/50 current_auc = 0.5500064524454769
User 42141 AUC after training: 0.5491031100787198
User 42141 does not improve AUC. Reverting changes.
Training on augumented user 7801 46/50 current_auc = 0.5500064524454769
User 7801 AUC after training: 0.5498774035359402
User 7801 does not improve AUC. Reverting changes.
Training on augumented user 75665 47/50 current_auc = 0.5500064524454769
User 75665 AUC after training: 0.5500064524454769
User 75665 does not improve AUC. Reverting changes.
Training on augumented user 21658 48/50 current_auc = 0.5500064524454769
User 21658 AUC after training: 0.54949025680733
User 21658 does not improve AUC. Reverting changes.
Training on augumented user 127364 49/50 current_auc = 0.5500064524454769
User 127364 AUC after training: 0.5500064524454769
User 127364 does not improve AUC. Reverting changes.
[2024-12-02 19:46:03.701972] start test user 33161 227/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:04.466115] start test user 33161 227/568 recall augumented users by random, augumented_users = [11686, 3207, 35644, 86135, 15207, 131952, 51412, 123582, 71184, 40434, 93119, 100325, 122667, 109575, 5052, 80760, 17040, 108174, 96894, 100582, 120983, 12492, 61327, 115531, 24674, 26826, 17642, 96819, 58942, 54277, 21444, 108536, 103119, 80955, 108806, 101686, 50481, 2886, 83345, 16765, 14177, 55143, 16879, 49709, 30960, 137739, 122327, 35815, 74651, 84852]
[2024-12-02 19:46:04.489079] user = 33161 Cloud 227/568
[2024-12-02 19:46:04.499141] user = 33161 Local 227/568
[2024-12-02 19:46:04.571148] user = 33161 Local+ 227/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:07.893049] user = 33161 MPDA- 227/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 11686 0/50 current_auc = 1.0
User 11686 AUC after training: 1.0
User 11686 does not improve AUC. Reverting changes.
Training on augumented user 3207 1/50 current_auc = 1.0
User 3207 AUC after training: 1.0
User 3207 does not improve AUC. Reverting changes.
Training on augumented user 35644 2/50 current_auc = 1.0
User 35644 AUC after training: 1.0
User 35644 does not improve AUC. Reverting changes.
Training on augumented user 86135 3/50 current_auc = 1.0
User 86135 AUC after training: 1.0
User 86135 does not improve AUC. Reverting changes.
Training on augumented user 15207 4/50 current_auc = 1.0
User 15207 AUC after training: 1.0
User 15207 does not improve AUC. Reverting changes.
Training on augumented user 131952 5/50 current_auc = 1.0
User 131952 AUC after training: 1.0
User 131952 does not improve AUC. Reverting changes.
Training on augumented user 51412 6/50 current_auc = 1.0
User 51412 AUC after training: 1.0
User 51412 does not improve AUC. Reverting changes.
Training on augumented user 123582 7/50 current_auc = 1.0
User 123582 AUC after training: 1.0
User 123582 does not improve AUC. Reverting changes.
Training on augumented user 71184 8/50 current_auc = 1.0
User 71184 AUC after training: 1.0
User 71184 does not improve AUC. Reverting changes.
Training on augumented user 40434 9/50 current_auc = 1.0
User 40434 AUC after training: 1.0
User 40434 does not improve AUC. Reverting changes.
Training on augumented user 93119 10/50 current_auc = 1.0
User 93119 AUC after training: 1.0
User 93119 does not improve AUC. Reverting changes.
Training on augumented user 100325 11/50 current_auc = 1.0
User 100325 AUC after training: 1.0
User 100325 does not improve AUC. Reverting changes.
Training on augumented user 122667 12/50 current_auc = 1.0
User 122667 AUC after training: 1.0
User 122667 does not improve AUC. Reverting changes.
Training on augumented user 109575 13/50 current_auc = 1.0
User 109575 AUC after training: 1.0
User 109575 does not improve AUC. Reverting changes.
Training on augumented user 5052 14/50 current_auc = 1.0
User 5052 AUC after training: 1.0
User 5052 does not improve AUC. Reverting changes.
Training on augumented user 80760 15/50 current_auc = 1.0
User 80760 AUC after training: 1.0
User 80760 does not improve AUC. Reverting changes.
Training on augumented user 17040 16/50 current_auc = 1.0
User 17040 AUC after training: 1.0
User 17040 does not improve AUC. Reverting changes.
Training on augumented user 108174 17/50 current_auc = 1.0
User 108174 AUC after training: 1.0
User 108174 does not improve AUC. Reverting changes.
Training on augumented user 96894 18/50 current_auc = 1.0
User 96894 AUC after training: 1.0
User 96894 does not improve AUC. Reverting changes.
Training on augumented user 100582 19/50 current_auc = 1.0
User 100582 AUC after training: 1.0
User 100582 does not improve AUC. Reverting changes.
Training on augumented user 120983 20/50 current_auc = 1.0
User 120983 AUC after training: 1.0
User 120983 does not improve AUC. Reverting changes.
Training on augumented user 12492 21/50 current_auc = 1.0
User 12492 AUC after training: 1.0
User 12492 does not improve AUC. Reverting changes.
Training on augumented user 61327 22/50 current_auc = 1.0
User 61327 AUC after training: 1.0
User 61327 does not improve AUC. Reverting changes.
Training on augumented user 115531 23/50 current_auc = 1.0
User 115531 AUC after training: 1.0
User 115531 does not improve AUC. Reverting changes.
Training on augumented user 24674 24/50 current_auc = 1.0
User 24674 AUC after training: 1.0
User 24674 does not improve AUC. Reverting changes.
Training on augumented user 26826 25/50 current_auc = 1.0
User 26826 AUC after training: 1.0
User 26826 does not improve AUC. Reverting changes.
Training on augumented user 17642 26/50 current_auc = 1.0
User 17642 AUC after training: 1.0
User 17642 does not improve AUC. Reverting changes.
Training on augumented user 96819 27/50 current_auc = 1.0
User 96819 AUC after training: 1.0
User 96819 does not improve AUC. Reverting changes.
Training on augumented user 58942 28/50 current_auc = 1.0
User 58942 AUC after training: 1.0
User 58942 does not improve AUC. Reverting changes.
Training on augumented user 54277 29/50 current_auc = 1.0
User 54277 AUC after training: 1.0
User 54277 does not improve AUC. Reverting changes.
Training on augumented user 21444 30/50 current_auc = 1.0
User 21444 AUC after training: 1.0
User 21444 does not improve AUC. Reverting changes.
Training on augumented user 108536 31/50 current_auc = 1.0
User 108536 AUC after training: 1.0
User 108536 does not improve AUC. Reverting changes.
Training on augumented user 103119 32/50 current_auc = 1.0
User 103119 AUC after training: 1.0
User 103119 does not improve AUC. Reverting changes.
Training on augumented user 80955 33/50 current_auc = 1.0
User 80955 AUC after training: 1.0
User 80955 does not improve AUC. Reverting changes.
Training on augumented user 108806 34/50 current_auc = 1.0
User 108806 AUC after training: 1.0
User 108806 does not improve AUC. Reverting changes.
Training on augumented user 101686 35/50 current_auc = 1.0
User 101686 AUC after training: 1.0
User 101686 does not improve AUC. Reverting changes.
Training on augumented user 50481 36/50 current_auc = 1.0
User 50481 AUC after training: 1.0
User 50481 does not improve AUC. Reverting changes.
Training on augumented user 2886 37/50 current_auc = 1.0
User 2886 AUC after training: 1.0
User 2886 does not improve AUC. Reverting changes.
Training on augumented user 83345 38/50 current_auc = 1.0
User 83345 AUC after training: 1.0
User 83345 does not improve AUC. Reverting changes.
Training on augumented user 16765 39/50 current_auc = 1.0
User 16765 AUC after training: 1.0
User 16765 does not improve AUC. Reverting changes.
Training on augumented user 14177 40/50 current_auc = 1.0
User 14177 AUC after training: 1.0
User 14177 does not improve AUC. Reverting changes.
Training on augumented user 55143 41/50 current_auc = 1.0
User 55143 AUC after training: 1.0
User 55143 does not improve AUC. Reverting changes.
Training on augumented user 16879 42/50 current_auc = 1.0
User 16879 AUC after training: 1.0
User 16879 does not improve AUC. Reverting changes.
Training on augumented user 49709 43/50 current_auc = 1.0
User 49709 AUC after training: 1.0
User 49709 does not improve AUC. Reverting changes.
Training on augumented user 30960 44/50 current_auc = 1.0
User 30960 AUC after training: 1.0
User 30960 does not improve AUC. Reverting changes.
Training on augumented user 137739 45/50 current_auc = 1.0
User 137739 AUC after training: 1.0
User 137739 does not improve AUC. Reverting changes.
Training on augumented user 122327 46/50 current_auc = 1.0
User 122327 AUC after training: 1.0
User 122327 does not improve AUC. Reverting changes.
Training on augumented user 35815 47/50 current_auc = 1.0
User 35815 AUC after training: 1.0
User 35815 does not improve AUC. Reverting changes.
Training on augumented user 74651 48/50 current_auc = 1.0
User 74651 AUC after training: 1.0
User 74651 does not improve AUC. Reverting changes.
Training on augumented user 84852 49/50 current_auc = 1.0
User 84852 AUC after training: 1.0
User 84852 does not improve AUC. Reverting changes.
[2024-12-02 19:46:37.503368] start test user 33205 228/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:37.945108] start test user 33205 228/568 recall augumented users by random, augumented_users = [4159, 54413, 75652, 76442, 28897, 69829, 32721, 2834, 15019, 124812, 135222, 133446, 78790, 90795, 74492, 13632, 112006, 10723, 79488, 31939, 37446, 130620, 120953, 131977, 116875, 56045, 48013, 86224, 60099, 79681, 103958, 105500, 103486, 130595, 96265, 129716, 3907, 49620, 38740, 105490, 15118, 111542, 60474, 64396, 82013, 84547, 4969, 59995, 48421, 60074]
[2024-12-02 19:46:37.961138] user = 33205 Cloud 228/568
[2024-12-02 19:46:37.977213] user = 33205 Local 228/568
[2024-12-02 19:46:38.169737] user = 33205 Local+ 228/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:40.846969] user = 33205 MPDA- 228/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6326304106548281
Training on augumented user 4159 0/50 current_auc = 0.6326304106548281
User 4159 AUC after training: 0.6322604513503514
User 4159 does not improve AUC. Reverting changes.
Training on augumented user 54413 1/50 current_auc = 0.6326304106548281
User 54413 AUC after training: 0.632630410654828
User 54413 does not improve AUC. Reverting changes.
Training on augumented user 75652 2/50 current_auc = 0.6326304106548281
User 75652 AUC after training: 0.6315205327413985
User 75652 does not improve AUC. Reverting changes.
Training on augumented user 76442 3/50 current_auc = 0.6326304106548281
User 76442 AUC after training: 0.633370329263781
User 76442 improves AUC. Keeping the model.
Training on augumented user 28897 4/50 current_auc = 0.633370329263781
User 28897 AUC after training: 0.6322604513503515
User 28897 does not improve AUC. Reverting changes.
Training on augumented user 69829 5/50 current_auc = 0.633370329263781
User 69829 AUC after training: 0.6330003699593045
User 69829 does not improve AUC. Reverting changes.
Training on augumented user 32721 6/50 current_auc = 0.633370329263781
User 32721 AUC after training: 0.6403995560488346
User 32721 improves AUC. Keeping the model.
Training on augumented user 2834 7/50 current_auc = 0.6403995560488346
User 2834 AUC after training: 0.634850166481687
User 2834 does not improve AUC. Reverting changes.
Training on augumented user 15019 8/50 current_auc = 0.6403995560488346
User 15019 AUC after training: 0.6403995560488346
User 15019 does not improve AUC. Reverting changes.
Training on augumented user 124812 9/50 current_auc = 0.6403995560488346
User 124812 AUC after training: 0.634110247872734
User 124812 does not improve AUC. Reverting changes.
Training on augumented user 135222 10/50 current_auc = 0.6403995560488346
User 135222 AUC after training: 0.6352201257861635
User 135222 does not improve AUC. Reverting changes.
Training on augumented user 133446 11/50 current_auc = 0.6403995560488346
User 133446 AUC after training: 0.6385497595264521
User 133446 does not improve AUC. Reverting changes.
Training on augumented user 78790 12/50 current_auc = 0.6403995560488346
User 78790 AUC after training: 0.6413244543100259
User 78790 improves AUC. Keeping the model.
Training on augumented user 90795 13/50 current_auc = 0.6413244543100259
User 90795 AUC after training: 0.640584535701073
User 90795 does not improve AUC. Reverting changes.
Training on augumented user 74492 14/50 current_auc = 0.6413244543100259
User 74492 AUC after training: 0.6318904920458749
User 74492 does not improve AUC. Reverting changes.
Training on augumented user 13632 15/50 current_auc = 0.6413244543100259
User 13632 AUC after training: 0.6398446170921199
User 13632 does not improve AUC. Reverting changes.
Training on augumented user 112006 16/50 current_auc = 0.6413244543100259
User 112006 AUC after training: 0.6420643729189789
User 112006 improves AUC. Keeping the model.
Training on augumented user 10723 17/50 current_auc = 0.6420643729189789
User 10723 AUC after training: 0.6407695153533112
User 10723 does not improve AUC. Reverting changes.
Training on augumented user 79488 18/50 current_auc = 0.6420643729189789
User 79488 AUC after training: 0.6389197188309287
User 79488 does not improve AUC. Reverting changes.
Training on augumented user 31939 19/50 current_auc = 0.6420643729189789
User 31939 AUC after training: 0.6400295967443581
User 31939 does not improve AUC. Reverting changes.
Training on augumented user 37446 20/50 current_auc = 0.6420643729189789
User 37446 AUC after training: 0.6385497595264521
User 37446 does not improve AUC. Reverting changes.
Training on augumented user 130620 21/50 current_auc = 0.6420643729189789
User 130620 AUC after training: 0.6389197188309286
User 130620 does not improve AUC. Reverting changes.
Training on augumented user 120953 22/50 current_auc = 0.6420643729189789
User 120953 AUC after training: 0.6407695153533112
User 120953 does not improve AUC. Reverting changes.
Training on augumented user 131977 23/50 current_auc = 0.6420643729189789
User 131977 AUC after training: 0.6396596374398816
User 131977 does not improve AUC. Reverting changes.
Training on augumented user 116875 24/50 current_auc = 0.6420643729189789
User 116875 AUC after training: 0.6311505734369219
User 116875 does not improve AUC. Reverting changes.
Training on augumented user 56045 25/50 current_auc = 0.6420643729189789
User 56045 AUC after training: 0.6381798002219756
User 56045 does not improve AUC. Reverting changes.
Training on augumented user 48013 26/50 current_auc = 0.6420643729189789
User 48013 AUC after training: 0.6407695153533112
User 48013 does not improve AUC. Reverting changes.
Training on augumented user 86224 27/50 current_auc = 0.6420643729189789
User 86224 AUC after training: 0.6372549019607844
User 86224 does not improve AUC. Reverting changes.
Training on augumented user 60099 28/50 current_auc = 0.6420643729189789
User 60099 AUC after training: 0.639289678135405
User 60099 does not improve AUC. Reverting changes.
Training on augumented user 79681 29/50 current_auc = 0.6420643729189789
User 79681 AUC after training: 0.6381798002219755
User 79681 does not improve AUC. Reverting changes.
Training on augumented user 103958 30/50 current_auc = 0.6420643729189789
User 103958 AUC after training: 0.630410654827969
User 103958 does not improve AUC. Reverting changes.
Training on augumented user 105500 31/50 current_auc = 0.6420643729189789
User 105500 AUC after training: 0.6416944136145025
User 105500 does not improve AUC. Reverting changes.
Training on augumented user 103486 32/50 current_auc = 0.6420643729189789
User 103486 AUC after training: 0.6400295967443581
User 103486 does not improve AUC. Reverting changes.
Training on augumented user 130595 33/50 current_auc = 0.6420643729189789
User 130595 AUC after training: 0.6407695153533111
User 130595 does not improve AUC. Reverting changes.
Training on augumented user 96265 34/50 current_auc = 0.6420643729189789
User 96265 AUC after training: 0.6281908990011099
User 96265 does not improve AUC. Reverting changes.
Training on augumented user 129716 35/50 current_auc = 0.6420643729189789
User 129716 AUC after training: 0.6365149833518313
User 129716 does not improve AUC. Reverting changes.
Training on augumented user 3907 36/50 current_auc = 0.6420643729189789
User 3907 AUC after training: 0.6257861635220126
User 3907 does not improve AUC. Reverting changes.
Training on augumented user 49620 37/50 current_auc = 0.6420643729189789
User 49620 AUC after training: 0.6394746577876433
User 49620 does not improve AUC. Reverting changes.
Training on augumented user 38740 38/50 current_auc = 0.6420643729189789
User 38740 AUC after training: 0.6385497595264521
User 38740 does not improve AUC. Reverting changes.
Training on augumented user 105490 39/50 current_auc = 0.6420643729189789
User 105490 AUC after training: 0.6405845357010729
User 105490 does not improve AUC. Reverting changes.
Training on augumented user 15118 40/50 current_auc = 0.6420643729189789
User 15118 AUC after training: 0.6396596374398815
User 15118 does not improve AUC. Reverting changes.
Training on augumented user 111542 41/50 current_auc = 0.6420643729189789
User 111542 AUC after training: 0.6374398816130226
User 111542 does not improve AUC. Reverting changes.
Training on augumented user 60474 42/50 current_auc = 0.6420643729189789
User 60474 AUC after training: 0.6413244543100259
User 60474 does not improve AUC. Reverting changes.
Training on augumented user 64396 43/50 current_auc = 0.6420643729189789
User 64396 AUC after training: 0.636330003699593
User 64396 does not improve AUC. Reverting changes.
Training on augumented user 82013 44/50 current_auc = 0.6420643729189789
User 82013 AUC after training: 0.6403995560488346
User 82013 does not improve AUC. Reverting changes.
Training on augumented user 84547 45/50 current_auc = 0.6420643729189789
User 84547 AUC after training: 0.6372549019607844
User 84547 does not improve AUC. Reverting changes.
Training on augumented user 4969 46/50 current_auc = 0.6420643729189789
User 4969 AUC after training: 0.6381798002219756
User 4969 does not improve AUC. Reverting changes.
Training on augumented user 59995 47/50 current_auc = 0.6420643729189789
User 59995 AUC after training: 0.6407695153533111
User 59995 does not improve AUC. Reverting changes.
Training on augumented user 48421 48/50 current_auc = 0.6420643729189789
User 48421 AUC after training: 0.6400295967443581
User 48421 does not improve AUC. Reverting changes.
Training on augumented user 60074 49/50 current_auc = 0.6420643729189789
User 60074 AUC after training: 0.6403995560488346
User 60074 does not improve AUC. Reverting changes.
[2024-12-02 19:47:12.241112] start test user 33209 229/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:12.656189] start test user 33209 229/568 recall augumented users by random, augumented_users = [58093, 117597, 32530, 64660, 8871, 86036, 135319, 36238, 33214, 111422, 114826, 104681, 32640, 133437, 111144, 26012, 73268, 63382, 102026, 74798, 78004, 118863, 128545, 58341, 36781, 74786, 105332, 58228, 48379, 95982, 114951, 94965, 132385, 78817, 85940, 14886, 47594, 28020, 115538, 50588, 23672, 126976, 61349, 87733, 45436, 33158, 71970, 86420, 31432, 44912]
[2024-12-02 19:47:12.672638] user = 33209 Cloud 229/568
[2024-12-02 19:47:12.731521] user = 33209 Local 229/568
[2024-12-02 19:47:12.822121] user = 33209 Local+ 229/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:15.887692] user = 33209 MPDA- 229/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5970643834093183
Training on augumented user 58093 0/50 current_auc = 0.5970643834093183
User 58093 AUC after training: 0.5973479372845547
User 58093 improves AUC. Keeping the model.
Training on augumented user 117597 1/50 current_auc = 0.5973479372845547
User 117597 AUC after training: 0.5973590570443679
User 117597 improves AUC. Keeping the model.
Training on augumented user 32530 2/50 current_auc = 0.5973590570443679
User 32530 AUC after training: 0.5977760480373624
User 32530 improves AUC. Keeping the model.
Training on augumented user 64660 3/50 current_auc = 0.5977760480373624
User 64660 AUC after training: 0.5976648504392305
User 64660 does not improve AUC. Reverting changes.
Training on augumented user 8871 4/50 current_auc = 0.5977760480373624
User 8871 AUC after training: 0.5977315689981096
User 8871 does not improve AUC. Reverting changes.
Training on augumented user 86036 5/50 current_auc = 0.5977760480373624
User 86036 AUC after training: 0.5972978983653953
User 86036 does not improve AUC. Reverting changes.
Training on augumented user 135319 6/50 current_auc = 0.5977760480373624
User 135319 AUC after training: 0.5971533414878238
User 135319 does not improve AUC. Reverting changes.
Training on augumented user 36238 7/50 current_auc = 0.5977760480373624
User 36238 AUC after training: 0.5979706438340932
User 36238 improves AUC. Keeping the model.
Training on augumented user 33214 8/50 current_auc = 0.5979706438340932
User 33214 AUC after training: 0.5979261647948404
User 33214 does not improve AUC. Reverting changes.
Training on augumented user 111422 9/50 current_auc = 0.5979706438340932
User 111422 AUC after training: 0.5981318803513844
User 111422 improves AUC. Keeping the model.
Training on augumented user 114826 10/50 current_auc = 0.5981318803513844
User 114826 AUC after training: 0.5981541198710109
User 114826 improves AUC. Keeping the model.
Training on augumented user 104681 11/50 current_auc = 0.5981541198710109
User 104681 AUC after training: 0.5962637607027689
User 104681 does not improve AUC. Reverting changes.
Training on augumented user 32640 12/50 current_auc = 0.5981541198710109
User 32640 AUC after training: 0.5971533414878238
User 32640 does not improve AUC. Reverting changes.
Training on augumented user 133437 13/50 current_auc = 0.5981541198710109
User 133437 AUC after training: 0.5983320360280218
User 133437 improves AUC. Keeping the model.
Training on augumented user 111144 14/50 current_auc = 0.5983320360280218
User 111144 AUC after training: 0.5985210719448459
User 111144 improves AUC. Keeping the model.
Training on augumented user 26012 15/50 current_auc = 0.5985210719448459
User 26012 AUC after training: 0.5996108084065385
User 26012 improves AUC. Keeping the model.
Training on augumented user 73268 16/50 current_auc = 0.5996108084065385
User 73268 AUC after training: 0.6004281107528078
User 73268 improves AUC. Keeping the model.
Training on augumented user 63382 17/50 current_auc = 0.6004281107528078
User 63382 AUC after training: 0.600561547870566
User 63382 improves AUC. Keeping the model.
Training on augumented user 102026 18/50 current_auc = 0.600561547870566
User 102026 AUC after training: 0.6010341376626265
User 102026 improves AUC. Keeping the model.
Training on augumented user 74798 19/50 current_auc = 0.6010341376626265
User 74798 AUC after training: 0.6006949849883242
User 74798 does not improve AUC. Reverting changes.
Training on augumented user 78004 20/50 current_auc = 0.6010341376626265
User 78004 AUC after training: 0.6008173023462693
User 78004 does not improve AUC. Reverting changes.
Training on augumented user 118863 21/50 current_auc = 0.6010341376626265
User 118863 AUC after training: 0.600945179584121
User 118863 does not improve AUC. Reverting changes.
Training on augumented user 128545 22/50 current_auc = 0.6010341376626265
User 128545 AUC after training: 0.600795062826643
User 128545 does not improve AUC. Reverting changes.
Training on augumented user 58341 23/50 current_auc = 0.6010341376626265
User 58341 AUC after training: 0.6006783053486044
User 58341 does not improve AUC. Reverting changes.
Training on augumented user 36781 24/50 current_auc = 0.6010341376626265
User 36781 AUC after training: 0.6009007005448683
User 36781 does not improve AUC. Reverting changes.
Training on augumented user 74786 25/50 current_auc = 0.6010341376626265
User 74786 AUC after training: 0.6001501167574781
User 74786 does not improve AUC. Reverting changes.
Training on augumented user 105332 26/50 current_auc = 0.6010341376626265
User 105332 AUC after training: 0.6009118203046814
User 105332 does not improve AUC. Reverting changes.
Training on augumented user 58228 27/50 current_auc = 0.6010341376626265
User 58228 AUC after training: 0.6000444790392527
User 58228 does not improve AUC. Reverting changes.
Training on augumented user 48379 28/50 current_auc = 0.6010341376626265
User 48379 AUC after training: 0.6006894251084176
User 48379 does not improve AUC. Reverting changes.
Training on augumented user 95982 29/50 current_auc = 0.6010341376626265
User 95982 AUC after training: 0.60076726342711
User 95982 does not improve AUC. Reverting changes.
Training on augumented user 114951 30/50 current_auc = 0.6010341376626265
User 114951 AUC after training: 0.60076726342711
User 114951 does not improve AUC. Reverting changes.
Training on augumented user 94965 31/50 current_auc = 0.6010341376626265
User 94965 AUC after training: 0.6008562215056155
User 94965 does not improve AUC. Reverting changes.
Training on augumented user 132385 32/50 current_auc = 0.6010341376626265
User 132385 AUC after training: 0.6006115867897253
User 132385 does not improve AUC. Reverting changes.
Training on augumented user 78817 33/50 current_auc = 0.6010341376626265
User 78817 AUC after training: 0.6007450239074835
User 78817 does not improve AUC. Reverting changes.
Training on augumented user 85940 34/50 current_auc = 0.6010341376626265
User 85940 AUC after training: 0.6010452574224396
User 85940 improves AUC. Keeping the model.
Training on augumented user 14886 35/50 current_auc = 0.6010452574224396
User 14886 AUC after training: 0.6011119759813188
User 14886 improves AUC. Keeping the model.
Training on augumented user 47594 36/50 current_auc = 0.6011119759813188
User 47594 AUC after training: 0.6007561436672968
User 47594 does not improve AUC. Reverting changes.
Training on augumented user 28020 37/50 current_auc = 0.6011119759813188
User 28020 AUC after training: 0.6012565328588902
User 28020 improves AUC. Keeping the model.
Training on augumented user 115538 38/50 current_auc = 0.6012565328588902
User 115538 AUC after training: 0.6008117424663627
User 115538 does not improve AUC. Reverting changes.
Training on augumented user 50588 39/50 current_auc = 0.6012565328588902
User 50588 AUC after training: 0.6009007005448682
User 50588 does not improve AUC. Reverting changes.
Training on augumented user 23672 40/50 current_auc = 0.6012565328588902
User 23672 AUC after training: 0.6020571555654398
User 23672 improves AUC. Keeping the model.
Training on augumented user 126976 41/50 current_auc = 0.6020571555654398
User 126976 AUC after training: 0.6015234070944068
User 126976 does not improve AUC. Reverting changes.
Training on augumented user 61349 42/50 current_auc = 0.6020571555654398
User 61349 AUC after training: 0.6014678082953409
User 61349 does not improve AUC. Reverting changes.
Training on augumented user 87733 43/50 current_auc = 0.6020571555654398
User 87733 AUC after training: 0.6021127543645057
User 87733 improves AUC. Keeping the model.
Training on augumented user 45436 44/50 current_auc = 0.6021127543645057
User 45436 AUC after training: 0.6019681974869343
User 45436 does not improve AUC. Reverting changes.
Training on augumented user 33158 45/50 current_auc = 0.6021127543645057
User 33158 AUC after training: 0.6019348382074947
User 33158 does not improve AUC. Reverting changes.
Training on augumented user 71970 46/50 current_auc = 0.6021127543645057
User 71970 AUC after training: 0.602535305237407
User 71970 improves AUC. Keeping the model.
Training on augumented user 86420 47/50 current_auc = 0.602535305237407
User 86420 AUC after training: 0.6026131435560992
User 86420 improves AUC. Keeping the model.
Training on augumented user 31432 48/50 current_auc = 0.6026131435560992
User 31432 AUC after training: 0.6024963860780607
User 31432 does not improve AUC. Reverting changes.
Training on augumented user 44912 49/50 current_auc = 0.6026131435560992
User 44912 AUC after training: 0.601712443011231
User 44912 does not improve AUC. Reverting changes.
[2024-12-02 19:47:48.952278] start test user 33287 230/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:49.411245] start test user 33287 230/568 recall augumented users by random, augumented_users = [61161, 55282, 113900, 123008, 72795, 32893, 21730, 45504, 124232, 27318, 61584, 98521, 100088, 74132, 14441, 484, 39434, 47347, 25583, 66332, 65638, 93073, 90303, 133035, 70595, 78871, 27186, 37190, 137985, 81930, 29319, 67138, 65967, 24114, 26830, 123076, 129768, 23275, 19262, 134531, 25778, 5352, 100060, 47834, 124737, 57250, 54000, 98631, 120552, 3329]
[2024-12-02 19:47:49.426579] user = 33287 Cloud 230/568
[2024-12-02 19:47:49.436097] user = 33287 Local 230/568
[2024-12-02 19:47:49.495490] user = 33287 Local+ 230/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:51.634980] user = 33287 MPDA- 230/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5480769230769231
Training on augumented user 61161 0/50 current_auc = 0.5480769230769231
User 61161 AUC after training: 0.5480769230769231
User 61161 does not improve AUC. Reverting changes.
Training on augumented user 55282 1/50 current_auc = 0.5480769230769231
User 55282 AUC after training: 0.5480769230769231
User 55282 does not improve AUC. Reverting changes.
Training on augumented user 113900 2/50 current_auc = 0.5480769230769231
User 113900 AUC after training: 0.5480769230769231
User 113900 does not improve AUC. Reverting changes.
Training on augumented user 123008 3/50 current_auc = 0.5480769230769231
User 123008 AUC after training: 0.5384615384615384
User 123008 does not improve AUC. Reverting changes.
Training on augumented user 72795 4/50 current_auc = 0.5480769230769231
User 72795 AUC after training: 0.5480769230769231
User 72795 does not improve AUC. Reverting changes.
Training on augumented user 32893 5/50 current_auc = 0.5480769230769231
User 32893 AUC after training: 0.5480769230769231
User 32893 does not improve AUC. Reverting changes.
Training on augumented user 21730 6/50 current_auc = 0.5480769230769231
User 21730 AUC after training: 0.5480769230769231
User 21730 does not improve AUC. Reverting changes.
Training on augumented user 45504 7/50 current_auc = 0.5480769230769231
User 45504 AUC after training: 0.5480769230769231
User 45504 does not improve AUC. Reverting changes.
Training on augumented user 124232 8/50 current_auc = 0.5480769230769231
User 124232 AUC after training: 0.5480769230769231
User 124232 does not improve AUC. Reverting changes.
Training on augumented user 27318 9/50 current_auc = 0.5480769230769231
User 27318 AUC after training: 0.5480769230769231
User 27318 does not improve AUC. Reverting changes.
Training on augumented user 61584 10/50 current_auc = 0.5480769230769231
User 61584 AUC after training: 0.5480769230769231
User 61584 does not improve AUC. Reverting changes.
Training on augumented user 98521 11/50 current_auc = 0.5480769230769231
User 98521 AUC after training: 0.5480769230769231
User 98521 does not improve AUC. Reverting changes.
Training on augumented user 100088 12/50 current_auc = 0.5480769230769231
User 100088 AUC after training: 0.5480769230769231
User 100088 does not improve AUC. Reverting changes.
Training on augumented user 74132 13/50 current_auc = 0.5480769230769231
User 74132 AUC after training: 0.5384615384615384
User 74132 does not improve AUC. Reverting changes.
Training on augumented user 14441 14/50 current_auc = 0.5480769230769231
User 14441 AUC after training: 0.5480769230769231
User 14441 does not improve AUC. Reverting changes.
Training on augumented user 484 15/50 current_auc = 0.5480769230769231
User 484 AUC after training: 0.5480769230769231
User 484 does not improve AUC. Reverting changes.
Training on augumented user 39434 16/50 current_auc = 0.5480769230769231
User 39434 AUC after training: 0.5480769230769231
User 39434 does not improve AUC. Reverting changes.
Training on augumented user 47347 17/50 current_auc = 0.5480769230769231
User 47347 AUC after training: 0.5480769230769231
User 47347 does not improve AUC. Reverting changes.
Training on augumented user 25583 18/50 current_auc = 0.5480769230769231
User 25583 AUC after training: 0.5480769230769231
User 25583 does not improve AUC. Reverting changes.
Training on augumented user 66332 19/50 current_auc = 0.5480769230769231
User 66332 AUC after training: 0.5480769230769231
User 66332 does not improve AUC. Reverting changes.
Training on augumented user 65638 20/50 current_auc = 0.5480769230769231
User 65638 AUC after training: 0.5480769230769231
User 65638 does not improve AUC. Reverting changes.
Training on augumented user 93073 21/50 current_auc = 0.5480769230769231
User 93073 AUC after training: 0.5480769230769231
User 93073 does not improve AUC. Reverting changes.
Training on augumented user 90303 22/50 current_auc = 0.5480769230769231
User 90303 AUC after training: 0.5480769230769231
User 90303 does not improve AUC. Reverting changes.
Training on augumented user 133035 23/50 current_auc = 0.5480769230769231
User 133035 AUC after training: 0.5480769230769231
User 133035 does not improve AUC. Reverting changes.
Training on augumented user 70595 24/50 current_auc = 0.5480769230769231
User 70595 AUC after training: 0.5384615384615384
User 70595 does not improve AUC. Reverting changes.
Training on augumented user 78871 25/50 current_auc = 0.5480769230769231
User 78871 AUC after training: 0.5480769230769231
User 78871 does not improve AUC. Reverting changes.
Training on augumented user 27186 26/50 current_auc = 0.5480769230769231
User 27186 AUC after training: 0.5384615384615384
User 27186 does not improve AUC. Reverting changes.
Training on augumented user 37190 27/50 current_auc = 0.5480769230769231
User 37190 AUC after training: 0.5480769230769231
User 37190 does not improve AUC. Reverting changes.
Training on augumented user 137985 28/50 current_auc = 0.5480769230769231
User 137985 AUC after training: 0.5480769230769231
User 137985 does not improve AUC. Reverting changes.
Training on augumented user 81930 29/50 current_auc = 0.5480769230769231
User 81930 AUC after training: 0.5480769230769231
User 81930 does not improve AUC. Reverting changes.
Training on augumented user 29319 30/50 current_auc = 0.5480769230769231
User 29319 AUC after training: 0.5480769230769231
User 29319 does not improve AUC. Reverting changes.
Training on augumented user 67138 31/50 current_auc = 0.5480769230769231
User 67138 AUC after training: 0.5480769230769231
User 67138 does not improve AUC. Reverting changes.
Training on augumented user 65967 32/50 current_auc = 0.5480769230769231
User 65967 AUC after training: 0.5384615384615384
User 65967 does not improve AUC. Reverting changes.
Training on augumented user 24114 33/50 current_auc = 0.5480769230769231
User 24114 AUC after training: 0.5384615384615384
User 24114 does not improve AUC. Reverting changes.
Training on augumented user 26830 34/50 current_auc = 0.5480769230769231
User 26830 AUC after training: 0.5480769230769231
User 26830 does not improve AUC. Reverting changes.
Training on augumented user 123076 35/50 current_auc = 0.5480769230769231
User 123076 AUC after training: 0.5480769230769231
User 123076 does not improve AUC. Reverting changes.
Training on augumented user 129768 36/50 current_auc = 0.5480769230769231
User 129768 AUC after training: 0.5480769230769231
User 129768 does not improve AUC. Reverting changes.
Training on augumented user 23275 37/50 current_auc = 0.5480769230769231
User 23275 AUC after training: 0.5480769230769231
User 23275 does not improve AUC. Reverting changes.
Training on augumented user 19262 38/50 current_auc = 0.5480769230769231
User 19262 AUC after training: 0.5480769230769231
User 19262 does not improve AUC. Reverting changes.
Training on augumented user 134531 39/50 current_auc = 0.5480769230769231
User 134531 AUC after training: 0.5480769230769231
User 134531 does not improve AUC. Reverting changes.
Training on augumented user 25778 40/50 current_auc = 0.5480769230769231
User 25778 AUC after training: 0.5480769230769231
User 25778 does not improve AUC. Reverting changes.
Training on augumented user 5352 41/50 current_auc = 0.5480769230769231
User 5352 AUC after training: 0.5384615384615384
User 5352 does not improve AUC. Reverting changes.
Training on augumented user 100060 42/50 current_auc = 0.5480769230769231
User 100060 AUC after training: 0.5480769230769231
User 100060 does not improve AUC. Reverting changes.
Training on augumented user 47834 43/50 current_auc = 0.5480769230769231
User 47834 AUC after training: 0.5384615384615384
User 47834 does not improve AUC. Reverting changes.
Training on augumented user 124737 44/50 current_auc = 0.5480769230769231
User 124737 AUC after training: 0.5480769230769231
User 124737 does not improve AUC. Reverting changes.
Training on augumented user 57250 45/50 current_auc = 0.5480769230769231
User 57250 AUC after training: 0.5480769230769231
User 57250 does not improve AUC. Reverting changes.
Training on augumented user 54000 46/50 current_auc = 0.5480769230769231
User 54000 AUC after training: 0.5480769230769231
User 54000 does not improve AUC. Reverting changes.
Training on augumented user 98631 47/50 current_auc = 0.5480769230769231
User 98631 AUC after training: 0.5384615384615384
User 98631 does not improve AUC. Reverting changes.
Training on augumented user 120552 48/50 current_auc = 0.5480769230769231
User 120552 AUC after training: 0.5480769230769231
User 120552 does not improve AUC. Reverting changes.
Training on augumented user 3329 49/50 current_auc = 0.5480769230769231
User 3329 AUC after training: 0.5384615384615384
User 3329 does not improve AUC. Reverting changes.
[2024-12-02 19:48:22.426214] start test user 33319 231/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:22.839893] start test user 33319 231/568 recall augumented users by random, augumented_users = [76209, 35861, 80457, 30867, 70534, 9124, 38670, 77221, 120929, 90137, 105651, 13640, 1007, 27509, 53891, 108759, 115732, 45576, 118966, 24045, 108887, 30829, 10050, 133940, 80713, 23685, 30082, 73631, 122439, 81936, 38062, 109529, 36932, 32943, 124626, 54198, 98261, 11768, 79089, 99691, 95873, 616, 42609, 4956, 42055, 92579, 40277, 90499, 75661, 58787]
[2024-12-02 19:48:22.856286] user = 33319 Cloud 231/568
[2024-12-02 19:48:22.870873] user = 33319 Local 231/568
[2024-12-02 19:48:23.002373] user = 33319 Local+ 231/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:24.335505] user = 33319 MPDA- 231/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5729949874686716
Training on augumented user 76209 0/50 current_auc = 0.5729949874686716
User 76209 AUC after training: 0.5701754385964912
User 76209 does not improve AUC. Reverting changes.
Training on augumented user 35861 1/50 current_auc = 0.5729949874686716
User 35861 AUC after training: 0.5714285714285714
User 35861 does not improve AUC. Reverting changes.
Training on augumented user 80457 2/50 current_auc = 0.5729949874686716
User 80457 AUC after training: 0.5726817042606516
User 80457 does not improve AUC. Reverting changes.
Training on augumented user 30867 3/50 current_auc = 0.5729949874686716
User 30867 AUC after training: 0.5726817042606517
User 30867 does not improve AUC. Reverting changes.
Training on augumented user 70534 4/50 current_auc = 0.5729949874686716
User 70534 AUC after training: 0.5742481203007519
User 70534 improves AUC. Keeping the model.
Training on augumented user 9124 5/50 current_auc = 0.5742481203007519
User 9124 AUC after training: 0.5742481203007519
User 9124 does not improve AUC. Reverting changes.
Training on augumented user 38670 6/50 current_auc = 0.5742481203007519
User 38670 AUC after training: 0.5742481203007519
User 38670 does not improve AUC. Reverting changes.
Training on augumented user 77221 7/50 current_auc = 0.5742481203007519
User 77221 AUC after training: 0.5704887218045113
User 77221 does not improve AUC. Reverting changes.
Training on augumented user 120929 8/50 current_auc = 0.5742481203007519
User 120929 AUC after training: 0.5726817042606516
User 120929 does not improve AUC. Reverting changes.
Training on augumented user 90137 9/50 current_auc = 0.5742481203007519
User 90137 AUC after training: 0.5733082706766917
User 90137 does not improve AUC. Reverting changes.
Training on augumented user 105651 10/50 current_auc = 0.5742481203007519
User 105651 AUC after training: 0.5736215538847118
User 105651 does not improve AUC. Reverting changes.
Training on augumented user 13640 11/50 current_auc = 0.5742481203007519
User 13640 AUC after training: 0.5736215538847118
User 13640 does not improve AUC. Reverting changes.
Training on augumented user 1007 12/50 current_auc = 0.5742481203007519
User 1007 AUC after training: 0.5704887218045113
User 1007 does not improve AUC. Reverting changes.
Training on augumented user 27509 13/50 current_auc = 0.5742481203007519
User 27509 AUC after training: 0.5742481203007519
User 27509 does not improve AUC. Reverting changes.
Training on augumented user 53891 14/50 current_auc = 0.5742481203007519
User 53891 AUC after training: 0.5726817042606517
User 53891 does not improve AUC. Reverting changes.
Training on augumented user 108759 15/50 current_auc = 0.5742481203007519
User 108759 AUC after training: 0.5726817042606517
User 108759 does not improve AUC. Reverting changes.
Training on augumented user 115732 16/50 current_auc = 0.5742481203007519
User 115732 AUC after training: 0.5729949874686717
User 115732 does not improve AUC. Reverting changes.
Training on augumented user 45576 17/50 current_auc = 0.5742481203007519
User 45576 AUC after training: 0.5729949874686717
User 45576 does not improve AUC. Reverting changes.
Training on augumented user 118966 18/50 current_auc = 0.5742481203007519
User 118966 AUC after training: 0.574874686716792
User 118966 improves AUC. Keeping the model.
Training on augumented user 24045 19/50 current_auc = 0.574874686716792
User 24045 AUC after training: 0.5739348370927319
User 24045 does not improve AUC. Reverting changes.
Training on augumented user 108887 20/50 current_auc = 0.574874686716792
User 108887 AUC after training: 0.5720551378446116
User 108887 does not improve AUC. Reverting changes.
Training on augumented user 30829 21/50 current_auc = 0.574874686716792
User 30829 AUC after training: 0.5698621553884712
User 30829 does not improve AUC. Reverting changes.
Training on augumented user 10050 22/50 current_auc = 0.574874686716792
User 10050 AUC after training: 0.5739348370927319
User 10050 does not improve AUC. Reverting changes.
Training on augumented user 133940 23/50 current_auc = 0.574874686716792
User 133940 AUC after training: 0.5739348370927319
User 133940 does not improve AUC. Reverting changes.
Training on augumented user 80713 24/50 current_auc = 0.574874686716792
User 80713 AUC after training: 0.5723684210526316
User 80713 does not improve AUC. Reverting changes.
Training on augumented user 23685 25/50 current_auc = 0.574874686716792
User 23685 AUC after training: 0.5742481203007519
User 23685 does not improve AUC. Reverting changes.
Training on augumented user 30082 26/50 current_auc = 0.574874686716792
User 30082 AUC after training: 0.5739348370927319
User 30082 does not improve AUC. Reverting changes.
Training on augumented user 73631 27/50 current_auc = 0.574874686716792
User 73631 AUC after training: 0.5726817042606517
User 73631 does not improve AUC. Reverting changes.
Training on augumented user 122439 28/50 current_auc = 0.574874686716792
User 122439 AUC after training: 0.5733082706766918
User 122439 does not improve AUC. Reverting changes.
Training on augumented user 81936 29/50 current_auc = 0.574874686716792
User 81936 AUC after training: 0.5704887218045113
User 81936 does not improve AUC. Reverting changes.
Training on augumented user 38062 30/50 current_auc = 0.574874686716792
User 38062 AUC after training: 0.574874686716792
User 38062 does not improve AUC. Reverting changes.
Training on augumented user 109529 31/50 current_auc = 0.574874686716792
User 109529 AUC after training: 0.575187969924812
User 109529 improves AUC. Keeping the model.
Training on augumented user 36932 32/50 current_auc = 0.575187969924812
User 36932 AUC after training: 0.5720551378446115
User 36932 does not improve AUC. Reverting changes.
Training on augumented user 32943 33/50 current_auc = 0.575187969924812
User 32943 AUC after training: 0.5736215538847118
User 32943 does not improve AUC. Reverting changes.
Training on augumented user 124626 34/50 current_auc = 0.575187969924812
User 124626 AUC after training: 0.5739348370927319
User 124626 does not improve AUC. Reverting changes.
Training on augumented user 54198 35/50 current_auc = 0.575187969924812
User 54198 AUC after training: 0.574874686716792
User 54198 does not improve AUC. Reverting changes.
Training on augumented user 98261 36/50 current_auc = 0.575187969924812
User 98261 AUC after training: 0.5733082706766918
User 98261 does not improve AUC. Reverting changes.
Training on augumented user 11768 37/50 current_auc = 0.575187969924812
User 11768 AUC after training: 0.5736215538847118
User 11768 does not improve AUC. Reverting changes.
Training on augumented user 79089 38/50 current_auc = 0.575187969924812
User 79089 AUC after training: 0.5742481203007519
User 79089 does not improve AUC. Reverting changes.
Training on augumented user 99691 39/50 current_auc = 0.575187969924812
User 99691 AUC after training: 0.5733082706766918
User 99691 does not improve AUC. Reverting changes.
Training on augumented user 95873 40/50 current_auc = 0.575187969924812
User 95873 AUC after training: 0.5739348370927317
User 95873 does not improve AUC. Reverting changes.
Training on augumented user 616 41/50 current_auc = 0.575187969924812
User 616 AUC after training: 0.5736215538847118
User 616 does not improve AUC. Reverting changes.
Training on augumented user 42609 42/50 current_auc = 0.575187969924812
User 42609 AUC after training: 0.5739348370927319
User 42609 does not improve AUC. Reverting changes.
Training on augumented user 4956 43/50 current_auc = 0.575187969924812
User 4956 AUC after training: 0.5745614035087719
User 4956 does not improve AUC. Reverting changes.
Training on augumented user 42055 44/50 current_auc = 0.575187969924812
User 42055 AUC after training: 0.5742481203007519
User 42055 does not improve AUC. Reverting changes.
Training on augumented user 92579 45/50 current_auc = 0.575187969924812
User 92579 AUC after training: 0.575187969924812
User 92579 does not improve AUC. Reverting changes.
Training on augumented user 40277 46/50 current_auc = 0.575187969924812
User 40277 AUC after training: 0.5739348370927319
User 40277 does not improve AUC. Reverting changes.
Training on augumented user 90499 47/50 current_auc = 0.575187969924812
User 90499 AUC after training: 0.575187969924812
User 90499 does not improve AUC. Reverting changes.
Training on augumented user 75661 48/50 current_auc = 0.575187969924812
User 75661 AUC after training: 0.5729949874686717
User 75661 does not improve AUC. Reverting changes.
Training on augumented user 58787 49/50 current_auc = 0.575187969924812
User 58787 AUC after training: 0.575187969924812
User 58787 does not improve AUC. Reverting changes.
[2024-12-02 19:48:57.899764] start test user 33323 232/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:58.500090] start test user 33323 232/568 recall augumented users by random, augumented_users = [97595, 98096, 13717, 38719, 108189, 91118, 10165, 72249, 75642, 128542, 107861, 15994, 749, 86386, 15437, 102801, 130559, 66246, 92157, 114708, 41474, 44407, 50027, 20729, 20947, 34565, 104447, 42066, 114126, 116123, 11683, 31533, 86115, 82958, 112642, 70793, 131008, 48753, 20749, 29459, 99979, 18253, 118575, 25602, 46438, 32643, 85706, 99125, 12358, 8829]
[2024-12-02 19:48:58.515637] user = 33323 Cloud 232/568
[2024-12-02 19:48:58.585434] user = 33323 Local 232/568
[2024-12-02 19:48:58.688793] user = 33323 Local+ 232/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:00.729470] user = 33323 MPDA- 232/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.41846522781774576
Training on augumented user 97595 0/50 current_auc = 0.41846522781774576
User 97595 AUC after training: 0.41828537170263785
User 97595 does not improve AUC. Reverting changes.
Training on augumented user 98096 1/50 current_auc = 0.41846522781774576
User 98096 AUC after training: 0.418705035971223
User 98096 improves AUC. Keeping the model.
Training on augumented user 13717 2/50 current_auc = 0.418705035971223
User 13717 AUC after training: 0.41792565947242205
User 13717 does not improve AUC. Reverting changes.
Training on augumented user 38719 3/50 current_auc = 0.418705035971223
User 38719 AUC after training: 0.41720623501199033
User 38719 does not improve AUC. Reverting changes.
Training on augumented user 108189 4/50 current_auc = 0.418705035971223
User 108189 AUC after training: 0.41888489208633095
User 108189 improves AUC. Keeping the model.
Training on augumented user 91118 5/50 current_auc = 0.41888489208633095
User 91118 AUC after training: 0.4182254196642686
User 91118 does not improve AUC. Reverting changes.
Training on augumented user 10165 6/50 current_auc = 0.41888489208633095
User 10165 AUC after training: 0.4188249400479616
User 10165 does not improve AUC. Reverting changes.
Training on augumented user 72249 7/50 current_auc = 0.41888489208633095
User 72249 AUC after training: 0.41798561151079133
User 72249 does not improve AUC. Reverting changes.
Training on augumented user 75642 8/50 current_auc = 0.41888489208633095
User 75642 AUC after training: 0.41894484412470023
User 75642 improves AUC. Keeping the model.
Training on augumented user 128542 9/50 current_auc = 0.41894484412470023
User 128542 AUC after training: 0.4179856115107914
User 128542 does not improve AUC. Reverting changes.
Training on augumented user 107861 10/50 current_auc = 0.41894484412470023
User 107861 AUC after training: 0.4188249400479616
User 107861 does not improve AUC. Reverting changes.
Training on augumented user 15994 11/50 current_auc = 0.41894484412470023
User 15994 AUC after training: 0.4186450839328537
User 15994 does not improve AUC. Reverting changes.
Training on augumented user 749 12/50 current_auc = 0.41894484412470023
User 749 AUC after training: 0.41882494004796156
User 749 does not improve AUC. Reverting changes.
Training on augumented user 86386 13/50 current_auc = 0.41894484412470023
User 86386 AUC after training: 0.4184052757793765
User 86386 does not improve AUC. Reverting changes.
Training on augumented user 15437 14/50 current_auc = 0.41894484412470023
User 15437 AUC after training: 0.41966426858513195
User 15437 improves AUC. Keeping the model.
Training on augumented user 102801 15/50 current_auc = 0.41966426858513195
User 102801 AUC after training: 0.41972422062350123
User 102801 improves AUC. Keeping the model.
Training on augumented user 130559 16/50 current_auc = 0.41972422062350123
User 130559 AUC after training: 0.4195443645083933
User 130559 does not improve AUC. Reverting changes.
Training on augumented user 66246 17/50 current_auc = 0.41972422062350123
User 66246 AUC after training: 0.41852517985611515
User 66246 does not improve AUC. Reverting changes.
Training on augumented user 92157 18/50 current_auc = 0.41972422062350123
User 92157 AUC after training: 0.41918465227817747
User 92157 does not improve AUC. Reverting changes.
Training on augumented user 114708 19/50 current_auc = 0.41972422062350123
User 114708 AUC after training: 0.4189448441247002
User 114708 does not improve AUC. Reverting changes.
Training on augumented user 41474 20/50 current_auc = 0.41972422062350123
User 41474 AUC after training: 0.41954436450839333
User 41474 does not improve AUC. Reverting changes.
Training on augumented user 44407 21/50 current_auc = 0.41972422062350123
User 44407 AUC after training: 0.4194244604316547
User 44407 does not improve AUC. Reverting changes.
Training on augumented user 50027 22/50 current_auc = 0.41972422062350123
User 50027 AUC after training: 0.41972422062350123
User 50027 does not improve AUC. Reverting changes.
Training on augumented user 20729 23/50 current_auc = 0.41972422062350123
User 20729 AUC after training: 0.4193645083932854
User 20729 does not improve AUC. Reverting changes.
Training on augumented user 20947 24/50 current_auc = 0.41972422062350123
User 20947 AUC after training: 0.4197841726618705
User 20947 improves AUC. Keeping the model.
Training on augumented user 34565 25/50 current_auc = 0.4197841726618705
User 34565 AUC after training: 0.4203237410071943
User 34565 improves AUC. Keeping the model.
Training on augumented user 104447 26/50 current_auc = 0.4203237410071943
User 104447 AUC after training: 0.4208633093525179
User 104447 improves AUC. Keeping the model.
Training on augumented user 42066 27/50 current_auc = 0.4208633093525179
User 42066 AUC after training: 0.420083932853717
User 42066 does not improve AUC. Reverting changes.
Training on augumented user 114126 28/50 current_auc = 0.4208633093525179
User 114126 AUC after training: 0.4207434052757794
User 114126 does not improve AUC. Reverting changes.
Training on augumented user 116123 29/50 current_auc = 0.4208633093525179
User 116123 AUC after training: 0.42116306954436455
User 116123 improves AUC. Keeping the model.
Training on augumented user 11683 30/50 current_auc = 0.42116306954436455
User 11683 AUC after training: 0.42080335731414864
User 11683 does not improve AUC. Reverting changes.
Training on augumented user 31533 31/50 current_auc = 0.42116306954436455
User 31533 AUC after training: 0.42044364508393284
User 31533 does not improve AUC. Reverting changes.
Training on augumented user 86115 32/50 current_auc = 0.42116306954436455
User 86115 AUC after training: 0.42116306954436455
User 86115 does not improve AUC. Reverting changes.
Training on augumented user 82958 33/50 current_auc = 0.42116306954436455
User 82958 AUC after training: 0.41840527577937653
User 82958 does not improve AUC. Reverting changes.
Training on augumented user 112642 34/50 current_auc = 0.42116306954436455
User 112642 AUC after training: 0.42074340527577936
User 112642 does not improve AUC. Reverting changes.
Training on augumented user 70793 35/50 current_auc = 0.42116306954436455
User 70793 AUC after training: 0.4209232613908873
User 70793 does not improve AUC. Reverting changes.
Training on augumented user 131008 36/50 current_auc = 0.42116306954436455
User 131008 AUC after training: 0.4201438848920863
User 131008 does not improve AUC. Reverting changes.
Training on augumented user 48753 37/50 current_auc = 0.42116306954436455
User 48753 AUC after training: 0.4191846522781774
User 48753 does not improve AUC. Reverting changes.
Training on augumented user 20749 38/50 current_auc = 0.42116306954436455
User 20749 AUC after training: 0.4208633093525179
User 20749 does not improve AUC. Reverting changes.
Training on augumented user 29459 39/50 current_auc = 0.42116306954436455
User 29459 AUC after training: 0.4209232613908873
User 29459 does not improve AUC. Reverting changes.
Training on augumented user 99979 40/50 current_auc = 0.42116306954436455
User 99979 AUC after training: 0.42092326139088726
User 99979 does not improve AUC. Reverting changes.
Training on augumented user 18253 41/50 current_auc = 0.42116306954436455
User 18253 AUC after training: 0.4213429256594724
User 18253 improves AUC. Keeping the model.
Training on augumented user 118575 42/50 current_auc = 0.4213429256594724
User 118575 AUC after training: 0.4205635491606715
User 118575 does not improve AUC. Reverting changes.
Training on augumented user 25602 43/50 current_auc = 0.4213429256594724
User 25602 AUC after training: 0.42068345323741
User 25602 does not improve AUC. Reverting changes.
Training on augumented user 46438 44/50 current_auc = 0.4213429256594724
User 46438 AUC after training: 0.42002398081534775
User 46438 does not improve AUC. Reverting changes.
Training on augumented user 32643 45/50 current_auc = 0.4213429256594724
User 32643 AUC after training: 0.4206834532374101
User 32643 does not improve AUC. Reverting changes.
Training on augumented user 85706 46/50 current_auc = 0.4213429256594724
User 85706 AUC after training: 0.4207434052757794
User 85706 does not improve AUC. Reverting changes.
Training on augumented user 99125 47/50 current_auc = 0.4213429256594724
User 99125 AUC after training: 0.42074340527577936
User 99125 does not improve AUC. Reverting changes.
Training on augumented user 12358 48/50 current_auc = 0.4213429256594724
User 12358 AUC after training: 0.4206834532374101
User 12358 does not improve AUC. Reverting changes.
Training on augumented user 8829 49/50 current_auc = 0.4213429256594724
User 8829 AUC after training: 0.42134292565947246
User 8829 improves AUC. Keeping the model.
[2024-12-02 19:49:34.494617] start test user 33340 233/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:34.931454] start test user 33340 233/568 recall augumented users by random, augumented_users = [96416, 100916, 116357, 76718, 16768, 35938, 31825, 137856, 8354, 1100, 134047, 15224, 95431, 27663, 114060, 104937, 130374, 91843, 99784, 98622, 109198, 120533, 84483, 61051, 46791, 96746, 120553, 74265, 130030, 15558, 35622, 13791, 72362, 73358, 22662, 77602, 118036, 20226, 98317, 96688, 75243, 120242, 100642, 31109, 110048, 78998, 121556, 117543, 17992, 11407]
[2024-12-02 19:49:34.945875] user = 33340 Cloud 233/568
[2024-12-02 19:49:34.955286] user = 33340 Local 233/568
[2024-12-02 19:49:34.975470] user = 33340 Local+ 233/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:36.857065] user = 33340 MPDA- 233/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6031746031746033
Training on augumented user 96416 0/50 current_auc = 0.6031746031746033
User 96416 AUC after training: 0.5952380952380952
User 96416 does not improve AUC. Reverting changes.
Training on augumented user 100916 1/50 current_auc = 0.6031746031746033
User 100916 AUC after training: 0.6031746031746033
User 100916 does not improve AUC. Reverting changes.
Training on augumented user 116357 2/50 current_auc = 0.6031746031746033
User 116357 AUC after training: 0.6111111111111112
User 116357 improves AUC. Keeping the model.
Training on augumented user 76718 3/50 current_auc = 0.6111111111111112
User 76718 AUC after training: 0.6111111111111112
User 76718 does not improve AUC. Reverting changes.
Training on augumented user 16768 4/50 current_auc = 0.6111111111111112
User 16768 AUC after training: 0.6031746031746033
User 16768 does not improve AUC. Reverting changes.
Training on augumented user 35938 5/50 current_auc = 0.6111111111111112
User 35938 AUC after training: 0.6111111111111112
User 35938 does not improve AUC. Reverting changes.
Training on augumented user 31825 6/50 current_auc = 0.6111111111111112
User 31825 AUC after training: 0.6111111111111112
User 31825 does not improve AUC. Reverting changes.
Training on augumented user 137856 7/50 current_auc = 0.6111111111111112
User 137856 AUC after training: 0.6031746031746033
User 137856 does not improve AUC. Reverting changes.
Training on augumented user 8354 8/50 current_auc = 0.6111111111111112
User 8354 AUC after training: 0.5793650793650794
User 8354 does not improve AUC. Reverting changes.
Training on augumented user 1100 9/50 current_auc = 0.6111111111111112
User 1100 AUC after training: 0.6111111111111112
User 1100 does not improve AUC. Reverting changes.
Training on augumented user 134047 10/50 current_auc = 0.6111111111111112
User 134047 AUC after training: 0.6190476190476191
User 134047 improves AUC. Keeping the model.
Training on augumented user 15224 11/50 current_auc = 0.6190476190476191
User 15224 AUC after training: 0.6031746031746033
User 15224 does not improve AUC. Reverting changes.
Training on augumented user 95431 12/50 current_auc = 0.6190476190476191
User 95431 AUC after training: 0.6190476190476191
User 95431 does not improve AUC. Reverting changes.
Training on augumented user 27663 13/50 current_auc = 0.6190476190476191
User 27663 AUC after training: 0.6190476190476191
User 27663 does not improve AUC. Reverting changes.
Training on augumented user 114060 14/50 current_auc = 0.6190476190476191
User 114060 AUC after training: 0.6031746031746033
User 114060 does not improve AUC. Reverting changes.
Training on augumented user 104937 15/50 current_auc = 0.6190476190476191
User 104937 AUC after training: 0.6190476190476191
User 104937 does not improve AUC. Reverting changes.
Training on augumented user 130374 16/50 current_auc = 0.6190476190476191
User 130374 AUC after training: 0.5952380952380952
User 130374 does not improve AUC. Reverting changes.
Training on augumented user 91843 17/50 current_auc = 0.6190476190476191
User 91843 AUC after training: 0.6031746031746033
User 91843 does not improve AUC. Reverting changes.
Training on augumented user 99784 18/50 current_auc = 0.6190476190476191
User 99784 AUC after training: 0.6190476190476191
User 99784 does not improve AUC. Reverting changes.
Training on augumented user 98622 19/50 current_auc = 0.6190476190476191
User 98622 AUC after training: 0.6190476190476191
User 98622 does not improve AUC. Reverting changes.
Training on augumented user 109198 20/50 current_auc = 0.6190476190476191
User 109198 AUC after training: 0.6190476190476191
User 109198 does not improve AUC. Reverting changes.
Training on augumented user 120533 21/50 current_auc = 0.6190476190476191
User 120533 AUC after training: 0.6031746031746033
User 120533 does not improve AUC. Reverting changes.
Training on augumented user 84483 22/50 current_auc = 0.6190476190476191
User 84483 AUC after training: 0.6031746031746033
User 84483 does not improve AUC. Reverting changes.
Training on augumented user 61051 23/50 current_auc = 0.6190476190476191
User 61051 AUC after training: 0.6031746031746033
User 61051 does not improve AUC. Reverting changes.
Training on augumented user 46791 24/50 current_auc = 0.6190476190476191
User 46791 AUC after training: 0.626984126984127
User 46791 improves AUC. Keeping the model.
Training on augumented user 96746 25/50 current_auc = 0.626984126984127
User 96746 AUC after training: 0.626984126984127
User 96746 does not improve AUC. Reverting changes.
Training on augumented user 120553 26/50 current_auc = 0.626984126984127
User 120553 AUC after training: 0.6031746031746033
User 120553 does not improve AUC. Reverting changes.
Training on augumented user 74265 27/50 current_auc = 0.626984126984127
User 74265 AUC after training: 0.5873015873015872
User 74265 does not improve AUC. Reverting changes.
Training on augumented user 130030 28/50 current_auc = 0.626984126984127
User 130030 AUC after training: 0.5952380952380952
User 130030 does not improve AUC. Reverting changes.
Training on augumented user 15558 29/50 current_auc = 0.626984126984127
User 15558 AUC after training: 0.6111111111111112
User 15558 does not improve AUC. Reverting changes.
Training on augumented user 35622 30/50 current_auc = 0.626984126984127
User 35622 AUC after training: 0.6190476190476191
User 35622 does not improve AUC. Reverting changes.
Training on augumented user 13791 31/50 current_auc = 0.626984126984127
User 13791 AUC after training: 0.6190476190476191
User 13791 does not improve AUC. Reverting changes.
Training on augumented user 72362 32/50 current_auc = 0.626984126984127
User 72362 AUC after training: 0.6190476190476191
User 72362 does not improve AUC. Reverting changes.
Training on augumented user 73358 33/50 current_auc = 0.626984126984127
User 73358 AUC after training: 0.626984126984127
User 73358 does not improve AUC. Reverting changes.
Training on augumented user 22662 34/50 current_auc = 0.626984126984127
User 22662 AUC after training: 0.6031746031746033
User 22662 does not improve AUC. Reverting changes.
Training on augumented user 77602 35/50 current_auc = 0.626984126984127
User 77602 AUC after training: 0.6190476190476191
User 77602 does not improve AUC. Reverting changes.
Training on augumented user 118036 36/50 current_auc = 0.626984126984127
User 118036 AUC after training: 0.6190476190476191
User 118036 does not improve AUC. Reverting changes.
Training on augumented user 20226 37/50 current_auc = 0.626984126984127
User 20226 AUC after training: 0.5952380952380952
User 20226 does not improve AUC. Reverting changes.
Training on augumented user 98317 38/50 current_auc = 0.626984126984127
User 98317 AUC after training: 0.6190476190476191
User 98317 does not improve AUC. Reverting changes.
Training on augumented user 96688 39/50 current_auc = 0.626984126984127
User 96688 AUC after training: 0.6111111111111112
User 96688 does not improve AUC. Reverting changes.
Training on augumented user 75243 40/50 current_auc = 0.626984126984127
User 75243 AUC after training: 0.6111111111111112
User 75243 does not improve AUC. Reverting changes.
Training on augumented user 120242 41/50 current_auc = 0.626984126984127
User 120242 AUC after training: 0.6031746031746033
User 120242 does not improve AUC. Reverting changes.
Training on augumented user 100642 42/50 current_auc = 0.626984126984127
User 100642 AUC after training: 0.626984126984127
User 100642 does not improve AUC. Reverting changes.
Training on augumented user 31109 43/50 current_auc = 0.626984126984127
User 31109 AUC after training: 0.6111111111111112
User 31109 does not improve AUC. Reverting changes.
Training on augumented user 110048 44/50 current_auc = 0.626984126984127
User 110048 AUC after training: 0.626984126984127
User 110048 does not improve AUC. Reverting changes.
Training on augumented user 78998 45/50 current_auc = 0.626984126984127
User 78998 AUC after training: 0.6111111111111112
User 78998 does not improve AUC. Reverting changes.
Training on augumented user 121556 46/50 current_auc = 0.626984126984127
User 121556 AUC after training: 0.626984126984127
User 121556 does not improve AUC. Reverting changes.
Training on augumented user 117543 47/50 current_auc = 0.626984126984127
User 117543 AUC after training: 0.6111111111111112
User 117543 does not improve AUC. Reverting changes.
Training on augumented user 17992 48/50 current_auc = 0.626984126984127
User 17992 AUC after training: 0.6190476190476191
User 17992 does not improve AUC. Reverting changes.
Training on augumented user 11407 49/50 current_auc = 0.626984126984127
User 11407 AUC after training: 0.6111111111111112
User 11407 does not improve AUC. Reverting changes.
[2024-12-02 19:50:07.618486] start test user 33440 234/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:08.192217] start test user 33440 234/568 recall augumented users by random, augumented_users = [132962, 90077, 39197, 68434, 47132, 96542, 132515, 13276, 897, 65275, 128479, 33552, 115340, 104940, 137787, 43143, 18947, 79362, 96361, 11722, 5276, 41620, 124360, 97539, 18246, 124573, 138256, 41271, 14963, 48778, 13951, 22153, 26240, 29932, 48989, 33268, 43336, 5066, 89485, 48335, 115224, 24669, 130166, 2967, 46307, 90198, 35130, 2486, 52068, 60814]
[2024-12-02 19:50:08.226035] user = 33440 Cloud 234/568
[2024-12-02 19:50:08.235484] user = 33440 Local 234/568
[2024-12-02 19:50:08.284668] user = 33440 Local+ 234/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:11.028436] user = 33440 MPDA- 234/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.41874999999999996
Training on augumented user 132962 0/50 current_auc = 0.41874999999999996
User 132962 AUC after training: 0.4125
User 132962 does not improve AUC. Reverting changes.
Training on augumented user 90077 1/50 current_auc = 0.41874999999999996
User 90077 AUC after training: 0.4375
User 90077 improves AUC. Keeping the model.
Training on augumented user 39197 2/50 current_auc = 0.4375
User 39197 AUC after training: 0.44375
User 39197 improves AUC. Keeping the model.
Training on augumented user 68434 3/50 current_auc = 0.44375
User 68434 AUC after training: 0.44375
User 68434 does not improve AUC. Reverting changes.
Training on augumented user 47132 4/50 current_auc = 0.44375
User 47132 AUC after training: 0.44375
User 47132 does not improve AUC. Reverting changes.
Training on augumented user 96542 5/50 current_auc = 0.44375
User 96542 AUC after training: 0.44375
User 96542 does not improve AUC. Reverting changes.
Training on augumented user 132515 6/50 current_auc = 0.44375
User 132515 AUC after training: 0.44375
User 132515 does not improve AUC. Reverting changes.
Training on augumented user 13276 7/50 current_auc = 0.44375
User 13276 AUC after training: 0.44375
User 13276 does not improve AUC. Reverting changes.
Training on augumented user 897 8/50 current_auc = 0.44375
User 897 AUC after training: 0.44375
User 897 does not improve AUC. Reverting changes.
Training on augumented user 65275 9/50 current_auc = 0.44375
User 65275 AUC after training: 0.44375
User 65275 does not improve AUC. Reverting changes.
Training on augumented user 128479 10/50 current_auc = 0.44375
User 128479 AUC after training: 0.44375
User 128479 does not improve AUC. Reverting changes.
Training on augumented user 33552 11/50 current_auc = 0.44375
User 33552 AUC after training: 0.44375
User 33552 does not improve AUC. Reverting changes.
Training on augumented user 115340 12/50 current_auc = 0.44375
User 115340 AUC after training: 0.44375
User 115340 does not improve AUC. Reverting changes.
Training on augumented user 104940 13/50 current_auc = 0.44375
User 104940 AUC after training: 0.44375
User 104940 does not improve AUC. Reverting changes.
Training on augumented user 137787 14/50 current_auc = 0.44375
User 137787 AUC after training: 0.44375
User 137787 does not improve AUC. Reverting changes.
Training on augumented user 43143 15/50 current_auc = 0.44375
User 43143 AUC after training: 0.44375
User 43143 does not improve AUC. Reverting changes.
Training on augumented user 18947 16/50 current_auc = 0.44375
User 18947 AUC after training: 0.44375
User 18947 does not improve AUC. Reverting changes.
Training on augumented user 79362 17/50 current_auc = 0.44375
User 79362 AUC after training: 0.44375
User 79362 does not improve AUC. Reverting changes.
Training on augumented user 96361 18/50 current_auc = 0.44375
User 96361 AUC after training: 0.44375
User 96361 does not improve AUC. Reverting changes.
Training on augumented user 11722 19/50 current_auc = 0.44375
User 11722 AUC after training: 0.44375
User 11722 does not improve AUC. Reverting changes.
Training on augumented user 5276 20/50 current_auc = 0.44375
User 5276 AUC after training: 0.43124999999999997
User 5276 does not improve AUC. Reverting changes.
Training on augumented user 41620 21/50 current_auc = 0.44375
User 41620 AUC after training: 0.44375
User 41620 does not improve AUC. Reverting changes.
Training on augumented user 124360 22/50 current_auc = 0.44375
User 124360 AUC after training: 0.44375
User 124360 does not improve AUC. Reverting changes.
Training on augumented user 97539 23/50 current_auc = 0.44375
User 97539 AUC after training: 0.44375
User 97539 does not improve AUC. Reverting changes.
Training on augumented user 18246 24/50 current_auc = 0.44375
User 18246 AUC after training: 0.44375
User 18246 does not improve AUC. Reverting changes.
Training on augumented user 124573 25/50 current_auc = 0.44375
User 124573 AUC after training: 0.44375
User 124573 does not improve AUC. Reverting changes.
Training on augumented user 138256 26/50 current_auc = 0.44375
User 138256 AUC after training: 0.44375
User 138256 does not improve AUC. Reverting changes.
Training on augumented user 41271 27/50 current_auc = 0.44375
User 41271 AUC after training: 0.44375
User 41271 does not improve AUC. Reverting changes.
Training on augumented user 14963 28/50 current_auc = 0.44375
User 14963 AUC after training: 0.44375
User 14963 does not improve AUC. Reverting changes.
Training on augumented user 48778 29/50 current_auc = 0.44375
User 48778 AUC after training: 0.44375
User 48778 does not improve AUC. Reverting changes.
Training on augumented user 13951 30/50 current_auc = 0.44375
User 13951 AUC after training: 0.44375
User 13951 does not improve AUC. Reverting changes.
Training on augumented user 22153 31/50 current_auc = 0.44375
User 22153 AUC after training: 0.4375
User 22153 does not improve AUC. Reverting changes.
Training on augumented user 26240 32/50 current_auc = 0.44375
User 26240 AUC after training: 0.44375
User 26240 does not improve AUC. Reverting changes.
Training on augumented user 29932 33/50 current_auc = 0.44375
User 29932 AUC after training: 0.44375
User 29932 does not improve AUC. Reverting changes.
Training on augumented user 48989 34/50 current_auc = 0.44375
User 48989 AUC after training: 0.44375
User 48989 does not improve AUC. Reverting changes.
Training on augumented user 33268 35/50 current_auc = 0.44375
User 33268 AUC after training: 0.44375
User 33268 does not improve AUC. Reverting changes.
Training on augumented user 43336 36/50 current_auc = 0.44375
User 43336 AUC after training: 0.44375
User 43336 does not improve AUC. Reverting changes.
Training on augumented user 5066 37/50 current_auc = 0.44375
User 5066 AUC after training: 0.44375
User 5066 does not improve AUC. Reverting changes.
Training on augumented user 89485 38/50 current_auc = 0.44375
User 89485 AUC after training: 0.44375
User 89485 does not improve AUC. Reverting changes.
Training on augumented user 48335 39/50 current_auc = 0.44375
User 48335 AUC after training: 0.4
User 48335 does not improve AUC. Reverting changes.
Training on augumented user 115224 40/50 current_auc = 0.44375
User 115224 AUC after training: 0.44375
User 115224 does not improve AUC. Reverting changes.
Training on augumented user 24669 41/50 current_auc = 0.44375
User 24669 AUC after training: 0.44375
User 24669 does not improve AUC. Reverting changes.
Training on augumented user 130166 42/50 current_auc = 0.44375
User 130166 AUC after training: 0.44375
User 130166 does not improve AUC. Reverting changes.
Training on augumented user 2967 43/50 current_auc = 0.44375
User 2967 AUC after training: 0.44375
User 2967 does not improve AUC. Reverting changes.
Training on augumented user 46307 44/50 current_auc = 0.44375
User 46307 AUC after training: 0.44375
User 46307 does not improve AUC. Reverting changes.
Training on augumented user 90198 45/50 current_auc = 0.44375
User 90198 AUC after training: 0.44375
User 90198 does not improve AUC. Reverting changes.
Training on augumented user 35130 46/50 current_auc = 0.44375
User 35130 AUC after training: 0.44375
User 35130 does not improve AUC. Reverting changes.
Training on augumented user 2486 47/50 current_auc = 0.44375
User 2486 AUC after training: 0.44375
User 2486 does not improve AUC. Reverting changes.
Training on augumented user 52068 48/50 current_auc = 0.44375
User 52068 AUC after training: 0.44375
User 52068 does not improve AUC. Reverting changes.
Training on augumented user 60814 49/50 current_auc = 0.44375
User 60814 AUC after training: 0.44375
User 60814 does not improve AUC. Reverting changes.
[2024-12-02 19:50:37.809754] start test user 33452 235/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:38.318989] start test user 33452 235/568 recall augumented users by random, augumented_users = [63707, 117474, 66842, 89238, 61511, 17835, 62223, 29790, 20933, 44663, 5714, 115713, 132927, 89554, 72784, 108559, 6261, 46797, 54259, 108624, 107248, 131699, 107612, 3959, 25443, 65633, 131631, 17003, 40070, 67999, 34744, 49857, 116917, 13306, 9083, 91902, 112122, 60124, 124945, 134494, 135881, 135438, 45729, 19600, 41549, 119100, 100020, 24685, 22807, 76414]
[2024-12-02 19:50:38.333421] user = 33452 Cloud 235/568
[2024-12-02 19:50:38.344662] user = 33452 Local 235/568
[2024-12-02 19:50:38.365433] user = 33452 Local+ 235/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:40.931648] user = 33452 MPDA- 235/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6632258064516129
Training on augumented user 63707 0/50 current_auc = 0.6632258064516129
User 63707 AUC after training: 0.6632258064516129
User 63707 does not improve AUC. Reverting changes.
Training on augumented user 117474 1/50 current_auc = 0.6632258064516129
User 117474 AUC after training: 0.6606451612903226
User 117474 does not improve AUC. Reverting changes.
Training on augumented user 66842 2/50 current_auc = 0.6632258064516129
User 66842 AUC after training: 0.6658064516129032
User 66842 improves AUC. Keeping the model.
Training on augumented user 89238 3/50 current_auc = 0.6658064516129032
User 89238 AUC after training: 0.6632258064516129
User 89238 does not improve AUC. Reverting changes.
Training on augumented user 61511 4/50 current_auc = 0.6658064516129032
User 61511 AUC after training: 0.6670967741935483
User 61511 improves AUC. Keeping the model.
Training on augumented user 17835 5/50 current_auc = 0.6670967741935483
User 17835 AUC after training: 0.664516129032258
User 17835 does not improve AUC. Reverting changes.
Training on augumented user 62223 6/50 current_auc = 0.6670967741935483
User 62223 AUC after training: 0.6632258064516129
User 62223 does not improve AUC. Reverting changes.
Training on augumented user 29790 7/50 current_auc = 0.6670967741935483
User 29790 AUC after training: 0.6658064516129032
User 29790 does not improve AUC. Reverting changes.
Training on augumented user 20933 8/50 current_auc = 0.6670967741935483
User 20933 AUC after training: 0.6658064516129032
User 20933 does not improve AUC. Reverting changes.
Training on augumented user 44663 9/50 current_auc = 0.6670967741935483
User 44663 AUC after training: 0.6541935483870968
User 44663 does not improve AUC. Reverting changes.
Training on augumented user 5714 10/50 current_auc = 0.6670967741935483
User 5714 AUC after training: 0.6632258064516129
User 5714 does not improve AUC. Reverting changes.
Training on augumented user 115713 11/50 current_auc = 0.6670967741935483
User 115713 AUC after training: 0.664516129032258
User 115713 does not improve AUC. Reverting changes.
Training on augumented user 132927 12/50 current_auc = 0.6670967741935483
User 132927 AUC after training: 0.6683870967741935
User 132927 improves AUC. Keeping the model.
Training on augumented user 89554 13/50 current_auc = 0.6683870967741935
User 89554 AUC after training: 0.6541935483870969
User 89554 does not improve AUC. Reverting changes.
Training on augumented user 72784 14/50 current_auc = 0.6683870967741935
User 72784 AUC after training: 0.6683870967741935
User 72784 does not improve AUC. Reverting changes.
Training on augumented user 108559 15/50 current_auc = 0.6683870967741935
User 108559 AUC after training: 0.6658064516129032
User 108559 does not improve AUC. Reverting changes.
Training on augumented user 6261 16/50 current_auc = 0.6683870967741935
User 6261 AUC after training: 0.6683870967741935
User 6261 does not improve AUC. Reverting changes.
Training on augumented user 46797 17/50 current_auc = 0.6683870967741935
User 46797 AUC after training: 0.6593548387096774
User 46797 does not improve AUC. Reverting changes.
Training on augumented user 54259 18/50 current_auc = 0.6683870967741935
User 54259 AUC after training: 0.656774193548387
User 54259 does not improve AUC. Reverting changes.
Training on augumented user 108624 19/50 current_auc = 0.6683870967741935
User 108624 AUC after training: 0.6683870967741936
User 108624 improves AUC. Keeping the model.
Training on augumented user 107248 20/50 current_auc = 0.6683870967741936
User 107248 AUC after training: 0.6619354838709677
User 107248 does not improve AUC. Reverting changes.
Training on augumented user 131699 21/50 current_auc = 0.6683870967741936
User 131699 AUC after training: 0.6683870967741935
User 131699 does not improve AUC. Reverting changes.
Training on augumented user 107612 22/50 current_auc = 0.6683870967741936
User 107612 AUC after training: 0.6683870967741935
User 107612 does not improve AUC. Reverting changes.
Training on augumented user 3959 23/50 current_auc = 0.6683870967741936
User 3959 AUC after training: 0.6709677419354838
User 3959 improves AUC. Keeping the model.
Training on augumented user 25443 24/50 current_auc = 0.6709677419354838
User 25443 AUC after training: 0.6696774193548386
User 25443 does not improve AUC. Reverting changes.
Training on augumented user 65633 25/50 current_auc = 0.6709677419354838
User 65633 AUC after training: 0.6709677419354838
User 65633 does not improve AUC. Reverting changes.
Training on augumented user 131631 26/50 current_auc = 0.6709677419354838
User 131631 AUC after training: 0.6683870967741935
User 131631 does not improve AUC. Reverting changes.
Training on augumented user 17003 27/50 current_auc = 0.6709677419354838
User 17003 AUC after training: 0.6748387096774193
User 17003 improves AUC. Keeping the model.
Training on augumented user 40070 28/50 current_auc = 0.6748387096774193
User 40070 AUC after training: 0.6593548387096774
User 40070 does not improve AUC. Reverting changes.
Training on augumented user 67999 29/50 current_auc = 0.6748387096774193
User 67999 AUC after training: 0.6722580645161289
User 67999 does not improve AUC. Reverting changes.
Training on augumented user 34744 30/50 current_auc = 0.6748387096774193
User 34744 AUC after training: 0.6787096774193547
User 34744 improves AUC. Keeping the model.
Training on augumented user 49857 31/50 current_auc = 0.6787096774193547
User 49857 AUC after training: 0.6838709677419355
User 49857 improves AUC. Keeping the model.
Training on augumented user 116917 32/50 current_auc = 0.6838709677419355
User 116917 AUC after training: 0.6825806451612904
User 116917 does not improve AUC. Reverting changes.
Training on augumented user 13306 33/50 current_auc = 0.6838709677419355
User 13306 AUC after training: 0.6858064516129032
User 13306 improves AUC. Keeping the model.
Training on augumented user 9083 34/50 current_auc = 0.6858064516129032
User 9083 AUC after training: 0.6883870967741935
User 9083 improves AUC. Keeping the model.
Training on augumented user 91902 35/50 current_auc = 0.6883870967741935
User 91902 AUC after training: 0.6916129032258064
User 91902 improves AUC. Keeping the model.
Training on augumented user 112122 36/50 current_auc = 0.6916129032258064
User 112122 AUC after training: 0.6903225806451613
User 112122 does not improve AUC. Reverting changes.
Training on augumented user 60124 37/50 current_auc = 0.6916129032258064
User 60124 AUC after training: 0.6903225806451613
User 60124 does not improve AUC. Reverting changes.
Training on augumented user 124945 38/50 current_auc = 0.6916129032258064
User 124945 AUC after training: 0.6929032258064515
User 124945 improves AUC. Keeping the model.
Training on augumented user 134494 39/50 current_auc = 0.6929032258064515
User 134494 AUC after training: 0.6929032258064516
User 134494 improves AUC. Keeping the model.
Training on augumented user 135881 40/50 current_auc = 0.6929032258064516
User 135881 AUC after training: 0.6941935483870969
User 135881 improves AUC. Keeping the model.
Training on augumented user 135438 41/50 current_auc = 0.6941935483870969
User 135438 AUC after training: 0.695483870967742
User 135438 improves AUC. Keeping the model.
Training on augumented user 45729 42/50 current_auc = 0.695483870967742
User 45729 AUC after training: 0.6890322580645161
User 45729 does not improve AUC. Reverting changes.
Training on augumented user 19600 43/50 current_auc = 0.695483870967742
User 19600 AUC after training: 0.6929032258064516
User 19600 does not improve AUC. Reverting changes.
Training on augumented user 41549 44/50 current_auc = 0.695483870967742
User 41549 AUC after training: 0.6967741935483871
User 41549 improves AUC. Keeping the model.
Training on augumented user 119100 45/50 current_auc = 0.6967741935483871
User 119100 AUC after training: 0.6954838709677419
User 119100 does not improve AUC. Reverting changes.
Training on augumented user 100020 46/50 current_auc = 0.6967741935483871
User 100020 AUC after training: 0.6883870967741935
User 100020 does not improve AUC. Reverting changes.
Training on augumented user 24685 47/50 current_auc = 0.6967741935483871
User 24685 AUC after training: 0.6980645161290322
User 24685 improves AUC. Keeping the model.
Training on augumented user 22807 48/50 current_auc = 0.6980645161290322
User 22807 AUC after training: 0.6993548387096774
User 22807 improves AUC. Keeping the model.
Training on augumented user 76414 49/50 current_auc = 0.6993548387096774
User 76414 AUC after training: 0.6941935483870968
User 76414 does not improve AUC. Reverting changes.
[2024-12-02 19:51:11.378472] start test user 33502 236/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:12.024608] start test user 33502 236/568 recall augumented users by random, augumented_users = [114612, 37254, 79501, 124075, 60591, 779, 53874, 81432, 18037, 46582, 96883, 58069, 121828, 91457, 93808, 56869, 113453, 16769, 51036, 51394, 49442, 97258, 2828, 72894, 87531, 78688, 49577, 111789, 52742, 3174, 84815, 102024, 96027, 31040, 35851, 6989, 122982, 22142, 65192, 29257, 96951, 60748, 55685, 133258, 56987, 35869, 25132, 83301, 62333, 104152]
[2024-12-02 19:51:12.040510] user = 33502 Cloud 236/568
[2024-12-02 19:51:12.064940] user = 33502 Local 236/568
[2024-12-02 19:51:12.207032] user = 33502 Local+ 236/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:14.531623] user = 33502 MPDA- 236/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5650510204081634
Training on augumented user 114612 0/50 current_auc = 0.5650510204081634
User 114612 AUC after training: 0.5655612244897958
User 114612 improves AUC. Keeping the model.
Training on augumented user 37254 1/50 current_auc = 0.5655612244897958
User 37254 AUC after training: 0.565561224489796
User 37254 improves AUC. Keeping the model.
Training on augumented user 79501 2/50 current_auc = 0.565561224489796
User 79501 AUC after training: 0.5653061224489796
User 79501 does not improve AUC. Reverting changes.
Training on augumented user 124075 3/50 current_auc = 0.565561224489796
User 124075 AUC after training: 0.564795918367347
User 124075 does not improve AUC. Reverting changes.
Training on augumented user 60591 4/50 current_auc = 0.565561224489796
User 60591 AUC after training: 0.5625
User 60591 does not improve AUC. Reverting changes.
Training on augumented user 779 5/50 current_auc = 0.565561224489796
User 779 AUC after training: 0.5635204081632652
User 779 does not improve AUC. Reverting changes.
Training on augumented user 53874 6/50 current_auc = 0.565561224489796
User 53874 AUC after training: 0.5658163265306122
User 53874 improves AUC. Keeping the model.
Training on augumented user 81432 7/50 current_auc = 0.5658163265306122
User 81432 AUC after training: 0.5637755102040817
User 81432 does not improve AUC. Reverting changes.
Training on augumented user 18037 8/50 current_auc = 0.5658163265306122
User 18037 AUC after training: 0.5642857142857143
User 18037 does not improve AUC. Reverting changes.
Training on augumented user 46582 9/50 current_auc = 0.5658163265306122
User 46582 AUC after training: 0.5650510204081632
User 46582 does not improve AUC. Reverting changes.
Training on augumented user 96883 10/50 current_auc = 0.5658163265306122
User 96883 AUC after training: 0.5665816326530612
User 96883 improves AUC. Keeping the model.
Training on augumented user 58069 11/50 current_auc = 0.5665816326530612
User 58069 AUC after training: 0.5637755102040816
User 58069 does not improve AUC. Reverting changes.
Training on augumented user 121828 12/50 current_auc = 0.5665816326530612
User 121828 AUC after training: 0.5658163265306122
User 121828 does not improve AUC. Reverting changes.
Training on augumented user 91457 13/50 current_auc = 0.5665816326530612
User 91457 AUC after training: 0.564795918367347
User 91457 does not improve AUC. Reverting changes.
Training on augumented user 93808 14/50 current_auc = 0.5665816326530612
User 93808 AUC after training: 0.564795918367347
User 93808 does not improve AUC. Reverting changes.
Training on augumented user 56869 15/50 current_auc = 0.5665816326530612
User 56869 AUC after training: 0.5642857142857143
User 56869 does not improve AUC. Reverting changes.
Training on augumented user 113453 16/50 current_auc = 0.5665816326530612
User 113453 AUC after training: 0.5676020408163265
User 113453 improves AUC. Keeping the model.
Training on augumented user 16769 17/50 current_auc = 0.5676020408163265
User 16769 AUC after training: 0.5658163265306122
User 16769 does not improve AUC. Reverting changes.
Training on augumented user 51036 18/50 current_auc = 0.5676020408163265
User 51036 AUC after training: 0.565561224489796
User 51036 does not improve AUC. Reverting changes.
Training on augumented user 51394 19/50 current_auc = 0.5676020408163265
User 51394 AUC after training: 0.564030612244898
User 51394 does not improve AUC. Reverting changes.
Training on augumented user 49442 20/50 current_auc = 0.5676020408163265
User 49442 AUC after training: 0.5668367346938776
User 49442 does not improve AUC. Reverting changes.
Training on augumented user 97258 21/50 current_auc = 0.5676020408163265
User 97258 AUC after training: 0.5653061224489795
User 97258 does not improve AUC. Reverting changes.
Training on augumented user 2828 22/50 current_auc = 0.5676020408163265
User 2828 AUC after training: 0.5676020408163265
User 2828 does not improve AUC. Reverting changes.
Training on augumented user 72894 23/50 current_auc = 0.5676020408163265
User 72894 AUC after training: 0.5640306122448979
User 72894 does not improve AUC. Reverting changes.
Training on augumented user 87531 24/50 current_auc = 0.5676020408163265
User 87531 AUC after training: 0.5681122448979592
User 87531 improves AUC. Keeping the model.
Training on augumented user 78688 25/50 current_auc = 0.5681122448979592
User 78688 AUC after training: 0.5676020408163265
User 78688 does not improve AUC. Reverting changes.
Training on augumented user 49577 26/50 current_auc = 0.5681122448979592
User 49577 AUC after training: 0.5650510204081632
User 49577 does not improve AUC. Reverting changes.
Training on augumented user 111789 27/50 current_auc = 0.5681122448979592
User 111789 AUC after training: 0.5673469387755102
User 111789 does not improve AUC. Reverting changes.
Training on augumented user 52742 28/50 current_auc = 0.5681122448979592
User 52742 AUC after training: 0.5663265306122449
User 52742 does not improve AUC. Reverting changes.
Training on augumented user 3174 29/50 current_auc = 0.5681122448979592
User 3174 AUC after training: 0.5673469387755102
User 3174 does not improve AUC. Reverting changes.
Training on augumented user 84815 30/50 current_auc = 0.5681122448979592
User 84815 AUC after training: 0.5647959183673469
User 84815 does not improve AUC. Reverting changes.
Training on augumented user 102024 31/50 current_auc = 0.5681122448979592
User 102024 AUC after training: 0.5655612244897958
User 102024 does not improve AUC. Reverting changes.
Training on augumented user 96027 32/50 current_auc = 0.5681122448979592
User 96027 AUC after training: 0.5653061224489796
User 96027 does not improve AUC. Reverting changes.
Training on augumented user 31040 33/50 current_auc = 0.5681122448979592
User 31040 AUC after training: 0.5665816326530613
User 31040 does not improve AUC. Reverting changes.
Training on augumented user 35851 34/50 current_auc = 0.5681122448979592
User 35851 AUC after training: 0.5655612244897958
User 35851 does not improve AUC. Reverting changes.
Training on augumented user 6989 35/50 current_auc = 0.5681122448979592
User 6989 AUC after training: 0.5653061224489796
User 6989 does not improve AUC. Reverting changes.
Training on augumented user 122982 36/50 current_auc = 0.5681122448979592
User 122982 AUC after training: 0.5665816326530612
User 122982 does not improve AUC. Reverting changes.
Training on augumented user 22142 37/50 current_auc = 0.5681122448979592
User 22142 AUC after training: 0.5658163265306122
User 22142 does not improve AUC. Reverting changes.
Training on augumented user 65192 38/50 current_auc = 0.5681122448979592
User 65192 AUC after training: 0.5655612244897958
User 65192 does not improve AUC. Reverting changes.
Training on augumented user 29257 39/50 current_auc = 0.5681122448979592
User 29257 AUC after training: 0.5676020408163265
User 29257 does not improve AUC. Reverting changes.
Training on augumented user 96951 40/50 current_auc = 0.5681122448979592
User 96951 AUC after training: 0.5668367346938776
User 96951 does not improve AUC. Reverting changes.
Training on augumented user 60748 41/50 current_auc = 0.5681122448979592
User 60748 AUC after training: 0.5676020408163265
User 60748 does not improve AUC. Reverting changes.
Training on augumented user 55685 42/50 current_auc = 0.5681122448979592
User 55685 AUC after training: 0.5663265306122449
User 55685 does not improve AUC. Reverting changes.
Training on augumented user 133258 43/50 current_auc = 0.5681122448979592
User 133258 AUC after training: 0.5681122448979592
User 133258 does not improve AUC. Reverting changes.
Training on augumented user 56987 44/50 current_auc = 0.5681122448979592
User 56987 AUC after training: 0.5668367346938775
User 56987 does not improve AUC. Reverting changes.
Training on augumented user 35869 45/50 current_auc = 0.5681122448979592
User 35869 AUC after training: 0.5663265306122449
User 35869 does not improve AUC. Reverting changes.
Training on augumented user 25132 46/50 current_auc = 0.5681122448979592
User 25132 AUC after training: 0.5681122448979592
User 25132 does not improve AUC. Reverting changes.
Training on augumented user 83301 47/50 current_auc = 0.5681122448979592
User 83301 AUC after training: 0.5663265306122449
User 83301 does not improve AUC. Reverting changes.
Training on augumented user 62333 48/50 current_auc = 0.5681122448979592
User 62333 AUC after training: 0.5653061224489797
User 62333 does not improve AUC. Reverting changes.
Training on augumented user 104152 49/50 current_auc = 0.5681122448979592
User 104152 AUC after training: 0.5665816326530613
User 104152 does not improve AUC. Reverting changes.
[2024-12-02 19:51:46.926624] start test user 33523 237/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:47.559842] start test user 33523 237/568 recall augumented users by random, augumented_users = [82277, 134571, 111582, 131990, 58948, 22819, 10395, 122239, 30359, 30919, 32951, 15640, 63955, 88802, 10629, 123523, 33668, 36417, 115542, 95224, 11134, 132155, 77128, 134107, 34449, 97417, 86985, 87707, 64533, 23968, 93931, 93114, 130228, 1365, 112009, 81602, 57328, 68226, 129481, 6085, 89005, 50358, 53100, 59816, 28661, 82375, 8326, 73335, 77389, 42033]
[2024-12-02 19:51:47.590089] user = 33523 Cloud 237/568
[2024-12-02 19:51:47.626212] user = 33523 Local 237/568
[2024-12-02 19:51:47.671670] user = 33523 Local+ 237/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:49.733412] user = 33523 MPDA- 237/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5625
Training on augumented user 82277 0/50 current_auc = 0.5625
User 82277 AUC after training: 0.5625
User 82277 does not improve AUC. Reverting changes.
Training on augumented user 134571 1/50 current_auc = 0.5625
User 134571 AUC after training: 0.5625
User 134571 does not improve AUC. Reverting changes.
Training on augumented user 111582 2/50 current_auc = 0.5625
User 111582 AUC after training: 0.5698529411764706
User 111582 improves AUC. Keeping the model.
Training on augumented user 131990 3/50 current_auc = 0.5698529411764706
User 131990 AUC after training: 0.5661764705882353
User 131990 does not improve AUC. Reverting changes.
Training on augumented user 58948 4/50 current_auc = 0.5698529411764706
User 58948 AUC after training: 0.5661764705882353
User 58948 does not improve AUC. Reverting changes.
Training on augumented user 22819 5/50 current_auc = 0.5698529411764706
User 22819 AUC after training: 0.5625
User 22819 does not improve AUC. Reverting changes.
Training on augumented user 10395 6/50 current_auc = 0.5698529411764706
User 10395 AUC after training: 0.5625
User 10395 does not improve AUC. Reverting changes.
Training on augumented user 122239 7/50 current_auc = 0.5698529411764706
User 122239 AUC after training: 0.5698529411764706
User 122239 does not improve AUC. Reverting changes.
Training on augumented user 30359 8/50 current_auc = 0.5698529411764706
User 30359 AUC after training: 0.5698529411764706
User 30359 does not improve AUC. Reverting changes.
Training on augumented user 30919 9/50 current_auc = 0.5698529411764706
User 30919 AUC after training: 0.5588235294117647
User 30919 does not improve AUC. Reverting changes.
Training on augumented user 32951 10/50 current_auc = 0.5698529411764706
User 32951 AUC after training: 0.5625
User 32951 does not improve AUC. Reverting changes.
Training on augumented user 15640 11/50 current_auc = 0.5698529411764706
User 15640 AUC after training: 0.5625
User 15640 does not improve AUC. Reverting changes.
Training on augumented user 63955 12/50 current_auc = 0.5698529411764706
User 63955 AUC after training: 0.5625
User 63955 does not improve AUC. Reverting changes.
Training on augumented user 88802 13/50 current_auc = 0.5698529411764706
User 88802 AUC after training: 0.5698529411764706
User 88802 does not improve AUC. Reverting changes.
Training on augumented user 10629 14/50 current_auc = 0.5698529411764706
User 10629 AUC after training: 0.5698529411764706
User 10629 does not improve AUC. Reverting changes.
Training on augumented user 123523 15/50 current_auc = 0.5698529411764706
User 123523 AUC after training: 0.5625
User 123523 does not improve AUC. Reverting changes.
Training on augumented user 33668 16/50 current_auc = 0.5698529411764706
User 33668 AUC after training: 0.5698529411764706
User 33668 does not improve AUC. Reverting changes.
Training on augumented user 36417 17/50 current_auc = 0.5698529411764706
User 36417 AUC after training: 0.5625
User 36417 does not improve AUC. Reverting changes.
Training on augumented user 115542 18/50 current_auc = 0.5698529411764706
User 115542 AUC after training: 0.5698529411764706
User 115542 does not improve AUC. Reverting changes.
Training on augumented user 95224 19/50 current_auc = 0.5698529411764706
User 95224 AUC after training: 0.5698529411764706
User 95224 does not improve AUC. Reverting changes.
Training on augumented user 11134 20/50 current_auc = 0.5698529411764706
User 11134 AUC after training: 0.5588235294117647
User 11134 does not improve AUC. Reverting changes.
Training on augumented user 132155 21/50 current_auc = 0.5698529411764706
User 132155 AUC after training: 0.5698529411764706
User 132155 does not improve AUC. Reverting changes.
Training on augumented user 77128 22/50 current_auc = 0.5698529411764706
User 77128 AUC after training: 0.5625
User 77128 does not improve AUC. Reverting changes.
Training on augumented user 134107 23/50 current_auc = 0.5698529411764706
User 134107 AUC after training: 0.5698529411764706
User 134107 does not improve AUC. Reverting changes.
Training on augumented user 34449 24/50 current_auc = 0.5698529411764706
User 34449 AUC after training: 0.5698529411764706
User 34449 does not improve AUC. Reverting changes.
Training on augumented user 97417 25/50 current_auc = 0.5698529411764706
User 97417 AUC after training: 0.5625
User 97417 does not improve AUC. Reverting changes.
Training on augumented user 86985 26/50 current_auc = 0.5698529411764706
User 86985 AUC after training: 0.5625
User 86985 does not improve AUC. Reverting changes.
Training on augumented user 87707 27/50 current_auc = 0.5698529411764706
User 87707 AUC after training: 0.5698529411764706
User 87707 does not improve AUC. Reverting changes.
Training on augumented user 64533 28/50 current_auc = 0.5698529411764706
User 64533 AUC after training: 0.5625
User 64533 does not improve AUC. Reverting changes.
Training on augumented user 23968 29/50 current_auc = 0.5698529411764706
User 23968 AUC after training: 0.5698529411764706
User 23968 does not improve AUC. Reverting changes.
Training on augumented user 93931 30/50 current_auc = 0.5698529411764706
User 93931 AUC after training: 0.5625
User 93931 does not improve AUC. Reverting changes.
Training on augumented user 93114 31/50 current_auc = 0.5698529411764706
User 93114 AUC after training: 0.5698529411764706
User 93114 does not improve AUC. Reverting changes.
Training on augumented user 130228 32/50 current_auc = 0.5698529411764706
User 130228 AUC after training: 0.5625
User 130228 does not improve AUC. Reverting changes.
Training on augumented user 1365 33/50 current_auc = 0.5698529411764706
User 1365 AUC after training: 0.5625
User 1365 does not improve AUC. Reverting changes.
Training on augumented user 112009 34/50 current_auc = 0.5698529411764706
User 112009 AUC after training: 0.5698529411764706
User 112009 does not improve AUC. Reverting changes.
Training on augumented user 81602 35/50 current_auc = 0.5698529411764706
User 81602 AUC after training: 0.5625
User 81602 does not improve AUC. Reverting changes.
Training on augumented user 57328 36/50 current_auc = 0.5698529411764706
User 57328 AUC after training: 0.5625
User 57328 does not improve AUC. Reverting changes.
Training on augumented user 68226 37/50 current_auc = 0.5698529411764706
User 68226 AUC after training: 0.5625
User 68226 does not improve AUC. Reverting changes.
Training on augumented user 129481 38/50 current_auc = 0.5698529411764706
User 129481 AUC after training: 0.5625
User 129481 does not improve AUC. Reverting changes.
Training on augumented user 6085 39/50 current_auc = 0.5698529411764706
User 6085 AUC after training: 0.5661764705882353
User 6085 does not improve AUC. Reverting changes.
Training on augumented user 89005 40/50 current_auc = 0.5698529411764706
User 89005 AUC after training: 0.5698529411764706
User 89005 does not improve AUC. Reverting changes.
Training on augumented user 50358 41/50 current_auc = 0.5698529411764706
User 50358 AUC after training: 0.5698529411764706
User 50358 does not improve AUC. Reverting changes.
Training on augumented user 53100 42/50 current_auc = 0.5698529411764706
User 53100 AUC after training: 0.5625
User 53100 does not improve AUC. Reverting changes.
Training on augumented user 59816 43/50 current_auc = 0.5698529411764706
User 59816 AUC after training: 0.5625
User 59816 does not improve AUC. Reverting changes.
Training on augumented user 28661 44/50 current_auc = 0.5698529411764706
User 28661 AUC after training: 0.5625
User 28661 does not improve AUC. Reverting changes.
Training on augumented user 82375 45/50 current_auc = 0.5698529411764706
User 82375 AUC after training: 0.5625
User 82375 does not improve AUC. Reverting changes.
Training on augumented user 8326 46/50 current_auc = 0.5698529411764706
User 8326 AUC after training: 0.5698529411764706
User 8326 does not improve AUC. Reverting changes.
Training on augumented user 73335 47/50 current_auc = 0.5698529411764706
User 73335 AUC after training: 0.5625
User 73335 does not improve AUC. Reverting changes.
Training on augumented user 77389 48/50 current_auc = 0.5698529411764706
User 77389 AUC after training: 0.5698529411764706
User 77389 does not improve AUC. Reverting changes.
Training on augumented user 42033 49/50 current_auc = 0.5698529411764706
User 42033 AUC after training: 0.5625
User 42033 does not improve AUC. Reverting changes.
[2024-12-02 19:52:18.582033] start test user 33553 238/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:19.200102] start test user 33553 238/568 recall augumented users by random, augumented_users = [57380, 122682, 74099, 39895, 99945, 21564, 81434, 61419, 114178, 49790, 6935, 3703, 27846, 57063, 99378, 78690, 118323, 106819, 104388, 83851, 44602, 94657, 109368, 123291, 125259, 69763, 48645, 70401, 30138, 117113, 22690, 103857, 109693, 77841, 52462, 72227, 28155, 112673, 11893, 68529, 123292, 128113, 136992, 89510, 20278, 60272, 136205, 34704, 56665, 125848]
[2024-12-02 19:52:19.219781] user = 33553 Cloud 238/568
[2024-12-02 19:52:19.230120] user = 33553 Local 238/568
[2024-12-02 19:52:19.277689] user = 33553 Local+ 238/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:21.276409] user = 33553 MPDA- 238/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6168831168831168
Training on augumented user 57380 0/50 current_auc = 0.6168831168831168
User 57380 AUC after training: 0.6103896103896105
User 57380 does not improve AUC. Reverting changes.
Training on augumented user 122682 1/50 current_auc = 0.6168831168831168
User 122682 AUC after training: 0.6168831168831168
User 122682 does not improve AUC. Reverting changes.
Training on augumented user 74099 2/50 current_auc = 0.6168831168831168
User 74099 AUC after training: 0.6168831168831168
User 74099 does not improve AUC. Reverting changes.
Training on augumented user 39895 3/50 current_auc = 0.6168831168831168
User 39895 AUC after training: 0.6168831168831168
User 39895 does not improve AUC. Reverting changes.
Training on augumented user 99945 4/50 current_auc = 0.6168831168831168
User 99945 AUC after training: 0.6168831168831168
User 99945 does not improve AUC. Reverting changes.
Training on augumented user 21564 5/50 current_auc = 0.6168831168831168
User 21564 AUC after training: 0.6103896103896105
User 21564 does not improve AUC. Reverting changes.
Training on augumented user 81434 6/50 current_auc = 0.6168831168831168
User 81434 AUC after training: 0.6168831168831168
User 81434 does not improve AUC. Reverting changes.
Training on augumented user 61419 7/50 current_auc = 0.6168831168831168
User 61419 AUC after training: 0.6168831168831168
User 61419 does not improve AUC. Reverting changes.
Training on augumented user 114178 8/50 current_auc = 0.6168831168831168
User 114178 AUC after training: 0.6168831168831168
User 114178 does not improve AUC. Reverting changes.
Training on augumented user 49790 9/50 current_auc = 0.6168831168831168
User 49790 AUC after training: 0.6038961038961039
User 49790 does not improve AUC. Reverting changes.
Training on augumented user 6935 10/50 current_auc = 0.6168831168831168
User 6935 AUC after training: 0.6168831168831168
User 6935 does not improve AUC. Reverting changes.
Training on augumented user 3703 11/50 current_auc = 0.6168831168831168
User 3703 AUC after training: 0.6168831168831168
User 3703 does not improve AUC. Reverting changes.
Training on augumented user 27846 12/50 current_auc = 0.6168831168831168
User 27846 AUC after training: 0.6168831168831168
User 27846 does not improve AUC. Reverting changes.
Training on augumented user 57063 13/50 current_auc = 0.6168831168831168
User 57063 AUC after training: 0.6168831168831168
User 57063 does not improve AUC. Reverting changes.
Training on augumented user 99378 14/50 current_auc = 0.6168831168831168
User 99378 AUC after training: 0.6103896103896105
User 99378 does not improve AUC. Reverting changes.
Training on augumented user 78690 15/50 current_auc = 0.6168831168831168
User 78690 AUC after training: 0.6168831168831168
User 78690 does not improve AUC. Reverting changes.
Training on augumented user 118323 16/50 current_auc = 0.6168831168831168
User 118323 AUC after training: 0.6103896103896105
User 118323 does not improve AUC. Reverting changes.
Training on augumented user 106819 17/50 current_auc = 0.6168831168831168
User 106819 AUC after training: 0.6168831168831168
User 106819 does not improve AUC. Reverting changes.
Training on augumented user 104388 18/50 current_auc = 0.6168831168831168
User 104388 AUC after training: 0.6168831168831168
User 104388 does not improve AUC. Reverting changes.
Training on augumented user 83851 19/50 current_auc = 0.6168831168831168
User 83851 AUC after training: 0.6168831168831168
User 83851 does not improve AUC. Reverting changes.
Training on augumented user 44602 20/50 current_auc = 0.6168831168831168
User 44602 AUC after training: 0.6168831168831168
User 44602 does not improve AUC. Reverting changes.
Training on augumented user 94657 21/50 current_auc = 0.6168831168831168
User 94657 AUC after training: 0.6168831168831168
User 94657 does not improve AUC. Reverting changes.
Training on augumented user 109368 22/50 current_auc = 0.6168831168831168
User 109368 AUC after training: 0.6103896103896105
User 109368 does not improve AUC. Reverting changes.
Training on augumented user 123291 23/50 current_auc = 0.6168831168831168
User 123291 AUC after training: 0.6103896103896105
User 123291 does not improve AUC. Reverting changes.
Training on augumented user 125259 24/50 current_auc = 0.6168831168831168
User 125259 AUC after training: 0.6168831168831168
User 125259 does not improve AUC. Reverting changes.
Training on augumented user 69763 25/50 current_auc = 0.6168831168831168
User 69763 AUC after training: 0.6168831168831168
User 69763 does not improve AUC. Reverting changes.
Training on augumented user 48645 26/50 current_auc = 0.6168831168831168
User 48645 AUC after training: 0.6168831168831168
User 48645 does not improve AUC. Reverting changes.
Training on augumented user 70401 27/50 current_auc = 0.6168831168831168
User 70401 AUC after training: 0.6103896103896105
User 70401 does not improve AUC. Reverting changes.
Training on augumented user 30138 28/50 current_auc = 0.6168831168831168
User 30138 AUC after training: 0.6168831168831168
User 30138 does not improve AUC. Reverting changes.
Training on augumented user 117113 29/50 current_auc = 0.6168831168831168
User 117113 AUC after training: 0.6168831168831168
User 117113 does not improve AUC. Reverting changes.
Training on augumented user 22690 30/50 current_auc = 0.6168831168831168
User 22690 AUC after training: 0.6168831168831168
User 22690 does not improve AUC. Reverting changes.
Training on augumented user 103857 31/50 current_auc = 0.6168831168831168
User 103857 AUC after training: 0.6168831168831168
User 103857 does not improve AUC. Reverting changes.
Training on augumented user 109693 32/50 current_auc = 0.6168831168831168
User 109693 AUC after training: 0.6168831168831168
User 109693 does not improve AUC. Reverting changes.
Training on augumented user 77841 33/50 current_auc = 0.6168831168831168
User 77841 AUC after training: 0.6168831168831168
User 77841 does not improve AUC. Reverting changes.
Training on augumented user 52462 34/50 current_auc = 0.6168831168831168
User 52462 AUC after training: 0.6168831168831168
User 52462 does not improve AUC. Reverting changes.
Training on augumented user 72227 35/50 current_auc = 0.6168831168831168
User 72227 AUC after training: 0.6168831168831168
User 72227 does not improve AUC. Reverting changes.
Training on augumented user 28155 36/50 current_auc = 0.6168831168831168
User 28155 AUC after training: 0.6168831168831168
User 28155 does not improve AUC. Reverting changes.
Training on augumented user 112673 37/50 current_auc = 0.6168831168831168
User 112673 AUC after training: 0.6168831168831168
User 112673 does not improve AUC. Reverting changes.
Training on augumented user 11893 38/50 current_auc = 0.6168831168831168
User 11893 AUC after training: 0.6168831168831168
User 11893 does not improve AUC. Reverting changes.
Training on augumented user 68529 39/50 current_auc = 0.6168831168831168
User 68529 AUC after training: 0.6168831168831168
User 68529 does not improve AUC. Reverting changes.
Training on augumented user 123292 40/50 current_auc = 0.6168831168831168
User 123292 AUC after training: 0.6168831168831168
User 123292 does not improve AUC. Reverting changes.
Training on augumented user 128113 41/50 current_auc = 0.6168831168831168
User 128113 AUC after training: 0.6168831168831168
User 128113 does not improve AUC. Reverting changes.
Training on augumented user 136992 42/50 current_auc = 0.6168831168831168
User 136992 AUC after training: 0.6103896103896105
User 136992 does not improve AUC. Reverting changes.
Training on augumented user 89510 43/50 current_auc = 0.6168831168831168
User 89510 AUC after training: 0.6168831168831168
User 89510 does not improve AUC. Reverting changes.
Training on augumented user 20278 44/50 current_auc = 0.6168831168831168
User 20278 AUC after training: 0.6168831168831168
User 20278 does not improve AUC. Reverting changes.
Training on augumented user 60272 45/50 current_auc = 0.6168831168831168
User 60272 AUC after training: 0.6168831168831168
User 60272 does not improve AUC. Reverting changes.
Training on augumented user 136205 46/50 current_auc = 0.6168831168831168
User 136205 AUC after training: 0.6168831168831168
User 136205 does not improve AUC. Reverting changes.
Training on augumented user 34704 47/50 current_auc = 0.6168831168831168
User 34704 AUC after training: 0.6168831168831168
User 34704 does not improve AUC. Reverting changes.
Training on augumented user 56665 48/50 current_auc = 0.6168831168831168
User 56665 AUC after training: 0.6168831168831168
User 56665 does not improve AUC. Reverting changes.
Training on augumented user 125848 49/50 current_auc = 0.6168831168831168
User 125848 AUC after training: 0.6168831168831168
User 125848 does not improve AUC. Reverting changes.
[2024-12-02 19:52:49.143209] start test user 33555 239/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:49.592389] start test user 33555 239/568 recall augumented users by random, augumented_users = [35020, 24342, 32709, 102598, 125262, 67785, 67740, 64412, 59625, 97499, 26977, 106357, 69655, 30857, 100024, 68926, 69339, 481, 43106, 3562, 48485, 128569, 22552, 123232, 9527, 138127, 80622, 84315, 9942, 4469, 124185, 49550, 109556, 60321, 36935, 59076, 29687, 7196, 65163, 32254, 84461, 107591, 90083, 114216, 58450, 50914, 110587, 81490, 109437, 10247]
[2024-12-02 19:52:49.606969] user = 33555 Cloud 239/568
[2024-12-02 19:52:49.616361] user = 33555 Local 239/568
[2024-12-02 19:52:49.651980] user = 33555 Local+ 239/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:51.145939] user = 33555 MPDA- 239/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 35020 0/50 current_auc = 0.0
User 35020 AUC after training: 0.0
User 35020 does not improve AUC. Reverting changes.
Training on augumented user 24342 1/50 current_auc = 0.0
User 24342 AUC after training: 0.0
User 24342 does not improve AUC. Reverting changes.
Training on augumented user 32709 2/50 current_auc = 0.0
User 32709 AUC after training: 0.0
User 32709 does not improve AUC. Reverting changes.
Training on augumented user 102598 3/50 current_auc = 0.0
User 102598 AUC after training: 0.0
User 102598 does not improve AUC. Reverting changes.
Training on augumented user 125262 4/50 current_auc = 0.0
User 125262 AUC after training: 0.0
User 125262 does not improve AUC. Reverting changes.
Training on augumented user 67785 5/50 current_auc = 0.0
User 67785 AUC after training: 0.0
User 67785 does not improve AUC. Reverting changes.
Training on augumented user 67740 6/50 current_auc = 0.0
User 67740 AUC after training: 0.0
User 67740 does not improve AUC. Reverting changes.
Training on augumented user 64412 7/50 current_auc = 0.0
User 64412 AUC after training: 0.0
User 64412 does not improve AUC. Reverting changes.
Training on augumented user 59625 8/50 current_auc = 0.0
User 59625 AUC after training: 0.0
User 59625 does not improve AUC. Reverting changes.
Training on augumented user 97499 9/50 current_auc = 0.0
User 97499 AUC after training: 0.0
User 97499 does not improve AUC. Reverting changes.
Training on augumented user 26977 10/50 current_auc = 0.0
User 26977 AUC after training: 0.0
User 26977 does not improve AUC. Reverting changes.
Training on augumented user 106357 11/50 current_auc = 0.0
User 106357 AUC after training: 0.0
User 106357 does not improve AUC. Reverting changes.
Training on augumented user 69655 12/50 current_auc = 0.0
User 69655 AUC after training: 0.0
User 69655 does not improve AUC. Reverting changes.
Training on augumented user 30857 13/50 current_auc = 0.0
User 30857 AUC after training: 0.0
User 30857 does not improve AUC. Reverting changes.
Training on augumented user 100024 14/50 current_auc = 0.0
User 100024 AUC after training: 0.0
User 100024 does not improve AUC. Reverting changes.
Training on augumented user 68926 15/50 current_auc = 0.0
User 68926 AUC after training: 0.0
User 68926 does not improve AUC. Reverting changes.
Training on augumented user 69339 16/50 current_auc = 0.0
User 69339 AUC after training: 0.0
User 69339 does not improve AUC. Reverting changes.
Training on augumented user 481 17/50 current_auc = 0.0
User 481 AUC after training: 0.0
User 481 does not improve AUC. Reverting changes.
Training on augumented user 43106 18/50 current_auc = 0.0
User 43106 AUC after training: 0.0
User 43106 does not improve AUC. Reverting changes.
Training on augumented user 3562 19/50 current_auc = 0.0
User 3562 AUC after training: 0.0
User 3562 does not improve AUC. Reverting changes.
Training on augumented user 48485 20/50 current_auc = 0.0
User 48485 AUC after training: 0.0
User 48485 does not improve AUC. Reverting changes.
Training on augumented user 128569 21/50 current_auc = 0.0
User 128569 AUC after training: 0.0
User 128569 does not improve AUC. Reverting changes.
Training on augumented user 22552 22/50 current_auc = 0.0
User 22552 AUC after training: 0.0
User 22552 does not improve AUC. Reverting changes.
Training on augumented user 123232 23/50 current_auc = 0.0
User 123232 AUC after training: 0.0
User 123232 does not improve AUC. Reverting changes.
Training on augumented user 9527 24/50 current_auc = 0.0
User 9527 AUC after training: 0.0
User 9527 does not improve AUC. Reverting changes.
Training on augumented user 138127 25/50 current_auc = 0.0
User 138127 AUC after training: 0.0
User 138127 does not improve AUC. Reverting changes.
Training on augumented user 80622 26/50 current_auc = 0.0
User 80622 AUC after training: 0.0
User 80622 does not improve AUC. Reverting changes.
Training on augumented user 84315 27/50 current_auc = 0.0
User 84315 AUC after training: 0.0
User 84315 does not improve AUC. Reverting changes.
Training on augumented user 9942 28/50 current_auc = 0.0
User 9942 AUC after training: 0.0
User 9942 does not improve AUC. Reverting changes.
Training on augumented user 4469 29/50 current_auc = 0.0
User 4469 AUC after training: 0.0
User 4469 does not improve AUC. Reverting changes.
Training on augumented user 124185 30/50 current_auc = 0.0
User 124185 AUC after training: 0.0
User 124185 does not improve AUC. Reverting changes.
Training on augumented user 49550 31/50 current_auc = 0.0
User 49550 AUC after training: 0.0
User 49550 does not improve AUC. Reverting changes.
Training on augumented user 109556 32/50 current_auc = 0.0
User 109556 AUC after training: 0.0
User 109556 does not improve AUC. Reverting changes.
Training on augumented user 60321 33/50 current_auc = 0.0
User 60321 AUC after training: 0.0
User 60321 does not improve AUC. Reverting changes.
Training on augumented user 36935 34/50 current_auc = 0.0
User 36935 AUC after training: 0.0
User 36935 does not improve AUC. Reverting changes.
Training on augumented user 59076 35/50 current_auc = 0.0
User 59076 AUC after training: 0.0
User 59076 does not improve AUC. Reverting changes.
Training on augumented user 29687 36/50 current_auc = 0.0
User 29687 AUC after training: 0.0
User 29687 does not improve AUC. Reverting changes.
Training on augumented user 7196 37/50 current_auc = 0.0
User 7196 AUC after training: 0.0
User 7196 does not improve AUC. Reverting changes.
Training on augumented user 65163 38/50 current_auc = 0.0
User 65163 AUC after training: 0.0
User 65163 does not improve AUC. Reverting changes.
Training on augumented user 32254 39/50 current_auc = 0.0
User 32254 AUC after training: 0.0
User 32254 does not improve AUC. Reverting changes.
Training on augumented user 84461 40/50 current_auc = 0.0
User 84461 AUC after training: 0.0
User 84461 does not improve AUC. Reverting changes.
Training on augumented user 107591 41/50 current_auc = 0.0
User 107591 AUC after training: 0.0
User 107591 does not improve AUC. Reverting changes.
Training on augumented user 90083 42/50 current_auc = 0.0
User 90083 AUC after training: 0.0
User 90083 does not improve AUC. Reverting changes.
Training on augumented user 114216 43/50 current_auc = 0.0
User 114216 AUC after training: 0.0
User 114216 does not improve AUC. Reverting changes.
Training on augumented user 58450 44/50 current_auc = 0.0
User 58450 AUC after training: 0.0
User 58450 does not improve AUC. Reverting changes.
Training on augumented user 50914 45/50 current_auc = 0.0
User 50914 AUC after training: 0.0
User 50914 does not improve AUC. Reverting changes.
Training on augumented user 110587 46/50 current_auc = 0.0
User 110587 AUC after training: 0.0
User 110587 does not improve AUC. Reverting changes.
Training on augumented user 81490 47/50 current_auc = 0.0
User 81490 AUC after training: 0.0
User 81490 does not improve AUC. Reverting changes.
Training on augumented user 109437 48/50 current_auc = 0.0
User 109437 AUC after training: 0.0
User 109437 does not improve AUC. Reverting changes.
Training on augumented user 10247 49/50 current_auc = 0.0
User 10247 AUC after training: 0.0
User 10247 does not improve AUC. Reverting changes.
[2024-12-02 19:53:13.436067] start test user 33565 240/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:14.266901] start test user 33565 240/568 recall augumented users by random, augumented_users = [31194, 59321, 57635, 29700, 106952, 61472, 53507, 118500, 96875, 47521, 87616, 27261, 65273, 100204, 89844, 5075, 74839, 89922, 130419, 122844, 121217, 52454, 51191, 49730, 82643, 103706, 132930, 126387, 51649, 119973, 68800, 117712, 130933, 103287, 18539, 35474, 8345, 8225, 118799, 122856, 35045, 8823, 108907, 134582, 128636, 116377, 67262, 133356, 88042, 77911]
[2024-12-02 19:53:14.297945] user = 33565 Cloud 240/568
[2024-12-02 19:53:14.312510] user = 33565 Local 240/568
[2024-12-02 19:53:14.389022] user = 33565 Local+ 240/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:16.360329] user = 33565 MPDA- 240/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7632978723404256
Training on augumented user 31194 0/50 current_auc = 0.7632978723404256
User 31194 AUC after training: 0.7638888888888888
User 31194 improves AUC. Keeping the model.
Training on augumented user 59321 1/50 current_auc = 0.7638888888888888
User 59321 AUC after training: 0.7641843971631206
User 59321 improves AUC. Keeping the model.
Training on augumented user 57635 2/50 current_auc = 0.7641843971631206
User 57635 AUC after training: 0.7635933806146572
User 57635 does not improve AUC. Reverting changes.
Training on augumented user 29700 3/50 current_auc = 0.7641843971631206
User 29700 AUC after training: 0.7630023640661938
User 29700 does not improve AUC. Reverting changes.
Training on augumented user 106952 4/50 current_auc = 0.7641843971631206
User 106952 AUC after training: 0.7635933806146572
User 106952 does not improve AUC. Reverting changes.
Training on augumented user 61472 5/50 current_auc = 0.7641843971631206
User 61472 AUC after training: 0.7635933806146572
User 61472 does not improve AUC. Reverting changes.
Training on augumented user 53507 6/50 current_auc = 0.7641843971631206
User 53507 AUC after training: 0.7635933806146572
User 53507 does not improve AUC. Reverting changes.
Training on augumented user 118500 7/50 current_auc = 0.7641843971631206
User 118500 AUC after training: 0.7635933806146572
User 118500 does not improve AUC. Reverting changes.
Training on augumented user 96875 8/50 current_auc = 0.7641843971631206
User 96875 AUC after training: 0.7630023640661939
User 96875 does not improve AUC. Reverting changes.
Training on augumented user 47521 9/50 current_auc = 0.7641843971631206
User 47521 AUC after training: 0.7641843971631206
User 47521 does not improve AUC. Reverting changes.
Training on augumented user 87616 10/50 current_auc = 0.7641843971631206
User 87616 AUC after training: 0.7635933806146572
User 87616 does not improve AUC. Reverting changes.
Training on augumented user 27261 11/50 current_auc = 0.7641843971631206
User 27261 AUC after training: 0.7635933806146572
User 27261 does not improve AUC. Reverting changes.
Training on augumented user 65273 12/50 current_auc = 0.7641843971631206
User 65273 AUC after training: 0.7635933806146572
User 65273 does not improve AUC. Reverting changes.
Training on augumented user 100204 13/50 current_auc = 0.7641843971631206
User 100204 AUC after training: 0.7635933806146572
User 100204 does not improve AUC. Reverting changes.
Training on augumented user 89844 14/50 current_auc = 0.7641843971631206
User 89844 AUC after training: 0.7630023640661938
User 89844 does not improve AUC. Reverting changes.
Training on augumented user 5075 15/50 current_auc = 0.7641843971631206
User 5075 AUC after training: 0.7635933806146572
User 5075 does not improve AUC. Reverting changes.
Training on augumented user 74839 16/50 current_auc = 0.7641843971631206
User 74839 AUC after training: 0.7630023640661938
User 74839 does not improve AUC. Reverting changes.
Training on augumented user 89922 17/50 current_auc = 0.7641843971631206
User 89922 AUC after training: 0.7641843971631206
User 89922 does not improve AUC. Reverting changes.
Training on augumented user 130419 18/50 current_auc = 0.7641843971631206
User 130419 AUC after training: 0.7635933806146572
User 130419 does not improve AUC. Reverting changes.
Training on augumented user 122844 19/50 current_auc = 0.7641843971631206
User 122844 AUC after training: 0.7630023640661938
User 122844 does not improve AUC. Reverting changes.
Training on augumented user 121217 20/50 current_auc = 0.7641843971631206
User 121217 AUC after training: 0.7644799054373523
User 121217 improves AUC. Keeping the model.
Training on augumented user 52454 21/50 current_auc = 0.7644799054373523
User 52454 AUC after training: 0.7644799054373523
User 52454 does not improve AUC. Reverting changes.
Training on augumented user 51191 22/50 current_auc = 0.7644799054373523
User 51191 AUC after training: 0.7644799054373523
User 51191 does not improve AUC. Reverting changes.
Training on augumented user 49730 23/50 current_auc = 0.7644799054373523
User 49730 AUC after training: 0.7644799054373523
User 49730 does not improve AUC. Reverting changes.
Training on augumented user 82643 24/50 current_auc = 0.7644799054373523
User 82643 AUC after training: 0.7644799054373523
User 82643 does not improve AUC. Reverting changes.
Training on augumented user 103706 25/50 current_auc = 0.7644799054373523
User 103706 AUC after training: 0.7644799054373523
User 103706 does not improve AUC. Reverting changes.
Training on augumented user 132930 26/50 current_auc = 0.7644799054373523
User 132930 AUC after training: 0.7644799054373523
User 132930 does not improve AUC. Reverting changes.
Training on augumented user 126387 27/50 current_auc = 0.7644799054373523
User 126387 AUC after training: 0.7635933806146572
User 126387 does not improve AUC. Reverting changes.
Training on augumented user 51649 28/50 current_auc = 0.7644799054373523
User 51649 AUC after training: 0.7641843971631206
User 51649 does not improve AUC. Reverting changes.
Training on augumented user 119973 29/50 current_auc = 0.7644799054373523
User 119973 AUC after training: 0.7644799054373523
User 119973 does not improve AUC. Reverting changes.
Training on augumented user 68800 30/50 current_auc = 0.7644799054373523
User 68800 AUC after training: 0.7618203309692672
User 68800 does not improve AUC. Reverting changes.
Training on augumented user 117712 31/50 current_auc = 0.7644799054373523
User 117712 AUC after training: 0.7638888888888888
User 117712 does not improve AUC. Reverting changes.
Training on augumented user 130933 32/50 current_auc = 0.7644799054373523
User 130933 AUC after training: 0.7644799054373523
User 130933 does not improve AUC. Reverting changes.
Training on augumented user 103287 33/50 current_auc = 0.7644799054373523
User 103287 AUC after training: 0.7635933806146572
User 103287 does not improve AUC. Reverting changes.
Training on augumented user 18539 34/50 current_auc = 0.7644799054373523
User 18539 AUC after training: 0.7641843971631206
User 18539 does not improve AUC. Reverting changes.
Training on augumented user 35474 35/50 current_auc = 0.7644799054373523
User 35474 AUC after training: 0.7644799054373523
User 35474 does not improve AUC. Reverting changes.
Training on augumented user 8345 36/50 current_auc = 0.7644799054373523
User 8345 AUC after training: 0.7644799054373523
User 8345 does not improve AUC. Reverting changes.
Training on augumented user 8225 37/50 current_auc = 0.7644799054373523
User 8225 AUC after training: 0.7644799054373523
User 8225 does not improve AUC. Reverting changes.
Training on augumented user 118799 38/50 current_auc = 0.7644799054373523
User 118799 AUC after training: 0.7644799054373523
User 118799 does not improve AUC. Reverting changes.
Training on augumented user 122856 39/50 current_auc = 0.7644799054373523
User 122856 AUC after training: 0.7644799054373523
User 122856 does not improve AUC. Reverting changes.
Training on augumented user 35045 40/50 current_auc = 0.7644799054373523
User 35045 AUC after training: 0.7644799054373523
User 35045 does not improve AUC. Reverting changes.
Training on augumented user 8823 41/50 current_auc = 0.7644799054373523
User 8823 AUC after training: 0.7644799054373523
User 8823 does not improve AUC. Reverting changes.
Training on augumented user 108907 42/50 current_auc = 0.7644799054373523
User 108907 AUC after training: 0.7644799054373523
User 108907 does not improve AUC. Reverting changes.
Training on augumented user 134582 43/50 current_auc = 0.7644799054373523
User 134582 AUC after training: 0.7632978723404256
User 134582 does not improve AUC. Reverting changes.
Training on augumented user 128636 44/50 current_auc = 0.7644799054373523
User 128636 AUC after training: 0.764775413711584
User 128636 improves AUC. Keeping the model.
Training on augumented user 116377 45/50 current_auc = 0.764775413711584
User 116377 AUC after training: 0.7635933806146572
User 116377 does not improve AUC. Reverting changes.
Training on augumented user 67262 46/50 current_auc = 0.764775413711584
User 67262 AUC after training: 0.7644799054373523
User 67262 does not improve AUC. Reverting changes.
Training on augumented user 133356 47/50 current_auc = 0.764775413711584
User 133356 AUC after training: 0.7641843971631206
User 133356 does not improve AUC. Reverting changes.
Training on augumented user 88042 48/50 current_auc = 0.764775413711584
User 88042 AUC after training: 0.7644799054373523
User 88042 does not improve AUC. Reverting changes.
Training on augumented user 77911 49/50 current_auc = 0.764775413711584
User 77911 AUC after training: 0.7644799054373523
User 77911 does not improve AUC. Reverting changes.
[2024-12-02 19:53:46.283452] start test user 33575 241/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:47.143111] start test user 33575 241/568 recall augumented users by random, augumented_users = [101489, 19689, 129109, 99008, 7508, 2009, 64141, 88077, 57360, 101408, 101442, 45701, 67969, 123562, 55846, 100481, 16720, 47455, 51398, 56558, 12031, 93167, 91680, 31091, 100287, 50244, 68432, 102201, 24400, 111715, 29195, 19570, 5026, 29515, 72937, 66808, 34319, 136944, 105155, 107917, 114709, 54750, 46608, 95867, 72382, 3179, 128043, 70987, 44627, 99684]
[2024-12-02 19:53:47.160077] user = 33575 Cloud 241/568
[2024-12-02 19:53:47.333042] user = 33575 Local 241/568
[2024-12-02 19:53:47.537655] user = 33575 Local+ 241/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:49.896292] user = 33575 MPDA- 241/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.716958227516297
Training on augumented user 101489 0/50 current_auc = 0.716958227516297
User 101489 AUC after training: 0.7169088104231393
User 101489 does not improve AUC. Reverting changes.
Training on augumented user 19689 1/50 current_auc = 0.716958227516297
User 19689 AUC after training: 0.7168787304533911
User 19689 does not improve AUC. Reverting changes.
Training on augumented user 129109 2/50 current_auc = 0.716958227516297
User 129109 AUC after training: 0.7167347763124535
User 129109 does not improve AUC. Reverting changes.
Training on augumented user 99008 3/50 current_auc = 0.716958227516297
User 99008 AUC after training: 0.7170033474709191
User 99008 improves AUC. Keeping the model.
Training on augumented user 7508 4/50 current_auc = 0.7170033474709191
User 7508 AUC after training: 0.7168207190831625
User 7508 does not improve AUC. Reverting changes.
Training on augumented user 2009 5/50 current_auc = 0.7170033474709191
User 2009 AUC after training: 0.7167498162973276
User 2009 does not improve AUC. Reverting changes.
Training on augumented user 64141 6/50 current_auc = 0.7170033474709191
User 64141 AUC after training: 0.7168379076373043
User 64141 does not improve AUC. Reverting changes.
Training on augumented user 88077 7/50 current_auc = 0.7170033474709191
User 88077 AUC after training: 0.7170892902416282
User 88077 improves AUC. Keeping the model.
Training on augumented user 57360 8/50 current_auc = 0.7170892902416282
User 57360 AUC after training: 0.7170205360250609
User 57360 does not improve AUC. Reverting changes.
Training on augumented user 101408 9/50 current_auc = 0.7170892902416282
User 101408 AUC after training: 0.7172654729215815
User 101408 improves AUC. Keeping the model.
Training on augumented user 101442 10/50 current_auc = 0.7172654729215815
User 101442 AUC after training: 0.7171795301508725
User 101442 does not improve AUC. Reverting changes.
Training on augumented user 45701 11/50 current_auc = 0.7172654729215815
User 45701 AUC after training: 0.7170248331635964
User 45701 does not improve AUC. Reverting changes.
Training on augumented user 67969 12/50 current_auc = 0.7172654729215815
User 67969 AUC after training: 0.7165435536476261
User 67969 does not improve AUC. Reverting changes.
Training on augumented user 123562 13/50 current_auc = 0.7172654729215815
User 123562 AUC after training: 0.7172611757830462
User 123562 does not improve AUC. Reverting changes.
Training on augumented user 55846 14/50 current_auc = 0.7172654729215815
User 55846 AUC after training: 0.7172096101206207
User 55846 does not improve AUC. Reverting changes.
Training on augumented user 100481 15/50 current_auc = 0.7172654729215815
User 100481 AUC after training: 0.7172267986747625
User 100481 does not improve AUC. Reverting changes.
Training on augumented user 16720 16/50 current_auc = 0.7172654729215815
User 16720 AUC after training: 0.7172891071835265
User 16720 improves AUC. Keeping the model.
Training on augumented user 47455 17/50 current_auc = 0.7172891071835265
User 47455 AUC after training: 0.7172482843674397
User 47455 does not improve AUC. Reverting changes.
Training on augumented user 51398 18/50 current_auc = 0.7172891071835265
User 51398 AUC after training: 0.7173428214152197
User 51398 improves AUC. Keeping the model.
Training on augumented user 56558 19/50 current_auc = 0.7173428214152197
User 56558 AUC after training: 0.7173686042464323
User 56558 improves AUC. Keeping the model.
Training on augumented user 12031 20/50 current_auc = 0.7173686042464323
User 12031 AUC after training: 0.7173664556771646
User 12031 does not improve AUC. Reverting changes.
Training on augumented user 93167 21/50 current_auc = 0.7173686042464323
User 93167 AUC after training: 0.7171795301508724
User 93167 does not improve AUC. Reverting changes.
Training on augumented user 91680 22/50 current_auc = 0.7173686042464323
User 91680 AUC after training: 0.717450249878606
User 91680 improves AUC. Keeping the model.
Training on augumented user 31091 23/50 current_auc = 0.717450249878606
User 31091 AUC after training: 0.7175576783419921
User 31091 improves AUC. Keeping the model.
Training on augumented user 100287 24/50 current_auc = 0.7175576783419921
User 100287 AUC after training: 0.717480329848354
User 100287 does not improve AUC. Reverting changes.
Training on augumented user 50244 25/50 current_auc = 0.7175576783419921
User 50244 AUC after training: 0.7175447869263857
User 50244 does not improve AUC. Reverting changes.
Training on augumented user 68432 26/50 current_auc = 0.7175576783419921
User 68432 AUC after training: 0.7175791640346693
User 68432 improves AUC. Keeping the model.
Training on augumented user 102201 27/50 current_auc = 0.7175791640346693
User 102201 AUC after training: 0.7173449699844873
User 102201 does not improve AUC. Reverting changes.
Training on augumented user 24400 28/50 current_auc = 0.7175791640346693
User 24400 AUC after training: 0.7173771985235032
User 24400 does not improve AUC. Reverting changes.
Training on augumented user 111715 29/50 current_auc = 0.7175791640346693
User 111715 AUC after training: 0.7174115756317868
User 111715 does not improve AUC. Reverting changes.
Training on augumented user 29195 30/50 current_auc = 0.7175791640346693
User 29195 AUC after training: 0.7172955528913296
User 29195 does not improve AUC. Reverting changes.
Training on augumented user 19570 31/50 current_auc = 0.7175791640346693
User 19570 AUC after training: 0.7172310958132979
User 19570 does not improve AUC. Reverting changes.
Training on augumented user 5026 32/50 current_auc = 0.7175791640346693
User 5026 AUC after training: 0.7174674384327477
User 5026 does not improve AUC. Reverting changes.
Training on augumented user 29515 33/50 current_auc = 0.7175791640346693
User 29515 AUC after training: 0.7174115756317868
User 29515 does not improve AUC. Reverting changes.
Training on augumented user 72937 34/50 current_auc = 0.7175791640346693
User 72937 AUC after training: 0.7174502498786057
User 72937 does not improve AUC. Reverting changes.
Training on augumented user 66808 35/50 current_auc = 0.7175791640346693
User 66808 AUC after training: 0.7174244670473932
User 66808 does not improve AUC. Reverting changes.
Training on augumented user 34319 36/50 current_auc = 0.7175791640346693
User 34319 AUC after training: 0.7175018155410313
User 34319 does not improve AUC. Reverting changes.
Training on augumented user 136944 37/50 current_auc = 0.7175791640346693
User 136944 AUC after training: 0.717394387077645
User 136944 does not improve AUC. Reverting changes.
Training on augumented user 105155 38/50 current_auc = 0.7175791640346693
User 105155 AUC after training: 0.7174244670473932
User 105155 does not improve AUC. Reverting changes.
Training on augumented user 107917 39/50 current_auc = 0.7175791640346693
User 107917 AUC after training: 0.7174695870020154
User 107917 does not improve AUC. Reverting changes.
Training on augumented user 114709 40/50 current_auc = 0.7175791640346693
User 114709 AUC after training: 0.7173514156922904
User 114709 does not improve AUC. Reverting changes.
Training on augumented user 54750 41/50 current_auc = 0.7175791640346693
User 54750 AUC after training: 0.7174631412942122
User 54750 does not improve AUC. Reverting changes.
Training on augumented user 46608 42/50 current_auc = 0.7175791640346693
User 46608 AUC after training: 0.7174287641859285
User 46608 does not improve AUC. Reverting changes.
Training on augumented user 95867 43/50 current_auc = 0.7175791640346693
User 95867 AUC after training: 0.7173729013849678
User 95867 does not improve AUC. Reverting changes.
Training on augumented user 72382 44/50 current_auc = 0.7175791640346693
User 72382 AUC after training: 0.7174373584629995
User 72382 does not improve AUC. Reverting changes.
Training on augumented user 3179 45/50 current_auc = 0.7175791640346693
User 3179 AUC after training: 0.7173879413698417
User 3179 does not improve AUC. Reverting changes.
Training on augumented user 128043 46/50 current_auc = 0.7175791640346693
User 128043 AUC after training: 0.7173428214152197
User 128043 does not improve AUC. Reverting changes.
Training on augumented user 70987 47/50 current_auc = 0.7175791640346693
User 70987 AUC after training: 0.7175018155410311
User 70987 does not improve AUC. Reverting changes.
Training on augumented user 44627 48/50 current_auc = 0.7175791640346693
User 44627 AUC after training: 0.7175791640346693
User 44627 does not improve AUC. Reverting changes.
Training on augumented user 99684 49/50 current_auc = 0.7175791640346693
User 99684 AUC after training: 0.7173857928005742
User 99684 does not improve AUC. Reverting changes.
[2024-12-02 19:54:23.693281] start test user 33624 242/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:24.208990] start test user 33624 242/568 recall augumented users by random, augumented_users = [10790, 79151, 120495, 71226, 104191, 85344, 16177, 95179, 40139, 34033, 55925, 122864, 83576, 79606, 119488, 94325, 2346, 102045, 32486, 41542, 74521, 31619, 77698, 19387, 77244, 2728, 99599, 7984, 9929, 14365, 32826, 111530, 21327, 10521, 131640, 55248, 114474, 64553, 102836, 20487, 102263, 131785, 52668, 101887, 60493, 38879, 29050, 95638, 47529, 58135]
[2024-12-02 19:54:24.224850] user = 33624 Cloud 242/568
[2024-12-02 19:54:24.259953] user = 33624 Local 242/568
[2024-12-02 19:54:24.387838] user = 33624 Local+ 242/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:26.734023] user = 33624 MPDA- 242/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7781179564237416
Training on augumented user 10790 0/50 current_auc = 0.7781179564237416
User 10790 AUC after training: 0.7785123966942148
User 10790 improves AUC. Keeping the model.
Training on augumented user 79151 1/50 current_auc = 0.7785123966942148
User 79151 AUC after training: 0.7788504883546206
User 79151 improves AUC. Keeping the model.
Training on augumented user 120495 2/50 current_auc = 0.7788504883546206
User 120495 AUC after training: 0.7785499624342599
User 120495 does not improve AUC. Reverting changes.
Training on augumented user 71226 3/50 current_auc = 0.7788504883546206
User 71226 AUC after training: 0.7791510142749812
User 71226 improves AUC. Keeping the model.
Training on augumented user 104191 4/50 current_auc = 0.7791510142749812
User 104191 AUC after training: 0.7791134485349361
User 104191 does not improve AUC. Reverting changes.
Training on augumented user 85344 5/50 current_auc = 0.7791510142749812
User 85344 AUC after training: 0.7789068369646882
User 85344 does not improve AUC. Reverting changes.
Training on augumented user 16177 6/50 current_auc = 0.7791510142749812
User 16177 AUC after training: 0.7790007513148008
User 16177 does not improve AUC. Reverting changes.
Training on augumented user 95179 7/50 current_auc = 0.7791510142749812
User 95179 AUC after training: 0.7785687453042824
User 95179 does not improve AUC. Reverting changes.
Training on augumented user 40139 8/50 current_auc = 0.7791510142749812
User 40139 AUC after training: 0.7790007513148008
User 40139 does not improve AUC. Reverting changes.
Training on augumented user 34033 9/50 current_auc = 0.7791510142749812
User 34033 AUC after training: 0.7783996994740796
User 34033 does not improve AUC. Reverting changes.
Training on augumented user 55925 10/50 current_auc = 0.7791510142749812
User 55925 AUC after training: 0.7783996994740797
User 55925 does not improve AUC. Reverting changes.
Training on augumented user 122864 11/50 current_auc = 0.7791510142749812
User 122864 AUC after training: 0.779000751314801
User 122864 does not improve AUC. Reverting changes.
Training on augumented user 83576 12/50 current_auc = 0.7791510142749812
User 83576 AUC after training: 0.7787565740045079
User 83576 does not improve AUC. Reverting changes.
Training on augumented user 79606 13/50 current_auc = 0.7791510142749812
User 79606 AUC after training: 0.7784372652141247
User 79606 does not improve AUC. Reverting changes.
Training on augumented user 119488 14/50 current_auc = 0.7791510142749812
User 119488 AUC after training: 0.7785687453042823
User 119488 does not improve AUC. Reverting changes.
Training on augumented user 94325 15/50 current_auc = 0.7791510142749812
User 94325 AUC after training: 0.7779301277235162
User 94325 does not improve AUC. Reverting changes.
Training on augumented user 2346 16/50 current_auc = 0.7791510142749812
User 2346 AUC after training: 0.7789068369646882
User 2346 does not improve AUC. Reverting changes.
Training on augumented user 102045 17/50 current_auc = 0.7791510142749812
User 102045 AUC after training: 0.7786626596543952
User 102045 does not improve AUC. Reverting changes.
Training on augumented user 32486 18/50 current_auc = 0.7791510142749812
User 32486 AUC after training: 0.7783433508640121
User 32486 does not improve AUC. Reverting changes.
Training on augumented user 41542 19/50 current_auc = 0.7791510142749812
User 41542 AUC after training: 0.7794515401953418
User 41542 improves AUC. Keeping the model.
Training on augumented user 74521 20/50 current_auc = 0.7794515401953418
User 74521 AUC after training: 0.7784748309541697
User 74521 does not improve AUC. Reverting changes.
Training on augumented user 31619 21/50 current_auc = 0.7794515401953418
User 31619 AUC after training: 0.7786250939143501
User 31619 does not improve AUC. Reverting changes.
Training on augumented user 77698 22/50 current_auc = 0.7794515401953418
User 77698 AUC after training: 0.7789819684447784
User 77698 does not improve AUC. Reverting changes.
Training on augumented user 19387 23/50 current_auc = 0.7794515401953418
User 19387 AUC after training: 0.77854996243426
User 19387 does not improve AUC. Reverting changes.
Training on augumented user 77244 24/50 current_auc = 0.7794515401953418
User 77244 AUC after training: 0.7787190082644627
User 77244 does not improve AUC. Reverting changes.
Training on augumented user 2728 25/50 current_auc = 0.7794515401953418
User 2728 AUC after training: 0.779000751314801
User 2728 does not improve AUC. Reverting changes.
Training on augumented user 99599 26/50 current_auc = 0.7794515401953418
User 99599 AUC after training: 0.777160030052592
User 99599 does not improve AUC. Reverting changes.
Training on augumented user 7984 27/50 current_auc = 0.7794515401953418
User 7984 AUC after training: 0.7793388429752065
User 7984 does not improve AUC. Reverting changes.
Training on augumented user 9929 28/50 current_auc = 0.7794515401953418
User 9929 AUC after training: 0.7786626596543952
User 9929 does not improve AUC. Reverting changes.
Training on augumented user 14365 29/50 current_auc = 0.7794515401953418
User 14365 AUC after training: 0.7784372652141247
User 14365 does not improve AUC. Reverting changes.
Training on augumented user 32826 30/50 current_auc = 0.7794515401953418
User 32826 AUC after training: 0.7789631855747557
User 32826 does not improve AUC. Reverting changes.
Training on augumented user 111530 31/50 current_auc = 0.7794515401953418
User 111530 AUC after training: 0.7793012772351616
User 111530 does not improve AUC. Reverting changes.
Training on augumented user 21327 32/50 current_auc = 0.7794515401953418
User 21327 AUC after training: 0.7790570999248685
User 21327 does not improve AUC. Reverting changes.
Training on augumented user 10521 33/50 current_auc = 0.7794515401953418
User 10521 AUC after training: 0.7791697971450038
User 10521 does not improve AUC. Reverting changes.
Training on augumented user 131640 34/50 current_auc = 0.7794515401953418
User 131640 AUC after training: 0.7794139744552967
User 131640 does not improve AUC. Reverting changes.
Training on augumented user 55248 35/50 current_auc = 0.7794515401953418
User 55248 AUC after training: 0.778512396694215
User 55248 does not improve AUC. Reverting changes.
Training on augumented user 114474 36/50 current_auc = 0.7794515401953418
User 114474 AUC after training: 0.7788692712246431
User 114474 does not improve AUC. Reverting changes.
Training on augumented user 64553 37/50 current_auc = 0.7794515401953418
User 64553 AUC after training: 0.77854996243426
User 64553 does not improve AUC. Reverting changes.
Training on augumented user 102836 38/50 current_auc = 0.7794515401953418
User 102836 AUC after training: 0.7786438767843725
User 102836 does not improve AUC. Reverting changes.
Training on augumented user 20487 39/50 current_auc = 0.7794515401953418
User 20487 AUC after training: 0.7791885800150263
User 20487 does not improve AUC. Reverting changes.
Training on augumented user 102263 40/50 current_auc = 0.7794515401953418
User 102263 AUC after training: 0.7788504883546207
User 102263 does not improve AUC. Reverting changes.
Training on augumented user 131785 41/50 current_auc = 0.7794515401953418
User 131785 AUC after training: 0.7790383170548459
User 131785 does not improve AUC. Reverting changes.
Training on augumented user 52668 42/50 current_auc = 0.7794515401953418
User 52668 AUC after training: 0.7787753568745304
User 52668 does not improve AUC. Reverting changes.
Training on augumented user 101887 43/50 current_auc = 0.7794515401953418
User 101887 AUC after training: 0.7783996994740796
User 101887 does not improve AUC. Reverting changes.
Training on augumented user 60493 44/50 current_auc = 0.7794515401953418
User 60493 AUC after training: 0.779075882794891
User 60493 does not improve AUC. Reverting changes.
Training on augumented user 38879 45/50 current_auc = 0.7794515401953418
User 38879 AUC after training: 0.7786814425244177
User 38879 does not improve AUC. Reverting changes.
Training on augumented user 29050 46/50 current_auc = 0.7794515401953418
User 29050 AUC after training: 0.7786250939143501
User 29050 does not improve AUC. Reverting changes.
Training on augumented user 95638 47/50 current_auc = 0.7794515401953418
User 95638 AUC after training: 0.7786250939143501
User 95638 does not improve AUC. Reverting changes.
Training on augumented user 47529 48/50 current_auc = 0.7794515401953418
User 47529 AUC after training: 0.7785123966942148
User 47529 does not improve AUC. Reverting changes.
Training on augumented user 58135 49/50 current_auc = 0.7794515401953418
User 58135 AUC after training: 0.7783621337340346
User 58135 does not improve AUC. Reverting changes.
[2024-12-02 19:54:59.420750] start test user 33647 243/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:00.018106] start test user 33647 243/568 recall augumented users by random, augumented_users = [91534, 24537, 31220, 32577, 130065, 129185, 50592, 107428, 78307, 65726, 124947, 21470, 47237, 56011, 95571, 122891, 114265, 89951, 132441, 76816, 115931, 98201, 30740, 6604, 102211, 125702, 40029, 17209, 67483, 49913, 99030, 81832, 42071, 53401, 28985, 52311, 59615, 69427, 66210, 118266, 115817, 130471, 73423, 122923, 134815, 1945, 40086, 22781, 90586, 47304]
[2024-12-02 19:55:00.033289] user = 33647 Cloud 243/568
[2024-12-02 19:55:00.066353] user = 33647 Local 243/568
[2024-12-02 19:55:00.189943] user = 33647 Local+ 243/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:02.453040] user = 33647 MPDA- 243/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5921160130718955
Training on augumented user 91534 0/50 current_auc = 0.5921160130718955
User 91534 AUC after training: 0.5921160130718955
User 91534 does not improve AUC. Reverting changes.
Training on augumented user 24537 1/50 current_auc = 0.5921160130718955
User 24537 AUC after training: 0.5937500000000001
User 24537 improves AUC. Keeping the model.
Training on augumented user 31220 2/50 current_auc = 0.5937500000000001
User 31220 AUC after training: 0.5927287581699346
User 31220 does not improve AUC. Reverting changes.
Training on augumented user 32577 3/50 current_auc = 0.5937500000000001
User 32577 AUC after training: 0.5919117647058824
User 32577 does not improve AUC. Reverting changes.
Training on augumented user 130065 4/50 current_auc = 0.5937500000000001
User 130065 AUC after training: 0.5919117647058824
User 130065 does not improve AUC. Reverting changes.
Training on augumented user 129185 5/50 current_auc = 0.5937500000000001
User 129185 AUC after training: 0.5935457516339869
User 129185 does not improve AUC. Reverting changes.
Training on augumented user 50592 6/50 current_auc = 0.5937500000000001
User 50592 AUC after training: 0.59375
User 50592 does not improve AUC. Reverting changes.
Training on augumented user 107428 7/50 current_auc = 0.5937500000000001
User 107428 AUC after training: 0.5937500000000001
User 107428 does not improve AUC. Reverting changes.
Training on augumented user 78307 8/50 current_auc = 0.5937500000000001
User 78307 AUC after training: 0.5929330065359476
User 78307 does not improve AUC. Reverting changes.
Training on augumented user 65726 9/50 current_auc = 0.5937500000000001
User 65726 AUC after training: 0.5931372549019608
User 65726 does not improve AUC. Reverting changes.
Training on augumented user 124947 10/50 current_auc = 0.5937500000000001
User 124947 AUC after training: 0.5927287581699346
User 124947 does not improve AUC. Reverting changes.
Training on augumented user 21470 11/50 current_auc = 0.5937500000000001
User 21470 AUC after training: 0.5937500000000001
User 21470 does not improve AUC. Reverting changes.
Training on augumented user 47237 12/50 current_auc = 0.5937500000000001
User 47237 AUC after training: 0.5929330065359476
User 47237 does not improve AUC. Reverting changes.
Training on augumented user 56011 13/50 current_auc = 0.5937500000000001
User 56011 AUC after training: 0.5927287581699346
User 56011 does not improve AUC. Reverting changes.
Training on augumented user 95571 14/50 current_auc = 0.5937500000000001
User 95571 AUC after training: 0.5937500000000001
User 95571 does not improve AUC. Reverting changes.
Training on augumented user 122891 15/50 current_auc = 0.5937500000000001
User 122891 AUC after training: 0.5937500000000001
User 122891 does not improve AUC. Reverting changes.
Training on augumented user 114265 16/50 current_auc = 0.5937500000000001
User 114265 AUC after training: 0.5937500000000001
User 114265 does not improve AUC. Reverting changes.
Training on augumented user 89951 17/50 current_auc = 0.5937500000000001
User 89951 AUC after training: 0.59375
User 89951 does not improve AUC. Reverting changes.
Training on augumented user 132441 18/50 current_auc = 0.5937500000000001
User 132441 AUC after training: 0.5945669934640523
User 132441 improves AUC. Keeping the model.
Training on augumented user 76816 19/50 current_auc = 0.5945669934640523
User 76816 AUC after training: 0.5945669934640524
User 76816 improves AUC. Keeping the model.
Training on augumented user 115931 20/50 current_auc = 0.5945669934640524
User 115931 AUC after training: 0.5945669934640524
User 115931 does not improve AUC. Reverting changes.
Training on augumented user 98201 21/50 current_auc = 0.5945669934640524
User 98201 AUC after training: 0.5945669934640524
User 98201 does not improve AUC. Reverting changes.
Training on augumented user 30740 22/50 current_auc = 0.5945669934640524
User 30740 AUC after training: 0.5915032679738562
User 30740 does not improve AUC. Reverting changes.
Training on augumented user 6604 23/50 current_auc = 0.5945669934640524
User 6604 AUC after training: 0.5949754901960784
User 6604 improves AUC. Keeping the model.
Training on augumented user 102211 24/50 current_auc = 0.5949754901960784
User 102211 AUC after training: 0.5957924836601307
User 102211 improves AUC. Keeping the model.
Training on augumented user 125702 25/50 current_auc = 0.5957924836601307
User 125702 AUC after training: 0.5939542483660131
User 125702 does not improve AUC. Reverting changes.
Training on augumented user 40029 26/50 current_auc = 0.5957924836601307
User 40029 AUC after training: 0.5949754901960784
User 40029 does not improve AUC. Reverting changes.
Training on augumented user 17209 27/50 current_auc = 0.5957924836601307
User 17209 AUC after training: 0.5953839869281047
User 17209 does not improve AUC. Reverting changes.
Training on augumented user 67483 28/50 current_auc = 0.5957924836601307
User 67483 AUC after training: 0.5949754901960785
User 67483 does not improve AUC. Reverting changes.
Training on augumented user 49913 29/50 current_auc = 0.5957924836601307
User 49913 AUC after training: 0.5953839869281045
User 49913 does not improve AUC. Reverting changes.
Training on augumented user 99030 30/50 current_auc = 0.5957924836601307
User 99030 AUC after training: 0.5957924836601308
User 99030 improves AUC. Keeping the model.
Training on augumented user 81832 31/50 current_auc = 0.5957924836601308
User 81832 AUC after training: 0.5949754901960784
User 81832 does not improve AUC. Reverting changes.
Training on augumented user 42071 32/50 current_auc = 0.5957924836601308
User 42071 AUC after training: 0.5957924836601308
User 42071 does not improve AUC. Reverting changes.
Training on augumented user 53401 33/50 current_auc = 0.5957924836601308
User 53401 AUC after training: 0.5957924836601307
User 53401 does not improve AUC. Reverting changes.
Training on augumented user 28985 34/50 current_auc = 0.5957924836601308
User 28985 AUC after training: 0.5953839869281047
User 28985 does not improve AUC. Reverting changes.
Training on augumented user 52311 35/50 current_auc = 0.5957924836601308
User 52311 AUC after training: 0.5923202614379085
User 52311 does not improve AUC. Reverting changes.
Training on augumented user 59615 36/50 current_auc = 0.5957924836601308
User 59615 AUC after training: 0.5927287581699346
User 59615 does not improve AUC. Reverting changes.
Training on augumented user 69427 37/50 current_auc = 0.5957924836601308
User 69427 AUC after training: 0.5945669934640524
User 69427 does not improve AUC. Reverting changes.
Training on augumented user 66210 38/50 current_auc = 0.5957924836601308
User 66210 AUC after training: 0.5941584967320261
User 66210 does not improve AUC. Reverting changes.
Training on augumented user 118266 39/50 current_auc = 0.5957924836601308
User 118266 AUC after training: 0.5931372549019608
User 118266 does not improve AUC. Reverting changes.
Training on augumented user 115817 40/50 current_auc = 0.5957924836601308
User 115817 AUC after training: 0.5945669934640523
User 115817 does not improve AUC. Reverting changes.
Training on augumented user 130471 41/50 current_auc = 0.5957924836601308
User 130471 AUC after training: 0.5953839869281046
User 130471 does not improve AUC. Reverting changes.
Training on augumented user 73423 42/50 current_auc = 0.5957924836601308
User 73423 AUC after training: 0.5945669934640524
User 73423 does not improve AUC. Reverting changes.
Training on augumented user 122923 43/50 current_auc = 0.5957924836601308
User 122923 AUC after training: 0.5957924836601308
User 122923 does not improve AUC. Reverting changes.
Training on augumented user 134815 44/50 current_auc = 0.5957924836601308
User 134815 AUC after training: 0.5949754901960784
User 134815 does not improve AUC. Reverting changes.
Training on augumented user 1945 45/50 current_auc = 0.5957924836601308
User 1945 AUC after training: 0.5953839869281046
User 1945 does not improve AUC. Reverting changes.
Training on augumented user 40086 46/50 current_auc = 0.5957924836601308
User 40086 AUC after training: 0.5939542483660131
User 40086 does not improve AUC. Reverting changes.
Training on augumented user 22781 47/50 current_auc = 0.5957924836601308
User 22781 AUC after training: 0.5949754901960784
User 22781 does not improve AUC. Reverting changes.
Training on augumented user 90586 48/50 current_auc = 0.5957924836601308
User 90586 AUC after training: 0.5937500000000001
User 90586 does not improve AUC. Reverting changes.
Training on augumented user 47304 49/50 current_auc = 0.5957924836601308
User 47304 AUC after training: 0.5949754901960784
User 47304 does not improve AUC. Reverting changes.
[2024-12-02 19:55:30.854620] start test user 33655 244/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:31.540457] start test user 33655 244/568 recall augumented users by random, augumented_users = [37693, 84974, 35765, 116478, 63262, 10887, 125620, 104307, 18211, 123566, 134398, 81779, 28462, 26379, 49471, 51030, 32564, 26740, 51787, 114817, 14277, 57817, 97503, 107084, 88363, 115695, 127546, 3347, 16894, 65558, 135270, 88187, 37227, 118276, 103723, 84725, 25459, 104141, 100099, 86737, 18385, 66708, 137809, 87055, 134915, 135339, 111943, 63055, 132373, 101238]
[2024-12-02 19:55:31.557445] user = 33655 Cloud 244/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:55:31.565205] user = 33655 Local 244/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:55:31.633580] user = 33655 Local+ 244/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:55:34.955808] user = 33655 MPDA- 244/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 37693 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37693 AUC after training: 0.5
User 37693 does not improve AUC. Reverting changes.
Training on augumented user 84974 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84974 AUC after training: 0.5
User 84974 does not improve AUC. Reverting changes.
Training on augumented user 35765 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35765 AUC after training: 0.5
User 35765 does not improve AUC. Reverting changes.
Training on augumented user 116478 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116478 AUC after training: 0.5
User 116478 does not improve AUC. Reverting changes.
Training on augumented user 63262 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63262 AUC after training: 0.5
User 63262 does not improve AUC. Reverting changes.
Training on augumented user 10887 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10887 AUC after training: 0.5
User 10887 does not improve AUC. Reverting changes.
Training on augumented user 125620 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125620 AUC after training: 0.5
User 125620 does not improve AUC. Reverting changes.
Training on augumented user 104307 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104307 AUC after training: 0.5
User 104307 does not improve AUC. Reverting changes.
Training on augumented user 18211 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18211 AUC after training: 0.5
User 18211 does not improve AUC. Reverting changes.
Training on augumented user 123566 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123566 AUC after training: 0.5
User 123566 does not improve AUC. Reverting changes.
Training on augumented user 134398 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134398 AUC after training: 0.5
User 134398 does not improve AUC. Reverting changes.
Training on augumented user 81779 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81779 AUC after training: 0.5
User 81779 does not improve AUC. Reverting changes.
Training on augumented user 28462 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28462 AUC after training: 0.5
User 28462 does not improve AUC. Reverting changes.
Training on augumented user 26379 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26379 AUC after training: 0.5
User 26379 does not improve AUC. Reverting changes.
Training on augumented user 49471 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49471 AUC after training: 0.5
User 49471 does not improve AUC. Reverting changes.
Training on augumented user 51030 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51030 AUC after training: 0.5
User 51030 does not improve AUC. Reverting changes.
Training on augumented user 32564 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32564 AUC after training: 0.5
User 32564 does not improve AUC. Reverting changes.
Training on augumented user 26740 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26740 AUC after training: 0.5
User 26740 does not improve AUC. Reverting changes.
Training on augumented user 51787 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51787 AUC after training: 0.5
User 51787 does not improve AUC. Reverting changes.
Training on augumented user 114817 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114817 AUC after training: 0.5
User 114817 does not improve AUC. Reverting changes.
Training on augumented user 14277 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14277 AUC after training: 0.5
User 14277 does not improve AUC. Reverting changes.
Training on augumented user 57817 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57817 AUC after training: 0.5
User 57817 does not improve AUC. Reverting changes.
Training on augumented user 97503 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97503 AUC after training: 0.5
User 97503 does not improve AUC. Reverting changes.
Training on augumented user 107084 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107084 AUC after training: 0.5
User 107084 does not improve AUC. Reverting changes.
Training on augumented user 88363 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88363 AUC after training: 0.5
User 88363 does not improve AUC. Reverting changes.
Training on augumented user 115695 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115695 AUC after training: 0.5
User 115695 does not improve AUC. Reverting changes.
Training on augumented user 127546 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127546 AUC after training: 0.5
User 127546 does not improve AUC. Reverting changes.
Training on augumented user 3347 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3347 AUC after training: 0.5
User 3347 does not improve AUC. Reverting changes.
Training on augumented user 16894 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16894 AUC after training: 0.5
User 16894 does not improve AUC. Reverting changes.
Training on augumented user 65558 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65558 AUC after training: 0.5
User 65558 does not improve AUC. Reverting changes.
Training on augumented user 135270 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135270 AUC after training: 0.5
User 135270 does not improve AUC. Reverting changes.
Training on augumented user 88187 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88187 AUC after training: 0.5
User 88187 does not improve AUC. Reverting changes.
Training on augumented user 37227 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37227 AUC after training: 0.5
User 37227 does not improve AUC. Reverting changes.
Training on augumented user 118276 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118276 AUC after training: 0.5
User 118276 does not improve AUC. Reverting changes.
Training on augumented user 103723 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103723 AUC after training: 0.5
User 103723 does not improve AUC. Reverting changes.
Training on augumented user 84725 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84725 AUC after training: 0.5
User 84725 does not improve AUC. Reverting changes.
Training on augumented user 25459 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25459 AUC after training: 0.5
User 25459 does not improve AUC. Reverting changes.
Training on augumented user 104141 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104141 AUC after training: 0.5
User 104141 does not improve AUC. Reverting changes.
Training on augumented user 100099 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100099 AUC after training: 0.5
User 100099 does not improve AUC. Reverting changes.
Training on augumented user 86737 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86737 AUC after training: 0.5
User 86737 does not improve AUC. Reverting changes.
Training on augumented user 18385 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18385 AUC after training: 0.5
User 18385 does not improve AUC. Reverting changes.
Training on augumented user 66708 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66708 AUC after training: 0.5
User 66708 does not improve AUC. Reverting changes.
Training on augumented user 137809 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137809 AUC after training: 0.5
User 137809 does not improve AUC. Reverting changes.
Training on augumented user 87055 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87055 AUC after training: 0.5
User 87055 does not improve AUC. Reverting changes.
Training on augumented user 134915 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134915 AUC after training: 0.5
User 134915 does not improve AUC. Reverting changes.
Training on augumented user 135339 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135339 AUC after training: 0.5
User 135339 does not improve AUC. Reverting changes.
Training on augumented user 111943 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111943 AUC after training: 0.5
User 111943 does not improve AUC. Reverting changes.
Training on augumented user 63055 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63055 AUC after training: 0.5
User 63055 does not improve AUC. Reverting changes.
Training on augumented user 132373 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132373 AUC after training: 0.5
User 132373 does not improve AUC. Reverting changes.
Training on augumented user 101238 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101238 AUC after training: 0.5
User 101238 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:55:59.189663] start test user 33690 245/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:59.593905] start test user 33690 245/568 recall augumented users by random, augumented_users = [86041, 96039, 137345, 13756, 98076, 22272, 127835, 23262, 116962, 22482, 92284, 42184, 37820, 110916, 6503, 84866, 105241, 40592, 134337, 85708, 25583, 90585, 45889, 99492, 136757, 64999, 101263, 108633, 138001, 2467, 26290, 2572, 52273, 39675, 85313, 47753, 134903, 65344, 15922, 38320, 50101, 107131, 103171, 104244, 33732, 136623, 88853, 69004, 135070, 74598]
[2024-12-02 19:55:59.610192] user = 33690 Cloud 245/568
[2024-12-02 19:55:59.633519] user = 33690 Local 245/568
[2024-12-02 19:55:59.805963] user = 33690 Local+ 245/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:01.860324] user = 33690 MPDA- 245/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.530307510348906
Training on augumented user 86041 0/50 current_auc = 0.530307510348906
User 86041 AUC after training: 0.528976936723832
User 86041 does not improve AUC. Reverting changes.
Training on augumented user 96039 1/50 current_auc = 0.530307510348906
User 96039 AUC after training: 0.5308988764044944
User 96039 improves AUC. Keeping the model.
Training on augumented user 137345 2/50 current_auc = 0.5308988764044944
User 137345 AUC after training: 0.5311945594322885
User 137345 improves AUC. Keeping the model.
Training on augumented user 13756 3/50 current_auc = 0.5311945594322885
User 13756 AUC after training: 0.5291247782377291
User 13756 does not improve AUC. Reverting changes.
Training on augumented user 98076 4/50 current_auc = 0.5311945594322885
User 98076 AUC after training: 0.531785925487877
User 98076 improves AUC. Keeping the model.
Training on augumented user 22272 5/50 current_auc = 0.531785925487877
User 22272 AUC after training: 0.5316380839739799
User 22272 does not improve AUC. Reverting changes.
Training on augumented user 127835 6/50 current_auc = 0.531785925487877
User 127835 AUC after training: 0.5323772915434654
User 127835 improves AUC. Keeping the model.
Training on augumented user 23262 7/50 current_auc = 0.5323772915434654
User 23262 AUC after training: 0.5328208160851566
User 23262 improves AUC. Keeping the model.
Training on augumented user 116962 8/50 current_auc = 0.5328208160851566
User 116962 AUC after training: 0.5325251330573625
User 116962 does not improve AUC. Reverting changes.
Training on augumented user 22482 9/50 current_auc = 0.5328208160851566
User 22482 AUC after training: 0.5331164991129509
User 22482 improves AUC. Keeping the model.
Training on augumented user 92284 10/50 current_auc = 0.5331164991129509
User 92284 AUC after training: 0.5297161442933176
User 92284 does not improve AUC. Reverting changes.
Training on augumented user 42184 11/50 current_auc = 0.5331164991129509
User 42184 AUC after training: 0.5313424009461857
User 42184 does not improve AUC. Reverting changes.
Training on augumented user 37820 12/50 current_auc = 0.5331164991129509
User 37820 AUC after training: 0.5316380839739799
User 37820 does not improve AUC. Reverting changes.
Training on augumented user 110916 13/50 current_auc = 0.5331164991129509
User 110916 AUC after training: 0.5316380839739798
User 110916 does not improve AUC. Reverting changes.
Training on augumented user 6503 14/50 current_auc = 0.5331164991129509
User 6503 AUC after training: 0.531785925487877
User 6503 does not improve AUC. Reverting changes.
Training on augumented user 84866 15/50 current_auc = 0.5331164991129509
User 84866 AUC after training: 0.534594914251922
User 84866 improves AUC. Keeping the model.
Training on augumented user 105241 16/50 current_auc = 0.534594914251922
User 105241 AUC after training: 0.5342992312241277
User 105241 does not improve AUC. Reverting changes.
Training on augumented user 40592 17/50 current_auc = 0.534594914251922
User 40592 AUC after training: 0.5335600236546422
User 40592 does not improve AUC. Reverting changes.
Training on augumented user 134337 18/50 current_auc = 0.534594914251922
User 134337 AUC after training: 0.5342992312241277
User 134337 does not improve AUC. Reverting changes.
Training on augumented user 85708 19/50 current_auc = 0.534594914251922
User 85708 AUC after training: 0.5337078651685394
User 85708 does not improve AUC. Reverting changes.
Training on augumented user 25583 20/50 current_auc = 0.534594914251922
User 25583 AUC after training: 0.5341513897102306
User 25583 does not improve AUC. Reverting changes.
Training on augumented user 90585 21/50 current_auc = 0.534594914251922
User 90585 AUC after training: 0.5350384387936131
User 90585 improves AUC. Keeping the model.
Training on augumented user 45889 22/50 current_auc = 0.5350384387936131
User 45889 AUC after training: 0.5348905972797162
User 45889 does not improve AUC. Reverting changes.
Training on augumented user 99492 23/50 current_auc = 0.5350384387936131
User 99492 AUC after training: 0.5356298048492016
User 99492 improves AUC. Keeping the model.
Training on augumented user 136757 24/50 current_auc = 0.5356298048492016
User 136757 AUC after training: 0.5359254878769959
User 136757 improves AUC. Keeping the model.
Training on augumented user 64999 25/50 current_auc = 0.5359254878769959
User 64999 AUC after training: 0.5353341218214074
User 64999 does not improve AUC. Reverting changes.
Training on augumented user 101263 26/50 current_auc = 0.5359254878769959
User 101263 AUC after training: 0.5354819633353045
User 101263 does not improve AUC. Reverting changes.
Training on augumented user 108633 27/50 current_auc = 0.5359254878769959
User 108633 AUC after training: 0.5351862803075104
User 108633 does not improve AUC. Reverting changes.
Training on augumented user 138001 28/50 current_auc = 0.5359254878769959
User 138001 AUC after training: 0.5368125369603785
User 138001 improves AUC. Keeping the model.
Training on augumented user 2467 29/50 current_auc = 0.5368125369603785
User 2467 AUC after training: 0.5356298048492016
User 2467 does not improve AUC. Reverting changes.
Training on augumented user 26290 30/50 current_auc = 0.5368125369603785
User 26290 AUC after training: 0.5354819633353045
User 26290 does not improve AUC. Reverting changes.
Training on augumented user 2572 31/50 current_auc = 0.5368125369603785
User 2572 AUC after training: 0.5354819633353045
User 2572 does not improve AUC. Reverting changes.
Training on augumented user 52273 32/50 current_auc = 0.5368125369603785
User 52273 AUC after training: 0.536073329390893
User 52273 does not improve AUC. Reverting changes.
Training on augumented user 39675 33/50 current_auc = 0.5368125369603785
User 39675 AUC after training: 0.5369603784742756
User 39675 improves AUC. Keeping the model.
Training on augumented user 85313 34/50 current_auc = 0.5369603784742756
User 85313 AUC after training: 0.5366646954464813
User 85313 does not improve AUC. Reverting changes.
Training on augumented user 47753 35/50 current_auc = 0.5369603784742756
User 47753 AUC after training: 0.5365168539325843
User 47753 does not improve AUC. Reverting changes.
Training on augumented user 134903 36/50 current_auc = 0.5369603784742756
User 134903 AUC after training: 0.5374039030159669
User 134903 improves AUC. Keeping the model.
Training on augumented user 65344 37/50 current_auc = 0.5374039030159669
User 65344 AUC after training: 0.5365168539325842
User 65344 does not improve AUC. Reverting changes.
Training on augumented user 15922 38/50 current_auc = 0.5374039030159669
User 15922 AUC after training: 0.5379952690715553
User 15922 improves AUC. Keeping the model.
Training on augumented user 38320 39/50 current_auc = 0.5379952690715553
User 38320 AUC after training: 0.5396215257244233
User 38320 improves AUC. Keeping the model.
Training on augumented user 50101 40/50 current_auc = 0.5396215257244233
User 50101 AUC after training: 0.5394736842105263
User 50101 does not improve AUC. Reverting changes.
Training on augumented user 107131 41/50 current_auc = 0.5396215257244233
User 107131 AUC after training: 0.5387344766410408
User 107131 does not improve AUC. Reverting changes.
Training on augumented user 103171 42/50 current_auc = 0.5396215257244233
User 103171 AUC after training: 0.5400650502661147
User 103171 improves AUC. Keeping the model.
Training on augumented user 104244 43/50 current_auc = 0.5400650502661147
User 104244 AUC after training: 0.5385866351271437
User 104244 does not improve AUC. Reverting changes.
Training on augumented user 33732 44/50 current_auc = 0.5400650502661147
User 33732 AUC after training: 0.53622117090479
User 33732 does not improve AUC. Reverting changes.
Training on augumented user 136623 45/50 current_auc = 0.5400650502661147
User 136623 AUC after training: 0.5394736842105263
User 136623 does not improve AUC. Reverting changes.
Training on augumented user 88853 46/50 current_auc = 0.5400650502661147
User 88853 AUC after training: 0.5397693672383205
User 88853 does not improve AUC. Reverting changes.
Training on augumented user 69004 47/50 current_auc = 0.5400650502661147
User 69004 AUC after training: 0.539030159668835
User 69004 does not improve AUC. Reverting changes.
Training on augumented user 135070 48/50 current_auc = 0.5400650502661147
User 135070 AUC after training: 0.5366646954464813
User 135070 does not improve AUC. Reverting changes.
Training on augumented user 74598 49/50 current_auc = 0.5400650502661147
User 74598 AUC after training: 0.5381431105854524
User 74598 does not improve AUC. Reverting changes.
[2024-12-02 19:56:34.752553] start test user 33726 246/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:35.450445] start test user 33726 246/568 recall augumented users by random, augumented_users = [7140, 121893, 101664, 65152, 64560, 25631, 9029, 14107, 13256, 116766, 80280, 123088, 126276, 100050, 70024, 111920, 44988, 135443, 56366, 28463, 18187, 65294, 96236, 65322, 93750, 80395, 93050, 52766, 29722, 39704, 64390, 58919, 31236, 134262, 7734, 52996, 40450, 46771, 79697, 128243, 100635, 39411, 105827, 21664, 32883, 32712, 86330, 126115, 35860, 44809]
[2024-12-02 19:56:35.467325] user = 33726 Cloud 246/568
[2024-12-02 19:56:35.479772] user = 33726 Local 246/568
[2024-12-02 19:56:35.514505] user = 33726 Local+ 246/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:38.109858] user = 33726 MPDA- 246/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7987012987012987
Training on augumented user 7140 0/50 current_auc = 0.7987012987012987
User 7140 AUC after training: 0.7987012987012987
User 7140 does not improve AUC. Reverting changes.
Training on augumented user 121893 1/50 current_auc = 0.7987012987012987
User 121893 AUC after training: 0.801948051948052
User 121893 improves AUC. Keeping the model.
Training on augumented user 101664 2/50 current_auc = 0.801948051948052
User 101664 AUC after training: 0.7954545454545454
User 101664 does not improve AUC. Reverting changes.
Training on augumented user 65152 3/50 current_auc = 0.801948051948052
User 65152 AUC after training: 0.7987012987012987
User 65152 does not improve AUC. Reverting changes.
Training on augumented user 64560 4/50 current_auc = 0.801948051948052
User 64560 AUC after training: 0.7987012987012987
User 64560 does not improve AUC. Reverting changes.
Training on augumented user 25631 5/50 current_auc = 0.801948051948052
User 25631 AUC after training: 0.7954545454545454
User 25631 does not improve AUC. Reverting changes.
Training on augumented user 9029 6/50 current_auc = 0.801948051948052
User 9029 AUC after training: 0.801948051948052
User 9029 does not improve AUC. Reverting changes.
Training on augumented user 14107 7/50 current_auc = 0.801948051948052
User 14107 AUC after training: 0.7987012987012987
User 14107 does not improve AUC. Reverting changes.
Training on augumented user 13256 8/50 current_auc = 0.801948051948052
User 13256 AUC after training: 0.7987012987012987
User 13256 does not improve AUC. Reverting changes.
Training on augumented user 116766 9/50 current_auc = 0.801948051948052
User 116766 AUC after training: 0.7954545454545454
User 116766 does not improve AUC. Reverting changes.
Training on augumented user 80280 10/50 current_auc = 0.801948051948052
User 80280 AUC after training: 0.7954545454545454
User 80280 does not improve AUC. Reverting changes.
Training on augumented user 123088 11/50 current_auc = 0.801948051948052
User 123088 AUC after training: 0.7954545454545454
User 123088 does not improve AUC. Reverting changes.
Training on augumented user 126276 12/50 current_auc = 0.801948051948052
User 126276 AUC after training: 0.7987012987012987
User 126276 does not improve AUC. Reverting changes.
Training on augumented user 100050 13/50 current_auc = 0.801948051948052
User 100050 AUC after training: 0.7987012987012987
User 100050 does not improve AUC. Reverting changes.
Training on augumented user 70024 14/50 current_auc = 0.801948051948052
User 70024 AUC after training: 0.801948051948052
User 70024 does not improve AUC. Reverting changes.
Training on augumented user 111920 15/50 current_auc = 0.801948051948052
User 111920 AUC after training: 0.7987012987012987
User 111920 does not improve AUC. Reverting changes.
Training on augumented user 44988 16/50 current_auc = 0.801948051948052
User 44988 AUC after training: 0.7987012987012987
User 44988 does not improve AUC. Reverting changes.
Training on augumented user 135443 17/50 current_auc = 0.801948051948052
User 135443 AUC after training: 0.7987012987012987
User 135443 does not improve AUC. Reverting changes.
Training on augumented user 56366 18/50 current_auc = 0.801948051948052
User 56366 AUC after training: 0.7987012987012987
User 56366 does not improve AUC. Reverting changes.
Training on augumented user 28463 19/50 current_auc = 0.801948051948052
User 28463 AUC after training: 0.801948051948052
User 28463 does not improve AUC. Reverting changes.
Training on augumented user 18187 20/50 current_auc = 0.801948051948052
User 18187 AUC after training: 0.7987012987012987
User 18187 does not improve AUC. Reverting changes.
Training on augumented user 65294 21/50 current_auc = 0.801948051948052
User 65294 AUC after training: 0.7987012987012987
User 65294 does not improve AUC. Reverting changes.
Training on augumented user 96236 22/50 current_auc = 0.801948051948052
User 96236 AUC after training: 0.7987012987012987
User 96236 does not improve AUC. Reverting changes.
Training on augumented user 65322 23/50 current_auc = 0.801948051948052
User 65322 AUC after training: 0.7889610389610389
User 65322 does not improve AUC. Reverting changes.
Training on augumented user 93750 24/50 current_auc = 0.801948051948052
User 93750 AUC after training: 0.7987012987012987
User 93750 does not improve AUC. Reverting changes.
Training on augumented user 80395 25/50 current_auc = 0.801948051948052
User 80395 AUC after training: 0.7954545454545454
User 80395 does not improve AUC. Reverting changes.
Training on augumented user 93050 26/50 current_auc = 0.801948051948052
User 93050 AUC after training: 0.7987012987012987
User 93050 does not improve AUC. Reverting changes.
Training on augumented user 52766 27/50 current_auc = 0.801948051948052
User 52766 AUC after training: 0.7954545454545454
User 52766 does not improve AUC. Reverting changes.
Training on augumented user 29722 28/50 current_auc = 0.801948051948052
User 29722 AUC after training: 0.7987012987012987
User 29722 does not improve AUC. Reverting changes.
Training on augumented user 39704 29/50 current_auc = 0.801948051948052
User 39704 AUC after training: 0.7954545454545454
User 39704 does not improve AUC. Reverting changes.
Training on augumented user 64390 30/50 current_auc = 0.801948051948052
User 64390 AUC after training: 0.801948051948052
User 64390 does not improve AUC. Reverting changes.
Training on augumented user 58919 31/50 current_auc = 0.801948051948052
User 58919 AUC after training: 0.7987012987012987
User 58919 does not improve AUC. Reverting changes.
Training on augumented user 31236 32/50 current_auc = 0.801948051948052
User 31236 AUC after training: 0.7954545454545454
User 31236 does not improve AUC. Reverting changes.
Training on augumented user 134262 33/50 current_auc = 0.801948051948052
User 134262 AUC after training: 0.801948051948052
User 134262 does not improve AUC. Reverting changes.
Training on augumented user 7734 34/50 current_auc = 0.801948051948052
User 7734 AUC after training: 0.7954545454545454
User 7734 does not improve AUC. Reverting changes.
Training on augumented user 52996 35/50 current_auc = 0.801948051948052
User 52996 AUC after training: 0.7987012987012987
User 52996 does not improve AUC. Reverting changes.
Training on augumented user 40450 36/50 current_auc = 0.801948051948052
User 40450 AUC after training: 0.7987012987012987
User 40450 does not improve AUC. Reverting changes.
Training on augumented user 46771 37/50 current_auc = 0.801948051948052
User 46771 AUC after training: 0.7987012987012987
User 46771 does not improve AUC. Reverting changes.
Training on augumented user 79697 38/50 current_auc = 0.801948051948052
User 79697 AUC after training: 0.7987012987012987
User 79697 does not improve AUC. Reverting changes.
Training on augumented user 128243 39/50 current_auc = 0.801948051948052
User 128243 AUC after training: 0.7987012987012987
User 128243 does not improve AUC. Reverting changes.
Training on augumented user 100635 40/50 current_auc = 0.801948051948052
User 100635 AUC after training: 0.7987012987012987
User 100635 does not improve AUC. Reverting changes.
Training on augumented user 39411 41/50 current_auc = 0.801948051948052
User 39411 AUC after training: 0.7987012987012987
User 39411 does not improve AUC. Reverting changes.
Training on augumented user 105827 42/50 current_auc = 0.801948051948052
User 105827 AUC after training: 0.7987012987012987
User 105827 does not improve AUC. Reverting changes.
Training on augumented user 21664 43/50 current_auc = 0.801948051948052
User 21664 AUC after training: 0.7987012987012987
User 21664 does not improve AUC. Reverting changes.
Training on augumented user 32883 44/50 current_auc = 0.801948051948052
User 32883 AUC after training: 0.801948051948052
User 32883 does not improve AUC. Reverting changes.
Training on augumented user 32712 45/50 current_auc = 0.801948051948052
User 32712 AUC after training: 0.7987012987012987
User 32712 does not improve AUC. Reverting changes.
Training on augumented user 86330 46/50 current_auc = 0.801948051948052
User 86330 AUC after training: 0.7987012987012987
User 86330 does not improve AUC. Reverting changes.
Training on augumented user 126115 47/50 current_auc = 0.801948051948052
User 126115 AUC after training: 0.7987012987012987
User 126115 does not improve AUC. Reverting changes.
Training on augumented user 35860 48/50 current_auc = 0.801948051948052
User 35860 AUC after training: 0.7954545454545454
User 35860 does not improve AUC. Reverting changes.
Training on augumented user 44809 49/50 current_auc = 0.801948051948052
User 44809 AUC after training: 0.801948051948052
User 44809 does not improve AUC. Reverting changes.
[2024-12-02 19:57:04.681089] start test user 33729 247/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:05.116264] start test user 33729 247/568 recall augumented users by random, augumented_users = [34904, 43102, 137303, 114593, 76399, 39125, 128121, 80855, 133547, 103552, 45461, 69439, 90699, 31611, 123218, 22000, 62078, 38034, 11009, 16663, 73136, 97918, 88710, 10699, 103956, 112719, 129876, 137042, 57652, 42911, 80691, 54387, 681, 80766, 78218, 70470, 132422, 12937, 60443, 104056, 117886, 91521, 10275, 106715, 56024, 7844, 103887, 51282, 81079, 43869]
[2024-12-02 19:57:05.132407] user = 33729 Cloud 247/568
[2024-12-02 19:57:05.196819] user = 33729 Local 247/568
[2024-12-02 19:57:05.384676] user = 33729 Local+ 247/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:07.530684] user = 33729 MPDA- 247/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.645886766856731
Training on augumented user 34904 0/50 current_auc = 0.645886766856731
User 34904 AUC after training: 0.6453780443860356
User 34904 does not improve AUC. Reverting changes.
Training on augumented user 43102 1/50 current_auc = 0.645886766856731
User 43102 AUC after training: 0.6465438667147126
User 43102 improves AUC. Keeping the model.
Training on augumented user 137303 2/50 current_auc = 0.6465438667147126
User 137303 AUC after training: 0.6463742925578142
User 137303 does not improve AUC. Reverting changes.
Training on augumented user 114593 3/50 current_auc = 0.6465438667147126
User 114593 AUC after training: 0.6462683087097525
User 114593 does not improve AUC. Reverting changes.
Training on augumented user 76399 4/50 current_auc = 0.6465438667147126
User 76399 AUC after training: 0.6460033490895989
User 76399 does not improve AUC. Reverting changes.
Training on augumented user 39125 5/50 current_auc = 0.6465438667147126
User 39125 AUC after training: 0.6455688153125463
User 39125 does not improve AUC. Reverting changes.
Training on augumented user 128121 6/50 current_auc = 0.6465438667147126
User 128121 AUC after training: 0.6463001038641709
User 128121 does not improve AUC. Reverting changes.
Training on augumented user 80855 7/50 current_auc = 0.6465438667147126
User 80855 AUC after training: 0.6457171926998324
User 80855 does not improve AUC. Reverting changes.
Training on augumented user 133547 8/50 current_auc = 0.6465438667147126
User 133547 AUC after training: 0.6458761684719247
User 133547 does not improve AUC. Reverting changes.
Training on augumented user 103552 9/50 current_auc = 0.6465438667147126
User 103552 AUC after training: 0.6464060877122326
User 103552 does not improve AUC. Reverting changes.
Training on augumented user 45461 10/50 current_auc = 0.6465438667147126
User 45461 AUC after training: 0.6452614621531678
User 45461 does not improve AUC. Reverting changes.
Training on augumented user 69439 11/50 current_auc = 0.6465438667147126
User 69439 AUC after training: 0.6458019797782819
User 69439 does not improve AUC. Reverting changes.
Training on augumented user 90699 12/50 current_auc = 0.6465438667147126
User 90699 AUC after training: 0.6460033490895988
User 90699 does not improve AUC. Reverting changes.
Training on augumented user 31611 13/50 current_auc = 0.6465438667147126
User 31611 AUC after training: 0.6449223138393709
User 31611 does not improve AUC. Reverting changes.
Training on augumented user 123218 14/50 current_auc = 0.6465438667147126
User 123218 AUC after training: 0.6463213006337833
User 123218 does not improve AUC. Reverting changes.
Training on augumented user 22000 15/50 current_auc = 0.6465438667147126
User 22000 AUC after training: 0.6456112088517709
User 22000 does not improve AUC. Reverting changes.
Training on augumented user 62078 16/50 current_auc = 0.6465438667147126
User 62078 AUC after training: 0.6456006104669647
User 62078 does not improve AUC. Reverting changes.
Training on augumented user 38034 17/50 current_auc = 0.6465438667147126
User 38034 AUC after training: 0.6461941200161095
User 38034 does not improve AUC. Reverting changes.
Training on augumented user 11009 18/50 current_auc = 0.6465438667147126
User 11009 AUC after training: 0.6460881361680479
User 11009 does not improve AUC. Reverting changes.
Training on augumented user 16663 19/50 current_auc = 0.6465438667147126
User 16663 AUC after training: 0.6461941200161094
User 16663 does not improve AUC. Reverting changes.
Training on augumented user 73136 20/50 current_auc = 0.6465438667147126
User 73136 AUC after training: 0.6456642007758017
User 73136 does not improve AUC. Reverting changes.
Training on augumented user 97918 21/50 current_auc = 0.6465438667147126
User 97918 AUC after training: 0.6458549717023127
User 97918 does not improve AUC. Reverting changes.
Training on augumented user 88710 22/50 current_auc = 0.6465438667147126
User 88710 AUC after training: 0.6461941200161095
User 88710 does not improve AUC. Reverting changes.
Training on augumented user 10699 23/50 current_auc = 0.6465438667147126
User 10699 AUC after training: 0.6460139474744049
User 10699 does not improve AUC. Reverting changes.
Training on augumented user 103956 24/50 current_auc = 0.6465438667147126
User 103956 AUC after training: 0.6457277910846386
User 103956 does not improve AUC. Reverting changes.
Training on augumented user 112719 25/50 current_auc = 0.6465438667147126
User 112719 AUC after training: 0.6460669393984357
User 112719 does not improve AUC. Reverting changes.
Training on augumented user 129876 26/50 current_auc = 0.6465438667147126
User 129876 AUC after training: 0.6460775377832418
User 129876 does not improve AUC. Reverting changes.
Training on augumented user 137042 27/50 current_auc = 0.6465438667147126
User 137042 AUC after training: 0.6458867668567311
User 137042 does not improve AUC. Reverting changes.
Training on augumented user 57652 28/50 current_auc = 0.6465438667147126
User 57652 AUC after training: 0.646490874790682
User 57652 does not improve AUC. Reverting changes.
Training on augumented user 42911 29/50 current_auc = 0.6465438667147126
User 42911 AUC after training: 0.6464272844818449
User 42911 does not improve AUC. Reverting changes.
Training on augumented user 80691 30/50 current_auc = 0.6465438667147126
User 80691 AUC after training: 0.6467982279500605
User 80691 improves AUC. Keeping the model.
Training on augumented user 54387 31/50 current_auc = 0.6467982279500605
User 54387 AUC after training: 0.6461199313224665
User 54387 does not improve AUC. Reverting changes.
Training on augumented user 681 32/50 current_auc = 0.6467982279500605
User 681 AUC after training: 0.6463742925578142
User 681 does not improve AUC. Reverting changes.
Training on augumented user 80766 33/50 current_auc = 0.6467982279500605
User 80766 AUC after training: 0.6462683087097527
User 80766 does not improve AUC. Reverting changes.
Training on augumented user 78218 34/50 current_auc = 0.6467982279500605
User 78218 AUC after training: 0.6464166860970387
User 78218 does not improve AUC. Reverting changes.
Training on augumented user 70470 35/50 current_auc = 0.6467982279500605
User 70470 AUC after training: 0.6460351442440173
User 70470 does not improve AUC. Reverting changes.
Training on augumented user 132422 36/50 current_auc = 0.6467982279500605
User 132422 AUC after training: 0.6471797698030819
User 132422 improves AUC. Keeping the model.
Training on augumented user 12937 37/50 current_auc = 0.6471797698030819
User 12937 AUC after training: 0.6464166860970388
User 12937 does not improve AUC. Reverting changes.
Training on augumented user 60443 38/50 current_auc = 0.6471797698030819
User 60443 AUC after training: 0.646702842486805
User 60443 does not improve AUC. Reverting changes.
Training on augumented user 104056 39/50 current_auc = 0.6471797698030819
User 104056 AUC after training: 0.6465862602539373
User 104056 does not improve AUC. Reverting changes.
Training on augumented user 117886 40/50 current_auc = 0.6471797698030819
User 117886 AUC after training: 0.6469889988765712
User 117886 does not improve AUC. Reverting changes.
Training on augumented user 91521 41/50 current_auc = 0.6471797698030819
User 91521 AUC after training: 0.6478580664306759
User 91521 improves AUC. Keeping the model.
Training on augumented user 10275 42/50 current_auc = 0.6478580664306759
User 10275 AUC after training: 0.647243360111919
User 10275 does not improve AUC. Reverting changes.
Training on augumented user 106715 43/50 current_auc = 0.6478580664306759
User 106715 AUC after training: 0.6474129342688174
User 106715 does not improve AUC. Reverting changes.
Training on augumented user 56024 44/50 current_auc = 0.6478580664306759
User 56024 AUC after training: 0.6475189181168789
User 56024 does not improve AUC. Reverting changes.
Training on augumented user 7844 45/50 current_auc = 0.6478580664306759
User 7844 AUC after training: 0.647455327808042
User 7844 does not improve AUC. Reverting changes.
Training on augumented user 103887 46/50 current_auc = 0.6478580664306759
User 103887 AUC after training: 0.6469889988765712
User 103887 does not improve AUC. Reverting changes.
Training on augumented user 51282 47/50 current_auc = 0.6478580664306759
User 51282 AUC after training: 0.6475401148864912
User 51282 does not improve AUC. Reverting changes.
Training on augumented user 81079 48/50 current_auc = 0.6478580664306759
User 81079 AUC after training: 0.6479428535091252
User 81079 improves AUC. Keeping the model.
Training on augumented user 43869 49/50 current_auc = 0.6479428535091252
User 43869 AUC after training: 0.6479640502787375
User 43869 improves AUC. Keeping the model.
[2024-12-02 19:57:36.707959] start test user 33736 248/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:37.114278] start test user 33736 248/568 recall augumented users by random, augumented_users = [86444, 131087, 35355, 88254, 47588, 103326, 126557, 124132, 8757, 20586, 22562, 105197, 68173, 77914, 99163, 131681, 92437, 131052, 40331, 4937, 89592, 111046, 91252, 26913, 63226, 136614, 49039, 24792, 12490, 3242, 101772, 105998, 103254, 121471, 58638, 44016, 131489, 137015, 115673, 6985, 70841, 100780, 131660, 49419, 27622, 29948, 67096, 59396, 47480, 52785]
[2024-12-02 19:57:37.146129] user = 33736 Cloud 248/568
[2024-12-02 19:57:37.224751] user = 33736 Local 248/568
[2024-12-02 19:57:37.761305] user = 33736 Local+ 248/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:39.995275] user = 33736 MPDA- 248/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7275950999355254
Training on augumented user 86444 0/50 current_auc = 0.7275950999355254
User 86444 AUC after training: 0.7304964539007093
User 86444 improves AUC. Keeping the model.
Training on augumented user 131087 1/50 current_auc = 0.7304964539007093
User 131087 AUC after training: 0.7292069632495164
User 131087 does not improve AUC. Reverting changes.
Training on augumented user 35355 2/50 current_auc = 0.7304964539007093
User 35355 AUC after training: 0.7295293359123146
User 35355 does not improve AUC. Reverting changes.
Training on augumented user 88254 3/50 current_auc = 0.7304964539007093
User 88254 AUC after training: 0.7301740812379109
User 88254 does not improve AUC. Reverting changes.
Training on augumented user 47588 4/50 current_auc = 0.7304964539007093
User 47588 AUC after training: 0.7295293359123146
User 47588 does not improve AUC. Reverting changes.
Training on augumented user 103326 5/50 current_auc = 0.7304964539007093
User 103326 AUC after training: 0.7330754352030948
User 103326 improves AUC. Keeping the model.
Training on augumented user 126557 6/50 current_auc = 0.7330754352030948
User 126557 AUC after training: 0.7330754352030948
User 126557 does not improve AUC. Reverting changes.
Training on augumented user 124132 7/50 current_auc = 0.7330754352030948
User 124132 AUC after training: 0.7333978078658929
User 124132 improves AUC. Keeping the model.
Training on augumented user 8757 8/50 current_auc = 0.7333978078658929
User 8757 AUC after training: 0.7337201805286911
User 8757 improves AUC. Keeping the model.
Training on augumented user 20586 9/50 current_auc = 0.7337201805286911
User 20586 AUC after training: 0.7353320438426822
User 20586 improves AUC. Keeping the model.
Training on augumented user 22562 10/50 current_auc = 0.7353320438426822
User 22562 AUC after training: 0.7327530625402966
User 22562 does not improve AUC. Reverting changes.
Training on augumented user 105197 11/50 current_auc = 0.7353320438426822
User 105197 AUC after training: 0.7350096711798839
User 105197 does not improve AUC. Reverting changes.
Training on augumented user 68173 12/50 current_auc = 0.7353320438426822
User 68173 AUC after training: 0.7346872985170858
User 68173 does not improve AUC. Reverting changes.
Training on augumented user 77914 13/50 current_auc = 0.7353320438426822
User 77914 AUC after training: 0.7353320438426822
User 77914 does not improve AUC. Reverting changes.
Training on augumented user 99163 14/50 current_auc = 0.7353320438426822
User 99163 AUC after training: 0.7350096711798839
User 99163 does not improve AUC. Reverting changes.
Training on augumented user 131681 15/50 current_auc = 0.7353320438426822
User 131681 AUC after training: 0.7350096711798839
User 131681 does not improve AUC. Reverting changes.
Training on augumented user 92437 16/50 current_auc = 0.7353320438426822
User 92437 AUC after training: 0.7353320438426822
User 92437 does not improve AUC. Reverting changes.
Training on augumented user 131052 17/50 current_auc = 0.7353320438426822
User 131052 AUC after training: 0.7314635718891038
User 131052 does not improve AUC. Reverting changes.
Training on augumented user 40331 18/50 current_auc = 0.7353320438426822
User 40331 AUC after training: 0.7353320438426821
User 40331 does not improve AUC. Reverting changes.
Training on augumented user 4937 19/50 current_auc = 0.7353320438426822
User 4937 AUC after training: 0.7340425531914894
User 4937 does not improve AUC. Reverting changes.
Training on augumented user 89592 20/50 current_auc = 0.7353320438426822
User 89592 AUC after training: 0.7350096711798839
User 89592 does not improve AUC. Reverting changes.
Training on augumented user 111046 21/50 current_auc = 0.7353320438426822
User 111046 AUC after training: 0.7353320438426822
User 111046 does not improve AUC. Reverting changes.
Training on augumented user 91252 22/50 current_auc = 0.7353320438426822
User 91252 AUC after training: 0.7353320438426821
User 91252 does not improve AUC. Reverting changes.
Training on augumented user 26913 23/50 current_auc = 0.7353320438426822
User 26913 AUC after training: 0.7346872985170858
User 26913 does not improve AUC. Reverting changes.
Training on augumented user 63226 24/50 current_auc = 0.7353320438426822
User 63226 AUC after training: 0.7359767891682786
User 63226 improves AUC. Keeping the model.
Training on augumented user 136614 25/50 current_auc = 0.7359767891682786
User 136614 AUC after training: 0.7359767891682786
User 136614 does not improve AUC. Reverting changes.
Training on augumented user 49039 26/50 current_auc = 0.7359767891682786
User 49039 AUC after training: 0.7356544165054804
User 49039 does not improve AUC. Reverting changes.
Training on augumented user 24792 27/50 current_auc = 0.7359767891682786
User 24792 AUC after training: 0.7359767891682786
User 24792 does not improve AUC. Reverting changes.
Training on augumented user 12490 28/50 current_auc = 0.7359767891682786
User 12490 AUC after training: 0.7372662798194713
User 12490 improves AUC. Keeping the model.
Training on augumented user 3242 29/50 current_auc = 0.7372662798194713
User 3242 AUC after training: 0.7372662798194713
User 3242 does not improve AUC. Reverting changes.
Training on augumented user 101772 30/50 current_auc = 0.7372662798194713
User 101772 AUC after training: 0.7372662798194713
User 101772 does not improve AUC. Reverting changes.
Training on augumented user 105998 31/50 current_auc = 0.7372662798194713
User 105998 AUC after training: 0.7369439071566732
User 105998 does not improve AUC. Reverting changes.
Training on augumented user 103254 32/50 current_auc = 0.7372662798194713
User 103254 AUC after training: 0.7366215344938749
User 103254 does not improve AUC. Reverting changes.
Training on augumented user 121471 33/50 current_auc = 0.7372662798194713
User 121471 AUC after training: 0.7372662798194713
User 121471 does not improve AUC. Reverting changes.
Training on augumented user 58638 34/50 current_auc = 0.7372662798194713
User 58638 AUC after training: 0.7369439071566732
User 58638 does not improve AUC. Reverting changes.
Training on augumented user 44016 35/50 current_auc = 0.7372662798194713
User 44016 AUC after training: 0.736621534493875
User 44016 does not improve AUC. Reverting changes.
Training on augumented user 131489 36/50 current_auc = 0.7372662798194713
User 131489 AUC after training: 0.7369439071566731
User 131489 does not improve AUC. Reverting changes.
Training on augumented user 137015 37/50 current_auc = 0.7372662798194713
User 137015 AUC after training: 0.7346872985170858
User 137015 does not improve AUC. Reverting changes.
Training on augumented user 115673 38/50 current_auc = 0.7372662798194713
User 115673 AUC after training: 0.736621534493875
User 115673 does not improve AUC. Reverting changes.
Training on augumented user 6985 39/50 current_auc = 0.7372662798194713
User 6985 AUC after training: 0.7372662798194713
User 6985 does not improve AUC. Reverting changes.
Training on augumented user 70841 40/50 current_auc = 0.7372662798194713
User 70841 AUC after training: 0.7362991618310768
User 70841 does not improve AUC. Reverting changes.
Training on augumented user 100780 41/50 current_auc = 0.7372662798194713
User 100780 AUC after training: 0.7372662798194713
User 100780 does not improve AUC. Reverting changes.
Training on augumented user 131660 42/50 current_auc = 0.7372662798194713
User 131660 AUC after training: 0.7366215344938749
User 131660 does not improve AUC. Reverting changes.
Training on augumented user 49419 43/50 current_auc = 0.7372662798194713
User 49419 AUC after training: 0.7369439071566732
User 49419 does not improve AUC. Reverting changes.
Training on augumented user 27622 44/50 current_auc = 0.7372662798194713
User 27622 AUC after training: 0.7372662798194713
User 27622 does not improve AUC. Reverting changes.
Training on augumented user 29948 45/50 current_auc = 0.7372662798194713
User 29948 AUC after training: 0.7372662798194713
User 29948 does not improve AUC. Reverting changes.
Training on augumented user 67096 46/50 current_auc = 0.7372662798194713
User 67096 AUC after training: 0.7369439071566732
User 67096 does not improve AUC. Reverting changes.
Training on augumented user 59396 47/50 current_auc = 0.7372662798194713
User 59396 AUC after training: 0.7372662798194713
User 59396 does not improve AUC. Reverting changes.
Training on augumented user 47480 48/50 current_auc = 0.7372662798194713
User 47480 AUC after training: 0.7369439071566732
User 47480 does not improve AUC. Reverting changes.
Training on augumented user 52785 49/50 current_auc = 0.7372662798194713
User 52785 AUC after training: 0.7369439071566732
User 52785 does not improve AUC. Reverting changes.
[2024-12-02 19:58:04.713377] start test user 33773 249/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:05.192431] start test user 33773 249/568 recall augumented users by random, augumented_users = [126260, 100278, 70257, 132253, 34240, 26350, 118758, 16484, 72314, 35477, 109536, 82823, 107735, 14067, 31413, 87841, 71962, 70536, 10604, 64792, 77690, 7770, 92048, 129910, 68881, 66926, 43168, 58195, 79973, 52453, 71559, 6021, 100466, 55939, 9170, 17562, 70179, 74037, 28349, 131896, 55479, 80126, 61186, 98726, 97856, 127602, 100924, 70670, 19838, 116028]
[2024-12-02 19:58:05.206930] user = 33773 Cloud 249/568
[2024-12-02 19:58:05.222544] user = 33773 Local 249/568
[2024-12-02 19:58:05.298436] user = 33773 Local+ 249/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:08.241831] user = 33773 MPDA- 249/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6137071651090343
Training on augumented user 126260 0/50 current_auc = 0.6137071651090343
User 126260 AUC after training: 0.6131879543094496
User 126260 does not improve AUC. Reverting changes.
Training on augumented user 100278 1/50 current_auc = 0.6137071651090343
User 100278 AUC after training: 0.6131879543094497
User 100278 does not improve AUC. Reverting changes.
Training on augumented user 70257 2/50 current_auc = 0.6137071651090343
User 70257 AUC after training: 0.614226375908619
User 70257 improves AUC. Keeping the model.
Training on augumented user 132253 3/50 current_auc = 0.614226375908619
User 132253 AUC after training: 0.6131879543094496
User 132253 does not improve AUC. Reverting changes.
Training on augumented user 34240 4/50 current_auc = 0.614226375908619
User 34240 AUC after training: 0.6137071651090343
User 34240 does not improve AUC. Reverting changes.
Training on augumented user 26350 5/50 current_auc = 0.614226375908619
User 26350 AUC after training: 0.614226375908619
User 26350 does not improve AUC. Reverting changes.
Training on augumented user 118758 6/50 current_auc = 0.614226375908619
User 118758 AUC after training: 0.6142263759086188
User 118758 does not improve AUC. Reverting changes.
Training on augumented user 16484 7/50 current_auc = 0.614226375908619
User 16484 AUC after training: 0.6147455867082036
User 16484 improves AUC. Keeping the model.
Training on augumented user 72314 8/50 current_auc = 0.6147455867082036
User 72314 AUC after training: 0.6147455867082036
User 72314 does not improve AUC. Reverting changes.
Training on augumented user 35477 9/50 current_auc = 0.6147455867082036
User 35477 AUC after training: 0.6147455867082036
User 35477 does not improve AUC. Reverting changes.
Training on augumented user 109536 10/50 current_auc = 0.6147455867082036
User 109536 AUC after training: 0.6147455867082036
User 109536 does not improve AUC. Reverting changes.
Training on augumented user 82823 11/50 current_auc = 0.6147455867082036
User 82823 AUC after training: 0.6147455867082036
User 82823 does not improve AUC. Reverting changes.
Training on augumented user 107735 12/50 current_auc = 0.6147455867082036
User 107735 AUC after training: 0.6147455867082036
User 107735 does not improve AUC. Reverting changes.
Training on augumented user 14067 13/50 current_auc = 0.6147455867082036
User 14067 AUC after training: 0.6142263759086188
User 14067 does not improve AUC. Reverting changes.
Training on augumented user 31413 14/50 current_auc = 0.6147455867082036
User 31413 AUC after training: 0.614226375908619
User 31413 does not improve AUC. Reverting changes.
Training on augumented user 87841 15/50 current_auc = 0.6147455867082036
User 87841 AUC after training: 0.6142263759086188
User 87841 does not improve AUC. Reverting changes.
Training on augumented user 71962 16/50 current_auc = 0.6147455867082036
User 71962 AUC after training: 0.6147455867082036
User 71962 does not improve AUC. Reverting changes.
Training on augumented user 70536 17/50 current_auc = 0.6147455867082036
User 70536 AUC after training: 0.6137071651090343
User 70536 does not improve AUC. Reverting changes.
Training on augumented user 10604 18/50 current_auc = 0.6147455867082036
User 10604 AUC after training: 0.614226375908619
User 10604 does not improve AUC. Reverting changes.
Training on augumented user 64792 19/50 current_auc = 0.6147455867082036
User 64792 AUC after training: 0.6147455867082036
User 64792 does not improve AUC. Reverting changes.
Training on augumented user 77690 20/50 current_auc = 0.6147455867082036
User 77690 AUC after training: 0.614226375908619
User 77690 does not improve AUC. Reverting changes.
Training on augumented user 7770 21/50 current_auc = 0.6147455867082036
User 7770 AUC after training: 0.6142263759086188
User 7770 does not improve AUC. Reverting changes.
Training on augumented user 92048 22/50 current_auc = 0.6147455867082036
User 92048 AUC after training: 0.614226375908619
User 92048 does not improve AUC. Reverting changes.
Training on augumented user 129910 23/50 current_auc = 0.6147455867082036
User 129910 AUC after training: 0.614226375908619
User 129910 does not improve AUC. Reverting changes.
Training on augumented user 68881 24/50 current_auc = 0.6147455867082036
User 68881 AUC after training: 0.6147455867082036
User 68881 does not improve AUC. Reverting changes.
Training on augumented user 66926 25/50 current_auc = 0.6147455867082036
User 66926 AUC after training: 0.614226375908619
User 66926 does not improve AUC. Reverting changes.
Training on augumented user 43168 26/50 current_auc = 0.6147455867082036
User 43168 AUC after training: 0.6147455867082035
User 43168 does not improve AUC. Reverting changes.
Training on augumented user 58195 27/50 current_auc = 0.6147455867082036
User 58195 AUC after training: 0.614226375908619
User 58195 does not improve AUC. Reverting changes.
Training on augumented user 79973 28/50 current_auc = 0.6147455867082036
User 79973 AUC after training: 0.614226375908619
User 79973 does not improve AUC. Reverting changes.
Training on augumented user 52453 29/50 current_auc = 0.6147455867082036
User 52453 AUC after training: 0.614226375908619
User 52453 does not improve AUC. Reverting changes.
Training on augumented user 71559 30/50 current_auc = 0.6147455867082036
User 71559 AUC after training: 0.614226375908619
User 71559 does not improve AUC. Reverting changes.
Training on augumented user 6021 31/50 current_auc = 0.6147455867082036
User 6021 AUC after training: 0.614226375908619
User 6021 does not improve AUC. Reverting changes.
Training on augumented user 100466 32/50 current_auc = 0.6147455867082036
User 100466 AUC after training: 0.6147455867082036
User 100466 does not improve AUC. Reverting changes.
Training on augumented user 55939 33/50 current_auc = 0.6147455867082036
User 55939 AUC after training: 0.614226375908619
User 55939 does not improve AUC. Reverting changes.
Training on augumented user 9170 34/50 current_auc = 0.6147455867082036
User 9170 AUC after training: 0.6163032191069574
User 9170 improves AUC. Keeping the model.
Training on augumented user 17562 35/50 current_auc = 0.6163032191069574
User 17562 AUC after training: 0.614226375908619
User 17562 does not improve AUC. Reverting changes.
Training on augumented user 70179 36/50 current_auc = 0.6163032191069574
User 70179 AUC after training: 0.6163032191069574
User 70179 does not improve AUC. Reverting changes.
Training on augumented user 74037 37/50 current_auc = 0.6163032191069574
User 74037 AUC after training: 0.6157840083073728
User 74037 does not improve AUC. Reverting changes.
Training on augumented user 28349 38/50 current_auc = 0.6163032191069574
User 28349 AUC after training: 0.6168224299065421
User 28349 improves AUC. Keeping the model.
Training on augumented user 131896 39/50 current_auc = 0.6168224299065421
User 131896 AUC after training: 0.6147455867082036
User 131896 does not improve AUC. Reverting changes.
Training on augumented user 55479 40/50 current_auc = 0.6168224299065421
User 55479 AUC after training: 0.614226375908619
User 55479 does not improve AUC. Reverting changes.
Training on augumented user 80126 41/50 current_auc = 0.6168224299065421
User 80126 AUC after training: 0.6183800623052961
User 80126 improves AUC. Keeping the model.
Training on augumented user 61186 42/50 current_auc = 0.6183800623052961
User 61186 AUC after training: 0.6173416407061267
User 61186 does not improve AUC. Reverting changes.
Training on augumented user 98726 43/50 current_auc = 0.6183800623052961
User 98726 AUC after training: 0.6157840083073729
User 98726 does not improve AUC. Reverting changes.
Training on augumented user 97856 44/50 current_auc = 0.6183800623052961
User 97856 AUC after training: 0.6163032191069575
User 97856 does not improve AUC. Reverting changes.
Training on augumented user 127602 45/50 current_auc = 0.6183800623052961
User 127602 AUC after training: 0.6178608515057115
User 127602 does not improve AUC. Reverting changes.
Training on augumented user 100924 46/50 current_auc = 0.6183800623052961
User 100924 AUC after training: 0.6178608515057114
User 100924 does not improve AUC. Reverting changes.
Training on augumented user 70670 47/50 current_auc = 0.6183800623052961
User 70670 AUC after training: 0.6183800623052961
User 70670 does not improve AUC. Reverting changes.
Training on augumented user 19838 48/50 current_auc = 0.6183800623052961
User 19838 AUC after training: 0.6178608515057115
User 19838 does not improve AUC. Reverting changes.
Training on augumented user 116028 49/50 current_auc = 0.6183800623052961
User 116028 AUC after training: 0.6178608515057115
User 116028 does not improve AUC. Reverting changes.
[2024-12-02 19:58:36.975146] start test user 33837 250/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:37.622001] start test user 33837 250/568 recall augumented users by random, augumented_users = [137497, 20612, 119794, 48327, 39905, 115758, 124467, 52829, 76472, 63271, 79133, 64670, 103290, 42076, 36784, 7333, 50543, 108423, 98398, 82905, 18930, 82871, 59630, 39418, 114964, 115605, 8897, 38102, 123116, 20815, 40784, 15097, 125401, 39159, 49539, 70894, 123512, 100775, 11123, 42803, 73728, 72683, 73552, 112606, 97005, 13398, 55426, 199, 123020, 56156]
[2024-12-02 19:58:37.637505] user = 33837 Cloud 250/568
[2024-12-02 19:58:37.651323] user = 33837 Local 250/568
[2024-12-02 19:58:37.727304] user = 33837 Local+ 250/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:39.872633] user = 33837 MPDA- 250/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8
Training on augumented user 137497 0/50 current_auc = 0.8
User 137497 AUC after training: 0.8
User 137497 does not improve AUC. Reverting changes.
Training on augumented user 20612 1/50 current_auc = 0.8
User 20612 AUC after training: 0.8
User 20612 does not improve AUC. Reverting changes.
Training on augumented user 119794 2/50 current_auc = 0.8
User 119794 AUC after training: 0.8
User 119794 does not improve AUC. Reverting changes.
Training on augumented user 48327 3/50 current_auc = 0.8
User 48327 AUC after training: 0.8
User 48327 does not improve AUC. Reverting changes.
Training on augumented user 39905 4/50 current_auc = 0.8
User 39905 AUC after training: 0.8
User 39905 does not improve AUC. Reverting changes.
Training on augumented user 115758 5/50 current_auc = 0.8
User 115758 AUC after training: 0.8
User 115758 does not improve AUC. Reverting changes.
Training on augumented user 124467 6/50 current_auc = 0.8
User 124467 AUC after training: 0.8
User 124467 does not improve AUC. Reverting changes.
Training on augumented user 52829 7/50 current_auc = 0.8
User 52829 AUC after training: 0.8
User 52829 does not improve AUC. Reverting changes.
Training on augumented user 76472 8/50 current_auc = 0.8
User 76472 AUC after training: 0.8
User 76472 does not improve AUC. Reverting changes.
Training on augumented user 63271 9/50 current_auc = 0.8
User 63271 AUC after training: 0.8
User 63271 does not improve AUC. Reverting changes.
Training on augumented user 79133 10/50 current_auc = 0.8
User 79133 AUC after training: 0.8
User 79133 does not improve AUC. Reverting changes.
Training on augumented user 64670 11/50 current_auc = 0.8
User 64670 AUC after training: 0.8
User 64670 does not improve AUC. Reverting changes.
Training on augumented user 103290 12/50 current_auc = 0.8
User 103290 AUC after training: 0.8
User 103290 does not improve AUC. Reverting changes.
Training on augumented user 42076 13/50 current_auc = 0.8
User 42076 AUC after training: 0.8
User 42076 does not improve AUC. Reverting changes.
Training on augumented user 36784 14/50 current_auc = 0.8
User 36784 AUC after training: 0.8
User 36784 does not improve AUC. Reverting changes.
Training on augumented user 7333 15/50 current_auc = 0.8
User 7333 AUC after training: 0.8
User 7333 does not improve AUC. Reverting changes.
Training on augumented user 50543 16/50 current_auc = 0.8
User 50543 AUC after training: 0.8
User 50543 does not improve AUC. Reverting changes.
Training on augumented user 108423 17/50 current_auc = 0.8
User 108423 AUC after training: 0.8
User 108423 does not improve AUC. Reverting changes.
Training on augumented user 98398 18/50 current_auc = 0.8
User 98398 AUC after training: 0.8
User 98398 does not improve AUC. Reverting changes.
Training on augumented user 82905 19/50 current_auc = 0.8
User 82905 AUC after training: 0.8
User 82905 does not improve AUC. Reverting changes.
Training on augumented user 18930 20/50 current_auc = 0.8
User 18930 AUC after training: 0.8
User 18930 does not improve AUC. Reverting changes.
Training on augumented user 82871 21/50 current_auc = 0.8
User 82871 AUC after training: 0.8
User 82871 does not improve AUC. Reverting changes.
Training on augumented user 59630 22/50 current_auc = 0.8
User 59630 AUC after training: 0.8
User 59630 does not improve AUC. Reverting changes.
Training on augumented user 39418 23/50 current_auc = 0.8
User 39418 AUC after training: 0.8
User 39418 does not improve AUC. Reverting changes.
Training on augumented user 114964 24/50 current_auc = 0.8
User 114964 AUC after training: 0.8
User 114964 does not improve AUC. Reverting changes.
Training on augumented user 115605 25/50 current_auc = 0.8
User 115605 AUC after training: 0.8
User 115605 does not improve AUC. Reverting changes.
Training on augumented user 8897 26/50 current_auc = 0.8
User 8897 AUC after training: 0.8
User 8897 does not improve AUC. Reverting changes.
Training on augumented user 38102 27/50 current_auc = 0.8
User 38102 AUC after training: 0.8
User 38102 does not improve AUC. Reverting changes.
Training on augumented user 123116 28/50 current_auc = 0.8
User 123116 AUC after training: 0.8
User 123116 does not improve AUC. Reverting changes.
Training on augumented user 20815 29/50 current_auc = 0.8
User 20815 AUC after training: 0.8
User 20815 does not improve AUC. Reverting changes.
Training on augumented user 40784 30/50 current_auc = 0.8
User 40784 AUC after training: 0.8
User 40784 does not improve AUC. Reverting changes.
Training on augumented user 15097 31/50 current_auc = 0.8
User 15097 AUC after training: 0.8
User 15097 does not improve AUC. Reverting changes.
Training on augumented user 125401 32/50 current_auc = 0.8
User 125401 AUC after training: 0.8
User 125401 does not improve AUC. Reverting changes.
Training on augumented user 39159 33/50 current_auc = 0.8
User 39159 AUC after training: 0.8
User 39159 does not improve AUC. Reverting changes.
Training on augumented user 49539 34/50 current_auc = 0.8
User 49539 AUC after training: 0.8
User 49539 does not improve AUC. Reverting changes.
Training on augumented user 70894 35/50 current_auc = 0.8
User 70894 AUC after training: 0.8
User 70894 does not improve AUC. Reverting changes.
Training on augumented user 123512 36/50 current_auc = 0.8
User 123512 AUC after training: 0.8
User 123512 does not improve AUC. Reverting changes.
Training on augumented user 100775 37/50 current_auc = 0.8
User 100775 AUC after training: 0.8
User 100775 does not improve AUC. Reverting changes.
Training on augumented user 11123 38/50 current_auc = 0.8
User 11123 AUC after training: 0.8
User 11123 does not improve AUC. Reverting changes.
Training on augumented user 42803 39/50 current_auc = 0.8
User 42803 AUC after training: 0.8
User 42803 does not improve AUC. Reverting changes.
Training on augumented user 73728 40/50 current_auc = 0.8
User 73728 AUC after training: 0.8
User 73728 does not improve AUC. Reverting changes.
Training on augumented user 72683 41/50 current_auc = 0.8
User 72683 AUC after training: 0.8
User 72683 does not improve AUC. Reverting changes.
Training on augumented user 73552 42/50 current_auc = 0.8
User 73552 AUC after training: 0.8
User 73552 does not improve AUC. Reverting changes.
Training on augumented user 112606 43/50 current_auc = 0.8
User 112606 AUC after training: 0.8
User 112606 does not improve AUC. Reverting changes.
Training on augumented user 97005 44/50 current_auc = 0.8
User 97005 AUC after training: 0.8
User 97005 does not improve AUC. Reverting changes.
Training on augumented user 13398 45/50 current_auc = 0.8
User 13398 AUC after training: 0.8
User 13398 does not improve AUC. Reverting changes.
Training on augumented user 55426 46/50 current_auc = 0.8
User 55426 AUC after training: 0.8
User 55426 does not improve AUC. Reverting changes.
Training on augumented user 199 47/50 current_auc = 0.8
User 199 AUC after training: 0.8
User 199 does not improve AUC. Reverting changes.
Training on augumented user 123020 48/50 current_auc = 0.8
User 123020 AUC after training: 0.8
User 123020 does not improve AUC. Reverting changes.
Training on augumented user 56156 49/50 current_auc = 0.8
User 56156 AUC after training: 0.8
User 56156 does not improve AUC. Reverting changes.
[2024-12-02 19:59:08.790595] start test user 33848 251/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:09.231577] start test user 33848 251/568 recall augumented users by random, augumented_users = [113546, 136118, 106524, 25046, 61594, 48478, 118192, 43475, 53089, 105432, 75243, 79484, 90594, 12079, 134657, 94607, 111438, 16366, 129453, 4470, 110372, 23881, 103939, 49799, 59892, 107490, 26286, 123844, 96542, 36419, 5522, 78065, 102330, 119836, 129436, 17348, 92542, 124133, 30158, 21589, 13785, 99143, 696, 31163, 28961, 17167, 113769, 104428, 130379, 11015]
[2024-12-02 19:59:09.246001] user = 33848 Cloud 251/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:59:09.264873] user = 33848 Local 251/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:59:09.302480] user = 33848 Local+ 251/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:59:11.696459] user = 33848 MPDA- 251/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 113546 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113546 AUC after training: 0.5
User 113546 does not improve AUC. Reverting changes.
Training on augumented user 136118 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136118 AUC after training: 0.5
User 136118 does not improve AUC. Reverting changes.
Training on augumented user 106524 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106524 AUC after training: 0.5
User 106524 does not improve AUC. Reverting changes.
Training on augumented user 25046 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25046 AUC after training: 0.5
User 25046 does not improve AUC. Reverting changes.
Training on augumented user 61594 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61594 AUC after training: 0.5
User 61594 does not improve AUC. Reverting changes.
Training on augumented user 48478 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48478 AUC after training: 0.5
User 48478 does not improve AUC. Reverting changes.
Training on augumented user 118192 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118192 AUC after training: 0.5
User 118192 does not improve AUC. Reverting changes.
Training on augumented user 43475 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43475 AUC after training: 0.5
User 43475 does not improve AUC. Reverting changes.
Training on augumented user 53089 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53089 AUC after training: 0.5
User 53089 does not improve AUC. Reverting changes.
Training on augumented user 105432 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105432 AUC after training: 0.5
User 105432 does not improve AUC. Reverting changes.
Training on augumented user 75243 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75243 AUC after training: 0.5
User 75243 does not improve AUC. Reverting changes.
Training on augumented user 79484 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79484 AUC after training: 0.5
User 79484 does not improve AUC. Reverting changes.
Training on augumented user 90594 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90594 AUC after training: 0.5
User 90594 does not improve AUC. Reverting changes.
Training on augumented user 12079 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12079 AUC after training: 0.5
User 12079 does not improve AUC. Reverting changes.
Training on augumented user 134657 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134657 AUC after training: 0.5
User 134657 does not improve AUC. Reverting changes.
Training on augumented user 94607 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94607 AUC after training: 0.5
User 94607 does not improve AUC. Reverting changes.
Training on augumented user 111438 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111438 AUC after training: 0.5
User 111438 does not improve AUC. Reverting changes.
Training on augumented user 16366 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16366 AUC after training: 0.5
User 16366 does not improve AUC. Reverting changes.
Training on augumented user 129453 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129453 AUC after training: 0.5
User 129453 does not improve AUC. Reverting changes.
Training on augumented user 4470 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4470 AUC after training: 0.5
User 4470 does not improve AUC. Reverting changes.
Training on augumented user 110372 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110372 AUC after training: 0.5
User 110372 does not improve AUC. Reverting changes.
Training on augumented user 23881 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23881 AUC after training: 0.5
User 23881 does not improve AUC. Reverting changes.
Training on augumented user 103939 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103939 AUC after training: 0.5
User 103939 does not improve AUC. Reverting changes.
Training on augumented user 49799 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49799 AUC after training: 0.5
User 49799 does not improve AUC. Reverting changes.
Training on augumented user 59892 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59892 AUC after training: 0.5
User 59892 does not improve AUC. Reverting changes.
Training on augumented user 107490 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107490 AUC after training: 0.5
User 107490 does not improve AUC. Reverting changes.
Training on augumented user 26286 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26286 AUC after training: 0.5
User 26286 does not improve AUC. Reverting changes.
Training on augumented user 123844 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123844 AUC after training: 0.5
User 123844 does not improve AUC. Reverting changes.
Training on augumented user 96542 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96542 AUC after training: 0.5
User 96542 does not improve AUC. Reverting changes.
Training on augumented user 36419 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36419 AUC after training: 0.5
User 36419 does not improve AUC. Reverting changes.
Training on augumented user 5522 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5522 AUC after training: 0.5
User 5522 does not improve AUC. Reverting changes.
Training on augumented user 78065 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78065 AUC after training: 0.5
User 78065 does not improve AUC. Reverting changes.
Training on augumented user 102330 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102330 AUC after training: 0.5
User 102330 does not improve AUC. Reverting changes.
Training on augumented user 119836 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119836 AUC after training: 0.5
User 119836 does not improve AUC. Reverting changes.
Training on augumented user 129436 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129436 AUC after training: 0.5
User 129436 does not improve AUC. Reverting changes.
Training on augumented user 17348 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17348 AUC after training: 0.5
User 17348 does not improve AUC. Reverting changes.
Training on augumented user 92542 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92542 AUC after training: 0.5
User 92542 does not improve AUC. Reverting changes.
Training on augumented user 124133 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124133 AUC after training: 0.5
User 124133 does not improve AUC. Reverting changes.
Training on augumented user 30158 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30158 AUC after training: 0.5
User 30158 does not improve AUC. Reverting changes.
Training on augumented user 21589 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21589 AUC after training: 0.5
User 21589 does not improve AUC. Reverting changes.
Training on augumented user 13785 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13785 AUC after training: 0.5
User 13785 does not improve AUC. Reverting changes.
Training on augumented user 99143 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99143 AUC after training: 0.5
User 99143 does not improve AUC. Reverting changes.
Training on augumented user 696 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 696 AUC after training: 0.5
User 696 does not improve AUC. Reverting changes.
Training on augumented user 31163 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31163 AUC after training: 0.5
User 31163 does not improve AUC. Reverting changes.
Training on augumented user 28961 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28961 AUC after training: 0.5
User 28961 does not improve AUC. Reverting changes.
Training on augumented user 17167 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17167 AUC after training: 0.5
User 17167 does not improve AUC. Reverting changes.
Training on augumented user 113769 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113769 AUC after training: 0.5
User 113769 does not improve AUC. Reverting changes.
Training on augumented user 104428 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104428 AUC after training: 0.5
User 104428 does not improve AUC. Reverting changes.
Training on augumented user 130379 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130379 AUC after training: 0.5
User 130379 does not improve AUC. Reverting changes.
Training on augumented user 11015 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11015 AUC after training: 0.5
User 11015 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:59:44.305667] start test user 33912 252/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:45.012363] start test user 33912 252/568 recall augumented users by random, augumented_users = [118907, 73645, 77662, 127141, 16475, 99589, 80834, 17541, 24072, 36819, 51889, 82877, 85713, 107948, 122005, 74758, 97559, 50946, 1424, 122826, 105261, 47422, 21801, 122485, 1887, 38355, 119183, 127068, 56871, 56713, 98287, 52880, 60247, 114480, 45261, 85958, 111695, 58114, 35228, 138420, 110929, 52115, 135789, 3831, 39178, 53633, 20972, 7434, 112116, 100171]
[2024-12-02 19:59:45.027809] user = 33912 Cloud 252/568
[2024-12-02 19:59:45.054912] user = 33912 Local 252/568
[2024-12-02 19:59:45.088284] user = 33912 Local+ 252/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:47.113258] user = 33912 MPDA- 252/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7164439876670093
Training on augumented user 118907 0/50 current_auc = 0.7164439876670093
User 118907 AUC after training: 0.7158787255909559
User 118907 does not improve AUC. Reverting changes.
Training on augumented user 73645 1/50 current_auc = 0.7164439876670093
User 73645 AUC after training: 0.7181397738951696
User 73645 improves AUC. Keeping the model.
Training on augumented user 77662 2/50 current_auc = 0.7181397738951696
User 77662 AUC after training: 0.7174717368961974
User 77662 does not improve AUC. Reverting changes.
Training on augumented user 127141 3/50 current_auc = 0.7181397738951696
User 127141 AUC after training: 0.7173689619732785
User 127141 does not improve AUC. Reverting changes.
Training on augumented user 16475 4/50 current_auc = 0.7181397738951696
User 16475 AUC after training: 0.7177800616649538
User 16475 does not improve AUC. Reverting changes.
Training on augumented user 99589 5/50 current_auc = 0.7181397738951696
User 99589 AUC after training: 0.7180883864337102
User 99589 does not improve AUC. Reverting changes.
Training on augumented user 80834 6/50 current_auc = 0.7181397738951696
User 80834 AUC after training: 0.718191161356629
User 80834 improves AUC. Keeping the model.
Training on augumented user 17541 7/50 current_auc = 0.718191161356629
User 17541 AUC after training: 0.7182425488180885
User 17541 improves AUC. Keeping the model.
Training on augumented user 24072 8/50 current_auc = 0.7182425488180885
User 24072 AUC after training: 0.7178828365878726
User 24072 does not improve AUC. Reverting changes.
Training on augumented user 36819 9/50 current_auc = 0.7182425488180885
User 36819 AUC after training: 0.718191161356629
User 36819 does not improve AUC. Reverting changes.
Training on augumented user 51889 10/50 current_auc = 0.7182425488180885
User 51889 AUC after training: 0.717163412127441
User 51889 does not improve AUC. Reverting changes.
Training on augumented user 82877 11/50 current_auc = 0.7182425488180885
User 82877 AUC after training: 0.7173689619732785
User 82877 does not improve AUC. Reverting changes.
Training on augumented user 85713 12/50 current_auc = 0.7182425488180885
User 85713 AUC after training: 0.7170606372045221
User 85713 does not improve AUC. Reverting changes.
Training on augumented user 107948 13/50 current_auc = 0.7182425488180885
User 107948 AUC after training: 0.7188078108941418
User 107948 improves AUC. Keeping the model.
Training on augumented user 122005 14/50 current_auc = 0.7188078108941418
User 122005 AUC after training: 0.7188591983556012
User 122005 improves AUC. Keeping the model.
Training on augumented user 74758 15/50 current_auc = 0.7188591983556012
User 74758 AUC after training: 0.7185508735868449
User 74758 does not improve AUC. Reverting changes.
Training on augumented user 97559 16/50 current_auc = 0.7188591983556012
User 97559 AUC after training: 0.7190133607399796
User 97559 improves AUC. Keeping the model.
Training on augumented user 50946 17/50 current_auc = 0.7190133607399796
User 50946 AUC after training: 0.720349434737924
User 50946 improves AUC. Keeping the model.
Training on augumented user 1424 18/50 current_auc = 0.720349434737924
User 1424 AUC after training: 0.7210174717368963
User 1424 improves AUC. Keeping the model.
Training on augumented user 122826 19/50 current_auc = 0.7210174717368963
User 122826 AUC after training: 0.7206577595066804
User 122826 does not improve AUC. Reverting changes.
Training on augumented user 105261 20/50 current_auc = 0.7210174717368963
User 105261 AUC after training: 0.7209660842754368
User 105261 does not improve AUC. Reverting changes.
Training on augumented user 47422 21/50 current_auc = 0.7210174717368963
User 47422 AUC after training: 0.7179342240493319
User 47422 does not improve AUC. Reverting changes.
Training on augumented user 21801 22/50 current_auc = 0.7210174717368963
User 21801 AUC after training: 0.7209146968139774
User 21801 does not improve AUC. Reverting changes.
Training on augumented user 122485 23/50 current_auc = 0.7210174717368963
User 122485 AUC after training: 0.7211716341212744
User 122485 improves AUC. Keeping the model.
Training on augumented user 1887 24/50 current_auc = 0.7211716341212744
User 1887 AUC after training: 0.7214285714285715
User 1887 improves AUC. Keeping the model.
Training on augumented user 38355 25/50 current_auc = 0.7214285714285715
User 38355 AUC after training: 0.7213257965056526
User 38355 does not improve AUC. Reverting changes.
Training on augumented user 119183 26/50 current_auc = 0.7214285714285715
User 119183 AUC after training: 0.7218396711202467
User 119183 improves AUC. Keeping the model.
Training on augumented user 127068 27/50 current_auc = 0.7218396711202467
User 127068 AUC after training: 0.7222507708119219
User 127068 improves AUC. Keeping the model.
Training on augumented user 56871 28/50 current_auc = 0.7222507708119219
User 56871 AUC after training: 0.7216855087358686
User 56871 does not improve AUC. Reverting changes.
Training on augumented user 56713 29/50 current_auc = 0.7222507708119219
User 56713 AUC after training: 0.7233812949640288
User 56713 improves AUC. Keeping the model.
Training on augumented user 98287 30/50 current_auc = 0.7233812949640288
User 98287 AUC after training: 0.7229701952723536
User 98287 does not improve AUC. Reverting changes.
Training on augumented user 52880 31/50 current_auc = 0.7233812949640288
User 52880 AUC after training: 0.7239465570400824
User 52880 improves AUC. Keeping the model.
Training on augumented user 60247 32/50 current_auc = 0.7239465570400824
User 60247 AUC after training: 0.7239465570400823
User 60247 does not improve AUC. Reverting changes.
Training on augumented user 114480 33/50 current_auc = 0.7239465570400824
User 114480 AUC after training: 0.7236896197327852
User 114480 does not improve AUC. Reverting changes.
Training on augumented user 45261 34/50 current_auc = 0.7239465570400824
User 45261 AUC after training: 0.7214799588900309
User 45261 does not improve AUC. Reverting changes.
Training on augumented user 85958 35/50 current_auc = 0.7239465570400824
User 85958 AUC after training: 0.7245118191161357
User 85958 improves AUC. Keeping the model.
Training on augumented user 111695 36/50 current_auc = 0.7245118191161357
User 111695 AUC after training: 0.7246659815005139
User 111695 improves AUC. Keeping the model.
Training on augumented user 58114 37/50 current_auc = 0.7246659815005139
User 58114 AUC after training: 0.7242034943473793
User 58114 does not improve AUC. Reverting changes.
Training on augumented user 35228 38/50 current_auc = 0.7246659815005139
User 35228 AUC after training: 0.721377183967112
User 35228 does not improve AUC. Reverting changes.
Training on augumented user 138420 39/50 current_auc = 0.7246659815005139
User 138420 AUC after training: 0.7249229188078109
User 138420 improves AUC. Keeping the model.
Training on augumented user 110929 40/50 current_auc = 0.7249229188078109
User 110929 AUC after training: 0.7247687564234327
User 110929 does not improve AUC. Reverting changes.
Training on augumented user 52115 41/50 current_auc = 0.7249229188078109
User 52115 AUC after training: 0.7244090441932169
User 52115 does not improve AUC. Reverting changes.
Training on augumented user 135789 42/50 current_auc = 0.7249229188078109
User 135789 AUC after training: 0.7249743062692703
User 135789 improves AUC. Keeping the model.
Training on augumented user 3831 43/50 current_auc = 0.7249743062692703
User 3831 AUC after training: 0.7249743062692704
User 3831 improves AUC. Keeping the model.
Training on augumented user 39178 44/50 current_auc = 0.7249743062692704
User 39178 AUC after training: 0.7244604316546762
User 39178 does not improve AUC. Reverting changes.
Training on augumented user 53633 45/50 current_auc = 0.7249743062692704
User 53633 AUC after training: 0.7238951695786229
User 53633 does not improve AUC. Reverting changes.
Training on augumented user 20972 46/50 current_auc = 0.7249743062692704
User 20972 AUC after training: 0.7233299075025694
User 20972 does not improve AUC. Reverting changes.
Training on augumented user 7434 47/50 current_auc = 0.7249743062692704
User 7434 AUC after training: 0.7241007194244605
User 7434 does not improve AUC. Reverting changes.
Training on augumented user 112116 48/50 current_auc = 0.7249743062692704
User 112116 AUC after training: 0.7254881808838644
User 112116 improves AUC. Keeping the model.
Training on augumented user 100171 49/50 current_auc = 0.7254881808838644
User 100171 AUC after training: 0.7255395683453237
User 100171 improves AUC. Keeping the model.
[2024-12-02 20:00:16.021874] start test user 33920 253/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:16.968402] start test user 33920 253/568 recall augumented users by random, augumented_users = [84211, 135980, 87844, 102286, 126367, 39375, 75599, 7400, 9618, 29834, 116243, 29390, 132748, 79380, 35037, 79100, 5481, 109086, 113451, 55650, 37250, 32984, 121687, 128446, 23163, 95480, 79839, 29684, 112378, 112060, 54129, 18613, 75281, 101253, 19774, 119756, 84371, 83784, 584, 130943, 128048, 91047, 50709, 110009, 117941, 30452, 110385, 13085, 68157, 91112]
[2024-12-02 20:00:16.991615] user = 33920 Cloud 253/568
[2024-12-02 20:00:17.013145] user = 33920 Local 253/568
[2024-12-02 20:00:17.045547] user = 33920 Local+ 253/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:19.270511] user = 33920 MPDA- 253/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9210526315789473
Training on augumented user 84211 0/50 current_auc = 0.9210526315789473
User 84211 AUC after training: 0.9210526315789473
User 84211 does not improve AUC. Reverting changes.
Training on augumented user 135980 1/50 current_auc = 0.9210526315789473
User 135980 AUC after training: 0.9210526315789473
User 135980 does not improve AUC. Reverting changes.
Training on augumented user 87844 2/50 current_auc = 0.9210526315789473
User 87844 AUC after training: 0.9210526315789473
User 87844 does not improve AUC. Reverting changes.
Training on augumented user 102286 3/50 current_auc = 0.9210526315789473
User 102286 AUC after training: 0.9210526315789473
User 102286 does not improve AUC. Reverting changes.
Training on augumented user 126367 4/50 current_auc = 0.9210526315789473
User 126367 AUC after training: 0.9210526315789473
User 126367 does not improve AUC. Reverting changes.
Training on augumented user 39375 5/50 current_auc = 0.9210526315789473
User 39375 AUC after training: 0.9210526315789473
User 39375 does not improve AUC. Reverting changes.
Training on augumented user 75599 6/50 current_auc = 0.9210526315789473
User 75599 AUC after training: 0.9210526315789473
User 75599 does not improve AUC. Reverting changes.
Training on augumented user 7400 7/50 current_auc = 0.9210526315789473
User 7400 AUC after training: 0.9263157894736842
User 7400 improves AUC. Keeping the model.
Training on augumented user 9618 8/50 current_auc = 0.9263157894736842
User 9618 AUC after training: 0.9263157894736842
User 9618 does not improve AUC. Reverting changes.
Training on augumented user 29834 9/50 current_auc = 0.9263157894736842
User 29834 AUC after training: 0.9263157894736842
User 29834 does not improve AUC. Reverting changes.
Training on augumented user 116243 10/50 current_auc = 0.9263157894736842
User 116243 AUC after training: 0.9263157894736842
User 116243 does not improve AUC. Reverting changes.
Training on augumented user 29390 11/50 current_auc = 0.9263157894736842
User 29390 AUC after training: 0.9157894736842105
User 29390 does not improve AUC. Reverting changes.
Training on augumented user 132748 12/50 current_auc = 0.9263157894736842
User 132748 AUC after training: 0.9263157894736842
User 132748 does not improve AUC. Reverting changes.
Training on augumented user 79380 13/50 current_auc = 0.9263157894736842
User 79380 AUC after training: 0.9263157894736842
User 79380 does not improve AUC. Reverting changes.
Training on augumented user 35037 14/50 current_auc = 0.9263157894736842
User 35037 AUC after training: 0.9315789473684211
User 35037 improves AUC. Keeping the model.
Training on augumented user 79100 15/50 current_auc = 0.9315789473684211
User 79100 AUC after training: 0.9315789473684211
User 79100 does not improve AUC. Reverting changes.
Training on augumented user 5481 16/50 current_auc = 0.9315789473684211
User 5481 AUC after training: 0.9263157894736842
User 5481 does not improve AUC. Reverting changes.
Training on augumented user 109086 17/50 current_auc = 0.9315789473684211
User 109086 AUC after training: 0.9315789473684211
User 109086 does not improve AUC. Reverting changes.
Training on augumented user 113451 18/50 current_auc = 0.9315789473684211
User 113451 AUC after training: 0.9315789473684211
User 113451 does not improve AUC. Reverting changes.
Training on augumented user 55650 19/50 current_auc = 0.9315789473684211
User 55650 AUC after training: 0.9315789473684211
User 55650 does not improve AUC. Reverting changes.
Training on augumented user 37250 20/50 current_auc = 0.9315789473684211
User 37250 AUC after training: 0.9315789473684211
User 37250 does not improve AUC. Reverting changes.
Training on augumented user 32984 21/50 current_auc = 0.9315789473684211
User 32984 AUC after training: 0.9263157894736842
User 32984 does not improve AUC. Reverting changes.
Training on augumented user 121687 22/50 current_auc = 0.9315789473684211
User 121687 AUC after training: 0.9315789473684211
User 121687 does not improve AUC. Reverting changes.
Training on augumented user 128446 23/50 current_auc = 0.9315789473684211
User 128446 AUC after training: 0.9315789473684211
User 128446 does not improve AUC. Reverting changes.
Training on augumented user 23163 24/50 current_auc = 0.9315789473684211
User 23163 AUC after training: 0.9368421052631579
User 23163 improves AUC. Keeping the model.
Training on augumented user 95480 25/50 current_auc = 0.9368421052631579
User 95480 AUC after training: 0.9315789473684211
User 95480 does not improve AUC. Reverting changes.
Training on augumented user 79839 26/50 current_auc = 0.9368421052631579
User 79839 AUC after training: 0.9368421052631579
User 79839 does not improve AUC. Reverting changes.
Training on augumented user 29684 27/50 current_auc = 0.9368421052631579
User 29684 AUC after training: 0.9315789473684211
User 29684 does not improve AUC. Reverting changes.
Training on augumented user 112378 28/50 current_auc = 0.9368421052631579
User 112378 AUC after training: 0.9315789473684211
User 112378 does not improve AUC. Reverting changes.
Training on augumented user 112060 29/50 current_auc = 0.9368421052631579
User 112060 AUC after training: 0.9315789473684211
User 112060 does not improve AUC. Reverting changes.
Training on augumented user 54129 30/50 current_auc = 0.9368421052631579
User 54129 AUC after training: 0.9368421052631579
User 54129 does not improve AUC. Reverting changes.
Training on augumented user 18613 31/50 current_auc = 0.9368421052631579
User 18613 AUC after training: 0.9368421052631579
User 18613 does not improve AUC. Reverting changes.
Training on augumented user 75281 32/50 current_auc = 0.9368421052631579
User 75281 AUC after training: 0.9368421052631579
User 75281 does not improve AUC. Reverting changes.
Training on augumented user 101253 33/50 current_auc = 0.9368421052631579
User 101253 AUC after training: 0.9315789473684211
User 101253 does not improve AUC. Reverting changes.
Training on augumented user 19774 34/50 current_auc = 0.9368421052631579
User 19774 AUC after training: 0.9368421052631579
User 19774 does not improve AUC. Reverting changes.
Training on augumented user 119756 35/50 current_auc = 0.9368421052631579
User 119756 AUC after training: 0.9368421052631579
User 119756 does not improve AUC. Reverting changes.
Training on augumented user 84371 36/50 current_auc = 0.9368421052631579
User 84371 AUC after training: 0.9421052631578948
User 84371 improves AUC. Keeping the model.
Training on augumented user 83784 37/50 current_auc = 0.9421052631578948
User 83784 AUC after training: 0.9368421052631579
User 83784 does not improve AUC. Reverting changes.
Training on augumented user 584 38/50 current_auc = 0.9421052631578948
User 584 AUC after training: 0.9421052631578948
User 584 does not improve AUC. Reverting changes.
Training on augumented user 130943 39/50 current_auc = 0.9421052631578948
User 130943 AUC after training: 0.9421052631578948
User 130943 does not improve AUC. Reverting changes.
Training on augumented user 128048 40/50 current_auc = 0.9421052631578948
User 128048 AUC after training: 0.9421052631578948
User 128048 does not improve AUC. Reverting changes.
Training on augumented user 91047 41/50 current_auc = 0.9421052631578948
User 91047 AUC after training: 0.9368421052631579
User 91047 does not improve AUC. Reverting changes.
Training on augumented user 50709 42/50 current_auc = 0.9421052631578948
User 50709 AUC after training: 0.9421052631578948
User 50709 does not improve AUC. Reverting changes.
Training on augumented user 110009 43/50 current_auc = 0.9421052631578948
User 110009 AUC after training: 0.9368421052631579
User 110009 does not improve AUC. Reverting changes.
Training on augumented user 117941 44/50 current_auc = 0.9421052631578948
User 117941 AUC after training: 0.9368421052631579
User 117941 does not improve AUC. Reverting changes.
Training on augumented user 30452 45/50 current_auc = 0.9421052631578948
User 30452 AUC after training: 0.9368421052631579
User 30452 does not improve AUC. Reverting changes.
Training on augumented user 110385 46/50 current_auc = 0.9421052631578948
User 110385 AUC after training: 0.9368421052631579
User 110385 does not improve AUC. Reverting changes.
Training on augumented user 13085 47/50 current_auc = 0.9421052631578948
User 13085 AUC after training: 0.9368421052631579
User 13085 does not improve AUC. Reverting changes.
Training on augumented user 68157 48/50 current_auc = 0.9421052631578948
User 68157 AUC after training: 0.9421052631578948
User 68157 does not improve AUC. Reverting changes.
Training on augumented user 91112 49/50 current_auc = 0.9421052631578948
User 91112 AUC after training: 0.9421052631578948
User 91112 does not improve AUC. Reverting changes.
[2024-12-02 20:00:50.592606] start test user 33932 254/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:51.438623] start test user 33932 254/568 recall augumented users by random, augumented_users = [114408, 119170, 51485, 46858, 116553, 43099, 33201, 129562, 88353, 69225, 120979, 113748, 4494, 48933, 86789, 10938, 30268, 29630, 49822, 70041, 79628, 90087, 61854, 26069, 91426, 33116, 96346, 72354, 35115, 18200, 71711, 130241, 79431, 52684, 56119, 36015, 128360, 88750, 82271, 129249, 29406, 52604, 21832, 121824, 134815, 80259, 94585, 44295, 59787, 65416]
[2024-12-02 20:00:51.474142] user = 33932 Cloud 254/568
[2024-12-02 20:00:51.487396] user = 33932 Local 254/568
[2024-12-02 20:00:51.527609] user = 33932 Local+ 254/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:54.374442] user = 33932 MPDA- 254/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6512345679012346
Training on augumented user 114408 0/50 current_auc = 0.6512345679012346
User 114408 AUC after training: 0.6522633744855967
User 114408 improves AUC. Keeping the model.
Training on augumented user 119170 1/50 current_auc = 0.6522633744855967
User 119170 AUC after training: 0.6558641975308641
User 119170 improves AUC. Keeping the model.
Training on augumented user 51485 2/50 current_auc = 0.6558641975308641
User 51485 AUC after training: 0.6594650205761317
User 51485 improves AUC. Keeping the model.
Training on augumented user 46858 3/50 current_auc = 0.6594650205761317
User 46858 AUC after training: 0.654320987654321
User 46858 does not improve AUC. Reverting changes.
Training on augumented user 116553 4/50 current_auc = 0.6594650205761317
User 116553 AUC after training: 0.6558641975308642
User 116553 does not improve AUC. Reverting changes.
Training on augumented user 43099 5/50 current_auc = 0.6594650205761317
User 43099 AUC after training: 0.661522633744856
User 43099 improves AUC. Keeping the model.
Training on augumented user 33201 6/50 current_auc = 0.661522633744856
User 33201 AUC after training: 0.6707818930041152
User 33201 improves AUC. Keeping the model.
Training on augumented user 129562 7/50 current_auc = 0.6707818930041152
User 129562 AUC after training: 0.6697530864197532
User 129562 does not improve AUC. Reverting changes.
Training on augumented user 88353 8/50 current_auc = 0.6707818930041152
User 88353 AUC after training: 0.6707818930041152
User 88353 does not improve AUC. Reverting changes.
Training on augumented user 69225 9/50 current_auc = 0.6707818930041152
User 69225 AUC after training: 0.6718106995884773
User 69225 improves AUC. Keeping the model.
Training on augumented user 120979 10/50 current_auc = 0.6718106995884773
User 120979 AUC after training: 0.6635802469135802
User 120979 does not improve AUC. Reverting changes.
Training on augumented user 113748 11/50 current_auc = 0.6718106995884773
User 113748 AUC after training: 0.6707818930041152
User 113748 does not improve AUC. Reverting changes.
Training on augumented user 4494 12/50 current_auc = 0.6718106995884773
User 4494 AUC after training: 0.6666666666666666
User 4494 does not improve AUC. Reverting changes.
Training on augumented user 48933 13/50 current_auc = 0.6718106995884773
User 48933 AUC after training: 0.6707818930041152
User 48933 does not improve AUC. Reverting changes.
Training on augumented user 86789 14/50 current_auc = 0.6718106995884773
User 86789 AUC after training: 0.668724279835391
User 86789 does not improve AUC. Reverting changes.
Training on augumented user 10938 15/50 current_auc = 0.6718106995884773
User 10938 AUC after training: 0.6707818930041152
User 10938 does not improve AUC. Reverting changes.
Training on augumented user 30268 16/50 current_auc = 0.6718106995884773
User 30268 AUC after training: 0.6728395061728394
User 30268 improves AUC. Keeping the model.
Training on augumented user 29630 17/50 current_auc = 0.6728395061728394
User 29630 AUC after training: 0.6707818930041152
User 29630 does not improve AUC. Reverting changes.
Training on augumented user 49822 18/50 current_auc = 0.6728395061728394
User 49822 AUC after training: 0.6790123456790123
User 49822 improves AUC. Keeping the model.
Training on augumented user 70041 19/50 current_auc = 0.6790123456790123
User 70041 AUC after training: 0.67798353909465
User 70041 does not improve AUC. Reverting changes.
Training on augumented user 79628 20/50 current_auc = 0.6790123456790123
User 79628 AUC after training: 0.6790123456790123
User 79628 does not improve AUC. Reverting changes.
Training on augumented user 90087 21/50 current_auc = 0.6790123456790123
User 90087 AUC after training: 0.6810699588477366
User 90087 improves AUC. Keeping the model.
Training on augumented user 61854 22/50 current_auc = 0.6810699588477366
User 61854 AUC after training: 0.6738683127572016
User 61854 does not improve AUC. Reverting changes.
Training on augumented user 26069 23/50 current_auc = 0.6810699588477366
User 26069 AUC after training: 0.6831275720164608
User 26069 improves AUC. Keeping the model.
Training on augumented user 91426 24/50 current_auc = 0.6831275720164608
User 91426 AUC after training: 0.6810699588477366
User 91426 does not improve AUC. Reverting changes.
Training on augumented user 33116 25/50 current_auc = 0.6831275720164608
User 33116 AUC after training: 0.6851851851851851
User 33116 improves AUC. Keeping the model.
Training on augumented user 96346 26/50 current_auc = 0.6851851851851851
User 96346 AUC after training: 0.6872427983539094
User 96346 improves AUC. Keeping the model.
Training on augumented user 72354 27/50 current_auc = 0.6872427983539094
User 72354 AUC after training: 0.6872427983539094
User 72354 does not improve AUC. Reverting changes.
Training on augumented user 35115 28/50 current_auc = 0.6872427983539094
User 35115 AUC after training: 0.6676954732510287
User 35115 does not improve AUC. Reverting changes.
Training on augumented user 18200 29/50 current_auc = 0.6872427983539094
User 18200 AUC after training: 0.6769547325102879
User 18200 does not improve AUC. Reverting changes.
Training on augumented user 71711 30/50 current_auc = 0.6872427983539094
User 71711 AUC after training: 0.6831275720164608
User 71711 does not improve AUC. Reverting changes.
Training on augumented user 130241 31/50 current_auc = 0.6872427983539094
User 130241 AUC after training: 0.6862139917695472
User 130241 does not improve AUC. Reverting changes.
Training on augumented user 79431 32/50 current_auc = 0.6872427983539094
User 79431 AUC after training: 0.6872427983539094
User 79431 does not improve AUC. Reverting changes.
Training on augumented user 52684 33/50 current_auc = 0.6872427983539094
User 52684 AUC after training: 0.6851851851851851
User 52684 does not improve AUC. Reverting changes.
Training on augumented user 56119 34/50 current_auc = 0.6872427983539094
User 56119 AUC after training: 0.6851851851851851
User 56119 does not improve AUC. Reverting changes.
Training on augumented user 36015 35/50 current_auc = 0.6872427983539094
User 36015 AUC after training: 0.6779835390946501
User 36015 does not improve AUC. Reverting changes.
Training on augumented user 128360 36/50 current_auc = 0.6872427983539094
User 128360 AUC after training: 0.6872427983539094
User 128360 does not improve AUC. Reverting changes.
Training on augumented user 88750 37/50 current_auc = 0.6872427983539094
User 88750 AUC after training: 0.6872427983539094
User 88750 does not improve AUC. Reverting changes.
Training on augumented user 82271 38/50 current_auc = 0.6872427983539094
User 82271 AUC after training: 0.6851851851851851
User 82271 does not improve AUC. Reverting changes.
Training on augumented user 129249 39/50 current_auc = 0.6872427983539094
User 129249 AUC after training: 0.6851851851851851
User 129249 does not improve AUC. Reverting changes.
Training on augumented user 29406 40/50 current_auc = 0.6872427983539094
User 29406 AUC after training: 0.6862139917695472
User 29406 does not improve AUC. Reverting changes.
Training on augumented user 52604 41/50 current_auc = 0.6872427983539094
User 52604 AUC after training: 0.6851851851851851
User 52604 does not improve AUC. Reverting changes.
Training on augumented user 21832 42/50 current_auc = 0.6872427983539094
User 21832 AUC after training: 0.6872427983539094
User 21832 does not improve AUC. Reverting changes.
Training on augumented user 121824 43/50 current_auc = 0.6872427983539094
User 121824 AUC after training: 0.6872427983539094
User 121824 does not improve AUC. Reverting changes.
Training on augumented user 134815 44/50 current_auc = 0.6872427983539094
User 134815 AUC after training: 0.6851851851851851
User 134815 does not improve AUC. Reverting changes.
Training on augumented user 80259 45/50 current_auc = 0.6872427983539094
User 80259 AUC after training: 0.6851851851851851
User 80259 does not improve AUC. Reverting changes.
Training on augumented user 94585 46/50 current_auc = 0.6872427983539094
User 94585 AUC after training: 0.6872427983539094
User 94585 does not improve AUC. Reverting changes.
Training on augumented user 44295 47/50 current_auc = 0.6872427983539094
User 44295 AUC after training: 0.6882716049382717
User 44295 improves AUC. Keeping the model.
Training on augumented user 59787 48/50 current_auc = 0.6882716049382717
User 59787 AUC after training: 0.6862139917695472
User 59787 does not improve AUC. Reverting changes.
Training on augumented user 65416 49/50 current_auc = 0.6882716049382717
User 65416 AUC after training: 0.6872427983539094
User 65416 does not improve AUC. Reverting changes.
[2024-12-02 20:01:27.717681] start test user 33936 255/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:28.203129] start test user 33936 255/568 recall augumented users by random, augumented_users = [78530, 50469, 18296, 30229, 55943, 84591, 47517, 25291, 64295, 69189, 51357, 15809, 94682, 51806, 116220, 104646, 4174, 60057, 84555, 1778, 82138, 50937, 73674, 35606, 30577, 44930, 105657, 57726, 20714, 128322, 45896, 130117, 102476, 107142, 15233, 19305, 123576, 73926, 686, 91300, 112257, 16947, 78854, 120292, 88015, 11950, 43368, 64775, 21400, 47375]
[2024-12-02 20:01:28.218574] user = 33936 Cloud 255/568
[2024-12-02 20:01:28.234447] user = 33936 Local 255/568
[2024-12-02 20:01:28.329319] user = 33936 Local+ 255/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:31.265330] user = 33936 MPDA- 255/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6909323116219668
Training on augumented user 78530 0/50 current_auc = 0.6909323116219668
User 78530 AUC after training: 0.6890166028097062
User 78530 does not improve AUC. Reverting changes.
Training on augumented user 50469 1/50 current_auc = 0.6909323116219668
User 50469 AUC after training: 0.6909323116219668
User 50469 does not improve AUC. Reverting changes.
Training on augumented user 18296 2/50 current_auc = 0.6909323116219668
User 18296 AUC after training: 0.6893358876117496
User 18296 does not improve AUC. Reverting changes.
Training on augumented user 30229 3/50 current_auc = 0.6909323116219668
User 30229 AUC after training: 0.6890166028097062
User 30229 does not improve AUC. Reverting changes.
Training on augumented user 55943 4/50 current_auc = 0.6909323116219668
User 55943 AUC after training: 0.69029374201788
User 55943 does not improve AUC. Reverting changes.
Training on augumented user 84591 5/50 current_auc = 0.6909323116219668
User 84591 AUC after training: 0.689655172413793
User 84591 does not improve AUC. Reverting changes.
Training on augumented user 47517 6/50 current_auc = 0.6909323116219668
User 47517 AUC after training: 0.6906130268199233
User 47517 does not improve AUC. Reverting changes.
Training on augumented user 25291 7/50 current_auc = 0.6909323116219668
User 25291 AUC after training: 0.6906130268199233
User 25291 does not improve AUC. Reverting changes.
Training on augumented user 64295 8/50 current_auc = 0.6909323116219668
User 64295 AUC after training: 0.6909323116219668
User 64295 does not improve AUC. Reverting changes.
Training on augumented user 69189 9/50 current_auc = 0.6909323116219668
User 69189 AUC after training: 0.6906130268199234
User 69189 does not improve AUC. Reverting changes.
Training on augumented user 51357 10/50 current_auc = 0.6909323116219668
User 51357 AUC after training: 0.6912515964240101
User 51357 improves AUC. Keeping the model.
Training on augumented user 15809 11/50 current_auc = 0.6912515964240101
User 15809 AUC after training: 0.6912515964240102
User 15809 improves AUC. Keeping the model.
Training on augumented user 94682 12/50 current_auc = 0.6912515964240102
User 94682 AUC after training: 0.6915708812260536
User 94682 improves AUC. Keeping the model.
Training on augumented user 51806 13/50 current_auc = 0.6915708812260536
User 51806 AUC after training: 0.691890166028097
User 51806 improves AUC. Keeping the model.
Training on augumented user 116220 14/50 current_auc = 0.691890166028097
User 116220 AUC after training: 0.689655172413793
User 116220 does not improve AUC. Reverting changes.
Training on augumented user 104646 15/50 current_auc = 0.691890166028097
User 104646 AUC after training: 0.6925287356321839
User 104646 improves AUC. Keeping the model.
Training on augumented user 4174 16/50 current_auc = 0.6925287356321839
User 4174 AUC after training: 0.6909323116219668
User 4174 does not improve AUC. Reverting changes.
Training on augumented user 60057 17/50 current_auc = 0.6925287356321839
User 60057 AUC after training: 0.6915708812260536
User 60057 does not improve AUC. Reverting changes.
Training on augumented user 84555 18/50 current_auc = 0.6925287356321839
User 84555 AUC after training: 0.6922094508301404
User 84555 does not improve AUC. Reverting changes.
Training on augumented user 1778 19/50 current_auc = 0.6925287356321839
User 1778 AUC after training: 0.6922094508301405
User 1778 does not improve AUC. Reverting changes.
Training on augumented user 82138 20/50 current_auc = 0.6925287356321839
User 82138 AUC after training: 0.691890166028097
User 82138 does not improve AUC. Reverting changes.
Training on augumented user 50937 21/50 current_auc = 0.6925287356321839
User 50937 AUC after training: 0.6915708812260536
User 50937 does not improve AUC. Reverting changes.
Training on augumented user 73674 22/50 current_auc = 0.6925287356321839
User 73674 AUC after training: 0.6915708812260537
User 73674 does not improve AUC. Reverting changes.
Training on augumented user 35606 23/50 current_auc = 0.6925287356321839
User 35606 AUC after training: 0.6925287356321838
User 35606 does not improve AUC. Reverting changes.
Training on augumented user 30577 24/50 current_auc = 0.6925287356321839
User 30577 AUC after training: 0.691890166028097
User 30577 does not improve AUC. Reverting changes.
Training on augumented user 44930 25/50 current_auc = 0.6925287356321839
User 44930 AUC after training: 0.6928480204342273
User 44930 improves AUC. Keeping the model.
Training on augumented user 105657 26/50 current_auc = 0.6928480204342273
User 105657 AUC after training: 0.6925287356321839
User 105657 does not improve AUC. Reverting changes.
Training on augumented user 57726 27/50 current_auc = 0.6928480204342273
User 57726 AUC after training: 0.6931673052362708
User 57726 improves AUC. Keeping the model.
Training on augumented user 20714 28/50 current_auc = 0.6931673052362708
User 20714 AUC after training: 0.6909323116219668
User 20714 does not improve AUC. Reverting changes.
Training on augumented user 128322 29/50 current_auc = 0.6931673052362708
User 128322 AUC after training: 0.6931673052362707
User 128322 does not improve AUC. Reverting changes.
Training on augumented user 45896 30/50 current_auc = 0.6931673052362708
User 45896 AUC after training: 0.6938058748403576
User 45896 improves AUC. Keeping the model.
Training on augumented user 130117 31/50 current_auc = 0.6938058748403576
User 130117 AUC after training: 0.6922094508301405
User 130117 does not improve AUC. Reverting changes.
Training on augumented user 102476 32/50 current_auc = 0.6938058748403576
User 102476 AUC after training: 0.6934865900383143
User 102476 does not improve AUC. Reverting changes.
Training on augumented user 107142 33/50 current_auc = 0.6938058748403576
User 107142 AUC after training: 0.6934865900383141
User 107142 does not improve AUC. Reverting changes.
Training on augumented user 15233 34/50 current_auc = 0.6938058748403576
User 15233 AUC after training: 0.6928480204342272
User 15233 does not improve AUC. Reverting changes.
Training on augumented user 19305 35/50 current_auc = 0.6938058748403576
User 19305 AUC after training: 0.6928480204342273
User 19305 does not improve AUC. Reverting changes.
Training on augumented user 123576 36/50 current_auc = 0.6938058748403576
User 123576 AUC after training: 0.6938058748403576
User 123576 does not improve AUC. Reverting changes.
Training on augumented user 73926 37/50 current_auc = 0.6938058748403576
User 73926 AUC after training: 0.6925287356321838
User 73926 does not improve AUC. Reverting changes.
Training on augumented user 686 38/50 current_auc = 0.6938058748403576
User 686 AUC after training: 0.6918901660280969
User 686 does not improve AUC. Reverting changes.
Training on augumented user 91300 39/50 current_auc = 0.6938058748403576
User 91300 AUC after training: 0.6915708812260537
User 91300 does not improve AUC. Reverting changes.
Training on augumented user 112257 40/50 current_auc = 0.6938058748403576
User 112257 AUC after training: 0.6922094508301404
User 112257 does not improve AUC. Reverting changes.
Training on augumented user 16947 41/50 current_auc = 0.6938058748403576
User 16947 AUC after training: 0.6928480204342272
User 16947 does not improve AUC. Reverting changes.
Training on augumented user 78854 42/50 current_auc = 0.6938058748403576
User 78854 AUC after training: 0.6934865900383141
User 78854 does not improve AUC. Reverting changes.
Training on augumented user 120292 43/50 current_auc = 0.6938058748403576
User 120292 AUC after training: 0.6925287356321839
User 120292 does not improve AUC. Reverting changes.
Training on augumented user 88015 44/50 current_auc = 0.6938058748403576
User 88015 AUC after training: 0.694125159642401
User 88015 improves AUC. Keeping the model.
Training on augumented user 11950 45/50 current_auc = 0.694125159642401
User 11950 AUC after training: 0.6954022988505747
User 11950 improves AUC. Keeping the model.
Training on augumented user 43368 46/50 current_auc = 0.6954022988505747
User 43368 AUC after training: 0.6950830140485313
User 43368 does not improve AUC. Reverting changes.
Training on augumented user 64775 47/50 current_auc = 0.6954022988505747
User 64775 AUC after training: 0.6938058748403576
User 64775 does not improve AUC. Reverting changes.
Training on augumented user 21400 48/50 current_auc = 0.6954022988505747
User 21400 AUC after training: 0.6946040868454662
User 21400 does not improve AUC. Reverting changes.
Training on augumented user 47375 49/50 current_auc = 0.6954022988505747
User 47375 AUC after training: 0.6960408684546615
User 47375 improves AUC. Keeping the model.
[2024-12-02 20:02:00.741994] start test user 33981 256/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:01.215565] start test user 33981 256/568 recall augumented users by random, augumented_users = [44623, 44458, 125842, 110851, 138433, 110350, 10025, 89040, 133117, 51918, 131193, 4890, 76762, 3013, 56414, 3312, 20933, 122124, 135537, 84413, 120042, 58932, 131143, 124679, 115365, 8019, 108097, 51585, 53777, 88540, 20229, 79098, 85079, 119352, 2955, 87257, 18370, 28952, 50730, 1635, 85710, 31407, 119874, 105527, 135525, 115236, 101634, 20761, 115068, 48365]
[2024-12-02 20:02:01.231889] user = 33981 Cloud 256/568
[2024-12-02 20:02:01.243384] user = 33981 Local 256/568
[2024-12-02 20:02:01.495734] user = 33981 Local+ 256/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:03.442192] user = 33981 MPDA- 256/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5910364145658262
Training on augumented user 44623 0/50 current_auc = 0.5910364145658262
User 44623 AUC after training: 0.5910364145658262
User 44623 does not improve AUC. Reverting changes.
Training on augumented user 44458 1/50 current_auc = 0.5910364145658262
User 44458 AUC after training: 0.5910364145658262
User 44458 does not improve AUC. Reverting changes.
Training on augumented user 125842 2/50 current_auc = 0.5910364145658262
User 125842 AUC after training: 0.5910364145658262
User 125842 does not improve AUC. Reverting changes.
Training on augumented user 110851 3/50 current_auc = 0.5910364145658262
User 110851 AUC after training: 0.5910364145658262
User 110851 does not improve AUC. Reverting changes.
Training on augumented user 138433 4/50 current_auc = 0.5910364145658262
User 138433 AUC after training: 0.5910364145658262
User 138433 does not improve AUC. Reverting changes.
Training on augumented user 110350 5/50 current_auc = 0.5910364145658262
User 110350 AUC after training: 0.5910364145658262
User 110350 does not improve AUC. Reverting changes.
Training on augumented user 10025 6/50 current_auc = 0.5910364145658262
User 10025 AUC after training: 0.5910364145658262
User 10025 does not improve AUC. Reverting changes.
Training on augumented user 89040 7/50 current_auc = 0.5910364145658262
User 89040 AUC after training: 0.5910364145658262
User 89040 does not improve AUC. Reverting changes.
Training on augumented user 133117 8/50 current_auc = 0.5910364145658262
User 133117 AUC after training: 0.5910364145658262
User 133117 does not improve AUC. Reverting changes.
Training on augumented user 51918 9/50 current_auc = 0.5910364145658262
User 51918 AUC after training: 0.5910364145658262
User 51918 does not improve AUC. Reverting changes.
Training on augumented user 131193 10/50 current_auc = 0.5910364145658262
User 131193 AUC after training: 0.5910364145658262
User 131193 does not improve AUC. Reverting changes.
Training on augumented user 4890 11/50 current_auc = 0.5910364145658262
User 4890 AUC after training: 0.5910364145658262
User 4890 does not improve AUC. Reverting changes.
Training on augumented user 76762 12/50 current_auc = 0.5910364145658262
User 76762 AUC after training: 0.5910364145658262
User 76762 does not improve AUC. Reverting changes.
Training on augumented user 3013 13/50 current_auc = 0.5910364145658262
User 3013 AUC after training: 0.5910364145658262
User 3013 does not improve AUC. Reverting changes.
Training on augumented user 56414 14/50 current_auc = 0.5910364145658262
User 56414 AUC after training: 0.5910364145658262
User 56414 does not improve AUC. Reverting changes.
Training on augumented user 3312 15/50 current_auc = 0.5910364145658262
User 3312 AUC after training: 0.5910364145658262
User 3312 does not improve AUC. Reverting changes.
Training on augumented user 20933 16/50 current_auc = 0.5910364145658262
User 20933 AUC after training: 0.5938375350140056
User 20933 improves AUC. Keeping the model.
Training on augumented user 122124 17/50 current_auc = 0.5938375350140056
User 122124 AUC after training: 0.5938375350140056
User 122124 does not improve AUC. Reverting changes.
Training on augumented user 135537 18/50 current_auc = 0.5938375350140056
User 135537 AUC after training: 0.5910364145658262
User 135537 does not improve AUC. Reverting changes.
Training on augumented user 84413 19/50 current_auc = 0.5938375350140056
User 84413 AUC after training: 0.5938375350140056
User 84413 does not improve AUC. Reverting changes.
Training on augumented user 120042 20/50 current_auc = 0.5938375350140056
User 120042 AUC after training: 0.5938375350140056
User 120042 does not improve AUC. Reverting changes.
Training on augumented user 58932 21/50 current_auc = 0.5938375350140056
User 58932 AUC after training: 0.5938375350140056
User 58932 does not improve AUC. Reverting changes.
Training on augumented user 131143 22/50 current_auc = 0.5938375350140056
User 131143 AUC after training: 0.5910364145658262
User 131143 does not improve AUC. Reverting changes.
Training on augumented user 124679 23/50 current_auc = 0.5938375350140056
User 124679 AUC after training: 0.5938375350140056
User 124679 does not improve AUC. Reverting changes.
Training on augumented user 115365 24/50 current_auc = 0.5938375350140056
User 115365 AUC after training: 0.5938375350140056
User 115365 does not improve AUC. Reverting changes.
Training on augumented user 8019 25/50 current_auc = 0.5938375350140056
User 8019 AUC after training: 0.5910364145658262
User 8019 does not improve AUC. Reverting changes.
Training on augumented user 108097 26/50 current_auc = 0.5938375350140056
User 108097 AUC after training: 0.5910364145658262
User 108097 does not improve AUC. Reverting changes.
Training on augumented user 51585 27/50 current_auc = 0.5938375350140056
User 51585 AUC after training: 0.5910364145658262
User 51585 does not improve AUC. Reverting changes.
Training on augumented user 53777 28/50 current_auc = 0.5938375350140056
User 53777 AUC after training: 0.5938375350140056
User 53777 does not improve AUC. Reverting changes.
Training on augumented user 88540 29/50 current_auc = 0.5938375350140056
User 88540 AUC after training: 0.5938375350140056
User 88540 does not improve AUC. Reverting changes.
Training on augumented user 20229 30/50 current_auc = 0.5938375350140056
User 20229 AUC after training: 0.5882352941176471
User 20229 does not improve AUC. Reverting changes.
Training on augumented user 79098 31/50 current_auc = 0.5938375350140056
User 79098 AUC after training: 0.5910364145658262
User 79098 does not improve AUC. Reverting changes.
Training on augumented user 85079 32/50 current_auc = 0.5938375350140056
User 85079 AUC after training: 0.5938375350140056
User 85079 does not improve AUC. Reverting changes.
Training on augumented user 119352 33/50 current_auc = 0.5938375350140056
User 119352 AUC after training: 0.5938375350140056
User 119352 does not improve AUC. Reverting changes.
Training on augumented user 2955 34/50 current_auc = 0.5938375350140056
User 2955 AUC after training: 0.5910364145658263
User 2955 does not improve AUC. Reverting changes.
Training on augumented user 87257 35/50 current_auc = 0.5938375350140056
User 87257 AUC after training: 0.5910364145658262
User 87257 does not improve AUC. Reverting changes.
Training on augumented user 18370 36/50 current_auc = 0.5938375350140056
User 18370 AUC after training: 0.5910364145658262
User 18370 does not improve AUC. Reverting changes.
Training on augumented user 28952 37/50 current_auc = 0.5938375350140056
User 28952 AUC after training: 0.5938375350140056
User 28952 does not improve AUC. Reverting changes.
Training on augumented user 50730 38/50 current_auc = 0.5938375350140056
User 50730 AUC after training: 0.5910364145658262
User 50730 does not improve AUC. Reverting changes.
Training on augumented user 1635 39/50 current_auc = 0.5938375350140056
User 1635 AUC after training: 0.5910364145658262
User 1635 does not improve AUC. Reverting changes.
Training on augumented user 85710 40/50 current_auc = 0.5938375350140056
User 85710 AUC after training: 0.5910364145658262
User 85710 does not improve AUC. Reverting changes.
Training on augumented user 31407 41/50 current_auc = 0.5938375350140056
User 31407 AUC after training: 0.5910364145658262
User 31407 does not improve AUC. Reverting changes.
Training on augumented user 119874 42/50 current_auc = 0.5938375350140056
User 119874 AUC after training: 0.5938375350140056
User 119874 does not improve AUC. Reverting changes.
Training on augumented user 105527 43/50 current_auc = 0.5938375350140056
User 105527 AUC after training: 0.5910364145658262
User 105527 does not improve AUC. Reverting changes.
Training on augumented user 135525 44/50 current_auc = 0.5938375350140056
User 135525 AUC after training: 0.5910364145658263
User 135525 does not improve AUC. Reverting changes.
Training on augumented user 115236 45/50 current_auc = 0.5938375350140056
User 115236 AUC after training: 0.5938375350140056
User 115236 does not improve AUC. Reverting changes.
Training on augumented user 101634 46/50 current_auc = 0.5938375350140056
User 101634 AUC after training: 0.5938375350140056
User 101634 does not improve AUC. Reverting changes.
Training on augumented user 20761 47/50 current_auc = 0.5938375350140056
User 20761 AUC after training: 0.5938375350140056
User 20761 does not improve AUC. Reverting changes.
Training on augumented user 115068 48/50 current_auc = 0.5938375350140056
User 115068 AUC after training: 0.5910364145658262
User 115068 does not improve AUC. Reverting changes.
Training on augumented user 48365 49/50 current_auc = 0.5938375350140056
User 48365 AUC after training: 0.5938375350140056
User 48365 does not improve AUC. Reverting changes.
[2024-12-02 20:02:31.038409] start test user 33991 257/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:31.770984] start test user 33991 257/568 recall augumented users by random, augumented_users = [62805, 8303, 121005, 25823, 117777, 39018, 8111, 38295, 22096, 119430, 41793, 46702, 136331, 66642, 22228, 55822, 133681, 43975, 6319, 126816, 82966, 36059, 34766, 51627, 28455, 50047, 30659, 33489, 136109, 82870, 99371, 23655, 84785, 119705, 101069, 92585, 82322, 60727, 24584, 316, 114558, 89490, 70392, 128047, 79688, 66765, 22881, 94164, 116502, 33674]
[2024-12-02 20:02:31.800076] user = 33991 Cloud 257/568
[2024-12-02 20:02:31.810134] user = 33991 Local 257/568
[2024-12-02 20:02:31.906359] user = 33991 Local+ 257/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:34.777340] user = 33991 MPDA- 257/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8333333333333334
Training on augumented user 62805 0/50 current_auc = 0.8333333333333334
User 62805 AUC after training: 0.8333333333333334
User 62805 does not improve AUC. Reverting changes.
Training on augumented user 8303 1/50 current_auc = 0.8333333333333334
User 8303 AUC after training: 0.8333333333333334
User 8303 does not improve AUC. Reverting changes.
Training on augumented user 121005 2/50 current_auc = 0.8333333333333334
User 121005 AUC after training: 0.8333333333333334
User 121005 does not improve AUC. Reverting changes.
Training on augumented user 25823 3/50 current_auc = 0.8333333333333334
User 25823 AUC after training: 0.8333333333333334
User 25823 does not improve AUC. Reverting changes.
Training on augumented user 117777 4/50 current_auc = 0.8333333333333334
User 117777 AUC after training: 0.8333333333333334
User 117777 does not improve AUC. Reverting changes.
Training on augumented user 39018 5/50 current_auc = 0.8333333333333334
User 39018 AUC after training: 0.8333333333333334
User 39018 does not improve AUC. Reverting changes.
Training on augumented user 8111 6/50 current_auc = 0.8333333333333334
User 8111 AUC after training: 0.8333333333333334
User 8111 does not improve AUC. Reverting changes.
Training on augumented user 38295 7/50 current_auc = 0.8333333333333334
User 38295 AUC after training: 0.8333333333333334
User 38295 does not improve AUC. Reverting changes.
Training on augumented user 22096 8/50 current_auc = 0.8333333333333334
User 22096 AUC after training: 0.8333333333333334
User 22096 does not improve AUC. Reverting changes.
Training on augumented user 119430 9/50 current_auc = 0.8333333333333334
User 119430 AUC after training: 0.8333333333333334
User 119430 does not improve AUC. Reverting changes.
Training on augumented user 41793 10/50 current_auc = 0.8333333333333334
User 41793 AUC after training: 0.8333333333333334
User 41793 does not improve AUC. Reverting changes.
Training on augumented user 46702 11/50 current_auc = 0.8333333333333334
User 46702 AUC after training: 0.8333333333333334
User 46702 does not improve AUC. Reverting changes.
Training on augumented user 136331 12/50 current_auc = 0.8333333333333334
User 136331 AUC after training: 0.8333333333333334
User 136331 does not improve AUC. Reverting changes.
Training on augumented user 66642 13/50 current_auc = 0.8333333333333334
User 66642 AUC after training: 0.8333333333333334
User 66642 does not improve AUC. Reverting changes.
Training on augumented user 22228 14/50 current_auc = 0.8333333333333334
User 22228 AUC after training: 0.8333333333333334
User 22228 does not improve AUC. Reverting changes.
Training on augumented user 55822 15/50 current_auc = 0.8333333333333334
User 55822 AUC after training: 0.8333333333333334
User 55822 does not improve AUC. Reverting changes.
Training on augumented user 133681 16/50 current_auc = 0.8333333333333334
User 133681 AUC after training: 0.8333333333333334
User 133681 does not improve AUC. Reverting changes.
Training on augumented user 43975 17/50 current_auc = 0.8333333333333334
User 43975 AUC after training: 0.8333333333333334
User 43975 does not improve AUC. Reverting changes.
Training on augumented user 6319 18/50 current_auc = 0.8333333333333334
User 6319 AUC after training: 0.8333333333333334
User 6319 does not improve AUC. Reverting changes.
Training on augumented user 126816 19/50 current_auc = 0.8333333333333334
User 126816 AUC after training: 0.8333333333333334
User 126816 does not improve AUC. Reverting changes.
Training on augumented user 82966 20/50 current_auc = 0.8333333333333334
User 82966 AUC after training: 0.8333333333333334
User 82966 does not improve AUC. Reverting changes.
Training on augumented user 36059 21/50 current_auc = 0.8333333333333334
User 36059 AUC after training: 0.8333333333333334
User 36059 does not improve AUC. Reverting changes.
Training on augumented user 34766 22/50 current_auc = 0.8333333333333334
User 34766 AUC after training: 0.8333333333333334
User 34766 does not improve AUC. Reverting changes.
Training on augumented user 51627 23/50 current_auc = 0.8333333333333334
User 51627 AUC after training: 0.8333333333333334
User 51627 does not improve AUC. Reverting changes.
Training on augumented user 28455 24/50 current_auc = 0.8333333333333334
User 28455 AUC after training: 0.8333333333333334
User 28455 does not improve AUC. Reverting changes.
Training on augumented user 50047 25/50 current_auc = 0.8333333333333334
User 50047 AUC after training: 0.8333333333333334
User 50047 does not improve AUC. Reverting changes.
Training on augumented user 30659 26/50 current_auc = 0.8333333333333334
User 30659 AUC after training: 0.8333333333333334
User 30659 does not improve AUC. Reverting changes.
Training on augumented user 33489 27/50 current_auc = 0.8333333333333334
User 33489 AUC after training: 0.8333333333333334
User 33489 does not improve AUC. Reverting changes.
Training on augumented user 136109 28/50 current_auc = 0.8333333333333334
User 136109 AUC after training: 0.8333333333333334
User 136109 does not improve AUC. Reverting changes.
Training on augumented user 82870 29/50 current_auc = 0.8333333333333334
User 82870 AUC after training: 0.8333333333333334
User 82870 does not improve AUC. Reverting changes.
Training on augumented user 99371 30/50 current_auc = 0.8333333333333334
User 99371 AUC after training: 0.8333333333333334
User 99371 does not improve AUC. Reverting changes.
Training on augumented user 23655 31/50 current_auc = 0.8333333333333334
User 23655 AUC after training: 0.8333333333333334
User 23655 does not improve AUC. Reverting changes.
Training on augumented user 84785 32/50 current_auc = 0.8333333333333334
User 84785 AUC after training: 0.8333333333333334
User 84785 does not improve AUC. Reverting changes.
Training on augumented user 119705 33/50 current_auc = 0.8333333333333334
User 119705 AUC after training: 0.8333333333333334
User 119705 does not improve AUC. Reverting changes.
Training on augumented user 101069 34/50 current_auc = 0.8333333333333334
User 101069 AUC after training: 0.8333333333333334
User 101069 does not improve AUC. Reverting changes.
Training on augumented user 92585 35/50 current_auc = 0.8333333333333334
User 92585 AUC after training: 0.8333333333333334
User 92585 does not improve AUC. Reverting changes.
Training on augumented user 82322 36/50 current_auc = 0.8333333333333334
User 82322 AUC after training: 0.8333333333333334
User 82322 does not improve AUC. Reverting changes.
Training on augumented user 60727 37/50 current_auc = 0.8333333333333334
User 60727 AUC after training: 0.8333333333333334
User 60727 does not improve AUC. Reverting changes.
Training on augumented user 24584 38/50 current_auc = 0.8333333333333334
User 24584 AUC after training: 0.8333333333333334
User 24584 does not improve AUC. Reverting changes.
Training on augumented user 316 39/50 current_auc = 0.8333333333333334
User 316 AUC after training: 0.8333333333333334
User 316 does not improve AUC. Reverting changes.
Training on augumented user 114558 40/50 current_auc = 0.8333333333333334
User 114558 AUC after training: 0.8333333333333334
User 114558 does not improve AUC. Reverting changes.
Training on augumented user 89490 41/50 current_auc = 0.8333333333333334
User 89490 AUC after training: 0.8333333333333334
User 89490 does not improve AUC. Reverting changes.
Training on augumented user 70392 42/50 current_auc = 0.8333333333333334
User 70392 AUC after training: 0.8333333333333334
User 70392 does not improve AUC. Reverting changes.
Training on augumented user 128047 43/50 current_auc = 0.8333333333333334
User 128047 AUC after training: 0.8333333333333334
User 128047 does not improve AUC. Reverting changes.
Training on augumented user 79688 44/50 current_auc = 0.8333333333333334
User 79688 AUC after training: 0.8333333333333334
User 79688 does not improve AUC. Reverting changes.
Training on augumented user 66765 45/50 current_auc = 0.8333333333333334
User 66765 AUC after training: 0.8333333333333334
User 66765 does not improve AUC. Reverting changes.
Training on augumented user 22881 46/50 current_auc = 0.8333333333333334
User 22881 AUC after training: 0.8333333333333334
User 22881 does not improve AUC. Reverting changes.
Training on augumented user 94164 47/50 current_auc = 0.8333333333333334
User 94164 AUC after training: 0.8333333333333334
User 94164 does not improve AUC. Reverting changes.
Training on augumented user 116502 48/50 current_auc = 0.8333333333333334
User 116502 AUC after training: 0.8333333333333334
User 116502 does not improve AUC. Reverting changes.
Training on augumented user 33674 49/50 current_auc = 0.8333333333333334
User 33674 AUC after training: 0.8333333333333334
User 33674 does not improve AUC. Reverting changes.
[2024-12-02 20:03:03.944069] start test user 34046 258/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:04.605709] start test user 34046 258/568 recall augumented users by random, augumented_users = [131719, 94170, 46629, 75702, 9066, 126516, 55226, 31290, 72810, 12939, 26697, 42879, 60957, 122051, 44498, 76789, 54422, 116555, 16529, 90201, 92372, 74579, 85746, 42549, 119965, 16932, 39807, 132464, 19430, 75838, 52443, 71916, 14574, 95035, 36117, 46738, 17124, 13357, 105930, 75797, 117949, 65224, 81501, 59759, 302, 66604, 47046, 94307, 28923, 126757]
[2024-12-02 20:03:04.621041] user = 34046 Cloud 258/568
[2024-12-02 20:03:04.642789] user = 34046 Local 258/568
[2024-12-02 20:03:04.746900] user = 34046 Local+ 258/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:07.652667] user = 34046 MPDA- 258/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5858823529411765
Training on augumented user 131719 0/50 current_auc = 0.5858823529411765
User 131719 AUC after training: 0.5811764705882353
User 131719 does not improve AUC. Reverting changes.
Training on augumented user 94170 1/50 current_auc = 0.5858823529411765
User 94170 AUC after training: 0.5858823529411765
User 94170 does not improve AUC. Reverting changes.
Training on augumented user 46629 2/50 current_auc = 0.5858823529411765
User 46629 AUC after training: 0.5764705882352941
User 46629 does not improve AUC. Reverting changes.
Training on augumented user 75702 3/50 current_auc = 0.5858823529411765
User 75702 AUC after training: 0.5858823529411765
User 75702 does not improve AUC. Reverting changes.
Training on augumented user 9066 4/50 current_auc = 0.5858823529411765
User 9066 AUC after training: 0.5811764705882354
User 9066 does not improve AUC. Reverting changes.
Training on augumented user 126516 5/50 current_auc = 0.5858823529411765
User 126516 AUC after training: 0.5858823529411765
User 126516 does not improve AUC. Reverting changes.
Training on augumented user 55226 6/50 current_auc = 0.5858823529411765
User 55226 AUC after training: 0.5811764705882353
User 55226 does not improve AUC. Reverting changes.
Training on augumented user 31290 7/50 current_auc = 0.5858823529411765
User 31290 AUC after training: 0.5858823529411765
User 31290 does not improve AUC. Reverting changes.
Training on augumented user 72810 8/50 current_auc = 0.5858823529411765
User 72810 AUC after training: 0.5858823529411765
User 72810 does not improve AUC. Reverting changes.
Training on augumented user 12939 9/50 current_auc = 0.5858823529411765
User 12939 AUC after training: 0.5858823529411765
User 12939 does not improve AUC. Reverting changes.
Training on augumented user 26697 10/50 current_auc = 0.5858823529411765
User 26697 AUC after training: 0.5858823529411765
User 26697 does not improve AUC. Reverting changes.
Training on augumented user 42879 11/50 current_auc = 0.5858823529411765
User 42879 AUC after training: 0.5835294117647059
User 42879 does not improve AUC. Reverting changes.
Training on augumented user 60957 12/50 current_auc = 0.5858823529411765
User 60957 AUC after training: 0.5858823529411765
User 60957 does not improve AUC. Reverting changes.
Training on augumented user 122051 13/50 current_auc = 0.5858823529411765
User 122051 AUC after training: 0.5858823529411765
User 122051 does not improve AUC. Reverting changes.
Training on augumented user 44498 14/50 current_auc = 0.5858823529411765
User 44498 AUC after training: 0.5835294117647059
User 44498 does not improve AUC. Reverting changes.
Training on augumented user 76789 15/50 current_auc = 0.5858823529411765
User 76789 AUC after training: 0.5835294117647059
User 76789 does not improve AUC. Reverting changes.
Training on augumented user 54422 16/50 current_auc = 0.5858823529411765
User 54422 AUC after training: 0.5858823529411765
User 54422 does not improve AUC. Reverting changes.
Training on augumented user 116555 17/50 current_auc = 0.5858823529411765
User 116555 AUC after training: 0.571764705882353
User 116555 does not improve AUC. Reverting changes.
Training on augumented user 16529 18/50 current_auc = 0.5858823529411765
User 16529 AUC after training: 0.5835294117647059
User 16529 does not improve AUC. Reverting changes.
Training on augumented user 90201 19/50 current_auc = 0.5858823529411765
User 90201 AUC after training: 0.588235294117647
User 90201 improves AUC. Keeping the model.
Training on augumented user 92372 20/50 current_auc = 0.588235294117647
User 92372 AUC after training: 0.5811764705882353
User 92372 does not improve AUC. Reverting changes.
Training on augumented user 74579 21/50 current_auc = 0.588235294117647
User 74579 AUC after training: 0.5835294117647059
User 74579 does not improve AUC. Reverting changes.
Training on augumented user 85746 22/50 current_auc = 0.588235294117647
User 85746 AUC after training: 0.5882352941176471
User 85746 improves AUC. Keeping the model.
Training on augumented user 42549 23/50 current_auc = 0.5882352941176471
User 42549 AUC after training: 0.5882352941176471
User 42549 does not improve AUC. Reverting changes.
Training on augumented user 119965 24/50 current_auc = 0.5882352941176471
User 119965 AUC after training: 0.5882352941176471
User 119965 does not improve AUC. Reverting changes.
Training on augumented user 16932 25/50 current_auc = 0.5882352941176471
User 16932 AUC after training: 0.5929411764705882
User 16932 improves AUC. Keeping the model.
Training on augumented user 39807 26/50 current_auc = 0.5929411764705882
User 39807 AUC after training: 0.5882352941176471
User 39807 does not improve AUC. Reverting changes.
Training on augumented user 132464 27/50 current_auc = 0.5929411764705882
User 132464 AUC after training: 0.5835294117647059
User 132464 does not improve AUC. Reverting changes.
Training on augumented user 19430 28/50 current_auc = 0.5929411764705882
User 19430 AUC after training: 0.5905882352941176
User 19430 does not improve AUC. Reverting changes.
Training on augumented user 75838 29/50 current_auc = 0.5929411764705882
User 75838 AUC after training: 0.5882352941176471
User 75838 does not improve AUC. Reverting changes.
Training on augumented user 52443 30/50 current_auc = 0.5929411764705882
User 52443 AUC after training: 0.5882352941176471
User 52443 does not improve AUC. Reverting changes.
Training on augumented user 71916 31/50 current_auc = 0.5929411764705882
User 71916 AUC after training: 0.5882352941176471
User 71916 does not improve AUC. Reverting changes.
Training on augumented user 14574 32/50 current_auc = 0.5929411764705882
User 14574 AUC after training: 0.5905882352941176
User 14574 does not improve AUC. Reverting changes.
Training on augumented user 95035 33/50 current_auc = 0.5929411764705882
User 95035 AUC after training: 0.5882352941176471
User 95035 does not improve AUC. Reverting changes.
Training on augumented user 36117 34/50 current_auc = 0.5929411764705882
User 36117 AUC after training: 0.5882352941176471
User 36117 does not improve AUC. Reverting changes.
Training on augumented user 46738 35/50 current_auc = 0.5929411764705882
User 46738 AUC after training: 0.5882352941176471
User 46738 does not improve AUC. Reverting changes.
Training on augumented user 17124 36/50 current_auc = 0.5929411764705882
User 17124 AUC after training: 0.5905882352941176
User 17124 does not improve AUC. Reverting changes.
Training on augumented user 13357 37/50 current_auc = 0.5929411764705882
User 13357 AUC after training: 0.5929411764705882
User 13357 does not improve AUC. Reverting changes.
Training on augumented user 105930 38/50 current_auc = 0.5929411764705882
User 105930 AUC after training: 0.5882352941176471
User 105930 does not improve AUC. Reverting changes.
Training on augumented user 75797 39/50 current_auc = 0.5929411764705882
User 75797 AUC after training: 0.5835294117647059
User 75797 does not improve AUC. Reverting changes.
Training on augumented user 117949 40/50 current_auc = 0.5929411764705882
User 117949 AUC after training: 0.5882352941176471
User 117949 does not improve AUC. Reverting changes.
Training on augumented user 65224 41/50 current_auc = 0.5929411764705882
User 65224 AUC after training: 0.5858823529411765
User 65224 does not improve AUC. Reverting changes.
Training on augumented user 81501 42/50 current_auc = 0.5929411764705882
User 81501 AUC after training: 0.5882352941176471
User 81501 does not improve AUC. Reverting changes.
Training on augumented user 59759 43/50 current_auc = 0.5929411764705882
User 59759 AUC after training: 0.5858823529411765
User 59759 does not improve AUC. Reverting changes.
Training on augumented user 302 44/50 current_auc = 0.5929411764705882
User 302 AUC after training: 0.5882352941176471
User 302 does not improve AUC. Reverting changes.
Training on augumented user 66604 45/50 current_auc = 0.5929411764705882
User 66604 AUC after training: 0.5882352941176471
User 66604 does not improve AUC. Reverting changes.
Training on augumented user 47046 46/50 current_auc = 0.5929411764705882
User 47046 AUC after training: 0.5929411764705882
User 47046 does not improve AUC. Reverting changes.
Training on augumented user 94307 47/50 current_auc = 0.5929411764705882
User 94307 AUC after training: 0.5905882352941176
User 94307 does not improve AUC. Reverting changes.
Training on augumented user 28923 48/50 current_auc = 0.5929411764705882
User 28923 AUC after training: 0.5882352941176471
User 28923 does not improve AUC. Reverting changes.
Training on augumented user 126757 49/50 current_auc = 0.5929411764705882
User 126757 AUC after training: 0.5905882352941176
User 126757 does not improve AUC. Reverting changes.
[2024-12-02 20:03:36.263641] start test user 34124 259/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:36.742765] start test user 34124 259/568 recall augumented users by random, augumented_users = [117013, 84696, 102047, 87840, 68721, 44314, 82761, 94301, 97908, 87222, 105937, 110218, 81070, 9119, 134163, 39490, 74653, 97798, 98062, 125521, 96801, 36786, 123489, 41234, 93850, 116239, 96699, 75910, 57634, 36984, 6739, 121816, 19053, 92347, 57706, 111590, 28542, 85419, 62477, 109674, 115040, 64812, 79310, 132419, 60211, 81228, 34738, 12433, 130023, 73342]
[2024-12-02 20:03:36.759627] user = 34124 Cloud 259/568
[2024-12-02 20:03:36.774525] user = 34124 Local 259/568
[2024-12-02 20:03:37.051432] user = 34124 Local+ 259/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:39.407008] user = 34124 MPDA- 259/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5733333333333333
Training on augumented user 117013 0/50 current_auc = 0.5733333333333333
User 117013 AUC after training: 0.5718518518518518
User 117013 does not improve AUC. Reverting changes.
Training on augumented user 84696 1/50 current_auc = 0.5733333333333333
User 84696 AUC after training: 0.5718518518518518
User 84696 does not improve AUC. Reverting changes.
Training on augumented user 102047 2/50 current_auc = 0.5733333333333333
User 102047 AUC after training: 0.5740740740740741
User 102047 improves AUC. Keeping the model.
Training on augumented user 87840 3/50 current_auc = 0.5740740740740741
User 87840 AUC after training: 0.5733333333333334
User 87840 does not improve AUC. Reverting changes.
Training on augumented user 68721 4/50 current_auc = 0.5740740740740741
User 68721 AUC after training: 0.5748148148148148
User 68721 improves AUC. Keeping the model.
Training on augumented user 44314 5/50 current_auc = 0.5748148148148148
User 44314 AUC after training: 0.5740740740740741
User 44314 does not improve AUC. Reverting changes.
Training on augumented user 82761 6/50 current_auc = 0.5748148148148148
User 82761 AUC after training: 0.5748148148148148
User 82761 does not improve AUC. Reverting changes.
Training on augumented user 94301 7/50 current_auc = 0.5748148148148148
User 94301 AUC after training: 0.5733333333333333
User 94301 does not improve AUC. Reverting changes.
Training on augumented user 97908 8/50 current_auc = 0.5748148148148148
User 97908 AUC after training: 0.5748148148148148
User 97908 does not improve AUC. Reverting changes.
Training on augumented user 87222 9/50 current_auc = 0.5748148148148148
User 87222 AUC after training: 0.5740740740740742
User 87222 does not improve AUC. Reverting changes.
Training on augumented user 105937 10/50 current_auc = 0.5748148148148148
User 105937 AUC after training: 0.5748148148148148
User 105937 does not improve AUC. Reverting changes.
Training on augumented user 110218 11/50 current_auc = 0.5748148148148148
User 110218 AUC after training: 0.5755555555555555
User 110218 improves AUC. Keeping the model.
Training on augumented user 81070 12/50 current_auc = 0.5755555555555555
User 81070 AUC after training: 0.5762962962962963
User 81070 improves AUC. Keeping the model.
Training on augumented user 9119 13/50 current_auc = 0.5762962962962963
User 9119 AUC after training: 0.5748148148148149
User 9119 does not improve AUC. Reverting changes.
Training on augumented user 134163 14/50 current_auc = 0.5762962962962963
User 134163 AUC after training: 0.5725925925925925
User 134163 does not improve AUC. Reverting changes.
Training on augumented user 39490 15/50 current_auc = 0.5762962962962963
User 39490 AUC after training: 0.5755555555555555
User 39490 does not improve AUC. Reverting changes.
Training on augumented user 74653 16/50 current_auc = 0.5762962962962963
User 74653 AUC after training: 0.5755555555555555
User 74653 does not improve AUC. Reverting changes.
Training on augumented user 97798 17/50 current_auc = 0.5762962962962963
User 97798 AUC after training: 0.5762962962962963
User 97798 does not improve AUC. Reverting changes.
Training on augumented user 98062 18/50 current_auc = 0.5762962962962963
User 98062 AUC after training: 0.5755555555555556
User 98062 does not improve AUC. Reverting changes.
Training on augumented user 125521 19/50 current_auc = 0.5762962962962963
User 125521 AUC after training: 0.5762962962962963
User 125521 does not improve AUC. Reverting changes.
Training on augumented user 96801 20/50 current_auc = 0.5762962962962963
User 96801 AUC after training: 0.5748148148148148
User 96801 does not improve AUC. Reverting changes.
Training on augumented user 36786 21/50 current_auc = 0.5762962962962963
User 36786 AUC after training: 0.5755555555555556
User 36786 does not improve AUC. Reverting changes.
Training on augumented user 123489 22/50 current_auc = 0.5762962962962963
User 123489 AUC after training: 0.5762962962962963
User 123489 does not improve AUC. Reverting changes.
Training on augumented user 41234 23/50 current_auc = 0.5762962962962963
User 41234 AUC after training: 0.5755555555555555
User 41234 does not improve AUC. Reverting changes.
Training on augumented user 93850 24/50 current_auc = 0.5762962962962963
User 93850 AUC after training: 0.5762962962962963
User 93850 does not improve AUC. Reverting changes.
Training on augumented user 116239 25/50 current_auc = 0.5762962962962963
User 116239 AUC after training: 0.5762962962962963
User 116239 does not improve AUC. Reverting changes.
Training on augumented user 96699 26/50 current_auc = 0.5762962962962963
User 96699 AUC after training: 0.5762962962962963
User 96699 does not improve AUC. Reverting changes.
Training on augumented user 75910 27/50 current_auc = 0.5762962962962963
User 75910 AUC after training: 0.5748148148148148
User 75910 does not improve AUC. Reverting changes.
Training on augumented user 57634 28/50 current_auc = 0.5762962962962963
User 57634 AUC after training: 0.5762962962962963
User 57634 does not improve AUC. Reverting changes.
Training on augumented user 36984 29/50 current_auc = 0.5762962962962963
User 36984 AUC after training: 0.5762962962962963
User 36984 does not improve AUC. Reverting changes.
Training on augumented user 6739 30/50 current_auc = 0.5762962962962963
User 6739 AUC after training: 0.5755555555555556
User 6739 does not improve AUC. Reverting changes.
Training on augumented user 121816 31/50 current_auc = 0.5762962962962963
User 121816 AUC after training: 0.5762962962962963
User 121816 does not improve AUC. Reverting changes.
Training on augumented user 19053 32/50 current_auc = 0.5762962962962963
User 19053 AUC after training: 0.5740740740740741
User 19053 does not improve AUC. Reverting changes.
Training on augumented user 92347 33/50 current_auc = 0.5762962962962963
User 92347 AUC after training: 0.5748148148148149
User 92347 does not improve AUC. Reverting changes.
Training on augumented user 57706 34/50 current_auc = 0.5762962962962963
User 57706 AUC after training: 0.5748148148148148
User 57706 does not improve AUC. Reverting changes.
Training on augumented user 111590 35/50 current_auc = 0.5762962962962963
User 111590 AUC after training: 0.5755555555555555
User 111590 does not improve AUC. Reverting changes.
Training on augumented user 28542 36/50 current_auc = 0.5762962962962963
User 28542 AUC after training: 0.5755555555555555
User 28542 does not improve AUC. Reverting changes.
Training on augumented user 85419 37/50 current_auc = 0.5762962962962963
User 85419 AUC after training: 0.5748148148148149
User 85419 does not improve AUC. Reverting changes.
Training on augumented user 62477 38/50 current_auc = 0.5762962962962963
User 62477 AUC after training: 0.5748148148148148
User 62477 does not improve AUC. Reverting changes.
Training on augumented user 109674 39/50 current_auc = 0.5762962962962963
User 109674 AUC after training: 0.5755555555555555
User 109674 does not improve AUC. Reverting changes.
Training on augumented user 115040 40/50 current_auc = 0.5762962962962963
User 115040 AUC after training: 0.5755555555555555
User 115040 does not improve AUC. Reverting changes.
Training on augumented user 64812 41/50 current_auc = 0.5762962962962963
User 64812 AUC after training: 0.5755555555555555
User 64812 does not improve AUC. Reverting changes.
Training on augumented user 79310 42/50 current_auc = 0.5762962962962963
User 79310 AUC after training: 0.5748148148148148
User 79310 does not improve AUC. Reverting changes.
Training on augumented user 132419 43/50 current_auc = 0.5762962962962963
User 132419 AUC after training: 0.5755555555555556
User 132419 does not improve AUC. Reverting changes.
Training on augumented user 60211 44/50 current_auc = 0.5762962962962963
User 60211 AUC after training: 0.5740740740740741
User 60211 does not improve AUC. Reverting changes.
Training on augumented user 81228 45/50 current_auc = 0.5762962962962963
User 81228 AUC after training: 0.5762962962962963
User 81228 does not improve AUC. Reverting changes.
Training on augumented user 34738 46/50 current_auc = 0.5762962962962963
User 34738 AUC after training: 0.5748148148148148
User 34738 does not improve AUC. Reverting changes.
Training on augumented user 12433 47/50 current_auc = 0.5762962962962963
User 12433 AUC after training: 0.5762962962962963
User 12433 does not improve AUC. Reverting changes.
Training on augumented user 130023 48/50 current_auc = 0.5762962962962963
User 130023 AUC after training: 0.577037037037037
User 130023 improves AUC. Keeping the model.
Training on augumented user 73342 49/50 current_auc = 0.577037037037037
User 73342 AUC after training: 0.5748148148148148
User 73342 does not improve AUC. Reverting changes.
[2024-12-02 20:04:06.277643] start test user 34127 260/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:06.736412] start test user 34127 260/568 recall augumented users by random, augumented_users = [73724, 77735, 53424, 52960, 102150, 104619, 131912, 25921, 1280, 97312, 118268, 12237, 97779, 93582, 64338, 123902, 75585, 77912, 5913, 101438, 77498, 69412, 97038, 36550, 28469, 94171, 82873, 1250, 82576, 97793, 6330, 134016, 127683, 121341, 65795, 20921, 118739, 1895, 61294, 2303, 120367, 27947, 87429, 34584, 88794, 97114, 53017, 2692, 103062, 18941]
[2024-12-02 20:04:06.758202] user = 34127 Cloud 260/568
[2024-12-02 20:04:06.776683] user = 34127 Local 260/568
[2024-12-02 20:04:06.892944] user = 34127 Local+ 260/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:09.298635] user = 34127 MPDA- 260/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7533765032377427
Training on augumented user 73724 0/50 current_auc = 0.7533765032377427
User 73724 AUC after training: 0.7530064754856615
User 73724 does not improve AUC. Reverting changes.
Training on augumented user 77735 1/50 current_auc = 0.7533765032377427
User 77735 AUC after training: 0.7533765032377427
User 77735 does not improve AUC. Reverting changes.
Training on augumented user 53424 2/50 current_auc = 0.7533765032377427
User 53424 AUC after training: 0.75263644773358
User 53424 does not improve AUC. Reverting changes.
Training on augumented user 52960 3/50 current_auc = 0.7533765032377427
User 52960 AUC after training: 0.7543015726179464
User 52960 improves AUC. Keeping the model.
Training on augumented user 102150 4/50 current_auc = 0.7543015726179464
User 102150 AUC after training: 0.7530064754856615
User 102150 does not improve AUC. Reverting changes.
Training on augumented user 104619 5/50 current_auc = 0.7543015726179464
User 104619 AUC after training: 0.7537465309898242
User 104619 does not improve AUC. Reverting changes.
Training on augumented user 131912 6/50 current_auc = 0.7543015726179464
User 131912 AUC after training: 0.7550416281221092
User 131912 improves AUC. Keeping the model.
Training on augumented user 25921 7/50 current_auc = 0.7550416281221092
User 25921 AUC after training: 0.7543015726179464
User 25921 does not improve AUC. Reverting changes.
Training on augumented user 1280 8/50 current_auc = 0.7550416281221092
User 1280 AUC after training: 0.7539315448658649
User 1280 does not improve AUC. Reverting changes.
Training on augumented user 97312 9/50 current_auc = 0.7550416281221092
User 97312 AUC after training: 0.7539315448658649
User 97312 does not improve AUC. Reverting changes.
Training on augumented user 118268 10/50 current_auc = 0.7550416281221092
User 118268 AUC after training: 0.7541165587419055
User 118268 does not improve AUC. Reverting changes.
Training on augumented user 12237 11/50 current_auc = 0.7550416281221092
User 12237 AUC after training: 0.754486586493987
User 12237 does not improve AUC. Reverting changes.
Training on augumented user 97779 12/50 current_auc = 0.7550416281221092
User 97779 AUC after training: 0.7539315448658649
User 97779 does not improve AUC. Reverting changes.
Training on augumented user 93582 13/50 current_auc = 0.7550416281221092
User 93582 AUC after training: 0.754486586493987
User 93582 does not improve AUC. Reverting changes.
Training on augumented user 64338 14/50 current_auc = 0.7550416281221092
User 64338 AUC after training: 0.753191489361702
User 64338 does not improve AUC. Reverting changes.
Training on augumented user 123902 15/50 current_auc = 0.7550416281221092
User 123902 AUC after training: 0.754486586493987
User 123902 does not improve AUC. Reverting changes.
Training on augumented user 75585 16/50 current_auc = 0.7550416281221092
User 75585 AUC after training: 0.754486586493987
User 75585 does not improve AUC. Reverting changes.
Training on augumented user 77912 17/50 current_auc = 0.7550416281221092
User 77912 AUC after training: 0.7546716003700277
User 77912 does not improve AUC. Reverting changes.
Training on augumented user 5913 18/50 current_auc = 0.7550416281221092
User 5913 AUC after training: 0.7543015726179464
User 5913 does not improve AUC. Reverting changes.
Training on augumented user 101438 19/50 current_auc = 0.7550416281221092
User 101438 AUC after training: 0.7528214616096207
User 101438 does not improve AUC. Reverting changes.
Training on augumented user 77498 20/50 current_auc = 0.7550416281221092
User 77498 AUC after training: 0.754486586493987
User 77498 does not improve AUC. Reverting changes.
Training on augumented user 69412 21/50 current_auc = 0.7550416281221092
User 69412 AUC after training: 0.7539315448658649
User 69412 does not improve AUC. Reverting changes.
Training on augumented user 97038 22/50 current_auc = 0.7550416281221092
User 97038 AUC after training: 0.754486586493987
User 97038 does not improve AUC. Reverting changes.
Training on augumented user 36550 23/50 current_auc = 0.7550416281221092
User 36550 AUC after training: 0.7535615171137836
User 36550 does not improve AUC. Reverting changes.
Training on augumented user 28469 24/50 current_auc = 0.7550416281221092
User 28469 AUC after training: 0.7546716003700277
User 28469 does not improve AUC. Reverting changes.
Training on augumented user 94171 25/50 current_auc = 0.7550416281221092
User 94171 AUC after training: 0.7548566142460685
User 94171 does not improve AUC. Reverting changes.
Training on augumented user 82873 26/50 current_auc = 0.7550416281221092
User 82873 AUC after training: 0.7545790934320074
User 82873 does not improve AUC. Reverting changes.
Training on augumented user 1250 27/50 current_auc = 0.7550416281221092
User 1250 AUC after training: 0.7541165587419056
User 1250 does not improve AUC. Reverting changes.
Training on augumented user 82576 28/50 current_auc = 0.7550416281221092
User 82576 AUC after training: 0.754486586493987
User 82576 does not improve AUC. Reverting changes.
Training on augumented user 97793 29/50 current_auc = 0.7550416281221092
User 97793 AUC after training: 0.7548566142460684
User 97793 does not improve AUC. Reverting changes.
Training on augumented user 6330 30/50 current_auc = 0.7550416281221092
User 6330 AUC after training: 0.7546716003700278
User 6330 does not improve AUC. Reverting changes.
Training on augumented user 134016 31/50 current_auc = 0.7550416281221092
User 134016 AUC after training: 0.7546716003700278
User 134016 does not improve AUC. Reverting changes.
Training on augumented user 127683 32/50 current_auc = 0.7550416281221092
User 127683 AUC after training: 0.7517113783533765
User 127683 does not improve AUC. Reverting changes.
Training on augumented user 121341 33/50 current_auc = 0.7550416281221092
User 121341 AUC after training: 0.7524514338575393
User 121341 does not improve AUC. Reverting changes.
Training on augumented user 65795 34/50 current_auc = 0.7550416281221092
User 65795 AUC after training: 0.75263644773358
User 65795 does not improve AUC. Reverting changes.
Training on augumented user 20921 35/50 current_auc = 0.7550416281221092
User 20921 AUC after training: 0.7528214616096207
User 20921 does not improve AUC. Reverting changes.
Training on augumented user 118739 36/50 current_auc = 0.7550416281221092
User 118739 AUC after training: 0.7537465309898242
User 118739 does not improve AUC. Reverting changes.
Training on augumented user 1895 37/50 current_auc = 0.7550416281221092
User 1895 AUC after training: 0.7548566142460685
User 1895 does not improve AUC. Reverting changes.
Training on augumented user 61294 38/50 current_auc = 0.7550416281221092
User 61294 AUC after training: 0.7541165587419056
User 61294 does not improve AUC. Reverting changes.
Training on augumented user 2303 39/50 current_auc = 0.7550416281221092
User 2303 AUC after training: 0.7539315448658649
User 2303 does not improve AUC. Reverting changes.
Training on augumented user 120367 40/50 current_auc = 0.7550416281221092
User 120367 AUC after training: 0.754486586493987
User 120367 does not improve AUC. Reverting changes.
Training on augumented user 27947 41/50 current_auc = 0.7550416281221092
User 27947 AUC after training: 0.7543015726179463
User 27947 does not improve AUC. Reverting changes.
Training on augumented user 87429 42/50 current_auc = 0.7550416281221092
User 87429 AUC after training: 0.7531914893617021
User 87429 does not improve AUC. Reverting changes.
Training on augumented user 34584 43/50 current_auc = 0.7550416281221092
User 34584 AUC after training: 0.7511563367252544
User 34584 does not improve AUC. Reverting changes.
Training on augumented user 88794 44/50 current_auc = 0.7550416281221092
User 88794 AUC after training: 0.7539315448658649
User 88794 does not improve AUC. Reverting changes.
Training on augumented user 97114 45/50 current_auc = 0.7550416281221092
User 97114 AUC after training: 0.7537465309898242
User 97114 does not improve AUC. Reverting changes.
Training on augumented user 53017 46/50 current_auc = 0.7550416281221092
User 53017 AUC after training: 0.754486586493987
User 53017 does not improve AUC. Reverting changes.
Training on augumented user 2692 47/50 current_auc = 0.7550416281221092
User 2692 AUC after training: 0.7539315448658649
User 2692 does not improve AUC. Reverting changes.
Training on augumented user 103062 48/50 current_auc = 0.7550416281221092
User 103062 AUC after training: 0.7543015726179464
User 103062 does not improve AUC. Reverting changes.
Training on augumented user 18941 49/50 current_auc = 0.7550416281221092
User 18941 AUC after training: 0.7552266419981498
User 18941 improves AUC. Keeping the model.
[2024-12-02 20:04:37.339271] start test user 34143 261/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:37.874342] start test user 34143 261/568 recall augumented users by random, augumented_users = [4010, 65089, 116392, 1935, 122113, 40506, 121685, 21095, 59469, 135529, 112194, 90276, 51471, 12695, 2400, 3783, 135756, 135362, 55282, 1227, 50492, 43053, 109177, 98396, 53419, 78405, 50946, 178, 99718, 99319, 27546, 21760, 47865, 111110, 108569, 79493, 122806, 89649, 40661, 59628, 95851, 37931, 66075, 81660, 101335, 49781, 29216, 77848, 129046, 96226]
[2024-12-02 20:04:37.890498] user = 34143 Cloud 261/568
[2024-12-02 20:04:37.904858] user = 34143 Local 261/568
[2024-12-02 20:04:37.991143] user = 34143 Local+ 261/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:40.199381] user = 34143 MPDA- 261/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5201192250372578
Training on augumented user 4010 0/50 current_auc = 0.5201192250372578
User 4010 AUC after training: 0.5178837555886737
User 4010 does not improve AUC. Reverting changes.
Training on augumented user 65089 1/50 current_auc = 0.5201192250372578
User 65089 AUC after training: 0.518628912071535
User 65089 does not improve AUC. Reverting changes.
Training on augumented user 116392 2/50 current_auc = 0.5201192250372578
User 116392 AUC after training: 0.518628912071535
User 116392 does not improve AUC. Reverting changes.
Training on augumented user 1935 3/50 current_auc = 0.5201192250372578
User 1935 AUC after training: 0.5171385991058122
User 1935 does not improve AUC. Reverting changes.
Training on augumented user 122113 4/50 current_auc = 0.5201192250372578
User 122113 AUC after training: 0.518628912071535
User 122113 does not improve AUC. Reverting changes.
Training on augumented user 40506 5/50 current_auc = 0.5201192250372578
User 40506 AUC after training: 0.5216095380029806
User 40506 improves AUC. Keeping the model.
Training on augumented user 121685 6/50 current_auc = 0.5216095380029806
User 121685 AUC after training: 0.5208643815201193
User 121685 does not improve AUC. Reverting changes.
Training on augumented user 21095 7/50 current_auc = 0.5216095380029806
User 21095 AUC after training: 0.5201192250372578
User 21095 does not improve AUC. Reverting changes.
Training on augumented user 59469 8/50 current_auc = 0.5216095380029806
User 59469 AUC after training: 0.5201192250372578
User 59469 does not improve AUC. Reverting changes.
Training on augumented user 135529 9/50 current_auc = 0.5216095380029806
User 135529 AUC after training: 0.5193740685543965
User 135529 does not improve AUC. Reverting changes.
Training on augumented user 112194 10/50 current_auc = 0.5216095380029806
User 112194 AUC after training: 0.5216095380029806
User 112194 does not improve AUC. Reverting changes.
Training on augumented user 90276 11/50 current_auc = 0.5216095380029806
User 90276 AUC after training: 0.5201192250372579
User 90276 does not improve AUC. Reverting changes.
Training on augumented user 51471 12/50 current_auc = 0.5216095380029806
User 51471 AUC after training: 0.5201192250372578
User 51471 does not improve AUC. Reverting changes.
Training on augumented user 12695 13/50 current_auc = 0.5216095380029806
User 12695 AUC after training: 0.5193740685543964
User 12695 does not improve AUC. Reverting changes.
Training on augumented user 2400 14/50 current_auc = 0.5216095380029806
User 2400 AUC after training: 0.5208643815201193
User 2400 does not improve AUC. Reverting changes.
Training on augumented user 3783 15/50 current_auc = 0.5216095380029806
User 3783 AUC after training: 0.5201192250372578
User 3783 does not improve AUC. Reverting changes.
Training on augumented user 135756 16/50 current_auc = 0.5216095380029806
User 135756 AUC after training: 0.5201192250372578
User 135756 does not improve AUC. Reverting changes.
Training on augumented user 135362 17/50 current_auc = 0.5216095380029806
User 135362 AUC after training: 0.5216095380029807
User 135362 improves AUC. Keeping the model.
Training on augumented user 55282 18/50 current_auc = 0.5216095380029807
User 55282 AUC after training: 0.5208643815201193
User 55282 does not improve AUC. Reverting changes.
Training on augumented user 1227 19/50 current_auc = 0.5216095380029807
User 1227 AUC after training: 0.5193740685543965
User 1227 does not improve AUC. Reverting changes.
Training on augumented user 50492 20/50 current_auc = 0.5216095380029807
User 50492 AUC after training: 0.5208643815201193
User 50492 does not improve AUC. Reverting changes.
Training on augumented user 43053 21/50 current_auc = 0.5216095380029807
User 43053 AUC after training: 0.5208643815201193
User 43053 does not improve AUC. Reverting changes.
Training on augumented user 109177 22/50 current_auc = 0.5216095380029807
User 109177 AUC after training: 0.5208643815201193
User 109177 does not improve AUC. Reverting changes.
Training on augumented user 98396 23/50 current_auc = 0.5216095380029807
User 98396 AUC after training: 0.5208643815201193
User 98396 does not improve AUC. Reverting changes.
Training on augumented user 53419 24/50 current_auc = 0.5216095380029807
User 53419 AUC after training: 0.5201192250372579
User 53419 does not improve AUC. Reverting changes.
Training on augumented user 78405 25/50 current_auc = 0.5216095380029807
User 78405 AUC after training: 0.5216095380029807
User 78405 does not improve AUC. Reverting changes.
Training on augumented user 50946 26/50 current_auc = 0.5216095380029807
User 50946 AUC after training: 0.5216095380029806
User 50946 does not improve AUC. Reverting changes.
Training on augumented user 178 27/50 current_auc = 0.5216095380029807
User 178 AUC after training: 0.5208643815201193
User 178 does not improve AUC. Reverting changes.
Training on augumented user 99718 28/50 current_auc = 0.5216095380029807
User 99718 AUC after training: 0.5216095380029807
User 99718 does not improve AUC. Reverting changes.
Training on augumented user 99319 29/50 current_auc = 0.5216095380029807
User 99319 AUC after training: 0.5193740685543965
User 99319 does not improve AUC. Reverting changes.
Training on augumented user 27546 30/50 current_auc = 0.5216095380029807
User 27546 AUC after training: 0.5178837555886736
User 27546 does not improve AUC. Reverting changes.
Training on augumented user 21760 31/50 current_auc = 0.5216095380029807
User 21760 AUC after training: 0.518628912071535
User 21760 does not improve AUC. Reverting changes.
Training on augumented user 47865 32/50 current_auc = 0.5216095380029807
User 47865 AUC after training: 0.5163934426229508
User 47865 does not improve AUC. Reverting changes.
Training on augumented user 111110 33/50 current_auc = 0.5216095380029807
User 111110 AUC after training: 0.5216095380029807
User 111110 does not improve AUC. Reverting changes.
Training on augumented user 108569 34/50 current_auc = 0.5216095380029807
User 108569 AUC after training: 0.5201192250372578
User 108569 does not improve AUC. Reverting changes.
Training on augumented user 79493 35/50 current_auc = 0.5216095380029807
User 79493 AUC after training: 0.5208643815201193
User 79493 does not improve AUC. Reverting changes.
Training on augumented user 122806 36/50 current_auc = 0.5216095380029807
User 122806 AUC after training: 0.5208643815201193
User 122806 does not improve AUC. Reverting changes.
Training on augumented user 89649 37/50 current_auc = 0.5216095380029807
User 89649 AUC after training: 0.5193740685543964
User 89649 does not improve AUC. Reverting changes.
Training on augumented user 40661 38/50 current_auc = 0.5216095380029807
User 40661 AUC after training: 0.5216095380029806
User 40661 does not improve AUC. Reverting changes.
Training on augumented user 59628 39/50 current_auc = 0.5216095380029807
User 59628 AUC after training: 0.5201192250372578
User 59628 does not improve AUC. Reverting changes.
Training on augumented user 95851 40/50 current_auc = 0.5216095380029807
User 95851 AUC after training: 0.5201192250372579
User 95851 does not improve AUC. Reverting changes.
Training on augumented user 37931 41/50 current_auc = 0.5216095380029807
User 37931 AUC after training: 0.518628912071535
User 37931 does not improve AUC. Reverting changes.
Training on augumented user 66075 42/50 current_auc = 0.5216095380029807
User 66075 AUC after training: 0.5201192250372579
User 66075 does not improve AUC. Reverting changes.
Training on augumented user 81660 43/50 current_auc = 0.5216095380029807
User 81660 AUC after training: 0.518628912071535
User 81660 does not improve AUC. Reverting changes.
Training on augumented user 101335 44/50 current_auc = 0.5216095380029807
User 101335 AUC after training: 0.5193740685543964
User 101335 does not improve AUC. Reverting changes.
Training on augumented user 49781 45/50 current_auc = 0.5216095380029807
User 49781 AUC after training: 0.5193740685543965
User 49781 does not improve AUC. Reverting changes.
Training on augumented user 29216 46/50 current_auc = 0.5216095380029807
User 29216 AUC after training: 0.5149031296572281
User 29216 does not improve AUC. Reverting changes.
Training on augumented user 77848 47/50 current_auc = 0.5216095380029807
User 77848 AUC after training: 0.5216095380029807
User 77848 does not improve AUC. Reverting changes.
Training on augumented user 129046 48/50 current_auc = 0.5216095380029807
User 129046 AUC after training: 0.5216095380029807
User 129046 does not improve AUC. Reverting changes.
Training on augumented user 96226 49/50 current_auc = 0.5216095380029807
User 96226 AUC after training: 0.5216095380029807
User 96226 does not improve AUC. Reverting changes.
[2024-12-02 20:05:12.501306] start test user 34156 262/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:13.071244] start test user 34156 262/568 recall augumented users by random, augumented_users = [51514, 76939, 105373, 126900, 74019, 83645, 84910, 107617, 2164, 64111, 6124, 135564, 131403, 44076, 57247, 49694, 107186, 55549, 64805, 84970, 126517, 57491, 15108, 116723, 37773, 63721, 12253, 67565, 83059, 56164, 21215, 105618, 15513, 110821, 36942, 69133, 23251, 123551, 85641, 9351, 28311, 136368, 125659, 94282, 93473, 587, 64899, 116449, 8533, 61902]
[2024-12-02 20:05:13.085108] user = 34156 Cloud 262/568
[2024-12-02 20:05:13.097227] user = 34156 Local 262/568
[2024-12-02 20:05:13.172466] user = 34156 Local+ 262/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:16.317212] user = 34156 MPDA- 262/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5096434833430742
Training on augumented user 51514 0/50 current_auc = 0.5096434833430742
User 51514 AUC after training: 0.510812390414962
User 51514 improves AUC. Keeping the model.
Training on augumented user 76939 1/50 current_auc = 0.510812390414962
User 76939 AUC after training: 0.5113968439509059
User 76939 improves AUC. Keeping the model.
Training on augumented user 105373 2/50 current_auc = 0.5113968439509059
User 105373 AUC after training: 0.5090590298071304
User 105373 does not improve AUC. Reverting changes.
Training on augumented user 126900 3/50 current_auc = 0.5113968439509059
User 126900 AUC after training: 0.5125657510227937
User 126900 improves AUC. Keeping the model.
Training on augumented user 74019 4/50 current_auc = 0.5125657510227937
User 74019 AUC after training: 0.510812390414962
User 74019 does not improve AUC. Reverting changes.
Training on augumented user 83645 5/50 current_auc = 0.5125657510227937
User 83645 AUC after training: 0.5119812974868498
User 83645 does not improve AUC. Reverting changes.
Training on augumented user 84910 6/50 current_auc = 0.5125657510227937
User 84910 AUC after training: 0.5131502045587376
User 84910 improves AUC. Keeping the model.
Training on augumented user 107617 7/50 current_auc = 0.5131502045587376
User 107617 AUC after training: 0.5137346580946816
User 107617 improves AUC. Keeping the model.
Training on augumented user 2164 8/50 current_auc = 0.5137346580946816
User 2164 AUC after training: 0.511396843950906
User 2164 does not improve AUC. Reverting changes.
Training on augumented user 64111 9/50 current_auc = 0.5137346580946816
User 64111 AUC after training: 0.5073056691992986
User 64111 does not improve AUC. Reverting changes.
Training on augumented user 6124 10/50 current_auc = 0.5137346580946816
User 6124 AUC after training: 0.5131502045587375
User 6124 does not improve AUC. Reverting changes.
Training on augumented user 135564 11/50 current_auc = 0.5137346580946816
User 135564 AUC after training: 0.5149035651665693
User 135564 improves AUC. Keeping the model.
Training on augumented user 131403 12/50 current_auc = 0.5149035651665693
User 131403 AUC after training: 0.5125657510227937
User 131403 does not improve AUC. Reverting changes.
Training on augumented user 44076 13/50 current_auc = 0.5149035651665693
User 44076 AUC after training: 0.5143191116306254
User 44076 does not improve AUC. Reverting changes.
Training on augumented user 57247 14/50 current_auc = 0.5149035651665693
User 57247 AUC after training: 0.5137346580946816
User 57247 does not improve AUC. Reverting changes.
Training on augumented user 49694 15/50 current_auc = 0.5149035651665693
User 49694 AUC after training: 0.5154880187025132
User 49694 improves AUC. Keeping the model.
Training on augumented user 107186 16/50 current_auc = 0.5154880187025132
User 107186 AUC after training: 0.5125657510227937
User 107186 does not improve AUC. Reverting changes.
Training on augumented user 55549 17/50 current_auc = 0.5154880187025132
User 55549 AUC after training: 0.5119812974868498
User 55549 does not improve AUC. Reverting changes.
Training on augumented user 64805 18/50 current_auc = 0.5154880187025132
User 64805 AUC after training: 0.5137346580946816
User 64805 does not improve AUC. Reverting changes.
Training on augumented user 84970 19/50 current_auc = 0.5154880187025132
User 84970 AUC after training: 0.5160724722384571
User 84970 improves AUC. Keeping the model.
Training on augumented user 126517 20/50 current_auc = 0.5160724722384571
User 126517 AUC after training: 0.5154880187025132
User 126517 does not improve AUC. Reverting changes.
Training on augumented user 57491 21/50 current_auc = 0.5160724722384571
User 57491 AUC after training: 0.5149035651665692
User 57491 does not improve AUC. Reverting changes.
Training on augumented user 15108 22/50 current_auc = 0.5160724722384571
User 15108 AUC after training: 0.5113968439509059
User 15108 does not improve AUC. Reverting changes.
Training on augumented user 116723 23/50 current_auc = 0.5160724722384571
User 116723 AUC after training: 0.5143191116306254
User 116723 does not improve AUC. Reverting changes.
Training on augumented user 37773 24/50 current_auc = 0.5160724722384571
User 37773 AUC after training: 0.5149035651665692
User 37773 does not improve AUC. Reverting changes.
Training on augumented user 63721 25/50 current_auc = 0.5160724722384571
User 63721 AUC after training: 0.5154880187025132
User 63721 does not improve AUC. Reverting changes.
Training on augumented user 12253 26/50 current_auc = 0.5160724722384571
User 12253 AUC after training: 0.5125657510227937
User 12253 does not improve AUC. Reverting changes.
Training on augumented user 67565 27/50 current_auc = 0.5160724722384571
User 67565 AUC after training: 0.5149035651665692
User 67565 does not improve AUC. Reverting changes.
Training on augumented user 83059 28/50 current_auc = 0.5160724722384571
User 83059 AUC after training: 0.5160724722384571
User 83059 does not improve AUC. Reverting changes.
Training on augumented user 56164 29/50 current_auc = 0.5160724722384571
User 56164 AUC after training: 0.5149035651665693
User 56164 does not improve AUC. Reverting changes.
Training on augumented user 21215 30/50 current_auc = 0.5160724722384571
User 21215 AUC after training: 0.5119812974868498
User 21215 does not improve AUC. Reverting changes.
Training on augumented user 105618 31/50 current_auc = 0.5160724722384571
User 105618 AUC after training: 0.5131502045587376
User 105618 does not improve AUC. Reverting changes.
Training on augumented user 15513 32/50 current_auc = 0.5160724722384571
User 15513 AUC after training: 0.5119812974868498
User 15513 does not improve AUC. Reverting changes.
Training on augumented user 110821 33/50 current_auc = 0.5160724722384571
User 110821 AUC after training: 0.5149035651665693
User 110821 does not improve AUC. Reverting changes.
Training on augumented user 36942 34/50 current_auc = 0.5160724722384571
User 36942 AUC after training: 0.5143191116306254
User 36942 does not improve AUC. Reverting changes.
Training on augumented user 69133 35/50 current_auc = 0.5160724722384571
User 69133 AUC after training: 0.5137346580946816
User 69133 does not improve AUC. Reverting changes.
Training on augumented user 23251 36/50 current_auc = 0.5160724722384571
User 23251 AUC after training: 0.510812390414962
User 23251 does not improve AUC. Reverting changes.
Training on augumented user 123551 37/50 current_auc = 0.5160724722384571
User 123551 AUC after training: 0.5154880187025133
User 123551 does not improve AUC. Reverting changes.
Training on augumented user 85641 38/50 current_auc = 0.5160724722384571
User 85641 AUC after training: 0.5137346580946814
User 85641 does not improve AUC. Reverting changes.
Training on augumented user 9351 39/50 current_auc = 0.5160724722384571
User 9351 AUC after training: 0.5160724722384571
User 9351 does not improve AUC. Reverting changes.
Training on augumented user 28311 40/50 current_auc = 0.5160724722384571
User 28311 AUC after training: 0.5143191116306254
User 28311 does not improve AUC. Reverting changes.
Training on augumented user 136368 41/50 current_auc = 0.5160724722384571
User 136368 AUC after training: 0.5149035651665693
User 136368 does not improve AUC. Reverting changes.
Training on augumented user 125659 42/50 current_auc = 0.5160724722384571
User 125659 AUC after training: 0.505552308591467
User 125659 does not improve AUC. Reverting changes.
Training on augumented user 94282 43/50 current_auc = 0.5160724722384571
User 94282 AUC after training: 0.5125657510227937
User 94282 does not improve AUC. Reverting changes.
Training on augumented user 93473 44/50 current_auc = 0.5160724722384571
User 93473 AUC after training: 0.5154880187025132
User 93473 does not improve AUC. Reverting changes.
Training on augumented user 587 45/50 current_auc = 0.5160724722384571
User 587 AUC after training: 0.5125657510227937
User 587 does not improve AUC. Reverting changes.
Training on augumented user 64899 46/50 current_auc = 0.5160724722384571
User 64899 AUC after training: 0.5143191116306254
User 64899 does not improve AUC. Reverting changes.
Training on augumented user 116449 47/50 current_auc = 0.5160724722384571
User 116449 AUC after training: 0.5149035651665692
User 116449 does not improve AUC. Reverting changes.
Training on augumented user 8533 48/50 current_auc = 0.5160724722384571
User 8533 AUC after training: 0.5149035651665692
User 8533 does not improve AUC. Reverting changes.
Training on augumented user 61902 49/50 current_auc = 0.5160724722384571
User 61902 AUC after training: 0.5119812974868498
User 61902 does not improve AUC. Reverting changes.
[2024-12-02 20:05:43.489975] start test user 34160 263/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:43.937636] start test user 34160 263/568 recall augumented users by random, augumented_users = [115345, 58951, 55067, 32799, 40168, 72245, 87021, 651, 92999, 50667, 35539, 121600, 93050, 100099, 89383, 40738, 132852, 54471, 52686, 89966, 126261, 45767, 45261, 31365, 74010, 109576, 78586, 42087, 120023, 99532, 90969, 7409, 68132, 102788, 68887, 120289, 85396, 22283, 114684, 105100, 32948, 5919, 34183, 90162, 115074, 7498, 72030, 40133, 93379, 29436]
[2024-12-02 20:05:43.950691] user = 34160 Cloud 263/568
[2024-12-02 20:05:43.972856] user = 34160 Local 263/568
[2024-12-02 20:05:44.030431] user = 34160 Local+ 263/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:46.658417] user = 34160 MPDA- 263/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.85
Training on augumented user 115345 0/50 current_auc = 0.85
User 115345 AUC after training: 0.85
User 115345 does not improve AUC. Reverting changes.
Training on augumented user 58951 1/50 current_auc = 0.85
User 58951 AUC after training: 0.85
User 58951 does not improve AUC. Reverting changes.
Training on augumented user 55067 2/50 current_auc = 0.85
User 55067 AUC after training: 0.85
User 55067 does not improve AUC. Reverting changes.
Training on augumented user 32799 3/50 current_auc = 0.85
User 32799 AUC after training: 0.85
User 32799 does not improve AUC. Reverting changes.
Training on augumented user 40168 4/50 current_auc = 0.85
User 40168 AUC after training: 0.85
User 40168 does not improve AUC. Reverting changes.
Training on augumented user 72245 5/50 current_auc = 0.85
User 72245 AUC after training: 0.85
User 72245 does not improve AUC. Reverting changes.
Training on augumented user 87021 6/50 current_auc = 0.85
User 87021 AUC after training: 0.85
User 87021 does not improve AUC. Reverting changes.
Training on augumented user 651 7/50 current_auc = 0.85
User 651 AUC after training: 0.85
User 651 does not improve AUC. Reverting changes.
Training on augumented user 92999 8/50 current_auc = 0.85
User 92999 AUC after training: 0.85
User 92999 does not improve AUC. Reverting changes.
Training on augumented user 50667 9/50 current_auc = 0.85
User 50667 AUC after training: 0.85
User 50667 does not improve AUC. Reverting changes.
Training on augumented user 35539 10/50 current_auc = 0.85
User 35539 AUC after training: 0.85
User 35539 does not improve AUC. Reverting changes.
Training on augumented user 121600 11/50 current_auc = 0.85
User 121600 AUC after training: 0.85
User 121600 does not improve AUC. Reverting changes.
Training on augumented user 93050 12/50 current_auc = 0.85
User 93050 AUC after training: 0.85
User 93050 does not improve AUC. Reverting changes.
Training on augumented user 100099 13/50 current_auc = 0.85
User 100099 AUC after training: 0.85
User 100099 does not improve AUC. Reverting changes.
Training on augumented user 89383 14/50 current_auc = 0.85
User 89383 AUC after training: 0.85
User 89383 does not improve AUC. Reverting changes.
Training on augumented user 40738 15/50 current_auc = 0.85
User 40738 AUC after training: 0.9
User 40738 improves AUC. Keeping the model.
Training on augumented user 132852 16/50 current_auc = 0.9
User 132852 AUC after training: 0.9
User 132852 does not improve AUC. Reverting changes.
Training on augumented user 54471 17/50 current_auc = 0.9
User 54471 AUC after training: 0.9
User 54471 does not improve AUC. Reverting changes.
Training on augumented user 52686 18/50 current_auc = 0.9
User 52686 AUC after training: 0.9
User 52686 does not improve AUC. Reverting changes.
Training on augumented user 89966 19/50 current_auc = 0.9
User 89966 AUC after training: 0.9
User 89966 does not improve AUC. Reverting changes.
Training on augumented user 126261 20/50 current_auc = 0.9
User 126261 AUC after training: 0.9
User 126261 does not improve AUC. Reverting changes.
Training on augumented user 45767 21/50 current_auc = 0.9
User 45767 AUC after training: 0.9
User 45767 does not improve AUC. Reverting changes.
Training on augumented user 45261 22/50 current_auc = 0.9
User 45261 AUC after training: 0.9
User 45261 does not improve AUC. Reverting changes.
Training on augumented user 31365 23/50 current_auc = 0.9
User 31365 AUC after training: 0.9
User 31365 does not improve AUC. Reverting changes.
Training on augumented user 74010 24/50 current_auc = 0.9
User 74010 AUC after training: 0.9
User 74010 does not improve AUC. Reverting changes.
Training on augumented user 109576 25/50 current_auc = 0.9
User 109576 AUC after training: 0.9
User 109576 does not improve AUC. Reverting changes.
Training on augumented user 78586 26/50 current_auc = 0.9
User 78586 AUC after training: 0.85
User 78586 does not improve AUC. Reverting changes.
Training on augumented user 42087 27/50 current_auc = 0.9
User 42087 AUC after training: 0.9
User 42087 does not improve AUC. Reverting changes.
Training on augumented user 120023 28/50 current_auc = 0.9
User 120023 AUC after training: 0.9
User 120023 does not improve AUC. Reverting changes.
Training on augumented user 99532 29/50 current_auc = 0.9
User 99532 AUC after training: 0.9
User 99532 does not improve AUC. Reverting changes.
Training on augumented user 90969 30/50 current_auc = 0.9
User 90969 AUC after training: 0.9
User 90969 does not improve AUC. Reverting changes.
Training on augumented user 7409 31/50 current_auc = 0.9
User 7409 AUC after training: 0.9
User 7409 does not improve AUC. Reverting changes.
Training on augumented user 68132 32/50 current_auc = 0.9
User 68132 AUC after training: 0.9
User 68132 does not improve AUC. Reverting changes.
Training on augumented user 102788 33/50 current_auc = 0.9
User 102788 AUC after training: 0.9
User 102788 does not improve AUC. Reverting changes.
Training on augumented user 68887 34/50 current_auc = 0.9
User 68887 AUC after training: 0.9
User 68887 does not improve AUC. Reverting changes.
Training on augumented user 120289 35/50 current_auc = 0.9
User 120289 AUC after training: 0.9
User 120289 does not improve AUC. Reverting changes.
Training on augumented user 85396 36/50 current_auc = 0.9
User 85396 AUC after training: 0.9
User 85396 does not improve AUC. Reverting changes.
Training on augumented user 22283 37/50 current_auc = 0.9
User 22283 AUC after training: 0.9
User 22283 does not improve AUC. Reverting changes.
Training on augumented user 114684 38/50 current_auc = 0.9
User 114684 AUC after training: 0.9
User 114684 does not improve AUC. Reverting changes.
Training on augumented user 105100 39/50 current_auc = 0.9
User 105100 AUC after training: 0.9
User 105100 does not improve AUC. Reverting changes.
Training on augumented user 32948 40/50 current_auc = 0.9
User 32948 AUC after training: 0.9
User 32948 does not improve AUC. Reverting changes.
Training on augumented user 5919 41/50 current_auc = 0.9
User 5919 AUC after training: 0.9
User 5919 does not improve AUC. Reverting changes.
Training on augumented user 34183 42/50 current_auc = 0.9
User 34183 AUC after training: 0.9
User 34183 does not improve AUC. Reverting changes.
Training on augumented user 90162 43/50 current_auc = 0.9
User 90162 AUC after training: 0.85
User 90162 does not improve AUC. Reverting changes.
Training on augumented user 115074 44/50 current_auc = 0.9
User 115074 AUC after training: 0.9
User 115074 does not improve AUC. Reverting changes.
Training on augumented user 7498 45/50 current_auc = 0.9
User 7498 AUC after training: 0.9
User 7498 does not improve AUC. Reverting changes.
Training on augumented user 72030 46/50 current_auc = 0.9
User 72030 AUC after training: 0.9
User 72030 does not improve AUC. Reverting changes.
Training on augumented user 40133 47/50 current_auc = 0.9
User 40133 AUC after training: 0.85
User 40133 does not improve AUC. Reverting changes.
Training on augumented user 93379 48/50 current_auc = 0.9
User 93379 AUC after training: 0.9
User 93379 does not improve AUC. Reverting changes.
Training on augumented user 29436 49/50 current_auc = 0.9
User 29436 AUC after training: 0.9
User 29436 does not improve AUC. Reverting changes.
[2024-12-02 20:06:15.674659] start test user 34179 264/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:16.283281] start test user 34179 264/568 recall augumented users by random, augumented_users = [23060, 31844, 122355, 56296, 18485, 113046, 8803, 85691, 53210, 3604, 64050, 48408, 9337, 125714, 53280, 13701, 8399, 27412, 5724, 90942, 78935, 97934, 120954, 67494, 83745, 94850, 99787, 75239, 66602, 34194, 3466, 121321, 113519, 19420, 59203, 46047, 103373, 78352, 128542, 103480, 29673, 81528, 40596, 82088, 97245, 1227, 26281, 56580, 36476, 35228]
[2024-12-02 20:06:16.298630] user = 34179 Cloud 264/568
[2024-12-02 20:06:16.326958] user = 34179 Local 264/568
[2024-12-02 20:06:16.470548] user = 34179 Local+ 264/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:18.326884] user = 34179 MPDA- 264/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7682051282051281
Training on augumented user 23060 0/50 current_auc = 0.7682051282051281
User 23060 AUC after training: 0.7682051282051281
User 23060 does not improve AUC. Reverting changes.
Training on augumented user 31844 1/50 current_auc = 0.7682051282051281
User 31844 AUC after training: 0.7682051282051281
User 31844 does not improve AUC. Reverting changes.
Training on augumented user 122355 2/50 current_auc = 0.7682051282051281
User 122355 AUC after training: 0.7671794871794871
User 122355 does not improve AUC. Reverting changes.
Training on augumented user 56296 3/50 current_auc = 0.7682051282051281
User 56296 AUC after training: 0.7666666666666666
User 56296 does not improve AUC. Reverting changes.
Training on augumented user 18485 4/50 current_auc = 0.7682051282051281
User 18485 AUC after training: 0.7676923076923077
User 18485 does not improve AUC. Reverting changes.
Training on augumented user 113046 5/50 current_auc = 0.7682051282051281
User 113046 AUC after training: 0.7671794871794871
User 113046 does not improve AUC. Reverting changes.
Training on augumented user 8803 6/50 current_auc = 0.7682051282051281
User 8803 AUC after training: 0.7671794871794871
User 8803 does not improve AUC. Reverting changes.
Training on augumented user 85691 7/50 current_auc = 0.7682051282051281
User 85691 AUC after training: 0.7666666666666666
User 85691 does not improve AUC. Reverting changes.
Training on augumented user 53210 8/50 current_auc = 0.7682051282051281
User 53210 AUC after training: 0.7656410256410257
User 53210 does not improve AUC. Reverting changes.
Training on augumented user 3604 9/50 current_auc = 0.7682051282051281
User 3604 AUC after training: 0.7682051282051282
User 3604 improves AUC. Keeping the model.
Training on augumented user 64050 10/50 current_auc = 0.7682051282051282
User 64050 AUC after training: 0.7666666666666667
User 64050 does not improve AUC. Reverting changes.
Training on augumented user 48408 11/50 current_auc = 0.7682051282051282
User 48408 AUC after training: 0.7656410256410257
User 48408 does not improve AUC. Reverting changes.
Training on augumented user 9337 12/50 current_auc = 0.7682051282051282
User 9337 AUC after training: 0.7666666666666666
User 9337 does not improve AUC. Reverting changes.
Training on augumented user 125714 13/50 current_auc = 0.7682051282051282
User 125714 AUC after training: 0.7661538461538461
User 125714 does not improve AUC. Reverting changes.
Training on augumented user 53280 14/50 current_auc = 0.7682051282051282
User 53280 AUC after training: 0.7635897435897436
User 53280 does not improve AUC. Reverting changes.
Training on augumented user 13701 15/50 current_auc = 0.7682051282051282
User 13701 AUC after training: 0.7666666666666666
User 13701 does not improve AUC. Reverting changes.
Training on augumented user 8399 16/50 current_auc = 0.7682051282051282
User 8399 AUC after training: 0.7682051282051281
User 8399 does not improve AUC. Reverting changes.
Training on augumented user 27412 17/50 current_auc = 0.7682051282051282
User 27412 AUC after training: 0.7671794871794871
User 27412 does not improve AUC. Reverting changes.
Training on augumented user 5724 18/50 current_auc = 0.7682051282051282
User 5724 AUC after training: 0.7666666666666666
User 5724 does not improve AUC. Reverting changes.
Training on augumented user 90942 19/50 current_auc = 0.7682051282051282
User 90942 AUC after training: 0.7682051282051282
User 90942 does not improve AUC. Reverting changes.
Training on augumented user 78935 20/50 current_auc = 0.7682051282051282
User 78935 AUC after training: 0.7656410256410257
User 78935 does not improve AUC. Reverting changes.
Training on augumented user 97934 21/50 current_auc = 0.7682051282051282
User 97934 AUC after training: 0.7666666666666666
User 97934 does not improve AUC. Reverting changes.
Training on augumented user 120954 22/50 current_auc = 0.7682051282051282
User 120954 AUC after training: 0.7671794871794871
User 120954 does not improve AUC. Reverting changes.
Training on augumented user 67494 23/50 current_auc = 0.7682051282051282
User 67494 AUC after training: 0.7676923076923077
User 67494 does not improve AUC. Reverting changes.
Training on augumented user 83745 24/50 current_auc = 0.7682051282051282
User 83745 AUC after training: 0.7682051282051281
User 83745 does not improve AUC. Reverting changes.
Training on augumented user 94850 25/50 current_auc = 0.7682051282051282
User 94850 AUC after training: 0.7676923076923077
User 94850 does not improve AUC. Reverting changes.
Training on augumented user 99787 26/50 current_auc = 0.7682051282051282
User 99787 AUC after training: 0.7676923076923077
User 99787 does not improve AUC. Reverting changes.
Training on augumented user 75239 27/50 current_auc = 0.7682051282051282
User 75239 AUC after training: 0.7671794871794871
User 75239 does not improve AUC. Reverting changes.
Training on augumented user 66602 28/50 current_auc = 0.7682051282051282
User 66602 AUC after training: 0.7671794871794871
User 66602 does not improve AUC. Reverting changes.
Training on augumented user 34194 29/50 current_auc = 0.7682051282051282
User 34194 AUC after training: 0.7692307692307692
User 34194 improves AUC. Keeping the model.
Training on augumented user 3466 30/50 current_auc = 0.7692307692307692
User 3466 AUC after training: 0.7692307692307693
User 3466 improves AUC. Keeping the model.
Training on augumented user 121321 31/50 current_auc = 0.7692307692307693
User 121321 AUC after training: 0.7676923076923077
User 121321 does not improve AUC. Reverting changes.
Training on augumented user 113519 32/50 current_auc = 0.7692307692307693
User 113519 AUC after training: 0.7676923076923077
User 113519 does not improve AUC. Reverting changes.
Training on augumented user 19420 33/50 current_auc = 0.7692307692307693
User 19420 AUC after training: 0.7697435897435897
User 19420 improves AUC. Keeping the model.
Training on augumented user 59203 34/50 current_auc = 0.7697435897435897
User 59203 AUC after training: 0.7666666666666667
User 59203 does not improve AUC. Reverting changes.
Training on augumented user 46047 35/50 current_auc = 0.7697435897435897
User 46047 AUC after training: 0.7697435897435896
User 46047 does not improve AUC. Reverting changes.
Training on augumented user 103373 36/50 current_auc = 0.7697435897435897
User 103373 AUC after training: 0.7697435897435898
User 103373 improves AUC. Keeping the model.
Training on augumented user 78352 37/50 current_auc = 0.7697435897435898
User 78352 AUC after training: 0.7692307692307693
User 78352 does not improve AUC. Reverting changes.
Training on augumented user 128542 38/50 current_auc = 0.7697435897435898
User 128542 AUC after training: 0.7651282051282052
User 128542 does not improve AUC. Reverting changes.
Training on augumented user 103480 39/50 current_auc = 0.7697435897435898
User 103480 AUC after training: 0.7692307692307692
User 103480 does not improve AUC. Reverting changes.
Training on augumented user 29673 40/50 current_auc = 0.7697435897435898
User 29673 AUC after training: 0.7712820512820514
User 29673 improves AUC. Keeping the model.
Training on augumented user 81528 41/50 current_auc = 0.7712820512820514
User 81528 AUC after training: 0.7707692307692309
User 81528 does not improve AUC. Reverting changes.
Training on augumented user 40596 42/50 current_auc = 0.7712820512820514
User 40596 AUC after training: 0.7697435897435897
User 40596 does not improve AUC. Reverting changes.
Training on augumented user 82088 43/50 current_auc = 0.7712820512820514
User 82088 AUC after training: 0.7707692307692308
User 82088 does not improve AUC. Reverting changes.
Training on augumented user 97245 44/50 current_auc = 0.7712820512820514
User 97245 AUC after training: 0.7702564102564103
User 97245 does not improve AUC. Reverting changes.
Training on augumented user 1227 45/50 current_auc = 0.7712820512820514
User 1227 AUC after training: 0.7712820512820513
User 1227 does not improve AUC. Reverting changes.
Training on augumented user 26281 46/50 current_auc = 0.7712820512820514
User 26281 AUC after training: 0.7707692307692308
User 26281 does not improve AUC. Reverting changes.
Training on augumented user 56580 47/50 current_auc = 0.7712820512820514
User 56580 AUC after training: 0.7723076923076923
User 56580 improves AUC. Keeping the model.
Training on augumented user 36476 48/50 current_auc = 0.7723076923076923
User 36476 AUC after training: 0.7728205128205129
User 36476 improves AUC. Keeping the model.
Training on augumented user 35228 49/50 current_auc = 0.7728205128205129
User 35228 AUC after training: 0.7728205128205128
User 35228 does not improve AUC. Reverting changes.
[2024-12-02 20:06:42.792880] start test user 34187 265/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:43.199119] start test user 34187 265/568 recall augumented users by random, augumented_users = [103648, 99868, 134388, 24702, 18864, 14392, 85342, 93215, 65033, 23727, 96548, 84704, 55018, 87862, 52441, 16154, 63301, 114839, 102919, 5963, 109589, 45533, 7217, 135466, 137945, 50949, 8527, 30259, 130710, 478, 65248, 105953, 114609, 62316, 113467, 95956, 13831, 18572, 68404, 93488, 79641, 77406, 105262, 41578, 84393, 77505, 56257, 111534, 59349, 36778]
[2024-12-02 20:06:43.215693] user = 34187 Cloud 265/568
[2024-12-02 20:06:43.230204] user = 34187 Local 265/568
[2024-12-02 20:06:43.378926] user = 34187 Local+ 265/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:46.131203] user = 34187 MPDA- 265/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 103648 0/50 current_auc = 1.0
User 103648 AUC after training: 1.0
User 103648 does not improve AUC. Reverting changes.
Training on augumented user 99868 1/50 current_auc = 1.0
User 99868 AUC after training: 1.0
User 99868 does not improve AUC. Reverting changes.
Training on augumented user 134388 2/50 current_auc = 1.0
User 134388 AUC after training: 1.0
User 134388 does not improve AUC. Reverting changes.
Training on augumented user 24702 3/50 current_auc = 1.0
User 24702 AUC after training: 1.0
User 24702 does not improve AUC. Reverting changes.
Training on augumented user 18864 4/50 current_auc = 1.0
User 18864 AUC after training: 1.0
User 18864 does not improve AUC. Reverting changes.
Training on augumented user 14392 5/50 current_auc = 1.0
User 14392 AUC after training: 1.0
User 14392 does not improve AUC. Reverting changes.
Training on augumented user 85342 6/50 current_auc = 1.0
User 85342 AUC after training: 1.0
User 85342 does not improve AUC. Reverting changes.
Training on augumented user 93215 7/50 current_auc = 1.0
User 93215 AUC after training: 1.0
User 93215 does not improve AUC. Reverting changes.
Training on augumented user 65033 8/50 current_auc = 1.0
User 65033 AUC after training: 1.0
User 65033 does not improve AUC. Reverting changes.
Training on augumented user 23727 9/50 current_auc = 1.0
User 23727 AUC after training: 1.0
User 23727 does not improve AUC. Reverting changes.
Training on augumented user 96548 10/50 current_auc = 1.0
User 96548 AUC after training: 1.0
User 96548 does not improve AUC. Reverting changes.
Training on augumented user 84704 11/50 current_auc = 1.0
User 84704 AUC after training: 1.0
User 84704 does not improve AUC. Reverting changes.
Training on augumented user 55018 12/50 current_auc = 1.0
User 55018 AUC after training: 1.0
User 55018 does not improve AUC. Reverting changes.
Training on augumented user 87862 13/50 current_auc = 1.0
User 87862 AUC after training: 1.0
User 87862 does not improve AUC. Reverting changes.
Training on augumented user 52441 14/50 current_auc = 1.0
User 52441 AUC after training: 1.0
User 52441 does not improve AUC. Reverting changes.
Training on augumented user 16154 15/50 current_auc = 1.0
User 16154 AUC after training: 1.0
User 16154 does not improve AUC. Reverting changes.
Training on augumented user 63301 16/50 current_auc = 1.0
User 63301 AUC after training: 1.0
User 63301 does not improve AUC. Reverting changes.
Training on augumented user 114839 17/50 current_auc = 1.0
User 114839 AUC after training: 1.0
User 114839 does not improve AUC. Reverting changes.
Training on augumented user 102919 18/50 current_auc = 1.0
User 102919 AUC after training: 1.0
User 102919 does not improve AUC. Reverting changes.
Training on augumented user 5963 19/50 current_auc = 1.0
User 5963 AUC after training: 1.0
User 5963 does not improve AUC. Reverting changes.
Training on augumented user 109589 20/50 current_auc = 1.0
User 109589 AUC after training: 1.0
User 109589 does not improve AUC. Reverting changes.
Training on augumented user 45533 21/50 current_auc = 1.0
User 45533 AUC after training: 1.0
User 45533 does not improve AUC. Reverting changes.
Training on augumented user 7217 22/50 current_auc = 1.0
User 7217 AUC after training: 1.0
User 7217 does not improve AUC. Reverting changes.
Training on augumented user 135466 23/50 current_auc = 1.0
User 135466 AUC after training: 1.0
User 135466 does not improve AUC. Reverting changes.
Training on augumented user 137945 24/50 current_auc = 1.0
User 137945 AUC after training: 1.0
User 137945 does not improve AUC. Reverting changes.
Training on augumented user 50949 25/50 current_auc = 1.0
User 50949 AUC after training: 1.0
User 50949 does not improve AUC. Reverting changes.
Training on augumented user 8527 26/50 current_auc = 1.0
User 8527 AUC after training: 1.0
User 8527 does not improve AUC. Reverting changes.
Training on augumented user 30259 27/50 current_auc = 1.0
User 30259 AUC after training: 1.0
User 30259 does not improve AUC. Reverting changes.
Training on augumented user 130710 28/50 current_auc = 1.0
User 130710 AUC after training: 1.0
User 130710 does not improve AUC. Reverting changes.
Training on augumented user 478 29/50 current_auc = 1.0
User 478 AUC after training: 1.0
User 478 does not improve AUC. Reverting changes.
Training on augumented user 65248 30/50 current_auc = 1.0
User 65248 AUC after training: 1.0
User 65248 does not improve AUC. Reverting changes.
Training on augumented user 105953 31/50 current_auc = 1.0
User 105953 AUC after training: 1.0
User 105953 does not improve AUC. Reverting changes.
Training on augumented user 114609 32/50 current_auc = 1.0
User 114609 AUC after training: 1.0
User 114609 does not improve AUC. Reverting changes.
Training on augumented user 62316 33/50 current_auc = 1.0
User 62316 AUC after training: 1.0
User 62316 does not improve AUC. Reverting changes.
Training on augumented user 113467 34/50 current_auc = 1.0
User 113467 AUC after training: 1.0
User 113467 does not improve AUC. Reverting changes.
Training on augumented user 95956 35/50 current_auc = 1.0
User 95956 AUC after training: 1.0
User 95956 does not improve AUC. Reverting changes.
Training on augumented user 13831 36/50 current_auc = 1.0
User 13831 AUC after training: 1.0
User 13831 does not improve AUC. Reverting changes.
Training on augumented user 18572 37/50 current_auc = 1.0
User 18572 AUC after training: 1.0
User 18572 does not improve AUC. Reverting changes.
Training on augumented user 68404 38/50 current_auc = 1.0
User 68404 AUC after training: 1.0
User 68404 does not improve AUC. Reverting changes.
Training on augumented user 93488 39/50 current_auc = 1.0
User 93488 AUC after training: 1.0
User 93488 does not improve AUC. Reverting changes.
Training on augumented user 79641 40/50 current_auc = 1.0
User 79641 AUC after training: 1.0
User 79641 does not improve AUC. Reverting changes.
Training on augumented user 77406 41/50 current_auc = 1.0
User 77406 AUC after training: 1.0
User 77406 does not improve AUC. Reverting changes.
Training on augumented user 105262 42/50 current_auc = 1.0
User 105262 AUC after training: 1.0
User 105262 does not improve AUC. Reverting changes.
Training on augumented user 41578 43/50 current_auc = 1.0
User 41578 AUC after training: 1.0
User 41578 does not improve AUC. Reverting changes.
Training on augumented user 84393 44/50 current_auc = 1.0
User 84393 AUC after training: 1.0
User 84393 does not improve AUC. Reverting changes.
Training on augumented user 77505 45/50 current_auc = 1.0
User 77505 AUC after training: 1.0
User 77505 does not improve AUC. Reverting changes.
Training on augumented user 56257 46/50 current_auc = 1.0
User 56257 AUC after training: 1.0
User 56257 does not improve AUC. Reverting changes.
Training on augumented user 111534 47/50 current_auc = 1.0
User 111534 AUC after training: 1.0
User 111534 does not improve AUC. Reverting changes.
Training on augumented user 59349 48/50 current_auc = 1.0
User 59349 AUC after training: 1.0
User 59349 does not improve AUC. Reverting changes.
Training on augumented user 36778 49/50 current_auc = 1.0
User 36778 AUC after training: 1.0
User 36778 does not improve AUC. Reverting changes.
[2024-12-02 20:07:10.845887] start test user 34188 266/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:11.299315] start test user 34188 266/568 recall augumented users by random, augumented_users = [126041, 90514, 44507, 69036, 30731, 69014, 33722, 62834, 114208, 48129, 56622, 75687, 102654, 132689, 44119, 97336, 29553, 43608, 42533, 63378, 11531, 134260, 126483, 109882, 29788, 39755, 36090, 117519, 23632, 76078, 84625, 117033, 28471, 65092, 9905, 4029, 109208, 103000, 35725, 7325, 14063, 38738, 93680, 7985, 1517, 73753, 92254, 108569, 106905, 114432]
[2024-12-02 20:07:11.313967] user = 34188 Cloud 266/568
[2024-12-02 20:07:11.331920] user = 34188 Local 266/568
[2024-12-02 20:07:11.358536] user = 34188 Local+ 266/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:13.163749] user = 34188 MPDA- 266/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6554054054054055
Training on augumented user 126041 0/50 current_auc = 0.6554054054054055
User 126041 AUC after training: 0.6552616446233468
User 126041 does not improve AUC. Reverting changes.
Training on augumented user 90514 1/50 current_auc = 0.6554054054054055
User 90514 AUC after training: 0.6589994249568717
User 90514 improves AUC. Keeping the model.
Training on augumented user 44507 2/50 current_auc = 0.6589994249568717
User 44507 AUC after training: 0.6601495112133411
User 44507 improves AUC. Keeping the model.
Training on augumented user 69036 3/50 current_auc = 0.6601495112133411
User 69036 AUC after training: 0.6578493387004026
User 69036 does not improve AUC. Reverting changes.
Training on augumented user 30731 4/50 current_auc = 0.6601495112133411
User 30731 AUC after training: 0.6587119033927544
User 30731 does not improve AUC. Reverting changes.
Training on augumented user 69014 5/50 current_auc = 0.6601495112133411
User 69014 AUC after training: 0.6587119033927545
User 69014 does not improve AUC. Reverting changes.
Training on augumented user 33722 6/50 current_auc = 0.6601495112133411
User 33722 AUC after training: 0.659286946520989
User 33722 does not improve AUC. Reverting changes.
Training on augumented user 62834 7/50 current_auc = 0.6601495112133411
User 62834 AUC after training: 0.6595744680851063
User 62834 does not improve AUC. Reverting changes.
Training on augumented user 114208 8/50 current_auc = 0.6601495112133411
User 114208 AUC after training: 0.6607245543415756
User 114208 improves AUC. Keeping the model.
Training on augumented user 48129 9/50 current_auc = 0.6607245543415756
User 48129 AUC after training: 0.6602932719953996
User 48129 does not improve AUC. Reverting changes.
Training on augumented user 56622 10/50 current_auc = 0.6607245543415756
User 56622 AUC after training: 0.6602932719953997
User 56622 does not improve AUC. Reverting changes.
Training on augumented user 75687 11/50 current_auc = 0.6607245543415756
User 75687 AUC after training: 0.6598619896492237
User 75687 does not improve AUC. Reverting changes.
Training on augumented user 102654 12/50 current_auc = 0.6607245543415756
User 102654 AUC after training: 0.6598619896492237
User 102654 does not improve AUC. Reverting changes.
Training on augumented user 132689 13/50 current_auc = 0.6607245543415756
User 132689 AUC after training: 0.6598619896492236
User 132689 does not improve AUC. Reverting changes.
Training on augumented user 44119 14/50 current_auc = 0.6607245543415756
User 44119 AUC after training: 0.6607245543415756
User 44119 does not improve AUC. Reverting changes.
Training on augumented user 97336 15/50 current_auc = 0.6607245543415756
User 97336 AUC after training: 0.6600057504312824
User 97336 does not improve AUC. Reverting changes.
Training on augumented user 29553 16/50 current_auc = 0.6607245543415756
User 29553 AUC after training: 0.6607245543415756
User 29553 does not improve AUC. Reverting changes.
Training on augumented user 43608 17/50 current_auc = 0.6607245543415756
User 43608 AUC after training: 0.6607245543415756
User 43608 does not improve AUC. Reverting changes.
Training on augumented user 42533 18/50 current_auc = 0.6607245543415756
User 42533 AUC after training: 0.6598619896492237
User 42533 does not improve AUC. Reverting changes.
Training on augumented user 63378 19/50 current_auc = 0.6607245543415756
User 63378 AUC after training: 0.6602932719953997
User 63378 does not improve AUC. Reverting changes.
Training on augumented user 11531 20/50 current_auc = 0.6607245543415756
User 11531 AUC after training: 0.6604370327774584
User 11531 does not improve AUC. Reverting changes.
Training on augumented user 134260 21/50 current_auc = 0.6607245543415756
User 134260 AUC after training: 0.660149511213341
User 134260 does not improve AUC. Reverting changes.
Training on augumented user 126483 22/50 current_auc = 0.6607245543415756
User 126483 AUC after training: 0.6607245543415756
User 126483 does not improve AUC. Reverting changes.
Training on augumented user 109882 23/50 current_auc = 0.6607245543415756
User 109882 AUC after training: 0.6598619896492237
User 109882 does not improve AUC. Reverting changes.
Training on augumented user 29788 24/50 current_auc = 0.6607245543415756
User 29788 AUC after training: 0.6601495112133411
User 29788 does not improve AUC. Reverting changes.
Training on augumented user 39755 25/50 current_auc = 0.6607245543415756
User 39755 AUC after training: 0.6604370327774584
User 39755 does not improve AUC. Reverting changes.
Training on augumented user 36090 26/50 current_auc = 0.6607245543415756
User 36090 AUC after training: 0.6607245543415756
User 36090 does not improve AUC. Reverting changes.
Training on augumented user 117519 27/50 current_auc = 0.6607245543415756
User 117519 AUC after training: 0.6604370327774584
User 117519 does not improve AUC. Reverting changes.
Training on augumented user 23632 28/50 current_auc = 0.6607245543415756
User 23632 AUC after training: 0.659718228867165
User 23632 does not improve AUC. Reverting changes.
Training on augumented user 76078 29/50 current_auc = 0.6607245543415756
User 76078 AUC after training: 0.661012075905693
User 76078 improves AUC. Keeping the model.
Training on augumented user 84625 30/50 current_auc = 0.661012075905693
User 84625 AUC after training: 0.6598619896492237
User 84625 does not improve AUC. Reverting changes.
Training on augumented user 117033 31/50 current_auc = 0.661012075905693
User 117033 AUC after training: 0.6569867740080506
User 117033 does not improve AUC. Reverting changes.
Training on augumented user 28471 32/50 current_auc = 0.661012075905693
User 28471 AUC after training: 0.6604370327774584
User 28471 does not improve AUC. Reverting changes.
Training on augumented user 65092 33/50 current_auc = 0.661012075905693
User 65092 AUC after training: 0.6610120759056929
User 65092 does not improve AUC. Reverting changes.
Training on augumented user 9905 34/50 current_auc = 0.661012075905693
User 9905 AUC after training: 0.6604370327774582
User 9905 does not improve AUC. Reverting changes.
Training on augumented user 4029 35/50 current_auc = 0.661012075905693
User 4029 AUC after training: 0.6610120759056929
User 4029 does not improve AUC. Reverting changes.
Training on augumented user 109208 36/50 current_auc = 0.661012075905693
User 109208 AUC after training: 0.6601495112133411
User 109208 does not improve AUC. Reverting changes.
Training on augumented user 103000 37/50 current_auc = 0.661012075905693
User 103000 AUC after training: 0.6602932719953997
User 103000 does not improve AUC. Reverting changes.
Training on augumented user 35725 38/50 current_auc = 0.661012075905693
User 35725 AUC after training: 0.659286946520989
User 35725 does not improve AUC. Reverting changes.
Training on augumented user 7325 39/50 current_auc = 0.661012075905693
User 7325 AUC after training: 0.6612995974698103
User 7325 improves AUC. Keeping the model.
Training on augumented user 14063 40/50 current_auc = 0.6612995974698103
User 14063 AUC after training: 0.660149511213341
User 14063 does not improve AUC. Reverting changes.
Training on augumented user 38738 41/50 current_auc = 0.6612995974698103
User 38738 AUC after training: 0.6598619896492236
User 38738 does not improve AUC. Reverting changes.
Training on augumented user 93680 42/50 current_auc = 0.6612995974698103
User 93680 AUC after training: 0.6591431857389305
User 93680 does not improve AUC. Reverting changes.
Training on augumented user 7985 43/50 current_auc = 0.6612995974698103
User 7985 AUC after training: 0.6612995974698103
User 7985 does not improve AUC. Reverting changes.
Training on augumented user 1517 44/50 current_auc = 0.6612995974698103
User 1517 AUC after training: 0.6604370327774584
User 1517 does not improve AUC. Reverting changes.
Training on augumented user 73753 45/50 current_auc = 0.6612995974698103
User 73753 AUC after training: 0.661012075905693
User 73753 does not improve AUC. Reverting changes.
Training on augumented user 92254 46/50 current_auc = 0.6612995974698103
User 92254 AUC after training: 0.660149511213341
User 92254 does not improve AUC. Reverting changes.
Training on augumented user 108569 47/50 current_auc = 0.6612995974698103
User 108569 AUC after training: 0.6594307073030478
User 108569 does not improve AUC. Reverting changes.
Training on augumented user 106905 48/50 current_auc = 0.6612995974698103
User 106905 AUC after training: 0.6612995974698103
User 106905 does not improve AUC. Reverting changes.
Training on augumented user 114432 49/50 current_auc = 0.6612995974698103
User 114432 AUC after training: 0.6615871190339276
User 114432 improves AUC. Keeping the model.
[2024-12-02 20:07:44.708641] start test user 34194 267/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:45.279146] start test user 34194 267/568 recall augumented users by random, augumented_users = [137604, 114544, 88474, 61814, 75776, 25386, 105757, 135638, 104715, 99575, 63842, 55474, 57524, 33209, 103373, 82162, 99430, 134020, 37128, 88526, 19544, 25400, 18020, 76478, 67090, 82179, 92896, 96021, 44437, 110100, 129776, 91496, 15803, 88017, 86213, 114145, 83552, 87393, 55857, 1221, 102090, 91429, 87924, 138394, 37576, 87477, 95874, 127168, 32023, 30176]
[2024-12-02 20:07:45.296806] user = 34194 Cloud 267/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:07:45.314019] user = 34194 Local 267/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:07:45.377681] user = 34194 Local+ 267/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:07:47.460041] user = 34194 MPDA- 267/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 137604 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137604 AUC after training: 0.5
User 137604 does not improve AUC. Reverting changes.
Training on augumented user 114544 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114544 AUC after training: 0.5
User 114544 does not improve AUC. Reverting changes.
Training on augumented user 88474 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88474 AUC after training: 0.5
User 88474 does not improve AUC. Reverting changes.
Training on augumented user 61814 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61814 AUC after training: 0.5
User 61814 does not improve AUC. Reverting changes.
Training on augumented user 75776 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75776 AUC after training: 0.5
User 75776 does not improve AUC. Reverting changes.
Training on augumented user 25386 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25386 AUC after training: 0.5
User 25386 does not improve AUC. Reverting changes.
Training on augumented user 105757 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105757 AUC after training: 0.5
User 105757 does not improve AUC. Reverting changes.
Training on augumented user 135638 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135638 AUC after training: 0.5
User 135638 does not improve AUC. Reverting changes.
Training on augumented user 104715 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104715 AUC after training: 0.5
User 104715 does not improve AUC. Reverting changes.
Training on augumented user 99575 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99575 AUC after training: 0.5
User 99575 does not improve AUC. Reverting changes.
Training on augumented user 63842 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63842 AUC after training: 0.5
User 63842 does not improve AUC. Reverting changes.
Training on augumented user 55474 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55474 AUC after training: 0.5
User 55474 does not improve AUC. Reverting changes.
Training on augumented user 57524 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57524 AUC after training: 0.5
User 57524 does not improve AUC. Reverting changes.
Training on augumented user 33209 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33209 AUC after training: 0.5
User 33209 does not improve AUC. Reverting changes.
Training on augumented user 103373 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103373 AUC after training: 0.5
User 103373 does not improve AUC. Reverting changes.
Training on augumented user 82162 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82162 AUC after training: 0.5
User 82162 does not improve AUC. Reverting changes.
Training on augumented user 99430 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99430 AUC after training: 0.5
User 99430 does not improve AUC. Reverting changes.
Training on augumented user 134020 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134020 AUC after training: 0.5
User 134020 does not improve AUC. Reverting changes.
Training on augumented user 37128 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37128 AUC after training: 0.5
User 37128 does not improve AUC. Reverting changes.
Training on augumented user 88526 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88526 AUC after training: 0.5
User 88526 does not improve AUC. Reverting changes.
Training on augumented user 19544 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19544 AUC after training: 0.5
User 19544 does not improve AUC. Reverting changes.
Training on augumented user 25400 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25400 AUC after training: 0.5
User 25400 does not improve AUC. Reverting changes.
Training on augumented user 18020 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18020 AUC after training: 0.5
User 18020 does not improve AUC. Reverting changes.
Training on augumented user 76478 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76478 AUC after training: 0.5
User 76478 does not improve AUC. Reverting changes.
Training on augumented user 67090 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67090 AUC after training: 0.5
User 67090 does not improve AUC. Reverting changes.
Training on augumented user 82179 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82179 AUC after training: 0.5
User 82179 does not improve AUC. Reverting changes.
Training on augumented user 92896 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92896 AUC after training: 0.5
User 92896 does not improve AUC. Reverting changes.
Training on augumented user 96021 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96021 AUC after training: 0.5
User 96021 does not improve AUC. Reverting changes.
Training on augumented user 44437 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44437 AUC after training: 0.5
User 44437 does not improve AUC. Reverting changes.
Training on augumented user 110100 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110100 AUC after training: 0.5
User 110100 does not improve AUC. Reverting changes.
Training on augumented user 129776 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129776 AUC after training: 0.5
User 129776 does not improve AUC. Reverting changes.
Training on augumented user 91496 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91496 AUC after training: 0.5
User 91496 does not improve AUC. Reverting changes.
Training on augumented user 15803 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15803 AUC after training: 0.5
User 15803 does not improve AUC. Reverting changes.
Training on augumented user 88017 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88017 AUC after training: 0.5
User 88017 does not improve AUC. Reverting changes.
Training on augumented user 86213 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86213 AUC after training: 0.5
User 86213 does not improve AUC. Reverting changes.
Training on augumented user 114145 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114145 AUC after training: 0.5
User 114145 does not improve AUC. Reverting changes.
Training on augumented user 83552 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83552 AUC after training: 0.5
User 83552 does not improve AUC. Reverting changes.
Training on augumented user 87393 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87393 AUC after training: 0.5
User 87393 does not improve AUC. Reverting changes.
Training on augumented user 55857 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55857 AUC after training: 0.5
User 55857 does not improve AUC. Reverting changes.
Training on augumented user 1221 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1221 AUC after training: 0.5
User 1221 does not improve AUC. Reverting changes.
Training on augumented user 102090 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102090 AUC after training: 0.5
User 102090 does not improve AUC. Reverting changes.
Training on augumented user 91429 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91429 AUC after training: 0.5
User 91429 does not improve AUC. Reverting changes.
Training on augumented user 87924 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87924 AUC after training: 0.5
User 87924 does not improve AUC. Reverting changes.
Training on augumented user 138394 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138394 AUC after training: 0.5
User 138394 does not improve AUC. Reverting changes.
Training on augumented user 37576 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37576 AUC after training: 0.5
User 37576 does not improve AUC. Reverting changes.
Training on augumented user 87477 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87477 AUC after training: 0.5
User 87477 does not improve AUC. Reverting changes.
Training on augumented user 95874 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95874 AUC after training: 0.5
User 95874 does not improve AUC. Reverting changes.
Training on augumented user 127168 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127168 AUC after training: 0.5
User 127168 does not improve AUC. Reverting changes.
Training on augumented user 32023 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32023 AUC after training: 0.5
User 32023 does not improve AUC. Reverting changes.
Training on augumented user 30176 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30176 AUC after training: 0.5
User 30176 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:08:13.225257] start test user 34224 268/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:13.664575] start test user 34224 268/568 recall augumented users by random, augumented_users = [39865, 23687, 116486, 15549, 49168, 63762, 43849, 66544, 81501, 42563, 9191, 9988, 28074, 136774, 6031, 97941, 102743, 37027, 33686, 86273, 90666, 41147, 95476, 90569, 127397, 125401, 125703, 61526, 128545, 135826, 19179, 108952, 70828, 81210, 57806, 88307, 22688, 14351, 122579, 125957, 43500, 17224, 75762, 35645, 19851, 61825, 110829, 18443, 26411, 77881]
[2024-12-02 20:08:13.680297] user = 34224 Cloud 268/568
[2024-12-02 20:08:13.702706] user = 34224 Local 268/568
[2024-12-02 20:08:13.793956] user = 34224 Local+ 268/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:16.417478] user = 34224 MPDA- 268/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.723404255319149
Training on augumented user 39865 0/50 current_auc = 0.723404255319149
User 39865 AUC after training: 0.7250409165302784
User 39865 improves AUC. Keeping the model.
Training on augumented user 23687 1/50 current_auc = 0.7250409165302784
User 23687 AUC after training: 0.7266775777414076
User 23687 improves AUC. Keeping the model.
Training on augumented user 116486 2/50 current_auc = 0.7266775777414076
User 116486 AUC after training: 0.7250409165302782
User 116486 does not improve AUC. Reverting changes.
Training on augumented user 15549 3/50 current_auc = 0.7266775777414076
User 15549 AUC after training: 0.7258592471358429
User 15549 does not improve AUC. Reverting changes.
Training on augumented user 49168 4/50 current_auc = 0.7266775777414076
User 49168 AUC after training: 0.7250409165302784
User 49168 does not improve AUC. Reverting changes.
Training on augumented user 63762 5/50 current_auc = 0.7266775777414076
User 63762 AUC after training: 0.7258592471358429
User 63762 does not improve AUC. Reverting changes.
Training on augumented user 43849 6/50 current_auc = 0.7266775777414076
User 43849 AUC after training: 0.7274959083469722
User 43849 improves AUC. Keeping the model.
Training on augumented user 66544 7/50 current_auc = 0.7274959083469722
User 66544 AUC after training: 0.7274959083469722
User 66544 does not improve AUC. Reverting changes.
Training on augumented user 81501 8/50 current_auc = 0.7274959083469722
User 81501 AUC after training: 0.7283142389525369
User 81501 improves AUC. Keeping the model.
Training on augumented user 42563 9/50 current_auc = 0.7283142389525369
User 42563 AUC after training: 0.7283142389525369
User 42563 does not improve AUC. Reverting changes.
Training on augumented user 9191 10/50 current_auc = 0.7283142389525369
User 9191 AUC after training: 0.7287234042553192
User 9191 improves AUC. Keeping the model.
Training on augumented user 9988 11/50 current_auc = 0.7287234042553192
User 9988 AUC after training: 0.7295417348608838
User 9988 improves AUC. Keeping the model.
Training on augumented user 28074 12/50 current_auc = 0.7295417348608838
User 28074 AUC after training: 0.7303600654664485
User 28074 improves AUC. Keeping the model.
Training on augumented user 136774 13/50 current_auc = 0.7303600654664485
User 136774 AUC after training: 0.7303600654664485
User 136774 does not improve AUC. Reverting changes.
Training on augumented user 6031 14/50 current_auc = 0.7303600654664485
User 6031 AUC after training: 0.7291325695581016
User 6031 does not improve AUC. Reverting changes.
Training on augumented user 97941 15/50 current_auc = 0.7303600654664485
User 97941 AUC after training: 0.7295417348608838
User 97941 does not improve AUC. Reverting changes.
Training on augumented user 102743 16/50 current_auc = 0.7303600654664485
User 102743 AUC after training: 0.7266775777414076
User 102743 does not improve AUC. Reverting changes.
Training on augumented user 37027 17/50 current_auc = 0.7303600654664485
User 37027 AUC after training: 0.7303600654664485
User 37027 does not improve AUC. Reverting changes.
Training on augumented user 33686 18/50 current_auc = 0.7303600654664485
User 33686 AUC after training: 0.7295417348608838
User 33686 does not improve AUC. Reverting changes.
Training on augumented user 86273 19/50 current_auc = 0.7303600654664485
User 86273 AUC after training: 0.7295417348608838
User 86273 does not improve AUC. Reverting changes.
Training on augumented user 90666 20/50 current_auc = 0.7303600654664485
User 90666 AUC after training: 0.7303600654664485
User 90666 does not improve AUC. Reverting changes.
Training on augumented user 41147 21/50 current_auc = 0.7303600654664485
User 41147 AUC after training: 0.7295417348608838
User 41147 does not improve AUC. Reverting changes.
Training on augumented user 95476 22/50 current_auc = 0.7303600654664485
User 95476 AUC after training: 0.7311783960720132
User 95476 improves AUC. Keeping the model.
Training on augumented user 90569 23/50 current_auc = 0.7311783960720132
User 90569 AUC after training: 0.7283142389525369
User 90569 does not improve AUC. Reverting changes.
Training on augumented user 127397 24/50 current_auc = 0.7311783960720132
User 127397 AUC after training: 0.7299509001636661
User 127397 does not improve AUC. Reverting changes.
Training on augumented user 125401 25/50 current_auc = 0.7311783960720132
User 125401 AUC after training: 0.7299509001636661
User 125401 does not improve AUC. Reverting changes.
Training on augumented user 125703 26/50 current_auc = 0.7311783960720132
User 125703 AUC after training: 0.7291325695581016
User 125703 does not improve AUC. Reverting changes.
Training on augumented user 61526 27/50 current_auc = 0.7311783960720132
User 61526 AUC after training: 0.7299509001636661
User 61526 does not improve AUC. Reverting changes.
Training on augumented user 128545 28/50 current_auc = 0.7311783960720132
User 128545 AUC after training: 0.7303600654664485
User 128545 does not improve AUC. Reverting changes.
Training on augumented user 135826 29/50 current_auc = 0.7311783960720132
User 135826 AUC after training: 0.7299509001636661
User 135826 does not improve AUC. Reverting changes.
Training on augumented user 19179 30/50 current_auc = 0.7311783960720132
User 19179 AUC after training: 0.7311783960720132
User 19179 does not improve AUC. Reverting changes.
Training on augumented user 108952 31/50 current_auc = 0.7311783960720132
User 108952 AUC after training: 0.7311783960720132
User 108952 does not improve AUC. Reverting changes.
Training on augumented user 70828 32/50 current_auc = 0.7311783960720132
User 70828 AUC after training: 0.7311783960720132
User 70828 does not improve AUC. Reverting changes.
Training on augumented user 81210 33/50 current_auc = 0.7311783960720132
User 81210 AUC after training: 0.7311783960720132
User 81210 does not improve AUC. Reverting changes.
Training on augumented user 57806 34/50 current_auc = 0.7311783960720132
User 57806 AUC after training: 0.7311783960720132
User 57806 does not improve AUC. Reverting changes.
Training on augumented user 88307 35/50 current_auc = 0.7311783960720132
User 88307 AUC after training: 0.7299509001636661
User 88307 does not improve AUC. Reverting changes.
Training on augumented user 22688 36/50 current_auc = 0.7311783960720132
User 22688 AUC after training: 0.7283142389525369
User 22688 does not improve AUC. Reverting changes.
Training on augumented user 14351 37/50 current_auc = 0.7311783960720132
User 14351 AUC after training: 0.7303600654664485
User 14351 does not improve AUC. Reverting changes.
Training on augumented user 122579 38/50 current_auc = 0.7311783960720132
User 122579 AUC after training: 0.7274959083469722
User 122579 does not improve AUC. Reverting changes.
Training on augumented user 125957 39/50 current_auc = 0.7311783960720132
User 125957 AUC after training: 0.7311783960720132
User 125957 does not improve AUC. Reverting changes.
Training on augumented user 43500 40/50 current_auc = 0.7311783960720132
User 43500 AUC after training: 0.7311783960720132
User 43500 does not improve AUC. Reverting changes.
Training on augumented user 17224 41/50 current_auc = 0.7311783960720132
User 17224 AUC after training: 0.7311783960720132
User 17224 does not improve AUC. Reverting changes.
Training on augumented user 75762 42/50 current_auc = 0.7311783960720132
User 75762 AUC after training: 0.7311783960720132
User 75762 does not improve AUC. Reverting changes.
Training on augumented user 35645 43/50 current_auc = 0.7311783960720132
User 35645 AUC after training: 0.7299509001636661
User 35645 does not improve AUC. Reverting changes.
Training on augumented user 19851 44/50 current_auc = 0.7311783960720132
User 19851 AUC after training: 0.7299509001636661
User 19851 does not improve AUC. Reverting changes.
Training on augumented user 61825 45/50 current_auc = 0.7311783960720132
User 61825 AUC after training: 0.7303600654664485
User 61825 does not improve AUC. Reverting changes.
Training on augumented user 110829 46/50 current_auc = 0.7311783960720132
User 110829 AUC after training: 0.7291325695581016
User 110829 does not improve AUC. Reverting changes.
Training on augumented user 18443 47/50 current_auc = 0.7311783960720132
User 18443 AUC after training: 0.7299509001636661
User 18443 does not improve AUC. Reverting changes.
Training on augumented user 26411 48/50 current_auc = 0.7311783960720132
User 26411 AUC after training: 0.7299509001636661
User 26411 does not improve AUC. Reverting changes.
Training on augumented user 77881 49/50 current_auc = 0.7311783960720132
User 77881 AUC after training: 0.7311783960720132
User 77881 does not improve AUC. Reverting changes.
[2024-12-02 20:08:45.029640] start test user 34238 269/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:45.544801] start test user 34238 269/568 recall augumented users by random, augumented_users = [13563, 72499, 44837, 9577, 56842, 102456, 39084, 28841, 85169, 124872, 132431, 6781, 75564, 130258, 99598, 83865, 92274, 119373, 123105, 14373, 33115, 136757, 136919, 101680, 48644, 8362, 111032, 103328, 128377, 125255, 125942, 98141, 53122, 120838, 128742, 33620, 1076, 121134, 104549, 20419, 53083, 27509, 42972, 124474, 128496, 78442, 5847, 57964, 37344, 106822]
[2024-12-02 20:08:45.559564] user = 34238 Cloud 269/568
[2024-12-02 20:08:45.568873] user = 34238 Local 269/568
[2024-12-02 20:08:45.624290] user = 34238 Local+ 269/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:47.842023] user = 34238 MPDA- 269/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7916666666666667
Training on augumented user 13563 0/50 current_auc = 0.7916666666666667
User 13563 AUC after training: 0.7916666666666667
User 13563 does not improve AUC. Reverting changes.
Training on augumented user 72499 1/50 current_auc = 0.7916666666666667
User 72499 AUC after training: 0.7916666666666667
User 72499 does not improve AUC. Reverting changes.
Training on augumented user 44837 2/50 current_auc = 0.7916666666666667
User 44837 AUC after training: 0.7916666666666667
User 44837 does not improve AUC. Reverting changes.
Training on augumented user 9577 3/50 current_auc = 0.7916666666666667
User 9577 AUC after training: 0.7916666666666667
User 9577 does not improve AUC. Reverting changes.
Training on augumented user 56842 4/50 current_auc = 0.7916666666666667
User 56842 AUC after training: 0.7916666666666667
User 56842 does not improve AUC. Reverting changes.
Training on augumented user 102456 5/50 current_auc = 0.7916666666666667
User 102456 AUC after training: 0.7916666666666667
User 102456 does not improve AUC. Reverting changes.
Training on augumented user 39084 6/50 current_auc = 0.7916666666666667
User 39084 AUC after training: 0.7916666666666667
User 39084 does not improve AUC. Reverting changes.
Training on augumented user 28841 7/50 current_auc = 0.7916666666666667
User 28841 AUC after training: 0.7916666666666667
User 28841 does not improve AUC. Reverting changes.
Training on augumented user 85169 8/50 current_auc = 0.7916666666666667
User 85169 AUC after training: 0.7916666666666667
User 85169 does not improve AUC. Reverting changes.
Training on augumented user 124872 9/50 current_auc = 0.7916666666666667
User 124872 AUC after training: 0.7916666666666667
User 124872 does not improve AUC. Reverting changes.
Training on augumented user 132431 10/50 current_auc = 0.7916666666666667
User 132431 AUC after training: 0.7916666666666667
User 132431 does not improve AUC. Reverting changes.
Training on augumented user 6781 11/50 current_auc = 0.7916666666666667
User 6781 AUC after training: 0.7916666666666667
User 6781 does not improve AUC. Reverting changes.
Training on augumented user 75564 12/50 current_auc = 0.7916666666666667
User 75564 AUC after training: 0.7916666666666667
User 75564 does not improve AUC. Reverting changes.
Training on augumented user 130258 13/50 current_auc = 0.7916666666666667
User 130258 AUC after training: 0.7916666666666667
User 130258 does not improve AUC. Reverting changes.
Training on augumented user 99598 14/50 current_auc = 0.7916666666666667
User 99598 AUC after training: 0.7916666666666667
User 99598 does not improve AUC. Reverting changes.
Training on augumented user 83865 15/50 current_auc = 0.7916666666666667
User 83865 AUC after training: 0.7916666666666667
User 83865 does not improve AUC. Reverting changes.
Training on augumented user 92274 16/50 current_auc = 0.7916666666666667
User 92274 AUC after training: 0.7916666666666667
User 92274 does not improve AUC. Reverting changes.
Training on augumented user 119373 17/50 current_auc = 0.7916666666666667
User 119373 AUC after training: 0.7916666666666667
User 119373 does not improve AUC. Reverting changes.
Training on augumented user 123105 18/50 current_auc = 0.7916666666666667
User 123105 AUC after training: 0.7916666666666667
User 123105 does not improve AUC. Reverting changes.
Training on augumented user 14373 19/50 current_auc = 0.7916666666666667
User 14373 AUC after training: 0.7916666666666667
User 14373 does not improve AUC. Reverting changes.
Training on augumented user 33115 20/50 current_auc = 0.7916666666666667
User 33115 AUC after training: 0.7916666666666667
User 33115 does not improve AUC. Reverting changes.
Training on augumented user 136757 21/50 current_auc = 0.7916666666666667
User 136757 AUC after training: 0.7916666666666667
User 136757 does not improve AUC. Reverting changes.
Training on augumented user 136919 22/50 current_auc = 0.7916666666666667
User 136919 AUC after training: 0.7916666666666667
User 136919 does not improve AUC. Reverting changes.
Training on augumented user 101680 23/50 current_auc = 0.7916666666666667
User 101680 AUC after training: 0.7916666666666667
User 101680 does not improve AUC. Reverting changes.
Training on augumented user 48644 24/50 current_auc = 0.7916666666666667
User 48644 AUC after training: 0.7916666666666667
User 48644 does not improve AUC. Reverting changes.
Training on augumented user 8362 25/50 current_auc = 0.7916666666666667
User 8362 AUC after training: 0.7916666666666667
User 8362 does not improve AUC. Reverting changes.
Training on augumented user 111032 26/50 current_auc = 0.7916666666666667
User 111032 AUC after training: 0.7916666666666667
User 111032 does not improve AUC. Reverting changes.
Training on augumented user 103328 27/50 current_auc = 0.7916666666666667
User 103328 AUC after training: 0.7916666666666667
User 103328 does not improve AUC. Reverting changes.
Training on augumented user 128377 28/50 current_auc = 0.7916666666666667
User 128377 AUC after training: 0.7916666666666667
User 128377 does not improve AUC. Reverting changes.
Training on augumented user 125255 29/50 current_auc = 0.7916666666666667
User 125255 AUC after training: 0.7916666666666667
User 125255 does not improve AUC. Reverting changes.
Training on augumented user 125942 30/50 current_auc = 0.7916666666666667
User 125942 AUC after training: 0.7916666666666667
User 125942 does not improve AUC. Reverting changes.
Training on augumented user 98141 31/50 current_auc = 0.7916666666666667
User 98141 AUC after training: 0.7916666666666667
User 98141 does not improve AUC. Reverting changes.
Training on augumented user 53122 32/50 current_auc = 0.7916666666666667
User 53122 AUC after training: 0.7916666666666667
User 53122 does not improve AUC. Reverting changes.
Training on augumented user 120838 33/50 current_auc = 0.7916666666666667
User 120838 AUC after training: 0.7916666666666667
User 120838 does not improve AUC. Reverting changes.
Training on augumented user 128742 34/50 current_auc = 0.7916666666666667
User 128742 AUC after training: 0.7916666666666667
User 128742 does not improve AUC. Reverting changes.
Training on augumented user 33620 35/50 current_auc = 0.7916666666666667
User 33620 AUC after training: 0.7916666666666667
User 33620 does not improve AUC. Reverting changes.
Training on augumented user 1076 36/50 current_auc = 0.7916666666666667
User 1076 AUC after training: 0.7916666666666667
User 1076 does not improve AUC. Reverting changes.
Training on augumented user 121134 37/50 current_auc = 0.7916666666666667
User 121134 AUC after training: 0.7916666666666667
User 121134 does not improve AUC. Reverting changes.
Training on augumented user 104549 38/50 current_auc = 0.7916666666666667
User 104549 AUC after training: 0.7916666666666667
User 104549 does not improve AUC. Reverting changes.
Training on augumented user 20419 39/50 current_auc = 0.7916666666666667
User 20419 AUC after training: 0.7916666666666667
User 20419 does not improve AUC. Reverting changes.
Training on augumented user 53083 40/50 current_auc = 0.7916666666666667
User 53083 AUC after training: 0.7916666666666667
User 53083 does not improve AUC. Reverting changes.
Training on augumented user 27509 41/50 current_auc = 0.7916666666666667
User 27509 AUC after training: 0.7916666666666667
User 27509 does not improve AUC. Reverting changes.
Training on augumented user 42972 42/50 current_auc = 0.7916666666666667
User 42972 AUC after training: 0.7916666666666667
User 42972 does not improve AUC. Reverting changes.
Training on augumented user 124474 43/50 current_auc = 0.7916666666666667
User 124474 AUC after training: 0.7916666666666667
User 124474 does not improve AUC. Reverting changes.
Training on augumented user 128496 44/50 current_auc = 0.7916666666666667
User 128496 AUC after training: 0.7916666666666667
User 128496 does not improve AUC. Reverting changes.
Training on augumented user 78442 45/50 current_auc = 0.7916666666666667
User 78442 AUC after training: 0.7916666666666667
User 78442 does not improve AUC. Reverting changes.
Training on augumented user 5847 46/50 current_auc = 0.7916666666666667
User 5847 AUC after training: 0.7916666666666667
User 5847 does not improve AUC. Reverting changes.
Training on augumented user 57964 47/50 current_auc = 0.7916666666666667
User 57964 AUC after training: 0.7916666666666667
User 57964 does not improve AUC. Reverting changes.
Training on augumented user 37344 48/50 current_auc = 0.7916666666666667
User 37344 AUC after training: 0.7916666666666667
User 37344 does not improve AUC. Reverting changes.
Training on augumented user 106822 49/50 current_auc = 0.7916666666666667
User 106822 AUC after training: 0.7916666666666667
User 106822 does not improve AUC. Reverting changes.
[2024-12-02 20:09:18.309156] start test user 34289 270/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:18.856054] start test user 34289 270/568 recall augumented users by random, augumented_users = [14327, 16724, 8073, 133805, 22786, 74228, 58992, 31182, 3585, 97659, 71595, 85417, 50906, 98456, 62701, 62984, 113159, 13819, 86315, 123839, 17329, 15193, 19119, 50880, 131747, 67766, 122952, 57366, 68459, 127601, 92112, 43295, 35469, 72562, 24455, 40111, 54515, 70058, 81833, 118238, 32325, 28004, 90014, 2372, 79239, 90381, 84765, 47115, 64295, 97584]
[2024-12-02 20:09:18.873576] user = 34289 Cloud 270/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:09:18.881074] user = 34289 Local 270/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:09:19.057049] user = 34289 Local+ 270/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:09:22.365464] user = 34289 MPDA- 270/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 14327 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14327 AUC after training: 0.5
User 14327 does not improve AUC. Reverting changes.
Training on augumented user 16724 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16724 AUC after training: 0.5
User 16724 does not improve AUC. Reverting changes.
Training on augumented user 8073 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8073 AUC after training: 0.5
User 8073 does not improve AUC. Reverting changes.
Training on augumented user 133805 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133805 AUC after training: 0.5
User 133805 does not improve AUC. Reverting changes.
Training on augumented user 22786 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22786 AUC after training: 0.5
User 22786 does not improve AUC. Reverting changes.
Training on augumented user 74228 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74228 AUC after training: 0.5
User 74228 does not improve AUC. Reverting changes.
Training on augumented user 58992 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58992 AUC after training: 0.5
User 58992 does not improve AUC. Reverting changes.
Training on augumented user 31182 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31182 AUC after training: 0.5
User 31182 does not improve AUC. Reverting changes.
Training on augumented user 3585 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3585 AUC after training: 0.5
User 3585 does not improve AUC. Reverting changes.
Training on augumented user 97659 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97659 AUC after training: 0.5
User 97659 does not improve AUC. Reverting changes.
Training on augumented user 71595 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71595 AUC after training: 0.5
User 71595 does not improve AUC. Reverting changes.
Training on augumented user 85417 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85417 AUC after training: 0.5
User 85417 does not improve AUC. Reverting changes.
Training on augumented user 50906 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50906 AUC after training: 0.5
User 50906 does not improve AUC. Reverting changes.
Training on augumented user 98456 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98456 AUC after training: 0.5
User 98456 does not improve AUC. Reverting changes.
Training on augumented user 62701 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62701 AUC after training: 0.5
User 62701 does not improve AUC. Reverting changes.
Training on augumented user 62984 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62984 AUC after training: 0.5
User 62984 does not improve AUC. Reverting changes.
Training on augumented user 113159 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113159 AUC after training: 0.5
User 113159 does not improve AUC. Reverting changes.
Training on augumented user 13819 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13819 AUC after training: 0.5
User 13819 does not improve AUC. Reverting changes.
Training on augumented user 86315 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86315 AUC after training: 0.5
User 86315 does not improve AUC. Reverting changes.
Training on augumented user 123839 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123839 AUC after training: 0.5
User 123839 does not improve AUC. Reverting changes.
Training on augumented user 17329 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17329 AUC after training: 0.5
User 17329 does not improve AUC. Reverting changes.
Training on augumented user 15193 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15193 AUC after training: 0.5
User 15193 does not improve AUC. Reverting changes.
Training on augumented user 19119 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19119 AUC after training: 0.5
User 19119 does not improve AUC. Reverting changes.
Training on augumented user 50880 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50880 AUC after training: 0.5
User 50880 does not improve AUC. Reverting changes.
Training on augumented user 131747 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131747 AUC after training: 0.5
User 131747 does not improve AUC. Reverting changes.
Training on augumented user 67766 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67766 AUC after training: 0.5
User 67766 does not improve AUC. Reverting changes.
Training on augumented user 122952 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122952 AUC after training: 0.5
User 122952 does not improve AUC. Reverting changes.
Training on augumented user 57366 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57366 AUC after training: 0.5
User 57366 does not improve AUC. Reverting changes.
Training on augumented user 68459 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68459 AUC after training: 0.5
User 68459 does not improve AUC. Reverting changes.
Training on augumented user 127601 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127601 AUC after training: 0.5
User 127601 does not improve AUC. Reverting changes.
Training on augumented user 92112 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92112 AUC after training: 0.5
User 92112 does not improve AUC. Reverting changes.
Training on augumented user 43295 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43295 AUC after training: 0.5
User 43295 does not improve AUC. Reverting changes.
Training on augumented user 35469 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35469 AUC after training: 0.5
User 35469 does not improve AUC. Reverting changes.
Training on augumented user 72562 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72562 AUC after training: 0.5
User 72562 does not improve AUC. Reverting changes.
Training on augumented user 24455 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24455 AUC after training: 0.5
User 24455 does not improve AUC. Reverting changes.
Training on augumented user 40111 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40111 AUC after training: 0.5
User 40111 does not improve AUC. Reverting changes.
Training on augumented user 54515 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54515 AUC after training: 0.5
User 54515 does not improve AUC. Reverting changes.
Training on augumented user 70058 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70058 AUC after training: 0.5
User 70058 does not improve AUC. Reverting changes.
Training on augumented user 81833 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81833 AUC after training: 0.5
User 81833 does not improve AUC. Reverting changes.
Training on augumented user 118238 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118238 AUC after training: 0.5
User 118238 does not improve AUC. Reverting changes.
Training on augumented user 32325 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32325 AUC after training: 0.5
User 32325 does not improve AUC. Reverting changes.
Training on augumented user 28004 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28004 AUC after training: 0.5
User 28004 does not improve AUC. Reverting changes.
Training on augumented user 90014 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90014 AUC after training: 0.5
User 90014 does not improve AUC. Reverting changes.
Training on augumented user 2372 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2372 AUC after training: 0.5
User 2372 does not improve AUC. Reverting changes.
Training on augumented user 79239 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79239 AUC after training: 0.5
User 79239 does not improve AUC. Reverting changes.
Training on augumented user 90381 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90381 AUC after training: 0.5
User 90381 does not improve AUC. Reverting changes.
Training on augumented user 84765 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84765 AUC after training: 0.5
User 84765 does not improve AUC. Reverting changes.
Training on augumented user 47115 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47115 AUC after training: 0.5
User 47115 does not improve AUC. Reverting changes.
Training on augumented user 64295 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64295 AUC after training: 0.5
User 64295 does not improve AUC. Reverting changes.
Training on augumented user 97584 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97584 AUC after training: 0.5
User 97584 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:09:51.585345] start test user 34308 271/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:52.036739] start test user 34308 271/568 recall augumented users by random, augumented_users = [36308, 130503, 99087, 115803, 112458, 116710, 15632, 14604, 65204, 122196, 40817, 102690, 56806, 96714, 124560, 131443, 119474, 59375, 95166, 28742, 63861, 7771, 136737, 127370, 24776, 31149, 119687, 125073, 20184, 132543, 16134, 129077, 40277, 53169, 108950, 56522, 111450, 91803, 138477, 114909, 124321, 105274, 100574, 136899, 96215, 25479, 84179, 26472, 72068, 97967]
[2024-12-02 20:09:52.051783] user = 34308 Cloud 271/568
[2024-12-02 20:09:52.073840] user = 34308 Local 271/568
[2024-12-02 20:09:52.116674] user = 34308 Local+ 271/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:54.014001] user = 34308 MPDA- 271/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6915584415584416
Training on augumented user 36308 0/50 current_auc = 0.6915584415584416
User 36308 AUC after training: 0.6948051948051948
User 36308 improves AUC. Keeping the model.
Training on augumented user 130503 1/50 current_auc = 0.6948051948051948
User 130503 AUC after training: 0.6931818181818182
User 130503 does not improve AUC. Reverting changes.
Training on augumented user 99087 2/50 current_auc = 0.6948051948051948
User 99087 AUC after training: 0.6948051948051948
User 99087 does not improve AUC. Reverting changes.
Training on augumented user 115803 3/50 current_auc = 0.6948051948051948
User 115803 AUC after training: 0.6915584415584416
User 115803 does not improve AUC. Reverting changes.
Training on augumented user 112458 4/50 current_auc = 0.6948051948051948
User 112458 AUC after training: 0.6931818181818182
User 112458 does not improve AUC. Reverting changes.
Training on augumented user 116710 5/50 current_auc = 0.6948051948051948
User 116710 AUC after training: 0.6915584415584416
User 116710 does not improve AUC. Reverting changes.
Training on augumented user 15632 6/50 current_auc = 0.6948051948051948
User 15632 AUC after training: 0.6931818181818182
User 15632 does not improve AUC. Reverting changes.
Training on augumented user 14604 7/50 current_auc = 0.6948051948051948
User 14604 AUC after training: 0.6931818181818182
User 14604 does not improve AUC. Reverting changes.
Training on augumented user 65204 8/50 current_auc = 0.6948051948051948
User 65204 AUC after training: 0.6931818181818182
User 65204 does not improve AUC. Reverting changes.
Training on augumented user 122196 9/50 current_auc = 0.6948051948051948
User 122196 AUC after training: 0.6931818181818182
User 122196 does not improve AUC. Reverting changes.
Training on augumented user 40817 10/50 current_auc = 0.6948051948051948
User 40817 AUC after training: 0.6931818181818182
User 40817 does not improve AUC. Reverting changes.
Training on augumented user 102690 11/50 current_auc = 0.6948051948051948
User 102690 AUC after training: 0.6931818181818182
User 102690 does not improve AUC. Reverting changes.
Training on augumented user 56806 12/50 current_auc = 0.6948051948051948
User 56806 AUC after training: 0.6915584415584416
User 56806 does not improve AUC. Reverting changes.
Training on augumented user 96714 13/50 current_auc = 0.6948051948051948
User 96714 AUC after training: 0.6915584415584416
User 96714 does not improve AUC. Reverting changes.
Training on augumented user 124560 14/50 current_auc = 0.6948051948051948
User 124560 AUC after training: 0.6931818181818182
User 124560 does not improve AUC. Reverting changes.
Training on augumented user 131443 15/50 current_auc = 0.6948051948051948
User 131443 AUC after training: 0.6931818181818182
User 131443 does not improve AUC. Reverting changes.
Training on augumented user 119474 16/50 current_auc = 0.6948051948051948
User 119474 AUC after training: 0.6931818181818182
User 119474 does not improve AUC. Reverting changes.
Training on augumented user 59375 17/50 current_auc = 0.6948051948051948
User 59375 AUC after training: 0.6931818181818182
User 59375 does not improve AUC. Reverting changes.
Training on augumented user 95166 18/50 current_auc = 0.6948051948051948
User 95166 AUC after training: 0.6931818181818182
User 95166 does not improve AUC. Reverting changes.
Training on augumented user 28742 19/50 current_auc = 0.6948051948051948
User 28742 AUC after training: 0.6915584415584416
User 28742 does not improve AUC. Reverting changes.
Training on augumented user 63861 20/50 current_auc = 0.6948051948051948
User 63861 AUC after training: 0.6931818181818182
User 63861 does not improve AUC. Reverting changes.
Training on augumented user 7771 21/50 current_auc = 0.6948051948051948
User 7771 AUC after training: 0.6931818181818182
User 7771 does not improve AUC. Reverting changes.
Training on augumented user 136737 22/50 current_auc = 0.6948051948051948
User 136737 AUC after training: 0.6931818181818182
User 136737 does not improve AUC. Reverting changes.
Training on augumented user 127370 23/50 current_auc = 0.6948051948051948
User 127370 AUC after training: 0.6931818181818182
User 127370 does not improve AUC. Reverting changes.
Training on augumented user 24776 24/50 current_auc = 0.6948051948051948
User 24776 AUC after training: 0.6915584415584416
User 24776 does not improve AUC. Reverting changes.
Training on augumented user 31149 25/50 current_auc = 0.6948051948051948
User 31149 AUC after training: 0.6931818181818182
User 31149 does not improve AUC. Reverting changes.
Training on augumented user 119687 26/50 current_auc = 0.6948051948051948
User 119687 AUC after training: 0.6915584415584416
User 119687 does not improve AUC. Reverting changes.
Training on augumented user 125073 27/50 current_auc = 0.6948051948051948
User 125073 AUC after training: 0.689935064935065
User 125073 does not improve AUC. Reverting changes.
Training on augumented user 20184 28/50 current_auc = 0.6948051948051948
User 20184 AUC after training: 0.6915584415584416
User 20184 does not improve AUC. Reverting changes.
Training on augumented user 132543 29/50 current_auc = 0.6948051948051948
User 132543 AUC after training: 0.6931818181818182
User 132543 does not improve AUC. Reverting changes.
Training on augumented user 16134 30/50 current_auc = 0.6948051948051948
User 16134 AUC after training: 0.6931818181818182
User 16134 does not improve AUC. Reverting changes.
Training on augumented user 129077 31/50 current_auc = 0.6948051948051948
User 129077 AUC after training: 0.6931818181818182
User 129077 does not improve AUC. Reverting changes.
Training on augumented user 40277 32/50 current_auc = 0.6948051948051948
User 40277 AUC after training: 0.6931818181818182
User 40277 does not improve AUC. Reverting changes.
Training on augumented user 53169 33/50 current_auc = 0.6948051948051948
User 53169 AUC after training: 0.6915584415584416
User 53169 does not improve AUC. Reverting changes.
Training on augumented user 108950 34/50 current_auc = 0.6948051948051948
User 108950 AUC after training: 0.6931818181818182
User 108950 does not improve AUC. Reverting changes.
Training on augumented user 56522 35/50 current_auc = 0.6948051948051948
User 56522 AUC after training: 0.6915584415584416
User 56522 does not improve AUC. Reverting changes.
Training on augumented user 111450 36/50 current_auc = 0.6948051948051948
User 111450 AUC after training: 0.6931818181818182
User 111450 does not improve AUC. Reverting changes.
Training on augumented user 91803 37/50 current_auc = 0.6948051948051948
User 91803 AUC after training: 0.6948051948051949
User 91803 improves AUC. Keeping the model.
Training on augumented user 138477 38/50 current_auc = 0.6948051948051949
User 138477 AUC after training: 0.6948051948051949
User 138477 does not improve AUC. Reverting changes.
Training on augumented user 114909 39/50 current_auc = 0.6948051948051949
User 114909 AUC after training: 0.6948051948051949
User 114909 does not improve AUC. Reverting changes.
Training on augumented user 124321 40/50 current_auc = 0.6948051948051949
User 124321 AUC after training: 0.6866883116883117
User 124321 does not improve AUC. Reverting changes.
Training on augumented user 105274 41/50 current_auc = 0.6948051948051949
User 105274 AUC after training: 0.6964285714285714
User 105274 improves AUC. Keeping the model.
Training on augumented user 100574 42/50 current_auc = 0.6964285714285714
User 100574 AUC after training: 0.6964285714285714
User 100574 does not improve AUC. Reverting changes.
Training on augumented user 136899 43/50 current_auc = 0.6964285714285714
User 136899 AUC after training: 0.6964285714285714
User 136899 does not improve AUC. Reverting changes.
Training on augumented user 96215 44/50 current_auc = 0.6964285714285714
User 96215 AUC after training: 0.6948051948051948
User 96215 does not improve AUC. Reverting changes.
Training on augumented user 25479 45/50 current_auc = 0.6964285714285714
User 25479 AUC after training: 0.6964285714285714
User 25479 does not improve AUC. Reverting changes.
Training on augumented user 84179 46/50 current_auc = 0.6964285714285714
User 84179 AUC after training: 0.6948051948051948
User 84179 does not improve AUC. Reverting changes.
Training on augumented user 26472 47/50 current_auc = 0.6964285714285714
User 26472 AUC after training: 0.6931818181818182
User 26472 does not improve AUC. Reverting changes.
Training on augumented user 72068 48/50 current_auc = 0.6964285714285714
User 72068 AUC after training: 0.6964285714285714
User 72068 does not improve AUC. Reverting changes.
Training on augumented user 97967 49/50 current_auc = 0.6964285714285714
User 97967 AUC after training: 0.6948051948051949
User 97967 does not improve AUC. Reverting changes.
[2024-12-02 20:10:23.637093] start test user 34324 272/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:24.179779] start test user 34324 272/568 recall augumented users by random, augumented_users = [75873, 23184, 132803, 96837, 74896, 44589, 94441, 44044, 60211, 135394, 101768, 56855, 10572, 121017, 95714, 23161, 62777, 106317, 100103, 130988, 129950, 83177, 12037, 73936, 52911, 118524, 61133, 124101, 80206, 67884, 116932, 127305, 22517, 44208, 23747, 134977, 128579, 82487, 11076, 99558, 32967, 107668, 48585, 31771, 135133, 116038, 18743, 131559, 127310, 117976]
[2024-12-02 20:10:24.194812] user = 34324 Cloud 272/568
[2024-12-02 20:10:24.204554] user = 34324 Local 272/568
[2024-12-02 20:10:24.255934] user = 34324 Local+ 272/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:25.970346] user = 34324 MPDA- 272/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.42857142857142855
Training on augumented user 75873 0/50 current_auc = 0.42857142857142855
User 75873 AUC after training: 0.3571428571428571
User 75873 does not improve AUC. Reverting changes.
Training on augumented user 23184 1/50 current_auc = 0.42857142857142855
User 23184 AUC after training: 0.3571428571428571
User 23184 does not improve AUC. Reverting changes.
Training on augumented user 132803 2/50 current_auc = 0.42857142857142855
User 132803 AUC after training: 0.3571428571428571
User 132803 does not improve AUC. Reverting changes.
Training on augumented user 96837 3/50 current_auc = 0.42857142857142855
User 96837 AUC after training: 0.3571428571428571
User 96837 does not improve AUC. Reverting changes.
Training on augumented user 74896 4/50 current_auc = 0.42857142857142855
User 74896 AUC after training: 0.42857142857142855
User 74896 does not improve AUC. Reverting changes.
Training on augumented user 44589 5/50 current_auc = 0.42857142857142855
User 44589 AUC after training: 0.3571428571428571
User 44589 does not improve AUC. Reverting changes.
Training on augumented user 94441 6/50 current_auc = 0.42857142857142855
User 94441 AUC after training: 0.3571428571428571
User 94441 does not improve AUC. Reverting changes.
Training on augumented user 44044 7/50 current_auc = 0.42857142857142855
User 44044 AUC after training: 0.3571428571428571
User 44044 does not improve AUC. Reverting changes.
Training on augumented user 60211 8/50 current_auc = 0.42857142857142855
User 60211 AUC after training: 0.42857142857142855
User 60211 does not improve AUC. Reverting changes.
Training on augumented user 135394 9/50 current_auc = 0.42857142857142855
User 135394 AUC after training: 0.42857142857142855
User 135394 does not improve AUC. Reverting changes.
Training on augumented user 101768 10/50 current_auc = 0.42857142857142855
User 101768 AUC after training: 0.3571428571428571
User 101768 does not improve AUC. Reverting changes.
Training on augumented user 56855 11/50 current_auc = 0.42857142857142855
User 56855 AUC after training: 0.3571428571428571
User 56855 does not improve AUC. Reverting changes.
Training on augumented user 10572 12/50 current_auc = 0.42857142857142855
User 10572 AUC after training: 0.42857142857142855
User 10572 does not improve AUC. Reverting changes.
Training on augumented user 121017 13/50 current_auc = 0.42857142857142855
User 121017 AUC after training: 0.3571428571428571
User 121017 does not improve AUC. Reverting changes.
Training on augumented user 95714 14/50 current_auc = 0.42857142857142855
User 95714 AUC after training: 0.3571428571428571
User 95714 does not improve AUC. Reverting changes.
Training on augumented user 23161 15/50 current_auc = 0.42857142857142855
User 23161 AUC after training: 0.42857142857142855
User 23161 does not improve AUC. Reverting changes.
Training on augumented user 62777 16/50 current_auc = 0.42857142857142855
User 62777 AUC after training: 0.42857142857142855
User 62777 does not improve AUC. Reverting changes.
Training on augumented user 106317 17/50 current_auc = 0.42857142857142855
User 106317 AUC after training: 0.42857142857142855
User 106317 does not improve AUC. Reverting changes.
Training on augumented user 100103 18/50 current_auc = 0.42857142857142855
User 100103 AUC after training: 0.3571428571428571
User 100103 does not improve AUC. Reverting changes.
Training on augumented user 130988 19/50 current_auc = 0.42857142857142855
User 130988 AUC after training: 0.3571428571428571
User 130988 does not improve AUC. Reverting changes.
Training on augumented user 129950 20/50 current_auc = 0.42857142857142855
User 129950 AUC after training: 0.3571428571428571
User 129950 does not improve AUC. Reverting changes.
Training on augumented user 83177 21/50 current_auc = 0.42857142857142855
User 83177 AUC after training: 0.3571428571428571
User 83177 does not improve AUC. Reverting changes.
Training on augumented user 12037 22/50 current_auc = 0.42857142857142855
User 12037 AUC after training: 0.2857142857142857
User 12037 does not improve AUC. Reverting changes.
Training on augumented user 73936 23/50 current_auc = 0.42857142857142855
User 73936 AUC after training: 0.3571428571428571
User 73936 does not improve AUC. Reverting changes.
Training on augumented user 52911 24/50 current_auc = 0.42857142857142855
User 52911 AUC after training: 0.42857142857142855
User 52911 does not improve AUC. Reverting changes.
Training on augumented user 118524 25/50 current_auc = 0.42857142857142855
User 118524 AUC after training: 0.3571428571428571
User 118524 does not improve AUC. Reverting changes.
Training on augumented user 61133 26/50 current_auc = 0.42857142857142855
User 61133 AUC after training: 0.42857142857142855
User 61133 does not improve AUC. Reverting changes.
Training on augumented user 124101 27/50 current_auc = 0.42857142857142855
User 124101 AUC after training: 0.3571428571428571
User 124101 does not improve AUC. Reverting changes.
Training on augumented user 80206 28/50 current_auc = 0.42857142857142855
User 80206 AUC after training: 0.42857142857142855
User 80206 does not improve AUC. Reverting changes.
Training on augumented user 67884 29/50 current_auc = 0.42857142857142855
User 67884 AUC after training: 0.3571428571428571
User 67884 does not improve AUC. Reverting changes.
Training on augumented user 116932 30/50 current_auc = 0.42857142857142855
User 116932 AUC after training: 0.3571428571428571
User 116932 does not improve AUC. Reverting changes.
Training on augumented user 127305 31/50 current_auc = 0.42857142857142855
User 127305 AUC after training: 0.3571428571428571
User 127305 does not improve AUC. Reverting changes.
Training on augumented user 22517 32/50 current_auc = 0.42857142857142855
User 22517 AUC after training: 0.3571428571428571
User 22517 does not improve AUC. Reverting changes.
Training on augumented user 44208 33/50 current_auc = 0.42857142857142855
User 44208 AUC after training: 0.3571428571428571
User 44208 does not improve AUC. Reverting changes.
Training on augumented user 23747 34/50 current_auc = 0.42857142857142855
User 23747 AUC after training: 0.3571428571428571
User 23747 does not improve AUC. Reverting changes.
Training on augumented user 134977 35/50 current_auc = 0.42857142857142855
User 134977 AUC after training: 0.3571428571428571
User 134977 does not improve AUC. Reverting changes.
Training on augumented user 128579 36/50 current_auc = 0.42857142857142855
User 128579 AUC after training: 0.42857142857142855
User 128579 does not improve AUC. Reverting changes.
Training on augumented user 82487 37/50 current_auc = 0.42857142857142855
User 82487 AUC after training: 0.3571428571428571
User 82487 does not improve AUC. Reverting changes.
Training on augumented user 11076 38/50 current_auc = 0.42857142857142855
User 11076 AUC after training: 0.3571428571428571
User 11076 does not improve AUC. Reverting changes.
Training on augumented user 99558 39/50 current_auc = 0.42857142857142855
User 99558 AUC after training: 0.3571428571428571
User 99558 does not improve AUC. Reverting changes.
Training on augumented user 32967 40/50 current_auc = 0.42857142857142855
User 32967 AUC after training: 0.42857142857142855
User 32967 does not improve AUC. Reverting changes.
Training on augumented user 107668 41/50 current_auc = 0.42857142857142855
User 107668 AUC after training: 0.3571428571428571
User 107668 does not improve AUC. Reverting changes.
Training on augumented user 48585 42/50 current_auc = 0.42857142857142855
User 48585 AUC after training: 0.42857142857142855
User 48585 does not improve AUC. Reverting changes.
Training on augumented user 31771 43/50 current_auc = 0.42857142857142855
User 31771 AUC after training: 0.42857142857142855
User 31771 does not improve AUC. Reverting changes.
Training on augumented user 135133 44/50 current_auc = 0.42857142857142855
User 135133 AUC after training: 0.3571428571428571
User 135133 does not improve AUC. Reverting changes.
Training on augumented user 116038 45/50 current_auc = 0.42857142857142855
User 116038 AUC after training: 0.2857142857142857
User 116038 does not improve AUC. Reverting changes.
Training on augumented user 18743 46/50 current_auc = 0.42857142857142855
User 18743 AUC after training: 0.3571428571428571
User 18743 does not improve AUC. Reverting changes.
Training on augumented user 131559 47/50 current_auc = 0.42857142857142855
User 131559 AUC after training: 0.3571428571428571
User 131559 does not improve AUC. Reverting changes.
Training on augumented user 127310 48/50 current_auc = 0.42857142857142855
User 127310 AUC after training: 0.42857142857142855
User 127310 does not improve AUC. Reverting changes.
Training on augumented user 117976 49/50 current_auc = 0.42857142857142855
User 117976 AUC after training: 0.3571428571428571
User 117976 does not improve AUC. Reverting changes.
[2024-12-02 20:10:52.725872] start test user 34343 273/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:53.618950] start test user 34343 273/568 recall augumented users by random, augumented_users = [52233, 56967, 110611, 50881, 70387, 88826, 124634, 59751, 115518, 105111, 11271, 41559, 22008, 91721, 83423, 63304, 19198, 127934, 83201, 34766, 119197, 84061, 27155, 43640, 115333, 31734, 25323, 63380, 96191, 131227, 137027, 40038, 129723, 53908, 50089, 69847, 8530, 49032, 32554, 72975, 74141, 108066, 21732, 14015, 228, 99628, 6967, 9339, 43775, 89388]
[2024-12-02 20:10:53.647754] user = 34343 Cloud 273/568
[2024-12-02 20:10:53.666737] user = 34343 Local 273/568
[2024-12-02 20:10:53.709860] user = 34343 Local+ 273/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:56.492214] user = 34343 MPDA- 273/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6719258295380611
Training on augumented user 52233 0/50 current_auc = 0.6719258295380611
User 52233 AUC after training: 0.671925829538061
User 52233 does not improve AUC. Reverting changes.
Training on augumented user 56967 1/50 current_auc = 0.6719258295380611
User 56967 AUC after training: 0.6727391021470397
User 56967 improves AUC. Keeping the model.
Training on augumented user 110611 2/50 current_auc = 0.6727391021470397
User 110611 AUC after training: 0.6727391021470397
User 110611 does not improve AUC. Reverting changes.
Training on augumented user 50881 3/50 current_auc = 0.6727391021470397
User 50881 AUC after training: 0.6735523747560183
User 50881 improves AUC. Keeping the model.
Training on augumented user 70387 4/50 current_auc = 0.6735523747560183
User 70387 AUC after training: 0.6720884840598569
User 70387 does not improve AUC. Reverting changes.
Training on augumented user 88826 5/50 current_auc = 0.6735523747560183
User 88826 AUC after training: 0.6727391021470397
User 88826 does not improve AUC. Reverting changes.
Training on augumented user 124634 6/50 current_auc = 0.6735523747560183
User 124634 AUC after training: 0.6740403383214053
User 124634 improves AUC. Keeping the model.
Training on augumented user 59751 7/50 current_auc = 0.6740403383214053
User 59751 AUC after training: 0.6743656473649968
User 59751 improves AUC. Keeping the model.
Training on augumented user 115518 8/50 current_auc = 0.6743656473649968
User 115518 AUC after training: 0.6737150292778139
User 115518 does not improve AUC. Reverting changes.
Training on augumented user 105111 9/50 current_auc = 0.6743656473649968
User 105111 AUC after training: 0.6738776837996097
User 105111 does not improve AUC. Reverting changes.
Training on augumented user 11271 10/50 current_auc = 0.6743656473649968
User 11271 AUC after training: 0.6733897202342225
User 11271 does not improve AUC. Reverting changes.
Training on augumented user 41559 11/50 current_auc = 0.6743656473649968
User 41559 AUC after training: 0.6743656473649967
User 41559 does not improve AUC. Reverting changes.
Training on augumented user 22008 12/50 current_auc = 0.6743656473649968
User 22008 AUC after training: 0.6727391021470397
User 22008 does not improve AUC. Reverting changes.
Training on augumented user 91721 13/50 current_auc = 0.6743656473649968
User 91721 AUC after training: 0.6733897202342225
User 91721 does not improve AUC. Reverting changes.
Training on augumented user 83423 14/50 current_auc = 0.6743656473649968
User 83423 AUC after training: 0.6733897202342225
User 83423 does not improve AUC. Reverting changes.
Training on augumented user 63304 15/50 current_auc = 0.6743656473649968
User 63304 AUC after training: 0.6740403383214053
User 63304 does not improve AUC. Reverting changes.
Training on augumented user 19198 16/50 current_auc = 0.6743656473649968
User 19198 AUC after training: 0.6740403383214053
User 19198 does not improve AUC. Reverting changes.
Training on augumented user 127934 17/50 current_auc = 0.6743656473649968
User 127934 AUC after training: 0.6733897202342225
User 127934 does not improve AUC. Reverting changes.
Training on augumented user 83201 18/50 current_auc = 0.6743656473649968
User 83201 AUC after training: 0.6737150292778139
User 83201 does not improve AUC. Reverting changes.
Training on augumented user 34766 19/50 current_auc = 0.6743656473649968
User 34766 AUC after training: 0.6737150292778139
User 34766 does not improve AUC. Reverting changes.
Training on augumented user 119197 20/50 current_auc = 0.6743656473649968
User 119197 AUC after training: 0.6724137931034483
User 119197 does not improve AUC. Reverting changes.
Training on augumented user 84061 21/50 current_auc = 0.6743656473649968
User 84061 AUC after training: 0.6724137931034483
User 84061 does not improve AUC. Reverting changes.
Training on augumented user 27155 22/50 current_auc = 0.6743656473649968
User 27155 AUC after training: 0.6743656473649968
User 27155 does not improve AUC. Reverting changes.
Training on augumented user 43640 23/50 current_auc = 0.6743656473649968
User 43640 AUC after training: 0.6737150292778139
User 43640 does not improve AUC. Reverting changes.
Training on augumented user 115333 24/50 current_auc = 0.6743656473649968
User 115333 AUC after training: 0.6759921925829537
User 115333 improves AUC. Keeping the model.
Training on augumented user 31734 25/50 current_auc = 0.6759921925829537
User 31734 AUC after training: 0.6745283018867925
User 31734 does not improve AUC. Reverting changes.
Training on augumented user 25323 26/50 current_auc = 0.6759921925829537
User 25323 AUC after training: 0.6750162654521796
User 25323 does not improve AUC. Reverting changes.
Training on augumented user 63380 27/50 current_auc = 0.6759921925829537
User 63380 AUC after training: 0.6727391021470397
User 63380 does not improve AUC. Reverting changes.
Training on augumented user 96191 28/50 current_auc = 0.6759921925829537
User 96191 AUC after training: 0.6759921925829537
User 96191 does not improve AUC. Reverting changes.
Training on augumented user 131227 29/50 current_auc = 0.6759921925829537
User 131227 AUC after training: 0.6740403383214053
User 131227 does not improve AUC. Reverting changes.
Training on augumented user 137027 30/50 current_auc = 0.6759921925829537
User 137027 AUC after training: 0.6745283018867925
User 137027 does not improve AUC. Reverting changes.
Training on augumented user 40038 31/50 current_auc = 0.6759921925829537
User 40038 AUC after training: 0.6753415744957709
User 40038 does not improve AUC. Reverting changes.
Training on augumented user 129723 32/50 current_auc = 0.6759921925829537
User 129723 AUC after training: 0.6751789199739753
User 129723 does not improve AUC. Reverting changes.
Training on augumented user 53908 33/50 current_auc = 0.6759921925829537
User 53908 AUC after training: 0.6751789199739753
User 53908 does not improve AUC. Reverting changes.
Training on augumented user 50089 34/50 current_auc = 0.6759921925829537
User 50089 AUC after training: 0.6740403383214053
User 50089 does not improve AUC. Reverting changes.
Training on augumented user 69847 35/50 current_auc = 0.6759921925829537
User 69847 AUC after training: 0.6743656473649967
User 69847 does not improve AUC. Reverting changes.
Training on augumented user 8530 36/50 current_auc = 0.6759921925829537
User 8530 AUC after training: 0.6750162654521796
User 8530 does not improve AUC. Reverting changes.
Training on augumented user 49032 37/50 current_auc = 0.6759921925829537
User 49032 AUC after training: 0.6730644111906311
User 49032 does not improve AUC. Reverting changes.
Training on augumented user 32554 38/50 current_auc = 0.6759921925829537
User 32554 AUC after training: 0.6746909564085881
User 32554 does not improve AUC. Reverting changes.
Training on augumented user 72975 39/50 current_auc = 0.6759921925829537
User 72975 AUC after training: 0.6761548471047495
User 72975 improves AUC. Keeping the model.
Training on augumented user 74141 40/50 current_auc = 0.6761548471047495
User 74141 AUC after training: 0.6750162654521796
User 74141 does not improve AUC. Reverting changes.
Training on augumented user 108066 41/50 current_auc = 0.6761548471047495
User 108066 AUC after training: 0.6766428106701367
User 108066 improves AUC. Keeping the model.
Training on augumented user 21732 42/50 current_auc = 0.6766428106701367
User 21732 AUC after training: 0.6759921925829537
User 21732 does not improve AUC. Reverting changes.
Training on augumented user 14015 43/50 current_auc = 0.6766428106701367
User 14015 AUC after training: 0.6766428106701367
User 14015 does not improve AUC. Reverting changes.
Training on augumented user 228 44/50 current_auc = 0.6766428106701367
User 228 AUC after training: 0.676480156148341
User 228 does not improve AUC. Reverting changes.
Training on augumented user 99628 45/50 current_auc = 0.6766428106701367
User 99628 AUC after training: 0.6769681197137281
User 99628 improves AUC. Keeping the model.
Training on augumented user 6967 46/50 current_auc = 0.6769681197137281
User 6967 AUC after training: 0.6759921925829537
User 6967 does not improve AUC. Reverting changes.
Training on augumented user 9339 47/50 current_auc = 0.6769681197137281
User 9339 AUC after training: 0.6735523747560181
User 9339 does not improve AUC. Reverting changes.
Training on augumented user 43775 48/50 current_auc = 0.6769681197137281
User 43775 AUC after training: 0.6763175016265452
User 43775 does not improve AUC. Reverting changes.
Training on augumented user 89388 49/50 current_auc = 0.6769681197137281
User 89388 AUC after training: 0.6746909564085881
User 89388 does not improve AUC. Reverting changes.
[2024-12-02 20:11:24.435120] start test user 34366 274/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:25.259549] start test user 34366 274/568 recall augumented users by random, augumented_users = [83255, 5660, 91461, 133402, 137519, 23455, 24273, 44511, 18750, 125495, 131566, 124335, 28186, 49444, 18609, 90995, 28125, 31489, 136410, 100903, 115200, 132561, 98057, 124299, 61587, 122142, 126387, 25056, 77178, 70377, 123491, 68091, 133885, 97898, 93465, 21698, 65994, 13434, 57109, 125018, 115739, 95445, 89766, 78191, 49117, 74291, 80239, 58413, 122199, 344]
[2024-12-02 20:11:25.275122] user = 34366 Cloud 274/568
[2024-12-02 20:11:25.290138] user = 34366 Local 274/568
[2024-12-02 20:11:25.375452] user = 34366 Local+ 274/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:28.118337] user = 34366 MPDA- 274/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6722252597047568
Training on augumented user 83255 0/50 current_auc = 0.6722252597047568
User 83255 AUC after training: 0.6806998359759431
User 83255 improves AUC. Keeping the model.
Training on augumented user 5660 1/50 current_auc = 0.6806998359759431
User 5660 AUC after training: 0.6763258611262986
User 5660 does not improve AUC. Reverting changes.
Training on augumented user 91461 2/50 current_auc = 0.6806998359759431
User 91461 AUC after training: 0.6765992345544013
User 91461 does not improve AUC. Reverting changes.
Training on augumented user 133402 3/50 current_auc = 0.6806998359759431
User 133402 AUC after training: 0.6776927282668124
User 133402 does not improve AUC. Reverting changes.
Training on augumented user 137519 4/50 current_auc = 0.6806998359759431
User 137519 AUC after training: 0.6806998359759431
User 137519 does not improve AUC. Reverting changes.
Training on augumented user 23455 5/50 current_auc = 0.6806998359759431
User 23455 AUC after training: 0.6801530891197376
User 23455 does not improve AUC. Reverting changes.
Training on augumented user 24273 6/50 current_auc = 0.6806998359759431
User 24273 AUC after training: 0.6779661016949151
User 24273 does not improve AUC. Reverting changes.
Training on augumented user 44511 7/50 current_auc = 0.6806998359759431
User 44511 AUC after training: 0.6763258611262984
User 44511 does not improve AUC. Reverting changes.
Training on augumented user 18750 8/50 current_auc = 0.6806998359759431
User 18750 AUC after training: 0.6801530891197375
User 18750 does not improve AUC. Reverting changes.
Training on augumented user 125495 9/50 current_auc = 0.6806998359759431
User 125495 AUC after training: 0.6812465828321487
User 125495 improves AUC. Keeping the model.
Training on augumented user 131566 10/50 current_auc = 0.6812465828321487
User 131566 AUC after training: 0.6806998359759431
User 131566 does not improve AUC. Reverting changes.
Training on augumented user 124335 11/50 current_auc = 0.6812465828321487
User 124335 AUC after training: 0.6823400765445599
User 124335 improves AUC. Keeping the model.
Training on augumented user 28186 12/50 current_auc = 0.6823400765445599
User 28186 AUC after training: 0.6752323674138874
User 28186 does not improve AUC. Reverting changes.
Training on augumented user 49444 13/50 current_auc = 0.6823400765445599
User 49444 AUC after training: 0.6823400765445599
User 49444 does not improve AUC. Reverting changes.
Training on augumented user 18609 14/50 current_auc = 0.6823400765445599
User 18609 AUC after training: 0.6812465828321487
User 18609 does not improve AUC. Reverting changes.
Training on augumented user 90995 15/50 current_auc = 0.6823400765445599
User 90995 AUC after training: 0.6765992345544012
User 90995 does not improve AUC. Reverting changes.
Training on augumented user 28125 16/50 current_auc = 0.6823400765445599
User 28125 AUC after training: 0.6817933296883543
User 28125 does not improve AUC. Reverting changes.
Training on augumented user 31489 17/50 current_auc = 0.6823400765445599
User 31489 AUC after training: 0.6812465828321487
User 31489 does not improve AUC. Reverting changes.
Training on augumented user 136410 18/50 current_auc = 0.6823400765445599
User 136410 AUC after training: 0.6806998359759432
User 136410 does not improve AUC. Reverting changes.
Training on augumented user 100903 19/50 current_auc = 0.6823400765445599
User 100903 AUC after training: 0.6779661016949152
User 100903 does not improve AUC. Reverting changes.
Training on augumented user 115200 20/50 current_auc = 0.6823400765445599
User 115200 AUC after training: 0.6817933296883543
User 115200 does not improve AUC. Reverting changes.
Training on augumented user 132561 21/50 current_auc = 0.6823400765445599
User 132561 AUC after training: 0.6823400765445599
User 132561 does not improve AUC. Reverting changes.
Training on augumented user 98057 22/50 current_auc = 0.6823400765445599
User 98057 AUC after training: 0.6804264625478402
User 98057 does not improve AUC. Reverting changes.
Training on augumented user 124299 23/50 current_auc = 0.6823400765445599
User 124299 AUC after training: 0.6806998359759432
User 124299 does not improve AUC. Reverting changes.
Training on augumented user 61587 24/50 current_auc = 0.6823400765445599
User 61587 AUC after training: 0.6817933296883543
User 61587 does not improve AUC. Reverting changes.
Training on augumented user 122142 25/50 current_auc = 0.6823400765445599
User 122142 AUC after training: 0.6812465828321487
User 122142 does not improve AUC. Reverting changes.
Training on augumented user 126387 26/50 current_auc = 0.6823400765445599
User 126387 AUC after training: 0.6806998359759432
User 126387 does not improve AUC. Reverting changes.
Training on augumented user 25056 27/50 current_auc = 0.6823400765445599
User 25056 AUC after training: 0.6812465828321488
User 25056 does not improve AUC. Reverting changes.
Training on augumented user 77178 28/50 current_auc = 0.6823400765445599
User 77178 AUC after training: 0.6801530891197375
User 77178 does not improve AUC. Reverting changes.
Training on augumented user 70377 29/50 current_auc = 0.6823400765445599
User 70377 AUC after training: 0.6823400765445599
User 70377 does not improve AUC. Reverting changes.
Training on augumented user 123491 30/50 current_auc = 0.6823400765445599
User 123491 AUC after training: 0.6817933296883543
User 123491 does not improve AUC. Reverting changes.
Training on augumented user 68091 31/50 current_auc = 0.6823400765445599
User 68091 AUC after training: 0.6817933296883543
User 68091 does not improve AUC. Reverting changes.
Training on augumented user 133885 32/50 current_auc = 0.6823400765445599
User 133885 AUC after training: 0.6817933296883543
User 133885 does not improve AUC. Reverting changes.
Training on augumented user 97898 33/50 current_auc = 0.6823400765445599
User 97898 AUC after training: 0.6812465828321487
User 97898 does not improve AUC. Reverting changes.
Training on augumented user 93465 34/50 current_auc = 0.6823400765445599
User 93465 AUC after training: 0.6817933296883543
User 93465 does not improve AUC. Reverting changes.
Training on augumented user 21698 35/50 current_auc = 0.6823400765445599
User 21698 AUC after training: 0.6812465828321488
User 21698 does not improve AUC. Reverting changes.
Training on augumented user 65994 36/50 current_auc = 0.6823400765445599
User 65994 AUC after training: 0.6817933296883543
User 65994 does not improve AUC. Reverting changes.
Training on augumented user 13434 37/50 current_auc = 0.6823400765445599
User 13434 AUC after training: 0.6686714051394205
User 13434 does not improve AUC. Reverting changes.
Training on augumented user 57109 38/50 current_auc = 0.6823400765445599
User 57109 AUC after training: 0.6801530891197376
User 57109 does not improve AUC. Reverting changes.
Training on augumented user 125018 39/50 current_auc = 0.6823400765445599
User 125018 AUC after training: 0.6801530891197375
User 125018 does not improve AUC. Reverting changes.
Training on augumented user 115739 40/50 current_auc = 0.6823400765445599
User 115739 AUC after training: 0.6801530891197376
User 115739 does not improve AUC. Reverting changes.
Training on augumented user 95445 41/50 current_auc = 0.6823400765445599
User 95445 AUC after training: 0.6823400765445599
User 95445 does not improve AUC. Reverting changes.
Training on augumented user 89766 42/50 current_auc = 0.6823400765445599
User 89766 AUC after training: 0.6801530891197376
User 89766 does not improve AUC. Reverting changes.
Training on augumented user 78191 43/50 current_auc = 0.6823400765445599
User 78191 AUC after training: 0.6779661016949152
User 78191 does not improve AUC. Reverting changes.
Training on augumented user 49117 44/50 current_auc = 0.6823400765445599
User 49117 AUC after training: 0.6804264625478403
User 49117 does not improve AUC. Reverting changes.
Training on augumented user 74291 45/50 current_auc = 0.6823400765445599
User 74291 AUC after training: 0.6826134499726626
User 74291 improves AUC. Keeping the model.
Training on augumented user 80239 46/50 current_auc = 0.6826134499726626
User 80239 AUC after training: 0.6796063422635319
User 80239 does not improve AUC. Reverting changes.
Training on augumented user 58413 47/50 current_auc = 0.6826134499726626
User 58413 AUC after training: 0.683433570256971
User 58413 improves AUC. Keeping the model.
Training on augumented user 122199 48/50 current_auc = 0.683433570256971
User 122199 AUC after training: 0.683433570256971
User 122199 does not improve AUC. Reverting changes.
Training on augumented user 344 49/50 current_auc = 0.683433570256971
User 344 AUC after training: 0.6817933296883543
User 344 does not improve AUC. Reverting changes.
[2024-12-02 20:12:00.873514] start test user 34402 275/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:01.656488] start test user 34402 275/568 recall augumented users by random, augumented_users = [105226, 104170, 109350, 93987, 108621, 54365, 104981, 108332, 41543, 112358, 83796, 118406, 61854, 131997, 62460, 28298, 92482, 10747, 70971, 75583, 6653, 103316, 108150, 129880, 47689, 84524, 54602, 121379, 94215, 73163, 4687, 28384, 98977, 61536, 92194, 44278, 82168, 62910, 5884, 13505, 138424, 95158, 106418, 136296, 23848, 74463, 128605, 90165, 53990, 88736]
[2024-12-02 20:12:01.675644] user = 34402 Cloud 275/568
[2024-12-02 20:12:01.729537] user = 34402 Local 275/568
[2024-12-02 20:12:02.011489] user = 34402 Local+ 275/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:05.089305] user = 34402 MPDA- 275/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6040541488391666
Training on augumented user 105226 0/50 current_auc = 0.6040541488391666
User 105226 AUC after training: 0.6040822052325174
User 105226 improves AUC. Keeping the model.
Training on augumented user 104170 1/50 current_auc = 0.6040822052325174
User 104170 AUC after training: 0.604418881952725
User 104170 improves AUC. Keeping the model.
Training on augumented user 109350 2/50 current_auc = 0.604418881952725
User 109350 AUC after training: 0.604110261625868
User 109350 does not improve AUC. Reverting changes.
Training on augumented user 93987 3/50 current_auc = 0.604418881952725
User 93987 AUC after training: 0.6042785999859718
User 93987 does not improve AUC. Reverting changes.
Training on augumented user 108621 4/50 current_auc = 0.604418881952725
User 108621 AUC after training: 0.6041663744125694
User 108621 does not improve AUC. Reverting changes.
Training on augumented user 54365 5/50 current_auc = 0.604418881952725
User 54365 AUC after training: 0.6041804026092445
User 54365 does not improve AUC. Reverting changes.
Training on augumented user 104981 6/50 current_auc = 0.604418881952725
User 104981 AUC after training: 0.6047134740829067
User 104981 improves AUC. Keeping the model.
Training on augumented user 108332 7/50 current_auc = 0.6047134740829067
User 108332 AUC after training: 0.6049519534263871
User 108332 improves AUC. Keeping the model.
Training on augumented user 41543 8/50 current_auc = 0.6049519534263871
User 41543 AUC after training: 0.605260573753244
User 41543 improves AUC. Keeping the model.
Training on augumented user 112358 9/50 current_auc = 0.605260573753244
User 112358 AUC after training: 0.6049659816230624
User 112358 does not improve AUC. Reverting changes.
Training on augumented user 83796 10/50 current_auc = 0.605260573753244
User 83796 AUC after training: 0.6047275022795819
User 83796 does not improve AUC. Reverting changes.
Training on augumented user 118406 11/50 current_auc = 0.605260573753244
User 118406 AUC after training: 0.604994038016413
User 118406 does not improve AUC. Reverting changes.
Training on augumented user 61854 12/50 current_auc = 0.605260573753244
User 61854 AUC after training: 0.6056393350634776
User 61854 improves AUC. Keeping the model.
Training on augumented user 131997 13/50 current_auc = 0.6056393350634776
User 131997 AUC after training: 0.6054008557199972
User 131997 does not improve AUC. Reverting changes.
Training on augumented user 62460 14/50 current_auc = 0.6056393350634776
User 62460 AUC after training: 0.6058918426036333
User 62460 improves AUC. Keeping the model.
Training on augumented user 28298 15/50 current_auc = 0.6058918426036333
User 28298 AUC after training: 0.6054148839166724
User 28298 does not improve AUC. Reverting changes.
Training on augumented user 92482 16/50 current_auc = 0.6058918426036333
User 92482 AUC after training: 0.6063968576839447
User 92482 improves AUC. Keeping the model.
Training on augumented user 10747 17/50 current_auc = 0.6063968576839447
User 10747 AUC after training: 0.6057796170302308
User 10747 does not improve AUC. Reverting changes.
Training on augumented user 70971 18/50 current_auc = 0.6063968576839447
User 70971 AUC after training: 0.6066213088307499
User 70971 improves AUC. Keeping the model.
Training on augumented user 75583 19/50 current_auc = 0.6066213088307499
User 75583 AUC after training: 0.6062706039138669
User 75583 does not improve AUC. Reverting changes.
Training on augumented user 6653 20/50 current_auc = 0.6066213088307499
User 6653 AUC after training: 0.6061583783404645
User 6653 does not improve AUC. Reverting changes.
Training on augumented user 103316 21/50 current_auc = 0.6066213088307499
User 103316 AUC after training: 0.6071543803044118
User 103316 improves AUC. Keeping the model.
Training on augumented user 108150 22/50 current_auc = 0.6071543803044118
User 108150 AUC after training: 0.6062846321105422
User 108150 does not improve AUC. Reverting changes.
Training on augumented user 129880 23/50 current_auc = 0.6071543803044118
User 129880 AUC after training: 0.6068177035842043
User 129880 does not improve AUC. Reverting changes.
Training on augumented user 47689 24/50 current_auc = 0.6071543803044118
User 47689 AUC after training: 0.6061022655537631
User 47689 does not improve AUC. Reverting changes.
Training on augumented user 84524 25/50 current_auc = 0.6071543803044118
User 84524 AUC after training: 0.6054990530967244
User 84524 does not improve AUC. Reverting changes.
Training on augumented user 54602 26/50 current_auc = 0.6071543803044118
User 54602 AUC after training: 0.6062846321105422
User 54602 does not improve AUC. Reverting changes.
Training on augumented user 121379 27/50 current_auc = 0.6071543803044118
User 121379 AUC after training: 0.6047275022795819
User 121379 does not improve AUC. Reverting changes.
Training on augumented user 94215 28/50 current_auc = 0.6071543803044118
User 94215 AUC after training: 0.6063407448972434
User 94215 does not improve AUC. Reverting changes.
Training on augumented user 73163 29/50 current_auc = 0.6071543803044118
User 73163 AUC after training: 0.6061162937504384
User 73163 does not improve AUC. Reverting changes.
Training on augumented user 4687 30/50 current_auc = 0.6071543803044118
User 4687 AUC after training: 0.6063688012905941
User 4687 does not improve AUC. Reverting changes.
Training on augumented user 28384 31/50 current_auc = 0.6071543803044118
User 28384 AUC after training: 0.6064529704706461
User 28384 does not improve AUC. Reverting changes.
Training on augumented user 98977 32/50 current_auc = 0.6071543803044118
User 98977 AUC after training: 0.6062144911271656
User 98977 does not improve AUC. Reverting changes.
Training on augumented user 61536 33/50 current_auc = 0.6071543803044118
User 61536 AUC after training: 0.6077856491548012
User 61536 improves AUC. Keeping the model.
Training on augumented user 92194 34/50 current_auc = 0.6077856491548012
User 92194 AUC after training: 0.6068317317808796
User 92194 does not improve AUC. Reverting changes.
Training on augumented user 44278 35/50 current_auc = 0.6077856491548012
User 44278 AUC after training: 0.6076173107946973
User 44278 does not improve AUC. Reverting changes.
Training on augumented user 82168 36/50 current_auc = 0.6077856491548012
User 82168 AUC after training: 0.6072104930911131
User 82168 does not improve AUC. Reverting changes.
Training on augumented user 62910 37/50 current_auc = 0.6077856491548012
User 62910 AUC after training: 0.6072245212877885
User 62910 does not improve AUC. Reverting changes.
Training on augumented user 5884 38/50 current_auc = 0.6077856491548012
User 5884 AUC after training: 0.6058217016202567
User 5884 does not improve AUC. Reverting changes.
Training on augumented user 13505 39/50 current_auc = 0.6077856491548012
User 13505 AUC after training: 0.607294662271165
User 13505 does not improve AUC. Reverting changes.
Training on augumented user 138424 40/50 current_auc = 0.6077856491548012
User 138424 AUC after training: 0.6081644104650347
User 138424 improves AUC. Keeping the model.
Training on augumented user 95158 41/50 current_auc = 0.6081644104650347
User 95158 AUC after training: 0.6078137055481517
User 95158 does not improve AUC. Reverting changes.
Training on augumented user 106418 42/50 current_auc = 0.6081644104650347
User 106418 AUC after training: 0.6076734235813986
User 106418 does not improve AUC. Reverting changes.
Training on augumented user 136296 43/50 current_auc = 0.6081644104650347
User 136296 AUC after training: 0.6091674265273199
User 136296 improves AUC. Keeping the model.
Training on augumented user 23848 44/50 current_auc = 0.6091674265273199
User 23848 AUC after training: 0.6081644104650348
User 23848 does not improve AUC. Reverting changes.
Training on augumented user 74463 45/50 current_auc = 0.6091674265273199
User 74463 AUC after training: 0.6081363540716841
User 74463 does not improve AUC. Reverting changes.
Training on augumented user 128605 46/50 current_auc = 0.6091674265273199
User 128605 AUC after training: 0.6083467770218138
User 128605 does not improve AUC. Reverting changes.
Training on augumented user 90165 47/50 current_auc = 0.6091674265273199
User 90165 AUC after training: 0.6095672301325665
User 90165 improves AUC. Keeping the model.
Training on augumented user 53990 48/50 current_auc = 0.6095672301325665
User 53990 AUC after training: 0.6091463842323069
User 53990 does not improve AUC. Reverting changes.
Training on augumented user 88736 49/50 current_auc = 0.6095672301325665
User 88736 AUC after training: 0.609412919969138
User 88736 does not improve AUC. Reverting changes.
[2024-12-02 20:12:32.880602] start test user 34439 276/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:33.434206] start test user 34439 276/568 recall augumented users by random, augumented_users = [50694, 29490, 29650, 76085, 453, 33361, 56164, 68197, 41501, 82106, 74913, 99472, 10482, 54455, 48928, 134930, 48025, 130408, 55370, 43075, 37504, 121402, 105459, 23120, 87545, 33338, 76620, 57224, 133643, 35399, 13043, 73049, 37163, 108675, 68250, 39086, 24563, 27671, 77857, 118256, 110885, 128864, 116846, 74883, 137566, 101180, 98991, 79469, 95456, 77166]
[2024-12-02 20:12:33.457418] user = 34439 Cloud 276/568
[2024-12-02 20:12:33.475599] user = 34439 Local 276/568
[2024-12-02 20:12:33.529613] user = 34439 Local+ 276/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:36.817392] user = 34439 MPDA- 276/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 50694 0/50 current_auc = 0.5
User 50694 AUC after training: 0.5
User 50694 does not improve AUC. Reverting changes.
Training on augumented user 29490 1/50 current_auc = 0.5
User 29490 AUC after training: 0.5076923076923077
User 29490 improves AUC. Keeping the model.
Training on augumented user 29650 2/50 current_auc = 0.5076923076923077
User 29650 AUC after training: 0.5076923076923077
User 29650 does not improve AUC. Reverting changes.
Training on augumented user 76085 3/50 current_auc = 0.5076923076923077
User 76085 AUC after training: 0.4769230769230769
User 76085 does not improve AUC. Reverting changes.
Training on augumented user 453 4/50 current_auc = 0.5076923076923077
User 453 AUC after training: 0.5076923076923077
User 453 does not improve AUC. Reverting changes.
Training on augumented user 33361 5/50 current_auc = 0.5076923076923077
User 33361 AUC after training: 0.5076923076923077
User 33361 does not improve AUC. Reverting changes.
Training on augumented user 56164 6/50 current_auc = 0.5076923076923077
User 56164 AUC after training: 0.5
User 56164 does not improve AUC. Reverting changes.
Training on augumented user 68197 7/50 current_auc = 0.5076923076923077
User 68197 AUC after training: 0.5076923076923077
User 68197 does not improve AUC. Reverting changes.
Training on augumented user 41501 8/50 current_auc = 0.5076923076923077
User 41501 AUC after training: 0.5076923076923077
User 41501 does not improve AUC. Reverting changes.
Training on augumented user 82106 9/50 current_auc = 0.5076923076923077
User 82106 AUC after training: 0.5076923076923077
User 82106 does not improve AUC. Reverting changes.
Training on augumented user 74913 10/50 current_auc = 0.5076923076923077
User 74913 AUC after training: 0.5076923076923077
User 74913 does not improve AUC. Reverting changes.
Training on augumented user 99472 11/50 current_auc = 0.5076923076923077
User 99472 AUC after training: 0.5076923076923077
User 99472 does not improve AUC. Reverting changes.
Training on augumented user 10482 12/50 current_auc = 0.5076923076923077
User 10482 AUC after training: 0.5153846153846153
User 10482 improves AUC. Keeping the model.
Training on augumented user 54455 13/50 current_auc = 0.5153846153846153
User 54455 AUC after training: 0.5153846153846153
User 54455 does not improve AUC. Reverting changes.
Training on augumented user 48928 14/50 current_auc = 0.5153846153846153
User 48928 AUC after training: 0.5076923076923077
User 48928 does not improve AUC. Reverting changes.
Training on augumented user 134930 15/50 current_auc = 0.5153846153846153
User 134930 AUC after training: 0.5153846153846153
User 134930 does not improve AUC. Reverting changes.
Training on augumented user 48025 16/50 current_auc = 0.5153846153846153
User 48025 AUC after training: 0.5076923076923077
User 48025 does not improve AUC. Reverting changes.
Training on augumented user 130408 17/50 current_auc = 0.5153846153846153
User 130408 AUC after training: 0.5153846153846153
User 130408 does not improve AUC. Reverting changes.
Training on augumented user 55370 18/50 current_auc = 0.5153846153846153
User 55370 AUC after training: 0.5
User 55370 does not improve AUC. Reverting changes.
Training on augumented user 43075 19/50 current_auc = 0.5153846153846153
User 43075 AUC after training: 0.5076923076923077
User 43075 does not improve AUC. Reverting changes.
Training on augumented user 37504 20/50 current_auc = 0.5153846153846153
User 37504 AUC after training: 0.5076923076923077
User 37504 does not improve AUC. Reverting changes.
Training on augumented user 121402 21/50 current_auc = 0.5153846153846153
User 121402 AUC after training: 0.5153846153846153
User 121402 does not improve AUC. Reverting changes.
Training on augumented user 105459 22/50 current_auc = 0.5153846153846153
User 105459 AUC after training: 0.5153846153846153
User 105459 does not improve AUC. Reverting changes.
Training on augumented user 23120 23/50 current_auc = 0.5153846153846153
User 23120 AUC after training: 0.5076923076923077
User 23120 does not improve AUC. Reverting changes.
Training on augumented user 87545 24/50 current_auc = 0.5153846153846153
User 87545 AUC after training: 0.5076923076923077
User 87545 does not improve AUC. Reverting changes.
Training on augumented user 33338 25/50 current_auc = 0.5153846153846153
User 33338 AUC after training: 0.5076923076923077
User 33338 does not improve AUC. Reverting changes.
Training on augumented user 76620 26/50 current_auc = 0.5153846153846153
User 76620 AUC after training: 0.5076923076923077
User 76620 does not improve AUC. Reverting changes.
Training on augumented user 57224 27/50 current_auc = 0.5153846153846153
User 57224 AUC after training: 0.5076923076923077
User 57224 does not improve AUC. Reverting changes.
Training on augumented user 133643 28/50 current_auc = 0.5153846153846153
User 133643 AUC after training: 0.5153846153846153
User 133643 does not improve AUC. Reverting changes.
Training on augumented user 35399 29/50 current_auc = 0.5153846153846153
User 35399 AUC after training: 0.5076923076923077
User 35399 does not improve AUC. Reverting changes.
Training on augumented user 13043 30/50 current_auc = 0.5153846153846153
User 13043 AUC after training: 0.5076923076923077
User 13043 does not improve AUC. Reverting changes.
Training on augumented user 73049 31/50 current_auc = 0.5153846153846153
User 73049 AUC after training: 0.5153846153846153
User 73049 does not improve AUC. Reverting changes.
Training on augumented user 37163 32/50 current_auc = 0.5153846153846153
User 37163 AUC after training: 0.5076923076923077
User 37163 does not improve AUC. Reverting changes.
Training on augumented user 108675 33/50 current_auc = 0.5153846153846153
User 108675 AUC after training: 0.5076923076923077
User 108675 does not improve AUC. Reverting changes.
Training on augumented user 68250 34/50 current_auc = 0.5153846153846153
User 68250 AUC after training: 0.49230769230769234
User 68250 does not improve AUC. Reverting changes.
Training on augumented user 39086 35/50 current_auc = 0.5153846153846153
User 39086 AUC after training: 0.5076923076923077
User 39086 does not improve AUC. Reverting changes.
Training on augumented user 24563 36/50 current_auc = 0.5153846153846153
User 24563 AUC after training: 0.5153846153846153
User 24563 does not improve AUC. Reverting changes.
Training on augumented user 27671 37/50 current_auc = 0.5153846153846153
User 27671 AUC after training: 0.5153846153846153
User 27671 does not improve AUC. Reverting changes.
Training on augumented user 77857 38/50 current_auc = 0.5153846153846153
User 77857 AUC after training: 0.5153846153846153
User 77857 does not improve AUC. Reverting changes.
Training on augumented user 118256 39/50 current_auc = 0.5153846153846153
User 118256 AUC after training: 0.5076923076923077
User 118256 does not improve AUC. Reverting changes.
Training on augumented user 110885 40/50 current_auc = 0.5153846153846153
User 110885 AUC after training: 0.5153846153846153
User 110885 does not improve AUC. Reverting changes.
Training on augumented user 128864 41/50 current_auc = 0.5153846153846153
User 128864 AUC after training: 0.5076923076923077
User 128864 does not improve AUC. Reverting changes.
Training on augumented user 116846 42/50 current_auc = 0.5153846153846153
User 116846 AUC after training: 0.5153846153846153
User 116846 does not improve AUC. Reverting changes.
Training on augumented user 74883 43/50 current_auc = 0.5153846153846153
User 74883 AUC after training: 0.5076923076923077
User 74883 does not improve AUC. Reverting changes.
Training on augumented user 137566 44/50 current_auc = 0.5153846153846153
User 137566 AUC after training: 0.5076923076923077
User 137566 does not improve AUC. Reverting changes.
Training on augumented user 101180 45/50 current_auc = 0.5153846153846153
User 101180 AUC after training: 0.5076923076923077
User 101180 does not improve AUC. Reverting changes.
Training on augumented user 98991 46/50 current_auc = 0.5153846153846153
User 98991 AUC after training: 0.5076923076923077
User 98991 does not improve AUC. Reverting changes.
Training on augumented user 79469 47/50 current_auc = 0.5153846153846153
User 79469 AUC after training: 0.5076923076923077
User 79469 does not improve AUC. Reverting changes.
Training on augumented user 95456 48/50 current_auc = 0.5153846153846153
User 95456 AUC after training: 0.5076923076923077
User 95456 does not improve AUC. Reverting changes.
Training on augumented user 77166 49/50 current_auc = 0.5153846153846153
User 77166 AUC after training: 0.5153846153846153
User 77166 does not improve AUC. Reverting changes.
[2024-12-02 20:13:05.910824] start test user 34449 277/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:06.422431] start test user 34449 277/568 recall augumented users by random, augumented_users = [14639, 66329, 40767, 134538, 126154, 105543, 17764, 26639, 40893, 52936, 125423, 130813, 134357, 77919, 23640, 84264, 13726, 54999, 64247, 68459, 91629, 65589, 137995, 124123, 26031, 23513, 125762, 46110, 49442, 65934, 3710, 12403, 102226, 91396, 108698, 43311, 89278, 57386, 53486, 69686, 85300, 25395, 122042, 75475, 37775, 114422, 40551, 57971, 24009, 94334]
[2024-12-02 20:13:06.437482] user = 34449 Cloud 277/568
[2024-12-02 20:13:06.463587] user = 34449 Local 277/568
[2024-12-02 20:13:06.504702] user = 34449 Local+ 277/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:08.365089] user = 34449 MPDA- 277/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7968763262880909
Training on augumented user 14639 0/50 current_auc = 0.7968763262880909
User 14639 AUC after training: 0.7964519140989729
User 14639 does not improve AUC. Reverting changes.
Training on augumented user 66329 1/50 current_auc = 0.7968763262880909
User 66329 AUC after training: 0.7967914438502673
User 66329 does not improve AUC. Reverting changes.
Training on augumented user 40767 2/50 current_auc = 0.7968763262880909
User 40767 AUC after training: 0.7961123843476785
User 40767 does not improve AUC. Reverting changes.
Training on augumented user 134538 3/50 current_auc = 0.7968763262880909
User 134538 AUC after training: 0.7961972667855021
User 134538 does not improve AUC. Reverting changes.
Training on augumented user 126154 4/50 current_auc = 0.7968763262880909
User 126154 AUC after training: 0.7973856209150327
User 126154 improves AUC. Keeping the model.
Training on augumented user 105543 5/50 current_auc = 0.7973856209150327
User 105543 AUC after training: 0.7970460911637381
User 105543 does not improve AUC. Reverting changes.
Training on augumented user 17764 6/50 current_auc = 0.7973856209150327
User 17764 AUC after training: 0.7970460911637383
User 17764 does not improve AUC. Reverting changes.
Training on augumented user 26639 7/50 current_auc = 0.7973856209150327
User 26639 AUC after training: 0.7973007384772091
User 26639 does not improve AUC. Reverting changes.
Training on augumented user 40893 8/50 current_auc = 0.7973856209150327
User 40893 AUC after training: 0.795772854596384
User 40893 does not improve AUC. Reverting changes.
Training on augumented user 52936 9/50 current_auc = 0.7973856209150327
User 52936 AUC after training: 0.7967914438502673
User 52936 does not improve AUC. Reverting changes.
Training on augumented user 125423 10/50 current_auc = 0.7973856209150327
User 125423 AUC after training: 0.7973007384772091
User 125423 does not improve AUC. Reverting changes.
Training on augumented user 130813 11/50 current_auc = 0.7973856209150327
User 130813 AUC after training: 0.7973856209150327
User 130813 does not improve AUC. Reverting changes.
Training on augumented user 134357 12/50 current_auc = 0.7973856209150327
User 134357 AUC after training: 0.7973007384772091
User 134357 does not improve AUC. Reverting changes.
Training on augumented user 77919 13/50 current_auc = 0.7973856209150327
User 77919 AUC after training: 0.7965367965367965
User 77919 does not improve AUC. Reverting changes.
Training on augumented user 23640 14/50 current_auc = 0.7973856209150327
User 23640 AUC after training: 0.7972158560393855
User 23640 does not improve AUC. Reverting changes.
Training on augumented user 84264 15/50 current_auc = 0.7973856209150327
User 84264 AUC after training: 0.7973007384772091
User 84264 does not improve AUC. Reverting changes.
Training on augumented user 13726 16/50 current_auc = 0.7973856209150327
User 13726 AUC after training: 0.7969612087259146
User 13726 does not improve AUC. Reverting changes.
Training on augumented user 54999 17/50 current_auc = 0.7973856209150327
User 54999 AUC after training: 0.7967914438502675
User 54999 does not improve AUC. Reverting changes.
Training on augumented user 64247 18/50 current_auc = 0.7973856209150327
User 64247 AUC after training: 0.7973007384772091
User 64247 does not improve AUC. Reverting changes.
Training on augumented user 68459 19/50 current_auc = 0.7973856209150327
User 68459 AUC after training: 0.7971309736015618
User 68459 does not improve AUC. Reverting changes.
Training on augumented user 91629 20/50 current_auc = 0.7973856209150327
User 91629 AUC after training: 0.7972158560393855
User 91629 does not improve AUC. Reverting changes.
Training on augumented user 65589 21/50 current_auc = 0.7973856209150327
User 65589 AUC after training: 0.7975553857906799
User 65589 improves AUC. Keeping the model.
Training on augumented user 137995 22/50 current_auc = 0.7975553857906799
User 137995 AUC after training: 0.7974705033528562
User 137995 does not improve AUC. Reverting changes.
Training on augumented user 124123 23/50 current_auc = 0.7975553857906799
User 124123 AUC after training: 0.7961123843476785
User 124123 does not improve AUC. Reverting changes.
Training on augumented user 26031 24/50 current_auc = 0.7975553857906799
User 26031 AUC after training: 0.7973856209150326
User 26031 does not improve AUC. Reverting changes.
Training on augumented user 23513 25/50 current_auc = 0.7975553857906799
User 23513 AUC after training: 0.7979373567608862
User 23513 improves AUC. Keeping the model.
Training on augumented user 125762 26/50 current_auc = 0.7979373567608862
User 125762 AUC after training: 0.7972158560393854
User 125762 does not improve AUC. Reverting changes.
Training on augumented user 46110 27/50 current_auc = 0.7979373567608862
User 46110 AUC after training: 0.7971309736015619
User 46110 does not improve AUC. Reverting changes.
Training on augumented user 49442 28/50 current_auc = 0.7979373567608862
User 49442 AUC after training: 0.7978524743230625
User 49442 does not improve AUC. Reverting changes.
Training on augumented user 65934 29/50 current_auc = 0.7979373567608862
User 65934 AUC after training: 0.7960275019098548
User 65934 does not improve AUC. Reverting changes.
Training on augumented user 3710 30/50 current_auc = 0.7979373567608862
User 3710 AUC after training: 0.7976402682285035
User 3710 does not improve AUC. Reverting changes.
Training on augumented user 12403 31/50 current_auc = 0.7979373567608862
User 12403 AUC after training: 0.7970460911637383
User 12403 does not improve AUC. Reverting changes.
Training on augumented user 102226 32/50 current_auc = 0.7979373567608862
User 102226 AUC after training: 0.7974705033528563
User 102226 does not improve AUC. Reverting changes.
Training on augumented user 91396 33/50 current_auc = 0.7979373567608862
User 91396 AUC after training: 0.7970460911637383
User 91396 does not improve AUC. Reverting changes.
Training on augumented user 108698 34/50 current_auc = 0.7979373567608862
User 108698 AUC after training: 0.7972158560393855
User 108698 does not improve AUC. Reverting changes.
Training on augumented user 43311 35/50 current_auc = 0.7979373567608862
User 43311 AUC after training: 0.7971309736015619
User 43311 does not improve AUC. Reverting changes.
Training on augumented user 89278 36/50 current_auc = 0.7979373567608862
User 89278 AUC after training: 0.7975553857906799
User 89278 does not improve AUC. Reverting changes.
Training on augumented user 57386 37/50 current_auc = 0.7979373567608862
User 57386 AUC after training: 0.7968763262880909
User 57386 does not improve AUC. Reverting changes.
Training on augumented user 53486 38/50 current_auc = 0.7979373567608862
User 53486 AUC after training: 0.7974705033528563
User 53486 does not improve AUC. Reverting changes.
Training on augumented user 69686 39/50 current_auc = 0.7979373567608862
User 69686 AUC after training: 0.7980222391987097
User 69686 improves AUC. Keeping the model.
Training on augumented user 85300 40/50 current_auc = 0.7980222391987097
User 85300 AUC after training: 0.7977251506663271
User 85300 does not improve AUC. Reverting changes.
Training on augumented user 25395 41/50 current_auc = 0.7980222391987097
User 25395 AUC after training: 0.7971309736015619
User 25395 does not improve AUC. Reverting changes.
Training on augumented user 122042 42/50 current_auc = 0.7980222391987097
User 122042 AUC after training: 0.7973856209150327
User 122042 does not improve AUC. Reverting changes.
Training on augumented user 75475 43/50 current_auc = 0.7980222391987097
User 75475 AUC after training: 0.7976402682285035
User 75475 does not improve AUC. Reverting changes.
Training on augumented user 37775 44/50 current_auc = 0.7980222391987097
User 37775 AUC after training: 0.7969612087259146
User 37775 does not improve AUC. Reverting changes.
Training on augumented user 114422 45/50 current_auc = 0.7980222391987097
User 114422 AUC after training: 0.7973007384772091
User 114422 does not improve AUC. Reverting changes.
Training on augumented user 40551 46/50 current_auc = 0.7980222391987097
User 40551 AUC after training: 0.7967065614124438
User 40551 does not improve AUC. Reverting changes.
Training on augumented user 57971 47/50 current_auc = 0.7980222391987097
User 57971 AUC after training: 0.7970460911637383
User 57971 does not improve AUC. Reverting changes.
Training on augumented user 24009 48/50 current_auc = 0.7980222391987097
User 24009 AUC after training: 0.7971309736015618
User 24009 does not improve AUC. Reverting changes.
Training on augumented user 94334 49/50 current_auc = 0.7980222391987097
User 94334 AUC after training: 0.7979373567608862
User 94334 does not improve AUC. Reverting changes.
[2024-12-02 20:13:37.039586] start test user 34467 278/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:37.460091] start test user 34467 278/568 recall augumented users by random, augumented_users = [69643, 124895, 42546, 79191, 33507, 121225, 72951, 59259, 20355, 82424, 5422, 24278, 56262, 114159, 4859, 121349, 39908, 8955, 121879, 107627, 53898, 109418, 1936, 55208, 19473, 53178, 89771, 107959, 51435, 43312, 90224, 133296, 132108, 118760, 59662, 22942, 66143, 57948, 124841, 74140, 90965, 64693, 137094, 121422, 34035, 118385, 26617, 92193, 85878, 115245]
[2024-12-02 20:13:37.475419] user = 34467 Cloud 278/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:13:37.481855] user = 34467 Local 278/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:13:37.580944] user = 34467 Local+ 278/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:13:39.868296] user = 34467 MPDA- 278/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 69643 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69643 AUC after training: 0.5
User 69643 does not improve AUC. Reverting changes.
Training on augumented user 124895 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124895 AUC after training: 0.5
User 124895 does not improve AUC. Reverting changes.
Training on augumented user 42546 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42546 AUC after training: 0.5
User 42546 does not improve AUC. Reverting changes.
Training on augumented user 79191 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79191 AUC after training: 0.5
User 79191 does not improve AUC. Reverting changes.
Training on augumented user 33507 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33507 AUC after training: 0.5
User 33507 does not improve AUC. Reverting changes.
Training on augumented user 121225 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121225 AUC after training: 0.5
User 121225 does not improve AUC. Reverting changes.
Training on augumented user 72951 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72951 AUC after training: 0.5
User 72951 does not improve AUC. Reverting changes.
Training on augumented user 59259 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59259 AUC after training: 0.5
User 59259 does not improve AUC. Reverting changes.
Training on augumented user 20355 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20355 AUC after training: 0.5
User 20355 does not improve AUC. Reverting changes.
Training on augumented user 82424 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82424 AUC after training: 0.5
User 82424 does not improve AUC. Reverting changes.
Training on augumented user 5422 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5422 AUC after training: 0.5
User 5422 does not improve AUC. Reverting changes.
Training on augumented user 24278 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24278 AUC after training: 0.5
User 24278 does not improve AUC. Reverting changes.
Training on augumented user 56262 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56262 AUC after training: 0.5
User 56262 does not improve AUC. Reverting changes.
Training on augumented user 114159 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114159 AUC after training: 0.5
User 114159 does not improve AUC. Reverting changes.
Training on augumented user 4859 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4859 AUC after training: 0.5
User 4859 does not improve AUC. Reverting changes.
Training on augumented user 121349 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121349 AUC after training: 0.5
User 121349 does not improve AUC. Reverting changes.
Training on augumented user 39908 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39908 AUC after training: 0.5
User 39908 does not improve AUC. Reverting changes.
Training on augumented user 8955 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8955 AUC after training: 0.5
User 8955 does not improve AUC. Reverting changes.
Training on augumented user 121879 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121879 AUC after training: 0.5
User 121879 does not improve AUC. Reverting changes.
Training on augumented user 107627 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107627 AUC after training: 0.5
User 107627 does not improve AUC. Reverting changes.
Training on augumented user 53898 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53898 AUC after training: 0.5
User 53898 does not improve AUC. Reverting changes.
Training on augumented user 109418 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109418 AUC after training: 0.5
User 109418 does not improve AUC. Reverting changes.
Training on augumented user 1936 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1936 AUC after training: 0.5
User 1936 does not improve AUC. Reverting changes.
Training on augumented user 55208 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55208 AUC after training: 0.5
User 55208 does not improve AUC. Reverting changes.
Training on augumented user 19473 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19473 AUC after training: 0.5
User 19473 does not improve AUC. Reverting changes.
Training on augumented user 53178 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53178 AUC after training: 0.5
User 53178 does not improve AUC. Reverting changes.
Training on augumented user 89771 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89771 AUC after training: 0.5
User 89771 does not improve AUC. Reverting changes.
Training on augumented user 107959 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107959 AUC after training: 0.5
User 107959 does not improve AUC. Reverting changes.
Training on augumented user 51435 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51435 AUC after training: 0.5
User 51435 does not improve AUC. Reverting changes.
Training on augumented user 43312 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43312 AUC after training: 0.5
User 43312 does not improve AUC. Reverting changes.
Training on augumented user 90224 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90224 AUC after training: 0.5
User 90224 does not improve AUC. Reverting changes.
Training on augumented user 133296 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133296 AUC after training: 0.5
User 133296 does not improve AUC. Reverting changes.
Training on augumented user 132108 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132108 AUC after training: 0.5
User 132108 does not improve AUC. Reverting changes.
Training on augumented user 118760 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118760 AUC after training: 0.5
User 118760 does not improve AUC. Reverting changes.
Training on augumented user 59662 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59662 AUC after training: 0.5
User 59662 does not improve AUC. Reverting changes.
Training on augumented user 22942 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22942 AUC after training: 0.5
User 22942 does not improve AUC. Reverting changes.
Training on augumented user 66143 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66143 AUC after training: 0.5
User 66143 does not improve AUC. Reverting changes.
Training on augumented user 57948 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57948 AUC after training: 0.5
User 57948 does not improve AUC. Reverting changes.
Training on augumented user 124841 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124841 AUC after training: 0.5
User 124841 does not improve AUC. Reverting changes.
Training on augumented user 74140 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74140 AUC after training: 0.5
User 74140 does not improve AUC. Reverting changes.
Training on augumented user 90965 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90965 AUC after training: 0.5
User 90965 does not improve AUC. Reverting changes.
Training on augumented user 64693 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64693 AUC after training: 0.5
User 64693 does not improve AUC. Reverting changes.
Training on augumented user 137094 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137094 AUC after training: 0.5
User 137094 does not improve AUC. Reverting changes.
Training on augumented user 121422 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121422 AUC after training: 0.5
User 121422 does not improve AUC. Reverting changes.
Training on augumented user 34035 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34035 AUC after training: 0.5
User 34035 does not improve AUC. Reverting changes.
Training on augumented user 118385 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118385 AUC after training: 0.5
User 118385 does not improve AUC. Reverting changes.
Training on augumented user 26617 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26617 AUC after training: 0.5
User 26617 does not improve AUC. Reverting changes.
Training on augumented user 92193 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92193 AUC after training: 0.5
User 92193 does not improve AUC. Reverting changes.
Training on augumented user 85878 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85878 AUC after training: 0.5
User 85878 does not improve AUC. Reverting changes.
Training on augumented user 115245 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115245 AUC after training: 0.5
User 115245 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:14:08.069752] start test user 34478 279/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:08.750846] start test user 34478 279/568 recall augumented users by random, augumented_users = [127173, 118256, 135810, 113289, 84222, 124709, 103535, 69823, 68838, 130544, 82297, 108068, 98740, 87911, 136945, 1304, 94720, 27819, 14075, 65313, 55479, 117342, 109809, 64143, 6867, 78154, 109706, 28183, 8919, 120259, 131293, 74962, 105072, 85503, 61503, 7988, 108020, 60763, 128726, 118981, 21423, 85421, 43835, 59401, 124544, 96119, 72680, 23892, 123214, 24511]
[2024-12-02 20:14:08.771902] user = 34478 Cloud 279/568
[2024-12-02 20:14:08.799336] user = 34478 Local 279/568
[2024-12-02 20:14:08.915058] user = 34478 Local+ 279/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:11.772983] user = 34478 MPDA- 279/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6475095785440612
Training on augumented user 127173 0/50 current_auc = 0.6475095785440612
User 127173 AUC after training: 0.6475095785440612
User 127173 does not improve AUC. Reverting changes.
Training on augumented user 118256 1/50 current_auc = 0.6475095785440612
User 118256 AUC after training: 0.6513409961685823
User 118256 improves AUC. Keeping the model.
Training on augumented user 135810 2/50 current_auc = 0.6513409961685823
User 135810 AUC after training: 0.6551724137931034
User 135810 improves AUC. Keeping the model.
Training on augumented user 113289 3/50 current_auc = 0.6551724137931034
User 113289 AUC after training: 0.6551724137931034
User 113289 does not improve AUC. Reverting changes.
Training on augumented user 84222 4/50 current_auc = 0.6551724137931034
User 84222 AUC after training: 0.6513409961685823
User 84222 does not improve AUC. Reverting changes.
Training on augumented user 124709 5/50 current_auc = 0.6551724137931034
User 124709 AUC after training: 0.6551724137931034
User 124709 does not improve AUC. Reverting changes.
Training on augumented user 103535 6/50 current_auc = 0.6551724137931034
User 103535 AUC after training: 0.6551724137931034
User 103535 does not improve AUC. Reverting changes.
Training on augumented user 69823 7/50 current_auc = 0.6551724137931034
User 69823 AUC after training: 0.6551724137931034
User 69823 does not improve AUC. Reverting changes.
Training on augumented user 68838 8/50 current_auc = 0.6551724137931034
User 68838 AUC after training: 0.6551724137931034
User 68838 does not improve AUC. Reverting changes.
Training on augumented user 130544 9/50 current_auc = 0.6551724137931034
User 130544 AUC after training: 0.6551724137931034
User 130544 does not improve AUC. Reverting changes.
Training on augumented user 82297 10/50 current_auc = 0.6551724137931034
User 82297 AUC after training: 0.6590038314176245
User 82297 improves AUC. Keeping the model.
Training on augumented user 108068 11/50 current_auc = 0.6590038314176245
User 108068 AUC after training: 0.6590038314176245
User 108068 does not improve AUC. Reverting changes.
Training on augumented user 98740 12/50 current_auc = 0.6590038314176245
User 98740 AUC after training: 0.6590038314176245
User 98740 does not improve AUC. Reverting changes.
Training on augumented user 87911 13/50 current_auc = 0.6590038314176245
User 87911 AUC after training: 0.6590038314176245
User 87911 does not improve AUC. Reverting changes.
Training on augumented user 136945 14/50 current_auc = 0.6590038314176245
User 136945 AUC after training: 0.6590038314176245
User 136945 does not improve AUC. Reverting changes.
Training on augumented user 1304 15/50 current_auc = 0.6590038314176245
User 1304 AUC after training: 0.6590038314176245
User 1304 does not improve AUC. Reverting changes.
Training on augumented user 94720 16/50 current_auc = 0.6590038314176245
User 94720 AUC after training: 0.6590038314176245
User 94720 does not improve AUC. Reverting changes.
Training on augumented user 27819 17/50 current_auc = 0.6590038314176245
User 27819 AUC after training: 0.6590038314176245
User 27819 does not improve AUC. Reverting changes.
Training on augumented user 14075 18/50 current_auc = 0.6590038314176245
User 14075 AUC after training: 0.6590038314176245
User 14075 does not improve AUC. Reverting changes.
Training on augumented user 65313 19/50 current_auc = 0.6590038314176245
User 65313 AUC after training: 0.6551724137931034
User 65313 does not improve AUC. Reverting changes.
Training on augumented user 55479 20/50 current_auc = 0.6590038314176245
User 55479 AUC after training: 0.6513409961685823
User 55479 does not improve AUC. Reverting changes.
Training on augumented user 117342 21/50 current_auc = 0.6590038314176245
User 117342 AUC after training: 0.6590038314176245
User 117342 does not improve AUC. Reverting changes.
Training on augumented user 109809 22/50 current_auc = 0.6590038314176245
User 109809 AUC after training: 0.6590038314176245
User 109809 does not improve AUC. Reverting changes.
Training on augumented user 64143 23/50 current_auc = 0.6590038314176245
User 64143 AUC after training: 0.6590038314176245
User 64143 does not improve AUC. Reverting changes.
Training on augumented user 6867 24/50 current_auc = 0.6590038314176245
User 6867 AUC after training: 0.6590038314176245
User 6867 does not improve AUC. Reverting changes.
Training on augumented user 78154 25/50 current_auc = 0.6590038314176245
User 78154 AUC after training: 0.6551724137931034
User 78154 does not improve AUC. Reverting changes.
Training on augumented user 109706 26/50 current_auc = 0.6590038314176245
User 109706 AUC after training: 0.6590038314176245
User 109706 does not improve AUC. Reverting changes.
Training on augumented user 28183 27/50 current_auc = 0.6590038314176245
User 28183 AUC after training: 0.6551724137931034
User 28183 does not improve AUC. Reverting changes.
Training on augumented user 8919 28/50 current_auc = 0.6590038314176245
User 8919 AUC after training: 0.6551724137931034
User 8919 does not improve AUC. Reverting changes.
Training on augumented user 120259 29/50 current_auc = 0.6590038314176245
User 120259 AUC after training: 0.6590038314176245
User 120259 does not improve AUC. Reverting changes.
Training on augumented user 131293 30/50 current_auc = 0.6590038314176245
User 131293 AUC after training: 0.6590038314176245
User 131293 does not improve AUC. Reverting changes.
Training on augumented user 74962 31/50 current_auc = 0.6590038314176245
User 74962 AUC after training: 0.6551724137931034
User 74962 does not improve AUC. Reverting changes.
Training on augumented user 105072 32/50 current_auc = 0.6590038314176245
User 105072 AUC after training: 0.6590038314176245
User 105072 does not improve AUC. Reverting changes.
Training on augumented user 85503 33/50 current_auc = 0.6590038314176245
User 85503 AUC after training: 0.6590038314176245
User 85503 does not improve AUC. Reverting changes.
Training on augumented user 61503 34/50 current_auc = 0.6590038314176245
User 61503 AUC after training: 0.6590038314176245
User 61503 does not improve AUC. Reverting changes.
Training on augumented user 7988 35/50 current_auc = 0.6590038314176245
User 7988 AUC after training: 0.6590038314176245
User 7988 does not improve AUC. Reverting changes.
Training on augumented user 108020 36/50 current_auc = 0.6590038314176245
User 108020 AUC after training: 0.6590038314176245
User 108020 does not improve AUC. Reverting changes.
Training on augumented user 60763 37/50 current_auc = 0.6590038314176245
User 60763 AUC after training: 0.6590038314176245
User 60763 does not improve AUC. Reverting changes.
Training on augumented user 128726 38/50 current_auc = 0.6590038314176245
User 128726 AUC after training: 0.6590038314176245
User 128726 does not improve AUC. Reverting changes.
Training on augumented user 118981 39/50 current_auc = 0.6590038314176245
User 118981 AUC after training: 0.6551724137931034
User 118981 does not improve AUC. Reverting changes.
Training on augumented user 21423 40/50 current_auc = 0.6590038314176245
User 21423 AUC after training: 0.6590038314176245
User 21423 does not improve AUC. Reverting changes.
Training on augumented user 85421 41/50 current_auc = 0.6590038314176245
User 85421 AUC after training: 0.6590038314176245
User 85421 does not improve AUC. Reverting changes.
Training on augumented user 43835 42/50 current_auc = 0.6590038314176245
User 43835 AUC after training: 0.6590038314176245
User 43835 does not improve AUC. Reverting changes.
Training on augumented user 59401 43/50 current_auc = 0.6590038314176245
User 59401 AUC after training: 0.6590038314176245
User 59401 does not improve AUC. Reverting changes.
Training on augumented user 124544 44/50 current_auc = 0.6590038314176245
User 124544 AUC after training: 0.6590038314176245
User 124544 does not improve AUC. Reverting changes.
Training on augumented user 96119 45/50 current_auc = 0.6590038314176245
User 96119 AUC after training: 0.6590038314176245
User 96119 does not improve AUC. Reverting changes.
Training on augumented user 72680 46/50 current_auc = 0.6590038314176245
User 72680 AUC after training: 0.6628352490421456
User 72680 improves AUC. Keeping the model.
Training on augumented user 23892 47/50 current_auc = 0.6628352490421456
User 23892 AUC after training: 0.6551724137931034
User 23892 does not improve AUC. Reverting changes.
Training on augumented user 123214 48/50 current_auc = 0.6628352490421456
User 123214 AUC after training: 0.6590038314176245
User 123214 does not improve AUC. Reverting changes.
Training on augumented user 24511 49/50 current_auc = 0.6628352490421456
User 24511 AUC after training: 0.6551724137931034
User 24511 does not improve AUC. Reverting changes.
[2024-12-02 20:14:36.469410] start test user 34497 280/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:36.949465] start test user 34497 280/568 recall augumented users by random, augumented_users = [104852, 97210, 15517, 87537, 111420, 19346, 137615, 120474, 9906, 38670, 71938, 9519, 806, 42651, 68598, 54369, 119712, 3117, 60119, 89404, 84854, 70914, 86957, 112713, 115865, 23531, 80799, 125569, 2083, 133729, 135618, 65474, 130348, 84355, 76597, 86128, 23753, 107206, 23003, 81885, 91016, 94912, 126373, 41967, 130922, 127004, 68535, 54665, 117717, 121748]
[2024-12-02 20:14:36.964039] user = 34497 Cloud 280/568
[2024-12-02 20:14:36.978146] user = 34497 Local 280/568
[2024-12-02 20:14:37.000956] user = 34497 Local+ 280/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:39.212567] user = 34497 MPDA- 280/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.36630036630036633
Training on augumented user 104852 0/50 current_auc = 0.36630036630036633
User 104852 AUC after training: 0.36630036630036633
User 104852 does not improve AUC. Reverting changes.
Training on augumented user 97210 1/50 current_auc = 0.36630036630036633
User 97210 AUC after training: 0.36630036630036633
User 97210 does not improve AUC. Reverting changes.
Training on augumented user 15517 2/50 current_auc = 0.36630036630036633
User 15517 AUC after training: 0.37362637362637363
User 15517 improves AUC. Keeping the model.
Training on augumented user 87537 3/50 current_auc = 0.37362637362637363
User 87537 AUC after training: 0.37362637362637363
User 87537 does not improve AUC. Reverting changes.
Training on augumented user 111420 4/50 current_auc = 0.37362637362637363
User 111420 AUC after training: 0.37362637362637363
User 111420 does not improve AUC. Reverting changes.
Training on augumented user 19346 5/50 current_auc = 0.37362637362637363
User 19346 AUC after training: 0.36996336996337
User 19346 does not improve AUC. Reverting changes.
Training on augumented user 137615 6/50 current_auc = 0.37362637362637363
User 137615 AUC after training: 0.37362637362637363
User 137615 does not improve AUC. Reverting changes.
Training on augumented user 120474 7/50 current_auc = 0.37362637362637363
User 120474 AUC after training: 0.37728937728937734
User 120474 improves AUC. Keeping the model.
Training on augumented user 9906 8/50 current_auc = 0.37728937728937734
User 9906 AUC after training: 0.37728937728937734
User 9906 does not improve AUC. Reverting changes.
Training on augumented user 38670 9/50 current_auc = 0.37728937728937734
User 38670 AUC after training: 0.3772893772893773
User 38670 does not improve AUC. Reverting changes.
Training on augumented user 71938 10/50 current_auc = 0.37728937728937734
User 71938 AUC after training: 0.37362637362637363
User 71938 does not improve AUC. Reverting changes.
Training on augumented user 9519 11/50 current_auc = 0.37728937728937734
User 9519 AUC after training: 0.37728937728937734
User 9519 does not improve AUC. Reverting changes.
Training on augumented user 806 12/50 current_auc = 0.37728937728937734
User 806 AUC after training: 0.37362637362637363
User 806 does not improve AUC. Reverting changes.
Training on augumented user 42651 13/50 current_auc = 0.37728937728937734
User 42651 AUC after training: 0.3626373626373627
User 42651 does not improve AUC. Reverting changes.
Training on augumented user 68598 14/50 current_auc = 0.37728937728937734
User 68598 AUC after training: 0.37728937728937734
User 68598 does not improve AUC. Reverting changes.
Training on augumented user 54369 15/50 current_auc = 0.37728937728937734
User 54369 AUC after training: 0.380952380952381
User 54369 improves AUC. Keeping the model.
Training on augumented user 119712 16/50 current_auc = 0.380952380952381
User 119712 AUC after training: 0.380952380952381
User 119712 does not improve AUC. Reverting changes.
Training on augumented user 3117 17/50 current_auc = 0.380952380952381
User 3117 AUC after training: 0.380952380952381
User 3117 does not improve AUC. Reverting changes.
Training on augumented user 60119 18/50 current_auc = 0.380952380952381
User 60119 AUC after training: 0.38095238095238093
User 60119 does not improve AUC. Reverting changes.
Training on augumented user 89404 19/50 current_auc = 0.380952380952381
User 89404 AUC after training: 0.380952380952381
User 89404 does not improve AUC. Reverting changes.
Training on augumented user 84854 20/50 current_auc = 0.380952380952381
User 84854 AUC after training: 0.380952380952381
User 84854 does not improve AUC. Reverting changes.
Training on augumented user 70914 21/50 current_auc = 0.380952380952381
User 70914 AUC after training: 0.380952380952381
User 70914 does not improve AUC. Reverting changes.
Training on augumented user 86957 22/50 current_auc = 0.380952380952381
User 86957 AUC after training: 0.380952380952381
User 86957 does not improve AUC. Reverting changes.
Training on augumented user 112713 23/50 current_auc = 0.380952380952381
User 112713 AUC after training: 0.380952380952381
User 112713 does not improve AUC. Reverting changes.
Training on augumented user 115865 24/50 current_auc = 0.380952380952381
User 115865 AUC after training: 0.380952380952381
User 115865 does not improve AUC. Reverting changes.
Training on augumented user 23531 25/50 current_auc = 0.380952380952381
User 23531 AUC after training: 0.380952380952381
User 23531 does not improve AUC. Reverting changes.
Training on augumented user 80799 26/50 current_auc = 0.380952380952381
User 80799 AUC after training: 0.380952380952381
User 80799 does not improve AUC. Reverting changes.
Training on augumented user 125569 27/50 current_auc = 0.380952380952381
User 125569 AUC after training: 0.380952380952381
User 125569 does not improve AUC. Reverting changes.
Training on augumented user 2083 28/50 current_auc = 0.380952380952381
User 2083 AUC after training: 0.36996336996337
User 2083 does not improve AUC. Reverting changes.
Training on augumented user 133729 29/50 current_auc = 0.380952380952381
User 133729 AUC after training: 0.380952380952381
User 133729 does not improve AUC. Reverting changes.
Training on augumented user 135618 30/50 current_auc = 0.380952380952381
User 135618 AUC after training: 0.380952380952381
User 135618 does not improve AUC. Reverting changes.
Training on augumented user 65474 31/50 current_auc = 0.380952380952381
User 65474 AUC after training: 0.37728937728937734
User 65474 does not improve AUC. Reverting changes.
Training on augumented user 130348 32/50 current_auc = 0.380952380952381
User 130348 AUC after training: 0.37728937728937734
User 130348 does not improve AUC. Reverting changes.
Training on augumented user 84355 33/50 current_auc = 0.380952380952381
User 84355 AUC after training: 0.380952380952381
User 84355 does not improve AUC. Reverting changes.
Training on augumented user 76597 34/50 current_auc = 0.380952380952381
User 76597 AUC after training: 0.380952380952381
User 76597 does not improve AUC. Reverting changes.
Training on augumented user 86128 35/50 current_auc = 0.380952380952381
User 86128 AUC after training: 0.380952380952381
User 86128 does not improve AUC. Reverting changes.
Training on augumented user 23753 36/50 current_auc = 0.380952380952381
User 23753 AUC after training: 0.37362637362637363
User 23753 does not improve AUC. Reverting changes.
Training on augumented user 107206 37/50 current_auc = 0.380952380952381
User 107206 AUC after training: 0.380952380952381
User 107206 does not improve AUC. Reverting changes.
Training on augumented user 23003 38/50 current_auc = 0.380952380952381
User 23003 AUC after training: 0.3882783882783883
User 23003 improves AUC. Keeping the model.
Training on augumented user 81885 39/50 current_auc = 0.3882783882783883
User 81885 AUC after training: 0.3882783882783883
User 81885 does not improve AUC. Reverting changes.
Training on augumented user 91016 40/50 current_auc = 0.3882783882783883
User 91016 AUC after training: 0.3882783882783883
User 91016 does not improve AUC. Reverting changes.
Training on augumented user 94912 41/50 current_auc = 0.3882783882783883
User 94912 AUC after training: 0.3882783882783883
User 94912 does not improve AUC. Reverting changes.
Training on augumented user 126373 42/50 current_auc = 0.3882783882783883
User 126373 AUC after training: 0.3882783882783883
User 126373 does not improve AUC. Reverting changes.
Training on augumented user 41967 43/50 current_auc = 0.3882783882783883
User 41967 AUC after training: 0.3882783882783883
User 41967 does not improve AUC. Reverting changes.
Training on augumented user 130922 44/50 current_auc = 0.3882783882783883
User 130922 AUC after training: 0.3882783882783883
User 130922 does not improve AUC. Reverting changes.
Training on augumented user 127004 45/50 current_auc = 0.3882783882783883
User 127004 AUC after training: 0.3882783882783883
User 127004 does not improve AUC. Reverting changes.
Training on augumented user 68535 46/50 current_auc = 0.3882783882783883
User 68535 AUC after training: 0.38461538461538464
User 68535 does not improve AUC. Reverting changes.
Training on augumented user 54665 47/50 current_auc = 0.3882783882783883
User 54665 AUC after training: 0.3882783882783883
User 54665 does not improve AUC. Reverting changes.
Training on augumented user 117717 48/50 current_auc = 0.3882783882783883
User 117717 AUC after training: 0.38461538461538464
User 117717 does not improve AUC. Reverting changes.
Training on augumented user 121748 49/50 current_auc = 0.3882783882783883
User 121748 AUC after training: 0.38095238095238093
User 121748 does not improve AUC. Reverting changes.
[2024-12-02 20:15:10.541156] start test user 34511 281/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:10.982656] start test user 34511 281/568 recall augumented users by random, augumented_users = [99016, 87406, 128334, 33137, 3256, 12810, 87499, 6792, 39494, 61434, 45043, 23604, 1689, 313, 35139, 1375, 86608, 81796, 57296, 127640, 44699, 59103, 47397, 43769, 32193, 26575, 24791, 12107, 44385, 63250, 89923, 116588, 26260, 16021, 75116, 7674, 23530, 32017, 80545, 35926, 51063, 71051, 27068, 96965, 127648, 16964, 31148, 66740, 109807, 110771]
[2024-12-02 20:15:10.997936] user = 34511 Cloud 281/568
[2024-12-02 20:15:11.023832] user = 34511 Local 281/568
[2024-12-02 20:15:11.133673] user = 34511 Local+ 281/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:13.619046] user = 34511 MPDA- 281/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6370192307692307
Training on augumented user 99016 0/50 current_auc = 0.6370192307692307
User 99016 AUC after training: 0.6365899725274726
User 99016 does not improve AUC. Reverting changes.
Training on augumented user 87406 1/50 current_auc = 0.6370192307692307
User 87406 AUC after training: 0.6375343406593407
User 87406 improves AUC. Keeping the model.
Training on augumented user 128334 2/50 current_auc = 0.6375343406593407
User 128334 AUC after training: 0.6372767857142857
User 128334 does not improve AUC. Reverting changes.
Training on augumented user 33137 3/50 current_auc = 0.6375343406593407
User 33137 AUC after training: 0.6370192307692308
User 33137 does not improve AUC. Reverting changes.
Training on augumented user 3256 4/50 current_auc = 0.6375343406593407
User 3256 AUC after training: 0.6372767857142858
User 3256 does not improve AUC. Reverting changes.
Training on augumented user 12810 5/50 current_auc = 0.6375343406593407
User 12810 AUC after training: 0.6366758241758241
User 12810 does not improve AUC. Reverting changes.
Training on augumented user 87499 6/50 current_auc = 0.6375343406593407
User 87499 AUC after training: 0.6365041208791209
User 87499 does not improve AUC. Reverting changes.
Training on augumented user 6792 7/50 current_auc = 0.6375343406593407
User 6792 AUC after training: 0.6377918956043956
User 6792 improves AUC. Keeping the model.
Training on augumented user 39494 8/50 current_auc = 0.6377918956043956
User 39494 AUC after training: 0.6380494505494506
User 39494 improves AUC. Keeping the model.
Training on augumented user 61434 9/50 current_auc = 0.6380494505494506
User 61434 AUC after training: 0.6393372252747253
User 61434 improves AUC. Keeping the model.
Training on augumented user 45043 10/50 current_auc = 0.6393372252747253
User 45043 AUC after training: 0.6377918956043956
User 45043 does not improve AUC. Reverting changes.
Training on augumented user 23604 11/50 current_auc = 0.6393372252747253
User 23604 AUC after training: 0.640367445054945
User 23604 improves AUC. Keeping the model.
Training on augumented user 1689 12/50 current_auc = 0.640367445054945
User 1689 AUC after training: 0.6394230769230769
User 1689 does not improve AUC. Reverting changes.
Training on augumented user 313 13/50 current_auc = 0.640367445054945
User 313 AUC after training: 0.6395089285714285
User 313 does not improve AUC. Reverting changes.
Training on augumented user 35139 14/50 current_auc = 0.640367445054945
User 35139 AUC after training: 0.640367445054945
User 35139 does not improve AUC. Reverting changes.
Training on augumented user 1375 15/50 current_auc = 0.640367445054945
User 1375 AUC after training: 0.6401098901098902
User 1375 does not improve AUC. Reverting changes.
Training on augumented user 86608 16/50 current_auc = 0.640367445054945
User 86608 AUC after training: 0.6401098901098901
User 86608 does not improve AUC. Reverting changes.
Training on augumented user 81796 17/50 current_auc = 0.640367445054945
User 81796 AUC after training: 0.6383928571428572
User 81796 does not improve AUC. Reverting changes.
Training on augumented user 57296 18/50 current_auc = 0.640367445054945
User 57296 AUC after training: 0.6398523351648353
User 57296 does not improve AUC. Reverting changes.
Training on augumented user 127640 19/50 current_auc = 0.640367445054945
User 127640 AUC after training: 0.6395947802197803
User 127640 does not improve AUC. Reverting changes.
Training on augumented user 44699 20/50 current_auc = 0.640367445054945
User 44699 AUC after training: 0.6397664835164836
User 44699 does not improve AUC. Reverting changes.
Training on augumented user 59103 21/50 current_auc = 0.640367445054945
User 59103 AUC after training: 0.6396806318681318
User 59103 does not improve AUC. Reverting changes.
Training on augumented user 47397 22/50 current_auc = 0.640367445054945
User 47397 AUC after training: 0.639423076923077
User 47397 does not improve AUC. Reverting changes.
Training on augumented user 43769 23/50 current_auc = 0.640367445054945
User 43769 AUC after training: 0.638907967032967
User 43769 does not improve AUC. Reverting changes.
Training on augumented user 32193 24/50 current_auc = 0.640367445054945
User 32193 AUC after training: 0.6397664835164836
User 32193 does not improve AUC. Reverting changes.
Training on augumented user 26575 25/50 current_auc = 0.640367445054945
User 26575 AUC after training: 0.6400240384615384
User 26575 does not improve AUC. Reverting changes.
Training on augumented user 24791 26/50 current_auc = 0.640367445054945
User 24791 AUC after training: 0.6386504120879121
User 24791 does not improve AUC. Reverting changes.
Training on augumented user 12107 27/50 current_auc = 0.640367445054945
User 12107 AUC after training: 0.639680631868132
User 12107 does not improve AUC. Reverting changes.
Training on augumented user 44385 28/50 current_auc = 0.640367445054945
User 44385 AUC after training: 0.6401098901098902
User 44385 does not improve AUC. Reverting changes.
Training on augumented user 63250 29/50 current_auc = 0.640367445054945
User 63250 AUC after training: 0.6397664835164836
User 63250 does not improve AUC. Reverting changes.
Training on augumented user 89923 30/50 current_auc = 0.640367445054945
User 89923 AUC after training: 0.6401098901098901
User 89923 does not improve AUC. Reverting changes.
Training on augumented user 116588 31/50 current_auc = 0.640367445054945
User 116588 AUC after training: 0.6388221153846154
User 116588 does not improve AUC. Reverting changes.
Training on augumented user 26260 32/50 current_auc = 0.640367445054945
User 26260 AUC after training: 0.6390796703296704
User 26260 does not improve AUC. Reverting changes.
Training on augumented user 16021 33/50 current_auc = 0.640367445054945
User 16021 AUC after training: 0.6395947802197802
User 16021 does not improve AUC. Reverting changes.
Training on augumented user 75116 34/50 current_auc = 0.640367445054945
User 75116 AUC after training: 0.6402815934065934
User 75116 does not improve AUC. Reverting changes.
Training on augumented user 7674 35/50 current_auc = 0.640367445054945
User 7674 AUC after training: 0.6393372252747253
User 7674 does not improve AUC. Reverting changes.
Training on augumented user 23530 36/50 current_auc = 0.640367445054945
User 23530 AUC after training: 0.6395947802197801
User 23530 does not improve AUC. Reverting changes.
Training on augumented user 32017 37/50 current_auc = 0.640367445054945
User 32017 AUC after training: 0.639423076923077
User 32017 does not improve AUC. Reverting changes.
Training on augumented user 80545 38/50 current_auc = 0.640367445054945
User 80545 AUC after training: 0.6401098901098902
User 80545 does not improve AUC. Reverting changes.
Training on augumented user 35926 39/50 current_auc = 0.640367445054945
User 35926 AUC after training: 0.6399381868131868
User 35926 does not improve AUC. Reverting changes.
Training on augumented user 51063 40/50 current_auc = 0.640367445054945
User 51063 AUC after training: 0.6393372252747253
User 51063 does not improve AUC. Reverting changes.
Training on augumented user 71051 41/50 current_auc = 0.640367445054945
User 71051 AUC after training: 0.639680631868132
User 71051 does not improve AUC. Reverting changes.
Training on augumented user 27068 42/50 current_auc = 0.640367445054945
User 27068 AUC after training: 0.6395089285714286
User 27068 does not improve AUC. Reverting changes.
Training on augumented user 96965 43/50 current_auc = 0.640367445054945
User 96965 AUC after training: 0.6397664835164836
User 96965 does not improve AUC. Reverting changes.
Training on augumented user 127648 44/50 current_auc = 0.640367445054945
User 127648 AUC after training: 0.6399381868131868
User 127648 does not improve AUC. Reverting changes.
Training on augumented user 16964 45/50 current_auc = 0.640367445054945
User 16964 AUC after training: 0.6399381868131868
User 16964 does not improve AUC. Reverting changes.
Training on augumented user 31148 46/50 current_auc = 0.640367445054945
User 31148 AUC after training: 0.6395947802197802
User 31148 does not improve AUC. Reverting changes.
Training on augumented user 66740 47/50 current_auc = 0.640367445054945
User 66740 AUC after training: 0.6390796703296704
User 66740 does not improve AUC. Reverting changes.
Training on augumented user 109807 48/50 current_auc = 0.640367445054945
User 109807 AUC after training: 0.6397664835164836
User 109807 does not improve AUC. Reverting changes.
Training on augumented user 110771 49/50 current_auc = 0.640367445054945
User 110771 AUC after training: 0.6404532967032968
User 110771 improves AUC. Keeping the model.
[2024-12-02 20:15:43.207194] start test user 34576 282/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:44.029937] start test user 34576 282/568 recall augumented users by random, augumented_users = [24935, 13597, 3842, 10446, 86249, 21947, 18170, 25384, 127990, 36988, 74647, 27241, 43044, 79864, 57305, 57044, 94564, 123659, 79285, 39699, 113831, 26978, 26854, 43596, 127834, 76139, 110218, 15040, 61814, 137070, 7566, 138161, 101888, 46910, 50608, 77029, 89610, 64821, 123802, 25077, 87243, 108144, 78566, 43009, 55657, 101343, 45028, 4502, 78696, 73959]
[2024-12-02 20:15:44.080127] user = 34576 Cloud 282/568
[2024-12-02 20:15:44.220288] user = 34576 Local 282/568
[2024-12-02 20:15:45.101193] user = 34576 Local+ 282/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:47.740006] user = 34576 MPDA- 282/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6850363643669386
Training on augumented user 24935 0/50 current_auc = 0.6850363643669386
User 24935 AUC after training: 0.6850564551774019
User 24935 improves AUC. Keeping the model.
Training on augumented user 13597 1/50 current_auc = 0.6850564551774019
User 13597 AUC after training: 0.6847149113995259
User 13597 does not improve AUC. Reverting changes.
Training on augumented user 3842 2/50 current_auc = 0.6850564551774019
User 3842 AUC after training: 0.6847350022099892
User 3842 does not improve AUC. Reverting changes.
Training on augumented user 10446 3/50 current_auc = 0.6850564551774019
User 10446 AUC after training: 0.6843331860007232
User 10446 does not improve AUC. Reverting changes.
Training on augumented user 86249 4/50 current_auc = 0.6850564551774019
User 86249 AUC after training: 0.6849760919355488
User 86249 does not improve AUC. Reverting changes.
Training on augumented user 21947 5/50 current_auc = 0.6850564551774019
User 21947 AUC after training: 0.6850363643669386
User 21947 does not improve AUC. Reverting changes.
Training on augumented user 18170 6/50 current_auc = 0.6850564551774019
User 18170 AUC after training: 0.6849560011250854
User 18170 does not improve AUC. Reverting changes.
Training on augumented user 25384 7/50 current_auc = 0.6850564551774019
User 25384 AUC after training: 0.6850162735564753
User 25384 does not improve AUC. Reverting changes.
Training on augumented user 127990 8/50 current_auc = 0.6850564551774019
User 127990 AUC after training: 0.685136818419255
User 127990 improves AUC. Keeping the model.
Training on augumented user 36988 9/50 current_auc = 0.685136818419255
User 36988 AUC after training: 0.6851569092297183
User 36988 improves AUC. Keeping the model.
Training on augumented user 74647 10/50 current_auc = 0.6851569092297183
User 74647 AUC after training: 0.6849760919355486
User 74647 does not improve AUC. Reverting changes.
Training on augumented user 27241 11/50 current_auc = 0.6851569092297183
User 27241 AUC after training: 0.6849760919355488
User 27241 does not improve AUC. Reverting changes.
Training on augumented user 43044 12/50 current_auc = 0.6851569092297183
User 43044 AUC after training: 0.6849760919355488
User 43044 does not improve AUC. Reverting changes.
Training on augumented user 79864 13/50 current_auc = 0.6851569092297183
User 79864 AUC after training: 0.6849359103146221
User 79864 does not improve AUC. Reverting changes.
Training on augumented user 57305 14/50 current_auc = 0.6851569092297183
User 57305 AUC after training: 0.6849158195041588
User 57305 does not improve AUC. Reverting changes.
Training on augumented user 57044 15/50 current_auc = 0.6851569092297183
User 57044 AUC after training: 0.6850765459878652
User 57044 does not improve AUC. Reverting changes.
Training on augumented user 94564 16/50 current_auc = 0.6851569092297183
User 94564 AUC after training: 0.6852774540924982
User 94564 improves AUC. Keeping the model.
Training on augumented user 123659 17/50 current_auc = 0.6852774540924982
User 123659 AUC after training: 0.6851569092297183
User 123659 does not improve AUC. Reverting changes.
Training on augumented user 79285 18/50 current_auc = 0.6852774540924982
User 79285 AUC after training: 0.6841523687065536
User 79285 does not improve AUC. Reverting changes.
Training on augumented user 39699 19/50 current_auc = 0.6852774540924982
User 39699 AUC after training: 0.6847350022099892
User 39699 does not improve AUC. Reverting changes.
Training on augumented user 113831 20/50 current_auc = 0.6852774540924982
User 113831 AUC after training: 0.6850363643669386
User 113831 does not improve AUC. Reverting changes.
Training on augumented user 26978 21/50 current_auc = 0.6852774540924982
User 26978 AUC after training: 0.6850564551774019
User 26978 does not improve AUC. Reverting changes.
Training on augumented user 26854 22/50 current_auc = 0.6852774540924982
User 26854 AUC after training: 0.6850966367983284
User 26854 does not improve AUC. Reverting changes.
Training on augumented user 43596 23/50 current_auc = 0.6852774540924982
User 43596 AUC after training: 0.6843331860007233
User 43596 does not improve AUC. Reverting changes.
Training on augumented user 127834 24/50 current_auc = 0.6852774540924982
User 127834 AUC after training: 0.6852171816611082
User 127834 does not improve AUC. Reverting changes.
Training on augumented user 76139 25/50 current_auc = 0.6852774540924982
User 76139 AUC after training: 0.6852372724715715
User 76139 does not improve AUC. Reverting changes.
Training on augumented user 110218 26/50 current_auc = 0.6852774540924982
User 110218 AUC after training: 0.6849158195041588
User 110218 does not improve AUC. Reverting changes.
Training on augumented user 15040 27/50 current_auc = 0.6852774540924982
User 15040 AUC after training: 0.6848153654518423
User 15040 does not improve AUC. Reverting changes.
Training on augumented user 61814 28/50 current_auc = 0.6852774540924982
User 61814 AUC after training: 0.6854984530075943
User 61814 improves AUC. Keeping the model.
Training on augumented user 137070 29/50 current_auc = 0.6854984530075943
User 137070 AUC after training: 0.6852171816611081
User 137070 does not improve AUC. Reverting changes.
Training on augumented user 7566 30/50 current_auc = 0.6854984530075943
User 7566 AUC after training: 0.6851970908506448
User 7566 does not improve AUC. Reverting changes.
Training on augumented user 138161 31/50 current_auc = 0.6854984530075943
User 138161 AUC after training: 0.6855989070599109
User 138161 improves AUC. Keeping the model.
Training on augumented user 101888 32/50 current_auc = 0.6855989070599109
User 101888 AUC after training: 0.685679270301764
User 101888 improves AUC. Keeping the model.
Training on augumented user 46910 33/50 current_auc = 0.685679270301764
User 46910 AUC after training: 0.685679270301764
User 46910 does not improve AUC. Reverting changes.
Training on augumented user 50608 34/50 current_auc = 0.685679270301764
User 50608 AUC after training: 0.685679270301764
User 50608 does not improve AUC. Reverting changes.
Training on augumented user 77029 35/50 current_auc = 0.685679270301764
User 77029 AUC after training: 0.6847149113995259
User 77029 does not improve AUC. Reverting changes.
Training on augumented user 89610 36/50 current_auc = 0.685679270301764
User 89610 AUC after training: 0.6857596335436171
User 89610 improves AUC. Keeping the model.
Training on augumented user 64821 37/50 current_auc = 0.6857596335436171
User 64821 AUC after training: 0.6855989070599108
User 64821 does not improve AUC. Reverting changes.
Training on augumented user 123802 38/50 current_auc = 0.6857596335436171
User 123802 AUC after training: 0.6850363643669386
User 123802 does not improve AUC. Reverting changes.
Training on augumented user 25077 39/50 current_auc = 0.6857596335436171
User 25077 AUC after training: 0.6862619038051995
User 25077 improves AUC. Keeping the model.
Training on augumented user 87243 40/50 current_auc = 0.6862619038051995
User 87243 AUC after training: 0.6874271708120706
User 87243 improves AUC. Keeping the model.
Training on augumented user 108144 41/50 current_auc = 0.6874271708120706
User 108144 AUC after training: 0.6879495318841162
User 108144 improves AUC. Keeping the model.
Training on augumented user 78566 42/50 current_auc = 0.6879495318841162
User 78566 AUC after training: 0.6884919837666251
User 78566 improves AUC. Keeping the model.
Training on augumented user 43009 43/50 current_auc = 0.6884919837666251
User 43009 AUC after training: 0.6881705307992123
User 43009 does not improve AUC. Reverting changes.
Training on augumented user 55657 44/50 current_auc = 0.6884919837666251
User 55657 AUC after training: 0.6886326194398682
User 55657 improves AUC. Keeping the model.
Training on augumented user 101343 45/50 current_auc = 0.6886326194398682
User 101343 AUC after training: 0.689094708080524
User 101343 improves AUC. Keeping the model.
Training on augumented user 45028 46/50 current_auc = 0.689094708080524
User 45028 AUC after training: 0.6889540724072809
User 45028 does not improve AUC. Reverting changes.
Training on augumented user 4502 47/50 current_auc = 0.689094708080524
User 4502 AUC after training: 0.6888937999758911
User 4502 does not improve AUC. Reverting changes.
Training on augumented user 78696 48/50 current_auc = 0.689094708080524
User 78696 AUC after training: 0.6882308032306024
User 78696 does not improve AUC. Reverting changes.
Training on augumented user 73959 49/50 current_auc = 0.689094708080524
User 73959 AUC after training: 0.6894764334793266
User 73959 improves AUC. Keeping the model.
[2024-12-02 20:16:22.033678] start test user 34584 283/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:22.968682] start test user 34584 283/568 recall augumented users by random, augumented_users = [85275, 15707, 72708, 81132, 76769, 77056, 111184, 22635, 31726, 113160, 87897, 96622, 82236, 82191, 72468, 84250, 14184, 117848, 90295, 132438, 121563, 36354, 41307, 17850, 39010, 21338, 33239, 52179, 1790, 24605, 79801, 51778, 16255, 57156, 39260, 106285, 115688, 8728, 24482, 49812, 50550, 107071, 52765, 85815, 93372, 119392, 100630, 111569, 83813, 77320]
[2024-12-02 20:16:22.985306] user = 34584 Cloud 283/568
[2024-12-02 20:16:23.001321] user = 34584 Local 283/568
[2024-12-02 20:16:23.207377] user = 34584 Local+ 283/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:25.781711] user = 34584 MPDA- 283/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6363636363636364
Training on augumented user 85275 0/50 current_auc = 0.6363636363636364
User 85275 AUC after training: 0.6363636363636364
User 85275 does not improve AUC. Reverting changes.
Training on augumented user 15707 1/50 current_auc = 0.6363636363636364
User 15707 AUC after training: 0.6363636363636364
User 15707 does not improve AUC. Reverting changes.
Training on augumented user 72708 2/50 current_auc = 0.6363636363636364
User 72708 AUC after training: 0.6363636363636364
User 72708 does not improve AUC. Reverting changes.
Training on augumented user 81132 3/50 current_auc = 0.6363636363636364
User 81132 AUC after training: 0.6363636363636364
User 81132 does not improve AUC. Reverting changes.
Training on augumented user 76769 4/50 current_auc = 0.6363636363636364
User 76769 AUC after training: 0.6363636363636364
User 76769 does not improve AUC. Reverting changes.
Training on augumented user 77056 5/50 current_auc = 0.6363636363636364
User 77056 AUC after training: 0.6363636363636364
User 77056 does not improve AUC. Reverting changes.
Training on augumented user 111184 6/50 current_auc = 0.6363636363636364
User 111184 AUC after training: 0.6363636363636364
User 111184 does not improve AUC. Reverting changes.
Training on augumented user 22635 7/50 current_auc = 0.6363636363636364
User 22635 AUC after training: 0.6363636363636364
User 22635 does not improve AUC. Reverting changes.
Training on augumented user 31726 8/50 current_auc = 0.6363636363636364
User 31726 AUC after training: 0.6363636363636364
User 31726 does not improve AUC. Reverting changes.
Training on augumented user 113160 9/50 current_auc = 0.6363636363636364
User 113160 AUC after training: 0.6363636363636364
User 113160 does not improve AUC. Reverting changes.
Training on augumented user 87897 10/50 current_auc = 0.6363636363636364
User 87897 AUC after training: 0.6363636363636364
User 87897 does not improve AUC. Reverting changes.
Training on augumented user 96622 11/50 current_auc = 0.6363636363636364
User 96622 AUC after training: 0.6363636363636364
User 96622 does not improve AUC. Reverting changes.
Training on augumented user 82236 12/50 current_auc = 0.6363636363636364
User 82236 AUC after training: 0.6363636363636364
User 82236 does not improve AUC. Reverting changes.
Training on augumented user 82191 13/50 current_auc = 0.6363636363636364
User 82191 AUC after training: 0.6363636363636364
User 82191 does not improve AUC. Reverting changes.
Training on augumented user 72468 14/50 current_auc = 0.6363636363636364
User 72468 AUC after training: 0.6363636363636364
User 72468 does not improve AUC. Reverting changes.
Training on augumented user 84250 15/50 current_auc = 0.6363636363636364
User 84250 AUC after training: 0.6363636363636364
User 84250 does not improve AUC. Reverting changes.
Training on augumented user 14184 16/50 current_auc = 0.6363636363636364
User 14184 AUC after training: 0.6363636363636364
User 14184 does not improve AUC. Reverting changes.
Training on augumented user 117848 17/50 current_auc = 0.6363636363636364
User 117848 AUC after training: 0.6363636363636364
User 117848 does not improve AUC. Reverting changes.
Training on augumented user 90295 18/50 current_auc = 0.6363636363636364
User 90295 AUC after training: 0.6363636363636364
User 90295 does not improve AUC. Reverting changes.
Training on augumented user 132438 19/50 current_auc = 0.6363636363636364
User 132438 AUC after training: 0.6363636363636364
User 132438 does not improve AUC. Reverting changes.
Training on augumented user 121563 20/50 current_auc = 0.6363636363636364
User 121563 AUC after training: 0.6363636363636364
User 121563 does not improve AUC. Reverting changes.
Training on augumented user 36354 21/50 current_auc = 0.6363636363636364
User 36354 AUC after training: 0.6363636363636364
User 36354 does not improve AUC. Reverting changes.
Training on augumented user 41307 22/50 current_auc = 0.6363636363636364
User 41307 AUC after training: 0.6363636363636364
User 41307 does not improve AUC. Reverting changes.
Training on augumented user 17850 23/50 current_auc = 0.6363636363636364
User 17850 AUC after training: 0.6363636363636364
User 17850 does not improve AUC. Reverting changes.
Training on augumented user 39010 24/50 current_auc = 0.6363636363636364
User 39010 AUC after training: 0.6363636363636364
User 39010 does not improve AUC. Reverting changes.
Training on augumented user 21338 25/50 current_auc = 0.6363636363636364
User 21338 AUC after training: 0.6363636363636364
User 21338 does not improve AUC. Reverting changes.
Training on augumented user 33239 26/50 current_auc = 0.6363636363636364
User 33239 AUC after training: 0.6363636363636364
User 33239 does not improve AUC. Reverting changes.
Training on augumented user 52179 27/50 current_auc = 0.6363636363636364
User 52179 AUC after training: 0.6363636363636364
User 52179 does not improve AUC. Reverting changes.
Training on augumented user 1790 28/50 current_auc = 0.6363636363636364
User 1790 AUC after training: 0.6363636363636364
User 1790 does not improve AUC. Reverting changes.
Training on augumented user 24605 29/50 current_auc = 0.6363636363636364
User 24605 AUC after training: 0.6363636363636364
User 24605 does not improve AUC. Reverting changes.
Training on augumented user 79801 30/50 current_auc = 0.6363636363636364
User 79801 AUC after training: 0.6363636363636364
User 79801 does not improve AUC. Reverting changes.
Training on augumented user 51778 31/50 current_auc = 0.6363636363636364
User 51778 AUC after training: 0.6363636363636364
User 51778 does not improve AUC. Reverting changes.
Training on augumented user 16255 32/50 current_auc = 0.6363636363636364
User 16255 AUC after training: 0.6363636363636364
User 16255 does not improve AUC. Reverting changes.
Training on augumented user 57156 33/50 current_auc = 0.6363636363636364
User 57156 AUC after training: 0.6363636363636364
User 57156 does not improve AUC. Reverting changes.
Training on augumented user 39260 34/50 current_auc = 0.6363636363636364
User 39260 AUC after training: 0.6363636363636364
User 39260 does not improve AUC. Reverting changes.
Training on augumented user 106285 35/50 current_auc = 0.6363636363636364
User 106285 AUC after training: 0.6363636363636364
User 106285 does not improve AUC. Reverting changes.
Training on augumented user 115688 36/50 current_auc = 0.6363636363636364
User 115688 AUC after training: 0.6363636363636364
User 115688 does not improve AUC. Reverting changes.
Training on augumented user 8728 37/50 current_auc = 0.6363636363636364
User 8728 AUC after training: 0.6363636363636364
User 8728 does not improve AUC. Reverting changes.
Training on augumented user 24482 38/50 current_auc = 0.6363636363636364
User 24482 AUC after training: 0.6363636363636364
User 24482 does not improve AUC. Reverting changes.
Training on augumented user 49812 39/50 current_auc = 0.6363636363636364
User 49812 AUC after training: 0.6363636363636364
User 49812 does not improve AUC. Reverting changes.
Training on augumented user 50550 40/50 current_auc = 0.6363636363636364
User 50550 AUC after training: 0.6363636363636364
User 50550 does not improve AUC. Reverting changes.
Training on augumented user 107071 41/50 current_auc = 0.6363636363636364
User 107071 AUC after training: 0.6363636363636364
User 107071 does not improve AUC. Reverting changes.
Training on augumented user 52765 42/50 current_auc = 0.6363636363636364
User 52765 AUC after training: 0.6363636363636364
User 52765 does not improve AUC. Reverting changes.
Training on augumented user 85815 43/50 current_auc = 0.6363636363636364
User 85815 AUC after training: 0.6363636363636364
User 85815 does not improve AUC. Reverting changes.
Training on augumented user 93372 44/50 current_auc = 0.6363636363636364
User 93372 AUC after training: 0.6363636363636364
User 93372 does not improve AUC. Reverting changes.
Training on augumented user 119392 45/50 current_auc = 0.6363636363636364
User 119392 AUC after training: 0.6363636363636364
User 119392 does not improve AUC. Reverting changes.
Training on augumented user 100630 46/50 current_auc = 0.6363636363636364
User 100630 AUC after training: 0.6363636363636364
User 100630 does not improve AUC. Reverting changes.
Training on augumented user 111569 47/50 current_auc = 0.6363636363636364
User 111569 AUC after training: 0.6363636363636364
User 111569 does not improve AUC. Reverting changes.
Training on augumented user 83813 48/50 current_auc = 0.6363636363636364
User 83813 AUC after training: 0.6363636363636364
User 83813 does not improve AUC. Reverting changes.
Training on augumented user 77320 49/50 current_auc = 0.6363636363636364
User 77320 AUC after training: 0.6363636363636364
User 77320 does not improve AUC. Reverting changes.
[2024-12-02 20:16:57.405930] start test user 34601 284/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:57.871556] start test user 34601 284/568 recall augumented users by random, augumented_users = [46361, 44463, 121897, 104760, 60426, 35228, 23890, 11580, 106950, 74331, 7713, 25621, 54002, 68986, 128818, 67698, 67150, 125788, 135142, 14832, 87244, 118496, 80108, 100366, 8693, 34778, 94902, 51601, 51365, 94116, 66842, 29200, 26438, 89049, 110120, 51434, 6687, 30907, 27005, 30195, 59341, 4693, 102209, 69095, 50205, 101693, 124766, 80012, 109975, 25415]
[2024-12-02 20:16:57.888224] user = 34601 Cloud 284/568
[2024-12-02 20:16:57.902171] user = 34601 Local 284/568
[2024-12-02 20:16:58.247438] user = 34601 Local+ 284/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:00.872045] user = 34601 MPDA- 284/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5655133295519001
Training on augumented user 46361 0/50 current_auc = 0.5655133295519001
User 46361 AUC after training: 0.5640952921157119
User 46361 does not improve AUC. Reverting changes.
Training on augumented user 44463 1/50 current_auc = 0.5655133295519001
User 44463 AUC after training: 0.5640952921157119
User 44463 does not improve AUC. Reverting changes.
Training on augumented user 121897 2/50 current_auc = 0.5655133295519001
User 121897 AUC after training: 0.5646625070901872
User 121897 does not improve AUC. Reverting changes.
Training on augumented user 104760 3/50 current_auc = 0.5655133295519001
User 104760 AUC after training: 0.5663641520136131
User 104760 improves AUC. Keeping the model.
Training on augumented user 60426 4/50 current_auc = 0.5663641520136131
User 60426 AUC after training: 0.5657969370391378
User 60426 does not improve AUC. Reverting changes.
Training on augumented user 35228 5/50 current_auc = 0.5663641520136131
User 35228 AUC after training: 0.5595575723199092
User 35228 does not improve AUC. Reverting changes.
Training on augumented user 23890 6/50 current_auc = 0.5663641520136131
User 23890 AUC after training: 0.5655133295519001
User 23890 does not improve AUC. Reverting changes.
Training on augumented user 11580 7/50 current_auc = 0.5663641520136131
User 11580 AUC after training: 0.5646625070901872
User 11580 does not improve AUC. Reverting changes.
Training on augumented user 106950 8/50 current_auc = 0.5663641520136131
User 106950 AUC after training: 0.5663641520136131
User 106950 does not improve AUC. Reverting changes.
Training on augumented user 74331 9/50 current_auc = 0.5663641520136131
User 74331 AUC after training: 0.5686330119115144
User 74331 improves AUC. Keeping the model.
Training on augumented user 7713 10/50 current_auc = 0.5686330119115144
User 7713 AUC after training: 0.5666477595008508
User 7713 does not improve AUC. Reverting changes.
Training on augumented user 25621 11/50 current_auc = 0.5686330119115144
User 25621 AUC after training: 0.5680657969370392
User 25621 does not improve AUC. Reverting changes.
Training on augumented user 54002 12/50 current_auc = 0.5686330119115144
User 54002 AUC after training: 0.5669313669880884
User 54002 does not improve AUC. Reverting changes.
Training on augumented user 68986 13/50 current_auc = 0.5686330119115144
User 68986 AUC after training: 0.5672149744753262
User 68986 does not improve AUC. Reverting changes.
Training on augumented user 128818 14/50 current_auc = 0.5686330119115144
User 128818 AUC after training: 0.5697674418604651
User 128818 improves AUC. Keeping the model.
Training on augumented user 67698 15/50 current_auc = 0.5697674418604651
User 67698 AUC after training: 0.5788428814520704
User 67698 improves AUC. Keeping the model.
Training on augumented user 67150 16/50 current_auc = 0.5788428814520704
User 67150 AUC after training: 0.5779920589903573
User 67150 does not improve AUC. Reverting changes.
Training on augumented user 125788 17/50 current_auc = 0.5788428814520704
User 125788 AUC after training: 0.576574021554169
User 125788 does not improve AUC. Reverting changes.
Training on augumented user 135142 18/50 current_auc = 0.5788428814520704
User 135142 AUC after training: 0.5771412365286442
User 135142 does not improve AUC. Reverting changes.
Training on augumented user 14832 19/50 current_auc = 0.5788428814520704
User 14832 AUC after training: 0.5771412365286444
User 14832 does not improve AUC. Reverting changes.
Training on augumented user 87244 20/50 current_auc = 0.5788428814520704
User 87244 AUC after training: 0.578275666477595
User 87244 does not improve AUC. Reverting changes.
Training on augumented user 118496 21/50 current_auc = 0.5788428814520704
User 118496 AUC after training: 0.5788428814520703
User 118496 does not improve AUC. Reverting changes.
Training on augumented user 80108 22/50 current_auc = 0.5788428814520704
User 80108 AUC after training: 0.576574021554169
User 80108 does not improve AUC. Reverting changes.
Training on augumented user 100366 23/50 current_auc = 0.5788428814520704
User 100366 AUC after training: 0.5819625638116847
User 100366 improves AUC. Keeping the model.
Training on augumented user 8693 24/50 current_auc = 0.5819625638116847
User 8693 AUC after training: 0.5796937039137834
User 8693 does not improve AUC. Reverting changes.
Training on augumented user 34778 25/50 current_auc = 0.5819625638116847
User 34778 AUC after training: 0.5788428814520703
User 34778 does not improve AUC. Reverting changes.
Training on augumented user 94902 26/50 current_auc = 0.5819625638116847
User 94902 AUC after training: 0.5802609188882586
User 94902 does not improve AUC. Reverting changes.
Training on augumented user 51601 27/50 current_auc = 0.5819625638116847
User 51601 AUC after training: 0.5771412365286444
User 51601 does not improve AUC. Reverting changes.
Training on augumented user 51365 28/50 current_auc = 0.5819625638116847
User 51365 AUC after training: 0.5779920589903573
User 51365 does not improve AUC. Reverting changes.
Training on augumented user 94116 29/50 current_auc = 0.5819625638116847
User 94116 AUC after training: 0.5771412365286444
User 94116 does not improve AUC. Reverting changes.
Training on augumented user 66842 30/50 current_auc = 0.5819625638116847
User 66842 AUC after training: 0.5802609188882586
User 66842 does not improve AUC. Reverting changes.
Training on augumented user 29200 31/50 current_auc = 0.5819625638116847
User 29200 AUC after training: 0.5762904140669313
User 29200 does not improve AUC. Reverting changes.
Training on augumented user 26438 32/50 current_auc = 0.5819625638116847
User 26438 AUC after training: 0.5813953488372093
User 26438 does not improve AUC. Reverting changes.
Training on augumented user 89049 33/50 current_auc = 0.5819625638116847
User 89049 AUC after training: 0.5794100964265456
User 89049 does not improve AUC. Reverting changes.
Training on augumented user 110120 34/50 current_auc = 0.5819625638116847
User 110120 AUC after training: 0.5768576290414066
User 110120 does not improve AUC. Reverting changes.
Training on augumented user 51434 35/50 current_auc = 0.5819625638116847
User 51434 AUC after training: 0.5788428814520703
User 51434 does not improve AUC. Reverting changes.
Training on augumented user 6687 36/50 current_auc = 0.5819625638116847
User 6687 AUC after training: 0.5779920589903573
User 6687 does not improve AUC. Reverting changes.
Training on augumented user 30907 37/50 current_auc = 0.5819625638116847
User 30907 AUC after training: 0.5762904140669313
User 30907 does not improve AUC. Reverting changes.
Training on augumented user 27005 38/50 current_auc = 0.5819625638116847
User 27005 AUC after training: 0.5808281338627339
User 27005 does not improve AUC. Reverting changes.
Training on augumented user 30195 39/50 current_auc = 0.5819625638116847
User 30195 AUC after training: 0.5830969937606353
User 30195 improves AUC. Keeping the model.
Training on augumented user 59341 40/50 current_auc = 0.5830969937606353
User 59341 AUC after training: 0.5808281338627339
User 59341 does not improve AUC. Reverting changes.
Training on augumented user 4693 41/50 current_auc = 0.5830969937606353
User 4693 AUC after training: 0.578275666477595
User 4693 does not improve AUC. Reverting changes.
Training on augumented user 102209 42/50 current_auc = 0.5830969937606353
User 102209 AUC after training: 0.5819625638116847
User 102209 does not improve AUC. Reverting changes.
Training on augumented user 69095 43/50 current_auc = 0.5830969937606353
User 69095 AUC after training: 0.5813953488372092
User 69095 does not improve AUC. Reverting changes.
Training on augumented user 50205 44/50 current_auc = 0.5830969937606353
User 50205 AUC after training: 0.5819625638116847
User 50205 does not improve AUC. Reverting changes.
Training on augumented user 101693 45/50 current_auc = 0.5830969937606353
User 101693 AUC after training: 0.5796937039137833
User 101693 does not improve AUC. Reverting changes.
Training on augumented user 124766 46/50 current_auc = 0.5830969937606353
User 124766 AUC after training: 0.5813953488372092
User 124766 does not improve AUC. Reverting changes.
Training on augumented user 80012 47/50 current_auc = 0.5830969937606353
User 80012 AUC after training: 0.5808281338627339
User 80012 does not improve AUC. Reverting changes.
Training on augumented user 109975 48/50 current_auc = 0.5830969937606353
User 109975 AUC after training: 0.5819625638116845
User 109975 does not improve AUC. Reverting changes.
Training on augumented user 25415 49/50 current_auc = 0.5830969937606353
User 25415 AUC after training: 0.58252977878616
User 25415 does not improve AUC. Reverting changes.
[2024-12-02 20:17:30.358810] start test user 34617 285/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:30.791947] start test user 34617 285/568 recall augumented users by random, augumented_users = [107247, 4111, 50690, 39645, 89417, 28692, 87706, 77248, 86007, 310, 43804, 65893, 68370, 61956, 30837, 126308, 78785, 78439, 23816, 29619, 135726, 94379, 113236, 16396, 137846, 13683, 77465, 37306, 95195, 52580, 119876, 84023, 33805, 20044, 58891, 108464, 27491, 49279, 35851, 92544, 71307, 72171, 84510, 2801, 78905, 103408, 37102, 66614, 35207, 90678]
[2024-12-02 20:17:30.806930] user = 34617 Cloud 285/568
[2024-12-02 20:17:30.843294] user = 34617 Local 285/568
[2024-12-02 20:17:30.884736] user = 34617 Local+ 285/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:32.768152] user = 34617 MPDA- 285/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7241753472222223
Training on augumented user 107247 0/50 current_auc = 0.7241753472222223
User 107247 AUC after training: 0.7246093750000001
User 107247 improves AUC. Keeping the model.
Training on augumented user 4111 1/50 current_auc = 0.7246093750000001
User 4111 AUC after training: 0.7254774305555556
User 4111 improves AUC. Keeping the model.
Training on augumented user 50690 2/50 current_auc = 0.7254774305555556
User 50690 AUC after training: 0.7246093750000001
User 50690 does not improve AUC. Reverting changes.
Training on augumented user 39645 3/50 current_auc = 0.7254774305555556
User 39645 AUC after training: 0.724609375
User 39645 does not improve AUC. Reverting changes.
Training on augumented user 89417 4/50 current_auc = 0.7254774305555556
User 89417 AUC after training: 0.72265625
User 89417 does not improve AUC. Reverting changes.
Training on augumented user 28692 5/50 current_auc = 0.7254774305555556
User 28692 AUC after training: 0.7261284722222223
User 28692 improves AUC. Keeping the model.
Training on augumented user 87706 6/50 current_auc = 0.7261284722222223
User 87706 AUC after training: 0.7276475694444445
User 87706 improves AUC. Keeping the model.
Training on augumented user 77248 7/50 current_auc = 0.7276475694444445
User 77248 AUC after training: 0.7259114583333335
User 77248 does not improve AUC. Reverting changes.
Training on augumented user 86007 8/50 current_auc = 0.7276475694444445
User 86007 AUC after training: 0.7269965277777779
User 86007 does not improve AUC. Reverting changes.
Training on augumented user 310 9/50 current_auc = 0.7276475694444445
User 310 AUC after training: 0.7278645833333334
User 310 improves AUC. Keeping the model.
Training on augumented user 43804 10/50 current_auc = 0.7278645833333334
User 43804 AUC after training: 0.7274305555555556
User 43804 does not improve AUC. Reverting changes.
Training on augumented user 65893 11/50 current_auc = 0.7278645833333334
User 65893 AUC after training: 0.7269965277777779
User 65893 does not improve AUC. Reverting changes.
Training on augumented user 68370 12/50 current_auc = 0.7278645833333334
User 68370 AUC after training: 0.7272135416666666
User 68370 does not improve AUC. Reverting changes.
Training on augumented user 61956 13/50 current_auc = 0.7278645833333334
User 61956 AUC after training: 0.7280815972222223
User 61956 improves AUC. Keeping the model.
Training on augumented user 30837 14/50 current_auc = 0.7280815972222223
User 30837 AUC after training: 0.7274305555555556
User 30837 does not improve AUC. Reverting changes.
Training on augumented user 126308 15/50 current_auc = 0.7280815972222223
User 126308 AUC after training: 0.7280815972222223
User 126308 does not improve AUC. Reverting changes.
Training on augumented user 78785 16/50 current_auc = 0.7280815972222223
User 78785 AUC after training: 0.7276475694444445
User 78785 does not improve AUC. Reverting changes.
Training on augumented user 78439 17/50 current_auc = 0.7280815972222223
User 78439 AUC after training: 0.7278645833333334
User 78439 does not improve AUC. Reverting changes.
Training on augumented user 23816 18/50 current_auc = 0.7280815972222223
User 23816 AUC after training: 0.7274305555555556
User 23816 does not improve AUC. Reverting changes.
Training on augumented user 29619 19/50 current_auc = 0.7280815972222223
User 29619 AUC after training: 0.7265625
User 29619 does not improve AUC. Reverting changes.
Training on augumented user 135726 20/50 current_auc = 0.7280815972222223
User 135726 AUC after training: 0.7289496527777779
User 135726 improves AUC. Keeping the model.
Training on augumented user 94379 21/50 current_auc = 0.7289496527777779
User 94379 AUC after training: 0.7300347222222222
User 94379 improves AUC. Keeping the model.
Training on augumented user 113236 22/50 current_auc = 0.7300347222222222
User 113236 AUC after training: 0.7296006944444445
User 113236 does not improve AUC. Reverting changes.
Training on augumented user 16396 23/50 current_auc = 0.7300347222222222
User 16396 AUC after training: 0.728732638888889
User 16396 does not improve AUC. Reverting changes.
Training on augumented user 137846 24/50 current_auc = 0.7300347222222222
User 137846 AUC after training: 0.7287326388888891
User 137846 does not improve AUC. Reverting changes.
Training on augumented user 13683 25/50 current_auc = 0.7300347222222222
User 13683 AUC after training: 0.726779513888889
User 13683 does not improve AUC. Reverting changes.
Training on augumented user 77465 26/50 current_auc = 0.7300347222222222
User 77465 AUC after training: 0.7293836805555556
User 77465 does not improve AUC. Reverting changes.
Training on augumented user 37306 27/50 current_auc = 0.7300347222222222
User 37306 AUC after training: 0.7298177083333335
User 37306 does not improve AUC. Reverting changes.
Training on augumented user 95195 28/50 current_auc = 0.7300347222222222
User 95195 AUC after training: 0.7300347222222223
User 95195 improves AUC. Keeping the model.
Training on augumented user 52580 29/50 current_auc = 0.7300347222222223
User 52580 AUC after training: 0.7291666666666667
User 52580 does not improve AUC. Reverting changes.
Training on augumented user 119876 30/50 current_auc = 0.7300347222222223
User 119876 AUC after training: 0.7289496527777779
User 119876 does not improve AUC. Reverting changes.
Training on augumented user 84023 31/50 current_auc = 0.7300347222222223
User 84023 AUC after training: 0.7304687500000001
User 84023 improves AUC. Keeping the model.
Training on augumented user 33805 32/50 current_auc = 0.7304687500000001
User 33805 AUC after training: 0.7302517361111113
User 33805 does not improve AUC. Reverting changes.
Training on augumented user 20044 33/50 current_auc = 0.7304687500000001
User 20044 AUC after training: 0.7304687500000001
User 20044 does not improve AUC. Reverting changes.
Training on augumented user 58891 34/50 current_auc = 0.7304687500000001
User 58891 AUC after training: 0.73046875
User 58891 does not improve AUC. Reverting changes.
Training on augumented user 108464 35/50 current_auc = 0.7304687500000001
User 108464 AUC after training: 0.7298177083333335
User 108464 does not improve AUC. Reverting changes.
Training on augumented user 27491 36/50 current_auc = 0.7304687500000001
User 27491 AUC after training: 0.7300347222222223
User 27491 does not improve AUC. Reverting changes.
Training on augumented user 49279 37/50 current_auc = 0.7304687500000001
User 49279 AUC after training: 0.7298177083333334
User 49279 does not improve AUC. Reverting changes.
Training on augumented user 35851 38/50 current_auc = 0.7304687500000001
User 35851 AUC after training: 0.7311197916666667
User 35851 improves AUC. Keeping the model.
Training on augumented user 92544 39/50 current_auc = 0.7311197916666667
User 92544 AUC after training: 0.7296006944444444
User 92544 does not improve AUC. Reverting changes.
Training on augumented user 71307 40/50 current_auc = 0.7311197916666667
User 71307 AUC after training: 0.7298177083333335
User 71307 does not improve AUC. Reverting changes.
Training on augumented user 72171 41/50 current_auc = 0.7311197916666667
User 72171 AUC after training: 0.7309027777777778
User 72171 does not improve AUC. Reverting changes.
Training on augumented user 84510 42/50 current_auc = 0.7311197916666667
User 84510 AUC after training: 0.728515625
User 84510 does not improve AUC. Reverting changes.
Training on augumented user 2801 43/50 current_auc = 0.7311197916666667
User 2801 AUC after training: 0.7298177083333335
User 2801 does not improve AUC. Reverting changes.
Training on augumented user 78905 44/50 current_auc = 0.7311197916666667
User 78905 AUC after training: 0.7313368055555557
User 78905 improves AUC. Keeping the model.
Training on augumented user 103408 45/50 current_auc = 0.7313368055555557
User 103408 AUC after training: 0.7302517361111113
User 103408 does not improve AUC. Reverting changes.
Training on augumented user 37102 46/50 current_auc = 0.7313368055555557
User 37102 AUC after training: 0.7302517361111113
User 37102 does not improve AUC. Reverting changes.
Training on augumented user 66614 47/50 current_auc = 0.7313368055555557
User 66614 AUC after training: 0.7289496527777779
User 66614 does not improve AUC. Reverting changes.
Training on augumented user 35207 48/50 current_auc = 0.7313368055555557
User 35207 AUC after training: 0.7302517361111113
User 35207 does not improve AUC. Reverting changes.
Training on augumented user 90678 49/50 current_auc = 0.7313368055555557
User 90678 AUC after training: 0.7261284722222222
User 90678 does not improve AUC. Reverting changes.
[2024-12-02 20:18:02.645892] start test user 34642 286/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:03.056638] start test user 34642 286/568 recall augumented users by random, augumented_users = [42749, 95216, 94948, 20612, 74896, 69321, 97842, 127482, 110342, 29137, 3061, 128555, 21214, 128574, 40661, 22732, 123166, 4601, 18918, 90934, 80559, 80829, 90795, 117864, 89131, 75475, 101253, 94411, 83029, 113842, 24868, 90387, 14623, 3893, 102399, 575, 129178, 136612, 94675, 97609, 38533, 98866, 6805, 51948, 39706, 128370, 61157, 126577, 80607, 65365]
[2024-12-02 20:18:03.072160] user = 34642 Cloud 286/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:18:03.078995] user = 34642 Local 286/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:18:03.145277] user = 34642 Local+ 286/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:18:06.151808] user = 34642 MPDA- 286/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 42749 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42749 AUC after training: 0.5
User 42749 does not improve AUC. Reverting changes.
Training on augumented user 95216 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95216 AUC after training: 0.5
User 95216 does not improve AUC. Reverting changes.
Training on augumented user 94948 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94948 AUC after training: 0.5
User 94948 does not improve AUC. Reverting changes.
Training on augumented user 20612 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20612 AUC after training: 0.5
User 20612 does not improve AUC. Reverting changes.
Training on augumented user 74896 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74896 AUC after training: 0.5
User 74896 does not improve AUC. Reverting changes.
Training on augumented user 69321 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69321 AUC after training: 0.5
User 69321 does not improve AUC. Reverting changes.
Training on augumented user 97842 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97842 AUC after training: 0.5
User 97842 does not improve AUC. Reverting changes.
Training on augumented user 127482 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127482 AUC after training: 0.5
User 127482 does not improve AUC. Reverting changes.
Training on augumented user 110342 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110342 AUC after training: 0.5
User 110342 does not improve AUC. Reverting changes.
Training on augumented user 29137 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29137 AUC after training: 0.5
User 29137 does not improve AUC. Reverting changes.
Training on augumented user 3061 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3061 AUC after training: 0.5
User 3061 does not improve AUC. Reverting changes.
Training on augumented user 128555 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128555 AUC after training: 0.5
User 128555 does not improve AUC. Reverting changes.
Training on augumented user 21214 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21214 AUC after training: 0.5
User 21214 does not improve AUC. Reverting changes.
Training on augumented user 128574 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128574 AUC after training: 0.5
User 128574 does not improve AUC. Reverting changes.
Training on augumented user 40661 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40661 AUC after training: 0.5
User 40661 does not improve AUC. Reverting changes.
Training on augumented user 22732 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22732 AUC after training: 0.5
User 22732 does not improve AUC. Reverting changes.
Training on augumented user 123166 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123166 AUC after training: 0.5
User 123166 does not improve AUC. Reverting changes.
Training on augumented user 4601 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4601 AUC after training: 0.5
User 4601 does not improve AUC. Reverting changes.
Training on augumented user 18918 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18918 AUC after training: 0.5
User 18918 does not improve AUC. Reverting changes.
Training on augumented user 90934 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90934 AUC after training: 0.5
User 90934 does not improve AUC. Reverting changes.
Training on augumented user 80559 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80559 AUC after training: 0.5
User 80559 does not improve AUC. Reverting changes.
Training on augumented user 80829 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80829 AUC after training: 0.5
User 80829 does not improve AUC. Reverting changes.
Training on augumented user 90795 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90795 AUC after training: 0.5
User 90795 does not improve AUC. Reverting changes.
Training on augumented user 117864 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117864 AUC after training: 0.5
User 117864 does not improve AUC. Reverting changes.
Training on augumented user 89131 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89131 AUC after training: 0.5
User 89131 does not improve AUC. Reverting changes.
Training on augumented user 75475 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75475 AUC after training: 0.5
User 75475 does not improve AUC. Reverting changes.
Training on augumented user 101253 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101253 AUC after training: 0.5
User 101253 does not improve AUC. Reverting changes.
Training on augumented user 94411 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94411 AUC after training: 0.5
User 94411 does not improve AUC. Reverting changes.
Training on augumented user 83029 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83029 AUC after training: 0.5
User 83029 does not improve AUC. Reverting changes.
Training on augumented user 113842 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113842 AUC after training: 0.5
User 113842 does not improve AUC. Reverting changes.
Training on augumented user 24868 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24868 AUC after training: 0.5
User 24868 does not improve AUC. Reverting changes.
Training on augumented user 90387 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90387 AUC after training: 0.5
User 90387 does not improve AUC. Reverting changes.
Training on augumented user 14623 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14623 AUC after training: 0.5
User 14623 does not improve AUC. Reverting changes.
Training on augumented user 3893 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3893 AUC after training: 0.5
User 3893 does not improve AUC. Reverting changes.
Training on augumented user 102399 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102399 AUC after training: 0.5
User 102399 does not improve AUC. Reverting changes.
Training on augumented user 575 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 575 AUC after training: 0.5
User 575 does not improve AUC. Reverting changes.
Training on augumented user 129178 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129178 AUC after training: 0.5
User 129178 does not improve AUC. Reverting changes.
Training on augumented user 136612 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136612 AUC after training: 0.5
User 136612 does not improve AUC. Reverting changes.
Training on augumented user 94675 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94675 AUC after training: 0.5
User 94675 does not improve AUC. Reverting changes.
Training on augumented user 97609 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97609 AUC after training: 0.5
User 97609 does not improve AUC. Reverting changes.
Training on augumented user 38533 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38533 AUC after training: 0.5
User 38533 does not improve AUC. Reverting changes.
Training on augumented user 98866 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98866 AUC after training: 0.5
User 98866 does not improve AUC. Reverting changes.
Training on augumented user 6805 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6805 AUC after training: 0.5
User 6805 does not improve AUC. Reverting changes.
Training on augumented user 51948 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51948 AUC after training: 0.5
User 51948 does not improve AUC. Reverting changes.
Training on augumented user 39706 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39706 AUC after training: 0.5
User 39706 does not improve AUC. Reverting changes.
Training on augumented user 128370 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128370 AUC after training: 0.5
User 128370 does not improve AUC. Reverting changes.
Training on augumented user 61157 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61157 AUC after training: 0.5
User 61157 does not improve AUC. Reverting changes.
Training on augumented user 126577 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126577 AUC after training: 0.5
User 126577 does not improve AUC. Reverting changes.
Training on augumented user 80607 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80607 AUC after training: 0.5
User 80607 does not improve AUC. Reverting changes.
Training on augumented user 65365 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65365 AUC after training: 0.5
User 65365 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:18:34.147150] start test user 34651 287/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:34.584594] start test user 34651 287/568 recall augumented users by random, augumented_users = [38724, 30183, 57634, 118168, 124162, 85113, 61687, 136952, 23601, 92537, 37779, 78574, 117118, 138447, 116657, 55500, 60459, 15024, 90308, 120888, 107044, 116979, 107905, 44846, 114177, 48822, 14856, 100222, 50468, 70042, 45020, 135227, 85616, 2467, 84852, 28172, 30417, 120192, 114946, 114466, 7149, 31093, 64762, 41325, 11550, 66179, 43256, 57383, 40965, 33224]
[2024-12-02 20:18:34.603332] user = 34651 Cloud 287/568
[2024-12-02 20:18:34.673529] user = 34651 Local 287/568
[2024-12-02 20:18:35.241386] user = 34651 Local+ 287/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:37.373109] user = 34651 MPDA- 287/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6524867062871441
Training on augumented user 38724 0/50 current_auc = 0.6524867062871441
User 38724 AUC after training: 0.6525649045980607
User 38724 improves AUC. Keeping the model.
Training on augumented user 30183 1/50 current_auc = 0.6525649045980607
User 30183 AUC after training: 0.6522130121989365
User 30183 does not improve AUC. Reverting changes.
Training on augumented user 57634 2/50 current_auc = 0.6525649045980607
User 57634 AUC after training: 0.6529167969971849
User 57634 improves AUC. Keeping the model.
Training on augumented user 118168 3/50 current_auc = 0.6529167969971849
User 118168 AUC after training: 0.6528776978417267
User 118168 does not improve AUC. Reverting changes.
Training on augumented user 124162 4/50 current_auc = 0.6529167969971849
User 124162 AUC after training: 0.6545198623709728
User 124162 improves AUC. Keeping the model.
Training on augumented user 85113 5/50 current_auc = 0.6545198623709728
User 85113 AUC after training: 0.6532295902408508
User 85113 does not improve AUC. Reverting changes.
Training on augumented user 61687 6/50 current_auc = 0.6545198623709728
User 61687 AUC after training: 0.6550672505473881
User 61687 improves AUC. Keeping the model.
Training on augumented user 136952 7/50 current_auc = 0.6550672505473881
User 136952 AUC after training: 0.6540115733500156
User 136952 does not improve AUC. Reverting changes.
Training on augumented user 23601 8/50 current_auc = 0.6550672505473881
User 23601 AUC after training: 0.6548326556146388
User 23601 does not improve AUC. Reverting changes.
Training on augumented user 92537 9/50 current_auc = 0.6550672505473881
User 92537 AUC after training: 0.6553018454801376
User 92537 improves AUC. Keeping the model.
Training on augumented user 37779 10/50 current_auc = 0.6553018454801376
User 37779 AUC after training: 0.6550281513919299
User 37779 does not improve AUC. Reverting changes.
Training on augumented user 78574 11/50 current_auc = 0.6553018454801376
User 78574 AUC after training: 0.6537769784172661
User 78574 does not improve AUC. Reverting changes.
Training on augumented user 117118 12/50 current_auc = 0.6553018454801376
User 117118 AUC after training: 0.6554973412574288
User 117118 improves AUC. Keeping the model.
Training on augumented user 138447 13/50 current_auc = 0.6554973412574288
User 138447 AUC after training: 0.6545198623709727
User 138447 does not improve AUC. Reverting changes.
Training on augumented user 116657 14/50 current_auc = 0.6554973412574288
User 116657 AUC after training: 0.6552236471692211
User 116657 does not improve AUC. Reverting changes.
Training on augumented user 55500 15/50 current_auc = 0.6554973412574288
User 55500 AUC after training: 0.654246168282765
User 55500 does not improve AUC. Reverting changes.
Training on augumented user 60459 16/50 current_auc = 0.6554973412574288
User 60459 AUC after training: 0.6555364404128871
User 60459 improves AUC. Keeping the model.
Training on augumented user 15024 17/50 current_auc = 0.6555364404128871
User 15024 AUC after training: 0.6528776978417266
User 15024 does not improve AUC. Reverting changes.
Training on augumented user 90308 18/50 current_auc = 0.6555364404128871
User 90308 AUC after training: 0.6553409446355959
User 90308 does not improve AUC. Reverting changes.
Training on augumented user 120888 19/50 current_auc = 0.6555364404128871
User 120888 AUC after training: 0.6566703159211762
User 120888 improves AUC. Keeping the model.
Training on augumented user 107044 20/50 current_auc = 0.6566703159211762
User 107044 AUC after training: 0.6563966218329684
User 107044 does not improve AUC. Reverting changes.
Training on augumented user 116979 21/50 current_auc = 0.6566703159211762
User 116979 AUC after training: 0.6572177040975914
User 116979 improves AUC. Keeping the model.
Training on augumented user 107905 22/50 current_auc = 0.6572177040975914
User 107905 AUC after training: 0.6582342821395057
User 107905 improves AUC. Keeping the model.
Training on augumented user 44846 23/50 current_auc = 0.6582342821395057
User 44846 AUC after training: 0.6582342821395057
User 44846 does not improve AUC. Reverting changes.
Training on augumented user 114177 24/50 current_auc = 0.6582342821395057
User 114177 AUC after training: 0.6578041914294652
User 114177 does not improve AUC. Reverting changes.
Training on augumented user 48822 25/50 current_auc = 0.6582342821395057
User 48822 AUC after training: 0.6575304973412575
User 48822 does not improve AUC. Reverting changes.
Training on augumented user 14856 26/50 current_auc = 0.6582342821395057
User 14856 AUC after training: 0.6612449171097905
User 14856 improves AUC. Keeping the model.
Training on augumented user 100222 27/50 current_auc = 0.6612449171097905
User 100222 AUC after training: 0.6619487019080387
User 100222 improves AUC. Keeping the model.
Training on augumented user 50468 28/50 current_auc = 0.6619487019080387
User 50468 AUC after training: 0.6626524867062871
User 50468 improves AUC. Keeping the model.
Training on augumented user 70042 29/50 current_auc = 0.6626524867062871
User 70042 AUC after training: 0.6620269002189554
User 70042 does not improve AUC. Reverting changes.
Training on augumented user 45020 30/50 current_auc = 0.6626524867062871
User 45020 AUC after training: 0.6617923052862058
User 45020 does not improve AUC. Reverting changes.
Training on augumented user 135227 31/50 current_auc = 0.6626524867062871
User 135227 AUC after training: 0.662769784172662
User 135227 improves AUC. Keeping the model.
Training on augumented user 85616 32/50 current_auc = 0.662769784172662
User 85616 AUC after training: 0.6589380669377541
User 85616 does not improve AUC. Reverting changes.
Training on augumented user 2467 33/50 current_auc = 0.662769784172662
User 2467 AUC after training: 0.6636299655927432
User 2467 improves AUC. Keeping the model.
Training on augumented user 84852 34/50 current_auc = 0.6636299655927432
User 84852 AUC after training: 0.6643337503909916
User 84852 improves AUC. Keeping the model.
Training on augumented user 28172 35/50 current_auc = 0.6643337503909916
User 28172 AUC after training: 0.6643337503909916
User 28172 does not improve AUC. Reverting changes.
Training on augumented user 30417 36/50 current_auc = 0.6643337503909916
User 30417 AUC after training: 0.663434469815452
User 30417 does not improve AUC. Reverting changes.
Training on augumented user 120192 37/50 current_auc = 0.6643337503909916
User 120192 AUC after training: 0.6644901470128246
User 120192 improves AUC. Keeping the model.
Training on augumented user 114946 38/50 current_auc = 0.6644901470128246
User 114946 AUC after training: 0.6643337503909915
User 114946 does not improve AUC. Reverting changes.
Training on augumented user 114466 39/50 current_auc = 0.6644901470128246
User 114466 AUC after training: 0.663278073193619
User 114466 does not improve AUC. Reverting changes.
Training on augumented user 7149 40/50 current_auc = 0.6644901470128246
User 7149 AUC after training: 0.6646856427901158
User 7149 improves AUC. Keeping the model.
Training on augumented user 31093 41/50 current_auc = 0.6646856427901158
User 31093 AUC after training: 0.6633171723490773
User 31093 does not improve AUC. Reverting changes.
Training on augumented user 64762 42/50 current_auc = 0.6646856427901158
User 64762 AUC after training: 0.6633562715045355
User 64762 does not improve AUC. Reverting changes.
Training on augumented user 41325 43/50 current_auc = 0.6646856427901158
User 41325 AUC after training: 0.6643337503909915
User 41325 does not improve AUC. Reverting changes.
Training on augumented user 11550 44/50 current_auc = 0.6646856427901158
User 11550 AUC after training: 0.6642164529246168
User 11550 does not improve AUC. Reverting changes.
Training on augumented user 66179 45/50 current_auc = 0.6646856427901158
User 66179 AUC after training: 0.6632780731936189
User 66179 does not improve AUC. Reverting changes.
Training on augumented user 43256 46/50 current_auc = 0.6646856427901158
User 43256 AUC after training: 0.6649593368783235
User 43256 improves AUC. Keeping the model.
Training on augumented user 57383 47/50 current_auc = 0.6649593368783235
User 57383 AUC after training: 0.664724741945574
User 57383 does not improve AUC. Reverting changes.
Training on augumented user 40965 48/50 current_auc = 0.6649593368783235
User 40965 AUC after training: 0.6650375351892399
User 40965 improves AUC. Keeping the model.
Training on augumented user 33224 49/50 current_auc = 0.6650375351892399
User 33224 AUC after training: 0.6655849233656553
User 33224 improves AUC. Keeping the model.
[2024-12-02 20:19:06.475569] start test user 34683 288/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:07.159910] start test user 34683 288/568 recall augumented users by random, augumented_users = [131631, 4276, 129710, 75356, 52273, 15307, 63530, 82456, 115199, 40094, 126049, 16970, 12716, 50549, 29094, 106115, 106920, 111662, 26887, 8055, 45532, 75931, 15956, 43073, 128798, 57563, 86782, 7252, 48345, 115070, 93684, 40367, 85884, 125418, 19941, 91033, 38318, 134207, 34802, 82107, 25233, 99450, 103733, 84420, 132668, 14672, 14228, 97784, 34221, 646]
[2024-12-02 20:19:07.176137] user = 34683 Cloud 288/568
[2024-12-02 20:19:07.186898] user = 34683 Local 288/568
[2024-12-02 20:19:07.352748] user = 34683 Local+ 288/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:09.521822] user = 34683 MPDA- 288/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4019230769230769
Training on augumented user 131631 0/50 current_auc = 0.4019230769230769
User 131631 AUC after training: 0.39807692307692305
User 131631 does not improve AUC. Reverting changes.
Training on augumented user 4276 1/50 current_auc = 0.4019230769230769
User 4276 AUC after training: 0.40576923076923077
User 4276 improves AUC. Keeping the model.
Training on augumented user 129710 2/50 current_auc = 0.40576923076923077
User 129710 AUC after training: 0.40192307692307694
User 129710 does not improve AUC. Reverting changes.
Training on augumented user 75356 3/50 current_auc = 0.40576923076923077
User 75356 AUC after training: 0.40576923076923077
User 75356 does not improve AUC. Reverting changes.
Training on augumented user 52273 4/50 current_auc = 0.40576923076923077
User 52273 AUC after training: 0.4019230769230769
User 52273 does not improve AUC. Reverting changes.
Training on augumented user 15307 5/50 current_auc = 0.40576923076923077
User 15307 AUC after training: 0.40192307692307694
User 15307 does not improve AUC. Reverting changes.
Training on augumented user 63530 6/50 current_auc = 0.40576923076923077
User 63530 AUC after training: 0.40192307692307694
User 63530 does not improve AUC. Reverting changes.
Training on augumented user 82456 7/50 current_auc = 0.40576923076923077
User 82456 AUC after training: 0.40192307692307694
User 82456 does not improve AUC. Reverting changes.
Training on augumented user 115199 8/50 current_auc = 0.40576923076923077
User 115199 AUC after training: 0.40576923076923077
User 115199 does not improve AUC. Reverting changes.
Training on augumented user 40094 9/50 current_auc = 0.40576923076923077
User 40094 AUC after training: 0.40192307692307694
User 40094 does not improve AUC. Reverting changes.
Training on augumented user 126049 10/50 current_auc = 0.40576923076923077
User 126049 AUC after training: 0.4019230769230769
User 126049 does not improve AUC. Reverting changes.
Training on augumented user 16970 11/50 current_auc = 0.40576923076923077
User 16970 AUC after training: 0.40192307692307694
User 16970 does not improve AUC. Reverting changes.
Training on augumented user 12716 12/50 current_auc = 0.40576923076923077
User 12716 AUC after training: 0.40192307692307694
User 12716 does not improve AUC. Reverting changes.
Training on augumented user 50549 13/50 current_auc = 0.40576923076923077
User 50549 AUC after training: 0.40576923076923077
User 50549 does not improve AUC. Reverting changes.
Training on augumented user 29094 14/50 current_auc = 0.40576923076923077
User 29094 AUC after training: 0.40192307692307694
User 29094 does not improve AUC. Reverting changes.
Training on augumented user 106115 15/50 current_auc = 0.40576923076923077
User 106115 AUC after training: 0.4019230769230769
User 106115 does not improve AUC. Reverting changes.
Training on augumented user 106920 16/50 current_auc = 0.40576923076923077
User 106920 AUC after training: 0.4019230769230769
User 106920 does not improve AUC. Reverting changes.
Training on augumented user 111662 17/50 current_auc = 0.40576923076923077
User 111662 AUC after training: 0.40192307692307694
User 111662 does not improve AUC. Reverting changes.
Training on augumented user 26887 18/50 current_auc = 0.40576923076923077
User 26887 AUC after training: 0.40192307692307694
User 26887 does not improve AUC. Reverting changes.
Training on augumented user 8055 19/50 current_auc = 0.40576923076923077
User 8055 AUC after training: 0.40192307692307694
User 8055 does not improve AUC. Reverting changes.
Training on augumented user 45532 20/50 current_auc = 0.40576923076923077
User 45532 AUC after training: 0.40576923076923077
User 45532 does not improve AUC. Reverting changes.
Training on augumented user 75931 21/50 current_auc = 0.40576923076923077
User 75931 AUC after training: 0.40192307692307694
User 75931 does not improve AUC. Reverting changes.
Training on augumented user 15956 22/50 current_auc = 0.40576923076923077
User 15956 AUC after training: 0.4019230769230769
User 15956 does not improve AUC. Reverting changes.
Training on augumented user 43073 23/50 current_auc = 0.40576923076923077
User 43073 AUC after training: 0.40576923076923077
User 43073 does not improve AUC. Reverting changes.
Training on augumented user 128798 24/50 current_auc = 0.40576923076923077
User 128798 AUC after training: 0.40192307692307694
User 128798 does not improve AUC. Reverting changes.
Training on augumented user 57563 25/50 current_auc = 0.40576923076923077
User 57563 AUC after training: 0.40192307692307694
User 57563 does not improve AUC. Reverting changes.
Training on augumented user 86782 26/50 current_auc = 0.40576923076923077
User 86782 AUC after training: 0.40192307692307694
User 86782 does not improve AUC. Reverting changes.
Training on augumented user 7252 27/50 current_auc = 0.40576923076923077
User 7252 AUC after training: 0.40192307692307694
User 7252 does not improve AUC. Reverting changes.
Training on augumented user 48345 28/50 current_auc = 0.40576923076923077
User 48345 AUC after training: 0.4019230769230769
User 48345 does not improve AUC. Reverting changes.
Training on augumented user 115070 29/50 current_auc = 0.40576923076923077
User 115070 AUC after training: 0.40192307692307694
User 115070 does not improve AUC. Reverting changes.
Training on augumented user 93684 30/50 current_auc = 0.40576923076923077
User 93684 AUC after training: 0.40192307692307694
User 93684 does not improve AUC. Reverting changes.
Training on augumented user 40367 31/50 current_auc = 0.40576923076923077
User 40367 AUC after training: 0.40192307692307694
User 40367 does not improve AUC. Reverting changes.
Training on augumented user 85884 32/50 current_auc = 0.40576923076923077
User 85884 AUC after training: 0.40576923076923077
User 85884 does not improve AUC. Reverting changes.
Training on augumented user 125418 33/50 current_auc = 0.40576923076923077
User 125418 AUC after training: 0.4019230769230769
User 125418 does not improve AUC. Reverting changes.
Training on augumented user 19941 34/50 current_auc = 0.40576923076923077
User 19941 AUC after training: 0.40192307692307694
User 19941 does not improve AUC. Reverting changes.
Training on augumented user 91033 35/50 current_auc = 0.40576923076923077
User 91033 AUC after training: 0.40192307692307694
User 91033 does not improve AUC. Reverting changes.
Training on augumented user 38318 36/50 current_auc = 0.40576923076923077
User 38318 AUC after training: 0.39807692307692305
User 38318 does not improve AUC. Reverting changes.
Training on augumented user 134207 37/50 current_auc = 0.40576923076923077
User 134207 AUC after training: 0.40192307692307694
User 134207 does not improve AUC. Reverting changes.
Training on augumented user 34802 38/50 current_auc = 0.40576923076923077
User 34802 AUC after training: 0.40192307692307694
User 34802 does not improve AUC. Reverting changes.
Training on augumented user 82107 39/50 current_auc = 0.40576923076923077
User 82107 AUC after training: 0.40192307692307694
User 82107 does not improve AUC. Reverting changes.
Training on augumented user 25233 40/50 current_auc = 0.40576923076923077
User 25233 AUC after training: 0.40576923076923077
User 25233 does not improve AUC. Reverting changes.
Training on augumented user 99450 41/50 current_auc = 0.40576923076923077
User 99450 AUC after training: 0.40576923076923077
User 99450 does not improve AUC. Reverting changes.
Training on augumented user 103733 42/50 current_auc = 0.40576923076923077
User 103733 AUC after training: 0.40192307692307694
User 103733 does not improve AUC. Reverting changes.
Training on augumented user 84420 43/50 current_auc = 0.40576923076923077
User 84420 AUC after training: 0.40576923076923077
User 84420 does not improve AUC. Reverting changes.
Training on augumented user 132668 44/50 current_auc = 0.40576923076923077
User 132668 AUC after training: 0.40192307692307694
User 132668 does not improve AUC. Reverting changes.
Training on augumented user 14672 45/50 current_auc = 0.40576923076923077
User 14672 AUC after training: 0.4019230769230769
User 14672 does not improve AUC. Reverting changes.
Training on augumented user 14228 46/50 current_auc = 0.40576923076923077
User 14228 AUC after training: 0.40576923076923077
User 14228 does not improve AUC. Reverting changes.
Training on augumented user 97784 47/50 current_auc = 0.40576923076923077
User 97784 AUC after training: 0.40192307692307694
User 97784 does not improve AUC. Reverting changes.
Training on augumented user 34221 48/50 current_auc = 0.40576923076923077
User 34221 AUC after training: 0.40192307692307694
User 34221 does not improve AUC. Reverting changes.
Training on augumented user 646 49/50 current_auc = 0.40576923076923077
User 646 AUC after training: 0.40192307692307694
User 646 does not improve AUC. Reverting changes.
[2024-12-02 20:19:42.262506] start test user 34692 289/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:42.966246] start test user 34692 289/568 recall augumented users by random, augumented_users = [131833, 87136, 39156, 127080, 800, 27099, 8032, 138375, 5467, 77781, 75872, 13486, 85698, 89855, 25948, 50120, 25752, 14758, 134036, 125341, 112466, 38759, 27842, 114439, 133170, 22602, 17874, 78632, 101963, 58361, 116872, 557, 79290, 89852, 105369, 128285, 60572, 74723, 24663, 110516, 89971, 78142, 71633, 97970, 109563, 78946, 4127, 34190, 104535, 122280]
[2024-12-02 20:19:43.001609] user = 34692 Cloud 289/568
[2024-12-02 20:19:43.010658] user = 34692 Local 289/568
[2024-12-02 20:19:43.069597] user = 34692 Local+ 289/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:46.515693] user = 34692 MPDA- 289/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7098765432098766
Training on augumented user 131833 0/50 current_auc = 0.7098765432098766
User 131833 AUC after training: 0.7098765432098766
User 131833 does not improve AUC. Reverting changes.
Training on augumented user 87136 1/50 current_auc = 0.7098765432098766
User 87136 AUC after training: 0.7098765432098766
User 87136 does not improve AUC. Reverting changes.
Training on augumented user 39156 2/50 current_auc = 0.7098765432098766
User 39156 AUC after training: 0.7098765432098766
User 39156 does not improve AUC. Reverting changes.
Training on augumented user 127080 3/50 current_auc = 0.7098765432098766
User 127080 AUC after training: 0.7160493827160495
User 127080 improves AUC. Keeping the model.
Training on augumented user 800 4/50 current_auc = 0.7160493827160495
User 800 AUC after training: 0.7160493827160495
User 800 does not improve AUC. Reverting changes.
Training on augumented user 27099 5/50 current_auc = 0.7160493827160495
User 27099 AUC after training: 0.7160493827160495
User 27099 does not improve AUC. Reverting changes.
Training on augumented user 8032 6/50 current_auc = 0.7160493827160495
User 8032 AUC after training: 0.7160493827160495
User 8032 does not improve AUC. Reverting changes.
Training on augumented user 138375 7/50 current_auc = 0.7160493827160495
User 138375 AUC after training: 0.7160493827160495
User 138375 does not improve AUC. Reverting changes.
Training on augumented user 5467 8/50 current_auc = 0.7160493827160495
User 5467 AUC after training: 0.7160493827160495
User 5467 does not improve AUC. Reverting changes.
Training on augumented user 77781 9/50 current_auc = 0.7160493827160495
User 77781 AUC after training: 0.7160493827160495
User 77781 does not improve AUC. Reverting changes.
Training on augumented user 75872 10/50 current_auc = 0.7160493827160495
User 75872 AUC after training: 0.7160493827160495
User 75872 does not improve AUC. Reverting changes.
Training on augumented user 13486 11/50 current_auc = 0.7160493827160495
User 13486 AUC after training: 0.7160493827160495
User 13486 does not improve AUC. Reverting changes.
Training on augumented user 85698 12/50 current_auc = 0.7160493827160495
User 85698 AUC after training: 0.7160493827160495
User 85698 does not improve AUC. Reverting changes.
Training on augumented user 89855 13/50 current_auc = 0.7160493827160495
User 89855 AUC after training: 0.7160493827160495
User 89855 does not improve AUC. Reverting changes.
Training on augumented user 25948 14/50 current_auc = 0.7160493827160495
User 25948 AUC after training: 0.7160493827160495
User 25948 does not improve AUC. Reverting changes.
Training on augumented user 50120 15/50 current_auc = 0.7160493827160495
User 50120 AUC after training: 0.7160493827160495
User 50120 does not improve AUC. Reverting changes.
Training on augumented user 25752 16/50 current_auc = 0.7160493827160495
User 25752 AUC after training: 0.7160493827160495
User 25752 does not improve AUC. Reverting changes.
Training on augumented user 14758 17/50 current_auc = 0.7160493827160495
User 14758 AUC after training: 0.7160493827160495
User 14758 does not improve AUC. Reverting changes.
Training on augumented user 134036 18/50 current_auc = 0.7160493827160495
User 134036 AUC after training: 0.7098765432098766
User 134036 does not improve AUC. Reverting changes.
Training on augumented user 125341 19/50 current_auc = 0.7160493827160495
User 125341 AUC after training: 0.7160493827160495
User 125341 does not improve AUC. Reverting changes.
Training on augumented user 112466 20/50 current_auc = 0.7160493827160495
User 112466 AUC after training: 0.7160493827160495
User 112466 does not improve AUC. Reverting changes.
Training on augumented user 38759 21/50 current_auc = 0.7160493827160495
User 38759 AUC after training: 0.7160493827160495
User 38759 does not improve AUC. Reverting changes.
Training on augumented user 27842 22/50 current_auc = 0.7160493827160495
User 27842 AUC after training: 0.7098765432098766
User 27842 does not improve AUC. Reverting changes.
Training on augumented user 114439 23/50 current_auc = 0.7160493827160495
User 114439 AUC after training: 0.7160493827160495
User 114439 does not improve AUC. Reverting changes.
Training on augumented user 133170 24/50 current_auc = 0.7160493827160495
User 133170 AUC after training: 0.7160493827160495
User 133170 does not improve AUC. Reverting changes.
Training on augumented user 22602 25/50 current_auc = 0.7160493827160495
User 22602 AUC after training: 0.7160493827160495
User 22602 does not improve AUC. Reverting changes.
Training on augumented user 17874 26/50 current_auc = 0.7160493827160495
User 17874 AUC after training: 0.7160493827160495
User 17874 does not improve AUC. Reverting changes.
Training on augumented user 78632 27/50 current_auc = 0.7160493827160495
User 78632 AUC after training: 0.7160493827160495
User 78632 does not improve AUC. Reverting changes.
Training on augumented user 101963 28/50 current_auc = 0.7160493827160495
User 101963 AUC after training: 0.7160493827160495
User 101963 does not improve AUC. Reverting changes.
Training on augumented user 58361 29/50 current_auc = 0.7160493827160495
User 58361 AUC after training: 0.7160493827160495
User 58361 does not improve AUC. Reverting changes.
Training on augumented user 116872 30/50 current_auc = 0.7160493827160495
User 116872 AUC after training: 0.7160493827160495
User 116872 does not improve AUC. Reverting changes.
Training on augumented user 557 31/50 current_auc = 0.7160493827160495
User 557 AUC after training: 0.7160493827160495
User 557 does not improve AUC. Reverting changes.
Training on augumented user 79290 32/50 current_auc = 0.7160493827160495
User 79290 AUC after training: 0.7160493827160495
User 79290 does not improve AUC. Reverting changes.
Training on augumented user 89852 33/50 current_auc = 0.7160493827160495
User 89852 AUC after training: 0.7160493827160495
User 89852 does not improve AUC. Reverting changes.
Training on augumented user 105369 34/50 current_auc = 0.7160493827160495
User 105369 AUC after training: 0.7160493827160495
User 105369 does not improve AUC. Reverting changes.
Training on augumented user 128285 35/50 current_auc = 0.7160493827160495
User 128285 AUC after training: 0.7160493827160495
User 128285 does not improve AUC. Reverting changes.
Training on augumented user 60572 36/50 current_auc = 0.7160493827160495
User 60572 AUC after training: 0.7160493827160495
User 60572 does not improve AUC. Reverting changes.
Training on augumented user 74723 37/50 current_auc = 0.7160493827160495
User 74723 AUC after training: 0.7098765432098766
User 74723 does not improve AUC. Reverting changes.
Training on augumented user 24663 38/50 current_auc = 0.7160493827160495
User 24663 AUC after training: 0.7160493827160495
User 24663 does not improve AUC. Reverting changes.
Training on augumented user 110516 39/50 current_auc = 0.7160493827160495
User 110516 AUC after training: 0.7160493827160495
User 110516 does not improve AUC. Reverting changes.
Training on augumented user 89971 40/50 current_auc = 0.7160493827160495
User 89971 AUC after training: 0.7160493827160495
User 89971 does not improve AUC. Reverting changes.
Training on augumented user 78142 41/50 current_auc = 0.7160493827160495
User 78142 AUC after training: 0.7160493827160495
User 78142 does not improve AUC. Reverting changes.
Training on augumented user 71633 42/50 current_auc = 0.7160493827160495
User 71633 AUC after training: 0.7160493827160495
User 71633 does not improve AUC. Reverting changes.
Training on augumented user 97970 43/50 current_auc = 0.7160493827160495
User 97970 AUC after training: 0.7160493827160495
User 97970 does not improve AUC. Reverting changes.
Training on augumented user 109563 44/50 current_auc = 0.7160493827160495
User 109563 AUC after training: 0.7160493827160495
User 109563 does not improve AUC. Reverting changes.
Training on augumented user 78946 45/50 current_auc = 0.7160493827160495
User 78946 AUC after training: 0.7160493827160495
User 78946 does not improve AUC. Reverting changes.
Training on augumented user 4127 46/50 current_auc = 0.7160493827160495
User 4127 AUC after training: 0.7160493827160495
User 4127 does not improve AUC. Reverting changes.
Training on augumented user 34190 47/50 current_auc = 0.7160493827160495
User 34190 AUC after training: 0.7160493827160495
User 34190 does not improve AUC. Reverting changes.
Training on augumented user 104535 48/50 current_auc = 0.7160493827160495
User 104535 AUC after training: 0.7160493827160495
User 104535 does not improve AUC. Reverting changes.
Training on augumented user 122280 49/50 current_auc = 0.7160493827160495
User 122280 AUC after training: 0.7160493827160495
User 122280 does not improve AUC. Reverting changes.
[2024-12-02 20:20:18.344582] start test user 34700 290/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:19.203123] start test user 34700 290/568 recall augumented users by random, augumented_users = [35867, 106806, 45067, 27663, 56994, 41206, 85051, 108088, 112021, 109803, 66642, 97317, 16176, 122965, 125958, 137174, 92784, 36752, 116471, 43022, 84189, 7355, 63424, 105595, 78282, 93163, 28250, 10781, 16855, 63221, 77838, 68299, 20483, 29256, 97191, 6414, 134876, 9511, 100531, 82159, 9656, 33930, 9260, 90339, 51147, 71468, 88236, 92802, 2409, 14058]
[2024-12-02 20:20:19.220316] user = 34700 Cloud 290/568
[2024-12-02 20:20:19.235654] user = 34700 Local 290/568
[2024-12-02 20:20:19.605598] user = 34700 Local+ 290/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:22.026866] user = 34700 MPDA- 290/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6517094017094016
Training on augumented user 35867 0/50 current_auc = 0.6517094017094016
User 35867 AUC after training: 0.6509971509971509
User 35867 does not improve AUC. Reverting changes.
Training on augumented user 106806 1/50 current_auc = 0.6517094017094016
User 106806 AUC after training: 0.6495726495726496
User 106806 does not improve AUC. Reverting changes.
Training on augumented user 45067 2/50 current_auc = 0.6517094017094016
User 45067 AUC after training: 0.6517094017094017
User 45067 improves AUC. Keeping the model.
Training on augumented user 27663 3/50 current_auc = 0.6517094017094017
User 27663 AUC after training: 0.6517094017094017
User 27663 does not improve AUC. Reverting changes.
Training on augumented user 56994 4/50 current_auc = 0.6517094017094017
User 56994 AUC after training: 0.6531339031339032
User 56994 improves AUC. Keeping the model.
Training on augumented user 41206 5/50 current_auc = 0.6531339031339032
User 41206 AUC after training: 0.6517094017094017
User 41206 does not improve AUC. Reverting changes.
Training on augumented user 85051 6/50 current_auc = 0.6531339031339032
User 85051 AUC after training: 0.6531339031339032
User 85051 does not improve AUC. Reverting changes.
Training on augumented user 108088 7/50 current_auc = 0.6531339031339032
User 108088 AUC after training: 0.6531339031339032
User 108088 does not improve AUC. Reverting changes.
Training on augumented user 112021 8/50 current_auc = 0.6531339031339032
User 112021 AUC after training: 0.6538461538461539
User 112021 improves AUC. Keeping the model.
Training on augumented user 109803 9/50 current_auc = 0.6538461538461539
User 109803 AUC after training: 0.6531339031339032
User 109803 does not improve AUC. Reverting changes.
Training on augumented user 66642 10/50 current_auc = 0.6538461538461539
User 66642 AUC after training: 0.650997150997151
User 66642 does not improve AUC. Reverting changes.
Training on augumented user 97317 11/50 current_auc = 0.6538461538461539
User 97317 AUC after training: 0.6538461538461539
User 97317 does not improve AUC. Reverting changes.
Training on augumented user 16176 12/50 current_auc = 0.6538461538461539
User 16176 AUC after training: 0.6538461538461539
User 16176 does not improve AUC. Reverting changes.
Training on augumented user 122965 13/50 current_auc = 0.6538461538461539
User 122965 AUC after training: 0.6538461538461539
User 122965 does not improve AUC. Reverting changes.
Training on augumented user 125958 14/50 current_auc = 0.6538461538461539
User 125958 AUC after training: 0.6524216524216524
User 125958 does not improve AUC. Reverting changes.
Training on augumented user 137174 15/50 current_auc = 0.6538461538461539
User 137174 AUC after training: 0.6538461538461539
User 137174 does not improve AUC. Reverting changes.
Training on augumented user 92784 16/50 current_auc = 0.6538461538461539
User 92784 AUC after training: 0.6538461538461539
User 92784 does not improve AUC. Reverting changes.
Training on augumented user 36752 17/50 current_auc = 0.6538461538461539
User 36752 AUC after training: 0.6509971509971509
User 36752 does not improve AUC. Reverting changes.
Training on augumented user 116471 18/50 current_auc = 0.6538461538461539
User 116471 AUC after training: 0.6545584045584045
User 116471 improves AUC. Keeping the model.
Training on augumented user 43022 19/50 current_auc = 0.6545584045584045
User 43022 AUC after training: 0.6502849002849003
User 43022 does not improve AUC. Reverting changes.
Training on augumented user 84189 20/50 current_auc = 0.6545584045584045
User 84189 AUC after training: 0.6524216524216524
User 84189 does not improve AUC. Reverting changes.
Training on augumented user 7355 21/50 current_auc = 0.6545584045584045
User 7355 AUC after training: 0.6545584045584045
User 7355 does not improve AUC. Reverting changes.
Training on augumented user 63424 22/50 current_auc = 0.6545584045584045
User 63424 AUC after training: 0.6538461538461539
User 63424 does not improve AUC. Reverting changes.
Training on augumented user 105595 23/50 current_auc = 0.6545584045584045
User 105595 AUC after training: 0.6545584045584045
User 105595 does not improve AUC. Reverting changes.
Training on augumented user 78282 24/50 current_auc = 0.6545584045584045
User 78282 AUC after training: 0.6552706552706553
User 78282 improves AUC. Keeping the model.
Training on augumented user 93163 25/50 current_auc = 0.6552706552706553
User 93163 AUC after training: 0.6517094017094017
User 93163 does not improve AUC. Reverting changes.
Training on augumented user 28250 26/50 current_auc = 0.6552706552706553
User 28250 AUC after training: 0.6545584045584045
User 28250 does not improve AUC. Reverting changes.
Training on augumented user 10781 27/50 current_auc = 0.6552706552706553
User 10781 AUC after training: 0.6495726495726496
User 10781 does not improve AUC. Reverting changes.
Training on augumented user 16855 28/50 current_auc = 0.6552706552706553
User 16855 AUC after training: 0.6524216524216524
User 16855 does not improve AUC. Reverting changes.
Training on augumented user 63221 29/50 current_auc = 0.6552706552706553
User 63221 AUC after training: 0.6538461538461539
User 63221 does not improve AUC. Reverting changes.
Training on augumented user 77838 30/50 current_auc = 0.6552706552706553
User 77838 AUC after training: 0.6502849002849003
User 77838 does not improve AUC. Reverting changes.
Training on augumented user 68299 31/50 current_auc = 0.6552706552706553
User 68299 AUC after training: 0.6545584045584045
User 68299 does not improve AUC. Reverting changes.
Training on augumented user 20483 32/50 current_auc = 0.6552706552706553
User 20483 AUC after training: 0.6552706552706553
User 20483 does not improve AUC. Reverting changes.
Training on augumented user 29256 33/50 current_auc = 0.6552706552706553
User 29256 AUC after training: 0.6552706552706553
User 29256 does not improve AUC. Reverting changes.
Training on augumented user 97191 34/50 current_auc = 0.6552706552706553
User 97191 AUC after training: 0.6531339031339032
User 97191 does not improve AUC. Reverting changes.
Training on augumented user 6414 35/50 current_auc = 0.6552706552706553
User 6414 AUC after training: 0.6545584045584045
User 6414 does not improve AUC. Reverting changes.
Training on augumented user 134876 36/50 current_auc = 0.6552706552706553
User 134876 AUC after training: 0.650997150997151
User 134876 does not improve AUC. Reverting changes.
Training on augumented user 9511 37/50 current_auc = 0.6552706552706553
User 9511 AUC after training: 0.6509971509971509
User 9511 does not improve AUC. Reverting changes.
Training on augumented user 100531 38/50 current_auc = 0.6552706552706553
User 100531 AUC after training: 0.6531339031339032
User 100531 does not improve AUC. Reverting changes.
Training on augumented user 82159 39/50 current_auc = 0.6552706552706553
User 82159 AUC after training: 0.6509971509971509
User 82159 does not improve AUC. Reverting changes.
Training on augumented user 9656 40/50 current_auc = 0.6552706552706553
User 9656 AUC after training: 0.655982905982906
User 9656 improves AUC. Keeping the model.
Training on augumented user 33930 41/50 current_auc = 0.655982905982906
User 33930 AUC after training: 0.655982905982906
User 33930 does not improve AUC. Reverting changes.
Training on augumented user 9260 42/50 current_auc = 0.655982905982906
User 9260 AUC after training: 0.6538461538461539
User 9260 does not improve AUC. Reverting changes.
Training on augumented user 90339 43/50 current_auc = 0.655982905982906
User 90339 AUC after training: 0.655982905982906
User 90339 does not improve AUC. Reverting changes.
Training on augumented user 51147 44/50 current_auc = 0.655982905982906
User 51147 AUC after training: 0.6517094017094017
User 51147 does not improve AUC. Reverting changes.
Training on augumented user 71468 45/50 current_auc = 0.655982905982906
User 71468 AUC after training: 0.655982905982906
User 71468 does not improve AUC. Reverting changes.
Training on augumented user 88236 46/50 current_auc = 0.655982905982906
User 88236 AUC after training: 0.6545584045584045
User 88236 does not improve AUC. Reverting changes.
Training on augumented user 92802 47/50 current_auc = 0.655982905982906
User 92802 AUC after training: 0.6538461538461537
User 92802 does not improve AUC. Reverting changes.
Training on augumented user 2409 48/50 current_auc = 0.655982905982906
User 2409 AUC after training: 0.6545584045584046
User 2409 does not improve AUC. Reverting changes.
Training on augumented user 14058 49/50 current_auc = 0.655982905982906
User 14058 AUC after training: 0.6481481481481481
User 14058 does not improve AUC. Reverting changes.
[2024-12-02 20:20:50.736164] start test user 34723 291/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:51.141175] start test user 34723 291/568 recall augumented users by random, augumented_users = [89491, 121163, 21357, 47637, 99713, 44983, 54552, 63761, 107571, 61225, 49960, 55477, 93084, 41874, 83652, 83053, 98483, 64259, 135346, 473, 59236, 83808, 104947, 52378, 27013, 25341, 116250, 83569, 26517, 9191, 10559, 28152, 75952, 20173, 15145, 124068, 3372, 67531, 130736, 129923, 67303, 133417, 24258, 87976, 110633, 109047, 112025, 66057, 58458, 129354]
[2024-12-02 20:20:51.155309] user = 34723 Cloud 291/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:20:51.161606] user = 34723 Local 291/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:20:51.178199] user = 34723 Local+ 291/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:20:52.697197] user = 34723 MPDA- 291/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 89491 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89491 AUC after training: 0.5
User 89491 does not improve AUC. Reverting changes.
Training on augumented user 121163 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121163 AUC after training: 0.5
User 121163 does not improve AUC. Reverting changes.
Training on augumented user 21357 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21357 AUC after training: 0.5
User 21357 does not improve AUC. Reverting changes.
Training on augumented user 47637 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47637 AUC after training: 0.5
User 47637 does not improve AUC. Reverting changes.
Training on augumented user 99713 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99713 AUC after training: 0.5
User 99713 does not improve AUC. Reverting changes.
Training on augumented user 44983 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44983 AUC after training: 0.5
User 44983 does not improve AUC. Reverting changes.
Training on augumented user 54552 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54552 AUC after training: 0.5
User 54552 does not improve AUC. Reverting changes.
Training on augumented user 63761 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63761 AUC after training: 0.5
User 63761 does not improve AUC. Reverting changes.
Training on augumented user 107571 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107571 AUC after training: 0.5
User 107571 does not improve AUC. Reverting changes.
Training on augumented user 61225 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61225 AUC after training: 0.5
User 61225 does not improve AUC. Reverting changes.
Training on augumented user 49960 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49960 AUC after training: 0.5
User 49960 does not improve AUC. Reverting changes.
Training on augumented user 55477 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55477 AUC after training: 0.5
User 55477 does not improve AUC. Reverting changes.
Training on augumented user 93084 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93084 AUC after training: 0.5
User 93084 does not improve AUC. Reverting changes.
Training on augumented user 41874 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41874 AUC after training: 0.5
User 41874 does not improve AUC. Reverting changes.
Training on augumented user 83652 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83652 AUC after training: 0.5
User 83652 does not improve AUC. Reverting changes.
Training on augumented user 83053 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83053 AUC after training: 0.5
User 83053 does not improve AUC. Reverting changes.
Training on augumented user 98483 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98483 AUC after training: 0.5
User 98483 does not improve AUC. Reverting changes.
Training on augumented user 64259 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64259 AUC after training: 0.5
User 64259 does not improve AUC. Reverting changes.
Training on augumented user 135346 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135346 AUC after training: 0.5
User 135346 does not improve AUC. Reverting changes.
Training on augumented user 473 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 473 AUC after training: 0.5
User 473 does not improve AUC. Reverting changes.
Training on augumented user 59236 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59236 AUC after training: 0.5
User 59236 does not improve AUC. Reverting changes.
Training on augumented user 83808 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83808 AUC after training: 0.5
User 83808 does not improve AUC. Reverting changes.
Training on augumented user 104947 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104947 AUC after training: 0.5
User 104947 does not improve AUC. Reverting changes.
Training on augumented user 52378 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52378 AUC after training: 0.5
User 52378 does not improve AUC. Reverting changes.
Training on augumented user 27013 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27013 AUC after training: 0.5
User 27013 does not improve AUC. Reverting changes.
Training on augumented user 25341 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25341 AUC after training: 0.5
User 25341 does not improve AUC. Reverting changes.
Training on augumented user 116250 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116250 AUC after training: 0.5
User 116250 does not improve AUC. Reverting changes.
Training on augumented user 83569 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83569 AUC after training: 0.5
User 83569 does not improve AUC. Reverting changes.
Training on augumented user 26517 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26517 AUC after training: 0.5
User 26517 does not improve AUC. Reverting changes.
Training on augumented user 9191 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9191 AUC after training: 0.5
User 9191 does not improve AUC. Reverting changes.
Training on augumented user 10559 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10559 AUC after training: 0.5
User 10559 does not improve AUC. Reverting changes.
Training on augumented user 28152 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28152 AUC after training: 0.5
User 28152 does not improve AUC. Reverting changes.
Training on augumented user 75952 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75952 AUC after training: 0.5
User 75952 does not improve AUC. Reverting changes.
Training on augumented user 20173 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20173 AUC after training: 0.5
User 20173 does not improve AUC. Reverting changes.
Training on augumented user 15145 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15145 AUC after training: 0.5
User 15145 does not improve AUC. Reverting changes.
Training on augumented user 124068 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124068 AUC after training: 0.5
User 124068 does not improve AUC. Reverting changes.
Training on augumented user 3372 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3372 AUC after training: 0.5
User 3372 does not improve AUC. Reverting changes.
Training on augumented user 67531 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67531 AUC after training: 0.5
User 67531 does not improve AUC. Reverting changes.
Training on augumented user 130736 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130736 AUC after training: 0.5
User 130736 does not improve AUC. Reverting changes.
Training on augumented user 129923 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129923 AUC after training: 0.5
User 129923 does not improve AUC. Reverting changes.
Training on augumented user 67303 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67303 AUC after training: 0.5
User 67303 does not improve AUC. Reverting changes.
Training on augumented user 133417 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133417 AUC after training: 0.5
User 133417 does not improve AUC. Reverting changes.
Training on augumented user 24258 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24258 AUC after training: 0.5
User 24258 does not improve AUC. Reverting changes.
Training on augumented user 87976 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87976 AUC after training: 0.5
User 87976 does not improve AUC. Reverting changes.
Training on augumented user 110633 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110633 AUC after training: 0.5
User 110633 does not improve AUC. Reverting changes.
Training on augumented user 109047 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109047 AUC after training: 0.5
User 109047 does not improve AUC. Reverting changes.
Training on augumented user 112025 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112025 AUC after training: 0.5
User 112025 does not improve AUC. Reverting changes.
Training on augumented user 66057 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66057 AUC after training: 0.5
User 66057 does not improve AUC. Reverting changes.
Training on augumented user 58458 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58458 AUC after training: 0.5
User 58458 does not improve AUC. Reverting changes.
Training on augumented user 129354 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129354 AUC after training: 0.5
User 129354 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:21:19.569503] start test user 34743 292/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:19.979577] start test user 34743 292/568 recall augumented users by random, augumented_users = [54175, 70135, 18178, 119496, 101016, 113697, 87166, 91925, 64700, 100327, 109433, 102201, 61331, 69339, 89673, 63935, 65860, 39447, 89646, 53786, 74238, 8063, 44087, 54850, 75362, 116655, 15184, 107234, 51826, 68502, 135349, 130027, 43586, 129310, 13188, 18059, 111709, 60661, 19614, 72547, 48575, 10071, 8380, 35608, 107597, 43460, 114637, 63228, 119049, 11101]
[2024-12-02 20:21:20.001399] user = 34743 Cloud 292/568
[2024-12-02 20:21:20.012653] user = 34743 Local 292/568
[2024-12-02 20:21:20.080710] user = 34743 Local+ 292/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:21.675727] user = 34743 MPDA- 292/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.42875
Training on augumented user 54175 0/50 current_auc = 0.42875
User 54175 AUC after training: 0.42875
User 54175 does not improve AUC. Reverting changes.
Training on augumented user 70135 1/50 current_auc = 0.42875
User 70135 AUC after training: 0.42875
User 70135 does not improve AUC. Reverting changes.
Training on augumented user 18178 2/50 current_auc = 0.42875
User 18178 AUC after training: 0.42875
User 18178 does not improve AUC. Reverting changes.
Training on augumented user 119496 3/50 current_auc = 0.42875
User 119496 AUC after training: 0.42624999999999996
User 119496 does not improve AUC. Reverting changes.
Training on augumented user 101016 4/50 current_auc = 0.42875
User 101016 AUC after training: 0.4275
User 101016 does not improve AUC. Reverting changes.
Training on augumented user 113697 5/50 current_auc = 0.42875
User 113697 AUC after training: 0.43
User 113697 improves AUC. Keeping the model.
Training on augumented user 87166 6/50 current_auc = 0.43
User 87166 AUC after training: 0.42875
User 87166 does not improve AUC. Reverting changes.
Training on augumented user 91925 7/50 current_auc = 0.43
User 91925 AUC after training: 0.4312500000000001
User 91925 improves AUC. Keeping the model.
Training on augumented user 64700 8/50 current_auc = 0.4312500000000001
User 64700 AUC after training: 0.43000000000000005
User 64700 does not improve AUC. Reverting changes.
Training on augumented user 100327 9/50 current_auc = 0.4312500000000001
User 100327 AUC after training: 0.43125
User 100327 does not improve AUC. Reverting changes.
Training on augumented user 109433 10/50 current_auc = 0.4312500000000001
User 109433 AUC after training: 0.42125
User 109433 does not improve AUC. Reverting changes.
Training on augumented user 102201 11/50 current_auc = 0.4312500000000001
User 102201 AUC after training: 0.42875
User 102201 does not improve AUC. Reverting changes.
Training on augumented user 61331 12/50 current_auc = 0.4312500000000001
User 61331 AUC after training: 0.42750000000000005
User 61331 does not improve AUC. Reverting changes.
Training on augumented user 69339 13/50 current_auc = 0.4312500000000001
User 69339 AUC after training: 0.4312500000000001
User 69339 does not improve AUC. Reverting changes.
Training on augumented user 89673 14/50 current_auc = 0.4312500000000001
User 89673 AUC after training: 0.42875
User 89673 does not improve AUC. Reverting changes.
Training on augumented user 63935 15/50 current_auc = 0.4312500000000001
User 63935 AUC after training: 0.43125
User 63935 does not improve AUC. Reverting changes.
Training on augumented user 65860 16/50 current_auc = 0.4312500000000001
User 65860 AUC after training: 0.43375
User 65860 improves AUC. Keeping the model.
Training on augumented user 39447 17/50 current_auc = 0.43375
User 39447 AUC after training: 0.43000000000000005
User 39447 does not improve AUC. Reverting changes.
Training on augumented user 89646 18/50 current_auc = 0.43375
User 89646 AUC after training: 0.4300000000000001
User 89646 does not improve AUC. Reverting changes.
Training on augumented user 53786 19/50 current_auc = 0.43375
User 53786 AUC after training: 0.43000000000000005
User 53786 does not improve AUC. Reverting changes.
Training on augumented user 74238 20/50 current_auc = 0.43375
User 74238 AUC after training: 0.42625
User 74238 does not improve AUC. Reverting changes.
Training on augumented user 8063 21/50 current_auc = 0.43375
User 8063 AUC after training: 0.43000000000000005
User 8063 does not improve AUC. Reverting changes.
Training on augumented user 44087 22/50 current_auc = 0.43375
User 44087 AUC after training: 0.43125
User 44087 does not improve AUC. Reverting changes.
Training on augumented user 54850 23/50 current_auc = 0.43375
User 54850 AUC after training: 0.43125
User 54850 does not improve AUC. Reverting changes.
Training on augumented user 75362 24/50 current_auc = 0.43375
User 75362 AUC after training: 0.43500000000000005
User 75362 improves AUC. Keeping the model.
Training on augumented user 116655 25/50 current_auc = 0.43500000000000005
User 116655 AUC after training: 0.43250000000000005
User 116655 does not improve AUC. Reverting changes.
Training on augumented user 15184 26/50 current_auc = 0.43500000000000005
User 15184 AUC after training: 0.4337500000000001
User 15184 does not improve AUC. Reverting changes.
Training on augumented user 107234 27/50 current_auc = 0.43500000000000005
User 107234 AUC after training: 0.43
User 107234 does not improve AUC. Reverting changes.
Training on augumented user 51826 28/50 current_auc = 0.43500000000000005
User 51826 AUC after training: 0.434375
User 51826 does not improve AUC. Reverting changes.
Training on augumented user 68502 29/50 current_auc = 0.43500000000000005
User 68502 AUC after training: 0.43000000000000005
User 68502 does not improve AUC. Reverting changes.
Training on augumented user 135349 30/50 current_auc = 0.43500000000000005
User 135349 AUC after training: 0.42875
User 135349 does not improve AUC. Reverting changes.
Training on augumented user 130027 31/50 current_auc = 0.43500000000000005
User 130027 AUC after training: 0.43000000000000005
User 130027 does not improve AUC. Reverting changes.
Training on augumented user 43586 32/50 current_auc = 0.43500000000000005
User 43586 AUC after training: 0.435625
User 43586 improves AUC. Keeping the model.
Training on augumented user 129310 33/50 current_auc = 0.435625
User 129310 AUC after training: 0.43250000000000005
User 129310 does not improve AUC. Reverting changes.
Training on augumented user 13188 34/50 current_auc = 0.435625
User 13188 AUC after training: 0.43375
User 13188 does not improve AUC. Reverting changes.
Training on augumented user 18059 35/50 current_auc = 0.435625
User 18059 AUC after training: 0.434375
User 18059 does not improve AUC. Reverting changes.
Training on augumented user 111709 36/50 current_auc = 0.435625
User 111709 AUC after training: 0.43
User 111709 does not improve AUC. Reverting changes.
Training on augumented user 60661 37/50 current_auc = 0.435625
User 60661 AUC after training: 0.440625
User 60661 improves AUC. Keeping the model.
Training on augumented user 19614 38/50 current_auc = 0.440625
User 19614 AUC after training: 0.439375
User 19614 does not improve AUC. Reverting changes.
Training on augumented user 72547 39/50 current_auc = 0.440625
User 72547 AUC after training: 0.4275
User 72547 does not improve AUC. Reverting changes.
Training on augumented user 48575 40/50 current_auc = 0.440625
User 48575 AUC after training: 0.43749999999999994
User 48575 does not improve AUC. Reverting changes.
Training on augumented user 10071 41/50 current_auc = 0.440625
User 10071 AUC after training: 0.44249999999999995
User 10071 improves AUC. Keeping the model.
Training on augumented user 8380 42/50 current_auc = 0.44249999999999995
User 8380 AUC after training: 0.4287500000000001
User 8380 does not improve AUC. Reverting changes.
Training on augumented user 35608 43/50 current_auc = 0.44249999999999995
User 35608 AUC after training: 0.44
User 35608 does not improve AUC. Reverting changes.
Training on augumented user 107597 44/50 current_auc = 0.44249999999999995
User 107597 AUC after training: 0.43562500000000004
User 107597 does not improve AUC. Reverting changes.
Training on augumented user 43460 45/50 current_auc = 0.44249999999999995
User 43460 AUC after training: 0.439375
User 43460 does not improve AUC. Reverting changes.
Training on augumented user 114637 46/50 current_auc = 0.44249999999999995
User 114637 AUC after training: 0.4425
User 114637 improves AUC. Keeping the model.
Training on augumented user 63228 47/50 current_auc = 0.4425
User 63228 AUC after training: 0.43562500000000004
User 63228 does not improve AUC. Reverting changes.
Training on augumented user 119049 48/50 current_auc = 0.4425
User 119049 AUC after training: 0.44375
User 119049 improves AUC. Keeping the model.
Training on augumented user 11101 49/50 current_auc = 0.44375
User 11101 AUC after training: 0.430625
User 11101 does not improve AUC. Reverting changes.
[2024-12-02 20:21:49.010001] start test user 34758 293/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:49.585289] start test user 34758 293/568 recall augumented users by random, augumented_users = [35389, 89279, 114121, 111597, 102844, 3158, 35824, 52104, 38195, 109592, 77551, 38602, 91985, 106374, 92122, 127323, 112672, 104607, 109461, 94239, 5530, 12068, 62746, 81863, 49680, 60571, 80425, 69966, 21280, 131271, 4404, 77009, 88938, 48554, 2499, 65178, 56532, 47253, 82489, 48845, 12376, 13261, 16628, 84683, 48824, 14445, 40948, 30678, 41355, 88020]
[2024-12-02 20:21:49.613523] user = 34758 Cloud 293/568
[2024-12-02 20:21:49.632793] user = 34758 Local 293/568
[2024-12-02 20:21:49.737754] user = 34758 Local+ 293/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:51.864208] user = 34758 MPDA- 293/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7445175438596492
Training on augumented user 35389 0/50 current_auc = 0.7445175438596492
User 35389 AUC after training: 0.7434210526315789
User 35389 does not improve AUC. Reverting changes.
Training on augumented user 89279 1/50 current_auc = 0.7445175438596492
User 89279 AUC after training: 0.7439692982456141
User 89279 does not improve AUC. Reverting changes.
Training on augumented user 114121 2/50 current_auc = 0.7445175438596492
User 114121 AUC after training: 0.7434210526315789
User 114121 does not improve AUC. Reverting changes.
Training on augumented user 111597 3/50 current_auc = 0.7445175438596492
User 111597 AUC after training: 0.7450657894736843
User 111597 improves AUC. Keeping the model.
Training on augumented user 102844 4/50 current_auc = 0.7450657894736843
User 102844 AUC after training: 0.7467105263157895
User 102844 improves AUC. Keeping the model.
Training on augumented user 3158 5/50 current_auc = 0.7467105263157895
User 3158 AUC after training: 0.7434210526315789
User 3158 does not improve AUC. Reverting changes.
Training on augumented user 35824 6/50 current_auc = 0.7467105263157895
User 35824 AUC after training: 0.7439692982456141
User 35824 does not improve AUC. Reverting changes.
Training on augumented user 52104 7/50 current_auc = 0.7467105263157895
User 52104 AUC after training: 0.7439692982456141
User 52104 does not improve AUC. Reverting changes.
Training on augumented user 38195 8/50 current_auc = 0.7467105263157895
User 38195 AUC after training: 0.7456140350877193
User 38195 does not improve AUC. Reverting changes.
Training on augumented user 109592 9/50 current_auc = 0.7467105263157895
User 109592 AUC after training: 0.7456140350877193
User 109592 does not improve AUC. Reverting changes.
Training on augumented user 77551 10/50 current_auc = 0.7467105263157895
User 77551 AUC after training: 0.7428728070175439
User 77551 does not improve AUC. Reverting changes.
Training on augumented user 38602 11/50 current_auc = 0.7467105263157895
User 38602 AUC after training: 0.7423245614035088
User 38602 does not improve AUC. Reverting changes.
Training on augumented user 91985 12/50 current_auc = 0.7467105263157895
User 91985 AUC after training: 0.7467105263157895
User 91985 does not improve AUC. Reverting changes.
Training on augumented user 106374 13/50 current_auc = 0.7467105263157895
User 106374 AUC after training: 0.7445175438596491
User 106374 does not improve AUC. Reverting changes.
Training on augumented user 92122 14/50 current_auc = 0.7467105263157895
User 92122 AUC after training: 0.7467105263157895
User 92122 does not improve AUC. Reverting changes.
Training on augumented user 127323 15/50 current_auc = 0.7467105263157895
User 127323 AUC after training: 0.743969298245614
User 127323 does not improve AUC. Reverting changes.
Training on augumented user 112672 16/50 current_auc = 0.7467105263157895
User 112672 AUC after training: 0.7467105263157895
User 112672 does not improve AUC. Reverting changes.
Training on augumented user 104607 17/50 current_auc = 0.7467105263157895
User 104607 AUC after training: 0.7472587719298246
User 104607 improves AUC. Keeping the model.
Training on augumented user 109461 18/50 current_auc = 0.7472587719298246
User 109461 AUC after training: 0.7395833333333333
User 109461 does not improve AUC. Reverting changes.
Training on augumented user 94239 19/50 current_auc = 0.7472587719298246
User 94239 AUC after training: 0.7445175438596491
User 94239 does not improve AUC. Reverting changes.
Training on augumented user 5530 20/50 current_auc = 0.7472587719298246
User 5530 AUC after training: 0.7445175438596492
User 5530 does not improve AUC. Reverting changes.
Training on augumented user 12068 21/50 current_auc = 0.7472587719298246
User 12068 AUC after training: 0.7450657894736842
User 12068 does not improve AUC. Reverting changes.
Training on augumented user 62746 22/50 current_auc = 0.7472587719298246
User 62746 AUC after training: 0.743969298245614
User 62746 does not improve AUC. Reverting changes.
Training on augumented user 81863 23/50 current_auc = 0.7472587719298246
User 81863 AUC after training: 0.7461622807017544
User 81863 does not improve AUC. Reverting changes.
Training on augumented user 49680 24/50 current_auc = 0.7472587719298246
User 49680 AUC after training: 0.7445175438596492
User 49680 does not improve AUC. Reverting changes.
Training on augumented user 60571 25/50 current_auc = 0.7472587719298246
User 60571 AUC after training: 0.743969298245614
User 60571 does not improve AUC. Reverting changes.
Training on augumented user 80425 26/50 current_auc = 0.7472587719298246
User 80425 AUC after training: 0.7434210526315789
User 80425 does not improve AUC. Reverting changes.
Training on augumented user 69966 27/50 current_auc = 0.7472587719298246
User 69966 AUC after training: 0.743421052631579
User 69966 does not improve AUC. Reverting changes.
Training on augumented user 21280 28/50 current_auc = 0.7472587719298246
User 21280 AUC after training: 0.7434210526315789
User 21280 does not improve AUC. Reverting changes.
Training on augumented user 131271 29/50 current_auc = 0.7472587719298246
User 131271 AUC after training: 0.7478070175438596
User 131271 improves AUC. Keeping the model.
Training on augumented user 4404 30/50 current_auc = 0.7478070175438596
User 4404 AUC after training: 0.7472587719298245
User 4404 does not improve AUC. Reverting changes.
Training on augumented user 77009 31/50 current_auc = 0.7478070175438596
User 77009 AUC after training: 0.7461622807017544
User 77009 does not improve AUC. Reverting changes.
Training on augumented user 88938 32/50 current_auc = 0.7478070175438596
User 88938 AUC after training: 0.7428728070175439
User 88938 does not improve AUC. Reverting changes.
Training on augumented user 48554 33/50 current_auc = 0.7478070175438596
User 48554 AUC after training: 0.7406798245614035
User 48554 does not improve AUC. Reverting changes.
Training on augumented user 2499 34/50 current_auc = 0.7478070175438596
User 2499 AUC after training: 0.7472587719298245
User 2499 does not improve AUC. Reverting changes.
Training on augumented user 65178 35/50 current_auc = 0.7478070175438596
User 65178 AUC after training: 0.7467105263157895
User 65178 does not improve AUC. Reverting changes.
Training on augumented user 56532 36/50 current_auc = 0.7478070175438596
User 56532 AUC after training: 0.7450657894736842
User 56532 does not improve AUC. Reverting changes.
Training on augumented user 47253 37/50 current_auc = 0.7478070175438596
User 47253 AUC after training: 0.7450657894736842
User 47253 does not improve AUC. Reverting changes.
Training on augumented user 82489 38/50 current_auc = 0.7478070175438596
User 82489 AUC after training: 0.7445175438596491
User 82489 does not improve AUC. Reverting changes.
Training on augumented user 48845 39/50 current_auc = 0.7478070175438596
User 48845 AUC after training: 0.743969298245614
User 48845 does not improve AUC. Reverting changes.
Training on augumented user 12376 40/50 current_auc = 0.7478070175438596
User 12376 AUC after training: 0.7472587719298245
User 12376 does not improve AUC. Reverting changes.
Training on augumented user 13261 41/50 current_auc = 0.7478070175438596
User 13261 AUC after training: 0.7450657894736842
User 13261 does not improve AUC. Reverting changes.
Training on augumented user 16628 42/50 current_auc = 0.7478070175438596
User 16628 AUC after training: 0.7445175438596492
User 16628 does not improve AUC. Reverting changes.
Training on augumented user 84683 43/50 current_auc = 0.7478070175438596
User 84683 AUC after training: 0.7478070175438596
User 84683 does not improve AUC. Reverting changes.
Training on augumented user 48824 44/50 current_auc = 0.7478070175438596
User 48824 AUC after training: 0.7467105263157894
User 48824 does not improve AUC. Reverting changes.
Training on augumented user 14445 45/50 current_auc = 0.7478070175438596
User 14445 AUC after training: 0.7450657894736843
User 14445 does not improve AUC. Reverting changes.
Training on augumented user 40948 46/50 current_auc = 0.7478070175438596
User 40948 AUC after training: 0.7472587719298245
User 40948 does not improve AUC. Reverting changes.
Training on augumented user 30678 47/50 current_auc = 0.7478070175438596
User 30678 AUC after training: 0.743421052631579
User 30678 does not improve AUC. Reverting changes.
Training on augumented user 41355 48/50 current_auc = 0.7478070175438596
User 41355 AUC after training: 0.7472587719298245
User 41355 does not improve AUC. Reverting changes.
Training on augumented user 88020 49/50 current_auc = 0.7478070175438596
User 88020 AUC after training: 0.7445175438596492
User 88020 does not improve AUC. Reverting changes.
[2024-12-02 20:22:18.653828] start test user 34768 294/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:19.352368] start test user 34768 294/568 recall augumented users by random, augumented_users = [119461, 8869, 35969, 56640, 116380, 109176, 56689, 43953, 108620, 26656, 51126, 17572, 118851, 70657, 34017, 91173, 33992, 56732, 10566, 46484, 59535, 52746, 8298, 18834, 102314, 111305, 61251, 44725, 24514, 42499, 94402, 114353, 138259, 90692, 131940, 130595, 95071, 87378, 135827, 109108, 87851, 115894, 65818, 105018, 123337, 37001, 117886, 91112, 15849, 126731]
[2024-12-02 20:22:19.366729] user = 34768 Cloud 294/568
[2024-12-02 20:22:19.375960] user = 34768 Local 294/568
[2024-12-02 20:22:19.401055] user = 34768 Local+ 294/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:21.467435] user = 34768 MPDA- 294/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.625
Training on augumented user 119461 0/50 current_auc = 0.625
User 119461 AUC after training: 0.625
User 119461 does not improve AUC. Reverting changes.
Training on augumented user 8869 1/50 current_auc = 0.625
User 8869 AUC after training: 0.625
User 8869 does not improve AUC. Reverting changes.
Training on augumented user 35969 2/50 current_auc = 0.625
User 35969 AUC after training: 0.625
User 35969 does not improve AUC. Reverting changes.
Training on augumented user 56640 3/50 current_auc = 0.625
User 56640 AUC after training: 0.625
User 56640 does not improve AUC. Reverting changes.
Training on augumented user 116380 4/50 current_auc = 0.625
User 116380 AUC after training: 0.625
User 116380 does not improve AUC. Reverting changes.
Training on augumented user 109176 5/50 current_auc = 0.625
User 109176 AUC after training: 0.625
User 109176 does not improve AUC. Reverting changes.
Training on augumented user 56689 6/50 current_auc = 0.625
User 56689 AUC after training: 0.625
User 56689 does not improve AUC. Reverting changes.
Training on augumented user 43953 7/50 current_auc = 0.625
User 43953 AUC after training: 0.625
User 43953 does not improve AUC. Reverting changes.
Training on augumented user 108620 8/50 current_auc = 0.625
User 108620 AUC after training: 0.625
User 108620 does not improve AUC. Reverting changes.
Training on augumented user 26656 9/50 current_auc = 0.625
User 26656 AUC after training: 0.625
User 26656 does not improve AUC. Reverting changes.
Training on augumented user 51126 10/50 current_auc = 0.625
User 51126 AUC after training: 0.625
User 51126 does not improve AUC. Reverting changes.
Training on augumented user 17572 11/50 current_auc = 0.625
User 17572 AUC after training: 0.625
User 17572 does not improve AUC. Reverting changes.
Training on augumented user 118851 12/50 current_auc = 0.625
User 118851 AUC after training: 0.625
User 118851 does not improve AUC. Reverting changes.
Training on augumented user 70657 13/50 current_auc = 0.625
User 70657 AUC after training: 0.625
User 70657 does not improve AUC. Reverting changes.
Training on augumented user 34017 14/50 current_auc = 0.625
User 34017 AUC after training: 0.625
User 34017 does not improve AUC. Reverting changes.
Training on augumented user 91173 15/50 current_auc = 0.625
User 91173 AUC after training: 0.625
User 91173 does not improve AUC. Reverting changes.
Training on augumented user 33992 16/50 current_auc = 0.625
User 33992 AUC after training: 0.625
User 33992 does not improve AUC. Reverting changes.
Training on augumented user 56732 17/50 current_auc = 0.625
User 56732 AUC after training: 0.625
User 56732 does not improve AUC. Reverting changes.
Training on augumented user 10566 18/50 current_auc = 0.625
User 10566 AUC after training: 0.625
User 10566 does not improve AUC. Reverting changes.
Training on augumented user 46484 19/50 current_auc = 0.625
User 46484 AUC after training: 0.625
User 46484 does not improve AUC. Reverting changes.
Training on augumented user 59535 20/50 current_auc = 0.625
User 59535 AUC after training: 0.625
User 59535 does not improve AUC. Reverting changes.
Training on augumented user 52746 21/50 current_auc = 0.625
User 52746 AUC after training: 0.625
User 52746 does not improve AUC. Reverting changes.
Training on augumented user 8298 22/50 current_auc = 0.625
User 8298 AUC after training: 0.625
User 8298 does not improve AUC. Reverting changes.
Training on augumented user 18834 23/50 current_auc = 0.625
User 18834 AUC after training: 0.625
User 18834 does not improve AUC. Reverting changes.
Training on augumented user 102314 24/50 current_auc = 0.625
User 102314 AUC after training: 0.625
User 102314 does not improve AUC. Reverting changes.
Training on augumented user 111305 25/50 current_auc = 0.625
User 111305 AUC after training: 0.625
User 111305 does not improve AUC. Reverting changes.
Training on augumented user 61251 26/50 current_auc = 0.625
User 61251 AUC after training: 0.625
User 61251 does not improve AUC. Reverting changes.
Training on augumented user 44725 27/50 current_auc = 0.625
User 44725 AUC after training: 0.625
User 44725 does not improve AUC. Reverting changes.
Training on augumented user 24514 28/50 current_auc = 0.625
User 24514 AUC after training: 0.625
User 24514 does not improve AUC. Reverting changes.
Training on augumented user 42499 29/50 current_auc = 0.625
User 42499 AUC after training: 0.625
User 42499 does not improve AUC. Reverting changes.
Training on augumented user 94402 30/50 current_auc = 0.625
User 94402 AUC after training: 0.625
User 94402 does not improve AUC. Reverting changes.
Training on augumented user 114353 31/50 current_auc = 0.625
User 114353 AUC after training: 0.625
User 114353 does not improve AUC. Reverting changes.
Training on augumented user 138259 32/50 current_auc = 0.625
User 138259 AUC after training: 0.625
User 138259 does not improve AUC. Reverting changes.
Training on augumented user 90692 33/50 current_auc = 0.625
User 90692 AUC after training: 0.625
User 90692 does not improve AUC. Reverting changes.
Training on augumented user 131940 34/50 current_auc = 0.625
User 131940 AUC after training: 0.625
User 131940 does not improve AUC. Reverting changes.
Training on augumented user 130595 35/50 current_auc = 0.625
User 130595 AUC after training: 0.625
User 130595 does not improve AUC. Reverting changes.
Training on augumented user 95071 36/50 current_auc = 0.625
User 95071 AUC after training: 0.625
User 95071 does not improve AUC. Reverting changes.
Training on augumented user 87378 37/50 current_auc = 0.625
User 87378 AUC after training: 0.625
User 87378 does not improve AUC. Reverting changes.
Training on augumented user 135827 38/50 current_auc = 0.625
User 135827 AUC after training: 0.625
User 135827 does not improve AUC. Reverting changes.
Training on augumented user 109108 39/50 current_auc = 0.625
User 109108 AUC after training: 0.625
User 109108 does not improve AUC. Reverting changes.
Training on augumented user 87851 40/50 current_auc = 0.625
User 87851 AUC after training: 0.625
User 87851 does not improve AUC. Reverting changes.
Training on augumented user 115894 41/50 current_auc = 0.625
User 115894 AUC after training: 0.625
User 115894 does not improve AUC. Reverting changes.
Training on augumented user 65818 42/50 current_auc = 0.625
User 65818 AUC after training: 0.625
User 65818 does not improve AUC. Reverting changes.
Training on augumented user 105018 43/50 current_auc = 0.625
User 105018 AUC after training: 0.625
User 105018 does not improve AUC. Reverting changes.
Training on augumented user 123337 44/50 current_auc = 0.625
User 123337 AUC after training: 0.625
User 123337 does not improve AUC. Reverting changes.
Training on augumented user 37001 45/50 current_auc = 0.625
User 37001 AUC after training: 0.625
User 37001 does not improve AUC. Reverting changes.
Training on augumented user 117886 46/50 current_auc = 0.625
User 117886 AUC after training: 0.625
User 117886 does not improve AUC. Reverting changes.
Training on augumented user 91112 47/50 current_auc = 0.625
User 91112 AUC after training: 0.625
User 91112 does not improve AUC. Reverting changes.
Training on augumented user 15849 48/50 current_auc = 0.625
User 15849 AUC after training: 0.625
User 15849 does not improve AUC. Reverting changes.
Training on augumented user 126731 49/50 current_auc = 0.625
User 126731 AUC after training: 0.625
User 126731 does not improve AUC. Reverting changes.
[2024-12-02 20:22:50.204093] start test user 34770 295/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:50.876639] start test user 34770 295/568 recall augumented users by random, augumented_users = [108103, 34985, 102133, 65835, 92552, 64184, 126517, 63069, 104539, 124709, 59791, 11505, 128704, 99039, 99060, 20123, 119190, 34366, 20547, 97545, 36667, 61330, 20678, 109615, 24658, 120374, 11630, 10134, 116552, 92968, 94887, 3112, 81052, 45033, 101051, 52124, 74833, 101103, 30392, 122461, 65131, 85739, 8865, 41585, 65966, 83836, 98939, 114021, 54160, 108201]
[2024-12-02 20:22:50.904376] user = 34770 Cloud 295/568
[2024-12-02 20:22:50.920295] user = 34770 Local 295/568
[2024-12-02 20:22:51.166967] user = 34770 Local+ 295/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:53.592357] user = 34770 MPDA- 295/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6765765765765765
Training on augumented user 108103 0/50 current_auc = 0.6765765765765765
User 108103 AUC after training: 0.6828828828828828
User 108103 improves AUC. Keeping the model.
Training on augumented user 34985 1/50 current_auc = 0.6828828828828828
User 34985 AUC after training: 0.6765765765765767
User 34985 does not improve AUC. Reverting changes.
Training on augumented user 102133 2/50 current_auc = 0.6828828828828828
User 102133 AUC after training: 0.6756756756756757
User 102133 does not improve AUC. Reverting changes.
Training on augumented user 65835 3/50 current_auc = 0.6828828828828828
User 65835 AUC after training: 0.6873873873873874
User 65835 improves AUC. Keeping the model.
Training on augumented user 92552 4/50 current_auc = 0.6873873873873874
User 92552 AUC after training: 0.6891891891891891
User 92552 improves AUC. Keeping the model.
Training on augumented user 64184 5/50 current_auc = 0.6891891891891891
User 64184 AUC after training: 0.6891891891891891
User 64184 does not improve AUC. Reverting changes.
Training on augumented user 126517 6/50 current_auc = 0.6891891891891891
User 126517 AUC after training: 0.6882882882882883
User 126517 does not improve AUC. Reverting changes.
Training on augumented user 63069 7/50 current_auc = 0.6891891891891891
User 63069 AUC after training: 0.6855855855855856
User 63069 does not improve AUC. Reverting changes.
Training on augumented user 104539 8/50 current_auc = 0.6891891891891891
User 104539 AUC after training: 0.69009009009009
User 104539 improves AUC. Keeping the model.
Training on augumented user 124709 9/50 current_auc = 0.69009009009009
User 124709 AUC after training: 0.690990990990991
User 124709 improves AUC. Keeping the model.
Training on augumented user 59791 10/50 current_auc = 0.690990990990991
User 59791 AUC after training: 0.690990990990991
User 59791 does not improve AUC. Reverting changes.
Training on augumented user 11505 11/50 current_auc = 0.690990990990991
User 11505 AUC after training: 0.6873873873873874
User 11505 does not improve AUC. Reverting changes.
Training on augumented user 128704 12/50 current_auc = 0.690990990990991
User 128704 AUC after training: 0.690990990990991
User 128704 does not improve AUC. Reverting changes.
Training on augumented user 99039 13/50 current_auc = 0.690990990990991
User 99039 AUC after training: 0.6864864864864865
User 99039 does not improve AUC. Reverting changes.
Training on augumented user 99060 14/50 current_auc = 0.690990990990991
User 99060 AUC after training: 0.69009009009009
User 99060 does not improve AUC. Reverting changes.
Training on augumented user 20123 15/50 current_auc = 0.690990990990991
User 20123 AUC after training: 0.690990990990991
User 20123 does not improve AUC. Reverting changes.
Training on augumented user 119190 16/50 current_auc = 0.690990990990991
User 119190 AUC after training: 0.6882882882882883
User 119190 does not improve AUC. Reverting changes.
Training on augumented user 34366 17/50 current_auc = 0.690990990990991
User 34366 AUC after training: 0.6945945945945946
User 34366 improves AUC. Keeping the model.
Training on augumented user 20547 18/50 current_auc = 0.6945945945945946
User 20547 AUC after training: 0.6945945945945946
User 20547 does not improve AUC. Reverting changes.
Training on augumented user 97545 19/50 current_auc = 0.6945945945945946
User 97545 AUC after training: 0.6927927927927928
User 97545 does not improve AUC. Reverting changes.
Training on augumented user 36667 20/50 current_auc = 0.6945945945945946
User 36667 AUC after training: 0.6936936936936937
User 36667 does not improve AUC. Reverting changes.
Training on augumented user 61330 21/50 current_auc = 0.6945945945945946
User 61330 AUC after training: 0.6918918918918919
User 61330 does not improve AUC. Reverting changes.
Training on augumented user 20678 22/50 current_auc = 0.6945945945945946
User 20678 AUC after training: 0.6954954954954955
User 20678 improves AUC. Keeping the model.
Training on augumented user 109615 23/50 current_auc = 0.6954954954954955
User 109615 AUC after training: 0.6981981981981983
User 109615 improves AUC. Keeping the model.
Training on augumented user 24658 24/50 current_auc = 0.6981981981981983
User 24658 AUC after training: 0.6981981981981982
User 24658 does not improve AUC. Reverting changes.
Training on augumented user 120374 25/50 current_auc = 0.6981981981981983
User 120374 AUC after training: 0.6981981981981983
User 120374 does not improve AUC. Reverting changes.
Training on augumented user 11630 26/50 current_auc = 0.6981981981981983
User 11630 AUC after training: 0.6972972972972974
User 11630 does not improve AUC. Reverting changes.
Training on augumented user 10134 27/50 current_auc = 0.6981981981981983
User 10134 AUC after training: 0.7000000000000001
User 10134 improves AUC. Keeping the model.
Training on augumented user 116552 28/50 current_auc = 0.7000000000000001
User 116552 AUC after training: 0.7000000000000001
User 116552 does not improve AUC. Reverting changes.
Training on augumented user 92968 29/50 current_auc = 0.7000000000000001
User 92968 AUC after training: 0.6972972972972973
User 92968 does not improve AUC. Reverting changes.
Training on augumented user 94887 30/50 current_auc = 0.7000000000000001
User 94887 AUC after training: 0.7000000000000001
User 94887 does not improve AUC. Reverting changes.
Training on augumented user 3112 31/50 current_auc = 0.7000000000000001
User 3112 AUC after training: 0.6972972972972974
User 3112 does not improve AUC. Reverting changes.
Training on augumented user 81052 32/50 current_auc = 0.7000000000000001
User 81052 AUC after training: 0.6945945945945946
User 81052 does not improve AUC. Reverting changes.
Training on augumented user 45033 33/50 current_auc = 0.7000000000000001
User 45033 AUC after training: 0.6981981981981983
User 45033 does not improve AUC. Reverting changes.
Training on augumented user 101051 34/50 current_auc = 0.7000000000000001
User 101051 AUC after training: 0.6990990990990992
User 101051 does not improve AUC. Reverting changes.
Training on augumented user 52124 35/50 current_auc = 0.7000000000000001
User 52124 AUC after training: 0.700900900900901
User 52124 improves AUC. Keeping the model.
Training on augumented user 74833 36/50 current_auc = 0.700900900900901
User 74833 AUC after training: 0.6990990990990992
User 74833 does not improve AUC. Reverting changes.
Training on augumented user 101103 37/50 current_auc = 0.700900900900901
User 101103 AUC after training: 0.6981981981981983
User 101103 does not improve AUC. Reverting changes.
Training on augumented user 30392 38/50 current_auc = 0.700900900900901
User 30392 AUC after training: 0.6936936936936936
User 30392 does not improve AUC. Reverting changes.
Training on augumented user 122461 39/50 current_auc = 0.700900900900901
User 122461 AUC after training: 0.700900900900901
User 122461 does not improve AUC. Reverting changes.
Training on augumented user 65131 40/50 current_auc = 0.700900900900901
User 65131 AUC after training: 0.6972972972972974
User 65131 does not improve AUC. Reverting changes.
Training on augumented user 85739 41/50 current_auc = 0.700900900900901
User 85739 AUC after training: 0.7
User 85739 does not improve AUC. Reverting changes.
Training on augumented user 8865 42/50 current_auc = 0.700900900900901
User 8865 AUC after training: 0.6990990990990992
User 8865 does not improve AUC. Reverting changes.
Training on augumented user 41585 43/50 current_auc = 0.700900900900901
User 41585 AUC after training: 0.7000000000000001
User 41585 does not improve AUC. Reverting changes.
Training on augumented user 65966 44/50 current_auc = 0.700900900900901
User 65966 AUC after training: 0.6990990990990992
User 65966 does not improve AUC. Reverting changes.
Training on augumented user 83836 45/50 current_auc = 0.700900900900901
User 83836 AUC after training: 0.6990990990990992
User 83836 does not improve AUC. Reverting changes.
Training on augumented user 98939 46/50 current_auc = 0.700900900900901
User 98939 AUC after training: 0.6963963963963964
User 98939 does not improve AUC. Reverting changes.
Training on augumented user 114021 47/50 current_auc = 0.700900900900901
User 114021 AUC after training: 0.6990990990990992
User 114021 does not improve AUC. Reverting changes.
Training on augumented user 54160 48/50 current_auc = 0.700900900900901
User 54160 AUC after training: 0.6954954954954954
User 54160 does not improve AUC. Reverting changes.
Training on augumented user 108201 49/50 current_auc = 0.700900900900901
User 108201 AUC after training: 0.6990990990990992
User 108201 does not improve AUC. Reverting changes.
[2024-12-02 20:23:24.345662] start test user 34856 296/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:25.024666] start test user 34856 296/568 recall augumented users by random, augumented_users = [120050, 86251, 25044, 98697, 129127, 4205, 97296, 108129, 19406, 55079, 10977, 72546, 122860, 91888, 64990, 136170, 85034, 79961, 121414, 61258, 5976, 57064, 120948, 92209, 5905, 115566, 62999, 118640, 27741, 64674, 125201, 102268, 59887, 73707, 46386, 125550, 46731, 118097, 18367, 35886, 66251, 38387, 45827, 129837, 84581, 17139, 29230, 36294, 61166, 65439]
[2024-12-02 20:23:25.045551] user = 34856 Cloud 296/568
[2024-12-02 20:23:25.072067] user = 34856 Local 296/568
[2024-12-02 20:23:25.440220] user = 34856 Local+ 296/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:29.109578] user = 34856 MPDA- 296/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5763414960524555
Training on augumented user 120050 0/50 current_auc = 0.5763414960524555
User 120050 AUC after training: 0.576096168428565
User 120050 does not improve AUC. Reverting changes.
Training on augumented user 86251 1/50 current_auc = 0.5763414960524555
User 86251 AUC after training: 0.5763414960524554
User 86251 does not improve AUC. Reverting changes.
Training on augumented user 25044 2/50 current_auc = 0.5763414960524555
User 25044 AUC after training: 0.5762522860074044
User 25044 does not improve AUC. Reverting changes.
Training on augumented user 98697 3/50 current_auc = 0.5763414960524555
User 98697 AUC after training: 0.5761630759623533
User 98697 does not improve AUC. Reverting changes.
Training on augumented user 129127 4/50 current_auc = 0.5763414960524555
User 129127 AUC after training: 0.5772782015254918
User 129127 improves AUC. Keeping the model.
Training on augumented user 4205 5/50 current_auc = 0.5772782015254918
User 4205 AUC after training: 0.5776350417056961
User 4205 improves AUC. Keeping the model.
Training on augumented user 97296 6/50 current_auc = 0.5776350417056961
User 97296 AUC after training: 0.5771889914804407
User 97296 does not improve AUC. Reverting changes.
Training on augumented user 108129 7/50 current_auc = 0.5776350417056961
User 108129 AUC after training: 0.5777688567732726
User 108129 improves AUC. Keeping the model.
Training on augumented user 19406 8/50 current_auc = 0.5777688567732726
User 19406 AUC after training: 0.5766537312101342
User 19406 does not improve AUC. Reverting changes.
Training on augumented user 55079 9/50 current_auc = 0.5777688567732726
User 55079 AUC after training: 0.577635041705696
User 55079 does not improve AUC. Reverting changes.
Training on augumented user 10977 10/50 current_auc = 0.5777688567732726
User 10977 AUC after training: 0.5743342700388063
User 10977 does not improve AUC. Reverting changes.
Training on augumented user 72546 11/50 current_auc = 0.5777688567732726
User 72546 AUC after training: 0.5783933270886301
User 72546 improves AUC. Keeping the model.
Training on augumented user 122860 12/50 current_auc = 0.5783933270886301
User 122860 AUC after training: 0.5755832106695213
User 122860 does not improve AUC. Reverting changes.
Training on augumented user 91888 13/50 current_auc = 0.5783933270886301
User 91888 AUC after training: 0.5779472768633749
User 91888 does not improve AUC. Reverting changes.
Training on augumented user 64990 14/50 current_auc = 0.5783933270886301
User 64990 AUC after training: 0.578883982336411
User 64990 improves AUC. Keeping the model.
Training on augumented user 136170 15/50 current_auc = 0.578883982336411
User 136170 AUC after training: 0.5793300325616665
User 136170 improves AUC. Keeping the model.
Training on augumented user 85034 16/50 current_auc = 0.5793300325616665
User 85034 AUC after training: 0.5766091261876087
User 85034 does not improve AUC. Reverting changes.
Training on augumented user 79961 17/50 current_auc = 0.5793300325616665
User 79961 AUC after training: 0.5797314777643963
User 79961 improves AUC. Keeping the model.
Training on augumented user 121414 18/50 current_auc = 0.5797314777643963
User 121414 AUC after training: 0.5795530576742941
User 121414 does not improve AUC. Reverting changes.
Training on augumented user 61258 19/50 current_auc = 0.5797314777643963
User 61258 AUC after training: 0.5785271421562068
User 61258 does not improve AUC. Reverting changes.
Training on augumented user 5976 20/50 current_auc = 0.5797314777643963
User 5976 AUC after training: 0.5795976626968198
User 5976 does not improve AUC. Reverting changes.
Training on augumented user 57064 21/50 current_auc = 0.5797314777643963
User 57064 AUC after training: 0.5756055131807841
User 57064 does not improve AUC. Reverting changes.
Training on augumented user 120948 22/50 current_auc = 0.5797314777643963
User 120948 AUC after training: 0.5743788750613319
User 120948 does not improve AUC. Reverting changes.
Training on augumented user 92209 23/50 current_auc = 0.5797314777643963
User 92209 AUC after training: 0.579954502877024
User 92209 improves AUC. Keeping the model.
Training on augumented user 5905 24/50 current_auc = 0.579954502877024
User 5905 AUC after training: 0.5802667380347027
User 5905 improves AUC. Keeping the model.
Training on augumented user 115566 25/50 current_auc = 0.5802667380347027
User 115566 AUC after training: 0.5807127882599581
User 115566 improves AUC. Keeping the model.
Training on augumented user 62999 26/50 current_auc = 0.5807127882599581
User 62999 AUC after training: 0.5793746375841919
User 62999 does not improve AUC. Reverting changes.
Training on augumented user 118640 27/50 current_auc = 0.5807127882599581
User 118640 AUC after training: 0.5808466033275348
User 118640 improves AUC. Keeping the model.
Training on augumented user 27741 28/50 current_auc = 0.5808466033275348
User 27741 AUC after training: 0.5803113430572282
User 27741 does not improve AUC. Reverting changes.
Training on augumented user 64674 29/50 current_auc = 0.5808466033275348
User 64674 AUC after training: 0.5809804183951113
User 64674 improves AUC. Keeping the model.
Training on augumented user 125201 30/50 current_auc = 0.5809804183951113
User 125201 AUC after training: 0.5810250234176368
User 125201 improves AUC. Keeping the model.
Training on augumented user 102268 31/50 current_auc = 0.5810250234176368
User 102268 AUC after training: 0.5809804183951113
User 102268 does not improve AUC. Reverting changes.
Training on augumented user 59887 32/50 current_auc = 0.5810250234176368
User 59887 AUC after training: 0.5806681832374325
User 59887 does not improve AUC. Reverting changes.
Training on augumented user 73707 33/50 current_auc = 0.5810250234176368
User 73707 AUC after training: 0.5804451581248049
User 73707 does not improve AUC. Reverting changes.
Training on augumented user 46386 34/50 current_auc = 0.5810250234176368
User 46386 AUC after training: 0.5808912083500601
User 46386 does not improve AUC. Reverting changes.
Training on augumented user 125550 35/50 current_auc = 0.5810250234176368
User 125550 AUC after training: 0.5799991078995494
User 125550 does not improve AUC. Reverting changes.
Training on augumented user 46731 36/50 current_auc = 0.5810250234176368
User 46731 AUC after training: 0.5808019983050092
User 46731 does not improve AUC. Reverting changes.
Training on augumented user 118097 37/50 current_auc = 0.5810250234176368
User 118097 AUC after training: 0.5809358133725858
User 118097 does not improve AUC. Reverting changes.
Training on augumented user 18367 38/50 current_auc = 0.5810250234176368
User 18367 AUC after training: 0.5807127882599581
User 18367 does not improve AUC. Reverting changes.
Training on augumented user 35886 39/50 current_auc = 0.5810250234176368
User 35886 AUC after training: 0.5796422677193452
User 35886 does not improve AUC. Reverting changes.
Training on augumented user 66251 40/50 current_auc = 0.5810250234176368
User 66251 AUC after training: 0.5804897631473305
User 66251 does not improve AUC. Reverting changes.
Training on augumented user 38387 41/50 current_auc = 0.5810250234176368
User 38387 AUC after training: 0.5805789731923815
User 38387 does not improve AUC. Reverting changes.
Training on augumented user 45827 42/50 current_auc = 0.5810250234176368
User 45827 AUC after training: 0.5809358133725858
User 45827 does not improve AUC. Reverting changes.
Training on augumented user 129837 43/50 current_auc = 0.5810250234176368
User 129837 AUC after training: 0.5806681832374325
User 129837 does not improve AUC. Reverting changes.
Training on augumented user 84581 44/50 current_auc = 0.5810250234176368
User 84581 AUC after training: 0.580043712922075
User 84581 does not improve AUC. Reverting changes.
Training on augumented user 17139 45/50 current_auc = 0.5810250234176368
User 17139 AUC after training: 0.5811588384852134
User 17139 improves AUC. Keeping the model.
Training on augumented user 29230 46/50 current_auc = 0.5811588384852134
User 29230 AUC after training: 0.5802667380347026
User 29230 does not improve AUC. Reverting changes.
Training on augumented user 36294 47/50 current_auc = 0.5811588384852134
User 36294 AUC after training: 0.5812480485302645
User 36294 improves AUC. Keeping the model.
Training on augumented user 61166 48/50 current_auc = 0.5812480485302645
User 61166 AUC after training: 0.5810250234176368
User 61166 does not improve AUC. Reverting changes.
Training on augumented user 65439 49/50 current_auc = 0.5812480485302645
User 65439 AUC after training: 0.5813818635978412
User 65439 improves AUC. Keeping the model.
[2024-12-02 20:24:00.309477] start test user 34899 297/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:24:01.028395] start test user 34899 297/568 recall augumented users by random, augumented_users = [106960, 97471, 101066, 111781, 20217, 29868, 62903, 65744, 47680, 117766, 6781, 108116, 93007, 20918, 42753, 19170, 55522, 116890, 72538, 128125, 9065, 102441, 43031, 113134, 18590, 62482, 106021, 80385, 16704, 114878, 10367, 30166, 44436, 28831, 111401, 122022, 133121, 136290, 75476, 114816, 59472, 24551, 135972, 97398, 31316, 87073, 4186, 93389, 125081, 10348]
[2024-12-02 20:24:01.052150] user = 34899 Cloud 297/568
[2024-12-02 20:24:01.071545] user = 34899 Local 297/568
[2024-12-02 20:24:01.400754] user = 34899 Local+ 297/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
